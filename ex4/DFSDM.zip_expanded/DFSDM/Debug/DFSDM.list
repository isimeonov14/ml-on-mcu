
DFSDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000499c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004b2c  08004b2c  00014b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bb0  08004bb0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004bb0  08004bb0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bb0  08004bb0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bb0  08004bb0  00014bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bb4  08004bb4  00014bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022c8  20000068  08004c20  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20002330  08004c20  00022330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b59c  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ee9  00000000  00000000  0002b677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba8  00000000  00000000  0002d560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008c9  00000000  00000000  0002e108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002654a  00000000  00000000  0002e9d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cb1a  00000000  00000000  00054f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9450  00000000  00000000  00061a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000036b0  00000000  00000000  0014ae88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0014e538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b14 	.word	0x08004b14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004b14 	.word	0x08004b14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the serial port and Loop until the end of transmission */
  while (HAL_OK != HAL_USART_Transmit(&husart1, (uint8_t *) &ch, 1, 30000))
 8000278:	bf00      	nop
 800027a:	1d39      	adds	r1, r7, #4
 800027c:	f247 5330 	movw	r3, #30000	; 0x7530
 8000280:	2201      	movs	r2, #1
 8000282:	4805      	ldr	r0, [pc, #20]	; (8000298 <__io_putchar+0x28>)
 8000284:	f003 f9b2 	bl	80035ec <HAL_USART_Transmit>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d1f5      	bne.n	800027a <__io_putchar+0xa>
  {
    ;
  }
  return ch;
 800028e:	687b      	ldr	r3, [r7, #4]
}
 8000290:	4618      	mov	r0, r3
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000158 	.word	0x20000158

0800029c <__io_getchar>:
  * @brief Retargets the C library scanf function to the USART.
  * @param None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
  /* Place your implementation of fgetc here */
  /* e.g. readwrite a character to the USART2 and Loop until the end of transmission */
  uint8_t ch = 0;
 80002a2:	2300      	movs	r3, #0
 80002a4:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_USART_Receive(&husart1, (uint8_t *)&ch, 1, 30000))
 80002a6:	bf00      	nop
 80002a8:	1df9      	adds	r1, r7, #7
 80002aa:	f247 5330 	movw	r3, #30000	; 0x7530
 80002ae:	2201      	movs	r2, #1
 80002b0:	4805      	ldr	r0, [pc, #20]	; (80002c8 <__io_getchar+0x2c>)
 80002b2:	f003 fa49 	bl	8003748 <HAL_USART_Receive>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d1f5      	bne.n	80002a8 <__io_getchar+0xc>
  {
    ;
  }
  return ch;
 80002bc:	79fb      	ldrb	r3, [r7, #7]
}
 80002be:	4618      	mov	r0, r3
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	20000158 	.word	0x20000158

080002cc <HAL_DFSDM_FilterRegConvCpltCallback>:


void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	firstHalfFull = true;
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	701a      	strb	r2, [r3, #0]
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	200001a8 	.word	0x200001a8

080002ec <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
	secondHalfFull = true;
 80002f4:	4b04      	ldr	r3, [pc, #16]	; (8000308 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	701a      	strb	r2, [r3, #0]
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	200001a9 	.word	0x200001a9

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000312:	f000 fc22 	bl	8000b5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000316:	f000 f863 	bl	80003e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031a:	f000 f98d 	bl	8000638 <MX_GPIO_Init>
  MX_DMA_Init();
 800031e:	f000 f96d 	bl	80005fc <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000322:	f000 f8d9 	bl	80004d8 <MX_DFSDM1_Init>
  MX_USART1_Init();
 8000326:	f000 f93d 	bl	80005a4 <MX_USART1_Init>
  /* USER CODE BEGIN 2 */
	if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RecBuff, QUEUELENGTH)){
 800032a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800032e:	4926      	ldr	r1, [pc, #152]	; (80003c8 <main+0xbc>)
 8000330:	4826      	ldr	r0, [pc, #152]	; (80003cc <main+0xc0>)
 8000332:	f000 ff89 	bl	8001248 <HAL_DFSDM_FilterRegularStart_DMA>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <main+0x34>
    Error_Handler();
 800033c:	f000 f9ac 	bl	8000698 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(firstHalfFull){
 8000340:	4b23      	ldr	r3, [pc, #140]	; (80003d0 <main+0xc4>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	b2db      	uxtb	r3, r3
 8000346:	2b00      	cmp	r3, #0
 8000348:	d01b      	beq.n	8000382 <main+0x76>
			for(int i=0;i<QUEUELENGTH/2;i++){
 800034a:	2300      	movs	r3, #0
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	e011      	b.n	8000374 <main+0x68>
				amplitude = (int16_t)(RecBuff[i]>>8);
 8000350:	4a1d      	ldr	r2, [pc, #116]	; (80003c8 <main+0xbc>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000358:	121b      	asrs	r3, r3, #8
 800035a:	b21a      	sxth	r2, r3
 800035c:	4b1d      	ldr	r3, [pc, #116]	; (80003d4 <main+0xc8>)
 800035e:	801a      	strh	r2, [r3, #0]
				printf("%i\r\n",amplitude);
 8000360:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <main+0xc8>)
 8000362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000366:	4619      	mov	r1, r3
 8000368:	481b      	ldr	r0, [pc, #108]	; (80003d8 <main+0xcc>)
 800036a:	f003 fd55 	bl	8003e18 <iprintf>
			for(int i=0;i<QUEUELENGTH/2;i++){
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	3301      	adds	r3, #1
 8000372:	607b      	str	r3, [r7, #4]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800037a:	dbe9      	blt.n	8000350 <main+0x44>
			}
			firstHalfFull = false;
 800037c:	4b14      	ldr	r3, [pc, #80]	; (80003d0 <main+0xc4>)
 800037e:	2200      	movs	r2, #0
 8000380:	701a      	strb	r2, [r3, #0]
		}
		if(secondHalfFull){
 8000382:	4b16      	ldr	r3, [pc, #88]	; (80003dc <main+0xd0>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	b2db      	uxtb	r3, r3
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <main+0x34>
			for(int i=QUEUELENGTH/2;i<QUEUELENGTH;i++){
 800038c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000390:	603b      	str	r3, [r7, #0]
 8000392:	e011      	b.n	80003b8 <main+0xac>
				amplitude = (int16_t)(RecBuff[i]>>8);
 8000394:	4a0c      	ldr	r2, [pc, #48]	; (80003c8 <main+0xbc>)
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800039c:	121b      	asrs	r3, r3, #8
 800039e:	b21a      	sxth	r2, r3
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <main+0xc8>)
 80003a2:	801a      	strh	r2, [r3, #0]
				printf("%i\r\n",amplitude);
 80003a4:	4b0b      	ldr	r3, [pc, #44]	; (80003d4 <main+0xc8>)
 80003a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003aa:	4619      	mov	r1, r3
 80003ac:	480a      	ldr	r0, [pc, #40]	; (80003d8 <main+0xcc>)
 80003ae:	f003 fd33 	bl	8003e18 <iprintf>
			for(int i=QUEUELENGTH/2;i<QUEUELENGTH;i++){
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	3301      	adds	r3, #1
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003be:	dbe9      	blt.n	8000394 <main+0x88>
			}
			secondHalfFull = false;
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <main+0xd0>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	701a      	strb	r2, [r3, #0]
		if(firstHalfFull){
 80003c6:	e7bb      	b.n	8000340 <main+0x34>
 80003c8:	200001ac 	.word	0x200001ac
 80003cc:	20000084 	.word	0x20000084
 80003d0:	200001a8 	.word	0x200001a8
 80003d4:	200021ac 	.word	0x200021ac
 80003d8:	08004b2c 	.word	0x08004b2c
 80003dc:	200001a9 	.word	0x200001a9

080003e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b0b8      	sub	sp, #224	; 0xe0
 80003e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80003ea:	2244      	movs	r2, #68	; 0x44
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f003 fd67 	bl	8003ec2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
 8000402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000404:	463b      	mov	r3, r7
 8000406:	2288      	movs	r2, #136	; 0x88
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f003 fd59 	bl	8003ec2 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000410:	2310      	movs	r3, #16
 8000412:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000416:	2301      	movs	r3, #1
 8000418:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800041c:	2300      	movs	r3, #0
 800041e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000422:	2360      	movs	r3, #96	; 0x60
 8000424:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000428:	2302      	movs	r3, #2
 800042a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800042e:	2301      	movs	r3, #1
 8000430:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000434:	2301      	movs	r3, #1
 8000436:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800043a:	2328      	movs	r3, #40	; 0x28
 800043c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000440:	2307      	movs	r3, #7
 8000442:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000446:	2302      	movs	r3, #2
 8000448:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800044c:	2302      	movs	r3, #2
 800044e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000452:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000456:	4618      	mov	r0, r3
 8000458:	f001 fdd4 	bl	8002004 <HAL_RCC_OscConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000462:	f000 f919 	bl	8000698 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000466:	230f      	movs	r3, #15
 8000468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046c:	2303      	movs	r3, #3
 800046e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800047e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000482:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000486:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800048a:	2104      	movs	r1, #4
 800048c:	4618      	mov	r0, r3
 800048e:	f002 f9a1 	bl	80027d4 <HAL_RCC_ClockConfig>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000498:	f000 f8fe 	bl	8000698 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_DFSDM1;
 800049c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80004a0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80004a2:	2301      	movs	r3, #1
 80004a4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80004a6:	2300      	movs	r3, #0
 80004a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ac:	463b      	mov	r3, r7
 80004ae:	4618      	mov	r0, r3
 80004b0:	f002 fb96 	bl	8002be0 <HAL_RCCEx_PeriphCLKConfig>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0xde>
  {
    Error_Handler();
 80004ba:	f000 f8ed 	bl	8000698 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004c2:	f001 fd49 	bl	8001f58 <HAL_PWREx_ControlVoltageScaling>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80004cc:	f000 f8e4 	bl	8000698 <Error_Handler>
  }
}
 80004d0:	bf00      	nop
 80004d2:	37e0      	adds	r7, #224	; 0xe0
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80004dc:	4b2c      	ldr	r3, [pc, #176]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 80004de:	4a2d      	ldr	r2, [pc, #180]	; (8000594 <MX_DFSDM1_Init+0xbc>)
 80004e0:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80004e2:	4b2b      	ldr	r3, [pc, #172]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80004e8:	4b29      	ldr	r3, [pc, #164]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80004ee:	4b28      	ldr	r3, [pc, #160]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80004f4:	4b26      	ldr	r3, [pc, #152]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 80004f6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80004fa:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 32;
 80004fc:	4b24      	ldr	r3, [pc, #144]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 80004fe:	2220      	movs	r2, #32
 8000500:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000502:	4b23      	ldr	r3, [pc, #140]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 8000504:	2201      	movs	r2, #1
 8000506:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000508:	4821      	ldr	r0, [pc, #132]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 800050a:	f000 fd7d 	bl	8001008 <HAL_DFSDM_FilterInit>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000514:	f000 f8c0 	bl	8000698 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000518:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 800051a:	4a20      	ldr	r2, [pc, #128]	; (800059c <MX_DFSDM1_Init+0xc4>)
 800051c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800051e:	4b1e      	ldr	r3, [pc, #120]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000520:	2201      	movs	r2, #1
 8000522:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000524:	4b1c      	ldr	r3, [pc, #112]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 62;
 800052a:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 800052c:	223e      	movs	r2, #62	; 0x3e
 800052e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000530:	4b19      	ldr	r3, [pc, #100]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000532:	2200      	movs	r2, #0
 8000534:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000536:	4b18      	ldr	r3, [pc, #96]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000538:	2200      	movs	r2, #0
 800053a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800053c:	4b16      	ldr	r3, [pc, #88]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 800053e:	2200      	movs	r2, #0
 8000540:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000544:	2200      	movs	r2, #0
 8000546:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000548:	4b13      	ldr	r3, [pc, #76]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 800054a:	2204      	movs	r2, #4
 800054c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000550:	2200      	movs	r2, #0
 8000552:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000554:	4b10      	ldr	r3, [pc, #64]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000556:	2201      	movs	r2, #1
 8000558:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 800055c:	2200      	movs	r2, #0
 800055e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000560:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000562:	2200      	movs	r2, #0
 8000564:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000566:	480c      	ldr	r0, [pc, #48]	; (8000598 <MX_DFSDM1_Init+0xc0>)
 8000568:	f000 fc7a 	bl	8000e60 <HAL_DFSDM_ChannelInit>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000572:	f000 f891 	bl	8000698 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000576:	2201      	movs	r2, #1
 8000578:	4909      	ldr	r1, [pc, #36]	; (80005a0 <MX_DFSDM1_Init+0xc8>)
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <MX_DFSDM1_Init+0xb8>)
 800057c:	f000 fe1e 	bl	80011bc <HAL_DFSDM_FilterConfigRegChannel>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000586:	f000 f887 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000084 	.word	0x20000084
 8000594:	40016100 	.word	0x40016100
 8000598:	200000d8 	.word	0x200000d8
 800059c:	40016040 	.word	0x40016040
 80005a0:	00020004 	.word	0x00020004

080005a4 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <MX_USART1_Init+0x50>)
 80005aa:	4a13      	ldr	r2, [pc, #76]	; (80005f8 <MX_USART1_Init+0x54>)
 80005ac:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_USART1_Init+0x50>)
 80005b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b4:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_USART1_Init+0x50>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80005bc:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <MX_USART1_Init+0x50>)
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_USART1_Init+0x50>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <MX_USART1_Init+0x50>)
 80005ca:	220c      	movs	r2, #12
 80005cc:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_USART1_Init+0x50>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <MX_USART1_Init+0x50>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_USART1_Init+0x50>)
 80005dc:	2200      	movs	r2, #0
 80005de:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <MX_USART1_Init+0x50>)
 80005e2:	f002 ffb9 	bl	8003558 <HAL_USART_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 80005ec:	f000 f854 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000158 	.word	0x20000158
 80005f8:	40013800 	.word	0x40013800

080005fc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_DMA_Init+0x38>)
 8000604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000606:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <MX_DMA_Init+0x38>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6493      	str	r3, [r2, #72]	; 0x48
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_DMA_Init+0x38>)
 8000610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	200e      	movs	r0, #14
 8000620:	f000 fbe7 	bl	8000df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000624:	200e      	movs	r0, #14
 8000626:	f000 fc00 	bl	8000e2a <HAL_NVIC_EnableIRQ>

}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40021000 	.word	0x40021000

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <MX_GPIO_Init+0x5c>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	4a14      	ldr	r2, [pc, #80]	; (8000694 <MX_GPIO_Init+0x5c>)
 8000644:	f043 0310 	orr.w	r3, r3, #16
 8000648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_GPIO_Init+0x5c>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	f003 0310 	and.w	r3, r3, #16
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_GPIO_Init+0x5c>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <MX_GPIO_Init+0x5c>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_GPIO_Init+0x5c>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_GPIO_Init+0x5c>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	4a08      	ldr	r2, [pc, #32]	; (8000694 <MX_GPIO_Init+0x5c>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_GPIO_Init+0x5c>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
	...

080006a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <HAL_MspInit+0x44>)
 80006b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006b2:	4a0e      	ldr	r2, [pc, #56]	; (80006ec <HAL_MspInit+0x44>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6613      	str	r3, [r2, #96]	; 0x60
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <HAL_MspInit+0x44>)
 80006bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <HAL_MspInit+0x44>)
 80006c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ca:	4a08      	ldr	r2, [pc, #32]	; (80006ec <HAL_MspInit+0x44>)
 80006cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d0:	6593      	str	r3, [r2, #88]	; 0x58
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_MspInit+0x44>)
 80006d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40021000 	.word	0x40021000

080006f0 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000708:	4b3c      	ldr	r3, [pc, #240]	; (80007fc <HAL_DFSDM_FilterMspInit+0x10c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d139      	bne.n	8000784 <HAL_DFSDM_FilterMspInit+0x94>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000710:	4b3b      	ldr	r3, [pc, #236]	; (8000800 <HAL_DFSDM_FilterMspInit+0x110>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	3301      	adds	r3, #1
 8000716:	4a3a      	ldr	r2, [pc, #232]	; (8000800 <HAL_DFSDM_FilterMspInit+0x110>)
 8000718:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800071a:	4b39      	ldr	r3, [pc, #228]	; (8000800 <HAL_DFSDM_FilterMspInit+0x110>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d10b      	bne.n	800073a <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000722:	4b38      	ldr	r3, [pc, #224]	; (8000804 <HAL_DFSDM_FilterMspInit+0x114>)
 8000724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000726:	4a37      	ldr	r2, [pc, #220]	; (8000804 <HAL_DFSDM_FilterMspInit+0x114>)
 8000728:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800072c:	6613      	str	r3, [r2, #96]	; 0x60
 800072e:	4b35      	ldr	r3, [pc, #212]	; (8000804 <HAL_DFSDM_FilterMspInit+0x114>)
 8000730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000732:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	4b32      	ldr	r3, [pc, #200]	; (8000804 <HAL_DFSDM_FilterMspInit+0x114>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	4a31      	ldr	r2, [pc, #196]	; (8000804 <HAL_DFSDM_FilterMspInit+0x114>)
 8000740:	f043 0310 	orr.w	r3, r3, #16
 8000744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000746:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <HAL_DFSDM_FilterMspInit+0x114>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	f003 0310 	and.w	r3, r3, #16
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000752:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000764:	2306      	movs	r3, #6
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	4826      	ldr	r0, [pc, #152]	; (8000808 <HAL_DFSDM_FilterMspInit+0x118>)
 8000770:	f001 fa3a 	bl	8001be8 <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	203d      	movs	r0, #61	; 0x3d
 800077a:	f000 fb3a 	bl	8000df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 800077e:	203d      	movs	r0, #61	; 0x3d
 8000780:	f000 fb53 	bl	8000e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE END DFSDM1_MspInit 1 */
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a20      	ldr	r2, [pc, #128]	; (800080c <HAL_DFSDM_FilterMspInit+0x11c>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d131      	bne.n	80007f2 <HAL_DFSDM_FilterMspInit+0x102>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 800078e:	4b20      	ldr	r3, [pc, #128]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 8000790:	4a20      	ldr	r2, [pc, #128]	; (8000814 <HAL_DFSDM_FilterMspInit+0x124>)
 8000792:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800079a:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007a8:	2280      	movs	r2, #128	; 0x80
 80007aa:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b2:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007ba:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007be:	2220      	movs	r2, #32
 80007c0:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80007ca:	4811      	ldr	r0, [pc, #68]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007cc:	f001 f814 	bl	80017f8 <HAL_DMA_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <HAL_DFSDM_FilterMspInit+0xea>
    {
      Error_Handler();
 80007d6:	f7ff ff5f 	bl	8000698 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a0c      	ldr	r2, [pc, #48]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007de:	62da      	str	r2, [r3, #44]	; 0x2c
 80007e0:	4a0b      	ldr	r2, [pc, #44]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a09      	ldr	r2, [pc, #36]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007ea:	629a      	str	r2, [r3, #40]	; 0x28
 80007ec:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_DFSDM_FilterMspInit+0x120>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 80007f2:	bf00      	nop
 80007f4:	3728      	adds	r7, #40	; 0x28
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200021b4 	.word	0x200021b4
 8000800:	200021b0 	.word	0x200021b0
 8000804:	40021000 	.word	0x40021000
 8000808:	48001000 	.word	0x48001000
 800080c:	40016100 	.word	0x40016100
 8000810:	20000110 	.word	0x20000110
 8000814:	40020044 	.word	0x40020044

08000818 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <HAL_DFSDM_ChannelMspInit+0x8c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d131      	bne.n	800089c <HAL_DFSDM_ChannelMspInit+0x84>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <HAL_DFSDM_ChannelMspInit+0x90>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	3301      	adds	r3, #1
 800083e:	4a1a      	ldr	r2, [pc, #104]	; (80008a8 <HAL_DFSDM_ChannelMspInit+0x90>)
 8000840:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000842:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <HAL_DFSDM_ChannelMspInit+0x90>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d10b      	bne.n	8000862 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <HAL_DFSDM_ChannelMspInit+0x94>)
 800084c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084e:	4a17      	ldr	r2, [pc, #92]	; (80008ac <HAL_DFSDM_ChannelMspInit+0x94>)
 8000850:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000854:	6613      	str	r3, [r2, #96]	; 0x60
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_DFSDM_ChannelMspInit+0x94>)
 8000858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_DFSDM_ChannelMspInit+0x94>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a11      	ldr	r2, [pc, #68]	; (80008ac <HAL_DFSDM_ChannelMspInit+0x94>)
 8000868:	f043 0310 	orr.w	r3, r3, #16
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <HAL_DFSDM_ChannelMspInit+0x94>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0310 	and.w	r3, r3, #16
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800087a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800087e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800088c:	2306      	movs	r3, #6
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	4806      	ldr	r0, [pc, #24]	; (80008b0 <HAL_DFSDM_ChannelMspInit+0x98>)
 8000898:	f001 f9a6 	bl	8001be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200021b4 	.word	0x200021b4
 80008a8:	200021b0 	.word	0x200021b0
 80008ac:	40021000 	.word	0x40021000
 80008b0:	48001000 	.word	0x48001000

080008b4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a17      	ldr	r2, [pc, #92]	; (8000930 <HAL_USART_MspInit+0x7c>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d127      	bne.n	8000926 <HAL_USART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <HAL_USART_MspInit+0x80>)
 80008d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008da:	4a16      	ldr	r2, [pc, #88]	; (8000934 <HAL_USART_MspInit+0x80>)
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e0:	6613      	str	r3, [r2, #96]	; 0x60
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <HAL_USART_MspInit+0x80>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <HAL_USART_MspInit+0x80>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <HAL_USART_MspInit+0x80>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <HAL_USART_MspInit+0x80>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB5     ------> USART1_CK
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000906:	23e0      	movs	r3, #224	; 0xe0
 8000908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000916:	2307      	movs	r3, #7
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	; (8000938 <HAL_USART_MspInit+0x84>)
 8000922:	f001 f961 	bl	8001be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40013800 	.word	0x40013800
 8000934:	40021000 	.word	0x40021000
 8000938:	48000400 	.word	0x48000400

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler+0x4>

08000956 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <UsageFault_Handler+0x4>

08000962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000990:	f000 f936 	bl	8000c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <DMA1_Channel4_IRQHandler+0x10>)
 800099e:	f001 f843 	bl	8001a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000110 	.word	0x20000110

080009ac <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <DFSDM1_FLT0_IRQHandler+0x10>)
 80009b2:	f000 fccb 	bl	800134c <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000084 	.word	0x20000084

080009c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	e00a      	b.n	80009e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009d2:	f7ff fc63 	bl	800029c <__io_getchar>
 80009d6:	4601      	mov	r1, r0
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	60ba      	str	r2, [r7, #8]
 80009de:	b2ca      	uxtb	r2, r1
 80009e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	3301      	adds	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	dbf0      	blt.n	80009d2 <_read+0x12>
	}

return len;
 80009f0:	687b      	ldr	r3, [r7, #4]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	e009      	b.n	8000a20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	60ba      	str	r2, [r7, #8]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fc2b 	bl	8000270 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697a      	ldr	r2, [r7, #20]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	dbf1      	blt.n	8000a0c <_write+0x12>
	}
	return len;
 8000a28:	687b      	ldr	r3, [r7, #4]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <_close>:

int _close(int file)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
	return -1;
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <_isatty>:

int _isatty(int file)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
	return 1;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
	return 0;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
	...

08000a9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <SystemInit+0x64>)
 8000aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa6:	4a16      	ldr	r2, [pc, #88]	; (8000b00 <SystemInit+0x64>)
 8000aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <SystemInit+0x68>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <SystemInit+0x68>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <SystemInit+0x68>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <SystemInit+0x68>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <SystemInit+0x68>)
 8000ac8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000acc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ad0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <SystemInit+0x68>)
 8000ad4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ad8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <SystemInit+0x68>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a09      	ldr	r2, [pc, #36]	; (8000b04 <SystemInit+0x68>)
 8000ae0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ae4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ae6:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <SystemInit+0x68>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <SystemInit+0x64>)
 8000aee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000af2:	609a      	str	r2, [r3, #8]
#endif
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00
 8000b04:	40021000 	.word	0x40021000

08000b08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b40 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b0c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b0e:	e003      	b.n	8000b18 <LoopCopyDataInit>

08000b10 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b12:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b14:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b16:	3104      	adds	r1, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b18:	480b      	ldr	r0, [pc, #44]	; (8000b48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b1c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b1e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b20:	d3f6      	bcc.n	8000b10 <CopyDataInit>
	ldr	r2, =_sbss
 8000b22:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b24:	e002      	b.n	8000b2c <LoopFillZerobss>

08000b26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b26:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b28:	f842 3b04 	str.w	r3, [r2], #4

08000b2c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <LoopForever+0x16>)
	cmp	r2, r3
 8000b2e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b30:	d3f9      	bcc.n	8000b26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b32:	f7ff ffb3 	bl	8000a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b36:	f003 fa13 	bl	8003f60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b3a:	f7ff fbe7 	bl	800030c <main>

08000b3e <LoopForever>:

LoopForever:
    b LoopForever
 8000b3e:	e7fe      	b.n	8000b3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b40:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000b44:	08004bb8 	.word	0x08004bb8
	ldr	r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b4c:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8000b50:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8000b54:	20002330 	.word	0x20002330

08000b58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC1_2_IRQHandler>

08000b5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b60:	2300      	movs	r3, #0
 8000b62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 f939 	bl	8000ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f000 f80e 	bl	8000b8c <HAL_InitTick>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d002      	beq.n	8000b7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	71fb      	strb	r3, [r7, #7]
 8000b7a:	e001      	b.n	8000b80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b7c:	f7ff fd94 	bl	80006a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b80:	79fb      	ldrb	r3, [r7, #7]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b94:	2300      	movs	r3, #0
 8000b96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <HAL_InitTick+0x68>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d022      	beq.n	8000be6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <HAL_InitTick+0x6c>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <HAL_InitTick+0x68>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bac:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 f946 	bl	8000e46 <HAL_SYSTICK_Config>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d10f      	bne.n	8000be0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b0f      	cmp	r3, #15
 8000bc4:	d809      	bhi.n	8000bda <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	6879      	ldr	r1, [r7, #4]
 8000bca:	f04f 30ff 	mov.w	r0, #4294967295
 8000bce:	f000 f910 	bl	8000df2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <HAL_InitTick+0x70>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	e007      	b.n	8000bea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	73fb      	strb	r3, [r7, #15]
 8000bde:	e004      	b.n	8000bea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	73fb      	strb	r3, [r7, #15]
 8000be4:	e001      	b.n	8000bea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	20000004 	.word	0x20000004

08000c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_IncTick+0x1c>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <HAL_IncTick+0x20>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	4a03      	ldr	r2, [pc, #12]	; (8000c1c <HAL_IncTick+0x1c>)
 8000c10:	6013      	str	r3, [r2, #0]
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	200021b8 	.word	0x200021b8
 8000c20:	20000008 	.word	0x20000008

08000c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return uwTick;
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <HAL_GetTick+0x14>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	200021b8 	.word	0x200021b8

08000c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6e:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	60d3      	str	r3, [r2, #12]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <__NVIC_GetPriorityGrouping+0x18>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	f003 0307 	and.w	r3, r3, #7
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	db0b      	blt.n	8000cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	f003 021f 	and.w	r2, r3, #31
 8000cb8:	4907      	ldr	r1, [pc, #28]	; (8000cd8 <__NVIC_EnableIRQ+0x38>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	095b      	lsrs	r3, r3, #5
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000e100 	.word	0xe000e100

08000cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	6039      	str	r1, [r7, #0]
 8000ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	db0a      	blt.n	8000d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	490c      	ldr	r1, [pc, #48]	; (8000d28 <__NVIC_SetPriority+0x4c>)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	0112      	lsls	r2, r2, #4
 8000cfc:	b2d2      	uxtb	r2, r2
 8000cfe:	440b      	add	r3, r1
 8000d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d04:	e00a      	b.n	8000d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4908      	ldr	r1, [pc, #32]	; (8000d2c <__NVIC_SetPriority+0x50>)
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	f003 030f 	and.w	r3, r3, #15
 8000d12:	3b04      	subs	r3, #4
 8000d14:	0112      	lsls	r2, r2, #4
 8000d16:	b2d2      	uxtb	r2, r2
 8000d18:	440b      	add	r3, r1
 8000d1a:	761a      	strb	r2, [r3, #24]
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000e100 	.word	0xe000e100
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b089      	sub	sp, #36	; 0x24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	f1c3 0307 	rsb	r3, r3, #7
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	bf28      	it	cs
 8000d4e:	2304      	movcs	r3, #4
 8000d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3304      	adds	r3, #4
 8000d56:	2b06      	cmp	r3, #6
 8000d58:	d902      	bls.n	8000d60 <NVIC_EncodePriority+0x30>
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3b03      	subs	r3, #3
 8000d5e:	e000      	b.n	8000d62 <NVIC_EncodePriority+0x32>
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	f04f 32ff 	mov.w	r2, #4294967295
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43da      	mvns	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	401a      	ands	r2, r3
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d78:	f04f 31ff 	mov.w	r1, #4294967295
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d82:	43d9      	mvns	r1, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	4313      	orrs	r3, r2
         );
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3724      	adds	r7, #36	; 0x24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da8:	d301      	bcc.n	8000dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00f      	b.n	8000dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <SysTick_Config+0x40>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db6:	210f      	movs	r1, #15
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f7ff ff8e 	bl	8000cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <SysTick_Config+0x40>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <SysTick_Config+0x40>)
 8000dc8:	2207      	movs	r2, #7
 8000dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	e000e010 	.word	0xe000e010

08000ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff ff29 	bl	8000c3c <__NVIC_SetPriorityGrouping>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
 8000dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e04:	f7ff ff3e 	bl	8000c84 <__NVIC_GetPriorityGrouping>
 8000e08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	68b9      	ldr	r1, [r7, #8]
 8000e0e:	6978      	ldr	r0, [r7, #20]
 8000e10:	f7ff ff8e 	bl	8000d30 <NVIC_EncodePriority>
 8000e14:	4602      	mov	r2, r0
 8000e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff5d 	bl	8000cdc <__NVIC_SetPriority>
}
 8000e22:	bf00      	nop
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff31 	bl	8000ca0 <__NVIC_EnableIRQ>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff ffa2 	bl	8000d98 <SysTick_Config>
 8000e54:	4603      	mov	r3, r0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e0ac      	b.n	8000fcc <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 fc1c 	bl	80016b4 <DFSDM_GetChannelFromInstance>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4a55      	ldr	r2, [pc, #340]	; (8000fd4 <HAL_DFSDM_ChannelInit+0x174>)
 8000e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e09f      	b.n	8000fcc <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff fcc3 	bl	8000818 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8000e92:	4b51      	ldr	r3, [pc, #324]	; (8000fd8 <HAL_DFSDM_ChannelInit+0x178>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	3301      	adds	r3, #1
 8000e98:	4a4f      	ldr	r2, [pc, #316]	; (8000fd8 <HAL_DFSDM_ChannelInit+0x178>)
 8000e9a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8000e9c:	4b4e      	ldr	r3, [pc, #312]	; (8000fd8 <HAL_DFSDM_ChannelInit+0x178>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d125      	bne.n	8000ef0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000ea4:	4b4d      	ldr	r3, [pc, #308]	; (8000fdc <HAL_DFSDM_ChannelInit+0x17c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a4c      	ldr	r2, [pc, #304]	; (8000fdc <HAL_DFSDM_ChannelInit+0x17c>)
 8000eaa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000eae:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000eb0:	4b4a      	ldr	r3, [pc, #296]	; (8000fdc <HAL_DFSDM_ChannelInit+0x17c>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	4948      	ldr	r1, [pc, #288]	; (8000fdc <HAL_DFSDM_ChannelInit+0x17c>)
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000ebe:	4b47      	ldr	r3, [pc, #284]	; (8000fdc <HAL_DFSDM_ChannelInit+0x17c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a46      	ldr	r2, [pc, #280]	; (8000fdc <HAL_DFSDM_ChannelInit+0x17c>)
 8000ec4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000ec8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	791b      	ldrb	r3, [r3, #4]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d108      	bne.n	8000ee4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000ed2:	4b42      	ldr	r3, [pc, #264]	; (8000fdc <HAL_DFSDM_ChannelInit+0x17c>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	041b      	lsls	r3, r3, #16
 8000ede:	493f      	ldr	r1, [pc, #252]	; (8000fdc <HAL_DFSDM_ChannelInit+0x17c>)
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000ee4:	4b3d      	ldr	r3, [pc, #244]	; (8000fdc <HAL_DFSDM_ChannelInit+0x17c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a3c      	ldr	r2, [pc, #240]	; (8000fdc <HAL_DFSDM_ChannelInit+0x17c>)
 8000eea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000eee:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8000efe:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6819      	ldr	r1, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f0e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000f14:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 020f 	bic.w	r2, r2, #15
 8000f2c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6819      	ldr	r1, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	430a      	orrs	r2, r1
 8000f44:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8000f54:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6899      	ldr	r1, [r3, #8]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f64:	3b01      	subs	r3, #1
 8000f66:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f002 0207 	and.w	r2, r2, #7
 8000f80:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6859      	ldr	r1, [r3, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000f94:	431a      	orrs	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fac:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 fb7a 	bl	80016b4 <DFSDM_GetChannelFromInstance>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	4904      	ldr	r1, [pc, #16]	; (8000fd4 <HAL_DFSDM_ChannelInit+0x174>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200021c0 	.word	0x200021c0
 8000fd8:	200021bc 	.word	0x200021bc
 8000fdc:	40016000 	.word	0x40016000

08000fe0 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e0ca      	b.n	80011b0 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a66      	ldr	r2, [pc, #408]	; (80011b8 <HAL_DFSDM_FilterInit+0x1b0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d109      	bne.n	8001038 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001028:	2b01      	cmp	r3, #1
 800102a:	d003      	beq.n	8001034 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001030:	2b01      	cmp	r3, #1
 8001032:	d101      	bne.n	8001038 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e0bb      	b.n	80011b0 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2201      	movs	r2, #1
 8001042:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2201      	movs	r2, #1
 8001048:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff fb4d 	bl	80006f0 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001064:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7a1b      	ldrb	r3, [r3, #8]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d108      	bne.n	8001080 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	e007      	b.n	8001090 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800108e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	7a5b      	ldrb	r3, [r3, #9]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d108      	bne.n	80010aa <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	e007      	b.n	80010ba <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80010b8:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	6812      	ldr	r2, [r2, #0]
 80010c4:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 80010c8:	f023 0308 	bic.w	r3, r3, #8
 80010cc:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d108      	bne.n	80010e8 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6819      	ldr	r1, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	695a      	ldr	r2, [r3, #20]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7c1b      	ldrb	r3, [r3, #16]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d108      	bne.n	8001102 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 0210 	orr.w	r2, r2, #16
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	e007      	b.n	8001112 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 0210 	bic.w	r2, r2, #16
 8001110:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7c5b      	ldrb	r3, [r3, #17]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d108      	bne.n	800112c <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f042 0220 	orr.w	r2, r2, #32
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	e007      	b.n	800113c <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 0220 	bic.w	r2, r2, #32
 800113a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	6812      	ldr	r2, [r2, #0]
 8001146:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800114a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800114e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6959      	ldr	r1, [r3, #20]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	3b01      	subs	r3, #1
 8001160:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001162:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800116a:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68da      	ldr	r2, [r3, #12]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	699a      	ldr	r2, [r3, #24]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7c1a      	ldrb	r2, [r3, #16]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f042 0201 	orr.w	r2, r2, #1
 80011a4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40016100 	.word	0x40016100

080011bc <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80011bc:	b480      	push	{r7}
 80011be:	b087      	sub	sp, #28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011c8:	2300      	movs	r3, #0
 80011ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d02e      	beq.n	8001234 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80011dc:	2bff      	cmp	r3, #255	; 0xff
 80011de:	d029      	beq.n	8001234 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	6812      	ldr	r2, [r2, #0]
 80011ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f2:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d10d      	bne.n	8001216 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001208:	431a      	orrs	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	e00a      	b.n	800122c <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6819      	ldr	r1, [r3, #0]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	430a      	orrs	r2, r1
 800122a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	631a      	str	r2, [r3, #48]	; 0x30
 8001232:	e001      	b.n	8001238 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001238:	7dfb      	ldrb	r3, [r7, #23]
}
 800123a:	4618      	mov	r0, r3
 800123c:	371c      	adds	r7, #28
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001254:	2300      	movs	r3, #0
 8001256:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d002      	beq.n	8001264 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d102      	bne.n	800126a <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	75fb      	strb	r3, [r7, #23]
 8001268:	e064      	b.n	8001334 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001274:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001278:	d002      	beq.n	8001280 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	75fb      	strb	r3, [r7, #23]
 800127e:	e059      	b.n	8001334 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10e      	bne.n	80012a6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800128c:	2b00      	cmp	r3, #0
 800128e:	d10a      	bne.n	80012a6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001294:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001296:	2b00      	cmp	r3, #0
 8001298:	d105      	bne.n	80012a6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d002      	beq.n	80012a6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	75fb      	strb	r3, [r7, #23]
 80012a4:	e046      	b.n	8001334 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10b      	bne.n	80012c6 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d107      	bne.n	80012c6 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ba:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80012bc:	2b20      	cmp	r3, #32
 80012be:	d102      	bne.n	80012c6 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	75fb      	strb	r3, [r7, #23]
 80012c4:	e036      	b.n	8001334 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d004      	beq.n	80012da <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	d12a      	bne.n	8001330 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012de:	4a18      	ldr	r2, [pc, #96]	; (8001340 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 80012e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e6:	4a17      	ldr	r2, [pc, #92]	; (8001344 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 80012e8:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ee:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80012f0:	2b20      	cmp	r3, #32
 80012f2:	d101      	bne.n	80012f8 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 80012f4:	4a14      	ldr	r2, [pc, #80]	; (8001348 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 80012f6:	e000      	b.n	80012fa <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 80012f8:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	331c      	adds	r3, #28
 800130a:	4619      	mov	r1, r3
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f000 fb2a 	bl	8001968 <HAL_DMA_Start_IT>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d006      	beq.n	8001328 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	22ff      	movs	r2, #255	; 0xff
 800131e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001326:	e005      	b.n	8001334 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f000 fa0f 	bl	800174c <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800132e:	e001      	b.n	8001334 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8001334:	7dfb      	ldrb	r3, [r7, #23]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	08001675 	.word	0x08001675
 8001344:	08001691 	.word	0x08001691
 8001348:	08001659 	.word	0x08001659

0800134c <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	; 0x30
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00f      	beq.n	800138e <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00a      	beq.n	800138e <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2208      	movs	r2, #8
 800137e:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 f95c 	bl	8001644 <HAL_DFSDM_FilterErrorCallback>
 800138c:	e13b      	b.n	8001606 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00f      	beq.n	80013b8 <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00a      	beq.n	80013b8 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2204      	movs	r2, #4
 80013a8:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2202      	movs	r2, #2
 80013ae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f947 	bl	8001644 <HAL_DFSDM_FilterErrorCallback>
 80013b6:	e126      	b.n	8001606 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d025      	beq.n	800140e <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d020      	beq.n	800140e <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7fe ff7d 	bl	80002cc <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f040 8114 	bne.w	8001604 <HAL_DFSDM_IRQHandler+0x2b8>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f040 810f 	bne.w	8001604 <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0202 	bic.w	r2, r2, #2
 80013f4:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d101      	bne.n	8001404 <HAL_DFSDM_IRQHandler+0xb8>
 8001400:	2201      	movs	r2, #1
 8001402:	e000      	b.n	8001406 <HAL_DFSDM_IRQHandler+0xba>
 8001404:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800140c:	e0fa      	b.n	8001604 <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	2b00      	cmp	r3, #0
 8001416:	d034      	beq.n	8001482 <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 800141e:	2b00      	cmp	r3, #0
 8001420:	d02f      	beq.n	8001482 <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 f8f8 	bl	8001618 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800142c:	1e5a      	subs	r2, r3, #1
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	649a      	str	r2, [r3, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001436:	2b00      	cmp	r3, #0
 8001438:	f040 80e5 	bne.w	8001606 <HAL_DFSDM_IRQHandler+0x2ba>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001440:	2b00      	cmp	r3, #0
 8001442:	d112      	bne.n	800146a <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0201 	bic.w	r2, r2, #1
 8001452:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 800145a:	2b03      	cmp	r3, #3
 800145c:	d101      	bne.n	8001462 <HAL_DFSDM_IRQHandler+0x116>
 800145e:	2201      	movs	r2, #1
 8001460:	e000      	b.n	8001464 <HAL_DFSDM_IRQHandler+0x118>
 8001462:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001470:	2b01      	cmp	r3, #1
 8001472:	d102      	bne.n	800147a <HAL_DFSDM_IRQHandler+0x12e>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001478:	e000      	b.n	800147c <HAL_DFSDM_IRQHandler+0x130>
 800147a:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6493      	str	r3, [r2, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8001480:	e0c1      	b.n	8001606 <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f003 0310 	and.w	r3, r3, #16
 8001488:	2b00      	cmp	r3, #0
 800148a:	d03d      	beq.n	8001508 <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8001492:	2b00      	cmp	r3, #0
 8001494:	d038      	beq.n	8001508 <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 80014a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_DFSDM_IRQHandler+0x162>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <HAL_DFSDM_IRQHandler+0x164>
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d109      	bne.n	80014cc <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 80014b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ba:	0a1b      	lsrs	r3, r3, #8
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 80014be:	e005      	b.n	80014cc <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 80014c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c2:	3301      	adds	r3, #1
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
      reg = reg >> 1;
 80014c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c8:	085b      	lsrs	r3, r3, #1
 80014ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 80014cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <HAL_DFSDM_IRQHandler+0x190>
 80014d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d8:	2b06      	cmp	r3, #6
 80014da:	d9f1      	bls.n	80014c0 <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d105      	bne.n	80014ee <HAL_DFSDM_IRQHandler+0x1a2>
 80014e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e4:	3308      	adds	r3, #8
 80014e6:	2201      	movs	r2, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	e003      	b.n	80014f6 <HAL_DFSDM_IRQHandler+0x1aa>
 80014ee:	2201      	movs	r2, #1
 80014f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f893 	bl	800162c <HAL_DFSDM_FilterAwdCallback>
  {
 8001506:	e07e      	b.n	8001606 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a40      	ldr	r2, [pc, #256]	; (8001610 <HAL_DFSDM_IRQHandler+0x2c4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d141      	bne.n	8001596 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001518:	2b00      	cmp	r3, #0
 800151a:	d03c      	beq.n	8001596 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	f003 0340 	and.w	r3, r3, #64	; 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8001522:	2b00      	cmp	r3, #0
 8001524:	d037      	beq.n	8001596 <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	0c1b      	lsrs	r3, r3, #16
 8001532:	b2db      	uxtb	r3, r3
 8001534:	627b      	str	r3, [r7, #36]	; 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 8001536:	e02a      	b.n	800158e <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d01f      	beq.n	8001582 <HAL_DFSDM_IRQHandler+0x236>
 8001542:	4a34      	ldr	r2, [pc, #208]	; (8001614 <HAL_DFSDM_IRQHandler+0x2c8>)
 8001544:	6a3b      	ldr	r3, [r7, #32]
 8001546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d019      	beq.n	8001582 <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 800154e:	4a31      	ldr	r2, [pc, #196]	; (8001614 <HAL_DFSDM_IRQHandler+0x2c8>)
 8001550:	6a3b      	ldr	r3, [r7, #32]
 8001552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00f      	beq.n	8001582 <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 8001562:	6a3b      	ldr	r3, [r7, #32]
 8001564:	f103 0210 	add.w	r2, r3, #16
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2101      	movs	r1, #1
 800156e:	fa01 f202 	lsl.w	r2, r1, r2
 8001572:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 8001574:	4a27      	ldr	r2, [pc, #156]	; (8001614 <HAL_DFSDM_IRQHandler+0x2c8>)
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fd2f 	bl	8000fe0 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 8001582:	6a3b      	ldr	r3, [r7, #32]
 8001584:	3301      	adds	r3, #1
 8001586:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	085b      	lsrs	r3, r3, #1
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	2b07      	cmp	r3, #7
 8001592:	d9d1      	bls.n	8001538 <HAL_DFSDM_IRQHandler+0x1ec>
  {
 8001594:	e037      	b.n	8001606 <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a1d      	ldr	r2, [pc, #116]	; (8001610 <HAL_DFSDM_IRQHandler+0x2c4>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d132      	bne.n	8001606 <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d02d      	beq.n	8001606 <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d028      	beq.n	8001606 <HAL_DFSDM_IRQHandler+0x2ba>
  {
    uint32_t reg;
    uint32_t channel = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	0e1b      	lsrs	r3, r3, #24
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 80015c4:	e005      	b.n	80015d2 <HAL_DFSDM_IRQHandler+0x286>
    {
      channel++;
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	3301      	adds	r3, #1
 80015ca:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	085b      	lsrs	r3, r3, #1
 80015d0:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d102      	bne.n	80015e2 <HAL_DFSDM_IRQHandler+0x296>
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	2b06      	cmp	r3, #6
 80015e0:	d9f1      	bls.n	80015c6 <HAL_DFSDM_IRQHandler+0x27a>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	f103 0218 	add.w	r2, r3, #24
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2101      	movs	r1, #1
 80015ee:	fa01 f202 	lsl.w	r2, r1, r2
 80015f2:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 80015f4:	4a07      	ldr	r2, [pc, #28]	; (8001614 <HAL_DFSDM_IRQHandler+0x2c8>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fcf9 	bl	8000ff4 <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 8001602:	e000      	b.n	8001606 <HAL_DFSDM_IRQHandler+0x2ba>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001604:	bf00      	nop
}
 8001606:	bf00      	nop
 8001608:	3730      	adds	r7, #48	; 0x30
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40016100 	.word	0x40016100
 8001614:	200021c0 	.word	0x200021c0

08001618 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f7fe fe40 	bl	80002ec <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001680:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f7fe fe22 	bl	80002cc <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001688:	bf00      	nop
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2203      	movs	r2, #3
 80016a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f7ff ffcd 	bl	8001644 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a1c      	ldr	r2, [pc, #112]	; (8001730 <DFSDM_GetChannelFromInstance+0x7c>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d102      	bne.n	80016ca <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	e02b      	b.n	8001722 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a19      	ldr	r2, [pc, #100]	; (8001734 <DFSDM_GetChannelFromInstance+0x80>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d102      	bne.n	80016d8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80016d2:	2301      	movs	r3, #1
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	e024      	b.n	8001722 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a17      	ldr	r2, [pc, #92]	; (8001738 <DFSDM_GetChannelFromInstance+0x84>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d102      	bne.n	80016e6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80016e0:	2302      	movs	r3, #2
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	e01d      	b.n	8001722 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a14      	ldr	r2, [pc, #80]	; (800173c <DFSDM_GetChannelFromInstance+0x88>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d102      	bne.n	80016f4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80016ee:	2304      	movs	r3, #4
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	e016      	b.n	8001722 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a12      	ldr	r2, [pc, #72]	; (8001740 <DFSDM_GetChannelFromInstance+0x8c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d102      	bne.n	8001702 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80016fc:	2305      	movs	r3, #5
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	e00f      	b.n	8001722 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a0f      	ldr	r2, [pc, #60]	; (8001744 <DFSDM_GetChannelFromInstance+0x90>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d102      	bne.n	8001710 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800170a:	2306      	movs	r3, #6
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	e008      	b.n	8001722 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a0d      	ldr	r2, [pc, #52]	; (8001748 <DFSDM_GetChannelFromInstance+0x94>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d102      	bne.n	800171e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001718:	2307      	movs	r3, #7
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	e001      	b.n	8001722 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800171e:	2303      	movs	r3, #3
 8001720:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	40016000 	.word	0x40016000
 8001734:	40016020 	.word	0x40016020
 8001738:	40016040 	.word	0x40016040
 800173c:	40016080 	.word	0x40016080
 8001740:	400160a0 	.word	0x400160a0
 8001744:	400160c0 	.word	0x400160c0
 8001748:	400160e0 	.word	0x400160e0

0800174c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001758:	2b00      	cmp	r3, #0
 800175a:	d108      	bne.n	800176e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	e033      	b.n	80017d6 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0201 	bic.w	r2, r2, #1
 800177c:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800178c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f042 0201 	orr.w	r2, r2, #1
 800179c:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d116      	bne.n	80017d6 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d107      	bne.n	80017c0 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0202 	orr.w	r2, r2, #2
 80017be:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d102      	bne.n	80017d0 <DFSDM_RegConvStart+0x84>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	e000      	b.n	80017d2 <DFSDM_RegConvStart+0x86>
 80017d0:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <DFSDM_RegConvStart+0x98>
 80017e0:	2202      	movs	r2, #2
 80017e2:	e000      	b.n	80017e6 <DFSDM_RegConvStart+0x9a>
 80017e4:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e098      	b.n	800193c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	4b4d      	ldr	r3, [pc, #308]	; (8001948 <HAL_DMA_Init+0x150>)
 8001812:	429a      	cmp	r2, r3
 8001814:	d80f      	bhi.n	8001836 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	4b4b      	ldr	r3, [pc, #300]	; (800194c <HAL_DMA_Init+0x154>)
 800181e:	4413      	add	r3, r2
 8001820:	4a4b      	ldr	r2, [pc, #300]	; (8001950 <HAL_DMA_Init+0x158>)
 8001822:	fba2 2303 	umull	r2, r3, r2, r3
 8001826:	091b      	lsrs	r3, r3, #4
 8001828:	009a      	lsls	r2, r3, #2
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a48      	ldr	r2, [pc, #288]	; (8001954 <HAL_DMA_Init+0x15c>)
 8001832:	641a      	str	r2, [r3, #64]	; 0x40
 8001834:	e00e      	b.n	8001854 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	4b46      	ldr	r3, [pc, #280]	; (8001958 <HAL_DMA_Init+0x160>)
 800183e:	4413      	add	r3, r2
 8001840:	4a43      	ldr	r2, [pc, #268]	; (8001950 <HAL_DMA_Init+0x158>)
 8001842:	fba2 2303 	umull	r2, r3, r2, r3
 8001846:	091b      	lsrs	r3, r3, #4
 8001848:	009a      	lsls	r2, r3, #2
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a42      	ldr	r2, [pc, #264]	; (800195c <HAL_DMA_Init+0x164>)
 8001852:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2202      	movs	r2, #2
 8001858:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800186a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800186e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001878:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001884:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001890:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	4313      	orrs	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018ae:	d039      	beq.n	8001924 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	4a27      	ldr	r2, [pc, #156]	; (8001954 <HAL_DMA_Init+0x15c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d11a      	bne.n	80018f0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80018ba:	4b29      	ldr	r3, [pc, #164]	; (8001960 <HAL_DMA_Init+0x168>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f003 031c 	and.w	r3, r3, #28
 80018c6:	210f      	movs	r1, #15
 80018c8:	fa01 f303 	lsl.w	r3, r1, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	4924      	ldr	r1, [pc, #144]	; (8001960 <HAL_DMA_Init+0x168>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80018d4:	4b22      	ldr	r3, [pc, #136]	; (8001960 <HAL_DMA_Init+0x168>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6859      	ldr	r1, [r3, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e0:	f003 031c 	and.w	r3, r3, #28
 80018e4:	fa01 f303 	lsl.w	r3, r1, r3
 80018e8:	491d      	ldr	r1, [pc, #116]	; (8001960 <HAL_DMA_Init+0x168>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
 80018ee:	e019      	b.n	8001924 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80018f0:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <HAL_DMA_Init+0x16c>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f8:	f003 031c 	and.w	r3, r3, #28
 80018fc:	210f      	movs	r1, #15
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	4917      	ldr	r1, [pc, #92]	; (8001964 <HAL_DMA_Init+0x16c>)
 8001906:	4013      	ands	r3, r2
 8001908:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <HAL_DMA_Init+0x16c>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6859      	ldr	r1, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f003 031c 	and.w	r3, r3, #28
 800191a:	fa01 f303 	lsl.w	r3, r1, r3
 800191e:	4911      	ldr	r1, [pc, #68]	; (8001964 <HAL_DMA_Init+0x16c>)
 8001920:	4313      	orrs	r3, r2
 8001922:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	40020407 	.word	0x40020407
 800194c:	bffdfff8 	.word	0xbffdfff8
 8001950:	cccccccd 	.word	0xcccccccd
 8001954:	40020000 	.word	0x40020000
 8001958:	bffdfbf8 	.word	0xbffdfbf8
 800195c:	40020400 	.word	0x40020400
 8001960:	400200a8 	.word	0x400200a8
 8001964:	400204a8 	.word	0x400204a8

08001968 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001980:	2b01      	cmp	r3, #1
 8001982:	d101      	bne.n	8001988 <HAL_DMA_Start_IT+0x20>
 8001984:	2302      	movs	r3, #2
 8001986:	e04b      	b.n	8001a20 <HAL_DMA_Start_IT+0xb8>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b01      	cmp	r3, #1
 800199a:	d13a      	bne.n	8001a12 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2202      	movs	r2, #2
 80019a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0201 	bic.w	r2, r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	68b9      	ldr	r1, [r7, #8]
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f000 f8e0 	bl	8001b86 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d008      	beq.n	80019e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f042 020e 	orr.w	r2, r2, #14
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	e00f      	b.n	8001a00 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0204 	bic.w	r2, r2, #4
 80019ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 020a 	orr.w	r2, r2, #10
 80019fe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	e005      	b.n	8001a1e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a44:	f003 031c 	and.w	r3, r3, #28
 8001a48:	2204      	movs	r2, #4
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d026      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0x7a>
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d021      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0320 	and.w	r3, r3, #32
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d107      	bne.n	8001a7c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0204 	bic.w	r2, r2, #4
 8001a7a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a80:	f003 021c 	and.w	r2, r3, #28
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	2104      	movs	r1, #4
 8001a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d071      	beq.n	8001b7c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001aa0:	e06c      	b.n	8001b7c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	f003 031c 	and.w	r3, r3, #28
 8001aaa:	2202      	movs	r2, #2
 8001aac:	409a      	lsls	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d02e      	beq.n	8001b14 <HAL_DMA_IRQHandler+0xec>
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d029      	beq.n	8001b14 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0320 	and.w	r3, r3, #32
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10b      	bne.n	8001ae6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 020a 	bic.w	r2, r2, #10
 8001adc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f003 021c 	and.w	r2, r3, #28
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	2102      	movs	r1, #2
 8001af4:	fa01 f202 	lsl.w	r2, r1, r2
 8001af8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d038      	beq.n	8001b7c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b12:	e033      	b.n	8001b7c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b18:	f003 031c 	and.w	r3, r3, #28
 8001b1c:	2208      	movs	r2, #8
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d02a      	beq.n	8001b7e <HAL_DMA_IRQHandler+0x156>
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d025      	beq.n	8001b7e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 020e 	bic.w	r2, r2, #14
 8001b40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f003 021c 	and.w	r2, r3, #28
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	2101      	movs	r1, #1
 8001b50:	fa01 f202 	lsl.w	r2, r1, r2
 8001b54:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d004      	beq.n	8001b7e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
}
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b085      	sub	sp, #20
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b98:	f003 021c 	and.w	r2, r3, #28
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b10      	cmp	r3, #16
 8001bb6:	d108      	bne.n	8001bca <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bc8:	e007      	b.n	8001bda <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	60da      	str	r2, [r3, #12]
}
 8001bda:	bf00      	nop
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf6:	e17f      	b.n	8001ef8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	fa01 f303 	lsl.w	r3, r1, r3
 8001c04:	4013      	ands	r3, r2
 8001c06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 8171 	beq.w	8001ef2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d00b      	beq.n	8001c30 <HAL_GPIO_Init+0x48>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d007      	beq.n	8001c30 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c24:	2b11      	cmp	r3, #17
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b12      	cmp	r3, #18
 8001c2e:	d130      	bne.n	8001c92 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c66:	2201      	movs	r2, #1
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4013      	ands	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	091b      	lsrs	r3, r3, #4
 8001c7c:	f003 0201 	and.w	r2, r3, #1
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d118      	bne.n	8001cd0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	08db      	lsrs	r3, r3, #3
 8001cba:	f003 0201 	and.w	r2, r3, #1
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x128>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b12      	cmp	r3, #18
 8001d0e:	d123      	bne.n	8001d58 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	08da      	lsrs	r2, r3, #3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3208      	adds	r2, #8
 8001d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	220f      	movs	r2, #15
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	08da      	lsrs	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3208      	adds	r2, #8
 8001d52:	6939      	ldr	r1, [r7, #16]
 8001d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 0203 	and.w	r2, r3, #3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80ac 	beq.w	8001ef2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9a:	4b5f      	ldr	r3, [pc, #380]	; (8001f18 <HAL_GPIO_Init+0x330>)
 8001d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d9e:	4a5e      	ldr	r2, [pc, #376]	; (8001f18 <HAL_GPIO_Init+0x330>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6613      	str	r3, [r2, #96]	; 0x60
 8001da6:	4b5c      	ldr	r3, [pc, #368]	; (8001f18 <HAL_GPIO_Init+0x330>)
 8001da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001db2:	4a5a      	ldr	r2, [pc, #360]	; (8001f1c <HAL_GPIO_Init+0x334>)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	089b      	lsrs	r3, r3, #2
 8001db8:	3302      	adds	r3, #2
 8001dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	220f      	movs	r2, #15
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ddc:	d025      	beq.n	8001e2a <HAL_GPIO_Init+0x242>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a4f      	ldr	r2, [pc, #316]	; (8001f20 <HAL_GPIO_Init+0x338>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d01f      	beq.n	8001e26 <HAL_GPIO_Init+0x23e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a4e      	ldr	r2, [pc, #312]	; (8001f24 <HAL_GPIO_Init+0x33c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d019      	beq.n	8001e22 <HAL_GPIO_Init+0x23a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a4d      	ldr	r2, [pc, #308]	; (8001f28 <HAL_GPIO_Init+0x340>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <HAL_GPIO_Init+0x236>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4c      	ldr	r2, [pc, #304]	; (8001f2c <HAL_GPIO_Init+0x344>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00d      	beq.n	8001e1a <HAL_GPIO_Init+0x232>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a4b      	ldr	r2, [pc, #300]	; (8001f30 <HAL_GPIO_Init+0x348>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d007      	beq.n	8001e16 <HAL_GPIO_Init+0x22e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4a      	ldr	r2, [pc, #296]	; (8001f34 <HAL_GPIO_Init+0x34c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d101      	bne.n	8001e12 <HAL_GPIO_Init+0x22a>
 8001e0e:	2306      	movs	r3, #6
 8001e10:	e00c      	b.n	8001e2c <HAL_GPIO_Init+0x244>
 8001e12:	2307      	movs	r3, #7
 8001e14:	e00a      	b.n	8001e2c <HAL_GPIO_Init+0x244>
 8001e16:	2305      	movs	r3, #5
 8001e18:	e008      	b.n	8001e2c <HAL_GPIO_Init+0x244>
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	e006      	b.n	8001e2c <HAL_GPIO_Init+0x244>
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e004      	b.n	8001e2c <HAL_GPIO_Init+0x244>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e002      	b.n	8001e2c <HAL_GPIO_Init+0x244>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <HAL_GPIO_Init+0x244>
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	f002 0203 	and.w	r2, r2, #3
 8001e32:	0092      	lsls	r2, r2, #2
 8001e34:	4093      	lsls	r3, r2
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e3c:	4937      	ldr	r1, [pc, #220]	; (8001f1c <HAL_GPIO_Init+0x334>)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	089b      	lsrs	r3, r3, #2
 8001e42:	3302      	adds	r3, #2
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e4a:	4b3b      	ldr	r3, [pc, #236]	; (8001f38 <HAL_GPIO_Init+0x350>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4013      	ands	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e6e:	4a32      	ldr	r2, [pc, #200]	; (8001f38 <HAL_GPIO_Init+0x350>)
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e74:	4b30      	ldr	r3, [pc, #192]	; (8001f38 <HAL_GPIO_Init+0x350>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e98:	4a27      	ldr	r2, [pc, #156]	; (8001f38 <HAL_GPIO_Init+0x350>)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e9e:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <HAL_GPIO_Init+0x350>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ec2:	4a1d      	ldr	r2, [pc, #116]	; (8001f38 <HAL_GPIO_Init+0x350>)
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_GPIO_Init+0x350>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eec:	4a12      	ldr	r2, [pc, #72]	; (8001f38 <HAL_GPIO_Init+0x350>)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fa22 f303 	lsr.w	r3, r2, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f47f ae78 	bne.w	8001bf8 <HAL_GPIO_Init+0x10>
  }
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	371c      	adds	r7, #28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40010000 	.word	0x40010000
 8001f20:	48000400 	.word	0x48000400
 8001f24:	48000800 	.word	0x48000800
 8001f28:	48000c00 	.word	0x48000c00
 8001f2c:	48001000 	.word	0x48001000
 8001f30:	48001400 	.word	0x48001400
 8001f34:	48001800 	.word	0x48001800
 8001f38:	40010400 	.word	0x40010400

08001f3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f40:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40007000 	.word	0x40007000

08001f58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f66:	d130      	bne.n	8001fca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f68:	4b23      	ldr	r3, [pc, #140]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f74:	d038      	beq.n	8001fe8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f76:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f7e:	4a1e      	ldr	r2, [pc, #120]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f84:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f86:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2232      	movs	r2, #50	; 0x32
 8001f8c:	fb02 f303 	mul.w	r3, r2, r3
 8001f90:	4a1b      	ldr	r2, [pc, #108]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	0c9b      	lsrs	r3, r3, #18
 8001f98:	3301      	adds	r3, #1
 8001f9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f9c:	e002      	b.n	8001fa4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fa4:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb0:	d102      	bne.n	8001fb8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f2      	bne.n	8001f9e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc4:	d110      	bne.n	8001fe8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e00f      	b.n	8001fea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd6:	d007      	beq.n	8001fe8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fd8:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fe0:	4a05      	ldr	r2, [pc, #20]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fe6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40007000 	.word	0x40007000
 8001ffc:	20000000 	.word	0x20000000
 8002000:	431bde83 	.word	0x431bde83

08002004 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e3d8      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002016:	4b97      	ldr	r3, [pc, #604]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002020:	4b94      	ldr	r3, [pc, #592]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0310 	and.w	r3, r3, #16
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 80e4 	beq.w	8002200 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d007      	beq.n	800204e <HAL_RCC_OscConfig+0x4a>
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	2b0c      	cmp	r3, #12
 8002042:	f040 808b 	bne.w	800215c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2b01      	cmp	r3, #1
 800204a:	f040 8087 	bne.w	800215c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800204e:	4b89      	ldr	r3, [pc, #548]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d005      	beq.n	8002066 <HAL_RCC_OscConfig+0x62>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e3b0      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1a      	ldr	r2, [r3, #32]
 800206a:	4b82      	ldr	r3, [pc, #520]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d004      	beq.n	8002080 <HAL_RCC_OscConfig+0x7c>
 8002076:	4b7f      	ldr	r3, [pc, #508]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800207e:	e005      	b.n	800208c <HAL_RCC_OscConfig+0x88>
 8002080:	4b7c      	ldr	r3, [pc, #496]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 8002082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002086:	091b      	lsrs	r3, r3, #4
 8002088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800208c:	4293      	cmp	r3, r2
 800208e:	d223      	bcs.n	80020d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fd43 	bl	8002b20 <RCC_SetFlashLatencyFromMSIRange>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e391      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020a4:	4b73      	ldr	r3, [pc, #460]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a72      	ldr	r2, [pc, #456]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 80020aa:	f043 0308 	orr.w	r3, r3, #8
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	4b70      	ldr	r3, [pc, #448]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	496d      	ldr	r1, [pc, #436]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020c2:	4b6c      	ldr	r3, [pc, #432]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	021b      	lsls	r3, r3, #8
 80020d0:	4968      	ldr	r1, [pc, #416]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
 80020d6:	e025      	b.n	8002124 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020d8:	4b66      	ldr	r3, [pc, #408]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a65      	ldr	r2, [pc, #404]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 80020de:	f043 0308 	orr.w	r3, r3, #8
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	4b63      	ldr	r3, [pc, #396]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	4960      	ldr	r1, [pc, #384]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020f6:	4b5f      	ldr	r3, [pc, #380]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	021b      	lsls	r3, r3, #8
 8002104:	495b      	ldr	r1, [pc, #364]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d109      	bne.n	8002124 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	4618      	mov	r0, r3
 8002116:	f000 fd03 	bl	8002b20 <RCC_SetFlashLatencyFromMSIRange>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e351      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002124:	f000 fc38 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 8002128:	4602      	mov	r2, r0
 800212a:	4b52      	ldr	r3, [pc, #328]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	091b      	lsrs	r3, r3, #4
 8002130:	f003 030f 	and.w	r3, r3, #15
 8002134:	4950      	ldr	r1, [pc, #320]	; (8002278 <HAL_RCC_OscConfig+0x274>)
 8002136:	5ccb      	ldrb	r3, [r1, r3]
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	fa22 f303 	lsr.w	r3, r2, r3
 8002140:	4a4e      	ldr	r2, [pc, #312]	; (800227c <HAL_RCC_OscConfig+0x278>)
 8002142:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002144:	4b4e      	ldr	r3, [pc, #312]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe fd1f 	bl	8000b8c <HAL_InitTick>
 800214e:	4603      	mov	r3, r0
 8002150:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d052      	beq.n	80021fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	e335      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d032      	beq.n	80021ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002164:	4b43      	ldr	r3, [pc, #268]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a42      	ldr	r2, [pc, #264]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002170:	f7fe fd58 	bl	8000c24 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002178:	f7fe fd54 	bl	8000c24 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e31e      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800218a:	4b3a      	ldr	r3, [pc, #232]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002196:	4b37      	ldr	r3, [pc, #220]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a36      	ldr	r2, [pc, #216]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 800219c:	f043 0308 	orr.w	r3, r3, #8
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b34      	ldr	r3, [pc, #208]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	4931      	ldr	r1, [pc, #196]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021b4:	4b2f      	ldr	r3, [pc, #188]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	492c      	ldr	r1, [pc, #176]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	604b      	str	r3, [r1, #4]
 80021c8:	e01a      	b.n	8002200 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021ca:	4b2a      	ldr	r3, [pc, #168]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a29      	ldr	r2, [pc, #164]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021d6:	f7fe fd25 	bl	8000c24 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021de:	f7fe fd21 	bl	8000c24 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e2eb      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021f0:	4b20      	ldr	r3, [pc, #128]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f0      	bne.n	80021de <HAL_RCC_OscConfig+0x1da>
 80021fc:	e000      	b.n	8002200 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d074      	beq.n	80022f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2b08      	cmp	r3, #8
 8002210:	d005      	beq.n	800221e <HAL_RCC_OscConfig+0x21a>
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	2b0c      	cmp	r3, #12
 8002216:	d10e      	bne.n	8002236 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2b03      	cmp	r3, #3
 800221c:	d10b      	bne.n	8002236 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221e:	4b15      	ldr	r3, [pc, #84]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d064      	beq.n	80022f4 <HAL_RCC_OscConfig+0x2f0>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d160      	bne.n	80022f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e2c8      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223e:	d106      	bne.n	800224e <HAL_RCC_OscConfig+0x24a>
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0b      	ldr	r2, [pc, #44]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 8002246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	e026      	b.n	800229c <HAL_RCC_OscConfig+0x298>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002256:	d115      	bne.n	8002284 <HAL_RCC_OscConfig+0x280>
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a05      	ldr	r2, [pc, #20]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 800225e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	4b03      	ldr	r3, [pc, #12]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a02      	ldr	r2, [pc, #8]	; (8002274 <HAL_RCC_OscConfig+0x270>)
 800226a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	e014      	b.n	800229c <HAL_RCC_OscConfig+0x298>
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	08004b34 	.word	0x08004b34
 800227c:	20000000 	.word	0x20000000
 8002280:	20000004 	.word	0x20000004
 8002284:	4ba0      	ldr	r3, [pc, #640]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a9f      	ldr	r2, [pc, #636]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 800228a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	4b9d      	ldr	r3, [pc, #628]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a9c      	ldr	r2, [pc, #624]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 8002296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d013      	beq.n	80022cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a4:	f7fe fcbe 	bl	8000c24 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ac:	f7fe fcba 	bl	8000c24 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b64      	cmp	r3, #100	; 0x64
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e284      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022be:	4b92      	ldr	r3, [pc, #584]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x2a8>
 80022ca:	e014      	b.n	80022f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7fe fcaa 	bl	8000c24 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d4:	f7fe fca6 	bl	8000c24 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	; 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e270      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022e6:	4b88      	ldr	r3, [pc, #544]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x2d0>
 80022f2:	e000      	b.n	80022f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d060      	beq.n	80023c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	2b04      	cmp	r3, #4
 8002306:	d005      	beq.n	8002314 <HAL_RCC_OscConfig+0x310>
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	2b0c      	cmp	r3, #12
 800230c:	d119      	bne.n	8002342 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d116      	bne.n	8002342 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002314:	4b7c      	ldr	r3, [pc, #496]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_RCC_OscConfig+0x328>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e24d      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232c:	4b76      	ldr	r3, [pc, #472]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	061b      	lsls	r3, r3, #24
 800233a:	4973      	ldr	r1, [pc, #460]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002340:	e040      	b.n	80023c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d023      	beq.n	8002392 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800234a:	4b6f      	ldr	r3, [pc, #444]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a6e      	ldr	r2, [pc, #440]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 8002350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002356:	f7fe fc65 	bl	8000c24 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235e:	f7fe fc61 	bl	8000c24 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e22b      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002370:	4b65      	ldr	r3, [pc, #404]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237c:	4b62      	ldr	r3, [pc, #392]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	061b      	lsls	r3, r3, #24
 800238a:	495f      	ldr	r1, [pc, #380]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 800238c:	4313      	orrs	r3, r2
 800238e:	604b      	str	r3, [r1, #4]
 8002390:	e018      	b.n	80023c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002392:	4b5d      	ldr	r3, [pc, #372]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a5c      	ldr	r2, [pc, #368]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 8002398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800239c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239e:	f7fe fc41 	bl	8000c24 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a6:	f7fe fc3d 	bl	8000c24 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e207      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023b8:	4b53      	ldr	r3, [pc, #332]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f0      	bne.n	80023a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d03c      	beq.n	800244a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d01c      	beq.n	8002412 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d8:	4b4b      	ldr	r3, [pc, #300]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 80023da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023de:	4a4a      	ldr	r2, [pc, #296]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e8:	f7fe fc1c 	bl	8000c24 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f0:	f7fe fc18 	bl	8000c24 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e1e2      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002402:	4b41      	ldr	r3, [pc, #260]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 8002404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0ef      	beq.n	80023f0 <HAL_RCC_OscConfig+0x3ec>
 8002410:	e01b      	b.n	800244a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002412:	4b3d      	ldr	r3, [pc, #244]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 8002414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002418:	4a3b      	ldr	r2, [pc, #236]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 800241a:	f023 0301 	bic.w	r3, r3, #1
 800241e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002422:	f7fe fbff 	bl	8000c24 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242a:	f7fe fbfb 	bl	8000c24 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e1c5      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800243c:	4b32      	ldr	r3, [pc, #200]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 800243e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1ef      	bne.n	800242a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 80a6 	beq.w	80025a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002458:	2300      	movs	r3, #0
 800245a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800245c:	4b2a      	ldr	r3, [pc, #168]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 800245e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10d      	bne.n	8002484 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002468:	4b27      	ldr	r3, [pc, #156]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 800246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246c:	4a26      	ldr	r2, [pc, #152]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 800246e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002472:	6593      	str	r3, [r2, #88]	; 0x58
 8002474:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002480:	2301      	movs	r3, #1
 8002482:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002484:	4b21      	ldr	r3, [pc, #132]	; (800250c <HAL_RCC_OscConfig+0x508>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d118      	bne.n	80024c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002490:	4b1e      	ldr	r3, [pc, #120]	; (800250c <HAL_RCC_OscConfig+0x508>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a1d      	ldr	r2, [pc, #116]	; (800250c <HAL_RCC_OscConfig+0x508>)
 8002496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249c:	f7fe fbc2 	bl	8000c24 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a4:	f7fe fbbe 	bl	8000c24 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e188      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024b6:	4b15      	ldr	r3, [pc, #84]	; (800250c <HAL_RCC_OscConfig+0x508>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d108      	bne.n	80024dc <HAL_RCC_OscConfig+0x4d8>
 80024ca:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 80024cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d0:	4a0d      	ldr	r2, [pc, #52]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024da:	e029      	b.n	8002530 <HAL_RCC_OscConfig+0x52c>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2b05      	cmp	r3, #5
 80024e2:	d115      	bne.n	8002510 <HAL_RCC_OscConfig+0x50c>
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ea:	4a07      	ldr	r2, [pc, #28]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024f4:	4b04      	ldr	r3, [pc, #16]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fa:	4a03      	ldr	r2, [pc, #12]	; (8002508 <HAL_RCC_OscConfig+0x504>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002504:	e014      	b.n	8002530 <HAL_RCC_OscConfig+0x52c>
 8002506:	bf00      	nop
 8002508:	40021000 	.word	0x40021000
 800250c:	40007000 	.word	0x40007000
 8002510:	4b91      	ldr	r3, [pc, #580]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 8002512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002516:	4a90      	ldr	r2, [pc, #576]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002520:	4b8d      	ldr	r3, [pc, #564]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002526:	4a8c      	ldr	r2, [pc, #560]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 8002528:	f023 0304 	bic.w	r3, r3, #4
 800252c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d016      	beq.n	8002566 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002538:	f7fe fb74 	bl	8000c24 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800253e:	e00a      	b.n	8002556 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002540:	f7fe fb70 	bl	8000c24 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	f241 3288 	movw	r2, #5000	; 0x1388
 800254e:	4293      	cmp	r3, r2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e138      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002556:	4b80      	ldr	r3, [pc, #512]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 8002558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0ed      	beq.n	8002540 <HAL_RCC_OscConfig+0x53c>
 8002564:	e015      	b.n	8002592 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002566:	f7fe fb5d 	bl	8000c24 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800256c:	e00a      	b.n	8002584 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256e:	f7fe fb59 	bl	8000c24 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	f241 3288 	movw	r2, #5000	; 0x1388
 800257c:	4293      	cmp	r3, r2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e121      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002584:	4b74      	ldr	r3, [pc, #464]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1ed      	bne.n	800256e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002592:	7ffb      	ldrb	r3, [r7, #31]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d105      	bne.n	80025a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002598:	4b6f      	ldr	r3, [pc, #444]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 800259a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259c:	4a6e      	ldr	r2, [pc, #440]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 800259e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 810c 	beq.w	80027c6 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	f040 80d4 	bne.w	8002760 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025b8:	4b67      	ldr	r3, [pc, #412]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f003 0203 	and.w	r2, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d130      	bne.n	800262e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	3b01      	subs	r3, #1
 80025d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025da:	429a      	cmp	r2, r3
 80025dc:	d127      	bne.n	800262e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d11f      	bne.n	800262e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025f8:	2a07      	cmp	r2, #7
 80025fa:	bf14      	ite	ne
 80025fc:	2201      	movne	r2, #1
 80025fe:	2200      	moveq	r2, #0
 8002600:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002602:	4293      	cmp	r3, r2
 8002604:	d113      	bne.n	800262e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002610:	085b      	lsrs	r3, r3, #1
 8002612:	3b01      	subs	r3, #1
 8002614:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d109      	bne.n	800262e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	3b01      	subs	r3, #1
 8002628:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d06e      	beq.n	800270c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	2b0c      	cmp	r3, #12
 8002632:	d069      	beq.n	8002708 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002634:	4b48      	ldr	r3, [pc, #288]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d105      	bne.n	800264c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002640:	4b45      	ldr	r3, [pc, #276]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e0bb      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002650:	4b41      	ldr	r3, [pc, #260]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a40      	ldr	r2, [pc, #256]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 8002656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800265a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800265c:	f7fe fae2 	bl	8000c24 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002664:	f7fe fade 	bl	8000c24 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e0a8      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002676:	4b38      	ldr	r3, [pc, #224]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002682:	4b35      	ldr	r3, [pc, #212]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	4b35      	ldr	r3, [pc, #212]	; (800275c <HAL_RCC_OscConfig+0x758>)
 8002688:	4013      	ands	r3, r2
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002692:	3a01      	subs	r2, #1
 8002694:	0112      	lsls	r2, r2, #4
 8002696:	4311      	orrs	r1, r2
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800269c:	0212      	lsls	r2, r2, #8
 800269e:	4311      	orrs	r1, r2
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026a4:	0852      	lsrs	r2, r2, #1
 80026a6:	3a01      	subs	r2, #1
 80026a8:	0552      	lsls	r2, r2, #21
 80026aa:	4311      	orrs	r1, r2
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026b0:	0852      	lsrs	r2, r2, #1
 80026b2:	3a01      	subs	r2, #1
 80026b4:	0652      	lsls	r2, r2, #25
 80026b6:	4311      	orrs	r1, r2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026bc:	0912      	lsrs	r2, r2, #4
 80026be:	0452      	lsls	r2, r2, #17
 80026c0:	430a      	orrs	r2, r1
 80026c2:	4925      	ldr	r1, [pc, #148]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026c8:	4b23      	ldr	r3, [pc, #140]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a22      	ldr	r2, [pc, #136]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 80026ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026d4:	4b20      	ldr	r3, [pc, #128]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4a1f      	ldr	r2, [pc, #124]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 80026da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026e0:	f7fe faa0 	bl	8000c24 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e8:	f7fe fa9c 	bl	8000c24 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e066      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fa:	4b17      	ldr	r3, [pc, #92]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002706:	e05e      	b.n	80027c6 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e05d      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d156      	bne.n	80027c6 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002718:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0e      	ldr	r2, [pc, #56]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 800271e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002722:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4a0b      	ldr	r2, [pc, #44]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 800272a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800272e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002730:	f7fe fa78 	bl	8000c24 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002738:	f7fe fa74 	bl	8000c24 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e03e      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800274a:	4b03      	ldr	r3, [pc, #12]	; (8002758 <HAL_RCC_OscConfig+0x754>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x734>
 8002756:	e036      	b.n	80027c6 <HAL_RCC_OscConfig+0x7c2>
 8002758:	40021000 	.word	0x40021000
 800275c:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	2b0c      	cmp	r3, #12
 8002764:	d02d      	beq.n	80027c2 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002766:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <HAL_RCC_OscConfig+0x7cc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a19      	ldr	r2, [pc, #100]	; (80027d0 <HAL_RCC_OscConfig+0x7cc>)
 800276c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002770:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002772:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <HAL_RCC_OscConfig+0x7cc>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d105      	bne.n	800278a <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <HAL_RCC_OscConfig+0x7cc>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	4a13      	ldr	r2, [pc, #76]	; (80027d0 <HAL_RCC_OscConfig+0x7cc>)
 8002784:	f023 0303 	bic.w	r3, r3, #3
 8002788:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800278a:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <HAL_RCC_OscConfig+0x7cc>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	4a10      	ldr	r2, [pc, #64]	; (80027d0 <HAL_RCC_OscConfig+0x7cc>)
 8002790:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002798:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279a:	f7fe fa43 	bl	8000c24 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a2:	f7fe fa3f 	bl	8000c24 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e009      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b4:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_RCC_OscConfig+0x7cc>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f0      	bne.n	80027a2 <HAL_RCC_OscConfig+0x79e>
 80027c0:	e001      	b.n	80027c6 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3720      	adds	r7, #32
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000

080027d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0c8      	b.n	800297a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e8:	4b66      	ldr	r3, [pc, #408]	; (8002984 <HAL_RCC_ClockConfig+0x1b0>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d910      	bls.n	8002818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b63      	ldr	r3, [pc, #396]	; (8002984 <HAL_RCC_ClockConfig+0x1b0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 0207 	bic.w	r2, r3, #7
 80027fe:	4961      	ldr	r1, [pc, #388]	; (8002984 <HAL_RCC_ClockConfig+0x1b0>)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b5f      	ldr	r3, [pc, #380]	; (8002984 <HAL_RCC_ClockConfig+0x1b0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e0b0      	b.n	800297a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d04c      	beq.n	80028be <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d107      	bne.n	800283c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800282c:	4b56      	ldr	r3, [pc, #344]	; (8002988 <HAL_RCC_ClockConfig+0x1b4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d121      	bne.n	800287c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e09e      	b.n	800297a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d107      	bne.n	8002854 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002844:	4b50      	ldr	r3, [pc, #320]	; (8002988 <HAL_RCC_ClockConfig+0x1b4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d115      	bne.n	800287c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e092      	b.n	800297a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d107      	bne.n	800286c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800285c:	4b4a      	ldr	r3, [pc, #296]	; (8002988 <HAL_RCC_ClockConfig+0x1b4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d109      	bne.n	800287c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e086      	b.n	800297a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800286c:	4b46      	ldr	r3, [pc, #280]	; (8002988 <HAL_RCC_ClockConfig+0x1b4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e07e      	b.n	800297a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800287c:	4b42      	ldr	r3, [pc, #264]	; (8002988 <HAL_RCC_ClockConfig+0x1b4>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f023 0203 	bic.w	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	493f      	ldr	r1, [pc, #252]	; (8002988 <HAL_RCC_ClockConfig+0x1b4>)
 800288a:	4313      	orrs	r3, r2
 800288c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800288e:	f7fe f9c9 	bl	8000c24 <HAL_GetTick>
 8002892:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002894:	e00a      	b.n	80028ac <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002896:	f7fe f9c5 	bl	8000c24 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e066      	b.n	800297a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ac:	4b36      	ldr	r3, [pc, #216]	; (8002988 <HAL_RCC_ClockConfig+0x1b4>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 020c 	and.w	r2, r3, #12
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d1eb      	bne.n	8002896 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d008      	beq.n	80028dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ca:	4b2f      	ldr	r3, [pc, #188]	; (8002988 <HAL_RCC_ClockConfig+0x1b4>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	492c      	ldr	r1, [pc, #176]	; (8002988 <HAL_RCC_ClockConfig+0x1b4>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028dc:	4b29      	ldr	r3, [pc, #164]	; (8002984 <HAL_RCC_ClockConfig+0x1b0>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d210      	bcs.n	800290c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b26      	ldr	r3, [pc, #152]	; (8002984 <HAL_RCC_ClockConfig+0x1b0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 0207 	bic.w	r2, r3, #7
 80028f2:	4924      	ldr	r1, [pc, #144]	; (8002984 <HAL_RCC_ClockConfig+0x1b0>)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fa:	4b22      	ldr	r3, [pc, #136]	; (8002984 <HAL_RCC_ClockConfig+0x1b0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e036      	b.n	800297a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002918:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <HAL_RCC_ClockConfig+0x1b4>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4918      	ldr	r1, [pc, #96]	; (8002988 <HAL_RCC_ClockConfig+0x1b4>)
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d009      	beq.n	800294a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002936:	4b14      	ldr	r3, [pc, #80]	; (8002988 <HAL_RCC_ClockConfig+0x1b4>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4910      	ldr	r1, [pc, #64]	; (8002988 <HAL_RCC_ClockConfig+0x1b4>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800294a:	f000 f825 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 800294e:	4602      	mov	r2, r0
 8002950:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <HAL_RCC_ClockConfig+0x1b4>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	490c      	ldr	r1, [pc, #48]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 800295c:	5ccb      	ldrb	r3, [r1, r3]
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	fa22 f303 	lsr.w	r3, r2, r3
 8002966:	4a0a      	ldr	r2, [pc, #40]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <HAL_RCC_ClockConfig+0x1c0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe f90c 	bl	8000b8c <HAL_InitTick>
 8002974:	4603      	mov	r3, r0
 8002976:	72fb      	strb	r3, [r7, #11]

  return status;
 8002978:	7afb      	ldrb	r3, [r7, #11]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40022000 	.word	0x40022000
 8002988:	40021000 	.word	0x40021000
 800298c:	08004b34 	.word	0x08004b34
 8002990:	20000000 	.word	0x20000000
 8002994:	20000004 	.word	0x20000004

08002998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002998:	b480      	push	{r7}
 800299a:	b089      	sub	sp, #36	; 0x24
 800299c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	2300      	movs	r3, #0
 80029a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029a6:	4b3e      	ldr	r3, [pc, #248]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
 80029ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029b0:	4b3b      	ldr	r3, [pc, #236]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0x34>
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	2b0c      	cmp	r3, #12
 80029c4:	d121      	bne.n	8002a0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d11e      	bne.n	8002a0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029cc:	4b34      	ldr	r3, [pc, #208]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d107      	bne.n	80029e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029d8:	4b31      	ldr	r3, [pc, #196]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029de:	0a1b      	lsrs	r3, r3, #8
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	e005      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029e8:	4b2d      	ldr	r3, [pc, #180]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029f4:	4a2b      	ldr	r2, [pc, #172]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10d      	bne.n	8002a20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a08:	e00a      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d102      	bne.n	8002a16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a10:	4b25      	ldr	r3, [pc, #148]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a12:	61bb      	str	r3, [r7, #24]
 8002a14:	e004      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d101      	bne.n	8002a20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a1c:	4b23      	ldr	r3, [pc, #140]	; (8002aac <HAL_RCC_GetSysClockFreq+0x114>)
 8002a1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	2b0c      	cmp	r3, #12
 8002a24:	d134      	bne.n	8002a90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a26:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d003      	beq.n	8002a3e <HAL_RCC_GetSysClockFreq+0xa6>
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d003      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0xac>
 8002a3c:	e005      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a3e:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a40:	617b      	str	r3, [r7, #20]
      break;
 8002a42:	e005      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a44:	4b19      	ldr	r3, [pc, #100]	; (8002aac <HAL_RCC_GetSysClockFreq+0x114>)
 8002a46:	617b      	str	r3, [r7, #20]
      break;
 8002a48:	e002      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	617b      	str	r3, [r7, #20]
      break;
 8002a4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a50:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a5e:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	0a1b      	lsrs	r3, r3, #8
 8002a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	fb03 f202 	mul.w	r2, r3, r2
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a76:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	0e5b      	lsrs	r3, r3, #25
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	3301      	adds	r3, #1
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a90:	69bb      	ldr	r3, [r7, #24]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3724      	adds	r7, #36	; 0x24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	08004b4c 	.word	0x08004b4c
 8002aa8:	00f42400 	.word	0x00f42400
 8002aac:	007a1200 	.word	0x007a1200

08002ab0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	20000000 	.word	0x20000000

08002ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002acc:	f7ff fff0 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	4904      	ldr	r1, [pc, #16]	; (8002af0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ade:	5ccb      	ldrb	r3, [r1, r3]
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40021000 	.word	0x40021000
 8002af0:	08004b44 	.word	0x08004b44

08002af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002af8:	f7ff ffda 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002afc:	4602      	mov	r2, r0
 8002afe:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	0adb      	lsrs	r3, r3, #11
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	4904      	ldr	r1, [pc, #16]	; (8002b1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b0a:	5ccb      	ldrb	r3, [r1, r3]
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	08004b44 	.word	0x08004b44

08002b20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b28:	2300      	movs	r3, #0
 8002b2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b2c:	4b2a      	ldr	r3, [pc, #168]	; (8002bd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b38:	f7ff fa00 	bl	8001f3c <HAL_PWREx_GetVoltageRange>
 8002b3c:	6178      	str	r0, [r7, #20]
 8002b3e:	e014      	b.n	8002b6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b40:	4b25      	ldr	r3, [pc, #148]	; (8002bd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b44:	4a24      	ldr	r2, [pc, #144]	; (8002bd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b4c:	4b22      	ldr	r3, [pc, #136]	; (8002bd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b58:	f7ff f9f0 	bl	8001f3c <HAL_PWREx_GetVoltageRange>
 8002b5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b5e:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b62:	4a1d      	ldr	r2, [pc, #116]	; (8002bd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b70:	d10b      	bne.n	8002b8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b80      	cmp	r3, #128	; 0x80
 8002b76:	d919      	bls.n	8002bac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2ba0      	cmp	r3, #160	; 0xa0
 8002b7c:	d902      	bls.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b7e:	2302      	movs	r3, #2
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	e013      	b.n	8002bac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b84:	2301      	movs	r3, #1
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	e010      	b.n	8002bac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b80      	cmp	r3, #128	; 0x80
 8002b8e:	d902      	bls.n	8002b96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b90:	2303      	movs	r3, #3
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	e00a      	b.n	8002bac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b80      	cmp	r3, #128	; 0x80
 8002b9a:	d102      	bne.n	8002ba2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	e004      	b.n	8002bac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b70      	cmp	r3, #112	; 0x70
 8002ba6:	d101      	bne.n	8002bac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ba8:	2301      	movs	r3, #1
 8002baa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bac:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f023 0207 	bic.w	r2, r3, #7
 8002bb4:	4909      	ldr	r1, [pc, #36]	; (8002bdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bbc:	4b07      	ldr	r3, [pc, #28]	; (8002bdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d001      	beq.n	8002bce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40022000 	.word	0x40022000

08002be0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002be8:	2300      	movs	r3, #0
 8002bea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bec:	2300      	movs	r3, #0
 8002bee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d041      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c00:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c04:	d02a      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c06:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c0a:	d824      	bhi.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c10:	d008      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c16:	d81e      	bhi.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c20:	d010      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c22:	e018      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c24:	4b86      	ldr	r3, [pc, #536]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4a85      	ldr	r2, [pc, #532]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c30:	e015      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3304      	adds	r3, #4
 8002c36:	2100      	movs	r1, #0
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fabb 	bl	80031b4 <RCCEx_PLLSAI1_Config>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c42:	e00c      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3320      	adds	r3, #32
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fba6 	bl	800339c <RCCEx_PLLSAI2_Config>
 8002c50:	4603      	mov	r3, r0
 8002c52:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c54:	e003      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	74fb      	strb	r3, [r7, #19]
      break;
 8002c5a:	e000      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002c5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c5e:	7cfb      	ldrb	r3, [r7, #19]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10b      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c64:	4b76      	ldr	r3, [pc, #472]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c72:	4973      	ldr	r1, [pc, #460]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c7a:	e001      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c7c:	7cfb      	ldrb	r3, [r7, #19]
 8002c7e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d041      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c94:	d02a      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002c96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c9a:	d824      	bhi.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ca0:	d008      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ca2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ca6:	d81e      	bhi.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00a      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cb0:	d010      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cb2:	e018      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cb4:	4b62      	ldr	r3, [pc, #392]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4a61      	ldr	r2, [pc, #388]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cbe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cc0:	e015      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 fa73 	bl	80031b4 <RCCEx_PLLSAI1_Config>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cd2:	e00c      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3320      	adds	r3, #32
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fb5e 	bl	800339c <RCCEx_PLLSAI2_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ce4:	e003      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	74fb      	strb	r3, [r7, #19]
      break;
 8002cea:	e000      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002cec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cee:	7cfb      	ldrb	r3, [r7, #19]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10b      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cf4:	4b52      	ldr	r3, [pc, #328]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d02:	494f      	ldr	r1, [pc, #316]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d0a:	e001      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d0c:	7cfb      	ldrb	r3, [r7, #19]
 8002d0e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 80a0 	beq.w	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d22:	4b47      	ldr	r3, [pc, #284]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d32:	2300      	movs	r3, #0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00d      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d38:	4b41      	ldr	r3, [pc, #260]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	4a40      	ldr	r2, [pc, #256]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d42:	6593      	str	r3, [r2, #88]	; 0x58
 8002d44:	4b3e      	ldr	r3, [pc, #248]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d50:	2301      	movs	r3, #1
 8002d52:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d54:	4b3b      	ldr	r3, [pc, #236]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a3a      	ldr	r2, [pc, #232]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d60:	f7fd ff60 	bl	8000c24 <HAL_GetTick>
 8002d64:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d66:	e009      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d68:	f7fd ff5c 	bl	8000c24 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d902      	bls.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	74fb      	strb	r3, [r7, #19]
        break;
 8002d7a:	e005      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d7c:	4b31      	ldr	r3, [pc, #196]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0ef      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002d88:	7cfb      	ldrb	r3, [r7, #19]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d15c      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d8e:	4b2c      	ldr	r3, [pc, #176]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d98:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d01f      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d019      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dac:	4b24      	ldr	r3, [pc, #144]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002db8:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbe:	4a20      	ldr	r2, [pc, #128]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dc8:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dce:	4a1c      	ldr	r2, [pc, #112]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002dd8:	4a19      	ldr	r2, [pc, #100]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d016      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dea:	f7fd ff1b 	bl	8000c24 <HAL_GetTick>
 8002dee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002df0:	e00b      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df2:	f7fd ff17 	bl	8000c24 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d902      	bls.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	74fb      	strb	r3, [r7, #19]
            break;
 8002e08:	e006      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e0a:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0ec      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e18:	7cfb      	ldrb	r3, [r7, #19]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e1e:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e2e:	4904      	ldr	r1, [pc, #16]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e36:	e009      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
 8002e3a:	74bb      	strb	r3, [r7, #18]
 8002e3c:	e006      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e48:	7cfb      	ldrb	r3, [r7, #19]
 8002e4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e4c:	7c7b      	ldrb	r3, [r7, #17]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d105      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e52:	4b9e      	ldr	r3, [pc, #632]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e56:	4a9d      	ldr	r2, [pc, #628]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e6a:	4b98      	ldr	r3, [pc, #608]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e70:	f023 0203 	bic.w	r2, r3, #3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e78:	4994      	ldr	r1, [pc, #592]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e8c:	4b8f      	ldr	r3, [pc, #572]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e92:	f023 020c 	bic.w	r2, r3, #12
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9a:	498c      	ldr	r1, [pc, #560]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002eae:	4b87      	ldr	r3, [pc, #540]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	4983      	ldr	r1, [pc, #524]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ed0:	4b7e      	ldr	r3, [pc, #504]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	497b      	ldr	r1, [pc, #492]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ef2:	4b76      	ldr	r3, [pc, #472]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f00:	4972      	ldr	r1, [pc, #456]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0320 	and.w	r3, r3, #32
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f14:	4b6d      	ldr	r3, [pc, #436]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f22:	496a      	ldr	r1, [pc, #424]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f36:	4b65      	ldr	r3, [pc, #404]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f44:	4961      	ldr	r1, [pc, #388]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00a      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f58:	4b5c      	ldr	r3, [pc, #368]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f66:	4959      	ldr	r1, [pc, #356]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f7a:	4b54      	ldr	r3, [pc, #336]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f88:	4950      	ldr	r1, [pc, #320]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00a      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f9c:	4b4b      	ldr	r3, [pc, #300]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002faa:	4948      	ldr	r1, [pc, #288]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00a      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fbe:	4b43      	ldr	r3, [pc, #268]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fcc:	493f      	ldr	r1, [pc, #252]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d028      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fe0:	4b3a      	ldr	r3, [pc, #232]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fee:	4937      	ldr	r1, [pc, #220]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ffa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ffe:	d106      	bne.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003000:	4b32      	ldr	r3, [pc, #200]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4a31      	ldr	r2, [pc, #196]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003006:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800300a:	60d3      	str	r3, [r2, #12]
 800300c:	e011      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003012:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003016:	d10c      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3304      	adds	r3, #4
 800301c:	2101      	movs	r1, #1
 800301e:	4618      	mov	r0, r3
 8003020:	f000 f8c8 	bl	80031b4 <RCCEx_PLLSAI1_Config>
 8003024:	4603      	mov	r3, r0
 8003026:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003028:	7cfb      	ldrb	r3, [r7, #19]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800302e:	7cfb      	ldrb	r3, [r7, #19]
 8003030:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d028      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800303e:	4b23      	ldr	r3, [pc, #140]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003044:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	491f      	ldr	r1, [pc, #124]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003058:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800305c:	d106      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800305e:	4b1b      	ldr	r3, [pc, #108]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	4a1a      	ldr	r2, [pc, #104]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003064:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003068:	60d3      	str	r3, [r2, #12]
 800306a:	e011      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003070:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003074:	d10c      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3304      	adds	r3, #4
 800307a:	2101      	movs	r1, #1
 800307c:	4618      	mov	r0, r3
 800307e:	f000 f899 	bl	80031b4 <RCCEx_PLLSAI1_Config>
 8003082:	4603      	mov	r3, r0
 8003084:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003086:	7cfb      	ldrb	r3, [r7, #19]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800308c:	7cfb      	ldrb	r3, [r7, #19]
 800308e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d02b      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030aa:	4908      	ldr	r1, [pc, #32]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030ba:	d109      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030bc:	4b03      	ldr	r3, [pc, #12]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4a02      	ldr	r2, [pc, #8]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030c6:	60d3      	str	r3, [r2, #12]
 80030c8:	e014      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030d8:	d10c      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3304      	adds	r3, #4
 80030de:	2101      	movs	r1, #1
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 f867 	bl	80031b4 <RCCEx_PLLSAI1_Config>
 80030e6:	4603      	mov	r3, r0
 80030e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030ea:	7cfb      	ldrb	r3, [r7, #19]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80030f0:	7cfb      	ldrb	r3, [r7, #19]
 80030f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d02f      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003100:	4b2b      	ldr	r3, [pc, #172]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003106:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800310e:	4928      	ldr	r1, [pc, #160]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800311a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800311e:	d10d      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3304      	adds	r3, #4
 8003124:	2102      	movs	r1, #2
 8003126:	4618      	mov	r0, r3
 8003128:	f000 f844 	bl	80031b4 <RCCEx_PLLSAI1_Config>
 800312c:	4603      	mov	r3, r0
 800312e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003130:	7cfb      	ldrb	r3, [r7, #19]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d014      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003136:	7cfb      	ldrb	r3, [r7, #19]
 8003138:	74bb      	strb	r3, [r7, #18]
 800313a:	e011      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003144:	d10c      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3320      	adds	r3, #32
 800314a:	2102      	movs	r1, #2
 800314c:	4618      	mov	r0, r3
 800314e:	f000 f925 	bl	800339c <RCCEx_PLLSAI2_Config>
 8003152:	4603      	mov	r3, r0
 8003154:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003156:	7cfb      	ldrb	r3, [r7, #19]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800315c:	7cfb      	ldrb	r3, [r7, #19]
 800315e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800316c:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003172:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800317a:	490d      	ldr	r1, [pc, #52]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00b      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800318e:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003194:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800319e:	4904      	ldr	r1, [pc, #16]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40021000 	.word	0x40021000

080031b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031c2:	4b75      	ldr	r3, [pc, #468]	; (8003398 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d018      	beq.n	8003200 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031ce:	4b72      	ldr	r3, [pc, #456]	; (8003398 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f003 0203 	and.w	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d10d      	bne.n	80031fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
       ||
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031e6:	4b6c      	ldr	r3, [pc, #432]	; (8003398 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	091b      	lsrs	r3, r3, #4
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
       ||
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d047      	beq.n	800328a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
 80031fe:	e044      	b.n	800328a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b03      	cmp	r3, #3
 8003206:	d018      	beq.n	800323a <RCCEx_PLLSAI1_Config+0x86>
 8003208:	2b03      	cmp	r3, #3
 800320a:	d825      	bhi.n	8003258 <RCCEx_PLLSAI1_Config+0xa4>
 800320c:	2b01      	cmp	r3, #1
 800320e:	d002      	beq.n	8003216 <RCCEx_PLLSAI1_Config+0x62>
 8003210:	2b02      	cmp	r3, #2
 8003212:	d009      	beq.n	8003228 <RCCEx_PLLSAI1_Config+0x74>
 8003214:	e020      	b.n	8003258 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003216:	4b60      	ldr	r3, [pc, #384]	; (8003398 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d11d      	bne.n	800325e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003226:	e01a      	b.n	800325e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003228:	4b5b      	ldr	r3, [pc, #364]	; (8003398 <RCCEx_PLLSAI1_Config+0x1e4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003230:	2b00      	cmp	r3, #0
 8003232:	d116      	bne.n	8003262 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003238:	e013      	b.n	8003262 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800323a:	4b57      	ldr	r3, [pc, #348]	; (8003398 <RCCEx_PLLSAI1_Config+0x1e4>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10f      	bne.n	8003266 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003246:	4b54      	ldr	r3, [pc, #336]	; (8003398 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003256:	e006      	b.n	8003266 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	73fb      	strb	r3, [r7, #15]
      break;
 800325c:	e004      	b.n	8003268 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800325e:	bf00      	nop
 8003260:	e002      	b.n	8003268 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003262:	bf00      	nop
 8003264:	e000      	b.n	8003268 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003266:	bf00      	nop
    }

    if(status == HAL_OK)
 8003268:	7bfb      	ldrb	r3, [r7, #15]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10d      	bne.n	800328a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800326e:	4b4a      	ldr	r3, [pc, #296]	; (8003398 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6819      	ldr	r1, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	3b01      	subs	r3, #1
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	430b      	orrs	r3, r1
 8003284:	4944      	ldr	r1, [pc, #272]	; (8003398 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003286:	4313      	orrs	r3, r2
 8003288:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d17d      	bne.n	800338c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003290:	4b41      	ldr	r3, [pc, #260]	; (8003398 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a40      	ldr	r2, [pc, #256]	; (8003398 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003296:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800329a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800329c:	f7fd fcc2 	bl	8000c24 <HAL_GetTick>
 80032a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032a2:	e009      	b.n	80032b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032a4:	f7fd fcbe 	bl	8000c24 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d902      	bls.n	80032b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	73fb      	strb	r3, [r7, #15]
        break;
 80032b6:	e005      	b.n	80032c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032b8:	4b37      	ldr	r3, [pc, #220]	; (8003398 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1ef      	bne.n	80032a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d160      	bne.n	800338c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d111      	bne.n	80032f4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032d0:	4b31      	ldr	r3, [pc, #196]	; (8003398 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80032d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6892      	ldr	r2, [r2, #8]
 80032e0:	0211      	lsls	r1, r2, #8
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68d2      	ldr	r2, [r2, #12]
 80032e6:	0912      	lsrs	r2, r2, #4
 80032e8:	0452      	lsls	r2, r2, #17
 80032ea:	430a      	orrs	r2, r1
 80032ec:	492a      	ldr	r1, [pc, #168]	; (8003398 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	610b      	str	r3, [r1, #16]
 80032f2:	e027      	b.n	8003344 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d112      	bne.n	8003320 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032fa:	4b27      	ldr	r3, [pc, #156]	; (8003398 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003302:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6892      	ldr	r2, [r2, #8]
 800330a:	0211      	lsls	r1, r2, #8
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6912      	ldr	r2, [r2, #16]
 8003310:	0852      	lsrs	r2, r2, #1
 8003312:	3a01      	subs	r2, #1
 8003314:	0552      	lsls	r2, r2, #21
 8003316:	430a      	orrs	r2, r1
 8003318:	491f      	ldr	r1, [pc, #124]	; (8003398 <RCCEx_PLLSAI1_Config+0x1e4>)
 800331a:	4313      	orrs	r3, r2
 800331c:	610b      	str	r3, [r1, #16]
 800331e:	e011      	b.n	8003344 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003320:	4b1d      	ldr	r3, [pc, #116]	; (8003398 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003328:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6892      	ldr	r2, [r2, #8]
 8003330:	0211      	lsls	r1, r2, #8
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6952      	ldr	r2, [r2, #20]
 8003336:	0852      	lsrs	r2, r2, #1
 8003338:	3a01      	subs	r2, #1
 800333a:	0652      	lsls	r2, r2, #25
 800333c:	430a      	orrs	r2, r1
 800333e:	4916      	ldr	r1, [pc, #88]	; (8003398 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003340:	4313      	orrs	r3, r2
 8003342:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003344:	4b14      	ldr	r3, [pc, #80]	; (8003398 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a13      	ldr	r2, [pc, #76]	; (8003398 <RCCEx_PLLSAI1_Config+0x1e4>)
 800334a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800334e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003350:	f7fd fc68 	bl	8000c24 <HAL_GetTick>
 8003354:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003356:	e009      	b.n	800336c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003358:	f7fd fc64 	bl	8000c24 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d902      	bls.n	800336c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	73fb      	strb	r3, [r7, #15]
          break;
 800336a:	e005      	b.n	8003378 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800336c:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <RCCEx_PLLSAI1_Config+0x1e4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0ef      	beq.n	8003358 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d106      	bne.n	800338c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800337e:	4b06      	ldr	r3, [pc, #24]	; (8003398 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	4904      	ldr	r1, [pc, #16]	; (8003398 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003388:	4313      	orrs	r3, r2
 800338a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800338c:	7bfb      	ldrb	r3, [r7, #15]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000

0800339c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033aa:	4b6a      	ldr	r3, [pc, #424]	; (8003554 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d018      	beq.n	80033e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80033b6:	4b67      	ldr	r3, [pc, #412]	; (8003554 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f003 0203 	and.w	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d10d      	bne.n	80033e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
       ||
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80033ce:	4b61      	ldr	r3, [pc, #388]	; (8003554 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	091b      	lsrs	r3, r3, #4
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
       ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d047      	beq.n	8003472 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	73fb      	strb	r3, [r7, #15]
 80033e6:	e044      	b.n	8003472 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b03      	cmp	r3, #3
 80033ee:	d018      	beq.n	8003422 <RCCEx_PLLSAI2_Config+0x86>
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d825      	bhi.n	8003440 <RCCEx_PLLSAI2_Config+0xa4>
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d002      	beq.n	80033fe <RCCEx_PLLSAI2_Config+0x62>
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d009      	beq.n	8003410 <RCCEx_PLLSAI2_Config+0x74>
 80033fc:	e020      	b.n	8003440 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033fe:	4b55      	ldr	r3, [pc, #340]	; (8003554 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d11d      	bne.n	8003446 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800340e:	e01a      	b.n	8003446 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003410:	4b50      	ldr	r3, [pc, #320]	; (8003554 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003418:	2b00      	cmp	r3, #0
 800341a:	d116      	bne.n	800344a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003420:	e013      	b.n	800344a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003422:	4b4c      	ldr	r3, [pc, #304]	; (8003554 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10f      	bne.n	800344e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800342e:	4b49      	ldr	r3, [pc, #292]	; (8003554 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800343e:	e006      	b.n	800344e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	73fb      	strb	r3, [r7, #15]
      break;
 8003444:	e004      	b.n	8003450 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003446:	bf00      	nop
 8003448:	e002      	b.n	8003450 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800344a:	bf00      	nop
 800344c:	e000      	b.n	8003450 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800344e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10d      	bne.n	8003472 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003456:	4b3f      	ldr	r3, [pc, #252]	; (8003554 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6819      	ldr	r1, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	3b01      	subs	r3, #1
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	430b      	orrs	r3, r1
 800346c:	4939      	ldr	r1, [pc, #228]	; (8003554 <RCCEx_PLLSAI2_Config+0x1b8>)
 800346e:	4313      	orrs	r3, r2
 8003470:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d167      	bne.n	8003548 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003478:	4b36      	ldr	r3, [pc, #216]	; (8003554 <RCCEx_PLLSAI2_Config+0x1b8>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a35      	ldr	r2, [pc, #212]	; (8003554 <RCCEx_PLLSAI2_Config+0x1b8>)
 800347e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003482:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003484:	f7fd fbce 	bl	8000c24 <HAL_GetTick>
 8003488:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800348a:	e009      	b.n	80034a0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800348c:	f7fd fbca 	bl	8000c24 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d902      	bls.n	80034a0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	73fb      	strb	r3, [r7, #15]
        break;
 800349e:	e005      	b.n	80034ac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034a0:	4b2c      	ldr	r3, [pc, #176]	; (8003554 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1ef      	bne.n	800348c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d14a      	bne.n	8003548 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d111      	bne.n	80034dc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034b8:	4b26      	ldr	r3, [pc, #152]	; (8003554 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80034c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6892      	ldr	r2, [r2, #8]
 80034c8:	0211      	lsls	r1, r2, #8
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68d2      	ldr	r2, [r2, #12]
 80034ce:	0912      	lsrs	r2, r2, #4
 80034d0:	0452      	lsls	r2, r2, #17
 80034d2:	430a      	orrs	r2, r1
 80034d4:	491f      	ldr	r1, [pc, #124]	; (8003554 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	614b      	str	r3, [r1, #20]
 80034da:	e011      	b.n	8003500 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034dc:	4b1d      	ldr	r3, [pc, #116]	; (8003554 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6892      	ldr	r2, [r2, #8]
 80034ec:	0211      	lsls	r1, r2, #8
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6912      	ldr	r2, [r2, #16]
 80034f2:	0852      	lsrs	r2, r2, #1
 80034f4:	3a01      	subs	r2, #1
 80034f6:	0652      	lsls	r2, r2, #25
 80034f8:	430a      	orrs	r2, r1
 80034fa:	4916      	ldr	r1, [pc, #88]	; (8003554 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003500:	4b14      	ldr	r3, [pc, #80]	; (8003554 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a13      	ldr	r2, [pc, #76]	; (8003554 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800350a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350c:	f7fd fb8a 	bl	8000c24 <HAL_GetTick>
 8003510:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003512:	e009      	b.n	8003528 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003514:	f7fd fb86 	bl	8000c24 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d902      	bls.n	8003528 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	73fb      	strb	r3, [r7, #15]
          break;
 8003526:	e005      	b.n	8003534 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003528:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <RCCEx_PLLSAI2_Config+0x1b8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0ef      	beq.n	8003514 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003534:	7bfb      	ldrb	r3, [r7, #15]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800353a:	4b06      	ldr	r3, [pc, #24]	; (8003554 <RCCEx_PLLSAI2_Config+0x1b8>)
 800353c:	695a      	ldr	r2, [r3, #20]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	4904      	ldr	r1, [pc, #16]	; (8003554 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003544:	4313      	orrs	r3, r2
 8003546:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003548:	7bfb      	ldrb	r3, [r7, #15]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40021000 	.word	0x40021000

08003558 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e03c      	b.n	80035e4 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fd f998 	bl	80008b4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f9df 	bl	8003960 <USART_SetConfig>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e01b      	b.n	80035e4 <HAL_USART_Init+0x8c>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035ba:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035ca:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 fb15 	bl	8003c0c <USART_CheckIdleState>
 80035e2:	4603      	mov	r3, r0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08a      	sub	sp, #40	; 0x28
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	4613      	mov	r3, r2
 80035fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	f040 809a 	bne.w	800373e <HAL_USART_Transmit+0x152>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <HAL_USART_Transmit+0x2a>
 8003610:	88fb      	ldrh	r3, [r7, #6]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e092      	b.n	8003740 <HAL_USART_Transmit+0x154>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_USART_Transmit+0x3c>
 8003624:	2302      	movs	r3, #2
 8003626:	e08b      	b.n	8003740 <HAL_USART_Transmit+0x154>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2212      	movs	r2, #18
 800363a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800363e:	f7fd faf1 	bl	8000c24 <HAL_GetTick>
 8003642:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	88fa      	ldrh	r2, [r7, #6]
 8003648:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	88fa      	ldrh	r2, [r7, #6]
 800364e:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003658:	d108      	bne.n	800366c <HAL_USART_Transmit+0x80>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d104      	bne.n	800366c <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 8003662:	2300      	movs	r3, #0
 8003664:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	61bb      	str	r3, [r7, #24]
 800366a:	e003      	b.n	8003674 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8003670:	2300      	movs	r3, #0
 8003672:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8003674:	e02b      	b.n	80036ce <HAL_USART_Transmit+0xe2>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2200      	movs	r2, #0
 800367e:	2180      	movs	r1, #128	; 0x80
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 f936 	bl	80038f2 <USART_WaitOnFlagUntilTimeout>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e057      	b.n	8003740 <HAL_USART_Transmit+0x154>
      }
      if (ptxdata8bits == NULL)
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10b      	bne.n	80036ae <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	881a      	ldrh	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036a2:	b292      	uxth	r2, r2
 80036a4:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	3302      	adds	r3, #2
 80036aa:	61bb      	str	r3, [r7, #24]
 80036ac:	e008      	b.n	80036c0 <HAL_USART_Transmit+0xd4>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	781a      	ldrb	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	b292      	uxth	r2, r2
 80036b8:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	3301      	adds	r3, #1
 80036be:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1ce      	bne.n	8003676 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2200      	movs	r2, #0
 80036e0:	2140      	movs	r1, #64	; 0x40
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 f905 	bl	80038f2 <USART_WaitOnFlagUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <HAL_USART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e026      	b.n	8003740 <HAL_USART_Transmit+0x154>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2240      	movs	r2, #64	; 0x40
 80036f8:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2208      	movs	r2, #8
 8003700:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	8b1b      	ldrh	r3, [r3, #24]
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0208 	orr.w	r2, r2, #8
 8003712:	b292      	uxth	r2, r2
 8003714:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	8b1b      	ldrh	r3, [r3, #24]
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0210 	orr.w	r2, r2, #16
 8003726:	b292      	uxth	r2, r2
 8003728:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	e000      	b.n	8003740 <HAL_USART_Transmit+0x154>
  }
  else
  {
    return HAL_BUSY;
 800373e:	2302      	movs	r3, #2
  }
}
 8003740:	4618      	mov	r0, r3
 8003742:	3720      	adds	r7, #32
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_USART_Receive>:
  * @param Size Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08a      	sub	sp, #40	; 0x28
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	603b      	str	r3, [r7, #0]
 8003754:	4613      	mov	r3, r2
 8003756:	80fb      	strh	r3, [r7, #6]
  uint8_t  *prxdata8bits;
  uint16_t *prxdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b01      	cmp	r3, #1
 8003762:	f040 80c1 	bne.w	80038e8 <HAL_USART_Receive+0x1a0>
  {
    if ((pRxData == NULL) || (Size == 0U))
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_USART_Receive+0x2a>
 800376c:	88fb      	ldrh	r3, [r7, #6]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_USART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e0b9      	b.n	80038ea <HAL_USART_Receive+0x1a2>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_USART_Receive+0x3c>
 8003780:	2302      	movs	r3, #2
 8003782:	e0b2      	b.n	80038ea <HAL_USART_Receive+0x1a2>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_RX;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2222      	movs	r2, #34	; 0x22
 8003796:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800379a:	f7fd fa43 	bl	8000c24 <HAL_GetTick>
 800379e:	6178      	str	r0, [r7, #20]

    husart->RxXferSize = Size;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	88fa      	ldrh	r2, [r7, #6]
 80037a4:	861a      	strh	r2, [r3, #48]	; 0x30
    husart->RxXferCount = Size;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	88fa      	ldrh	r2, [r7, #6]
 80037aa:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Computation of USART mask to apply to RDR register */
    USART_MASK_COMPUTATION(husart);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b4:	d10c      	bne.n	80037d0 <HAL_USART_Receive+0x88>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d104      	bne.n	80037c8 <HAL_USART_Receive+0x80>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80037c4:	869a      	strh	r2, [r3, #52]	; 0x34
 80037c6:	e027      	b.n	8003818 <HAL_USART_Receive+0xd0>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	22ff      	movs	r2, #255	; 0xff
 80037cc:	869a      	strh	r2, [r3, #52]	; 0x34
 80037ce:	e023      	b.n	8003818 <HAL_USART_Receive+0xd0>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10b      	bne.n	80037f0 <HAL_USART_Receive+0xa8>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d103      	bne.n	80037e8 <HAL_USART_Receive+0xa0>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	22ff      	movs	r2, #255	; 0xff
 80037e4:	869a      	strh	r2, [r3, #52]	; 0x34
 80037e6:	e017      	b.n	8003818 <HAL_USART_Receive+0xd0>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	227f      	movs	r2, #127	; 0x7f
 80037ec:	869a      	strh	r2, [r3, #52]	; 0x34
 80037ee:	e013      	b.n	8003818 <HAL_USART_Receive+0xd0>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037f8:	d10b      	bne.n	8003812 <HAL_USART_Receive+0xca>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d103      	bne.n	800380a <HAL_USART_Receive+0xc2>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	227f      	movs	r2, #127	; 0x7f
 8003806:	869a      	strh	r2, [r3, #52]	; 0x34
 8003808:	e006      	b.n	8003818 <HAL_USART_Receive+0xd0>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	223f      	movs	r2, #63	; 0x3f
 800380e:	869a      	strh	r2, [r3, #52]	; 0x34
 8003810:	e002      	b.n	8003818 <HAL_USART_Receive+0xd0>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	869a      	strh	r2, [r3, #52]	; 0x34
    uhMask = husart->Mask;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800381c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003826:	d108      	bne.n	800383a <HAL_USART_Receive+0xf2>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d104      	bne.n	800383a <HAL_USART_Receive+0xf2>
    {
      prxdata8bits  = NULL;
 8003830:	2300      	movs	r3, #0
 8003832:	61fb      	str	r3, [r7, #28]
      prxdata16bits = (uint16_t *) pRxData;
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	61bb      	str	r3, [r7, #24]
 8003838:	e003      	b.n	8003842 <HAL_USART_Receive+0xfa>
    }
    else
    {
      prxdata8bits  = pRxData;
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	61fb      	str	r3, [r7, #28]
      prxdata16bits = NULL;
 800383e:	2300      	movs	r3, #0
 8003840:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (husart->RxXferCount > 0U)
 8003842:	e042      	b.n	80038ca <HAL_USART_Receive+0x182>
      {
        /* Wait until TXE flag is set to send dummy byte in order to generate the
        * clock for the slave to send data.
        * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
        * can be written for all the cases. */
        if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	2200      	movs	r2, #0
 800384c:	2180      	movs	r1, #128	; 0x80
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f84f 	bl	80038f2 <USART_WaitOnFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_USART_Receive+0x116>
        {
          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e045      	b.n	80038ea <HAL_USART_Receive+0x1a2>
        }
        husart->Instance->TDR = (USART_DUMMY_DATA & (uint16_t)0x0FF);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	22ff      	movs	r2, #255	; 0xff
 8003864:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait for RXNE Flag */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2200      	movs	r2, #0
 800386e:	2120      	movs	r1, #32
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 f83e 	bl	80038f2 <USART_WaitOnFlagUntilTimeout>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_USART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e034      	b.n	80038ea <HAL_USART_Receive+0x1a2>
      }

      if (prxdata8bits == NULL)
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10c      	bne.n	80038a0 <HAL_USART_Receive+0x158>
      {
        *prxdata16bits = (uint16_t)(husart->Instance->RDR & uhMask);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800388c:	b29a      	uxth	r2, r3
 800388e:	8a7b      	ldrh	r3, [r7, #18]
 8003890:	4013      	ands	r3, r2
 8003892:	b29a      	uxth	r2, r3
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	801a      	strh	r2, [r3, #0]
        prxdata16bits++;
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	3302      	adds	r3, #2
 800389c:	61bb      	str	r3, [r7, #24]
 800389e:	e00d      	b.n	80038bc <HAL_USART_Receive+0x174>
      }
      else
      {
        *prxdata8bits = (uint8_t)(husart->Instance->RDR & (uint8_t)(uhMask & 0xFFU));
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	8a7b      	ldrh	r3, [r7, #18]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	4013      	ands	r3, r2
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	701a      	strb	r2, [r3, #0]
        prxdata8bits++;
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	3301      	adds	r3, #1
 80038ba:	61fb      	str	r3, [r7, #28]
      }

      husart->RxXferCount--;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	865a      	strh	r2, [r3, #50]	; 0x32
    while (husart->RxXferCount > 0U)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1b7      	bne.n	8003844 <HAL_USART_Receive+0xfc>
      __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR2_SLVEN */

    /* At end of Rx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	e000      	b.n	80038ea <HAL_USART_Receive+0x1a2>
  }
  else
  {
    return HAL_BUSY;
 80038e8:	2302      	movs	r3, #2
  }
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3720      	adds	r7, #32
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	603b      	str	r3, [r7, #0]
 80038fe:	4613      	mov	r3, r2
 8003900:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003902:	e018      	b.n	8003936 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390a:	d014      	beq.n	8003936 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800390c:	f7fd f98a 	bl	8000c24 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	429a      	cmp	r2, r3
 800391a:	d302      	bcc.n	8003922 <USART_WaitOnFlagUntilTimeout+0x30>
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e00f      	b.n	8003956 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69da      	ldr	r2, [r3, #28]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4013      	ands	r3, r2
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	429a      	cmp	r2, r3
 8003944:	bf0c      	ite	eq
 8003946:	2301      	moveq	r3, #1
 8003948:	2300      	movne	r3, #0
 800394a:	b2db      	uxtb	r3, r3
 800394c:	461a      	mov	r2, r3
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	429a      	cmp	r2, r3
 8003952:	d0d7      	beq.n	8003904 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800396c:	2300      	movs	r3, #0
 800396e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	431a      	orrs	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003984:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	4b9a      	ldr	r3, [pc, #616]	; (8003bf8 <USART_SetConfig+0x298>)
 800398e:	4013      	ands	r3, r2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6812      	ldr	r2, [r2, #0]
 8003994:	6979      	ldr	r1, [r7, #20]
 8003996:	430b      	orrs	r3, r1
 8003998:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800399a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800399e:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a87      	ldr	r2, [pc, #540]	; (8003bfc <USART_SetConfig+0x29c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d121      	bne.n	8003a26 <USART_SetConfig+0xc6>
 80039e2:	4b87      	ldr	r3, [pc, #540]	; (8003c00 <USART_SetConfig+0x2a0>)
 80039e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d817      	bhi.n	8003a20 <USART_SetConfig+0xc0>
 80039f0:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <USART_SetConfig+0x98>)
 80039f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f6:	bf00      	nop
 80039f8:	08003a09 	.word	0x08003a09
 80039fc:	08003a15 	.word	0x08003a15
 8003a00:	08003a0f 	.word	0x08003a0f
 8003a04:	08003a1b 	.word	0x08003a1b
 8003a08:	2301      	movs	r3, #1
 8003a0a:	77fb      	strb	r3, [r7, #31]
 8003a0c:	e06b      	b.n	8003ae6 <USART_SetConfig+0x186>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	77fb      	strb	r3, [r7, #31]
 8003a12:	e068      	b.n	8003ae6 <USART_SetConfig+0x186>
 8003a14:	2304      	movs	r3, #4
 8003a16:	77fb      	strb	r3, [r7, #31]
 8003a18:	e065      	b.n	8003ae6 <USART_SetConfig+0x186>
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	77fb      	strb	r3, [r7, #31]
 8003a1e:	e062      	b.n	8003ae6 <USART_SetConfig+0x186>
 8003a20:	2310      	movs	r3, #16
 8003a22:	77fb      	strb	r3, [r7, #31]
 8003a24:	e05f      	b.n	8003ae6 <USART_SetConfig+0x186>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a76      	ldr	r2, [pc, #472]	; (8003c04 <USART_SetConfig+0x2a4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d132      	bne.n	8003a96 <USART_SetConfig+0x136>
 8003a30:	4b73      	ldr	r3, [pc, #460]	; (8003c00 <USART_SetConfig+0x2a0>)
 8003a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a36:	f003 030c 	and.w	r3, r3, #12
 8003a3a:	2b0c      	cmp	r3, #12
 8003a3c:	d828      	bhi.n	8003a90 <USART_SetConfig+0x130>
 8003a3e:	a201      	add	r2, pc, #4	; (adr r2, 8003a44 <USART_SetConfig+0xe4>)
 8003a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a44:	08003a79 	.word	0x08003a79
 8003a48:	08003a91 	.word	0x08003a91
 8003a4c:	08003a91 	.word	0x08003a91
 8003a50:	08003a91 	.word	0x08003a91
 8003a54:	08003a85 	.word	0x08003a85
 8003a58:	08003a91 	.word	0x08003a91
 8003a5c:	08003a91 	.word	0x08003a91
 8003a60:	08003a91 	.word	0x08003a91
 8003a64:	08003a7f 	.word	0x08003a7f
 8003a68:	08003a91 	.word	0x08003a91
 8003a6c:	08003a91 	.word	0x08003a91
 8003a70:	08003a91 	.word	0x08003a91
 8003a74:	08003a8b 	.word	0x08003a8b
 8003a78:	2300      	movs	r3, #0
 8003a7a:	77fb      	strb	r3, [r7, #31]
 8003a7c:	e033      	b.n	8003ae6 <USART_SetConfig+0x186>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	77fb      	strb	r3, [r7, #31]
 8003a82:	e030      	b.n	8003ae6 <USART_SetConfig+0x186>
 8003a84:	2304      	movs	r3, #4
 8003a86:	77fb      	strb	r3, [r7, #31]
 8003a88:	e02d      	b.n	8003ae6 <USART_SetConfig+0x186>
 8003a8a:	2308      	movs	r3, #8
 8003a8c:	77fb      	strb	r3, [r7, #31]
 8003a8e:	e02a      	b.n	8003ae6 <USART_SetConfig+0x186>
 8003a90:	2310      	movs	r3, #16
 8003a92:	77fb      	strb	r3, [r7, #31]
 8003a94:	e027      	b.n	8003ae6 <USART_SetConfig+0x186>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a5b      	ldr	r2, [pc, #364]	; (8003c08 <USART_SetConfig+0x2a8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d120      	bne.n	8003ae2 <USART_SetConfig+0x182>
 8003aa0:	4b57      	ldr	r3, [pc, #348]	; (8003c00 <USART_SetConfig+0x2a0>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003aaa:	2b30      	cmp	r3, #48	; 0x30
 8003aac:	d013      	beq.n	8003ad6 <USART_SetConfig+0x176>
 8003aae:	2b30      	cmp	r3, #48	; 0x30
 8003ab0:	d814      	bhi.n	8003adc <USART_SetConfig+0x17c>
 8003ab2:	2b20      	cmp	r3, #32
 8003ab4:	d009      	beq.n	8003aca <USART_SetConfig+0x16a>
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d810      	bhi.n	8003adc <USART_SetConfig+0x17c>
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <USART_SetConfig+0x164>
 8003abe:	2b10      	cmp	r3, #16
 8003ac0:	d006      	beq.n	8003ad0 <USART_SetConfig+0x170>
 8003ac2:	e00b      	b.n	8003adc <USART_SetConfig+0x17c>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	77fb      	strb	r3, [r7, #31]
 8003ac8:	e00d      	b.n	8003ae6 <USART_SetConfig+0x186>
 8003aca:	2302      	movs	r3, #2
 8003acc:	77fb      	strb	r3, [r7, #31]
 8003ace:	e00a      	b.n	8003ae6 <USART_SetConfig+0x186>
 8003ad0:	2304      	movs	r3, #4
 8003ad2:	77fb      	strb	r3, [r7, #31]
 8003ad4:	e007      	b.n	8003ae6 <USART_SetConfig+0x186>
 8003ad6:	2308      	movs	r3, #8
 8003ad8:	77fb      	strb	r3, [r7, #31]
 8003ada:	e004      	b.n	8003ae6 <USART_SetConfig+0x186>
 8003adc:	2310      	movs	r3, #16
 8003ade:	77fb      	strb	r3, [r7, #31]
 8003ae0:	e001      	b.n	8003ae6 <USART_SetConfig+0x186>
 8003ae2:	2310      	movs	r3, #16
 8003ae4:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8003ae6:	7ffb      	ldrb	r3, [r7, #31]
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d85a      	bhi.n	8003ba2 <USART_SetConfig+0x242>
 8003aec:	a201      	add	r2, pc, #4	; (adr r2, 8003af4 <USART_SetConfig+0x194>)
 8003aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af2:	bf00      	nop
 8003af4:	08003b19 	.word	0x08003b19
 8003af8:	08003b37 	.word	0x08003b37
 8003afc:	08003b55 	.word	0x08003b55
 8003b00:	08003ba3 	.word	0x08003ba3
 8003b04:	08003b6f 	.word	0x08003b6f
 8003b08:	08003ba3 	.word	0x08003ba3
 8003b0c:	08003ba3 	.word	0x08003ba3
 8003b10:	08003ba3 	.word	0x08003ba3
 8003b14:	08003b8d 	.word	0x08003b8d
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b18:	f7fe ffd6 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 8003b1c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	005a      	lsls	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	085b      	lsrs	r3, r3, #1
 8003b28:	441a      	add	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b32:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8003b34:	e038      	b.n	8003ba8 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b36:	f7fe ffdd 	bl	8002af4 <HAL_RCC_GetPCLK2Freq>
 8003b3a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	005a      	lsls	r2, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	085b      	lsrs	r3, r3, #1
 8003b46:	441a      	add	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b50:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8003b52:	e029      	b.n	8003ba8 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	085b      	lsrs	r3, r3, #1
 8003b5a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003b5e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6852      	ldr	r2, [r2, #4]
 8003b66:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8003b6c:	e01c      	b.n	8003ba8 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8003b6e:	f7fe ff13 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 8003b72:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	005a      	lsls	r2, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	085b      	lsrs	r3, r3, #1
 8003b7e:	441a      	add	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8003b8a:	e00d      	b.n	8003ba8 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	085b      	lsrs	r3, r3, #1
 8003b92:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8003ba0:	e002      	b.n	8003ba8 <USART_SetConfig+0x248>
    default:
      ret = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	77bb      	strb	r3, [r7, #30]
      break;
 8003ba6:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	2b0f      	cmp	r3, #15
 8003bac:	d916      	bls.n	8003bdc <USART_SetConfig+0x27c>
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb4:	d212      	bcs.n	8003bdc <USART_SetConfig+0x27c>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	f023 030f 	bic.w	r3, r3, #15
 8003bbe:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	085b      	lsrs	r3, r3, #1
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	89fb      	ldrh	r3, [r7, #14]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	89fa      	ldrh	r2, [r7, #14]
 8003bd8:	60da      	str	r2, [r3, #12]
 8003bda:	e001      	b.n	8003be0 <USART_SetConfig+0x280>
  }
  else
  {
    ret = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8003bec:	7fbb      	ldrb	r3, [r7, #30]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3720      	adds	r7, #32
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	efff69f3 	.word	0xefff69f3
 8003bfc:	40013800 	.word	0x40013800
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40004400 	.word	0x40004400
 8003c08:	40004800 	.word	0x40004800

08003c0c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003c1a:	f7fd f803 	bl	8000c24 <HAL_GetTick>
 8003c1e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d10e      	bne.n	8003c4c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8003c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff fe58 	bl	80038f2 <USART_WaitOnFlagUntilTimeout>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e01e      	b.n	8003c8a <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d10e      	bne.n	8003c78 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8003c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff fe42 	bl	80038f2 <USART_WaitOnFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e008      	b.n	8003c8a <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <std>:
 8003c94:	2300      	movs	r3, #0
 8003c96:	b510      	push	{r4, lr}
 8003c98:	4604      	mov	r4, r0
 8003c9a:	e9c0 3300 	strd	r3, r3, [r0]
 8003c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ca2:	6083      	str	r3, [r0, #8]
 8003ca4:	8181      	strh	r1, [r0, #12]
 8003ca6:	6643      	str	r3, [r0, #100]	; 0x64
 8003ca8:	81c2      	strh	r2, [r0, #14]
 8003caa:	6183      	str	r3, [r0, #24]
 8003cac:	4619      	mov	r1, r3
 8003cae:	2208      	movs	r2, #8
 8003cb0:	305c      	adds	r0, #92	; 0x5c
 8003cb2:	f000 f906 	bl	8003ec2 <memset>
 8003cb6:	4b0d      	ldr	r3, [pc, #52]	; (8003cec <std+0x58>)
 8003cb8:	6263      	str	r3, [r4, #36]	; 0x24
 8003cba:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <std+0x5c>)
 8003cbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003cbe:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <std+0x60>)
 8003cc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <std+0x64>)
 8003cc4:	6323      	str	r3, [r4, #48]	; 0x30
 8003cc6:	4b0d      	ldr	r3, [pc, #52]	; (8003cfc <std+0x68>)
 8003cc8:	6224      	str	r4, [r4, #32]
 8003cca:	429c      	cmp	r4, r3
 8003ccc:	d006      	beq.n	8003cdc <std+0x48>
 8003cce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003cd2:	4294      	cmp	r4, r2
 8003cd4:	d002      	beq.n	8003cdc <std+0x48>
 8003cd6:	33d0      	adds	r3, #208	; 0xd0
 8003cd8:	429c      	cmp	r4, r3
 8003cda:	d105      	bne.n	8003ce8 <std+0x54>
 8003cdc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ce4:	f000 b960 	b.w	8003fa8 <__retarget_lock_init_recursive>
 8003ce8:	bd10      	pop	{r4, pc}
 8003cea:	bf00      	nop
 8003cec:	08003e3d 	.word	0x08003e3d
 8003cf0:	08003e5f 	.word	0x08003e5f
 8003cf4:	08003e97 	.word	0x08003e97
 8003cf8:	08003ebb 	.word	0x08003ebb
 8003cfc:	200021e0 	.word	0x200021e0

08003d00 <stdio_exit_handler>:
 8003d00:	4a02      	ldr	r2, [pc, #8]	; (8003d0c <stdio_exit_handler+0xc>)
 8003d02:	4903      	ldr	r1, [pc, #12]	; (8003d10 <stdio_exit_handler+0x10>)
 8003d04:	4803      	ldr	r0, [pc, #12]	; (8003d14 <stdio_exit_handler+0x14>)
 8003d06:	f000 b869 	b.w	8003ddc <_fwalk_sglue>
 8003d0a:	bf00      	nop
 8003d0c:	2000000c 	.word	0x2000000c
 8003d10:	08004855 	.word	0x08004855
 8003d14:	20000018 	.word	0x20000018

08003d18 <cleanup_stdio>:
 8003d18:	6841      	ldr	r1, [r0, #4]
 8003d1a:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <cleanup_stdio+0x34>)
 8003d1c:	4299      	cmp	r1, r3
 8003d1e:	b510      	push	{r4, lr}
 8003d20:	4604      	mov	r4, r0
 8003d22:	d001      	beq.n	8003d28 <cleanup_stdio+0x10>
 8003d24:	f000 fd96 	bl	8004854 <_fflush_r>
 8003d28:	68a1      	ldr	r1, [r4, #8]
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <cleanup_stdio+0x38>)
 8003d2c:	4299      	cmp	r1, r3
 8003d2e:	d002      	beq.n	8003d36 <cleanup_stdio+0x1e>
 8003d30:	4620      	mov	r0, r4
 8003d32:	f000 fd8f 	bl	8004854 <_fflush_r>
 8003d36:	68e1      	ldr	r1, [r4, #12]
 8003d38:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <cleanup_stdio+0x3c>)
 8003d3a:	4299      	cmp	r1, r3
 8003d3c:	d004      	beq.n	8003d48 <cleanup_stdio+0x30>
 8003d3e:	4620      	mov	r0, r4
 8003d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d44:	f000 bd86 	b.w	8004854 <_fflush_r>
 8003d48:	bd10      	pop	{r4, pc}
 8003d4a:	bf00      	nop
 8003d4c:	200021e0 	.word	0x200021e0
 8003d50:	20002248 	.word	0x20002248
 8003d54:	200022b0 	.word	0x200022b0

08003d58 <global_stdio_init.part.0>:
 8003d58:	b510      	push	{r4, lr}
 8003d5a:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <global_stdio_init.part.0+0x30>)
 8003d5c:	4c0b      	ldr	r4, [pc, #44]	; (8003d8c <global_stdio_init.part.0+0x34>)
 8003d5e:	4a0c      	ldr	r2, [pc, #48]	; (8003d90 <global_stdio_init.part.0+0x38>)
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	4620      	mov	r0, r4
 8003d64:	2200      	movs	r2, #0
 8003d66:	2104      	movs	r1, #4
 8003d68:	f7ff ff94 	bl	8003c94 <std>
 8003d6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003d70:	2201      	movs	r2, #1
 8003d72:	2109      	movs	r1, #9
 8003d74:	f7ff ff8e 	bl	8003c94 <std>
 8003d78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d82:	2112      	movs	r1, #18
 8003d84:	f7ff bf86 	b.w	8003c94 <std>
 8003d88:	20002318 	.word	0x20002318
 8003d8c:	200021e0 	.word	0x200021e0
 8003d90:	08003d01 	.word	0x08003d01

08003d94 <__sfp_lock_acquire>:
 8003d94:	4801      	ldr	r0, [pc, #4]	; (8003d9c <__sfp_lock_acquire+0x8>)
 8003d96:	f000 b908 	b.w	8003faa <__retarget_lock_acquire_recursive>
 8003d9a:	bf00      	nop
 8003d9c:	20002321 	.word	0x20002321

08003da0 <__sfp_lock_release>:
 8003da0:	4801      	ldr	r0, [pc, #4]	; (8003da8 <__sfp_lock_release+0x8>)
 8003da2:	f000 b903 	b.w	8003fac <__retarget_lock_release_recursive>
 8003da6:	bf00      	nop
 8003da8:	20002321 	.word	0x20002321

08003dac <__sinit>:
 8003dac:	b510      	push	{r4, lr}
 8003dae:	4604      	mov	r4, r0
 8003db0:	f7ff fff0 	bl	8003d94 <__sfp_lock_acquire>
 8003db4:	6a23      	ldr	r3, [r4, #32]
 8003db6:	b11b      	cbz	r3, 8003dc0 <__sinit+0x14>
 8003db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dbc:	f7ff bff0 	b.w	8003da0 <__sfp_lock_release>
 8003dc0:	4b04      	ldr	r3, [pc, #16]	; (8003dd4 <__sinit+0x28>)
 8003dc2:	6223      	str	r3, [r4, #32]
 8003dc4:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <__sinit+0x2c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1f5      	bne.n	8003db8 <__sinit+0xc>
 8003dcc:	f7ff ffc4 	bl	8003d58 <global_stdio_init.part.0>
 8003dd0:	e7f2      	b.n	8003db8 <__sinit+0xc>
 8003dd2:	bf00      	nop
 8003dd4:	08003d19 	.word	0x08003d19
 8003dd8:	20002318 	.word	0x20002318

08003ddc <_fwalk_sglue>:
 8003ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003de0:	4607      	mov	r7, r0
 8003de2:	4688      	mov	r8, r1
 8003de4:	4614      	mov	r4, r2
 8003de6:	2600      	movs	r6, #0
 8003de8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003dec:	f1b9 0901 	subs.w	r9, r9, #1
 8003df0:	d505      	bpl.n	8003dfe <_fwalk_sglue+0x22>
 8003df2:	6824      	ldr	r4, [r4, #0]
 8003df4:	2c00      	cmp	r4, #0
 8003df6:	d1f7      	bne.n	8003de8 <_fwalk_sglue+0xc>
 8003df8:	4630      	mov	r0, r6
 8003dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dfe:	89ab      	ldrh	r3, [r5, #12]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d907      	bls.n	8003e14 <_fwalk_sglue+0x38>
 8003e04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	d003      	beq.n	8003e14 <_fwalk_sglue+0x38>
 8003e0c:	4629      	mov	r1, r5
 8003e0e:	4638      	mov	r0, r7
 8003e10:	47c0      	blx	r8
 8003e12:	4306      	orrs	r6, r0
 8003e14:	3568      	adds	r5, #104	; 0x68
 8003e16:	e7e9      	b.n	8003dec <_fwalk_sglue+0x10>

08003e18 <iprintf>:
 8003e18:	b40f      	push	{r0, r1, r2, r3}
 8003e1a:	b507      	push	{r0, r1, r2, lr}
 8003e1c:	4906      	ldr	r1, [pc, #24]	; (8003e38 <iprintf+0x20>)
 8003e1e:	ab04      	add	r3, sp, #16
 8003e20:	6808      	ldr	r0, [r1, #0]
 8003e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e26:	6881      	ldr	r1, [r0, #8]
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	f000 f9e3 	bl	80041f4 <_vfiprintf_r>
 8003e2e:	b003      	add	sp, #12
 8003e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e34:	b004      	add	sp, #16
 8003e36:	4770      	bx	lr
 8003e38:	20000064 	.word	0x20000064

08003e3c <__sread>:
 8003e3c:	b510      	push	{r4, lr}
 8003e3e:	460c      	mov	r4, r1
 8003e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e44:	f000 f868 	bl	8003f18 <_read_r>
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	bfab      	itete	ge
 8003e4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e4e:	89a3      	ldrhlt	r3, [r4, #12]
 8003e50:	181b      	addge	r3, r3, r0
 8003e52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e56:	bfac      	ite	ge
 8003e58:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e5a:	81a3      	strhlt	r3, [r4, #12]
 8003e5c:	bd10      	pop	{r4, pc}

08003e5e <__swrite>:
 8003e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e62:	461f      	mov	r7, r3
 8003e64:	898b      	ldrh	r3, [r1, #12]
 8003e66:	05db      	lsls	r3, r3, #23
 8003e68:	4605      	mov	r5, r0
 8003e6a:	460c      	mov	r4, r1
 8003e6c:	4616      	mov	r6, r2
 8003e6e:	d505      	bpl.n	8003e7c <__swrite+0x1e>
 8003e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e74:	2302      	movs	r3, #2
 8003e76:	2200      	movs	r2, #0
 8003e78:	f000 f83c 	bl	8003ef4 <_lseek_r>
 8003e7c:	89a3      	ldrh	r3, [r4, #12]
 8003e7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e86:	81a3      	strh	r3, [r4, #12]
 8003e88:	4632      	mov	r2, r6
 8003e8a:	463b      	mov	r3, r7
 8003e8c:	4628      	mov	r0, r5
 8003e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e92:	f000 b853 	b.w	8003f3c <_write_r>

08003e96 <__sseek>:
 8003e96:	b510      	push	{r4, lr}
 8003e98:	460c      	mov	r4, r1
 8003e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e9e:	f000 f829 	bl	8003ef4 <_lseek_r>
 8003ea2:	1c43      	adds	r3, r0, #1
 8003ea4:	89a3      	ldrh	r3, [r4, #12]
 8003ea6:	bf15      	itete	ne
 8003ea8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003eaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003eae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003eb2:	81a3      	strheq	r3, [r4, #12]
 8003eb4:	bf18      	it	ne
 8003eb6:	81a3      	strhne	r3, [r4, #12]
 8003eb8:	bd10      	pop	{r4, pc}

08003eba <__sclose>:
 8003eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ebe:	f000 b809 	b.w	8003ed4 <_close_r>

08003ec2 <memset>:
 8003ec2:	4402      	add	r2, r0
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d100      	bne.n	8003ecc <memset+0xa>
 8003eca:	4770      	bx	lr
 8003ecc:	f803 1b01 	strb.w	r1, [r3], #1
 8003ed0:	e7f9      	b.n	8003ec6 <memset+0x4>
	...

08003ed4 <_close_r>:
 8003ed4:	b538      	push	{r3, r4, r5, lr}
 8003ed6:	4d06      	ldr	r5, [pc, #24]	; (8003ef0 <_close_r+0x1c>)
 8003ed8:	2300      	movs	r3, #0
 8003eda:	4604      	mov	r4, r0
 8003edc:	4608      	mov	r0, r1
 8003ede:	602b      	str	r3, [r5, #0]
 8003ee0:	f7fc fda7 	bl	8000a32 <_close>
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	d102      	bne.n	8003eee <_close_r+0x1a>
 8003ee8:	682b      	ldr	r3, [r5, #0]
 8003eea:	b103      	cbz	r3, 8003eee <_close_r+0x1a>
 8003eec:	6023      	str	r3, [r4, #0]
 8003eee:	bd38      	pop	{r3, r4, r5, pc}
 8003ef0:	2000231c 	.word	0x2000231c

08003ef4 <_lseek_r>:
 8003ef4:	b538      	push	{r3, r4, r5, lr}
 8003ef6:	4d07      	ldr	r5, [pc, #28]	; (8003f14 <_lseek_r+0x20>)
 8003ef8:	4604      	mov	r4, r0
 8003efa:	4608      	mov	r0, r1
 8003efc:	4611      	mov	r1, r2
 8003efe:	2200      	movs	r2, #0
 8003f00:	602a      	str	r2, [r5, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	f7fc fdbc 	bl	8000a80 <_lseek>
 8003f08:	1c43      	adds	r3, r0, #1
 8003f0a:	d102      	bne.n	8003f12 <_lseek_r+0x1e>
 8003f0c:	682b      	ldr	r3, [r5, #0]
 8003f0e:	b103      	cbz	r3, 8003f12 <_lseek_r+0x1e>
 8003f10:	6023      	str	r3, [r4, #0]
 8003f12:	bd38      	pop	{r3, r4, r5, pc}
 8003f14:	2000231c 	.word	0x2000231c

08003f18 <_read_r>:
 8003f18:	b538      	push	{r3, r4, r5, lr}
 8003f1a:	4d07      	ldr	r5, [pc, #28]	; (8003f38 <_read_r+0x20>)
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	4608      	mov	r0, r1
 8003f20:	4611      	mov	r1, r2
 8003f22:	2200      	movs	r2, #0
 8003f24:	602a      	str	r2, [r5, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	f7fc fd4a 	bl	80009c0 <_read>
 8003f2c:	1c43      	adds	r3, r0, #1
 8003f2e:	d102      	bne.n	8003f36 <_read_r+0x1e>
 8003f30:	682b      	ldr	r3, [r5, #0]
 8003f32:	b103      	cbz	r3, 8003f36 <_read_r+0x1e>
 8003f34:	6023      	str	r3, [r4, #0]
 8003f36:	bd38      	pop	{r3, r4, r5, pc}
 8003f38:	2000231c 	.word	0x2000231c

08003f3c <_write_r>:
 8003f3c:	b538      	push	{r3, r4, r5, lr}
 8003f3e:	4d07      	ldr	r5, [pc, #28]	; (8003f5c <_write_r+0x20>)
 8003f40:	4604      	mov	r4, r0
 8003f42:	4608      	mov	r0, r1
 8003f44:	4611      	mov	r1, r2
 8003f46:	2200      	movs	r2, #0
 8003f48:	602a      	str	r2, [r5, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f7fc fd55 	bl	80009fa <_write>
 8003f50:	1c43      	adds	r3, r0, #1
 8003f52:	d102      	bne.n	8003f5a <_write_r+0x1e>
 8003f54:	682b      	ldr	r3, [r5, #0]
 8003f56:	b103      	cbz	r3, 8003f5a <_write_r+0x1e>
 8003f58:	6023      	str	r3, [r4, #0]
 8003f5a:	bd38      	pop	{r3, r4, r5, pc}
 8003f5c:	2000231c 	.word	0x2000231c

08003f60 <__libc_init_array>:
 8003f60:	b570      	push	{r4, r5, r6, lr}
 8003f62:	4d0d      	ldr	r5, [pc, #52]	; (8003f98 <__libc_init_array+0x38>)
 8003f64:	4c0d      	ldr	r4, [pc, #52]	; (8003f9c <__libc_init_array+0x3c>)
 8003f66:	1b64      	subs	r4, r4, r5
 8003f68:	10a4      	asrs	r4, r4, #2
 8003f6a:	2600      	movs	r6, #0
 8003f6c:	42a6      	cmp	r6, r4
 8003f6e:	d109      	bne.n	8003f84 <__libc_init_array+0x24>
 8003f70:	4d0b      	ldr	r5, [pc, #44]	; (8003fa0 <__libc_init_array+0x40>)
 8003f72:	4c0c      	ldr	r4, [pc, #48]	; (8003fa4 <__libc_init_array+0x44>)
 8003f74:	f000 fdce 	bl	8004b14 <_init>
 8003f78:	1b64      	subs	r4, r4, r5
 8003f7a:	10a4      	asrs	r4, r4, #2
 8003f7c:	2600      	movs	r6, #0
 8003f7e:	42a6      	cmp	r6, r4
 8003f80:	d105      	bne.n	8003f8e <__libc_init_array+0x2e>
 8003f82:	bd70      	pop	{r4, r5, r6, pc}
 8003f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f88:	4798      	blx	r3
 8003f8a:	3601      	adds	r6, #1
 8003f8c:	e7ee      	b.n	8003f6c <__libc_init_array+0xc>
 8003f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f92:	4798      	blx	r3
 8003f94:	3601      	adds	r6, #1
 8003f96:	e7f2      	b.n	8003f7e <__libc_init_array+0x1e>
 8003f98:	08004bb0 	.word	0x08004bb0
 8003f9c:	08004bb0 	.word	0x08004bb0
 8003fa0:	08004bb0 	.word	0x08004bb0
 8003fa4:	08004bb4 	.word	0x08004bb4

08003fa8 <__retarget_lock_init_recursive>:
 8003fa8:	4770      	bx	lr

08003faa <__retarget_lock_acquire_recursive>:
 8003faa:	4770      	bx	lr

08003fac <__retarget_lock_release_recursive>:
 8003fac:	4770      	bx	lr
	...

08003fb0 <_free_r>:
 8003fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fb2:	2900      	cmp	r1, #0
 8003fb4:	d044      	beq.n	8004040 <_free_r+0x90>
 8003fb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fba:	9001      	str	r0, [sp, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f1a1 0404 	sub.w	r4, r1, #4
 8003fc2:	bfb8      	it	lt
 8003fc4:	18e4      	addlt	r4, r4, r3
 8003fc6:	f000 f8df 	bl	8004188 <__malloc_lock>
 8003fca:	4a1e      	ldr	r2, [pc, #120]	; (8004044 <_free_r+0x94>)
 8003fcc:	9801      	ldr	r0, [sp, #4]
 8003fce:	6813      	ldr	r3, [r2, #0]
 8003fd0:	b933      	cbnz	r3, 8003fe0 <_free_r+0x30>
 8003fd2:	6063      	str	r3, [r4, #4]
 8003fd4:	6014      	str	r4, [r2, #0]
 8003fd6:	b003      	add	sp, #12
 8003fd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fdc:	f000 b8da 	b.w	8004194 <__malloc_unlock>
 8003fe0:	42a3      	cmp	r3, r4
 8003fe2:	d908      	bls.n	8003ff6 <_free_r+0x46>
 8003fe4:	6825      	ldr	r5, [r4, #0]
 8003fe6:	1961      	adds	r1, r4, r5
 8003fe8:	428b      	cmp	r3, r1
 8003fea:	bf01      	itttt	eq
 8003fec:	6819      	ldreq	r1, [r3, #0]
 8003fee:	685b      	ldreq	r3, [r3, #4]
 8003ff0:	1949      	addeq	r1, r1, r5
 8003ff2:	6021      	streq	r1, [r4, #0]
 8003ff4:	e7ed      	b.n	8003fd2 <_free_r+0x22>
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	b10b      	cbz	r3, 8004000 <_free_r+0x50>
 8003ffc:	42a3      	cmp	r3, r4
 8003ffe:	d9fa      	bls.n	8003ff6 <_free_r+0x46>
 8004000:	6811      	ldr	r1, [r2, #0]
 8004002:	1855      	adds	r5, r2, r1
 8004004:	42a5      	cmp	r5, r4
 8004006:	d10b      	bne.n	8004020 <_free_r+0x70>
 8004008:	6824      	ldr	r4, [r4, #0]
 800400a:	4421      	add	r1, r4
 800400c:	1854      	adds	r4, r2, r1
 800400e:	42a3      	cmp	r3, r4
 8004010:	6011      	str	r1, [r2, #0]
 8004012:	d1e0      	bne.n	8003fd6 <_free_r+0x26>
 8004014:	681c      	ldr	r4, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	6053      	str	r3, [r2, #4]
 800401a:	440c      	add	r4, r1
 800401c:	6014      	str	r4, [r2, #0]
 800401e:	e7da      	b.n	8003fd6 <_free_r+0x26>
 8004020:	d902      	bls.n	8004028 <_free_r+0x78>
 8004022:	230c      	movs	r3, #12
 8004024:	6003      	str	r3, [r0, #0]
 8004026:	e7d6      	b.n	8003fd6 <_free_r+0x26>
 8004028:	6825      	ldr	r5, [r4, #0]
 800402a:	1961      	adds	r1, r4, r5
 800402c:	428b      	cmp	r3, r1
 800402e:	bf04      	itt	eq
 8004030:	6819      	ldreq	r1, [r3, #0]
 8004032:	685b      	ldreq	r3, [r3, #4]
 8004034:	6063      	str	r3, [r4, #4]
 8004036:	bf04      	itt	eq
 8004038:	1949      	addeq	r1, r1, r5
 800403a:	6021      	streq	r1, [r4, #0]
 800403c:	6054      	str	r4, [r2, #4]
 800403e:	e7ca      	b.n	8003fd6 <_free_r+0x26>
 8004040:	b003      	add	sp, #12
 8004042:	bd30      	pop	{r4, r5, pc}
 8004044:	20002324 	.word	0x20002324

08004048 <sbrk_aligned>:
 8004048:	b570      	push	{r4, r5, r6, lr}
 800404a:	4e0e      	ldr	r6, [pc, #56]	; (8004084 <sbrk_aligned+0x3c>)
 800404c:	460c      	mov	r4, r1
 800404e:	6831      	ldr	r1, [r6, #0]
 8004050:	4605      	mov	r5, r0
 8004052:	b911      	cbnz	r1, 800405a <sbrk_aligned+0x12>
 8004054:	f000 fcbc 	bl	80049d0 <_sbrk_r>
 8004058:	6030      	str	r0, [r6, #0]
 800405a:	4621      	mov	r1, r4
 800405c:	4628      	mov	r0, r5
 800405e:	f000 fcb7 	bl	80049d0 <_sbrk_r>
 8004062:	1c43      	adds	r3, r0, #1
 8004064:	d00a      	beq.n	800407c <sbrk_aligned+0x34>
 8004066:	1cc4      	adds	r4, r0, #3
 8004068:	f024 0403 	bic.w	r4, r4, #3
 800406c:	42a0      	cmp	r0, r4
 800406e:	d007      	beq.n	8004080 <sbrk_aligned+0x38>
 8004070:	1a21      	subs	r1, r4, r0
 8004072:	4628      	mov	r0, r5
 8004074:	f000 fcac 	bl	80049d0 <_sbrk_r>
 8004078:	3001      	adds	r0, #1
 800407a:	d101      	bne.n	8004080 <sbrk_aligned+0x38>
 800407c:	f04f 34ff 	mov.w	r4, #4294967295
 8004080:	4620      	mov	r0, r4
 8004082:	bd70      	pop	{r4, r5, r6, pc}
 8004084:	20002328 	.word	0x20002328

08004088 <_malloc_r>:
 8004088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800408c:	1ccd      	adds	r5, r1, #3
 800408e:	f025 0503 	bic.w	r5, r5, #3
 8004092:	3508      	adds	r5, #8
 8004094:	2d0c      	cmp	r5, #12
 8004096:	bf38      	it	cc
 8004098:	250c      	movcc	r5, #12
 800409a:	2d00      	cmp	r5, #0
 800409c:	4607      	mov	r7, r0
 800409e:	db01      	blt.n	80040a4 <_malloc_r+0x1c>
 80040a0:	42a9      	cmp	r1, r5
 80040a2:	d905      	bls.n	80040b0 <_malloc_r+0x28>
 80040a4:	230c      	movs	r3, #12
 80040a6:	603b      	str	r3, [r7, #0]
 80040a8:	2600      	movs	r6, #0
 80040aa:	4630      	mov	r0, r6
 80040ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004184 <_malloc_r+0xfc>
 80040b4:	f000 f868 	bl	8004188 <__malloc_lock>
 80040b8:	f8d8 3000 	ldr.w	r3, [r8]
 80040bc:	461c      	mov	r4, r3
 80040be:	bb5c      	cbnz	r4, 8004118 <_malloc_r+0x90>
 80040c0:	4629      	mov	r1, r5
 80040c2:	4638      	mov	r0, r7
 80040c4:	f7ff ffc0 	bl	8004048 <sbrk_aligned>
 80040c8:	1c43      	adds	r3, r0, #1
 80040ca:	4604      	mov	r4, r0
 80040cc:	d155      	bne.n	800417a <_malloc_r+0xf2>
 80040ce:	f8d8 4000 	ldr.w	r4, [r8]
 80040d2:	4626      	mov	r6, r4
 80040d4:	2e00      	cmp	r6, #0
 80040d6:	d145      	bne.n	8004164 <_malloc_r+0xdc>
 80040d8:	2c00      	cmp	r4, #0
 80040da:	d048      	beq.n	800416e <_malloc_r+0xe6>
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	4631      	mov	r1, r6
 80040e0:	4638      	mov	r0, r7
 80040e2:	eb04 0903 	add.w	r9, r4, r3
 80040e6:	f000 fc73 	bl	80049d0 <_sbrk_r>
 80040ea:	4581      	cmp	r9, r0
 80040ec:	d13f      	bne.n	800416e <_malloc_r+0xe6>
 80040ee:	6821      	ldr	r1, [r4, #0]
 80040f0:	1a6d      	subs	r5, r5, r1
 80040f2:	4629      	mov	r1, r5
 80040f4:	4638      	mov	r0, r7
 80040f6:	f7ff ffa7 	bl	8004048 <sbrk_aligned>
 80040fa:	3001      	adds	r0, #1
 80040fc:	d037      	beq.n	800416e <_malloc_r+0xe6>
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	442b      	add	r3, r5
 8004102:	6023      	str	r3, [r4, #0]
 8004104:	f8d8 3000 	ldr.w	r3, [r8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d038      	beq.n	800417e <_malloc_r+0xf6>
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	42a2      	cmp	r2, r4
 8004110:	d12b      	bne.n	800416a <_malloc_r+0xe2>
 8004112:	2200      	movs	r2, #0
 8004114:	605a      	str	r2, [r3, #4]
 8004116:	e00f      	b.n	8004138 <_malloc_r+0xb0>
 8004118:	6822      	ldr	r2, [r4, #0]
 800411a:	1b52      	subs	r2, r2, r5
 800411c:	d41f      	bmi.n	800415e <_malloc_r+0xd6>
 800411e:	2a0b      	cmp	r2, #11
 8004120:	d917      	bls.n	8004152 <_malloc_r+0xca>
 8004122:	1961      	adds	r1, r4, r5
 8004124:	42a3      	cmp	r3, r4
 8004126:	6025      	str	r5, [r4, #0]
 8004128:	bf18      	it	ne
 800412a:	6059      	strne	r1, [r3, #4]
 800412c:	6863      	ldr	r3, [r4, #4]
 800412e:	bf08      	it	eq
 8004130:	f8c8 1000 	streq.w	r1, [r8]
 8004134:	5162      	str	r2, [r4, r5]
 8004136:	604b      	str	r3, [r1, #4]
 8004138:	4638      	mov	r0, r7
 800413a:	f104 060b 	add.w	r6, r4, #11
 800413e:	f000 f829 	bl	8004194 <__malloc_unlock>
 8004142:	f026 0607 	bic.w	r6, r6, #7
 8004146:	1d23      	adds	r3, r4, #4
 8004148:	1af2      	subs	r2, r6, r3
 800414a:	d0ae      	beq.n	80040aa <_malloc_r+0x22>
 800414c:	1b9b      	subs	r3, r3, r6
 800414e:	50a3      	str	r3, [r4, r2]
 8004150:	e7ab      	b.n	80040aa <_malloc_r+0x22>
 8004152:	42a3      	cmp	r3, r4
 8004154:	6862      	ldr	r2, [r4, #4]
 8004156:	d1dd      	bne.n	8004114 <_malloc_r+0x8c>
 8004158:	f8c8 2000 	str.w	r2, [r8]
 800415c:	e7ec      	b.n	8004138 <_malloc_r+0xb0>
 800415e:	4623      	mov	r3, r4
 8004160:	6864      	ldr	r4, [r4, #4]
 8004162:	e7ac      	b.n	80040be <_malloc_r+0x36>
 8004164:	4634      	mov	r4, r6
 8004166:	6876      	ldr	r6, [r6, #4]
 8004168:	e7b4      	b.n	80040d4 <_malloc_r+0x4c>
 800416a:	4613      	mov	r3, r2
 800416c:	e7cc      	b.n	8004108 <_malloc_r+0x80>
 800416e:	230c      	movs	r3, #12
 8004170:	603b      	str	r3, [r7, #0]
 8004172:	4638      	mov	r0, r7
 8004174:	f000 f80e 	bl	8004194 <__malloc_unlock>
 8004178:	e797      	b.n	80040aa <_malloc_r+0x22>
 800417a:	6025      	str	r5, [r4, #0]
 800417c:	e7dc      	b.n	8004138 <_malloc_r+0xb0>
 800417e:	605b      	str	r3, [r3, #4]
 8004180:	deff      	udf	#255	; 0xff
 8004182:	bf00      	nop
 8004184:	20002324 	.word	0x20002324

08004188 <__malloc_lock>:
 8004188:	4801      	ldr	r0, [pc, #4]	; (8004190 <__malloc_lock+0x8>)
 800418a:	f7ff bf0e 	b.w	8003faa <__retarget_lock_acquire_recursive>
 800418e:	bf00      	nop
 8004190:	20002320 	.word	0x20002320

08004194 <__malloc_unlock>:
 8004194:	4801      	ldr	r0, [pc, #4]	; (800419c <__malloc_unlock+0x8>)
 8004196:	f7ff bf09 	b.w	8003fac <__retarget_lock_release_recursive>
 800419a:	bf00      	nop
 800419c:	20002320 	.word	0x20002320

080041a0 <__sfputc_r>:
 80041a0:	6893      	ldr	r3, [r2, #8]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	b410      	push	{r4}
 80041a8:	6093      	str	r3, [r2, #8]
 80041aa:	da08      	bge.n	80041be <__sfputc_r+0x1e>
 80041ac:	6994      	ldr	r4, [r2, #24]
 80041ae:	42a3      	cmp	r3, r4
 80041b0:	db01      	blt.n	80041b6 <__sfputc_r+0x16>
 80041b2:	290a      	cmp	r1, #10
 80041b4:	d103      	bne.n	80041be <__sfputc_r+0x1e>
 80041b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041ba:	f000 bb73 	b.w	80048a4 <__swbuf_r>
 80041be:	6813      	ldr	r3, [r2, #0]
 80041c0:	1c58      	adds	r0, r3, #1
 80041c2:	6010      	str	r0, [r2, #0]
 80041c4:	7019      	strb	r1, [r3, #0]
 80041c6:	4608      	mov	r0, r1
 80041c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <__sfputs_r>:
 80041ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d0:	4606      	mov	r6, r0
 80041d2:	460f      	mov	r7, r1
 80041d4:	4614      	mov	r4, r2
 80041d6:	18d5      	adds	r5, r2, r3
 80041d8:	42ac      	cmp	r4, r5
 80041da:	d101      	bne.n	80041e0 <__sfputs_r+0x12>
 80041dc:	2000      	movs	r0, #0
 80041de:	e007      	b.n	80041f0 <__sfputs_r+0x22>
 80041e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041e4:	463a      	mov	r2, r7
 80041e6:	4630      	mov	r0, r6
 80041e8:	f7ff ffda 	bl	80041a0 <__sfputc_r>
 80041ec:	1c43      	adds	r3, r0, #1
 80041ee:	d1f3      	bne.n	80041d8 <__sfputs_r+0xa>
 80041f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080041f4 <_vfiprintf_r>:
 80041f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041f8:	460d      	mov	r5, r1
 80041fa:	b09d      	sub	sp, #116	; 0x74
 80041fc:	4614      	mov	r4, r2
 80041fe:	4698      	mov	r8, r3
 8004200:	4606      	mov	r6, r0
 8004202:	b118      	cbz	r0, 800420c <_vfiprintf_r+0x18>
 8004204:	6a03      	ldr	r3, [r0, #32]
 8004206:	b90b      	cbnz	r3, 800420c <_vfiprintf_r+0x18>
 8004208:	f7ff fdd0 	bl	8003dac <__sinit>
 800420c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800420e:	07d9      	lsls	r1, r3, #31
 8004210:	d405      	bmi.n	800421e <_vfiprintf_r+0x2a>
 8004212:	89ab      	ldrh	r3, [r5, #12]
 8004214:	059a      	lsls	r2, r3, #22
 8004216:	d402      	bmi.n	800421e <_vfiprintf_r+0x2a>
 8004218:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800421a:	f7ff fec6 	bl	8003faa <__retarget_lock_acquire_recursive>
 800421e:	89ab      	ldrh	r3, [r5, #12]
 8004220:	071b      	lsls	r3, r3, #28
 8004222:	d501      	bpl.n	8004228 <_vfiprintf_r+0x34>
 8004224:	692b      	ldr	r3, [r5, #16]
 8004226:	b99b      	cbnz	r3, 8004250 <_vfiprintf_r+0x5c>
 8004228:	4629      	mov	r1, r5
 800422a:	4630      	mov	r0, r6
 800422c:	f000 fb78 	bl	8004920 <__swsetup_r>
 8004230:	b170      	cbz	r0, 8004250 <_vfiprintf_r+0x5c>
 8004232:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004234:	07dc      	lsls	r4, r3, #31
 8004236:	d504      	bpl.n	8004242 <_vfiprintf_r+0x4e>
 8004238:	f04f 30ff 	mov.w	r0, #4294967295
 800423c:	b01d      	add	sp, #116	; 0x74
 800423e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004242:	89ab      	ldrh	r3, [r5, #12]
 8004244:	0598      	lsls	r0, r3, #22
 8004246:	d4f7      	bmi.n	8004238 <_vfiprintf_r+0x44>
 8004248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800424a:	f7ff feaf 	bl	8003fac <__retarget_lock_release_recursive>
 800424e:	e7f3      	b.n	8004238 <_vfiprintf_r+0x44>
 8004250:	2300      	movs	r3, #0
 8004252:	9309      	str	r3, [sp, #36]	; 0x24
 8004254:	2320      	movs	r3, #32
 8004256:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800425a:	f8cd 800c 	str.w	r8, [sp, #12]
 800425e:	2330      	movs	r3, #48	; 0x30
 8004260:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004414 <_vfiprintf_r+0x220>
 8004264:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004268:	f04f 0901 	mov.w	r9, #1
 800426c:	4623      	mov	r3, r4
 800426e:	469a      	mov	sl, r3
 8004270:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004274:	b10a      	cbz	r2, 800427a <_vfiprintf_r+0x86>
 8004276:	2a25      	cmp	r2, #37	; 0x25
 8004278:	d1f9      	bne.n	800426e <_vfiprintf_r+0x7a>
 800427a:	ebba 0b04 	subs.w	fp, sl, r4
 800427e:	d00b      	beq.n	8004298 <_vfiprintf_r+0xa4>
 8004280:	465b      	mov	r3, fp
 8004282:	4622      	mov	r2, r4
 8004284:	4629      	mov	r1, r5
 8004286:	4630      	mov	r0, r6
 8004288:	f7ff ffa1 	bl	80041ce <__sfputs_r>
 800428c:	3001      	adds	r0, #1
 800428e:	f000 80a9 	beq.w	80043e4 <_vfiprintf_r+0x1f0>
 8004292:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004294:	445a      	add	r2, fp
 8004296:	9209      	str	r2, [sp, #36]	; 0x24
 8004298:	f89a 3000 	ldrb.w	r3, [sl]
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 80a1 	beq.w	80043e4 <_vfiprintf_r+0x1f0>
 80042a2:	2300      	movs	r3, #0
 80042a4:	f04f 32ff 	mov.w	r2, #4294967295
 80042a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042ac:	f10a 0a01 	add.w	sl, sl, #1
 80042b0:	9304      	str	r3, [sp, #16]
 80042b2:	9307      	str	r3, [sp, #28]
 80042b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042b8:	931a      	str	r3, [sp, #104]	; 0x68
 80042ba:	4654      	mov	r4, sl
 80042bc:	2205      	movs	r2, #5
 80042be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042c2:	4854      	ldr	r0, [pc, #336]	; (8004414 <_vfiprintf_r+0x220>)
 80042c4:	f7fb ff84 	bl	80001d0 <memchr>
 80042c8:	9a04      	ldr	r2, [sp, #16]
 80042ca:	b9d8      	cbnz	r0, 8004304 <_vfiprintf_r+0x110>
 80042cc:	06d1      	lsls	r1, r2, #27
 80042ce:	bf44      	itt	mi
 80042d0:	2320      	movmi	r3, #32
 80042d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042d6:	0713      	lsls	r3, r2, #28
 80042d8:	bf44      	itt	mi
 80042da:	232b      	movmi	r3, #43	; 0x2b
 80042dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042e0:	f89a 3000 	ldrb.w	r3, [sl]
 80042e4:	2b2a      	cmp	r3, #42	; 0x2a
 80042e6:	d015      	beq.n	8004314 <_vfiprintf_r+0x120>
 80042e8:	9a07      	ldr	r2, [sp, #28]
 80042ea:	4654      	mov	r4, sl
 80042ec:	2000      	movs	r0, #0
 80042ee:	f04f 0c0a 	mov.w	ip, #10
 80042f2:	4621      	mov	r1, r4
 80042f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042f8:	3b30      	subs	r3, #48	; 0x30
 80042fa:	2b09      	cmp	r3, #9
 80042fc:	d94d      	bls.n	800439a <_vfiprintf_r+0x1a6>
 80042fe:	b1b0      	cbz	r0, 800432e <_vfiprintf_r+0x13a>
 8004300:	9207      	str	r2, [sp, #28]
 8004302:	e014      	b.n	800432e <_vfiprintf_r+0x13a>
 8004304:	eba0 0308 	sub.w	r3, r0, r8
 8004308:	fa09 f303 	lsl.w	r3, r9, r3
 800430c:	4313      	orrs	r3, r2
 800430e:	9304      	str	r3, [sp, #16]
 8004310:	46a2      	mov	sl, r4
 8004312:	e7d2      	b.n	80042ba <_vfiprintf_r+0xc6>
 8004314:	9b03      	ldr	r3, [sp, #12]
 8004316:	1d19      	adds	r1, r3, #4
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	9103      	str	r1, [sp, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	bfbb      	ittet	lt
 8004320:	425b      	neglt	r3, r3
 8004322:	f042 0202 	orrlt.w	r2, r2, #2
 8004326:	9307      	strge	r3, [sp, #28]
 8004328:	9307      	strlt	r3, [sp, #28]
 800432a:	bfb8      	it	lt
 800432c:	9204      	strlt	r2, [sp, #16]
 800432e:	7823      	ldrb	r3, [r4, #0]
 8004330:	2b2e      	cmp	r3, #46	; 0x2e
 8004332:	d10c      	bne.n	800434e <_vfiprintf_r+0x15a>
 8004334:	7863      	ldrb	r3, [r4, #1]
 8004336:	2b2a      	cmp	r3, #42	; 0x2a
 8004338:	d134      	bne.n	80043a4 <_vfiprintf_r+0x1b0>
 800433a:	9b03      	ldr	r3, [sp, #12]
 800433c:	1d1a      	adds	r2, r3, #4
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	9203      	str	r2, [sp, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	bfb8      	it	lt
 8004346:	f04f 33ff 	movlt.w	r3, #4294967295
 800434a:	3402      	adds	r4, #2
 800434c:	9305      	str	r3, [sp, #20]
 800434e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004424 <_vfiprintf_r+0x230>
 8004352:	7821      	ldrb	r1, [r4, #0]
 8004354:	2203      	movs	r2, #3
 8004356:	4650      	mov	r0, sl
 8004358:	f7fb ff3a 	bl	80001d0 <memchr>
 800435c:	b138      	cbz	r0, 800436e <_vfiprintf_r+0x17a>
 800435e:	9b04      	ldr	r3, [sp, #16]
 8004360:	eba0 000a 	sub.w	r0, r0, sl
 8004364:	2240      	movs	r2, #64	; 0x40
 8004366:	4082      	lsls	r2, r0
 8004368:	4313      	orrs	r3, r2
 800436a:	3401      	adds	r4, #1
 800436c:	9304      	str	r3, [sp, #16]
 800436e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004372:	4829      	ldr	r0, [pc, #164]	; (8004418 <_vfiprintf_r+0x224>)
 8004374:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004378:	2206      	movs	r2, #6
 800437a:	f7fb ff29 	bl	80001d0 <memchr>
 800437e:	2800      	cmp	r0, #0
 8004380:	d03f      	beq.n	8004402 <_vfiprintf_r+0x20e>
 8004382:	4b26      	ldr	r3, [pc, #152]	; (800441c <_vfiprintf_r+0x228>)
 8004384:	bb1b      	cbnz	r3, 80043ce <_vfiprintf_r+0x1da>
 8004386:	9b03      	ldr	r3, [sp, #12]
 8004388:	3307      	adds	r3, #7
 800438a:	f023 0307 	bic.w	r3, r3, #7
 800438e:	3308      	adds	r3, #8
 8004390:	9303      	str	r3, [sp, #12]
 8004392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004394:	443b      	add	r3, r7
 8004396:	9309      	str	r3, [sp, #36]	; 0x24
 8004398:	e768      	b.n	800426c <_vfiprintf_r+0x78>
 800439a:	fb0c 3202 	mla	r2, ip, r2, r3
 800439e:	460c      	mov	r4, r1
 80043a0:	2001      	movs	r0, #1
 80043a2:	e7a6      	b.n	80042f2 <_vfiprintf_r+0xfe>
 80043a4:	2300      	movs	r3, #0
 80043a6:	3401      	adds	r4, #1
 80043a8:	9305      	str	r3, [sp, #20]
 80043aa:	4619      	mov	r1, r3
 80043ac:	f04f 0c0a 	mov.w	ip, #10
 80043b0:	4620      	mov	r0, r4
 80043b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043b6:	3a30      	subs	r2, #48	; 0x30
 80043b8:	2a09      	cmp	r2, #9
 80043ba:	d903      	bls.n	80043c4 <_vfiprintf_r+0x1d0>
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0c6      	beq.n	800434e <_vfiprintf_r+0x15a>
 80043c0:	9105      	str	r1, [sp, #20]
 80043c2:	e7c4      	b.n	800434e <_vfiprintf_r+0x15a>
 80043c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80043c8:	4604      	mov	r4, r0
 80043ca:	2301      	movs	r3, #1
 80043cc:	e7f0      	b.n	80043b0 <_vfiprintf_r+0x1bc>
 80043ce:	ab03      	add	r3, sp, #12
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	462a      	mov	r2, r5
 80043d4:	4b12      	ldr	r3, [pc, #72]	; (8004420 <_vfiprintf_r+0x22c>)
 80043d6:	a904      	add	r1, sp, #16
 80043d8:	4630      	mov	r0, r6
 80043da:	f3af 8000 	nop.w
 80043de:	4607      	mov	r7, r0
 80043e0:	1c78      	adds	r0, r7, #1
 80043e2:	d1d6      	bne.n	8004392 <_vfiprintf_r+0x19e>
 80043e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043e6:	07d9      	lsls	r1, r3, #31
 80043e8:	d405      	bmi.n	80043f6 <_vfiprintf_r+0x202>
 80043ea:	89ab      	ldrh	r3, [r5, #12]
 80043ec:	059a      	lsls	r2, r3, #22
 80043ee:	d402      	bmi.n	80043f6 <_vfiprintf_r+0x202>
 80043f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043f2:	f7ff fddb 	bl	8003fac <__retarget_lock_release_recursive>
 80043f6:	89ab      	ldrh	r3, [r5, #12]
 80043f8:	065b      	lsls	r3, r3, #25
 80043fa:	f53f af1d 	bmi.w	8004238 <_vfiprintf_r+0x44>
 80043fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004400:	e71c      	b.n	800423c <_vfiprintf_r+0x48>
 8004402:	ab03      	add	r3, sp, #12
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	462a      	mov	r2, r5
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <_vfiprintf_r+0x22c>)
 800440a:	a904      	add	r1, sp, #16
 800440c:	4630      	mov	r0, r6
 800440e:	f000 f879 	bl	8004504 <_printf_i>
 8004412:	e7e4      	b.n	80043de <_vfiprintf_r+0x1ea>
 8004414:	08004b7c 	.word	0x08004b7c
 8004418:	08004b86 	.word	0x08004b86
 800441c:	00000000 	.word	0x00000000
 8004420:	080041cf 	.word	0x080041cf
 8004424:	08004b82 	.word	0x08004b82

08004428 <_printf_common>:
 8004428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800442c:	4616      	mov	r6, r2
 800442e:	4699      	mov	r9, r3
 8004430:	688a      	ldr	r2, [r1, #8]
 8004432:	690b      	ldr	r3, [r1, #16]
 8004434:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004438:	4293      	cmp	r3, r2
 800443a:	bfb8      	it	lt
 800443c:	4613      	movlt	r3, r2
 800443e:	6033      	str	r3, [r6, #0]
 8004440:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004444:	4607      	mov	r7, r0
 8004446:	460c      	mov	r4, r1
 8004448:	b10a      	cbz	r2, 800444e <_printf_common+0x26>
 800444a:	3301      	adds	r3, #1
 800444c:	6033      	str	r3, [r6, #0]
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	0699      	lsls	r1, r3, #26
 8004452:	bf42      	ittt	mi
 8004454:	6833      	ldrmi	r3, [r6, #0]
 8004456:	3302      	addmi	r3, #2
 8004458:	6033      	strmi	r3, [r6, #0]
 800445a:	6825      	ldr	r5, [r4, #0]
 800445c:	f015 0506 	ands.w	r5, r5, #6
 8004460:	d106      	bne.n	8004470 <_printf_common+0x48>
 8004462:	f104 0a19 	add.w	sl, r4, #25
 8004466:	68e3      	ldr	r3, [r4, #12]
 8004468:	6832      	ldr	r2, [r6, #0]
 800446a:	1a9b      	subs	r3, r3, r2
 800446c:	42ab      	cmp	r3, r5
 800446e:	dc26      	bgt.n	80044be <_printf_common+0x96>
 8004470:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004474:	1e13      	subs	r3, r2, #0
 8004476:	6822      	ldr	r2, [r4, #0]
 8004478:	bf18      	it	ne
 800447a:	2301      	movne	r3, #1
 800447c:	0692      	lsls	r2, r2, #26
 800447e:	d42b      	bmi.n	80044d8 <_printf_common+0xb0>
 8004480:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004484:	4649      	mov	r1, r9
 8004486:	4638      	mov	r0, r7
 8004488:	47c0      	blx	r8
 800448a:	3001      	adds	r0, #1
 800448c:	d01e      	beq.n	80044cc <_printf_common+0xa4>
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	6922      	ldr	r2, [r4, #16]
 8004492:	f003 0306 	and.w	r3, r3, #6
 8004496:	2b04      	cmp	r3, #4
 8004498:	bf02      	ittt	eq
 800449a:	68e5      	ldreq	r5, [r4, #12]
 800449c:	6833      	ldreq	r3, [r6, #0]
 800449e:	1aed      	subeq	r5, r5, r3
 80044a0:	68a3      	ldr	r3, [r4, #8]
 80044a2:	bf0c      	ite	eq
 80044a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044a8:	2500      	movne	r5, #0
 80044aa:	4293      	cmp	r3, r2
 80044ac:	bfc4      	itt	gt
 80044ae:	1a9b      	subgt	r3, r3, r2
 80044b0:	18ed      	addgt	r5, r5, r3
 80044b2:	2600      	movs	r6, #0
 80044b4:	341a      	adds	r4, #26
 80044b6:	42b5      	cmp	r5, r6
 80044b8:	d11a      	bne.n	80044f0 <_printf_common+0xc8>
 80044ba:	2000      	movs	r0, #0
 80044bc:	e008      	b.n	80044d0 <_printf_common+0xa8>
 80044be:	2301      	movs	r3, #1
 80044c0:	4652      	mov	r2, sl
 80044c2:	4649      	mov	r1, r9
 80044c4:	4638      	mov	r0, r7
 80044c6:	47c0      	blx	r8
 80044c8:	3001      	adds	r0, #1
 80044ca:	d103      	bne.n	80044d4 <_printf_common+0xac>
 80044cc:	f04f 30ff 	mov.w	r0, #4294967295
 80044d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d4:	3501      	adds	r5, #1
 80044d6:	e7c6      	b.n	8004466 <_printf_common+0x3e>
 80044d8:	18e1      	adds	r1, r4, r3
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	2030      	movs	r0, #48	; 0x30
 80044de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044e2:	4422      	add	r2, r4
 80044e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044ec:	3302      	adds	r3, #2
 80044ee:	e7c7      	b.n	8004480 <_printf_common+0x58>
 80044f0:	2301      	movs	r3, #1
 80044f2:	4622      	mov	r2, r4
 80044f4:	4649      	mov	r1, r9
 80044f6:	4638      	mov	r0, r7
 80044f8:	47c0      	blx	r8
 80044fa:	3001      	adds	r0, #1
 80044fc:	d0e6      	beq.n	80044cc <_printf_common+0xa4>
 80044fe:	3601      	adds	r6, #1
 8004500:	e7d9      	b.n	80044b6 <_printf_common+0x8e>
	...

08004504 <_printf_i>:
 8004504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004508:	7e0f      	ldrb	r7, [r1, #24]
 800450a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800450c:	2f78      	cmp	r7, #120	; 0x78
 800450e:	4691      	mov	r9, r2
 8004510:	4680      	mov	r8, r0
 8004512:	460c      	mov	r4, r1
 8004514:	469a      	mov	sl, r3
 8004516:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800451a:	d807      	bhi.n	800452c <_printf_i+0x28>
 800451c:	2f62      	cmp	r7, #98	; 0x62
 800451e:	d80a      	bhi.n	8004536 <_printf_i+0x32>
 8004520:	2f00      	cmp	r7, #0
 8004522:	f000 80d4 	beq.w	80046ce <_printf_i+0x1ca>
 8004526:	2f58      	cmp	r7, #88	; 0x58
 8004528:	f000 80c0 	beq.w	80046ac <_printf_i+0x1a8>
 800452c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004530:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004534:	e03a      	b.n	80045ac <_printf_i+0xa8>
 8004536:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800453a:	2b15      	cmp	r3, #21
 800453c:	d8f6      	bhi.n	800452c <_printf_i+0x28>
 800453e:	a101      	add	r1, pc, #4	; (adr r1, 8004544 <_printf_i+0x40>)
 8004540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004544:	0800459d 	.word	0x0800459d
 8004548:	080045b1 	.word	0x080045b1
 800454c:	0800452d 	.word	0x0800452d
 8004550:	0800452d 	.word	0x0800452d
 8004554:	0800452d 	.word	0x0800452d
 8004558:	0800452d 	.word	0x0800452d
 800455c:	080045b1 	.word	0x080045b1
 8004560:	0800452d 	.word	0x0800452d
 8004564:	0800452d 	.word	0x0800452d
 8004568:	0800452d 	.word	0x0800452d
 800456c:	0800452d 	.word	0x0800452d
 8004570:	080046b5 	.word	0x080046b5
 8004574:	080045dd 	.word	0x080045dd
 8004578:	0800466f 	.word	0x0800466f
 800457c:	0800452d 	.word	0x0800452d
 8004580:	0800452d 	.word	0x0800452d
 8004584:	080046d7 	.word	0x080046d7
 8004588:	0800452d 	.word	0x0800452d
 800458c:	080045dd 	.word	0x080045dd
 8004590:	0800452d 	.word	0x0800452d
 8004594:	0800452d 	.word	0x0800452d
 8004598:	08004677 	.word	0x08004677
 800459c:	682b      	ldr	r3, [r5, #0]
 800459e:	1d1a      	adds	r2, r3, #4
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	602a      	str	r2, [r5, #0]
 80045a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045ac:	2301      	movs	r3, #1
 80045ae:	e09f      	b.n	80046f0 <_printf_i+0x1ec>
 80045b0:	6820      	ldr	r0, [r4, #0]
 80045b2:	682b      	ldr	r3, [r5, #0]
 80045b4:	0607      	lsls	r7, r0, #24
 80045b6:	f103 0104 	add.w	r1, r3, #4
 80045ba:	6029      	str	r1, [r5, #0]
 80045bc:	d501      	bpl.n	80045c2 <_printf_i+0xbe>
 80045be:	681e      	ldr	r6, [r3, #0]
 80045c0:	e003      	b.n	80045ca <_printf_i+0xc6>
 80045c2:	0646      	lsls	r6, r0, #25
 80045c4:	d5fb      	bpl.n	80045be <_printf_i+0xba>
 80045c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80045ca:	2e00      	cmp	r6, #0
 80045cc:	da03      	bge.n	80045d6 <_printf_i+0xd2>
 80045ce:	232d      	movs	r3, #45	; 0x2d
 80045d0:	4276      	negs	r6, r6
 80045d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045d6:	485a      	ldr	r0, [pc, #360]	; (8004740 <_printf_i+0x23c>)
 80045d8:	230a      	movs	r3, #10
 80045da:	e012      	b.n	8004602 <_printf_i+0xfe>
 80045dc:	682b      	ldr	r3, [r5, #0]
 80045de:	6820      	ldr	r0, [r4, #0]
 80045e0:	1d19      	adds	r1, r3, #4
 80045e2:	6029      	str	r1, [r5, #0]
 80045e4:	0605      	lsls	r5, r0, #24
 80045e6:	d501      	bpl.n	80045ec <_printf_i+0xe8>
 80045e8:	681e      	ldr	r6, [r3, #0]
 80045ea:	e002      	b.n	80045f2 <_printf_i+0xee>
 80045ec:	0641      	lsls	r1, r0, #25
 80045ee:	d5fb      	bpl.n	80045e8 <_printf_i+0xe4>
 80045f0:	881e      	ldrh	r6, [r3, #0]
 80045f2:	4853      	ldr	r0, [pc, #332]	; (8004740 <_printf_i+0x23c>)
 80045f4:	2f6f      	cmp	r7, #111	; 0x6f
 80045f6:	bf0c      	ite	eq
 80045f8:	2308      	moveq	r3, #8
 80045fa:	230a      	movne	r3, #10
 80045fc:	2100      	movs	r1, #0
 80045fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004602:	6865      	ldr	r5, [r4, #4]
 8004604:	60a5      	str	r5, [r4, #8]
 8004606:	2d00      	cmp	r5, #0
 8004608:	bfa2      	ittt	ge
 800460a:	6821      	ldrge	r1, [r4, #0]
 800460c:	f021 0104 	bicge.w	r1, r1, #4
 8004610:	6021      	strge	r1, [r4, #0]
 8004612:	b90e      	cbnz	r6, 8004618 <_printf_i+0x114>
 8004614:	2d00      	cmp	r5, #0
 8004616:	d04b      	beq.n	80046b0 <_printf_i+0x1ac>
 8004618:	4615      	mov	r5, r2
 800461a:	fbb6 f1f3 	udiv	r1, r6, r3
 800461e:	fb03 6711 	mls	r7, r3, r1, r6
 8004622:	5dc7      	ldrb	r7, [r0, r7]
 8004624:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004628:	4637      	mov	r7, r6
 800462a:	42bb      	cmp	r3, r7
 800462c:	460e      	mov	r6, r1
 800462e:	d9f4      	bls.n	800461a <_printf_i+0x116>
 8004630:	2b08      	cmp	r3, #8
 8004632:	d10b      	bne.n	800464c <_printf_i+0x148>
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	07de      	lsls	r6, r3, #31
 8004638:	d508      	bpl.n	800464c <_printf_i+0x148>
 800463a:	6923      	ldr	r3, [r4, #16]
 800463c:	6861      	ldr	r1, [r4, #4]
 800463e:	4299      	cmp	r1, r3
 8004640:	bfde      	ittt	le
 8004642:	2330      	movle	r3, #48	; 0x30
 8004644:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004648:	f105 35ff 	addle.w	r5, r5, #4294967295
 800464c:	1b52      	subs	r2, r2, r5
 800464e:	6122      	str	r2, [r4, #16]
 8004650:	f8cd a000 	str.w	sl, [sp]
 8004654:	464b      	mov	r3, r9
 8004656:	aa03      	add	r2, sp, #12
 8004658:	4621      	mov	r1, r4
 800465a:	4640      	mov	r0, r8
 800465c:	f7ff fee4 	bl	8004428 <_printf_common>
 8004660:	3001      	adds	r0, #1
 8004662:	d14a      	bne.n	80046fa <_printf_i+0x1f6>
 8004664:	f04f 30ff 	mov.w	r0, #4294967295
 8004668:	b004      	add	sp, #16
 800466a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	f043 0320 	orr.w	r3, r3, #32
 8004674:	6023      	str	r3, [r4, #0]
 8004676:	4833      	ldr	r0, [pc, #204]	; (8004744 <_printf_i+0x240>)
 8004678:	2778      	movs	r7, #120	; 0x78
 800467a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	6829      	ldr	r1, [r5, #0]
 8004682:	061f      	lsls	r7, r3, #24
 8004684:	f851 6b04 	ldr.w	r6, [r1], #4
 8004688:	d402      	bmi.n	8004690 <_printf_i+0x18c>
 800468a:	065f      	lsls	r7, r3, #25
 800468c:	bf48      	it	mi
 800468e:	b2b6      	uxthmi	r6, r6
 8004690:	07df      	lsls	r7, r3, #31
 8004692:	bf48      	it	mi
 8004694:	f043 0320 	orrmi.w	r3, r3, #32
 8004698:	6029      	str	r1, [r5, #0]
 800469a:	bf48      	it	mi
 800469c:	6023      	strmi	r3, [r4, #0]
 800469e:	b91e      	cbnz	r6, 80046a8 <_printf_i+0x1a4>
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	f023 0320 	bic.w	r3, r3, #32
 80046a6:	6023      	str	r3, [r4, #0]
 80046a8:	2310      	movs	r3, #16
 80046aa:	e7a7      	b.n	80045fc <_printf_i+0xf8>
 80046ac:	4824      	ldr	r0, [pc, #144]	; (8004740 <_printf_i+0x23c>)
 80046ae:	e7e4      	b.n	800467a <_printf_i+0x176>
 80046b0:	4615      	mov	r5, r2
 80046b2:	e7bd      	b.n	8004630 <_printf_i+0x12c>
 80046b4:	682b      	ldr	r3, [r5, #0]
 80046b6:	6826      	ldr	r6, [r4, #0]
 80046b8:	6961      	ldr	r1, [r4, #20]
 80046ba:	1d18      	adds	r0, r3, #4
 80046bc:	6028      	str	r0, [r5, #0]
 80046be:	0635      	lsls	r5, r6, #24
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	d501      	bpl.n	80046c8 <_printf_i+0x1c4>
 80046c4:	6019      	str	r1, [r3, #0]
 80046c6:	e002      	b.n	80046ce <_printf_i+0x1ca>
 80046c8:	0670      	lsls	r0, r6, #25
 80046ca:	d5fb      	bpl.n	80046c4 <_printf_i+0x1c0>
 80046cc:	8019      	strh	r1, [r3, #0]
 80046ce:	2300      	movs	r3, #0
 80046d0:	6123      	str	r3, [r4, #16]
 80046d2:	4615      	mov	r5, r2
 80046d4:	e7bc      	b.n	8004650 <_printf_i+0x14c>
 80046d6:	682b      	ldr	r3, [r5, #0]
 80046d8:	1d1a      	adds	r2, r3, #4
 80046da:	602a      	str	r2, [r5, #0]
 80046dc:	681d      	ldr	r5, [r3, #0]
 80046de:	6862      	ldr	r2, [r4, #4]
 80046e0:	2100      	movs	r1, #0
 80046e2:	4628      	mov	r0, r5
 80046e4:	f7fb fd74 	bl	80001d0 <memchr>
 80046e8:	b108      	cbz	r0, 80046ee <_printf_i+0x1ea>
 80046ea:	1b40      	subs	r0, r0, r5
 80046ec:	6060      	str	r0, [r4, #4]
 80046ee:	6863      	ldr	r3, [r4, #4]
 80046f0:	6123      	str	r3, [r4, #16]
 80046f2:	2300      	movs	r3, #0
 80046f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046f8:	e7aa      	b.n	8004650 <_printf_i+0x14c>
 80046fa:	6923      	ldr	r3, [r4, #16]
 80046fc:	462a      	mov	r2, r5
 80046fe:	4649      	mov	r1, r9
 8004700:	4640      	mov	r0, r8
 8004702:	47d0      	blx	sl
 8004704:	3001      	adds	r0, #1
 8004706:	d0ad      	beq.n	8004664 <_printf_i+0x160>
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	079b      	lsls	r3, r3, #30
 800470c:	d413      	bmi.n	8004736 <_printf_i+0x232>
 800470e:	68e0      	ldr	r0, [r4, #12]
 8004710:	9b03      	ldr	r3, [sp, #12]
 8004712:	4298      	cmp	r0, r3
 8004714:	bfb8      	it	lt
 8004716:	4618      	movlt	r0, r3
 8004718:	e7a6      	b.n	8004668 <_printf_i+0x164>
 800471a:	2301      	movs	r3, #1
 800471c:	4632      	mov	r2, r6
 800471e:	4649      	mov	r1, r9
 8004720:	4640      	mov	r0, r8
 8004722:	47d0      	blx	sl
 8004724:	3001      	adds	r0, #1
 8004726:	d09d      	beq.n	8004664 <_printf_i+0x160>
 8004728:	3501      	adds	r5, #1
 800472a:	68e3      	ldr	r3, [r4, #12]
 800472c:	9903      	ldr	r1, [sp, #12]
 800472e:	1a5b      	subs	r3, r3, r1
 8004730:	42ab      	cmp	r3, r5
 8004732:	dcf2      	bgt.n	800471a <_printf_i+0x216>
 8004734:	e7eb      	b.n	800470e <_printf_i+0x20a>
 8004736:	2500      	movs	r5, #0
 8004738:	f104 0619 	add.w	r6, r4, #25
 800473c:	e7f5      	b.n	800472a <_printf_i+0x226>
 800473e:	bf00      	nop
 8004740:	08004b8d 	.word	0x08004b8d
 8004744:	08004b9e 	.word	0x08004b9e

08004748 <__sflush_r>:
 8004748:	898a      	ldrh	r2, [r1, #12]
 800474a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800474e:	4605      	mov	r5, r0
 8004750:	0710      	lsls	r0, r2, #28
 8004752:	460c      	mov	r4, r1
 8004754:	d458      	bmi.n	8004808 <__sflush_r+0xc0>
 8004756:	684b      	ldr	r3, [r1, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	dc05      	bgt.n	8004768 <__sflush_r+0x20>
 800475c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	dc02      	bgt.n	8004768 <__sflush_r+0x20>
 8004762:	2000      	movs	r0, #0
 8004764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004768:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800476a:	2e00      	cmp	r6, #0
 800476c:	d0f9      	beq.n	8004762 <__sflush_r+0x1a>
 800476e:	2300      	movs	r3, #0
 8004770:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004774:	682f      	ldr	r7, [r5, #0]
 8004776:	6a21      	ldr	r1, [r4, #32]
 8004778:	602b      	str	r3, [r5, #0]
 800477a:	d032      	beq.n	80047e2 <__sflush_r+0x9a>
 800477c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800477e:	89a3      	ldrh	r3, [r4, #12]
 8004780:	075a      	lsls	r2, r3, #29
 8004782:	d505      	bpl.n	8004790 <__sflush_r+0x48>
 8004784:	6863      	ldr	r3, [r4, #4]
 8004786:	1ac0      	subs	r0, r0, r3
 8004788:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800478a:	b10b      	cbz	r3, 8004790 <__sflush_r+0x48>
 800478c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800478e:	1ac0      	subs	r0, r0, r3
 8004790:	2300      	movs	r3, #0
 8004792:	4602      	mov	r2, r0
 8004794:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004796:	6a21      	ldr	r1, [r4, #32]
 8004798:	4628      	mov	r0, r5
 800479a:	47b0      	blx	r6
 800479c:	1c43      	adds	r3, r0, #1
 800479e:	89a3      	ldrh	r3, [r4, #12]
 80047a0:	d106      	bne.n	80047b0 <__sflush_r+0x68>
 80047a2:	6829      	ldr	r1, [r5, #0]
 80047a4:	291d      	cmp	r1, #29
 80047a6:	d82b      	bhi.n	8004800 <__sflush_r+0xb8>
 80047a8:	4a29      	ldr	r2, [pc, #164]	; (8004850 <__sflush_r+0x108>)
 80047aa:	410a      	asrs	r2, r1
 80047ac:	07d6      	lsls	r6, r2, #31
 80047ae:	d427      	bmi.n	8004800 <__sflush_r+0xb8>
 80047b0:	2200      	movs	r2, #0
 80047b2:	6062      	str	r2, [r4, #4]
 80047b4:	04d9      	lsls	r1, r3, #19
 80047b6:	6922      	ldr	r2, [r4, #16]
 80047b8:	6022      	str	r2, [r4, #0]
 80047ba:	d504      	bpl.n	80047c6 <__sflush_r+0x7e>
 80047bc:	1c42      	adds	r2, r0, #1
 80047be:	d101      	bne.n	80047c4 <__sflush_r+0x7c>
 80047c0:	682b      	ldr	r3, [r5, #0]
 80047c2:	b903      	cbnz	r3, 80047c6 <__sflush_r+0x7e>
 80047c4:	6560      	str	r0, [r4, #84]	; 0x54
 80047c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047c8:	602f      	str	r7, [r5, #0]
 80047ca:	2900      	cmp	r1, #0
 80047cc:	d0c9      	beq.n	8004762 <__sflush_r+0x1a>
 80047ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047d2:	4299      	cmp	r1, r3
 80047d4:	d002      	beq.n	80047dc <__sflush_r+0x94>
 80047d6:	4628      	mov	r0, r5
 80047d8:	f7ff fbea 	bl	8003fb0 <_free_r>
 80047dc:	2000      	movs	r0, #0
 80047de:	6360      	str	r0, [r4, #52]	; 0x34
 80047e0:	e7c0      	b.n	8004764 <__sflush_r+0x1c>
 80047e2:	2301      	movs	r3, #1
 80047e4:	4628      	mov	r0, r5
 80047e6:	47b0      	blx	r6
 80047e8:	1c41      	adds	r1, r0, #1
 80047ea:	d1c8      	bne.n	800477e <__sflush_r+0x36>
 80047ec:	682b      	ldr	r3, [r5, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0c5      	beq.n	800477e <__sflush_r+0x36>
 80047f2:	2b1d      	cmp	r3, #29
 80047f4:	d001      	beq.n	80047fa <__sflush_r+0xb2>
 80047f6:	2b16      	cmp	r3, #22
 80047f8:	d101      	bne.n	80047fe <__sflush_r+0xb6>
 80047fa:	602f      	str	r7, [r5, #0]
 80047fc:	e7b1      	b.n	8004762 <__sflush_r+0x1a>
 80047fe:	89a3      	ldrh	r3, [r4, #12]
 8004800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004804:	81a3      	strh	r3, [r4, #12]
 8004806:	e7ad      	b.n	8004764 <__sflush_r+0x1c>
 8004808:	690f      	ldr	r7, [r1, #16]
 800480a:	2f00      	cmp	r7, #0
 800480c:	d0a9      	beq.n	8004762 <__sflush_r+0x1a>
 800480e:	0793      	lsls	r3, r2, #30
 8004810:	680e      	ldr	r6, [r1, #0]
 8004812:	bf08      	it	eq
 8004814:	694b      	ldreq	r3, [r1, #20]
 8004816:	600f      	str	r7, [r1, #0]
 8004818:	bf18      	it	ne
 800481a:	2300      	movne	r3, #0
 800481c:	eba6 0807 	sub.w	r8, r6, r7
 8004820:	608b      	str	r3, [r1, #8]
 8004822:	f1b8 0f00 	cmp.w	r8, #0
 8004826:	dd9c      	ble.n	8004762 <__sflush_r+0x1a>
 8004828:	6a21      	ldr	r1, [r4, #32]
 800482a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800482c:	4643      	mov	r3, r8
 800482e:	463a      	mov	r2, r7
 8004830:	4628      	mov	r0, r5
 8004832:	47b0      	blx	r6
 8004834:	2800      	cmp	r0, #0
 8004836:	dc06      	bgt.n	8004846 <__sflush_r+0xfe>
 8004838:	89a3      	ldrh	r3, [r4, #12]
 800483a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800483e:	81a3      	strh	r3, [r4, #12]
 8004840:	f04f 30ff 	mov.w	r0, #4294967295
 8004844:	e78e      	b.n	8004764 <__sflush_r+0x1c>
 8004846:	4407      	add	r7, r0
 8004848:	eba8 0800 	sub.w	r8, r8, r0
 800484c:	e7e9      	b.n	8004822 <__sflush_r+0xda>
 800484e:	bf00      	nop
 8004850:	dfbffffe 	.word	0xdfbffffe

08004854 <_fflush_r>:
 8004854:	b538      	push	{r3, r4, r5, lr}
 8004856:	690b      	ldr	r3, [r1, #16]
 8004858:	4605      	mov	r5, r0
 800485a:	460c      	mov	r4, r1
 800485c:	b913      	cbnz	r3, 8004864 <_fflush_r+0x10>
 800485e:	2500      	movs	r5, #0
 8004860:	4628      	mov	r0, r5
 8004862:	bd38      	pop	{r3, r4, r5, pc}
 8004864:	b118      	cbz	r0, 800486e <_fflush_r+0x1a>
 8004866:	6a03      	ldr	r3, [r0, #32]
 8004868:	b90b      	cbnz	r3, 800486e <_fflush_r+0x1a>
 800486a:	f7ff fa9f 	bl	8003dac <__sinit>
 800486e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0f3      	beq.n	800485e <_fflush_r+0xa>
 8004876:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004878:	07d0      	lsls	r0, r2, #31
 800487a:	d404      	bmi.n	8004886 <_fflush_r+0x32>
 800487c:	0599      	lsls	r1, r3, #22
 800487e:	d402      	bmi.n	8004886 <_fflush_r+0x32>
 8004880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004882:	f7ff fb92 	bl	8003faa <__retarget_lock_acquire_recursive>
 8004886:	4628      	mov	r0, r5
 8004888:	4621      	mov	r1, r4
 800488a:	f7ff ff5d 	bl	8004748 <__sflush_r>
 800488e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004890:	07da      	lsls	r2, r3, #31
 8004892:	4605      	mov	r5, r0
 8004894:	d4e4      	bmi.n	8004860 <_fflush_r+0xc>
 8004896:	89a3      	ldrh	r3, [r4, #12]
 8004898:	059b      	lsls	r3, r3, #22
 800489a:	d4e1      	bmi.n	8004860 <_fflush_r+0xc>
 800489c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800489e:	f7ff fb85 	bl	8003fac <__retarget_lock_release_recursive>
 80048a2:	e7dd      	b.n	8004860 <_fflush_r+0xc>

080048a4 <__swbuf_r>:
 80048a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a6:	460e      	mov	r6, r1
 80048a8:	4614      	mov	r4, r2
 80048aa:	4605      	mov	r5, r0
 80048ac:	b118      	cbz	r0, 80048b6 <__swbuf_r+0x12>
 80048ae:	6a03      	ldr	r3, [r0, #32]
 80048b0:	b90b      	cbnz	r3, 80048b6 <__swbuf_r+0x12>
 80048b2:	f7ff fa7b 	bl	8003dac <__sinit>
 80048b6:	69a3      	ldr	r3, [r4, #24]
 80048b8:	60a3      	str	r3, [r4, #8]
 80048ba:	89a3      	ldrh	r3, [r4, #12]
 80048bc:	071a      	lsls	r2, r3, #28
 80048be:	d525      	bpl.n	800490c <__swbuf_r+0x68>
 80048c0:	6923      	ldr	r3, [r4, #16]
 80048c2:	b31b      	cbz	r3, 800490c <__swbuf_r+0x68>
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	6922      	ldr	r2, [r4, #16]
 80048c8:	1a98      	subs	r0, r3, r2
 80048ca:	6963      	ldr	r3, [r4, #20]
 80048cc:	b2f6      	uxtb	r6, r6
 80048ce:	4283      	cmp	r3, r0
 80048d0:	4637      	mov	r7, r6
 80048d2:	dc04      	bgt.n	80048de <__swbuf_r+0x3a>
 80048d4:	4621      	mov	r1, r4
 80048d6:	4628      	mov	r0, r5
 80048d8:	f7ff ffbc 	bl	8004854 <_fflush_r>
 80048dc:	b9e0      	cbnz	r0, 8004918 <__swbuf_r+0x74>
 80048de:	68a3      	ldr	r3, [r4, #8]
 80048e0:	3b01      	subs	r3, #1
 80048e2:	60a3      	str	r3, [r4, #8]
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	6022      	str	r2, [r4, #0]
 80048ea:	701e      	strb	r6, [r3, #0]
 80048ec:	6962      	ldr	r2, [r4, #20]
 80048ee:	1c43      	adds	r3, r0, #1
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d004      	beq.n	80048fe <__swbuf_r+0x5a>
 80048f4:	89a3      	ldrh	r3, [r4, #12]
 80048f6:	07db      	lsls	r3, r3, #31
 80048f8:	d506      	bpl.n	8004908 <__swbuf_r+0x64>
 80048fa:	2e0a      	cmp	r6, #10
 80048fc:	d104      	bne.n	8004908 <__swbuf_r+0x64>
 80048fe:	4621      	mov	r1, r4
 8004900:	4628      	mov	r0, r5
 8004902:	f7ff ffa7 	bl	8004854 <_fflush_r>
 8004906:	b938      	cbnz	r0, 8004918 <__swbuf_r+0x74>
 8004908:	4638      	mov	r0, r7
 800490a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800490c:	4621      	mov	r1, r4
 800490e:	4628      	mov	r0, r5
 8004910:	f000 f806 	bl	8004920 <__swsetup_r>
 8004914:	2800      	cmp	r0, #0
 8004916:	d0d5      	beq.n	80048c4 <__swbuf_r+0x20>
 8004918:	f04f 37ff 	mov.w	r7, #4294967295
 800491c:	e7f4      	b.n	8004908 <__swbuf_r+0x64>
	...

08004920 <__swsetup_r>:
 8004920:	b538      	push	{r3, r4, r5, lr}
 8004922:	4b2a      	ldr	r3, [pc, #168]	; (80049cc <__swsetup_r+0xac>)
 8004924:	4605      	mov	r5, r0
 8004926:	6818      	ldr	r0, [r3, #0]
 8004928:	460c      	mov	r4, r1
 800492a:	b118      	cbz	r0, 8004934 <__swsetup_r+0x14>
 800492c:	6a03      	ldr	r3, [r0, #32]
 800492e:	b90b      	cbnz	r3, 8004934 <__swsetup_r+0x14>
 8004930:	f7ff fa3c 	bl	8003dac <__sinit>
 8004934:	89a3      	ldrh	r3, [r4, #12]
 8004936:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800493a:	0718      	lsls	r0, r3, #28
 800493c:	d422      	bmi.n	8004984 <__swsetup_r+0x64>
 800493e:	06d9      	lsls	r1, r3, #27
 8004940:	d407      	bmi.n	8004952 <__swsetup_r+0x32>
 8004942:	2309      	movs	r3, #9
 8004944:	602b      	str	r3, [r5, #0]
 8004946:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800494a:	81a3      	strh	r3, [r4, #12]
 800494c:	f04f 30ff 	mov.w	r0, #4294967295
 8004950:	e034      	b.n	80049bc <__swsetup_r+0x9c>
 8004952:	0758      	lsls	r0, r3, #29
 8004954:	d512      	bpl.n	800497c <__swsetup_r+0x5c>
 8004956:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004958:	b141      	cbz	r1, 800496c <__swsetup_r+0x4c>
 800495a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800495e:	4299      	cmp	r1, r3
 8004960:	d002      	beq.n	8004968 <__swsetup_r+0x48>
 8004962:	4628      	mov	r0, r5
 8004964:	f7ff fb24 	bl	8003fb0 <_free_r>
 8004968:	2300      	movs	r3, #0
 800496a:	6363      	str	r3, [r4, #52]	; 0x34
 800496c:	89a3      	ldrh	r3, [r4, #12]
 800496e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004972:	81a3      	strh	r3, [r4, #12]
 8004974:	2300      	movs	r3, #0
 8004976:	6063      	str	r3, [r4, #4]
 8004978:	6923      	ldr	r3, [r4, #16]
 800497a:	6023      	str	r3, [r4, #0]
 800497c:	89a3      	ldrh	r3, [r4, #12]
 800497e:	f043 0308 	orr.w	r3, r3, #8
 8004982:	81a3      	strh	r3, [r4, #12]
 8004984:	6923      	ldr	r3, [r4, #16]
 8004986:	b94b      	cbnz	r3, 800499c <__swsetup_r+0x7c>
 8004988:	89a3      	ldrh	r3, [r4, #12]
 800498a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800498e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004992:	d003      	beq.n	800499c <__swsetup_r+0x7c>
 8004994:	4621      	mov	r1, r4
 8004996:	4628      	mov	r0, r5
 8004998:	f000 f850 	bl	8004a3c <__smakebuf_r>
 800499c:	89a0      	ldrh	r0, [r4, #12]
 800499e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049a2:	f010 0301 	ands.w	r3, r0, #1
 80049a6:	d00a      	beq.n	80049be <__swsetup_r+0x9e>
 80049a8:	2300      	movs	r3, #0
 80049aa:	60a3      	str	r3, [r4, #8]
 80049ac:	6963      	ldr	r3, [r4, #20]
 80049ae:	425b      	negs	r3, r3
 80049b0:	61a3      	str	r3, [r4, #24]
 80049b2:	6923      	ldr	r3, [r4, #16]
 80049b4:	b943      	cbnz	r3, 80049c8 <__swsetup_r+0xa8>
 80049b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80049ba:	d1c4      	bne.n	8004946 <__swsetup_r+0x26>
 80049bc:	bd38      	pop	{r3, r4, r5, pc}
 80049be:	0781      	lsls	r1, r0, #30
 80049c0:	bf58      	it	pl
 80049c2:	6963      	ldrpl	r3, [r4, #20]
 80049c4:	60a3      	str	r3, [r4, #8]
 80049c6:	e7f4      	b.n	80049b2 <__swsetup_r+0x92>
 80049c8:	2000      	movs	r0, #0
 80049ca:	e7f7      	b.n	80049bc <__swsetup_r+0x9c>
 80049cc:	20000064 	.word	0x20000064

080049d0 <_sbrk_r>:
 80049d0:	b538      	push	{r3, r4, r5, lr}
 80049d2:	4d06      	ldr	r5, [pc, #24]	; (80049ec <_sbrk_r+0x1c>)
 80049d4:	2300      	movs	r3, #0
 80049d6:	4604      	mov	r4, r0
 80049d8:	4608      	mov	r0, r1
 80049da:	602b      	str	r3, [r5, #0]
 80049dc:	f000 f88c 	bl	8004af8 <_sbrk>
 80049e0:	1c43      	adds	r3, r0, #1
 80049e2:	d102      	bne.n	80049ea <_sbrk_r+0x1a>
 80049e4:	682b      	ldr	r3, [r5, #0]
 80049e6:	b103      	cbz	r3, 80049ea <_sbrk_r+0x1a>
 80049e8:	6023      	str	r3, [r4, #0]
 80049ea:	bd38      	pop	{r3, r4, r5, pc}
 80049ec:	2000231c 	.word	0x2000231c

080049f0 <__swhatbuf_r>:
 80049f0:	b570      	push	{r4, r5, r6, lr}
 80049f2:	460c      	mov	r4, r1
 80049f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049f8:	2900      	cmp	r1, #0
 80049fa:	b096      	sub	sp, #88	; 0x58
 80049fc:	4615      	mov	r5, r2
 80049fe:	461e      	mov	r6, r3
 8004a00:	da0d      	bge.n	8004a1e <__swhatbuf_r+0x2e>
 8004a02:	89a3      	ldrh	r3, [r4, #12]
 8004a04:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004a08:	f04f 0100 	mov.w	r1, #0
 8004a0c:	bf0c      	ite	eq
 8004a0e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004a12:	2340      	movne	r3, #64	; 0x40
 8004a14:	2000      	movs	r0, #0
 8004a16:	6031      	str	r1, [r6, #0]
 8004a18:	602b      	str	r3, [r5, #0]
 8004a1a:	b016      	add	sp, #88	; 0x58
 8004a1c:	bd70      	pop	{r4, r5, r6, pc}
 8004a1e:	466a      	mov	r2, sp
 8004a20:	f000 f848 	bl	8004ab4 <_fstat_r>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	dbec      	blt.n	8004a02 <__swhatbuf_r+0x12>
 8004a28:	9901      	ldr	r1, [sp, #4]
 8004a2a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004a2e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004a32:	4259      	negs	r1, r3
 8004a34:	4159      	adcs	r1, r3
 8004a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a3a:	e7eb      	b.n	8004a14 <__swhatbuf_r+0x24>

08004a3c <__smakebuf_r>:
 8004a3c:	898b      	ldrh	r3, [r1, #12]
 8004a3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a40:	079d      	lsls	r5, r3, #30
 8004a42:	4606      	mov	r6, r0
 8004a44:	460c      	mov	r4, r1
 8004a46:	d507      	bpl.n	8004a58 <__smakebuf_r+0x1c>
 8004a48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a4c:	6023      	str	r3, [r4, #0]
 8004a4e:	6123      	str	r3, [r4, #16]
 8004a50:	2301      	movs	r3, #1
 8004a52:	6163      	str	r3, [r4, #20]
 8004a54:	b002      	add	sp, #8
 8004a56:	bd70      	pop	{r4, r5, r6, pc}
 8004a58:	ab01      	add	r3, sp, #4
 8004a5a:	466a      	mov	r2, sp
 8004a5c:	f7ff ffc8 	bl	80049f0 <__swhatbuf_r>
 8004a60:	9900      	ldr	r1, [sp, #0]
 8004a62:	4605      	mov	r5, r0
 8004a64:	4630      	mov	r0, r6
 8004a66:	f7ff fb0f 	bl	8004088 <_malloc_r>
 8004a6a:	b948      	cbnz	r0, 8004a80 <__smakebuf_r+0x44>
 8004a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a70:	059a      	lsls	r2, r3, #22
 8004a72:	d4ef      	bmi.n	8004a54 <__smakebuf_r+0x18>
 8004a74:	f023 0303 	bic.w	r3, r3, #3
 8004a78:	f043 0302 	orr.w	r3, r3, #2
 8004a7c:	81a3      	strh	r3, [r4, #12]
 8004a7e:	e7e3      	b.n	8004a48 <__smakebuf_r+0xc>
 8004a80:	89a3      	ldrh	r3, [r4, #12]
 8004a82:	6020      	str	r0, [r4, #0]
 8004a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a88:	81a3      	strh	r3, [r4, #12]
 8004a8a:	9b00      	ldr	r3, [sp, #0]
 8004a8c:	6163      	str	r3, [r4, #20]
 8004a8e:	9b01      	ldr	r3, [sp, #4]
 8004a90:	6120      	str	r0, [r4, #16]
 8004a92:	b15b      	cbz	r3, 8004aac <__smakebuf_r+0x70>
 8004a94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a98:	4630      	mov	r0, r6
 8004a9a:	f000 f81d 	bl	8004ad8 <_isatty_r>
 8004a9e:	b128      	cbz	r0, 8004aac <__smakebuf_r+0x70>
 8004aa0:	89a3      	ldrh	r3, [r4, #12]
 8004aa2:	f023 0303 	bic.w	r3, r3, #3
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	81a3      	strh	r3, [r4, #12]
 8004aac:	89a3      	ldrh	r3, [r4, #12]
 8004aae:	431d      	orrs	r5, r3
 8004ab0:	81a5      	strh	r5, [r4, #12]
 8004ab2:	e7cf      	b.n	8004a54 <__smakebuf_r+0x18>

08004ab4 <_fstat_r>:
 8004ab4:	b538      	push	{r3, r4, r5, lr}
 8004ab6:	4d07      	ldr	r5, [pc, #28]	; (8004ad4 <_fstat_r+0x20>)
 8004ab8:	2300      	movs	r3, #0
 8004aba:	4604      	mov	r4, r0
 8004abc:	4608      	mov	r0, r1
 8004abe:	4611      	mov	r1, r2
 8004ac0:	602b      	str	r3, [r5, #0]
 8004ac2:	f7fb ffc2 	bl	8000a4a <_fstat>
 8004ac6:	1c43      	adds	r3, r0, #1
 8004ac8:	d102      	bne.n	8004ad0 <_fstat_r+0x1c>
 8004aca:	682b      	ldr	r3, [r5, #0]
 8004acc:	b103      	cbz	r3, 8004ad0 <_fstat_r+0x1c>
 8004ace:	6023      	str	r3, [r4, #0]
 8004ad0:	bd38      	pop	{r3, r4, r5, pc}
 8004ad2:	bf00      	nop
 8004ad4:	2000231c 	.word	0x2000231c

08004ad8 <_isatty_r>:
 8004ad8:	b538      	push	{r3, r4, r5, lr}
 8004ada:	4d06      	ldr	r5, [pc, #24]	; (8004af4 <_isatty_r+0x1c>)
 8004adc:	2300      	movs	r3, #0
 8004ade:	4604      	mov	r4, r0
 8004ae0:	4608      	mov	r0, r1
 8004ae2:	602b      	str	r3, [r5, #0]
 8004ae4:	f7fb ffc1 	bl	8000a6a <_isatty>
 8004ae8:	1c43      	adds	r3, r0, #1
 8004aea:	d102      	bne.n	8004af2 <_isatty_r+0x1a>
 8004aec:	682b      	ldr	r3, [r5, #0]
 8004aee:	b103      	cbz	r3, 8004af2 <_isatty_r+0x1a>
 8004af0:	6023      	str	r3, [r4, #0]
 8004af2:	bd38      	pop	{r3, r4, r5, pc}
 8004af4:	2000231c 	.word	0x2000231c

08004af8 <_sbrk>:
 8004af8:	4a04      	ldr	r2, [pc, #16]	; (8004b0c <_sbrk+0x14>)
 8004afa:	6811      	ldr	r1, [r2, #0]
 8004afc:	4603      	mov	r3, r0
 8004afe:	b909      	cbnz	r1, 8004b04 <_sbrk+0xc>
 8004b00:	4903      	ldr	r1, [pc, #12]	; (8004b10 <_sbrk+0x18>)
 8004b02:	6011      	str	r1, [r2, #0]
 8004b04:	6810      	ldr	r0, [r2, #0]
 8004b06:	4403      	add	r3, r0
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	4770      	bx	lr
 8004b0c:	2000232c 	.word	0x2000232c
 8004b10:	20002330 	.word	0x20002330

08004b14 <_init>:
 8004b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b16:	bf00      	nop
 8004b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b1a:	bc08      	pop	{r3}
 8004b1c:	469e      	mov	lr, r3
 8004b1e:	4770      	bx	lr

08004b20 <_fini>:
 8004b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b22:	bf00      	nop
 8004b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b26:	bc08      	pop	{r3}
 8004b28:	469e      	mov	lr, r3
 8004b2a:	4770      	bx	lr
