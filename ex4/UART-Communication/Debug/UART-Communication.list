
UART-Communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003074  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080031fc  080031fc  000131fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003258  08003258  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003258  08003258  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003258  08003258  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003258  08003258  00013258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800325c  0800325c  0001325c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000068  080032c8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  080032c8  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007e1b  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000191f  00000000  00000000  00027ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c0  00000000  00000000  00029818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000067d  00000000  00000000  0002a0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e65  00000000  00000000  0002a755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009e2b  00000000  00000000  000505ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e549d  00000000  00000000  0005a3e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002818  00000000  00000000  0013f884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0014209c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080031e4 	.word	0x080031e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	080031e4 	.word	0x080031e4

080001c8 <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_Init(void);
/* USER CODE BEGIN PFP */
 _PUTCHAR_PROTOTYPE_ {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 while (HAL_OK != HAL_USART_Transmit(&husart1, (uint8_t *) &ch, 1, 0xFFFF)){
 80001d0:	bf00      	nop
 80001d2:	1d39      	adds	r1, r7, #4
 80001d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001d8:	2201      	movs	r2, #1
 80001da:	4805      	ldr	r0, [pc, #20]	; (80001f0 <__io_putchar+0x28>)
 80001dc:	f002 f8d8 	bl	8002390 <HAL_USART_Transmit>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d1f5      	bne.n	80001d2 <__io_putchar+0xa>
 ;
 }
 return ch;
 80001e6:	687b      	ldr	r3, [r7, #4]
 }
 80001e8:	4618      	mov	r0, r3
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	20000084 	.word	0x20000084

080001f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f8:	f000 fa37 	bl	800066a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fc:	f000 f80e 	bl	800021c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000200:	f000 f88a 	bl	8000318 <MX_GPIO_Init>
  MX_USART1_Init();
 8000204:	f000 f85c 	bl	80002c0 <MX_USART1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("My name is Carlos \n");
 8000208:	4803      	ldr	r0, [pc, #12]	; (8000218 <main+0x24>)
 800020a:	f002 fc55 	bl	8002ab8 <puts>
	  HAL_Delay(2000);
 800020e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000212:	f000 fa9f 	bl	8000754 <HAL_Delay>
	  printf("My name is Carlos \n");
 8000216:	e7f7      	b.n	8000208 <main+0x14>
 8000218:	080031fc 	.word	0x080031fc

0800021c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b096      	sub	sp, #88	; 0x58
 8000220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	f107 0314 	add.w	r3, r7, #20
 8000226:	2244      	movs	r2, #68	; 0x44
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f002 fd24 	bl	8002c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000230:	463b      	mov	r3, r7
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]
 8000238:	609a      	str	r2, [r3, #8]
 800023a:	60da      	str	r2, [r3, #12]
 800023c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800023e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000242:	f000 fd49 	bl	8000cd8 <HAL_PWREx_ControlVoltageScaling>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800024c:	f000 f87c 	bl	8000348 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000250:	2310      	movs	r3, #16
 8000252:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000254:	2301      	movs	r3, #1
 8000256:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000258:	2300      	movs	r3, #0
 800025a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800025c:	2360      	movs	r3, #96	; 0x60
 800025e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000260:	2302      	movs	r3, #2
 8000262:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000264:	2301      	movs	r3, #1
 8000266:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000268:	2301      	movs	r3, #1
 800026a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800026c:	2328      	movs	r3, #40	; 0x28
 800026e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000270:	2307      	movs	r3, #7
 8000272:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000274:	2302      	movs	r3, #2
 8000276:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000278:	2302      	movs	r3, #2
 800027a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027c:	f107 0314 	add.w	r3, r7, #20
 8000280:	4618      	mov	r0, r3
 8000282:	f000 fd7f 	bl	8000d84 <HAL_RCC_OscConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800028c:	f000 f85c 	bl	8000348 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000290:	230f      	movs	r3, #15
 8000292:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000294:	2303      	movs	r3, #3
 8000296:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002a4:	463b      	mov	r3, r7
 80002a6:	2104      	movs	r1, #4
 80002a8:	4618      	mov	r0, r3
 80002aa:	f001 f947 	bl	800153c <HAL_RCC_ClockConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002b4:	f000 f848 	bl	8000348 <Error_Handler>
  }
}
 80002b8:	bf00      	nop
 80002ba:	3758      	adds	r7, #88	; 0x58
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80002c4:	4b12      	ldr	r3, [pc, #72]	; (8000310 <MX_USART1_Init+0x50>)
 80002c6:	4a13      	ldr	r2, [pc, #76]	; (8000314 <MX_USART1_Init+0x54>)
 80002c8:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80002ca:	4b11      	ldr	r3, [pc, #68]	; (8000310 <MX_USART1_Init+0x50>)
 80002cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002d0:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <MX_USART1_Init+0x50>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80002d8:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <MX_USART1_Init+0x50>)
 80002da:	2200      	movs	r2, #0
 80002dc:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 80002de:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <MX_USART1_Init+0x50>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 80002e4:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <MX_USART1_Init+0x50>)
 80002e6:	220c      	movs	r2, #12
 80002e8:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <MX_USART1_Init+0x50>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <MX_USART1_Init+0x50>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <MX_USART1_Init+0x50>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 80002fc:	4804      	ldr	r0, [pc, #16]	; (8000310 <MX_USART1_Init+0x50>)
 80002fe:	f001 fffd 	bl	80022fc <HAL_USART_Init>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000308:	f000 f81e 	bl	8000348 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000084 	.word	0x20000084
 8000314:	40013800 	.word	0x40013800

08000318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031e:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_GPIO_Init+0x2c>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000322:	4a08      	ldr	r2, [pc, #32]	; (8000344 <MX_GPIO_Init+0x2c>)
 8000324:	f043 0302 	orr.w	r3, r3, #2
 8000328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <MX_GPIO_Init+0x2c>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032e:	f003 0302 	and.w	r3, r3, #2
 8000332:	607b      	str	r3, [r7, #4]
 8000334:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000

08000348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800034c:	b672      	cpsid	i
}
 800034e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000350:	e7fe      	b.n	8000350 <Error_Handler+0x8>
	...

08000354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800035a:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <HAL_MspInit+0x44>)
 800035c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800035e:	4a0e      	ldr	r2, [pc, #56]	; (8000398 <HAL_MspInit+0x44>)
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	6613      	str	r3, [r2, #96]	; 0x60
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <HAL_MspInit+0x44>)
 8000368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800036a:	f003 0301 	and.w	r3, r3, #1
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000372:	4b09      	ldr	r3, [pc, #36]	; (8000398 <HAL_MspInit+0x44>)
 8000374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000376:	4a08      	ldr	r2, [pc, #32]	; (8000398 <HAL_MspInit+0x44>)
 8000378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800037c:	6593      	str	r3, [r2, #88]	; 0x58
 800037e:	4b06      	ldr	r3, [pc, #24]	; (8000398 <HAL_MspInit+0x44>)
 8000380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000386:	603b      	str	r3, [r7, #0]
 8000388:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40021000 	.word	0x40021000

0800039c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b0ac      	sub	sp, #176	; 0xb0
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
 80003b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003b4:	f107 0314 	add.w	r3, r7, #20
 80003b8:	2288      	movs	r2, #136	; 0x88
 80003ba:	2100      	movs	r1, #0
 80003bc:	4618      	mov	r0, r3
 80003be:	f002 fc5b 	bl	8002c78 <memset>
  if(husart->Instance==USART1)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a21      	ldr	r2, [pc, #132]	; (800044c <HAL_USART_MspInit+0xb0>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d13a      	bne.n	8000442 <HAL_USART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003cc:	2301      	movs	r3, #1
 80003ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80003d0:	2300      	movs	r3, #0
 80003d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d4:	f107 0314 	add.w	r3, r7, #20
 80003d8:	4618      	mov	r0, r3
 80003da:	f001 fad3 	bl	8001984 <HAL_RCCEx_PeriphCLKConfig>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 80003e4:	f7ff ffb0 	bl	8000348 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80003e8:	4b19      	ldr	r3, [pc, #100]	; (8000450 <HAL_USART_MspInit+0xb4>)
 80003ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003ec:	4a18      	ldr	r2, [pc, #96]	; (8000450 <HAL_USART_MspInit+0xb4>)
 80003ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003f2:	6613      	str	r3, [r2, #96]	; 0x60
 80003f4:	4b16      	ldr	r3, [pc, #88]	; (8000450 <HAL_USART_MspInit+0xb4>)
 80003f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003fc:	613b      	str	r3, [r7, #16]
 80003fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000400:	4b13      	ldr	r3, [pc, #76]	; (8000450 <HAL_USART_MspInit+0xb4>)
 8000402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000404:	4a12      	ldr	r2, [pc, #72]	; (8000450 <HAL_USART_MspInit+0xb4>)
 8000406:	f043 0302 	orr.w	r3, r3, #2
 800040a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040c:	4b10      	ldr	r3, [pc, #64]	; (8000450 <HAL_USART_MspInit+0xb4>)
 800040e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000410:	f003 0302 	and.w	r3, r3, #2
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB5     ------> USART1_CK
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000418:	23e0      	movs	r3, #224	; 0xe0
 800041a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800041e:	2302      	movs	r3, #2
 8000420:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000424:	2300      	movs	r3, #0
 8000426:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800042a:	2303      	movs	r3, #3
 800042c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000430:	2307      	movs	r3, #7
 8000432:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000436:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800043a:	4619      	mov	r1, r3
 800043c:	4805      	ldr	r0, [pc, #20]	; (8000454 <HAL_USART_MspInit+0xb8>)
 800043e:	f000 fa93 	bl	8000968 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000442:	bf00      	nop
 8000444:	37b0      	adds	r7, #176	; 0xb0
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40013800 	.word	0x40013800
 8000450:	40021000 	.word	0x40021000
 8000454:	48000400 	.word	0x48000400

08000458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800045c:	e7fe      	b.n	800045c <NMI_Handler+0x4>

0800045e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000462:	e7fe      	b.n	8000462 <HardFault_Handler+0x4>

08000464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000468:	e7fe      	b.n	8000468 <MemManage_Handler+0x4>

0800046a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800046e:	e7fe      	b.n	800046e <BusFault_Handler+0x4>

08000470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000474:	e7fe      	b.n	8000474 <UsageFault_Handler+0x4>

08000476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr

08000484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr

08000492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr

080004a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004a4:	f000 f936 	bl	8000714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a8:	bf00      	nop
 80004aa:	bd80      	pop	{r7, pc}

080004ac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	60f8      	str	r0, [r7, #12]
 80004b4:	60b9      	str	r1, [r7, #8]
 80004b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]
 80004bc:	e00a      	b.n	80004d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004be:	f3af 8000 	nop.w
 80004c2:	4601      	mov	r1, r0
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	1c5a      	adds	r2, r3, #1
 80004c8:	60ba      	str	r2, [r7, #8]
 80004ca:	b2ca      	uxtb	r2, r1
 80004cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	3301      	adds	r3, #1
 80004d2:	617b      	str	r3, [r7, #20]
 80004d4:	697a      	ldr	r2, [r7, #20]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	429a      	cmp	r2, r3
 80004da:	dbf0      	blt.n	80004be <_read+0x12>
  }

  return len;
 80004dc:	687b      	ldr	r3, [r7, #4]
}
 80004de:	4618      	mov	r0, r3
 80004e0:	3718      	adds	r7, #24
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b086      	sub	sp, #24
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	60f8      	str	r0, [r7, #12]
 80004ee:	60b9      	str	r1, [r7, #8]
 80004f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
 80004f6:	e009      	b.n	800050c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	1c5a      	adds	r2, r3, #1
 80004fc:	60ba      	str	r2, [r7, #8]
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff fe61 	bl	80001c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	3301      	adds	r3, #1
 800050a:	617b      	str	r3, [r7, #20]
 800050c:	697a      	ldr	r2, [r7, #20]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	429a      	cmp	r2, r3
 8000512:	dbf1      	blt.n	80004f8 <_write+0x12>
  }
  return len;
 8000514:	687b      	ldr	r3, [r7, #4]
}
 8000516:	4618      	mov	r0, r3
 8000518:	3718      	adds	r7, #24
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}

0800051e <_close>:

int _close(int file)
{
 800051e:	b480      	push	{r7}
 8000520:	b083      	sub	sp, #12
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000526:	f04f 33ff 	mov.w	r3, #4294967295
}
 800052a:	4618      	mov	r0, r3
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr

08000536 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000536:	b480      	push	{r7}
 8000538:	b083      	sub	sp, #12
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
 800053e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000546:	605a      	str	r2, [r3, #4]
  return 0;
 8000548:	2300      	movs	r3, #0
}
 800054a:	4618      	mov	r0, r3
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <_isatty>:

int _isatty(int file)
{
 8000556:	b480      	push	{r7}
 8000558:	b083      	sub	sp, #12
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800055e:	2301      	movs	r3, #1
}
 8000560:	4618      	mov	r0, r3
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000578:	2300      	movs	r3, #0
}
 800057a:	4618      	mov	r0, r3
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
	...

08000588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000590:	4a14      	ldr	r2, [pc, #80]	; (80005e4 <_sbrk+0x5c>)
 8000592:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <_sbrk+0x60>)
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800059c:	4b13      	ldr	r3, [pc, #76]	; (80005ec <_sbrk+0x64>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d102      	bne.n	80005aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <_sbrk+0x64>)
 80005a6:	4a12      	ldr	r2, [pc, #72]	; (80005f0 <_sbrk+0x68>)
 80005a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <_sbrk+0x64>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	693a      	ldr	r2, [r7, #16]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d207      	bcs.n	80005c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005b8:	f002 fbac 	bl	8002d14 <__errno>
 80005bc:	4603      	mov	r3, r0
 80005be:	220c      	movs	r2, #12
 80005c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
 80005c6:	e009      	b.n	80005dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <_sbrk+0x64>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <_sbrk+0x64>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4413      	add	r3, r2
 80005d6:	4a05      	ldr	r2, [pc, #20]	; (80005ec <_sbrk+0x64>)
 80005d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005da:	68fb      	ldr	r3, [r7, #12]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3718      	adds	r7, #24
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20018000 	.word	0x20018000
 80005e8:	00000400 	.word	0x00000400
 80005ec:	200000d4 	.word	0x200000d4
 80005f0:	20000228 	.word	0x20000228

080005f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <SystemInit+0x20>)
 80005fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <SystemInit+0x20>)
 8000600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000650 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800061c:	f7ff ffea 	bl	80005f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <LoopForever+0x6>)
  ldr r1, =_edata
 8000622:	490d      	ldr	r1, [pc, #52]	; (8000658 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000624:	4a0d      	ldr	r2, [pc, #52]	; (800065c <LoopForever+0xe>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000628:	e002      	b.n	8000630 <LoopCopyDataInit>

0800062a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800062c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062e:	3304      	adds	r3, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000634:	d3f9      	bcc.n	800062a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000636:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000638:	4c0a      	ldr	r4, [pc, #40]	; (8000664 <LoopForever+0x16>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800063c:	e001      	b.n	8000642 <LoopFillZerobss>

0800063e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000640:	3204      	adds	r2, #4

08000642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000644:	d3fb      	bcc.n	800063e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000646:	f002 fb6b 	bl	8002d20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800064a:	f7ff fdd3 	bl	80001f4 <main>

0800064e <LoopForever>:

LoopForever:
    b LoopForever
 800064e:	e7fe      	b.n	800064e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000650:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000658:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800065c:	08003260 	.word	0x08003260
  ldr r2, =_sbss
 8000660:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000664:	20000228 	.word	0x20000228

08000668 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000668:	e7fe      	b.n	8000668 <ADC1_2_IRQHandler>

0800066a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000670:	2300      	movs	r3, #0
 8000672:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000674:	2003      	movs	r0, #3
 8000676:	f000 f943 	bl	8000900 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800067a:	2000      	movs	r0, #0
 800067c:	f000 f80e 	bl	800069c <HAL_InitTick>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	71fb      	strb	r3, [r7, #7]
 800068a:	e001      	b.n	8000690 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800068c:	f7ff fe62 	bl	8000354 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000690:	79fb      	ldrb	r3, [r7, #7]
}
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006a4:	2300      	movs	r3, #0
 80006a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <HAL_InitTick+0x6c>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d023      	beq.n	80006f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006b0:	4b16      	ldr	r3, [pc, #88]	; (800070c <HAL_InitTick+0x70>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <HAL_InitTick+0x6c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	4619      	mov	r1, r3
 80006ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006be:	fbb3 f3f1 	udiv	r3, r3, r1
 80006c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f941 	bl	800094e <HAL_SYSTICK_Config>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d10f      	bne.n	80006f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2b0f      	cmp	r3, #15
 80006d6:	d809      	bhi.n	80006ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006d8:	2200      	movs	r2, #0
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	f04f 30ff 	mov.w	r0, #4294967295
 80006e0:	f000 f919 	bl	8000916 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006e4:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <HAL_InitTick+0x74>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6013      	str	r3, [r2, #0]
 80006ea:	e007      	b.n	80006fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006ec:	2301      	movs	r3, #1
 80006ee:	73fb      	strb	r3, [r7, #15]
 80006f0:	e004      	b.n	80006fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
 80006f4:	73fb      	strb	r3, [r7, #15]
 80006f6:	e001      	b.n	80006fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006f8:	2301      	movs	r3, #1
 80006fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000008 	.word	0x20000008
 800070c:	20000000 	.word	0x20000000
 8000710:	20000004 	.word	0x20000004

08000714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <HAL_IncTick+0x20>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_IncTick+0x24>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4413      	add	r3, r2
 8000724:	4a04      	ldr	r2, [pc, #16]	; (8000738 <HAL_IncTick+0x24>)
 8000726:	6013      	str	r3, [r2, #0]
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000008 	.word	0x20000008
 8000738:	200000d8 	.word	0x200000d8

0800073c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  return uwTick;
 8000740:	4b03      	ldr	r3, [pc, #12]	; (8000750 <HAL_GetTick+0x14>)
 8000742:	681b      	ldr	r3, [r3, #0]
}
 8000744:	4618      	mov	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	200000d8 	.word	0x200000d8

08000754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800075c:	f7ff ffee 	bl	800073c <HAL_GetTick>
 8000760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800076c:	d005      	beq.n	800077a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <HAL_Delay+0x44>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	461a      	mov	r2, r3
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800077a:	bf00      	nop
 800077c:	f7ff ffde 	bl	800073c <HAL_GetTick>
 8000780:	4602      	mov	r2, r0
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	429a      	cmp	r2, r3
 800078a:	d8f7      	bhi.n	800077c <HAL_Delay+0x28>
  {
  }
}
 800078c:	bf00      	nop
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000008 	.word	0x20000008

0800079c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f003 0307 	and.w	r3, r3, #7
 80007aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <__NVIC_SetPriorityGrouping+0x44>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007b2:	68ba      	ldr	r2, [r7, #8]
 80007b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007b8:	4013      	ands	r3, r2
 80007ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ce:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <__NVIC_SetPriorityGrouping+0x44>)
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	60d3      	str	r3, [r2, #12]
}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <__NVIC_GetPriorityGrouping+0x18>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	0a1b      	lsrs	r3, r3, #8
 80007ee:	f003 0307 	and.w	r3, r3, #7
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	6039      	str	r1, [r7, #0]
 800080a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000810:	2b00      	cmp	r3, #0
 8000812:	db0a      	blt.n	800082a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	b2da      	uxtb	r2, r3
 8000818:	490c      	ldr	r1, [pc, #48]	; (800084c <__NVIC_SetPriority+0x4c>)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	0112      	lsls	r2, r2, #4
 8000820:	b2d2      	uxtb	r2, r2
 8000822:	440b      	add	r3, r1
 8000824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000828:	e00a      	b.n	8000840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4908      	ldr	r1, [pc, #32]	; (8000850 <__NVIC_SetPriority+0x50>)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	f003 030f 	and.w	r3, r3, #15
 8000836:	3b04      	subs	r3, #4
 8000838:	0112      	lsls	r2, r2, #4
 800083a:	b2d2      	uxtb	r2, r2
 800083c:	440b      	add	r3, r1
 800083e:	761a      	strb	r2, [r3, #24]
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	e000e100 	.word	0xe000e100
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000854:	b480      	push	{r7}
 8000856:	b089      	sub	sp, #36	; 0x24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	f1c3 0307 	rsb	r3, r3, #7
 800086e:	2b04      	cmp	r3, #4
 8000870:	bf28      	it	cs
 8000872:	2304      	movcs	r3, #4
 8000874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3304      	adds	r3, #4
 800087a:	2b06      	cmp	r3, #6
 800087c:	d902      	bls.n	8000884 <NVIC_EncodePriority+0x30>
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3b03      	subs	r3, #3
 8000882:	e000      	b.n	8000886 <NVIC_EncodePriority+0x32>
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000888:	f04f 32ff 	mov.w	r2, #4294967295
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	43da      	mvns	r2, r3
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	401a      	ands	r2, r3
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800089c:	f04f 31ff 	mov.w	r1, #4294967295
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	43d9      	mvns	r1, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ac:	4313      	orrs	r3, r2
         );
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3724      	adds	r7, #36	; 0x24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
	...

080008bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008cc:	d301      	bcc.n	80008d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00f      	b.n	80008f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d2:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <SysTick_Config+0x40>)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008da:	210f      	movs	r1, #15
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295
 80008e0:	f7ff ff8e 	bl	8000800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <SysTick_Config+0x40>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ea:	4b04      	ldr	r3, [pc, #16]	; (80008fc <SysTick_Config+0x40>)
 80008ec:	2207      	movs	r2, #7
 80008ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	e000e010 	.word	0xe000e010

08000900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff ff47 	bl	800079c <__NVIC_SetPriorityGrouping>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b086      	sub	sp, #24
 800091a:	af00      	add	r7, sp, #0
 800091c:	4603      	mov	r3, r0
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000928:	f7ff ff5c 	bl	80007e4 <__NVIC_GetPriorityGrouping>
 800092c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	68b9      	ldr	r1, [r7, #8]
 8000932:	6978      	ldr	r0, [r7, #20]
 8000934:	f7ff ff8e 	bl	8000854 <NVIC_EncodePriority>
 8000938:	4602      	mov	r2, r0
 800093a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800093e:	4611      	mov	r1, r2
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff5d 	bl	8000800 <__NVIC_SetPriority>
}
 8000946:	bf00      	nop
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff ffb0 	bl	80008bc <SysTick_Config>
 800095c:	4603      	mov	r3, r0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000968:	b480      	push	{r7}
 800096a:	b087      	sub	sp, #28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000976:	e17f      	b.n	8000c78 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	2101      	movs	r1, #1
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	fa01 f303 	lsl.w	r3, r1, r3
 8000984:	4013      	ands	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	2b00      	cmp	r3, #0
 800098c:	f000 8171 	beq.w	8000c72 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f003 0303 	and.w	r3, r3, #3
 8000998:	2b01      	cmp	r3, #1
 800099a:	d005      	beq.n	80009a8 <HAL_GPIO_Init+0x40>
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f003 0303 	and.w	r3, r3, #3
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d130      	bne.n	8000a0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	2203      	movs	r2, #3
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	68da      	ldr	r2, [r3, #12]
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009de:	2201      	movs	r2, #1
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	43db      	mvns	r3, r3
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	4013      	ands	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	091b      	lsrs	r3, r3, #4
 80009f4:	f003 0201 	and.w	r2, r3, #1
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f003 0303 	and.w	r3, r3, #3
 8000a12:	2b03      	cmp	r3, #3
 8000a14:	d118      	bne.n	8000a48 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	43db      	mvns	r3, r3
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	08db      	lsrs	r3, r3, #3
 8000a32:	f003 0201 	and.w	r2, r3, #1
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f003 0303 	and.w	r3, r3, #3
 8000a50:	2b03      	cmp	r3, #3
 8000a52:	d017      	beq.n	8000a84 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	2203      	movs	r2, #3
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	43db      	mvns	r3, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f003 0303 	and.w	r3, r3, #3
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d123      	bne.n	8000ad8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	08da      	lsrs	r2, r3, #3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3208      	adds	r2, #8
 8000a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	f003 0307 	and.w	r3, r3, #7
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	220f      	movs	r2, #15
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	691a      	ldr	r2, [r3, #16]
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	08da      	lsrs	r2, r3, #3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3208      	adds	r2, #8
 8000ad2:	6939      	ldr	r1, [r7, #16]
 8000ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4013      	ands	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f003 0203 	and.w	r2, r3, #3
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	f000 80ac 	beq.w	8000c72 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	4b5f      	ldr	r3, [pc, #380]	; (8000c98 <HAL_GPIO_Init+0x330>)
 8000b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1e:	4a5e      	ldr	r2, [pc, #376]	; (8000c98 <HAL_GPIO_Init+0x330>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6613      	str	r3, [r2, #96]	; 0x60
 8000b26:	4b5c      	ldr	r3, [pc, #368]	; (8000c98 <HAL_GPIO_Init+0x330>)
 8000b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b32:	4a5a      	ldr	r2, [pc, #360]	; (8000c9c <HAL_GPIO_Init+0x334>)
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	089b      	lsrs	r3, r3, #2
 8000b38:	3302      	adds	r3, #2
 8000b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	f003 0303 	and.w	r3, r3, #3
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	220f      	movs	r2, #15
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b5c:	d025      	beq.n	8000baa <HAL_GPIO_Init+0x242>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a4f      	ldr	r2, [pc, #316]	; (8000ca0 <HAL_GPIO_Init+0x338>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d01f      	beq.n	8000ba6 <HAL_GPIO_Init+0x23e>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a4e      	ldr	r2, [pc, #312]	; (8000ca4 <HAL_GPIO_Init+0x33c>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d019      	beq.n	8000ba2 <HAL_GPIO_Init+0x23a>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a4d      	ldr	r2, [pc, #308]	; (8000ca8 <HAL_GPIO_Init+0x340>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d013      	beq.n	8000b9e <HAL_GPIO_Init+0x236>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a4c      	ldr	r2, [pc, #304]	; (8000cac <HAL_GPIO_Init+0x344>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d00d      	beq.n	8000b9a <HAL_GPIO_Init+0x232>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a4b      	ldr	r2, [pc, #300]	; (8000cb0 <HAL_GPIO_Init+0x348>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d007      	beq.n	8000b96 <HAL_GPIO_Init+0x22e>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a4a      	ldr	r2, [pc, #296]	; (8000cb4 <HAL_GPIO_Init+0x34c>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d101      	bne.n	8000b92 <HAL_GPIO_Init+0x22a>
 8000b8e:	2306      	movs	r3, #6
 8000b90:	e00c      	b.n	8000bac <HAL_GPIO_Init+0x244>
 8000b92:	2307      	movs	r3, #7
 8000b94:	e00a      	b.n	8000bac <HAL_GPIO_Init+0x244>
 8000b96:	2305      	movs	r3, #5
 8000b98:	e008      	b.n	8000bac <HAL_GPIO_Init+0x244>
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	e006      	b.n	8000bac <HAL_GPIO_Init+0x244>
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	e004      	b.n	8000bac <HAL_GPIO_Init+0x244>
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	e002      	b.n	8000bac <HAL_GPIO_Init+0x244>
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e000      	b.n	8000bac <HAL_GPIO_Init+0x244>
 8000baa:	2300      	movs	r3, #0
 8000bac:	697a      	ldr	r2, [r7, #20]
 8000bae:	f002 0203 	and.w	r2, r2, #3
 8000bb2:	0092      	lsls	r2, r2, #2
 8000bb4:	4093      	lsls	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bbc:	4937      	ldr	r1, [pc, #220]	; (8000c9c <HAL_GPIO_Init+0x334>)
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	089b      	lsrs	r3, r3, #2
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bca:	4b3b      	ldr	r3, [pc, #236]	; (8000cb8 <HAL_GPIO_Init+0x350>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d003      	beq.n	8000bee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bee:	4a32      	ldr	r2, [pc, #200]	; (8000cb8 <HAL_GPIO_Init+0x350>)
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bf4:	4b30      	ldr	r3, [pc, #192]	; (8000cb8 <HAL_GPIO_Init+0x350>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d003      	beq.n	8000c18 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c18:	4a27      	ldr	r2, [pc, #156]	; (8000cb8 <HAL_GPIO_Init+0x350>)
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c1e:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <HAL_GPIO_Init+0x350>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	43db      	mvns	r3, r3
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c42:	4a1d      	ldr	r2, [pc, #116]	; (8000cb8 <HAL_GPIO_Init+0x350>)
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <HAL_GPIO_Init+0x350>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	43db      	mvns	r3, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d003      	beq.n	8000c6c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c6c:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <HAL_GPIO_Init+0x350>)
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f47f ae78 	bne.w	8000978 <HAL_GPIO_Init+0x10>
  }
}
 8000c88:	bf00      	nop
 8000c8a:	bf00      	nop
 8000c8c:	371c      	adds	r7, #28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40010000 	.word	0x40010000
 8000ca0:	48000400 	.word	0x48000400
 8000ca4:	48000800 	.word	0x48000800
 8000ca8:	48000c00 	.word	0x48000c00
 8000cac:	48001000 	.word	0x48001000
 8000cb0:	48001400 	.word	0x48001400
 8000cb4:	48001800 	.word	0x48001800
 8000cb8:	40010400 	.word	0x40010400

08000cbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40007000 	.word	0x40007000

08000cd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ce6:	d130      	bne.n	8000d4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ce8:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cf4:	d038      	beq.n	8000d68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cf6:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cfe:	4a1e      	ldr	r2, [pc, #120]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2232      	movs	r2, #50	; 0x32
 8000d0c:	fb02 f303 	mul.w	r3, r2, r3
 8000d10:	4a1b      	ldr	r2, [pc, #108]	; (8000d80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d12:	fba2 2303 	umull	r2, r3, r2, r3
 8000d16:	0c9b      	lsrs	r3, r3, #18
 8000d18:	3301      	adds	r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d1c:	e002      	b.n	8000d24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d30:	d102      	bne.n	8000d38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d1f2      	bne.n	8000d1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d3a:	695b      	ldr	r3, [r3, #20]
 8000d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d44:	d110      	bne.n	8000d68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e00f      	b.n	8000d6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d56:	d007      	beq.n	8000d68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d60:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40007000 	.word	0x40007000
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	431bde83 	.word	0x431bde83

08000d84 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e3ca      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d96:	4b97      	ldr	r3, [pc, #604]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	f003 030c 	and.w	r3, r3, #12
 8000d9e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000da0:	4b94      	ldr	r3, [pc, #592]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0310 	and.w	r3, r3, #16
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f000 80e4 	beq.w	8000f80 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d007      	beq.n	8000dce <HAL_RCC_OscConfig+0x4a>
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	2b0c      	cmp	r3, #12
 8000dc2:	f040 808b 	bne.w	8000edc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	f040 8087 	bne.w	8000edc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000dce:	4b89      	ldr	r3, [pc, #548]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d005      	beq.n	8000de6 <HAL_RCC_OscConfig+0x62>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d101      	bne.n	8000de6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e3a2      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a1a      	ldr	r2, [r3, #32]
 8000dea:	4b82      	ldr	r3, [pc, #520]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 0308 	and.w	r3, r3, #8
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d004      	beq.n	8000e00 <HAL_RCC_OscConfig+0x7c>
 8000df6:	4b7f      	ldr	r3, [pc, #508]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dfe:	e005      	b.n	8000e0c <HAL_RCC_OscConfig+0x88>
 8000e00:	4b7c      	ldr	r3, [pc, #496]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e06:	091b      	lsrs	r3, r3, #4
 8000e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d223      	bcs.n	8000e58 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a1b      	ldr	r3, [r3, #32]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 fd55 	bl	80018c4 <RCC_SetFlashLatencyFromMSIRange>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e383      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e24:	4b73      	ldr	r3, [pc, #460]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a72      	ldr	r2, [pc, #456]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e2a:	f043 0308 	orr.w	r3, r3, #8
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	4b70      	ldr	r3, [pc, #448]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a1b      	ldr	r3, [r3, #32]
 8000e3c:	496d      	ldr	r1, [pc, #436]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e42:	4b6c      	ldr	r3, [pc, #432]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	021b      	lsls	r3, r3, #8
 8000e50:	4968      	ldr	r1, [pc, #416]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e52:	4313      	orrs	r3, r2
 8000e54:	604b      	str	r3, [r1, #4]
 8000e56:	e025      	b.n	8000ea4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e58:	4b66      	ldr	r3, [pc, #408]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a65      	ldr	r2, [pc, #404]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e5e:	f043 0308 	orr.w	r3, r3, #8
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	4b63      	ldr	r3, [pc, #396]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a1b      	ldr	r3, [r3, #32]
 8000e70:	4960      	ldr	r1, [pc, #384]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e72:	4313      	orrs	r3, r2
 8000e74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e76:	4b5f      	ldr	r3, [pc, #380]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	495b      	ldr	r1, [pc, #364]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000e86:	4313      	orrs	r3, r2
 8000e88:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d109      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a1b      	ldr	r3, [r3, #32]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f000 fd15 	bl	80018c4 <RCC_SetFlashLatencyFromMSIRange>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e343      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000ea4:	f000 fc4a 	bl	800173c <HAL_RCC_GetSysClockFreq>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	4b52      	ldr	r3, [pc, #328]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	091b      	lsrs	r3, r3, #4
 8000eb0:	f003 030f 	and.w	r3, r3, #15
 8000eb4:	4950      	ldr	r1, [pc, #320]	; (8000ff8 <HAL_RCC_OscConfig+0x274>)
 8000eb6:	5ccb      	ldrb	r3, [r1, r3]
 8000eb8:	f003 031f 	and.w	r3, r3, #31
 8000ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec0:	4a4e      	ldr	r2, [pc, #312]	; (8000ffc <HAL_RCC_OscConfig+0x278>)
 8000ec2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ec4:	4b4e      	ldr	r3, [pc, #312]	; (8001000 <HAL_RCC_OscConfig+0x27c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fbe7 	bl	800069c <HAL_InitTick>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d052      	beq.n	8000f7e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	e327      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d032      	beq.n	8000f4a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ee4:	4b43      	ldr	r3, [pc, #268]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a42      	ldr	r2, [pc, #264]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ef0:	f7ff fc24 	bl	800073c <HAL_GetTick>
 8000ef4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ef6:	e008      	b.n	8000f0a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ef8:	f7ff fc20 	bl	800073c <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e310      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f0a:	4b3a      	ldr	r3, [pc, #232]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0f0      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f16:	4b37      	ldr	r3, [pc, #220]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a36      	ldr	r2, [pc, #216]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	4b34      	ldr	r3, [pc, #208]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	4931      	ldr	r1, [pc, #196]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000f30:	4313      	orrs	r3, r2
 8000f32:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f34:	4b2f      	ldr	r3, [pc, #188]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	69db      	ldr	r3, [r3, #28]
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	492c      	ldr	r1, [pc, #176]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000f44:	4313      	orrs	r3, r2
 8000f46:	604b      	str	r3, [r1, #4]
 8000f48:	e01a      	b.n	8000f80 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f4a:	4b2a      	ldr	r3, [pc, #168]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a29      	ldr	r2, [pc, #164]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000f50:	f023 0301 	bic.w	r3, r3, #1
 8000f54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f56:	f7ff fbf1 	bl	800073c <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f5e:	f7ff fbed 	bl	800073c <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e2dd      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f70:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1f0      	bne.n	8000f5e <HAL_RCC_OscConfig+0x1da>
 8000f7c:	e000      	b.n	8000f80 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d074      	beq.n	8001076 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	2b08      	cmp	r3, #8
 8000f90:	d005      	beq.n	8000f9e <HAL_RCC_OscConfig+0x21a>
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	2b0c      	cmp	r3, #12
 8000f96:	d10e      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	d10b      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d064      	beq.n	8001074 <HAL_RCC_OscConfig+0x2f0>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d160      	bne.n	8001074 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e2ba      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fbe:	d106      	bne.n	8000fce <HAL_RCC_OscConfig+0x24a>
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	e026      	b.n	800101c <HAL_RCC_OscConfig+0x298>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fd6:	d115      	bne.n	8001004 <HAL_RCC_OscConfig+0x280>
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000fde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a02      	ldr	r2, [pc, #8]	; (8000ff4 <HAL_RCC_OscConfig+0x270>)
 8000fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	e014      	b.n	800101c <HAL_RCC_OscConfig+0x298>
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	08003210 	.word	0x08003210
 8000ffc:	20000000 	.word	0x20000000
 8001000:	20000004 	.word	0x20000004
 8001004:	4ba0      	ldr	r3, [pc, #640]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a9f      	ldr	r2, [pc, #636]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 800100a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	4b9d      	ldr	r3, [pc, #628]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a9c      	ldr	r2, [pc, #624]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800101a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d013      	beq.n	800104c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001024:	f7ff fb8a 	bl	800073c <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800102c:	f7ff fb86 	bl	800073c <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b64      	cmp	r3, #100	; 0x64
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e276      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800103e:	4b92      	ldr	r3, [pc, #584]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0f0      	beq.n	800102c <HAL_RCC_OscConfig+0x2a8>
 800104a:	e014      	b.n	8001076 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800104c:	f7ff fb76 	bl	800073c <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001054:	f7ff fb72 	bl	800073c <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b64      	cmp	r3, #100	; 0x64
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e262      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001066:	4b88      	ldr	r3, [pc, #544]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f0      	bne.n	8001054 <HAL_RCC_OscConfig+0x2d0>
 8001072:	e000      	b.n	8001076 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d060      	beq.n	8001144 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	2b04      	cmp	r3, #4
 8001086:	d005      	beq.n	8001094 <HAL_RCC_OscConfig+0x310>
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	2b0c      	cmp	r3, #12
 800108c:	d119      	bne.n	80010c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d116      	bne.n	80010c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001094:	4b7c      	ldr	r3, [pc, #496]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800109c:	2b00      	cmp	r3, #0
 800109e:	d005      	beq.n	80010ac <HAL_RCC_OscConfig+0x328>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e23f      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ac:	4b76      	ldr	r3, [pc, #472]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	061b      	lsls	r3, r3, #24
 80010ba:	4973      	ldr	r1, [pc, #460]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010c0:	e040      	b.n	8001144 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d023      	beq.n	8001112 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ca:	4b6f      	ldr	r3, [pc, #444]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a6e      	ldr	r2, [pc, #440]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 80010d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d6:	f7ff fb31 	bl	800073c <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010de:	f7ff fb2d 	bl	800073c <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e21d      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010f0:	4b65      	ldr	r3, [pc, #404]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0f0      	beq.n	80010de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fc:	4b62      	ldr	r3, [pc, #392]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	061b      	lsls	r3, r3, #24
 800110a:	495f      	ldr	r1, [pc, #380]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 800110c:	4313      	orrs	r3, r2
 800110e:	604b      	str	r3, [r1, #4]
 8001110:	e018      	b.n	8001144 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001112:	4b5d      	ldr	r3, [pc, #372]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a5c      	ldr	r2, [pc, #368]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800111c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800111e:	f7ff fb0d 	bl	800073c <HAL_GetTick>
 8001122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001126:	f7ff fb09 	bl	800073c <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e1f9      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001138:	4b53      	ldr	r3, [pc, #332]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f0      	bne.n	8001126 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	2b00      	cmp	r3, #0
 800114e:	d03c      	beq.n	80011ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d01c      	beq.n	8001192 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001158:	4b4b      	ldr	r3, [pc, #300]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 800115a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800115e:	4a4a      	ldr	r2, [pc, #296]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001168:	f7ff fae8 	bl	800073c <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001170:	f7ff fae4 	bl	800073c <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e1d4      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001182:	4b41      	ldr	r3, [pc, #260]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0ef      	beq.n	8001170 <HAL_RCC_OscConfig+0x3ec>
 8001190:	e01b      	b.n	80011ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001192:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001198:	4a3b      	ldr	r2, [pc, #236]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 800119a:	f023 0301 	bic.w	r3, r3, #1
 800119e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011a2:	f7ff facb 	bl	800073c <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011aa:	f7ff fac7 	bl	800073c <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e1b7      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011bc:	4b32      	ldr	r3, [pc, #200]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 80011be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1ef      	bne.n	80011aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f000 80a6 	beq.w	8001324 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011dc:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 80011de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d10d      	bne.n	8001204 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 80011ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ec:	4a26      	ldr	r2, [pc, #152]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 80011ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f2:	6593      	str	r3, [r2, #88]	; 0x58
 80011f4:	4b24      	ldr	r3, [pc, #144]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 80011f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001200:	2301      	movs	r3, #1
 8001202:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001204:	4b21      	ldr	r3, [pc, #132]	; (800128c <HAL_RCC_OscConfig+0x508>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120c:	2b00      	cmp	r3, #0
 800120e:	d118      	bne.n	8001242 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001210:	4b1e      	ldr	r3, [pc, #120]	; (800128c <HAL_RCC_OscConfig+0x508>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a1d      	ldr	r2, [pc, #116]	; (800128c <HAL_RCC_OscConfig+0x508>)
 8001216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800121c:	f7ff fa8e 	bl	800073c <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001224:	f7ff fa8a 	bl	800073c <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e17a      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <HAL_RCC_OscConfig+0x508>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0f0      	beq.n	8001224 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d108      	bne.n	800125c <HAL_RCC_OscConfig+0x4d8>
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 800124c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001250:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800125a:	e029      	b.n	80012b0 <HAL_RCC_OscConfig+0x52c>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	2b05      	cmp	r3, #5
 8001262:	d115      	bne.n	8001290 <HAL_RCC_OscConfig+0x50c>
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800126a:	4a07      	ldr	r2, [pc, #28]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 8001276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800127a:	4a03      	ldr	r2, [pc, #12]	; (8001288 <HAL_RCC_OscConfig+0x504>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001284:	e014      	b.n	80012b0 <HAL_RCC_OscConfig+0x52c>
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000
 800128c:	40007000 	.word	0x40007000
 8001290:	4b9c      	ldr	r3, [pc, #624]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 8001292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001296:	4a9b      	ldr	r2, [pc, #620]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 8001298:	f023 0301 	bic.w	r3, r3, #1
 800129c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012a0:	4b98      	ldr	r3, [pc, #608]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 80012a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a6:	4a97      	ldr	r2, [pc, #604]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 80012a8:	f023 0304 	bic.w	r3, r3, #4
 80012ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d016      	beq.n	80012e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b8:	f7ff fa40 	bl	800073c <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012be:	e00a      	b.n	80012d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c0:	f7ff fa3c 	bl	800073c <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e12a      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012d6:	4b8b      	ldr	r3, [pc, #556]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 80012d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0ed      	beq.n	80012c0 <HAL_RCC_OscConfig+0x53c>
 80012e4:	e015      	b.n	8001312 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e6:	f7ff fa29 	bl	800073c <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012ec:	e00a      	b.n	8001304 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ee:	f7ff fa25 	bl	800073c <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e113      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001304:	4b7f      	ldr	r3, [pc, #508]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 8001306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1ed      	bne.n	80012ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001312:	7ffb      	ldrb	r3, [r7, #31]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d105      	bne.n	8001324 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001318:	4b7a      	ldr	r3, [pc, #488]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 800131a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131c:	4a79      	ldr	r2, [pc, #484]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 800131e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001322:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 80fe 	beq.w	800152a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001332:	2b02      	cmp	r3, #2
 8001334:	f040 80d0 	bne.w	80014d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001338:	4b72      	ldr	r3, [pc, #456]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f003 0203 	and.w	r2, r3, #3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001348:	429a      	cmp	r2, r3
 800134a:	d130      	bne.n	80013ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	3b01      	subs	r3, #1
 8001358:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800135a:	429a      	cmp	r2, r3
 800135c:	d127      	bne.n	80013ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001368:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800136a:	429a      	cmp	r2, r3
 800136c:	d11f      	bne.n	80013ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001378:	2a07      	cmp	r2, #7
 800137a:	bf14      	ite	ne
 800137c:	2201      	movne	r2, #1
 800137e:	2200      	moveq	r2, #0
 8001380:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001382:	4293      	cmp	r3, r2
 8001384:	d113      	bne.n	80013ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001390:	085b      	lsrs	r3, r3, #1
 8001392:	3b01      	subs	r3, #1
 8001394:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001396:	429a      	cmp	r2, r3
 8001398:	d109      	bne.n	80013ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	085b      	lsrs	r3, r3, #1
 80013a6:	3b01      	subs	r3, #1
 80013a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d06e      	beq.n	800148c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	2b0c      	cmp	r3, #12
 80013b2:	d069      	beq.n	8001488 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80013b4:	4b53      	ldr	r3, [pc, #332]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d105      	bne.n	80013cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80013c0:	4b50      	ldr	r3, [pc, #320]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e0ad      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013d0:	4b4c      	ldr	r3, [pc, #304]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a4b      	ldr	r2, [pc, #300]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 80013d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013dc:	f7ff f9ae 	bl	800073c <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e4:	f7ff f9aa 	bl	800073c <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e09a      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f6:	4b43      	ldr	r3, [pc, #268]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001402:	4b40      	ldr	r3, [pc, #256]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	4b40      	ldr	r3, [pc, #256]	; (8001508 <HAL_RCC_OscConfig+0x784>)
 8001408:	4013      	ands	r3, r2
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001412:	3a01      	subs	r2, #1
 8001414:	0112      	lsls	r2, r2, #4
 8001416:	4311      	orrs	r1, r2
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800141c:	0212      	lsls	r2, r2, #8
 800141e:	4311      	orrs	r1, r2
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001424:	0852      	lsrs	r2, r2, #1
 8001426:	3a01      	subs	r2, #1
 8001428:	0552      	lsls	r2, r2, #21
 800142a:	4311      	orrs	r1, r2
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001430:	0852      	lsrs	r2, r2, #1
 8001432:	3a01      	subs	r2, #1
 8001434:	0652      	lsls	r2, r2, #25
 8001436:	4311      	orrs	r1, r2
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800143c:	0912      	lsrs	r2, r2, #4
 800143e:	0452      	lsls	r2, r2, #17
 8001440:	430a      	orrs	r2, r1
 8001442:	4930      	ldr	r1, [pc, #192]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 8001444:	4313      	orrs	r3, r2
 8001446:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001448:	4b2e      	ldr	r3, [pc, #184]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a2d      	ldr	r2, [pc, #180]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 800144e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001452:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001454:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	4a2a      	ldr	r2, [pc, #168]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 800145a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800145e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001460:	f7ff f96c 	bl	800073c <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001468:	f7ff f968 	bl	800073c <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e058      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800147a:	4b22      	ldr	r3, [pc, #136]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001486:	e050      	b.n	800152a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e04f      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800148c:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d148      	bne.n	800152a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a19      	ldr	r2, [pc, #100]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 800149e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014a4:	4b17      	ldr	r3, [pc, #92]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	4a16      	ldr	r2, [pc, #88]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 80014aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014b0:	f7ff f944 	bl	800073c <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b8:	f7ff f940 	bl	800073c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e030      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0x734>
 80014d6:	e028      	b.n	800152a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2b0c      	cmp	r3, #12
 80014dc:	d023      	beq.n	8001526 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a08      	ldr	r2, [pc, #32]	; (8001504 <HAL_RCC_OscConfig+0x780>)
 80014e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ea:	f7ff f927 	bl	800073c <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014f0:	e00c      	b.n	800150c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f2:	f7ff f923 	bl	800073c <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d905      	bls.n	800150c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e013      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
 8001504:	40021000 	.word	0x40021000
 8001508:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_RCC_OscConfig+0x7b0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1ec      	bne.n	80014f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_RCC_OscConfig+0x7b0>)
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	4905      	ldr	r1, [pc, #20]	; (8001534 <HAL_RCC_OscConfig+0x7b0>)
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_RCC_OscConfig+0x7b4>)
 8001520:	4013      	ands	r3, r2
 8001522:	60cb      	str	r3, [r1, #12]
 8001524:	e001      	b.n	800152a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3720      	adds	r7, #32
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40021000 	.word	0x40021000
 8001538:	feeefffc 	.word	0xfeeefffc

0800153c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0e7      	b.n	8001720 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001550:	4b75      	ldr	r3, [pc, #468]	; (8001728 <HAL_RCC_ClockConfig+0x1ec>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d910      	bls.n	8001580 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155e:	4b72      	ldr	r3, [pc, #456]	; (8001728 <HAL_RCC_ClockConfig+0x1ec>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 0207 	bic.w	r2, r3, #7
 8001566:	4970      	ldr	r1, [pc, #448]	; (8001728 <HAL_RCC_ClockConfig+0x1ec>)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	4313      	orrs	r3, r2
 800156c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800156e:	4b6e      	ldr	r3, [pc, #440]	; (8001728 <HAL_RCC_ClockConfig+0x1ec>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d001      	beq.n	8001580 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e0cf      	b.n	8001720 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d010      	beq.n	80015ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	4b66      	ldr	r3, [pc, #408]	; (800172c <HAL_RCC_ClockConfig+0x1f0>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001598:	429a      	cmp	r2, r3
 800159a:	d908      	bls.n	80015ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800159c:	4b63      	ldr	r3, [pc, #396]	; (800172c <HAL_RCC_ClockConfig+0x1f0>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	4960      	ldr	r1, [pc, #384]	; (800172c <HAL_RCC_ClockConfig+0x1f0>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d04c      	beq.n	8001654 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b03      	cmp	r3, #3
 80015c0:	d107      	bne.n	80015d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015c2:	4b5a      	ldr	r3, [pc, #360]	; (800172c <HAL_RCC_ClockConfig+0x1f0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d121      	bne.n	8001612 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e0a6      	b.n	8001720 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d107      	bne.n	80015ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015da:	4b54      	ldr	r3, [pc, #336]	; (800172c <HAL_RCC_ClockConfig+0x1f0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d115      	bne.n	8001612 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e09a      	b.n	8001720 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d107      	bne.n	8001602 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015f2:	4b4e      	ldr	r3, [pc, #312]	; (800172c <HAL_RCC_ClockConfig+0x1f0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d109      	bne.n	8001612 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e08e      	b.n	8001720 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001602:	4b4a      	ldr	r3, [pc, #296]	; (800172c <HAL_RCC_ClockConfig+0x1f0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e086      	b.n	8001720 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001612:	4b46      	ldr	r3, [pc, #280]	; (800172c <HAL_RCC_ClockConfig+0x1f0>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f023 0203 	bic.w	r2, r3, #3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	4943      	ldr	r1, [pc, #268]	; (800172c <HAL_RCC_ClockConfig+0x1f0>)
 8001620:	4313      	orrs	r3, r2
 8001622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001624:	f7ff f88a 	bl	800073c <HAL_GetTick>
 8001628:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162a:	e00a      	b.n	8001642 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800162c:	f7ff f886 	bl	800073c <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	f241 3288 	movw	r2, #5000	; 0x1388
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e06e      	b.n	8001720 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001642:	4b3a      	ldr	r3, [pc, #232]	; (800172c <HAL_RCC_ClockConfig+0x1f0>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 020c 	and.w	r2, r3, #12
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	429a      	cmp	r2, r3
 8001652:	d1eb      	bne.n	800162c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d010      	beq.n	8001682 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	4b31      	ldr	r3, [pc, #196]	; (800172c <HAL_RCC_ClockConfig+0x1f0>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800166c:	429a      	cmp	r2, r3
 800166e:	d208      	bcs.n	8001682 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001670:	4b2e      	ldr	r3, [pc, #184]	; (800172c <HAL_RCC_ClockConfig+0x1f0>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	492b      	ldr	r1, [pc, #172]	; (800172c <HAL_RCC_ClockConfig+0x1f0>)
 800167e:	4313      	orrs	r3, r2
 8001680:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001682:	4b29      	ldr	r3, [pc, #164]	; (8001728 <HAL_RCC_ClockConfig+0x1ec>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d210      	bcs.n	80016b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001690:	4b25      	ldr	r3, [pc, #148]	; (8001728 <HAL_RCC_ClockConfig+0x1ec>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f023 0207 	bic.w	r2, r3, #7
 8001698:	4923      	ldr	r1, [pc, #140]	; (8001728 <HAL_RCC_ClockConfig+0x1ec>)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	4313      	orrs	r3, r2
 800169e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a0:	4b21      	ldr	r3, [pc, #132]	; (8001728 <HAL_RCC_ClockConfig+0x1ec>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d001      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e036      	b.n	8001720 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d008      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016be:	4b1b      	ldr	r3, [pc, #108]	; (800172c <HAL_RCC_ClockConfig+0x1f0>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	4918      	ldr	r1, [pc, #96]	; (800172c <HAL_RCC_ClockConfig+0x1f0>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d009      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <HAL_RCC_ClockConfig+0x1f0>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4910      	ldr	r1, [pc, #64]	; (800172c <HAL_RCC_ClockConfig+0x1f0>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016f0:	f000 f824 	bl	800173c <HAL_RCC_GetSysClockFreq>
 80016f4:	4602      	mov	r2, r0
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <HAL_RCC_ClockConfig+0x1f0>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	091b      	lsrs	r3, r3, #4
 80016fc:	f003 030f 	and.w	r3, r3, #15
 8001700:	490b      	ldr	r1, [pc, #44]	; (8001730 <HAL_RCC_ClockConfig+0x1f4>)
 8001702:	5ccb      	ldrb	r3, [r1, r3]
 8001704:	f003 031f 	and.w	r3, r3, #31
 8001708:	fa22 f303 	lsr.w	r3, r2, r3
 800170c:	4a09      	ldr	r2, [pc, #36]	; (8001734 <HAL_RCC_ClockConfig+0x1f8>)
 800170e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <HAL_RCC_ClockConfig+0x1fc>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ffc1 	bl	800069c <HAL_InitTick>
 800171a:	4603      	mov	r3, r0
 800171c:	72fb      	strb	r3, [r7, #11]

  return status;
 800171e:	7afb      	ldrb	r3, [r7, #11]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40022000 	.word	0x40022000
 800172c:	40021000 	.word	0x40021000
 8001730:	08003210 	.word	0x08003210
 8001734:	20000000 	.word	0x20000000
 8001738:	20000004 	.word	0x20000004

0800173c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	; 0x24
 8001740:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	2300      	movs	r3, #0
 8001748:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800174a:	4b3e      	ldr	r3, [pc, #248]	; (8001844 <HAL_RCC_GetSysClockFreq+0x108>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001754:	4b3b      	ldr	r3, [pc, #236]	; (8001844 <HAL_RCC_GetSysClockFreq+0x108>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_RCC_GetSysClockFreq+0x34>
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	2b0c      	cmp	r3, #12
 8001768:	d121      	bne.n	80017ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d11e      	bne.n	80017ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001770:	4b34      	ldr	r3, [pc, #208]	; (8001844 <HAL_RCC_GetSysClockFreq+0x108>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b00      	cmp	r3, #0
 800177a:	d107      	bne.n	800178c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800177c:	4b31      	ldr	r3, [pc, #196]	; (8001844 <HAL_RCC_GetSysClockFreq+0x108>)
 800177e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001782:	0a1b      	lsrs	r3, r3, #8
 8001784:	f003 030f 	and.w	r3, r3, #15
 8001788:	61fb      	str	r3, [r7, #28]
 800178a:	e005      	b.n	8001798 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800178c:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <HAL_RCC_GetSysClockFreq+0x108>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	091b      	lsrs	r3, r3, #4
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001798:	4a2b      	ldr	r2, [pc, #172]	; (8001848 <HAL_RCC_GetSysClockFreq+0x10c>)
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10d      	bne.n	80017c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017ac:	e00a      	b.n	80017c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d102      	bne.n	80017ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017b4:	4b25      	ldr	r3, [pc, #148]	; (800184c <HAL_RCC_GetSysClockFreq+0x110>)
 80017b6:	61bb      	str	r3, [r7, #24]
 80017b8:	e004      	b.n	80017c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017c0:	4b23      	ldr	r3, [pc, #140]	; (8001850 <HAL_RCC_GetSysClockFreq+0x114>)
 80017c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	2b0c      	cmp	r3, #12
 80017c8:	d134      	bne.n	8001834 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017ca:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <HAL_RCC_GetSysClockFreq+0x108>)
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d003      	beq.n	80017e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d003      	beq.n	80017e8 <HAL_RCC_GetSysClockFreq+0xac>
 80017e0:	e005      	b.n	80017ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <HAL_RCC_GetSysClockFreq+0x110>)
 80017e4:	617b      	str	r3, [r7, #20]
      break;
 80017e6:	e005      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017e8:	4b19      	ldr	r3, [pc, #100]	; (8001850 <HAL_RCC_GetSysClockFreq+0x114>)
 80017ea:	617b      	str	r3, [r7, #20]
      break;
 80017ec:	e002      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	617b      	str	r3, [r7, #20]
      break;
 80017f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <HAL_RCC_GetSysClockFreq+0x108>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	091b      	lsrs	r3, r3, #4
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	3301      	adds	r3, #1
 8001800:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <HAL_RCC_GetSysClockFreq+0x108>)
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	0a1b      	lsrs	r3, r3, #8
 8001808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	fb03 f202 	mul.w	r2, r3, r2
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	fbb2 f3f3 	udiv	r3, r2, r3
 8001818:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <HAL_RCC_GetSysClockFreq+0x108>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	0e5b      	lsrs	r3, r3, #25
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	3301      	adds	r3, #1
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001832:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001834:	69bb      	ldr	r3, [r7, #24]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3724      	adds	r7, #36	; 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40021000 	.word	0x40021000
 8001848:	08003228 	.word	0x08003228
 800184c:	00f42400 	.word	0x00f42400
 8001850:	007a1200 	.word	0x007a1200

08001854 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <HAL_RCC_GetHCLKFreq+0x14>)
 800185a:	681b      	ldr	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20000000 	.word	0x20000000

0800186c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001870:	f7ff fff0 	bl	8001854 <HAL_RCC_GetHCLKFreq>
 8001874:	4602      	mov	r2, r0
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	0a1b      	lsrs	r3, r3, #8
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	4904      	ldr	r1, [pc, #16]	; (8001894 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001882:	5ccb      	ldrb	r3, [r1, r3]
 8001884:	f003 031f 	and.w	r3, r3, #31
 8001888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800188c:	4618      	mov	r0, r3
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40021000 	.word	0x40021000
 8001894:	08003220 	.word	0x08003220

08001898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800189c:	f7ff ffda 	bl	8001854 <HAL_RCC_GetHCLKFreq>
 80018a0:	4602      	mov	r2, r0
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	0adb      	lsrs	r3, r3, #11
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	4904      	ldr	r1, [pc, #16]	; (80018c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80018ae:	5ccb      	ldrb	r3, [r1, r3]
 80018b0:	f003 031f 	and.w	r3, r3, #31
 80018b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40021000 	.word	0x40021000
 80018c0:	08003220 	.word	0x08003220

080018c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018d0:	4b2a      	ldr	r3, [pc, #168]	; (800197c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80018dc:	f7ff f9ee 	bl	8000cbc <HAL_PWREx_GetVoltageRange>
 80018e0:	6178      	str	r0, [r7, #20]
 80018e2:	e014      	b.n	800190e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018e4:	4b25      	ldr	r3, [pc, #148]	; (800197c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e8:	4a24      	ldr	r2, [pc, #144]	; (800197c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ee:	6593      	str	r3, [r2, #88]	; 0x58
 80018f0:	4b22      	ldr	r3, [pc, #136]	; (800197c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80018fc:	f7ff f9de 	bl	8000cbc <HAL_PWREx_GetVoltageRange>
 8001900:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001902:	4b1e      	ldr	r3, [pc, #120]	; (800197c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001906:	4a1d      	ldr	r2, [pc, #116]	; (800197c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800190c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001914:	d10b      	bne.n	800192e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b80      	cmp	r3, #128	; 0x80
 800191a:	d919      	bls.n	8001950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2ba0      	cmp	r3, #160	; 0xa0
 8001920:	d902      	bls.n	8001928 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001922:	2302      	movs	r3, #2
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	e013      	b.n	8001950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001928:	2301      	movs	r3, #1
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	e010      	b.n	8001950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b80      	cmp	r3, #128	; 0x80
 8001932:	d902      	bls.n	800193a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001934:	2303      	movs	r3, #3
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	e00a      	b.n	8001950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b80      	cmp	r3, #128	; 0x80
 800193e:	d102      	bne.n	8001946 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001940:	2302      	movs	r3, #2
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	e004      	b.n	8001950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b70      	cmp	r3, #112	; 0x70
 800194a:	d101      	bne.n	8001950 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800194c:	2301      	movs	r3, #1
 800194e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f023 0207 	bic.w	r2, r3, #7
 8001958:	4909      	ldr	r1, [pc, #36]	; (8001980 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001960:	4b07      	ldr	r3, [pc, #28]	; (8001980 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	429a      	cmp	r2, r3
 800196c:	d001      	beq.n	8001972 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40021000 	.word	0x40021000
 8001980:	40022000 	.word	0x40022000

08001984 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800198c:	2300      	movs	r3, #0
 800198e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001990:	2300      	movs	r3, #0
 8001992:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800199c:	2b00      	cmp	r3, #0
 800199e:	d041      	beq.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80019a8:	d02a      	beq.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80019aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80019ae:	d824      	bhi.n	80019fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80019b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80019b4:	d008      	beq.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80019b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80019ba:	d81e      	bhi.n	80019fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00a      	beq.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80019c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019c4:	d010      	beq.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80019c6:	e018      	b.n	80019fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80019c8:	4b86      	ldr	r3, [pc, #536]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	4a85      	ldr	r2, [pc, #532]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80019ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80019d4:	e015      	b.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3304      	adds	r3, #4
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 fabb 	bl	8001f58 <RCCEx_PLLSAI1_Config>
 80019e2:	4603      	mov	r3, r0
 80019e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80019e6:	e00c      	b.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3320      	adds	r3, #32
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 fba6 	bl	8002140 <RCCEx_PLLSAI2_Config>
 80019f4:	4603      	mov	r3, r0
 80019f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80019f8:	e003      	b.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	74fb      	strb	r3, [r7, #19]
      break;
 80019fe:	e000      	b.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001a02:	7cfb      	ldrb	r3, [r7, #19]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10b      	bne.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a08:	4b76      	ldr	r3, [pc, #472]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a16:	4973      	ldr	r1, [pc, #460]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001a1e:	e001      	b.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a20:	7cfb      	ldrb	r3, [r7, #19]
 8001a22:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d041      	beq.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001a38:	d02a      	beq.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001a3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001a3e:	d824      	bhi.n	8001a8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001a40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a44:	d008      	beq.n	8001a58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001a46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a4a:	d81e      	bhi.n	8001a8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00a      	beq.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a54:	d010      	beq.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001a56:	e018      	b.n	8001a8a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001a58:	4b62      	ldr	r3, [pc, #392]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	4a61      	ldr	r2, [pc, #388]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a62:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001a64:	e015      	b.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 fa73 	bl	8001f58 <RCCEx_PLLSAI1_Config>
 8001a72:	4603      	mov	r3, r0
 8001a74:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001a76:	e00c      	b.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3320      	adds	r3, #32
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 fb5e 	bl	8002140 <RCCEx_PLLSAI2_Config>
 8001a84:	4603      	mov	r3, r0
 8001a86:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001a88:	e003      	b.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	74fb      	strb	r3, [r7, #19]
      break;
 8001a8e:	e000      	b.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001a90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001a92:	7cfb      	ldrb	r3, [r7, #19]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10b      	bne.n	8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a98:	4b52      	ldr	r3, [pc, #328]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001aa6:	494f      	ldr	r1, [pc, #316]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001aae:	e001      	b.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ab0:	7cfb      	ldrb	r3, [r7, #19]
 8001ab2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 80a0 	beq.w	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ac6:	4b47      	ldr	r3, [pc, #284]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00d      	beq.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001adc:	4b41      	ldr	r3, [pc, #260]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae0:	4a40      	ldr	r2, [pc, #256]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae8:	4b3e      	ldr	r3, [pc, #248]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001af4:	2301      	movs	r3, #1
 8001af6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001af8:	4b3b      	ldr	r3, [pc, #236]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a3a      	ldr	r2, [pc, #232]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b04:	f7fe fe1a 	bl	800073c <HAL_GetTick>
 8001b08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001b0a:	e009      	b.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b0c:	f7fe fe16 	bl	800073c <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d902      	bls.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	74fb      	strb	r3, [r7, #19]
        break;
 8001b1e:	e005      	b.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001b20:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0ef      	beq.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001b2c:	7cfb      	ldrb	r3, [r7, #19]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d15c      	bne.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b32:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d01f      	beq.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d019      	beq.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b50:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b5c:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b62:	4a20      	ldr	r2, [pc, #128]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b6c:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b72:	4a1c      	ldr	r2, [pc, #112]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001b7c:	4a19      	ldr	r2, [pc, #100]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d016      	beq.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8e:	f7fe fdd5 	bl	800073c <HAL_GetTick>
 8001b92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b94:	e00b      	b.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b96:	f7fe fdd1 	bl	800073c <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d902      	bls.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	74fb      	strb	r3, [r7, #19]
            break;
 8001bac:	e006      	b.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bae:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0ec      	beq.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001bbc:	7cfb      	ldrb	r3, [r7, #19]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bd2:	4904      	ldr	r1, [pc, #16]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001bda:	e009      	b.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001bdc:	7cfb      	ldrb	r3, [r7, #19]
 8001bde:	74bb      	strb	r3, [r7, #18]
 8001be0:	e006      	b.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001be2:	bf00      	nop
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001bec:	7cfb      	ldrb	r3, [r7, #19]
 8001bee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bf0:	7c7b      	ldrb	r3, [r7, #17]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d105      	bne.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf6:	4b9e      	ldr	r3, [pc, #632]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfa:	4a9d      	ldr	r2, [pc, #628]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00a      	beq.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c0e:	4b98      	ldr	r3, [pc, #608]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c14:	f023 0203 	bic.w	r2, r3, #3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1c:	4994      	ldr	r1, [pc, #592]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00a      	beq.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c30:	4b8f      	ldr	r3, [pc, #572]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c36:	f023 020c 	bic.w	r2, r3, #12
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3e:	498c      	ldr	r1, [pc, #560]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00a      	beq.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001c52:	4b87      	ldr	r3, [pc, #540]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	4983      	ldr	r1, [pc, #524]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00a      	beq.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001c74:	4b7e      	ldr	r3, [pc, #504]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	497b      	ldr	r1, [pc, #492]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00a      	beq.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001c96:	4b76      	ldr	r3, [pc, #472]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca4:	4972      	ldr	r1, [pc, #456]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0320 	and.w	r3, r3, #32
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00a      	beq.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001cb8:	4b6d      	ldr	r3, [pc, #436]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc6:	496a      	ldr	r1, [pc, #424]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00a      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001cda:	4b65      	ldr	r3, [pc, #404]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce8:	4961      	ldr	r1, [pc, #388]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00a      	beq.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001cfc:	4b5c      	ldr	r3, [pc, #368]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0a:	4959      	ldr	r1, [pc, #356]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00a      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d1e:	4b54      	ldr	r3, [pc, #336]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d2c:	4950      	ldr	r1, [pc, #320]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00a      	beq.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d40:	4b4b      	ldr	r3, [pc, #300]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4e:	4948      	ldr	r1, [pc, #288]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00a      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d62:	4b43      	ldr	r3, [pc, #268]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d70:	493f      	ldr	r1, [pc, #252]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d028      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d84:	4b3a      	ldr	r3, [pc, #232]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d92:	4937      	ldr	r1, [pc, #220]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001da2:	d106      	bne.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001da4:	4b32      	ldr	r3, [pc, #200]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4a31      	ldr	r2, [pc, #196]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001daa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dae:	60d3      	str	r3, [r2, #12]
 8001db0:	e011      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001db6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001dba:	d10c      	bne.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 f8c8 	bl	8001f58 <RCCEx_PLLSAI1_Config>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001dcc:	7cfb      	ldrb	r3, [r7, #19]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8001dd2:	7cfb      	ldrb	r3, [r7, #19]
 8001dd4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d028      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001de2:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df0:	491f      	ldr	r1, [pc, #124]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e00:	d106      	bne.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e02:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	4a1a      	ldr	r2, [pc, #104]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e0c:	60d3      	str	r3, [r2, #12]
 8001e0e:	e011      	b.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	2101      	movs	r1, #1
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 f899 	bl	8001f58 <RCCEx_PLLSAI1_Config>
 8001e26:	4603      	mov	r3, r0
 8001e28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e2a:	7cfb      	ldrb	r3, [r7, #19]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8001e30:	7cfb      	ldrb	r3, [r7, #19]
 8001e32:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d02b      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e4e:	4908      	ldr	r1, [pc, #32]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e5e:	d109      	bne.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a02      	ldr	r2, [pc, #8]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e6a:	60d3      	str	r3, [r2, #12]
 8001e6c:	e014      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3304      	adds	r3, #4
 8001e82:	2101      	movs	r1, #1
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 f867 	bl	8001f58 <RCCEx_PLLSAI1_Config>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e8e:	7cfb      	ldrb	r3, [r7, #19]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8001e94:	7cfb      	ldrb	r3, [r7, #19]
 8001e96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d02f      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ea4:	4b2b      	ldr	r3, [pc, #172]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eaa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001eb2:	4928      	ldr	r1, [pc, #160]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ebe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ec2:	d10d      	bne.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	2102      	movs	r1, #2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 f844 	bl	8001f58 <RCCEx_PLLSAI1_Config>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001ed4:	7cfb      	ldrb	r3, [r7, #19]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d014      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8001eda:	7cfb      	ldrb	r3, [r7, #19]
 8001edc:	74bb      	strb	r3, [r7, #18]
 8001ede:	e011      	b.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ee8:	d10c      	bne.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3320      	adds	r3, #32
 8001eee:	2102      	movs	r1, #2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 f925 	bl	8002140 <RCCEx_PLLSAI2_Config>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001efa:	7cfb      	ldrb	r3, [r7, #19]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8001f00:	7cfb      	ldrb	r3, [r7, #19]
 8001f02:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00a      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001f10:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f16:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f1e:	490d      	ldr	r1, [pc, #52]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00b      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f42:	4904      	ldr	r1, [pc, #16]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001f4a:	7cbb      	ldrb	r3, [r7, #18]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40021000 	.word	0x40021000

08001f58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f66:	4b75      	ldr	r3, [pc, #468]	; (800213c <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d018      	beq.n	8001fa4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001f72:	4b72      	ldr	r3, [pc, #456]	; (800213c <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f003 0203 	and.w	r2, r3, #3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d10d      	bne.n	8001f9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
       ||
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d009      	beq.n	8001f9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001f8a:	4b6c      	ldr	r3, [pc, #432]	; (800213c <RCCEx_PLLSAI1_Config+0x1e4>)
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	091b      	lsrs	r3, r3, #4
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
       ||
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d047      	beq.n	800202e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	73fb      	strb	r3, [r7, #15]
 8001fa2:	e044      	b.n	800202e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d018      	beq.n	8001fde <RCCEx_PLLSAI1_Config+0x86>
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d825      	bhi.n	8001ffc <RCCEx_PLLSAI1_Config+0xa4>
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d002      	beq.n	8001fba <RCCEx_PLLSAI1_Config+0x62>
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d009      	beq.n	8001fcc <RCCEx_PLLSAI1_Config+0x74>
 8001fb8:	e020      	b.n	8001ffc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001fba:	4b60      	ldr	r3, [pc, #384]	; (800213c <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d11d      	bne.n	8002002 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fca:	e01a      	b.n	8002002 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001fcc:	4b5b      	ldr	r3, [pc, #364]	; (800213c <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d116      	bne.n	8002006 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fdc:	e013      	b.n	8002006 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001fde:	4b57      	ldr	r3, [pc, #348]	; (800213c <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10f      	bne.n	800200a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001fea:	4b54      	ldr	r3, [pc, #336]	; (800213c <RCCEx_PLLSAI1_Config+0x1e4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d109      	bne.n	800200a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001ffa:	e006      	b.n	800200a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8002000:	e004      	b.n	800200c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002002:	bf00      	nop
 8002004:	e002      	b.n	800200c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002006:	bf00      	nop
 8002008:	e000      	b.n	800200c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800200a:	bf00      	nop
    }

    if(status == HAL_OK)
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10d      	bne.n	800202e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002012:	4b4a      	ldr	r3, [pc, #296]	; (800213c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6819      	ldr	r1, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	430b      	orrs	r3, r1
 8002028:	4944      	ldr	r1, [pc, #272]	; (800213c <RCCEx_PLLSAI1_Config+0x1e4>)
 800202a:	4313      	orrs	r3, r2
 800202c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d17d      	bne.n	8002130 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002034:	4b41      	ldr	r3, [pc, #260]	; (800213c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a40      	ldr	r2, [pc, #256]	; (800213c <RCCEx_PLLSAI1_Config+0x1e4>)
 800203a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800203e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002040:	f7fe fb7c 	bl	800073c <HAL_GetTick>
 8002044:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002046:	e009      	b.n	800205c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002048:	f7fe fb78 	bl	800073c <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d902      	bls.n	800205c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	73fb      	strb	r3, [r7, #15]
        break;
 800205a:	e005      	b.n	8002068 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800205c:	4b37      	ldr	r3, [pc, #220]	; (800213c <RCCEx_PLLSAI1_Config+0x1e4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1ef      	bne.n	8002048 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d160      	bne.n	8002130 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d111      	bne.n	8002098 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002074:	4b31      	ldr	r3, [pc, #196]	; (800213c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800207c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6892      	ldr	r2, [r2, #8]
 8002084:	0211      	lsls	r1, r2, #8
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68d2      	ldr	r2, [r2, #12]
 800208a:	0912      	lsrs	r2, r2, #4
 800208c:	0452      	lsls	r2, r2, #17
 800208e:	430a      	orrs	r2, r1
 8002090:	492a      	ldr	r1, [pc, #168]	; (800213c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002092:	4313      	orrs	r3, r2
 8002094:	610b      	str	r3, [r1, #16]
 8002096:	e027      	b.n	80020e8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d112      	bne.n	80020c4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800209e:	4b27      	ldr	r3, [pc, #156]	; (800213c <RCCEx_PLLSAI1_Config+0x1e4>)
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80020a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6892      	ldr	r2, [r2, #8]
 80020ae:	0211      	lsls	r1, r2, #8
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6912      	ldr	r2, [r2, #16]
 80020b4:	0852      	lsrs	r2, r2, #1
 80020b6:	3a01      	subs	r2, #1
 80020b8:	0552      	lsls	r2, r2, #21
 80020ba:	430a      	orrs	r2, r1
 80020bc:	491f      	ldr	r1, [pc, #124]	; (800213c <RCCEx_PLLSAI1_Config+0x1e4>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	610b      	str	r3, [r1, #16]
 80020c2:	e011      	b.n	80020e8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80020c4:	4b1d      	ldr	r3, [pc, #116]	; (800213c <RCCEx_PLLSAI1_Config+0x1e4>)
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80020cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6892      	ldr	r2, [r2, #8]
 80020d4:	0211      	lsls	r1, r2, #8
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6952      	ldr	r2, [r2, #20]
 80020da:	0852      	lsrs	r2, r2, #1
 80020dc:	3a01      	subs	r2, #1
 80020de:	0652      	lsls	r2, r2, #25
 80020e0:	430a      	orrs	r2, r1
 80020e2:	4916      	ldr	r1, [pc, #88]	; (800213c <RCCEx_PLLSAI1_Config+0x1e4>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80020e8:	4b14      	ldr	r3, [pc, #80]	; (800213c <RCCEx_PLLSAI1_Config+0x1e4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a13      	ldr	r2, [pc, #76]	; (800213c <RCCEx_PLLSAI1_Config+0x1e4>)
 80020ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f4:	f7fe fb22 	bl	800073c <HAL_GetTick>
 80020f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80020fa:	e009      	b.n	8002110 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80020fc:	f7fe fb1e 	bl	800073c <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d902      	bls.n	8002110 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	73fb      	strb	r3, [r7, #15]
          break;
 800210e:	e005      	b.n	800211c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002110:	4b0a      	ldr	r3, [pc, #40]	; (800213c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0ef      	beq.n	80020fc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002124:	691a      	ldr	r2, [r3, #16]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	4904      	ldr	r1, [pc, #16]	; (800213c <RCCEx_PLLSAI1_Config+0x1e4>)
 800212c:	4313      	orrs	r3, r2
 800212e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002130:	7bfb      	ldrb	r3, [r7, #15]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40021000 	.word	0x40021000

08002140 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800214e:	4b6a      	ldr	r3, [pc, #424]	; (80022f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d018      	beq.n	800218c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800215a:	4b67      	ldr	r3, [pc, #412]	; (80022f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f003 0203 	and.w	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d10d      	bne.n	8002186 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
       ||
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002172:	4b61      	ldr	r3, [pc, #388]	; (80022f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	091b      	lsrs	r3, r3, #4
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
       ||
 8002182:	429a      	cmp	r2, r3
 8002184:	d047      	beq.n	8002216 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	73fb      	strb	r3, [r7, #15]
 800218a:	e044      	b.n	8002216 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b03      	cmp	r3, #3
 8002192:	d018      	beq.n	80021c6 <RCCEx_PLLSAI2_Config+0x86>
 8002194:	2b03      	cmp	r3, #3
 8002196:	d825      	bhi.n	80021e4 <RCCEx_PLLSAI2_Config+0xa4>
 8002198:	2b01      	cmp	r3, #1
 800219a:	d002      	beq.n	80021a2 <RCCEx_PLLSAI2_Config+0x62>
 800219c:	2b02      	cmp	r3, #2
 800219e:	d009      	beq.n	80021b4 <RCCEx_PLLSAI2_Config+0x74>
 80021a0:	e020      	b.n	80021e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80021a2:	4b55      	ldr	r3, [pc, #340]	; (80022f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d11d      	bne.n	80021ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b2:	e01a      	b.n	80021ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80021b4:	4b50      	ldr	r3, [pc, #320]	; (80022f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d116      	bne.n	80021ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021c4:	e013      	b.n	80021ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80021c6:	4b4c      	ldr	r3, [pc, #304]	; (80022f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10f      	bne.n	80021f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80021d2:	4b49      	ldr	r3, [pc, #292]	; (80022f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d109      	bne.n	80021f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80021e2:	e006      	b.n	80021f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
      break;
 80021e8:	e004      	b.n	80021f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80021ea:	bf00      	nop
 80021ec:	e002      	b.n	80021f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80021ee:	bf00      	nop
 80021f0:	e000      	b.n	80021f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80021f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10d      	bne.n	8002216 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80021fa:	4b3f      	ldr	r3, [pc, #252]	; (80022f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6819      	ldr	r1, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	430b      	orrs	r3, r1
 8002210:	4939      	ldr	r1, [pc, #228]	; (80022f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002212:	4313      	orrs	r3, r2
 8002214:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d167      	bne.n	80022ec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800221c:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a35      	ldr	r2, [pc, #212]	; (80022f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002226:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002228:	f7fe fa88 	bl	800073c <HAL_GetTick>
 800222c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800222e:	e009      	b.n	8002244 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002230:	f7fe fa84 	bl	800073c <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d902      	bls.n	8002244 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	73fb      	strb	r3, [r7, #15]
        break;
 8002242:	e005      	b.n	8002250 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002244:	4b2c      	ldr	r3, [pc, #176]	; (80022f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1ef      	bne.n	8002230 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d14a      	bne.n	80022ec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d111      	bne.n	8002280 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800225c:	4b26      	ldr	r3, [pc, #152]	; (80022f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6892      	ldr	r2, [r2, #8]
 800226c:	0211      	lsls	r1, r2, #8
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68d2      	ldr	r2, [r2, #12]
 8002272:	0912      	lsrs	r2, r2, #4
 8002274:	0452      	lsls	r2, r2, #17
 8002276:	430a      	orrs	r2, r1
 8002278:	491f      	ldr	r1, [pc, #124]	; (80022f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800227a:	4313      	orrs	r3, r2
 800227c:	614b      	str	r3, [r1, #20]
 800227e:	e011      	b.n	80022a4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002280:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002288:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6892      	ldr	r2, [r2, #8]
 8002290:	0211      	lsls	r1, r2, #8
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6912      	ldr	r2, [r2, #16]
 8002296:	0852      	lsrs	r2, r2, #1
 8002298:	3a01      	subs	r2, #1
 800229a:	0652      	lsls	r2, r2, #25
 800229c:	430a      	orrs	r2, r1
 800229e:	4916      	ldr	r1, [pc, #88]	; (80022f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80022a4:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a13      	ldr	r2, [pc, #76]	; (80022f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b0:	f7fe fa44 	bl	800073c <HAL_GetTick>
 80022b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80022b6:	e009      	b.n	80022cc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80022b8:	f7fe fa40 	bl	800073c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d902      	bls.n	80022cc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	73fb      	strb	r3, [r7, #15]
          break;
 80022ca:	e005      	b.n	80022d8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80022cc:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0ef      	beq.n	80022b8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d106      	bne.n	80022ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022e0:	695a      	ldr	r2, [r3, #20]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	4904      	ldr	r1, [pc, #16]	; (80022f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40021000 	.word	0x40021000

080022fc <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e03c      	b.n	8002388 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d106      	bne.n	8002328 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7fe f83a 	bl	800039c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0201 	bic.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f909 	bl	8002558 <USART_SetConfig>
 8002346:	4603      	mov	r3, r0
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e01b      	b.n	8002388 <HAL_USART_Init+0x8c>

  /* In Synchronous SPI mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800235e:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800236e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 fa3f 	bl	8002804 <USART_CheckIdleState>
 8002386:	4603      	mov	r3, r0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08a      	sub	sp, #40	; 0x28
 8002394:	af02      	add	r7, sp, #8
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	4613      	mov	r3, r2
 800239e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	f040 809a 	bne.w	80024e2 <HAL_USART_Transmit+0x152>
  {
    if ((pTxData == NULL) || (Size == 0U))
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <HAL_USART_Transmit+0x2a>
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e092      	b.n	80024e4 <HAL_USART_Transmit+0x154>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_USART_Transmit+0x3c>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e08b      	b.n	80024e4 <HAL_USART_Transmit+0x154>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2212      	movs	r2, #18
 80023de:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023e2:	f7fe f9ab 	bl	800073c <HAL_GetTick>
 80023e6:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	88fa      	ldrh	r2, [r7, #6]
 80023ec:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	88fa      	ldrh	r2, [r7, #6]
 80023f2:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023fc:	d108      	bne.n	8002410 <HAL_USART_Transmit+0x80>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d104      	bne.n	8002410 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	61bb      	str	r3, [r7, #24]
 800240e:	e003      	b.n	8002418 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8002414:	2300      	movs	r3, #0
 8002416:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8002418:	e02b      	b.n	8002472 <HAL_USART_Transmit+0xe2>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2200      	movs	r2, #0
 8002422:	2180      	movs	r1, #128	; 0x80
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 f861 	bl	80024ec <USART_WaitOnFlagUntilTimeout>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e057      	b.n	80024e4 <HAL_USART_Transmit+0x154>
      }
      if (ptxdata8bits == NULL)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10b      	bne.n	8002452 <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	881a      	ldrh	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002446:	b292      	uxth	r2, r2
 8002448:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	3302      	adds	r3, #2
 800244e:	61bb      	str	r3, [r7, #24]
 8002450:	e008      	b.n	8002464 <HAL_USART_Transmit+0xd4>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	781a      	ldrb	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	b292      	uxth	r2, r2
 800245c:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3301      	adds	r3, #1
 8002462:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002476:	b29b      	uxth	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ce      	bne.n	800241a <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	2200      	movs	r2, #0
 8002484:	2140      	movs	r1, #64	; 0x40
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 f830 	bl	80024ec <USART_WaitOnFlagUntilTimeout>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_USART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e026      	b.n	80024e4 <HAL_USART_Transmit+0x154>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2240      	movs	r2, #64	; 0x40
 800249c:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2208      	movs	r2, #8
 80024a4:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	8b1b      	ldrh	r3, [r3, #24]
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0208 	orr.w	r2, r2, #8
 80024b6:	b292      	uxth	r2, r2
 80024b8:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	8b1b      	ldrh	r3, [r3, #24]
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0210 	orr.w	r2, r2, #16
 80024ca:	b292      	uxth	r2, r2
 80024cc:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	e000      	b.n	80024e4 <HAL_USART_Transmit+0x154>
  }
  else
  {
    return HAL_BUSY;
 80024e2:	2302      	movs	r3, #2
  }
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3720      	adds	r7, #32
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	4613      	mov	r3, r2
 80024fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80024fc:	e018      	b.n	8002530 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002504:	d014      	beq.n	8002530 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002506:	f7fe f919 	bl	800073c <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	429a      	cmp	r2, r3
 8002514:	d302      	bcc.n	800251c <USART_WaitOnFlagUntilTimeout+0x30>
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d109      	bne.n	8002530 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e00f      	b.n	8002550 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	69da      	ldr	r2, [r3, #28]
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	4013      	ands	r3, r2
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	429a      	cmp	r2, r3
 800253e:	bf0c      	ite	eq
 8002540:	2301      	moveq	r3, #1
 8002542:	2300      	movne	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	429a      	cmp	r2, r3
 800254c:	d0d7      	beq.n	80024fe <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8002564:	2300      	movs	r3, #0
 8002566:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	4313      	orrs	r3, r2
 8002578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800257c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b9a      	ldr	r3, [pc, #616]	; (80027f0 <USART_SetConfig+0x298>)
 8002586:	4013      	ands	r3, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	6979      	ldr	r1, [r7, #20]
 800258e:	430b      	orrs	r3, r1
 8002590:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in USART Synchronous SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8002592:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002596:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	4313      	orrs	r3, r2
 80025a0:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699a      	ldr	r2, [r3, #24]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a87      	ldr	r2, [pc, #540]	; (80027f4 <USART_SetConfig+0x29c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d121      	bne.n	800261e <USART_SetConfig+0xc6>
 80025da:	4b87      	ldr	r3, [pc, #540]	; (80027f8 <USART_SetConfig+0x2a0>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d817      	bhi.n	8002618 <USART_SetConfig+0xc0>
 80025e8:	a201      	add	r2, pc, #4	; (adr r2, 80025f0 <USART_SetConfig+0x98>)
 80025ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ee:	bf00      	nop
 80025f0:	08002601 	.word	0x08002601
 80025f4:	0800260d 	.word	0x0800260d
 80025f8:	08002607 	.word	0x08002607
 80025fc:	08002613 	.word	0x08002613
 8002600:	2301      	movs	r3, #1
 8002602:	77fb      	strb	r3, [r7, #31]
 8002604:	e06b      	b.n	80026de <USART_SetConfig+0x186>
 8002606:	2302      	movs	r3, #2
 8002608:	77fb      	strb	r3, [r7, #31]
 800260a:	e068      	b.n	80026de <USART_SetConfig+0x186>
 800260c:	2304      	movs	r3, #4
 800260e:	77fb      	strb	r3, [r7, #31]
 8002610:	e065      	b.n	80026de <USART_SetConfig+0x186>
 8002612:	2308      	movs	r3, #8
 8002614:	77fb      	strb	r3, [r7, #31]
 8002616:	e062      	b.n	80026de <USART_SetConfig+0x186>
 8002618:	2310      	movs	r3, #16
 800261a:	77fb      	strb	r3, [r7, #31]
 800261c:	e05f      	b.n	80026de <USART_SetConfig+0x186>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a76      	ldr	r2, [pc, #472]	; (80027fc <USART_SetConfig+0x2a4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d132      	bne.n	800268e <USART_SetConfig+0x136>
 8002628:	4b73      	ldr	r3, [pc, #460]	; (80027f8 <USART_SetConfig+0x2a0>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b0c      	cmp	r3, #12
 8002634:	d828      	bhi.n	8002688 <USART_SetConfig+0x130>
 8002636:	a201      	add	r2, pc, #4	; (adr r2, 800263c <USART_SetConfig+0xe4>)
 8002638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263c:	08002671 	.word	0x08002671
 8002640:	08002689 	.word	0x08002689
 8002644:	08002689 	.word	0x08002689
 8002648:	08002689 	.word	0x08002689
 800264c:	0800267d 	.word	0x0800267d
 8002650:	08002689 	.word	0x08002689
 8002654:	08002689 	.word	0x08002689
 8002658:	08002689 	.word	0x08002689
 800265c:	08002677 	.word	0x08002677
 8002660:	08002689 	.word	0x08002689
 8002664:	08002689 	.word	0x08002689
 8002668:	08002689 	.word	0x08002689
 800266c:	08002683 	.word	0x08002683
 8002670:	2300      	movs	r3, #0
 8002672:	77fb      	strb	r3, [r7, #31]
 8002674:	e033      	b.n	80026de <USART_SetConfig+0x186>
 8002676:	2302      	movs	r3, #2
 8002678:	77fb      	strb	r3, [r7, #31]
 800267a:	e030      	b.n	80026de <USART_SetConfig+0x186>
 800267c:	2304      	movs	r3, #4
 800267e:	77fb      	strb	r3, [r7, #31]
 8002680:	e02d      	b.n	80026de <USART_SetConfig+0x186>
 8002682:	2308      	movs	r3, #8
 8002684:	77fb      	strb	r3, [r7, #31]
 8002686:	e02a      	b.n	80026de <USART_SetConfig+0x186>
 8002688:	2310      	movs	r3, #16
 800268a:	77fb      	strb	r3, [r7, #31]
 800268c:	e027      	b.n	80026de <USART_SetConfig+0x186>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a5b      	ldr	r2, [pc, #364]	; (8002800 <USART_SetConfig+0x2a8>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d120      	bne.n	80026da <USART_SetConfig+0x182>
 8002698:	4b57      	ldr	r3, [pc, #348]	; (80027f8 <USART_SetConfig+0x2a0>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80026a2:	2b30      	cmp	r3, #48	; 0x30
 80026a4:	d013      	beq.n	80026ce <USART_SetConfig+0x176>
 80026a6:	2b30      	cmp	r3, #48	; 0x30
 80026a8:	d814      	bhi.n	80026d4 <USART_SetConfig+0x17c>
 80026aa:	2b20      	cmp	r3, #32
 80026ac:	d009      	beq.n	80026c2 <USART_SetConfig+0x16a>
 80026ae:	2b20      	cmp	r3, #32
 80026b0:	d810      	bhi.n	80026d4 <USART_SetConfig+0x17c>
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <USART_SetConfig+0x164>
 80026b6:	2b10      	cmp	r3, #16
 80026b8:	d006      	beq.n	80026c8 <USART_SetConfig+0x170>
 80026ba:	e00b      	b.n	80026d4 <USART_SetConfig+0x17c>
 80026bc:	2300      	movs	r3, #0
 80026be:	77fb      	strb	r3, [r7, #31]
 80026c0:	e00d      	b.n	80026de <USART_SetConfig+0x186>
 80026c2:	2302      	movs	r3, #2
 80026c4:	77fb      	strb	r3, [r7, #31]
 80026c6:	e00a      	b.n	80026de <USART_SetConfig+0x186>
 80026c8:	2304      	movs	r3, #4
 80026ca:	77fb      	strb	r3, [r7, #31]
 80026cc:	e007      	b.n	80026de <USART_SetConfig+0x186>
 80026ce:	2308      	movs	r3, #8
 80026d0:	77fb      	strb	r3, [r7, #31]
 80026d2:	e004      	b.n	80026de <USART_SetConfig+0x186>
 80026d4:	2310      	movs	r3, #16
 80026d6:	77fb      	strb	r3, [r7, #31]
 80026d8:	e001      	b.n	80026de <USART_SetConfig+0x186>
 80026da:	2310      	movs	r3, #16
 80026dc:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 80026de:	7ffb      	ldrb	r3, [r7, #31]
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d85a      	bhi.n	800279a <USART_SetConfig+0x242>
 80026e4:	a201      	add	r2, pc, #4	; (adr r2, 80026ec <USART_SetConfig+0x194>)
 80026e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ea:	bf00      	nop
 80026ec:	08002711 	.word	0x08002711
 80026f0:	0800272f 	.word	0x0800272f
 80026f4:	0800274d 	.word	0x0800274d
 80026f8:	0800279b 	.word	0x0800279b
 80026fc:	08002767 	.word	0x08002767
 8002700:	0800279b 	.word	0x0800279b
 8002704:	0800279b 	.word	0x0800279b
 8002708:	0800279b 	.word	0x0800279b
 800270c:	08002785 	.word	0x08002785
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8002710:	f7ff f8ac 	bl	800186c <HAL_RCC_GetPCLK1Freq>
 8002714:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	005a      	lsls	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	085b      	lsrs	r3, r3, #1
 8002720:	441a      	add	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	fbb2 f3f3 	udiv	r3, r2, r3
 800272a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800272c:	e038      	b.n	80027a0 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800272e:	f7ff f8b3 	bl	8001898 <HAL_RCC_GetPCLK2Freq>
 8002732:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	005a      	lsls	r2, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	085b      	lsrs	r3, r3, #1
 800273e:	441a      	add	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	fbb2 f3f3 	udiv	r3, r2, r3
 8002748:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800274a:	e029      	b.n	80027a0 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	085b      	lsrs	r3, r3, #1
 8002752:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002756:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6852      	ldr	r2, [r2, #4]
 800275e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8002764:	e01c      	b.n	80027a0 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8002766:	f7fe ffe9 	bl	800173c <HAL_RCC_GetSysClockFreq>
 800276a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	005a      	lsls	r2, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	085b      	lsrs	r3, r3, #1
 8002776:	441a      	add	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002780:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8002782:	e00d      	b.n	80027a0 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	085b      	lsrs	r3, r3, #1
 800278a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	fbb2 f3f3 	udiv	r3, r2, r3
 8002796:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8002798:	e002      	b.n	80027a0 <USART_SetConfig+0x248>
    default:
      ret = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	77bb      	strb	r3, [r7, #30]
      break;
 800279e:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2b0f      	cmp	r3, #15
 80027a4:	d916      	bls.n	80027d4 <USART_SetConfig+0x27c>
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ac:	d212      	bcs.n	80027d4 <USART_SetConfig+0x27c>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	f023 030f 	bic.w	r3, r3, #15
 80027b6:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	085b      	lsrs	r3, r3, #1
 80027bc:	b29b      	uxth	r3, r3
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	89fb      	ldrh	r3, [r7, #14]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	89fa      	ldrh	r2, [r7, #14]
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	e001      	b.n	80027d8 <USART_SetConfig+0x280>
  }
  else
  {
    ret = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 80027e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3720      	adds	r7, #32
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	efff69f3 	.word	0xefff69f3
 80027f4:	40013800 	.word	0x40013800
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40004400 	.word	0x40004400
 8002800:	40004800 	.word	0x40004800

08002804 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af02      	add	r7, sp, #8
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002812:	f7fd ff93 	bl	800073c <HAL_GetTick>
 8002816:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b08      	cmp	r3, #8
 8002824:	d10e      	bne.n	8002844 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8002826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff fe59 	bl	80024ec <USART_WaitOnFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e01e      	b.n	8002882 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	2b04      	cmp	r3, #4
 8002850:	d10e      	bne.n	8002870 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8002852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff fe43 	bl	80024ec <USART_WaitOnFlagUntilTimeout>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e008      	b.n	8002882 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <std>:
 800288c:	2300      	movs	r3, #0
 800288e:	b510      	push	{r4, lr}
 8002890:	4604      	mov	r4, r0
 8002892:	e9c0 3300 	strd	r3, r3, [r0]
 8002896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800289a:	6083      	str	r3, [r0, #8]
 800289c:	8181      	strh	r1, [r0, #12]
 800289e:	6643      	str	r3, [r0, #100]	; 0x64
 80028a0:	81c2      	strh	r2, [r0, #14]
 80028a2:	6183      	str	r3, [r0, #24]
 80028a4:	4619      	mov	r1, r3
 80028a6:	2208      	movs	r2, #8
 80028a8:	305c      	adds	r0, #92	; 0x5c
 80028aa:	f000 f9e5 	bl	8002c78 <memset>
 80028ae:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <std+0x58>)
 80028b0:	6263      	str	r3, [r4, #36]	; 0x24
 80028b2:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <std+0x5c>)
 80028b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80028b6:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <std+0x60>)
 80028b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80028ba:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <std+0x64>)
 80028bc:	6323      	str	r3, [r4, #48]	; 0x30
 80028be:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <std+0x68>)
 80028c0:	6224      	str	r4, [r4, #32]
 80028c2:	429c      	cmp	r4, r3
 80028c4:	d006      	beq.n	80028d4 <std+0x48>
 80028c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80028ca:	4294      	cmp	r4, r2
 80028cc:	d002      	beq.n	80028d4 <std+0x48>
 80028ce:	33d0      	adds	r3, #208	; 0xd0
 80028d0:	429c      	cmp	r4, r3
 80028d2:	d105      	bne.n	80028e0 <std+0x54>
 80028d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80028d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028dc:	f000 ba44 	b.w	8002d68 <__retarget_lock_init_recursive>
 80028e0:	bd10      	pop	{r4, pc}
 80028e2:	bf00      	nop
 80028e4:	08002ac9 	.word	0x08002ac9
 80028e8:	08002aeb 	.word	0x08002aeb
 80028ec:	08002b23 	.word	0x08002b23
 80028f0:	08002b47 	.word	0x08002b47
 80028f4:	200000dc 	.word	0x200000dc

080028f8 <stdio_exit_handler>:
 80028f8:	4a02      	ldr	r2, [pc, #8]	; (8002904 <stdio_exit_handler+0xc>)
 80028fa:	4903      	ldr	r1, [pc, #12]	; (8002908 <stdio_exit_handler+0x10>)
 80028fc:	4803      	ldr	r0, [pc, #12]	; (800290c <stdio_exit_handler+0x14>)
 80028fe:	f000 b869 	b.w	80029d4 <_fwalk_sglue>
 8002902:	bf00      	nop
 8002904:	2000000c 	.word	0x2000000c
 8002908:	0800306d 	.word	0x0800306d
 800290c:	20000018 	.word	0x20000018

08002910 <cleanup_stdio>:
 8002910:	6841      	ldr	r1, [r0, #4]
 8002912:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <cleanup_stdio+0x34>)
 8002914:	4299      	cmp	r1, r3
 8002916:	b510      	push	{r4, lr}
 8002918:	4604      	mov	r4, r0
 800291a:	d001      	beq.n	8002920 <cleanup_stdio+0x10>
 800291c:	f000 fba6 	bl	800306c <_fflush_r>
 8002920:	68a1      	ldr	r1, [r4, #8]
 8002922:	4b09      	ldr	r3, [pc, #36]	; (8002948 <cleanup_stdio+0x38>)
 8002924:	4299      	cmp	r1, r3
 8002926:	d002      	beq.n	800292e <cleanup_stdio+0x1e>
 8002928:	4620      	mov	r0, r4
 800292a:	f000 fb9f 	bl	800306c <_fflush_r>
 800292e:	68e1      	ldr	r1, [r4, #12]
 8002930:	4b06      	ldr	r3, [pc, #24]	; (800294c <cleanup_stdio+0x3c>)
 8002932:	4299      	cmp	r1, r3
 8002934:	d004      	beq.n	8002940 <cleanup_stdio+0x30>
 8002936:	4620      	mov	r0, r4
 8002938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800293c:	f000 bb96 	b.w	800306c <_fflush_r>
 8002940:	bd10      	pop	{r4, pc}
 8002942:	bf00      	nop
 8002944:	200000dc 	.word	0x200000dc
 8002948:	20000144 	.word	0x20000144
 800294c:	200001ac 	.word	0x200001ac

08002950 <global_stdio_init.part.0>:
 8002950:	b510      	push	{r4, lr}
 8002952:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <global_stdio_init.part.0+0x30>)
 8002954:	4c0b      	ldr	r4, [pc, #44]	; (8002984 <global_stdio_init.part.0+0x34>)
 8002956:	4a0c      	ldr	r2, [pc, #48]	; (8002988 <global_stdio_init.part.0+0x38>)
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	4620      	mov	r0, r4
 800295c:	2200      	movs	r2, #0
 800295e:	2104      	movs	r1, #4
 8002960:	f7ff ff94 	bl	800288c <std>
 8002964:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002968:	2201      	movs	r2, #1
 800296a:	2109      	movs	r1, #9
 800296c:	f7ff ff8e 	bl	800288c <std>
 8002970:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002974:	2202      	movs	r2, #2
 8002976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800297a:	2112      	movs	r1, #18
 800297c:	f7ff bf86 	b.w	800288c <std>
 8002980:	20000214 	.word	0x20000214
 8002984:	200000dc 	.word	0x200000dc
 8002988:	080028f9 	.word	0x080028f9

0800298c <__sfp_lock_acquire>:
 800298c:	4801      	ldr	r0, [pc, #4]	; (8002994 <__sfp_lock_acquire+0x8>)
 800298e:	f000 b9ec 	b.w	8002d6a <__retarget_lock_acquire_recursive>
 8002992:	bf00      	nop
 8002994:	2000021d 	.word	0x2000021d

08002998 <__sfp_lock_release>:
 8002998:	4801      	ldr	r0, [pc, #4]	; (80029a0 <__sfp_lock_release+0x8>)
 800299a:	f000 b9e7 	b.w	8002d6c <__retarget_lock_release_recursive>
 800299e:	bf00      	nop
 80029a0:	2000021d 	.word	0x2000021d

080029a4 <__sinit>:
 80029a4:	b510      	push	{r4, lr}
 80029a6:	4604      	mov	r4, r0
 80029a8:	f7ff fff0 	bl	800298c <__sfp_lock_acquire>
 80029ac:	6a23      	ldr	r3, [r4, #32]
 80029ae:	b11b      	cbz	r3, 80029b8 <__sinit+0x14>
 80029b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029b4:	f7ff bff0 	b.w	8002998 <__sfp_lock_release>
 80029b8:	4b04      	ldr	r3, [pc, #16]	; (80029cc <__sinit+0x28>)
 80029ba:	6223      	str	r3, [r4, #32]
 80029bc:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <__sinit+0x2c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1f5      	bne.n	80029b0 <__sinit+0xc>
 80029c4:	f7ff ffc4 	bl	8002950 <global_stdio_init.part.0>
 80029c8:	e7f2      	b.n	80029b0 <__sinit+0xc>
 80029ca:	bf00      	nop
 80029cc:	08002911 	.word	0x08002911
 80029d0:	20000214 	.word	0x20000214

080029d4 <_fwalk_sglue>:
 80029d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029d8:	4607      	mov	r7, r0
 80029da:	4688      	mov	r8, r1
 80029dc:	4614      	mov	r4, r2
 80029de:	2600      	movs	r6, #0
 80029e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80029e4:	f1b9 0901 	subs.w	r9, r9, #1
 80029e8:	d505      	bpl.n	80029f6 <_fwalk_sglue+0x22>
 80029ea:	6824      	ldr	r4, [r4, #0]
 80029ec:	2c00      	cmp	r4, #0
 80029ee:	d1f7      	bne.n	80029e0 <_fwalk_sglue+0xc>
 80029f0:	4630      	mov	r0, r6
 80029f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029f6:	89ab      	ldrh	r3, [r5, #12]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d907      	bls.n	8002a0c <_fwalk_sglue+0x38>
 80029fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a00:	3301      	adds	r3, #1
 8002a02:	d003      	beq.n	8002a0c <_fwalk_sglue+0x38>
 8002a04:	4629      	mov	r1, r5
 8002a06:	4638      	mov	r0, r7
 8002a08:	47c0      	blx	r8
 8002a0a:	4306      	orrs	r6, r0
 8002a0c:	3568      	adds	r5, #104	; 0x68
 8002a0e:	e7e9      	b.n	80029e4 <_fwalk_sglue+0x10>

08002a10 <_puts_r>:
 8002a10:	6a03      	ldr	r3, [r0, #32]
 8002a12:	b570      	push	{r4, r5, r6, lr}
 8002a14:	6884      	ldr	r4, [r0, #8]
 8002a16:	4605      	mov	r5, r0
 8002a18:	460e      	mov	r6, r1
 8002a1a:	b90b      	cbnz	r3, 8002a20 <_puts_r+0x10>
 8002a1c:	f7ff ffc2 	bl	80029a4 <__sinit>
 8002a20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a22:	07db      	lsls	r3, r3, #31
 8002a24:	d405      	bmi.n	8002a32 <_puts_r+0x22>
 8002a26:	89a3      	ldrh	r3, [r4, #12]
 8002a28:	0598      	lsls	r0, r3, #22
 8002a2a:	d402      	bmi.n	8002a32 <_puts_r+0x22>
 8002a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a2e:	f000 f99c 	bl	8002d6a <__retarget_lock_acquire_recursive>
 8002a32:	89a3      	ldrh	r3, [r4, #12]
 8002a34:	0719      	lsls	r1, r3, #28
 8002a36:	d513      	bpl.n	8002a60 <_puts_r+0x50>
 8002a38:	6923      	ldr	r3, [r4, #16]
 8002a3a:	b18b      	cbz	r3, 8002a60 <_puts_r+0x50>
 8002a3c:	3e01      	subs	r6, #1
 8002a3e:	68a3      	ldr	r3, [r4, #8]
 8002a40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002a44:	3b01      	subs	r3, #1
 8002a46:	60a3      	str	r3, [r4, #8]
 8002a48:	b9e9      	cbnz	r1, 8002a86 <_puts_r+0x76>
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	da2e      	bge.n	8002aac <_puts_r+0x9c>
 8002a4e:	4622      	mov	r2, r4
 8002a50:	210a      	movs	r1, #10
 8002a52:	4628      	mov	r0, r5
 8002a54:	f000 f87b 	bl	8002b4e <__swbuf_r>
 8002a58:	3001      	adds	r0, #1
 8002a5a:	d007      	beq.n	8002a6c <_puts_r+0x5c>
 8002a5c:	250a      	movs	r5, #10
 8002a5e:	e007      	b.n	8002a70 <_puts_r+0x60>
 8002a60:	4621      	mov	r1, r4
 8002a62:	4628      	mov	r0, r5
 8002a64:	f000 f8b0 	bl	8002bc8 <__swsetup_r>
 8002a68:	2800      	cmp	r0, #0
 8002a6a:	d0e7      	beq.n	8002a3c <_puts_r+0x2c>
 8002a6c:	f04f 35ff 	mov.w	r5, #4294967295
 8002a70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a72:	07da      	lsls	r2, r3, #31
 8002a74:	d405      	bmi.n	8002a82 <_puts_r+0x72>
 8002a76:	89a3      	ldrh	r3, [r4, #12]
 8002a78:	059b      	lsls	r3, r3, #22
 8002a7a:	d402      	bmi.n	8002a82 <_puts_r+0x72>
 8002a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a7e:	f000 f975 	bl	8002d6c <__retarget_lock_release_recursive>
 8002a82:	4628      	mov	r0, r5
 8002a84:	bd70      	pop	{r4, r5, r6, pc}
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	da04      	bge.n	8002a94 <_puts_r+0x84>
 8002a8a:	69a2      	ldr	r2, [r4, #24]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	dc06      	bgt.n	8002a9e <_puts_r+0x8e>
 8002a90:	290a      	cmp	r1, #10
 8002a92:	d004      	beq.n	8002a9e <_puts_r+0x8e>
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	6022      	str	r2, [r4, #0]
 8002a9a:	7019      	strb	r1, [r3, #0]
 8002a9c:	e7cf      	b.n	8002a3e <_puts_r+0x2e>
 8002a9e:	4622      	mov	r2, r4
 8002aa0:	4628      	mov	r0, r5
 8002aa2:	f000 f854 	bl	8002b4e <__swbuf_r>
 8002aa6:	3001      	adds	r0, #1
 8002aa8:	d1c9      	bne.n	8002a3e <_puts_r+0x2e>
 8002aaa:	e7df      	b.n	8002a6c <_puts_r+0x5c>
 8002aac:	6823      	ldr	r3, [r4, #0]
 8002aae:	250a      	movs	r5, #10
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	6022      	str	r2, [r4, #0]
 8002ab4:	701d      	strb	r5, [r3, #0]
 8002ab6:	e7db      	b.n	8002a70 <_puts_r+0x60>

08002ab8 <puts>:
 8002ab8:	4b02      	ldr	r3, [pc, #8]	; (8002ac4 <puts+0xc>)
 8002aba:	4601      	mov	r1, r0
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	f7ff bfa7 	b.w	8002a10 <_puts_r>
 8002ac2:	bf00      	nop
 8002ac4:	20000064 	.word	0x20000064

08002ac8 <__sread>:
 8002ac8:	b510      	push	{r4, lr}
 8002aca:	460c      	mov	r4, r1
 8002acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ad0:	f000 f8fc 	bl	8002ccc <_read_r>
 8002ad4:	2800      	cmp	r0, #0
 8002ad6:	bfab      	itete	ge
 8002ad8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002ada:	89a3      	ldrhlt	r3, [r4, #12]
 8002adc:	181b      	addge	r3, r3, r0
 8002ade:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002ae2:	bfac      	ite	ge
 8002ae4:	6563      	strge	r3, [r4, #84]	; 0x54
 8002ae6:	81a3      	strhlt	r3, [r4, #12]
 8002ae8:	bd10      	pop	{r4, pc}

08002aea <__swrite>:
 8002aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aee:	461f      	mov	r7, r3
 8002af0:	898b      	ldrh	r3, [r1, #12]
 8002af2:	05db      	lsls	r3, r3, #23
 8002af4:	4605      	mov	r5, r0
 8002af6:	460c      	mov	r4, r1
 8002af8:	4616      	mov	r6, r2
 8002afa:	d505      	bpl.n	8002b08 <__swrite+0x1e>
 8002afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b00:	2302      	movs	r3, #2
 8002b02:	2200      	movs	r2, #0
 8002b04:	f000 f8d0 	bl	8002ca8 <_lseek_r>
 8002b08:	89a3      	ldrh	r3, [r4, #12]
 8002b0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b12:	81a3      	strh	r3, [r4, #12]
 8002b14:	4632      	mov	r2, r6
 8002b16:	463b      	mov	r3, r7
 8002b18:	4628      	mov	r0, r5
 8002b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b1e:	f000 b8e7 	b.w	8002cf0 <_write_r>

08002b22 <__sseek>:
 8002b22:	b510      	push	{r4, lr}
 8002b24:	460c      	mov	r4, r1
 8002b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b2a:	f000 f8bd 	bl	8002ca8 <_lseek_r>
 8002b2e:	1c43      	adds	r3, r0, #1
 8002b30:	89a3      	ldrh	r3, [r4, #12]
 8002b32:	bf15      	itete	ne
 8002b34:	6560      	strne	r0, [r4, #84]	; 0x54
 8002b36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002b3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002b3e:	81a3      	strheq	r3, [r4, #12]
 8002b40:	bf18      	it	ne
 8002b42:	81a3      	strhne	r3, [r4, #12]
 8002b44:	bd10      	pop	{r4, pc}

08002b46 <__sclose>:
 8002b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b4a:	f000 b89d 	b.w	8002c88 <_close_r>

08002b4e <__swbuf_r>:
 8002b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b50:	460e      	mov	r6, r1
 8002b52:	4614      	mov	r4, r2
 8002b54:	4605      	mov	r5, r0
 8002b56:	b118      	cbz	r0, 8002b60 <__swbuf_r+0x12>
 8002b58:	6a03      	ldr	r3, [r0, #32]
 8002b5a:	b90b      	cbnz	r3, 8002b60 <__swbuf_r+0x12>
 8002b5c:	f7ff ff22 	bl	80029a4 <__sinit>
 8002b60:	69a3      	ldr	r3, [r4, #24]
 8002b62:	60a3      	str	r3, [r4, #8]
 8002b64:	89a3      	ldrh	r3, [r4, #12]
 8002b66:	071a      	lsls	r2, r3, #28
 8002b68:	d525      	bpl.n	8002bb6 <__swbuf_r+0x68>
 8002b6a:	6923      	ldr	r3, [r4, #16]
 8002b6c:	b31b      	cbz	r3, 8002bb6 <__swbuf_r+0x68>
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	6922      	ldr	r2, [r4, #16]
 8002b72:	1a98      	subs	r0, r3, r2
 8002b74:	6963      	ldr	r3, [r4, #20]
 8002b76:	b2f6      	uxtb	r6, r6
 8002b78:	4283      	cmp	r3, r0
 8002b7a:	4637      	mov	r7, r6
 8002b7c:	dc04      	bgt.n	8002b88 <__swbuf_r+0x3a>
 8002b7e:	4621      	mov	r1, r4
 8002b80:	4628      	mov	r0, r5
 8002b82:	f000 fa73 	bl	800306c <_fflush_r>
 8002b86:	b9e0      	cbnz	r0, 8002bc2 <__swbuf_r+0x74>
 8002b88:	68a3      	ldr	r3, [r4, #8]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	60a3      	str	r3, [r4, #8]
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	6022      	str	r2, [r4, #0]
 8002b94:	701e      	strb	r6, [r3, #0]
 8002b96:	6962      	ldr	r2, [r4, #20]
 8002b98:	1c43      	adds	r3, r0, #1
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d004      	beq.n	8002ba8 <__swbuf_r+0x5a>
 8002b9e:	89a3      	ldrh	r3, [r4, #12]
 8002ba0:	07db      	lsls	r3, r3, #31
 8002ba2:	d506      	bpl.n	8002bb2 <__swbuf_r+0x64>
 8002ba4:	2e0a      	cmp	r6, #10
 8002ba6:	d104      	bne.n	8002bb2 <__swbuf_r+0x64>
 8002ba8:	4621      	mov	r1, r4
 8002baa:	4628      	mov	r0, r5
 8002bac:	f000 fa5e 	bl	800306c <_fflush_r>
 8002bb0:	b938      	cbnz	r0, 8002bc2 <__swbuf_r+0x74>
 8002bb2:	4638      	mov	r0, r7
 8002bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bb6:	4621      	mov	r1, r4
 8002bb8:	4628      	mov	r0, r5
 8002bba:	f000 f805 	bl	8002bc8 <__swsetup_r>
 8002bbe:	2800      	cmp	r0, #0
 8002bc0:	d0d5      	beq.n	8002b6e <__swbuf_r+0x20>
 8002bc2:	f04f 37ff 	mov.w	r7, #4294967295
 8002bc6:	e7f4      	b.n	8002bb2 <__swbuf_r+0x64>

08002bc8 <__swsetup_r>:
 8002bc8:	b538      	push	{r3, r4, r5, lr}
 8002bca:	4b2a      	ldr	r3, [pc, #168]	; (8002c74 <__swsetup_r+0xac>)
 8002bcc:	4605      	mov	r5, r0
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	460c      	mov	r4, r1
 8002bd2:	b118      	cbz	r0, 8002bdc <__swsetup_r+0x14>
 8002bd4:	6a03      	ldr	r3, [r0, #32]
 8002bd6:	b90b      	cbnz	r3, 8002bdc <__swsetup_r+0x14>
 8002bd8:	f7ff fee4 	bl	80029a4 <__sinit>
 8002bdc:	89a3      	ldrh	r3, [r4, #12]
 8002bde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002be2:	0718      	lsls	r0, r3, #28
 8002be4:	d422      	bmi.n	8002c2c <__swsetup_r+0x64>
 8002be6:	06d9      	lsls	r1, r3, #27
 8002be8:	d407      	bmi.n	8002bfa <__swsetup_r+0x32>
 8002bea:	2309      	movs	r3, #9
 8002bec:	602b      	str	r3, [r5, #0]
 8002bee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002bf2:	81a3      	strh	r3, [r4, #12]
 8002bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf8:	e034      	b.n	8002c64 <__swsetup_r+0x9c>
 8002bfa:	0758      	lsls	r0, r3, #29
 8002bfc:	d512      	bpl.n	8002c24 <__swsetup_r+0x5c>
 8002bfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c00:	b141      	cbz	r1, 8002c14 <__swsetup_r+0x4c>
 8002c02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c06:	4299      	cmp	r1, r3
 8002c08:	d002      	beq.n	8002c10 <__swsetup_r+0x48>
 8002c0a:	4628      	mov	r0, r5
 8002c0c:	f000 f8b0 	bl	8002d70 <_free_r>
 8002c10:	2300      	movs	r3, #0
 8002c12:	6363      	str	r3, [r4, #52]	; 0x34
 8002c14:	89a3      	ldrh	r3, [r4, #12]
 8002c16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002c1a:	81a3      	strh	r3, [r4, #12]
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	6063      	str	r3, [r4, #4]
 8002c20:	6923      	ldr	r3, [r4, #16]
 8002c22:	6023      	str	r3, [r4, #0]
 8002c24:	89a3      	ldrh	r3, [r4, #12]
 8002c26:	f043 0308 	orr.w	r3, r3, #8
 8002c2a:	81a3      	strh	r3, [r4, #12]
 8002c2c:	6923      	ldr	r3, [r4, #16]
 8002c2e:	b94b      	cbnz	r3, 8002c44 <__swsetup_r+0x7c>
 8002c30:	89a3      	ldrh	r3, [r4, #12]
 8002c32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c3a:	d003      	beq.n	8002c44 <__swsetup_r+0x7c>
 8002c3c:	4621      	mov	r1, r4
 8002c3e:	4628      	mov	r0, r5
 8002c40:	f000 fa62 	bl	8003108 <__smakebuf_r>
 8002c44:	89a0      	ldrh	r0, [r4, #12]
 8002c46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c4a:	f010 0301 	ands.w	r3, r0, #1
 8002c4e:	d00a      	beq.n	8002c66 <__swsetup_r+0x9e>
 8002c50:	2300      	movs	r3, #0
 8002c52:	60a3      	str	r3, [r4, #8]
 8002c54:	6963      	ldr	r3, [r4, #20]
 8002c56:	425b      	negs	r3, r3
 8002c58:	61a3      	str	r3, [r4, #24]
 8002c5a:	6923      	ldr	r3, [r4, #16]
 8002c5c:	b943      	cbnz	r3, 8002c70 <__swsetup_r+0xa8>
 8002c5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002c62:	d1c4      	bne.n	8002bee <__swsetup_r+0x26>
 8002c64:	bd38      	pop	{r3, r4, r5, pc}
 8002c66:	0781      	lsls	r1, r0, #30
 8002c68:	bf58      	it	pl
 8002c6a:	6963      	ldrpl	r3, [r4, #20]
 8002c6c:	60a3      	str	r3, [r4, #8]
 8002c6e:	e7f4      	b.n	8002c5a <__swsetup_r+0x92>
 8002c70:	2000      	movs	r0, #0
 8002c72:	e7f7      	b.n	8002c64 <__swsetup_r+0x9c>
 8002c74:	20000064 	.word	0x20000064

08002c78 <memset>:
 8002c78:	4402      	add	r2, r0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d100      	bne.n	8002c82 <memset+0xa>
 8002c80:	4770      	bx	lr
 8002c82:	f803 1b01 	strb.w	r1, [r3], #1
 8002c86:	e7f9      	b.n	8002c7c <memset+0x4>

08002c88 <_close_r>:
 8002c88:	b538      	push	{r3, r4, r5, lr}
 8002c8a:	4d06      	ldr	r5, [pc, #24]	; (8002ca4 <_close_r+0x1c>)
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	4604      	mov	r4, r0
 8002c90:	4608      	mov	r0, r1
 8002c92:	602b      	str	r3, [r5, #0]
 8002c94:	f7fd fc43 	bl	800051e <_close>
 8002c98:	1c43      	adds	r3, r0, #1
 8002c9a:	d102      	bne.n	8002ca2 <_close_r+0x1a>
 8002c9c:	682b      	ldr	r3, [r5, #0]
 8002c9e:	b103      	cbz	r3, 8002ca2 <_close_r+0x1a>
 8002ca0:	6023      	str	r3, [r4, #0]
 8002ca2:	bd38      	pop	{r3, r4, r5, pc}
 8002ca4:	20000218 	.word	0x20000218

08002ca8 <_lseek_r>:
 8002ca8:	b538      	push	{r3, r4, r5, lr}
 8002caa:	4d07      	ldr	r5, [pc, #28]	; (8002cc8 <_lseek_r+0x20>)
 8002cac:	4604      	mov	r4, r0
 8002cae:	4608      	mov	r0, r1
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	602a      	str	r2, [r5, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f7fd fc58 	bl	800056c <_lseek>
 8002cbc:	1c43      	adds	r3, r0, #1
 8002cbe:	d102      	bne.n	8002cc6 <_lseek_r+0x1e>
 8002cc0:	682b      	ldr	r3, [r5, #0]
 8002cc2:	b103      	cbz	r3, 8002cc6 <_lseek_r+0x1e>
 8002cc4:	6023      	str	r3, [r4, #0]
 8002cc6:	bd38      	pop	{r3, r4, r5, pc}
 8002cc8:	20000218 	.word	0x20000218

08002ccc <_read_r>:
 8002ccc:	b538      	push	{r3, r4, r5, lr}
 8002cce:	4d07      	ldr	r5, [pc, #28]	; (8002cec <_read_r+0x20>)
 8002cd0:	4604      	mov	r4, r0
 8002cd2:	4608      	mov	r0, r1
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	602a      	str	r2, [r5, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f7fd fbe6 	bl	80004ac <_read>
 8002ce0:	1c43      	adds	r3, r0, #1
 8002ce2:	d102      	bne.n	8002cea <_read_r+0x1e>
 8002ce4:	682b      	ldr	r3, [r5, #0]
 8002ce6:	b103      	cbz	r3, 8002cea <_read_r+0x1e>
 8002ce8:	6023      	str	r3, [r4, #0]
 8002cea:	bd38      	pop	{r3, r4, r5, pc}
 8002cec:	20000218 	.word	0x20000218

08002cf0 <_write_r>:
 8002cf0:	b538      	push	{r3, r4, r5, lr}
 8002cf2:	4d07      	ldr	r5, [pc, #28]	; (8002d10 <_write_r+0x20>)
 8002cf4:	4604      	mov	r4, r0
 8002cf6:	4608      	mov	r0, r1
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	602a      	str	r2, [r5, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f7fd fbf1 	bl	80004e6 <_write>
 8002d04:	1c43      	adds	r3, r0, #1
 8002d06:	d102      	bne.n	8002d0e <_write_r+0x1e>
 8002d08:	682b      	ldr	r3, [r5, #0]
 8002d0a:	b103      	cbz	r3, 8002d0e <_write_r+0x1e>
 8002d0c:	6023      	str	r3, [r4, #0]
 8002d0e:	bd38      	pop	{r3, r4, r5, pc}
 8002d10:	20000218 	.word	0x20000218

08002d14 <__errno>:
 8002d14:	4b01      	ldr	r3, [pc, #4]	; (8002d1c <__errno+0x8>)
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	20000064 	.word	0x20000064

08002d20 <__libc_init_array>:
 8002d20:	b570      	push	{r4, r5, r6, lr}
 8002d22:	4d0d      	ldr	r5, [pc, #52]	; (8002d58 <__libc_init_array+0x38>)
 8002d24:	4c0d      	ldr	r4, [pc, #52]	; (8002d5c <__libc_init_array+0x3c>)
 8002d26:	1b64      	subs	r4, r4, r5
 8002d28:	10a4      	asrs	r4, r4, #2
 8002d2a:	2600      	movs	r6, #0
 8002d2c:	42a6      	cmp	r6, r4
 8002d2e:	d109      	bne.n	8002d44 <__libc_init_array+0x24>
 8002d30:	4d0b      	ldr	r5, [pc, #44]	; (8002d60 <__libc_init_array+0x40>)
 8002d32:	4c0c      	ldr	r4, [pc, #48]	; (8002d64 <__libc_init_array+0x44>)
 8002d34:	f000 fa56 	bl	80031e4 <_init>
 8002d38:	1b64      	subs	r4, r4, r5
 8002d3a:	10a4      	asrs	r4, r4, #2
 8002d3c:	2600      	movs	r6, #0
 8002d3e:	42a6      	cmp	r6, r4
 8002d40:	d105      	bne.n	8002d4e <__libc_init_array+0x2e>
 8002d42:	bd70      	pop	{r4, r5, r6, pc}
 8002d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d48:	4798      	blx	r3
 8002d4a:	3601      	adds	r6, #1
 8002d4c:	e7ee      	b.n	8002d2c <__libc_init_array+0xc>
 8002d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d52:	4798      	blx	r3
 8002d54:	3601      	adds	r6, #1
 8002d56:	e7f2      	b.n	8002d3e <__libc_init_array+0x1e>
 8002d58:	08003258 	.word	0x08003258
 8002d5c:	08003258 	.word	0x08003258
 8002d60:	08003258 	.word	0x08003258
 8002d64:	0800325c 	.word	0x0800325c

08002d68 <__retarget_lock_init_recursive>:
 8002d68:	4770      	bx	lr

08002d6a <__retarget_lock_acquire_recursive>:
 8002d6a:	4770      	bx	lr

08002d6c <__retarget_lock_release_recursive>:
 8002d6c:	4770      	bx	lr
	...

08002d70 <_free_r>:
 8002d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d72:	2900      	cmp	r1, #0
 8002d74:	d044      	beq.n	8002e00 <_free_r+0x90>
 8002d76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d7a:	9001      	str	r0, [sp, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f1a1 0404 	sub.w	r4, r1, #4
 8002d82:	bfb8      	it	lt
 8002d84:	18e4      	addlt	r4, r4, r3
 8002d86:	f000 f8df 	bl	8002f48 <__malloc_lock>
 8002d8a:	4a1e      	ldr	r2, [pc, #120]	; (8002e04 <_free_r+0x94>)
 8002d8c:	9801      	ldr	r0, [sp, #4]
 8002d8e:	6813      	ldr	r3, [r2, #0]
 8002d90:	b933      	cbnz	r3, 8002da0 <_free_r+0x30>
 8002d92:	6063      	str	r3, [r4, #4]
 8002d94:	6014      	str	r4, [r2, #0]
 8002d96:	b003      	add	sp, #12
 8002d98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d9c:	f000 b8da 	b.w	8002f54 <__malloc_unlock>
 8002da0:	42a3      	cmp	r3, r4
 8002da2:	d908      	bls.n	8002db6 <_free_r+0x46>
 8002da4:	6825      	ldr	r5, [r4, #0]
 8002da6:	1961      	adds	r1, r4, r5
 8002da8:	428b      	cmp	r3, r1
 8002daa:	bf01      	itttt	eq
 8002dac:	6819      	ldreq	r1, [r3, #0]
 8002dae:	685b      	ldreq	r3, [r3, #4]
 8002db0:	1949      	addeq	r1, r1, r5
 8002db2:	6021      	streq	r1, [r4, #0]
 8002db4:	e7ed      	b.n	8002d92 <_free_r+0x22>
 8002db6:	461a      	mov	r2, r3
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	b10b      	cbz	r3, 8002dc0 <_free_r+0x50>
 8002dbc:	42a3      	cmp	r3, r4
 8002dbe:	d9fa      	bls.n	8002db6 <_free_r+0x46>
 8002dc0:	6811      	ldr	r1, [r2, #0]
 8002dc2:	1855      	adds	r5, r2, r1
 8002dc4:	42a5      	cmp	r5, r4
 8002dc6:	d10b      	bne.n	8002de0 <_free_r+0x70>
 8002dc8:	6824      	ldr	r4, [r4, #0]
 8002dca:	4421      	add	r1, r4
 8002dcc:	1854      	adds	r4, r2, r1
 8002dce:	42a3      	cmp	r3, r4
 8002dd0:	6011      	str	r1, [r2, #0]
 8002dd2:	d1e0      	bne.n	8002d96 <_free_r+0x26>
 8002dd4:	681c      	ldr	r4, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	6053      	str	r3, [r2, #4]
 8002dda:	440c      	add	r4, r1
 8002ddc:	6014      	str	r4, [r2, #0]
 8002dde:	e7da      	b.n	8002d96 <_free_r+0x26>
 8002de0:	d902      	bls.n	8002de8 <_free_r+0x78>
 8002de2:	230c      	movs	r3, #12
 8002de4:	6003      	str	r3, [r0, #0]
 8002de6:	e7d6      	b.n	8002d96 <_free_r+0x26>
 8002de8:	6825      	ldr	r5, [r4, #0]
 8002dea:	1961      	adds	r1, r4, r5
 8002dec:	428b      	cmp	r3, r1
 8002dee:	bf04      	itt	eq
 8002df0:	6819      	ldreq	r1, [r3, #0]
 8002df2:	685b      	ldreq	r3, [r3, #4]
 8002df4:	6063      	str	r3, [r4, #4]
 8002df6:	bf04      	itt	eq
 8002df8:	1949      	addeq	r1, r1, r5
 8002dfa:	6021      	streq	r1, [r4, #0]
 8002dfc:	6054      	str	r4, [r2, #4]
 8002dfe:	e7ca      	b.n	8002d96 <_free_r+0x26>
 8002e00:	b003      	add	sp, #12
 8002e02:	bd30      	pop	{r4, r5, pc}
 8002e04:	20000220 	.word	0x20000220

08002e08 <sbrk_aligned>:
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	4e0e      	ldr	r6, [pc, #56]	; (8002e44 <sbrk_aligned+0x3c>)
 8002e0c:	460c      	mov	r4, r1
 8002e0e:	6831      	ldr	r1, [r6, #0]
 8002e10:	4605      	mov	r5, r0
 8002e12:	b911      	cbnz	r1, 8002e1a <sbrk_aligned+0x12>
 8002e14:	f000 f9d6 	bl	80031c4 <_sbrk_r>
 8002e18:	6030      	str	r0, [r6, #0]
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	f000 f9d1 	bl	80031c4 <_sbrk_r>
 8002e22:	1c43      	adds	r3, r0, #1
 8002e24:	d00a      	beq.n	8002e3c <sbrk_aligned+0x34>
 8002e26:	1cc4      	adds	r4, r0, #3
 8002e28:	f024 0403 	bic.w	r4, r4, #3
 8002e2c:	42a0      	cmp	r0, r4
 8002e2e:	d007      	beq.n	8002e40 <sbrk_aligned+0x38>
 8002e30:	1a21      	subs	r1, r4, r0
 8002e32:	4628      	mov	r0, r5
 8002e34:	f000 f9c6 	bl	80031c4 <_sbrk_r>
 8002e38:	3001      	adds	r0, #1
 8002e3a:	d101      	bne.n	8002e40 <sbrk_aligned+0x38>
 8002e3c:	f04f 34ff 	mov.w	r4, #4294967295
 8002e40:	4620      	mov	r0, r4
 8002e42:	bd70      	pop	{r4, r5, r6, pc}
 8002e44:	20000224 	.word	0x20000224

08002e48 <_malloc_r>:
 8002e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e4c:	1ccd      	adds	r5, r1, #3
 8002e4e:	f025 0503 	bic.w	r5, r5, #3
 8002e52:	3508      	adds	r5, #8
 8002e54:	2d0c      	cmp	r5, #12
 8002e56:	bf38      	it	cc
 8002e58:	250c      	movcc	r5, #12
 8002e5a:	2d00      	cmp	r5, #0
 8002e5c:	4607      	mov	r7, r0
 8002e5e:	db01      	blt.n	8002e64 <_malloc_r+0x1c>
 8002e60:	42a9      	cmp	r1, r5
 8002e62:	d905      	bls.n	8002e70 <_malloc_r+0x28>
 8002e64:	230c      	movs	r3, #12
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	2600      	movs	r6, #0
 8002e6a:	4630      	mov	r0, r6
 8002e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002f44 <_malloc_r+0xfc>
 8002e74:	f000 f868 	bl	8002f48 <__malloc_lock>
 8002e78:	f8d8 3000 	ldr.w	r3, [r8]
 8002e7c:	461c      	mov	r4, r3
 8002e7e:	bb5c      	cbnz	r4, 8002ed8 <_malloc_r+0x90>
 8002e80:	4629      	mov	r1, r5
 8002e82:	4638      	mov	r0, r7
 8002e84:	f7ff ffc0 	bl	8002e08 <sbrk_aligned>
 8002e88:	1c43      	adds	r3, r0, #1
 8002e8a:	4604      	mov	r4, r0
 8002e8c:	d155      	bne.n	8002f3a <_malloc_r+0xf2>
 8002e8e:	f8d8 4000 	ldr.w	r4, [r8]
 8002e92:	4626      	mov	r6, r4
 8002e94:	2e00      	cmp	r6, #0
 8002e96:	d145      	bne.n	8002f24 <_malloc_r+0xdc>
 8002e98:	2c00      	cmp	r4, #0
 8002e9a:	d048      	beq.n	8002f2e <_malloc_r+0xe6>
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	4631      	mov	r1, r6
 8002ea0:	4638      	mov	r0, r7
 8002ea2:	eb04 0903 	add.w	r9, r4, r3
 8002ea6:	f000 f98d 	bl	80031c4 <_sbrk_r>
 8002eaa:	4581      	cmp	r9, r0
 8002eac:	d13f      	bne.n	8002f2e <_malloc_r+0xe6>
 8002eae:	6821      	ldr	r1, [r4, #0]
 8002eb0:	1a6d      	subs	r5, r5, r1
 8002eb2:	4629      	mov	r1, r5
 8002eb4:	4638      	mov	r0, r7
 8002eb6:	f7ff ffa7 	bl	8002e08 <sbrk_aligned>
 8002eba:	3001      	adds	r0, #1
 8002ebc:	d037      	beq.n	8002f2e <_malloc_r+0xe6>
 8002ebe:	6823      	ldr	r3, [r4, #0]
 8002ec0:	442b      	add	r3, r5
 8002ec2:	6023      	str	r3, [r4, #0]
 8002ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d038      	beq.n	8002f3e <_malloc_r+0xf6>
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	42a2      	cmp	r2, r4
 8002ed0:	d12b      	bne.n	8002f2a <_malloc_r+0xe2>
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	e00f      	b.n	8002ef8 <_malloc_r+0xb0>
 8002ed8:	6822      	ldr	r2, [r4, #0]
 8002eda:	1b52      	subs	r2, r2, r5
 8002edc:	d41f      	bmi.n	8002f1e <_malloc_r+0xd6>
 8002ede:	2a0b      	cmp	r2, #11
 8002ee0:	d917      	bls.n	8002f12 <_malloc_r+0xca>
 8002ee2:	1961      	adds	r1, r4, r5
 8002ee4:	42a3      	cmp	r3, r4
 8002ee6:	6025      	str	r5, [r4, #0]
 8002ee8:	bf18      	it	ne
 8002eea:	6059      	strne	r1, [r3, #4]
 8002eec:	6863      	ldr	r3, [r4, #4]
 8002eee:	bf08      	it	eq
 8002ef0:	f8c8 1000 	streq.w	r1, [r8]
 8002ef4:	5162      	str	r2, [r4, r5]
 8002ef6:	604b      	str	r3, [r1, #4]
 8002ef8:	4638      	mov	r0, r7
 8002efa:	f104 060b 	add.w	r6, r4, #11
 8002efe:	f000 f829 	bl	8002f54 <__malloc_unlock>
 8002f02:	f026 0607 	bic.w	r6, r6, #7
 8002f06:	1d23      	adds	r3, r4, #4
 8002f08:	1af2      	subs	r2, r6, r3
 8002f0a:	d0ae      	beq.n	8002e6a <_malloc_r+0x22>
 8002f0c:	1b9b      	subs	r3, r3, r6
 8002f0e:	50a3      	str	r3, [r4, r2]
 8002f10:	e7ab      	b.n	8002e6a <_malloc_r+0x22>
 8002f12:	42a3      	cmp	r3, r4
 8002f14:	6862      	ldr	r2, [r4, #4]
 8002f16:	d1dd      	bne.n	8002ed4 <_malloc_r+0x8c>
 8002f18:	f8c8 2000 	str.w	r2, [r8]
 8002f1c:	e7ec      	b.n	8002ef8 <_malloc_r+0xb0>
 8002f1e:	4623      	mov	r3, r4
 8002f20:	6864      	ldr	r4, [r4, #4]
 8002f22:	e7ac      	b.n	8002e7e <_malloc_r+0x36>
 8002f24:	4634      	mov	r4, r6
 8002f26:	6876      	ldr	r6, [r6, #4]
 8002f28:	e7b4      	b.n	8002e94 <_malloc_r+0x4c>
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	e7cc      	b.n	8002ec8 <_malloc_r+0x80>
 8002f2e:	230c      	movs	r3, #12
 8002f30:	603b      	str	r3, [r7, #0]
 8002f32:	4638      	mov	r0, r7
 8002f34:	f000 f80e 	bl	8002f54 <__malloc_unlock>
 8002f38:	e797      	b.n	8002e6a <_malloc_r+0x22>
 8002f3a:	6025      	str	r5, [r4, #0]
 8002f3c:	e7dc      	b.n	8002ef8 <_malloc_r+0xb0>
 8002f3e:	605b      	str	r3, [r3, #4]
 8002f40:	deff      	udf	#255	; 0xff
 8002f42:	bf00      	nop
 8002f44:	20000220 	.word	0x20000220

08002f48 <__malloc_lock>:
 8002f48:	4801      	ldr	r0, [pc, #4]	; (8002f50 <__malloc_lock+0x8>)
 8002f4a:	f7ff bf0e 	b.w	8002d6a <__retarget_lock_acquire_recursive>
 8002f4e:	bf00      	nop
 8002f50:	2000021c 	.word	0x2000021c

08002f54 <__malloc_unlock>:
 8002f54:	4801      	ldr	r0, [pc, #4]	; (8002f5c <__malloc_unlock+0x8>)
 8002f56:	f7ff bf09 	b.w	8002d6c <__retarget_lock_release_recursive>
 8002f5a:	bf00      	nop
 8002f5c:	2000021c 	.word	0x2000021c

08002f60 <__sflush_r>:
 8002f60:	898a      	ldrh	r2, [r1, #12]
 8002f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f66:	4605      	mov	r5, r0
 8002f68:	0710      	lsls	r0, r2, #28
 8002f6a:	460c      	mov	r4, r1
 8002f6c:	d458      	bmi.n	8003020 <__sflush_r+0xc0>
 8002f6e:	684b      	ldr	r3, [r1, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	dc05      	bgt.n	8002f80 <__sflush_r+0x20>
 8002f74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	dc02      	bgt.n	8002f80 <__sflush_r+0x20>
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f82:	2e00      	cmp	r6, #0
 8002f84:	d0f9      	beq.n	8002f7a <__sflush_r+0x1a>
 8002f86:	2300      	movs	r3, #0
 8002f88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f8c:	682f      	ldr	r7, [r5, #0]
 8002f8e:	6a21      	ldr	r1, [r4, #32]
 8002f90:	602b      	str	r3, [r5, #0]
 8002f92:	d032      	beq.n	8002ffa <__sflush_r+0x9a>
 8002f94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f96:	89a3      	ldrh	r3, [r4, #12]
 8002f98:	075a      	lsls	r2, r3, #29
 8002f9a:	d505      	bpl.n	8002fa8 <__sflush_r+0x48>
 8002f9c:	6863      	ldr	r3, [r4, #4]
 8002f9e:	1ac0      	subs	r0, r0, r3
 8002fa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fa2:	b10b      	cbz	r3, 8002fa8 <__sflush_r+0x48>
 8002fa4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fa6:	1ac0      	subs	r0, r0, r3
 8002fa8:	2300      	movs	r3, #0
 8002faa:	4602      	mov	r2, r0
 8002fac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fae:	6a21      	ldr	r1, [r4, #32]
 8002fb0:	4628      	mov	r0, r5
 8002fb2:	47b0      	blx	r6
 8002fb4:	1c43      	adds	r3, r0, #1
 8002fb6:	89a3      	ldrh	r3, [r4, #12]
 8002fb8:	d106      	bne.n	8002fc8 <__sflush_r+0x68>
 8002fba:	6829      	ldr	r1, [r5, #0]
 8002fbc:	291d      	cmp	r1, #29
 8002fbe:	d82b      	bhi.n	8003018 <__sflush_r+0xb8>
 8002fc0:	4a29      	ldr	r2, [pc, #164]	; (8003068 <__sflush_r+0x108>)
 8002fc2:	410a      	asrs	r2, r1
 8002fc4:	07d6      	lsls	r6, r2, #31
 8002fc6:	d427      	bmi.n	8003018 <__sflush_r+0xb8>
 8002fc8:	2200      	movs	r2, #0
 8002fca:	6062      	str	r2, [r4, #4]
 8002fcc:	04d9      	lsls	r1, r3, #19
 8002fce:	6922      	ldr	r2, [r4, #16]
 8002fd0:	6022      	str	r2, [r4, #0]
 8002fd2:	d504      	bpl.n	8002fde <__sflush_r+0x7e>
 8002fd4:	1c42      	adds	r2, r0, #1
 8002fd6:	d101      	bne.n	8002fdc <__sflush_r+0x7c>
 8002fd8:	682b      	ldr	r3, [r5, #0]
 8002fda:	b903      	cbnz	r3, 8002fde <__sflush_r+0x7e>
 8002fdc:	6560      	str	r0, [r4, #84]	; 0x54
 8002fde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fe0:	602f      	str	r7, [r5, #0]
 8002fe2:	2900      	cmp	r1, #0
 8002fe4:	d0c9      	beq.n	8002f7a <__sflush_r+0x1a>
 8002fe6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fea:	4299      	cmp	r1, r3
 8002fec:	d002      	beq.n	8002ff4 <__sflush_r+0x94>
 8002fee:	4628      	mov	r0, r5
 8002ff0:	f7ff febe 	bl	8002d70 <_free_r>
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	6360      	str	r0, [r4, #52]	; 0x34
 8002ff8:	e7c0      	b.n	8002f7c <__sflush_r+0x1c>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	4628      	mov	r0, r5
 8002ffe:	47b0      	blx	r6
 8003000:	1c41      	adds	r1, r0, #1
 8003002:	d1c8      	bne.n	8002f96 <__sflush_r+0x36>
 8003004:	682b      	ldr	r3, [r5, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0c5      	beq.n	8002f96 <__sflush_r+0x36>
 800300a:	2b1d      	cmp	r3, #29
 800300c:	d001      	beq.n	8003012 <__sflush_r+0xb2>
 800300e:	2b16      	cmp	r3, #22
 8003010:	d101      	bne.n	8003016 <__sflush_r+0xb6>
 8003012:	602f      	str	r7, [r5, #0]
 8003014:	e7b1      	b.n	8002f7a <__sflush_r+0x1a>
 8003016:	89a3      	ldrh	r3, [r4, #12]
 8003018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800301c:	81a3      	strh	r3, [r4, #12]
 800301e:	e7ad      	b.n	8002f7c <__sflush_r+0x1c>
 8003020:	690f      	ldr	r7, [r1, #16]
 8003022:	2f00      	cmp	r7, #0
 8003024:	d0a9      	beq.n	8002f7a <__sflush_r+0x1a>
 8003026:	0793      	lsls	r3, r2, #30
 8003028:	680e      	ldr	r6, [r1, #0]
 800302a:	bf08      	it	eq
 800302c:	694b      	ldreq	r3, [r1, #20]
 800302e:	600f      	str	r7, [r1, #0]
 8003030:	bf18      	it	ne
 8003032:	2300      	movne	r3, #0
 8003034:	eba6 0807 	sub.w	r8, r6, r7
 8003038:	608b      	str	r3, [r1, #8]
 800303a:	f1b8 0f00 	cmp.w	r8, #0
 800303e:	dd9c      	ble.n	8002f7a <__sflush_r+0x1a>
 8003040:	6a21      	ldr	r1, [r4, #32]
 8003042:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003044:	4643      	mov	r3, r8
 8003046:	463a      	mov	r2, r7
 8003048:	4628      	mov	r0, r5
 800304a:	47b0      	blx	r6
 800304c:	2800      	cmp	r0, #0
 800304e:	dc06      	bgt.n	800305e <__sflush_r+0xfe>
 8003050:	89a3      	ldrh	r3, [r4, #12]
 8003052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003056:	81a3      	strh	r3, [r4, #12]
 8003058:	f04f 30ff 	mov.w	r0, #4294967295
 800305c:	e78e      	b.n	8002f7c <__sflush_r+0x1c>
 800305e:	4407      	add	r7, r0
 8003060:	eba8 0800 	sub.w	r8, r8, r0
 8003064:	e7e9      	b.n	800303a <__sflush_r+0xda>
 8003066:	bf00      	nop
 8003068:	dfbffffe 	.word	0xdfbffffe

0800306c <_fflush_r>:
 800306c:	b538      	push	{r3, r4, r5, lr}
 800306e:	690b      	ldr	r3, [r1, #16]
 8003070:	4605      	mov	r5, r0
 8003072:	460c      	mov	r4, r1
 8003074:	b913      	cbnz	r3, 800307c <_fflush_r+0x10>
 8003076:	2500      	movs	r5, #0
 8003078:	4628      	mov	r0, r5
 800307a:	bd38      	pop	{r3, r4, r5, pc}
 800307c:	b118      	cbz	r0, 8003086 <_fflush_r+0x1a>
 800307e:	6a03      	ldr	r3, [r0, #32]
 8003080:	b90b      	cbnz	r3, 8003086 <_fflush_r+0x1a>
 8003082:	f7ff fc8f 	bl	80029a4 <__sinit>
 8003086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f3      	beq.n	8003076 <_fflush_r+0xa>
 800308e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003090:	07d0      	lsls	r0, r2, #31
 8003092:	d404      	bmi.n	800309e <_fflush_r+0x32>
 8003094:	0599      	lsls	r1, r3, #22
 8003096:	d402      	bmi.n	800309e <_fflush_r+0x32>
 8003098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800309a:	f7ff fe66 	bl	8002d6a <__retarget_lock_acquire_recursive>
 800309e:	4628      	mov	r0, r5
 80030a0:	4621      	mov	r1, r4
 80030a2:	f7ff ff5d 	bl	8002f60 <__sflush_r>
 80030a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030a8:	07da      	lsls	r2, r3, #31
 80030aa:	4605      	mov	r5, r0
 80030ac:	d4e4      	bmi.n	8003078 <_fflush_r+0xc>
 80030ae:	89a3      	ldrh	r3, [r4, #12]
 80030b0:	059b      	lsls	r3, r3, #22
 80030b2:	d4e1      	bmi.n	8003078 <_fflush_r+0xc>
 80030b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030b6:	f7ff fe59 	bl	8002d6c <__retarget_lock_release_recursive>
 80030ba:	e7dd      	b.n	8003078 <_fflush_r+0xc>

080030bc <__swhatbuf_r>:
 80030bc:	b570      	push	{r4, r5, r6, lr}
 80030be:	460c      	mov	r4, r1
 80030c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030c4:	2900      	cmp	r1, #0
 80030c6:	b096      	sub	sp, #88	; 0x58
 80030c8:	4615      	mov	r5, r2
 80030ca:	461e      	mov	r6, r3
 80030cc:	da0d      	bge.n	80030ea <__swhatbuf_r+0x2e>
 80030ce:	89a3      	ldrh	r3, [r4, #12]
 80030d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80030d4:	f04f 0100 	mov.w	r1, #0
 80030d8:	bf0c      	ite	eq
 80030da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80030de:	2340      	movne	r3, #64	; 0x40
 80030e0:	2000      	movs	r0, #0
 80030e2:	6031      	str	r1, [r6, #0]
 80030e4:	602b      	str	r3, [r5, #0]
 80030e6:	b016      	add	sp, #88	; 0x58
 80030e8:	bd70      	pop	{r4, r5, r6, pc}
 80030ea:	466a      	mov	r2, sp
 80030ec:	f000 f848 	bl	8003180 <_fstat_r>
 80030f0:	2800      	cmp	r0, #0
 80030f2:	dbec      	blt.n	80030ce <__swhatbuf_r+0x12>
 80030f4:	9901      	ldr	r1, [sp, #4]
 80030f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80030fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80030fe:	4259      	negs	r1, r3
 8003100:	4159      	adcs	r1, r3
 8003102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003106:	e7eb      	b.n	80030e0 <__swhatbuf_r+0x24>

08003108 <__smakebuf_r>:
 8003108:	898b      	ldrh	r3, [r1, #12]
 800310a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800310c:	079d      	lsls	r5, r3, #30
 800310e:	4606      	mov	r6, r0
 8003110:	460c      	mov	r4, r1
 8003112:	d507      	bpl.n	8003124 <__smakebuf_r+0x1c>
 8003114:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003118:	6023      	str	r3, [r4, #0]
 800311a:	6123      	str	r3, [r4, #16]
 800311c:	2301      	movs	r3, #1
 800311e:	6163      	str	r3, [r4, #20]
 8003120:	b002      	add	sp, #8
 8003122:	bd70      	pop	{r4, r5, r6, pc}
 8003124:	ab01      	add	r3, sp, #4
 8003126:	466a      	mov	r2, sp
 8003128:	f7ff ffc8 	bl	80030bc <__swhatbuf_r>
 800312c:	9900      	ldr	r1, [sp, #0]
 800312e:	4605      	mov	r5, r0
 8003130:	4630      	mov	r0, r6
 8003132:	f7ff fe89 	bl	8002e48 <_malloc_r>
 8003136:	b948      	cbnz	r0, 800314c <__smakebuf_r+0x44>
 8003138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800313c:	059a      	lsls	r2, r3, #22
 800313e:	d4ef      	bmi.n	8003120 <__smakebuf_r+0x18>
 8003140:	f023 0303 	bic.w	r3, r3, #3
 8003144:	f043 0302 	orr.w	r3, r3, #2
 8003148:	81a3      	strh	r3, [r4, #12]
 800314a:	e7e3      	b.n	8003114 <__smakebuf_r+0xc>
 800314c:	89a3      	ldrh	r3, [r4, #12]
 800314e:	6020      	str	r0, [r4, #0]
 8003150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003154:	81a3      	strh	r3, [r4, #12]
 8003156:	9b00      	ldr	r3, [sp, #0]
 8003158:	6163      	str	r3, [r4, #20]
 800315a:	9b01      	ldr	r3, [sp, #4]
 800315c:	6120      	str	r0, [r4, #16]
 800315e:	b15b      	cbz	r3, 8003178 <__smakebuf_r+0x70>
 8003160:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003164:	4630      	mov	r0, r6
 8003166:	f000 f81d 	bl	80031a4 <_isatty_r>
 800316a:	b128      	cbz	r0, 8003178 <__smakebuf_r+0x70>
 800316c:	89a3      	ldrh	r3, [r4, #12]
 800316e:	f023 0303 	bic.w	r3, r3, #3
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	81a3      	strh	r3, [r4, #12]
 8003178:	89a3      	ldrh	r3, [r4, #12]
 800317a:	431d      	orrs	r5, r3
 800317c:	81a5      	strh	r5, [r4, #12]
 800317e:	e7cf      	b.n	8003120 <__smakebuf_r+0x18>

08003180 <_fstat_r>:
 8003180:	b538      	push	{r3, r4, r5, lr}
 8003182:	4d07      	ldr	r5, [pc, #28]	; (80031a0 <_fstat_r+0x20>)
 8003184:	2300      	movs	r3, #0
 8003186:	4604      	mov	r4, r0
 8003188:	4608      	mov	r0, r1
 800318a:	4611      	mov	r1, r2
 800318c:	602b      	str	r3, [r5, #0]
 800318e:	f7fd f9d2 	bl	8000536 <_fstat>
 8003192:	1c43      	adds	r3, r0, #1
 8003194:	d102      	bne.n	800319c <_fstat_r+0x1c>
 8003196:	682b      	ldr	r3, [r5, #0]
 8003198:	b103      	cbz	r3, 800319c <_fstat_r+0x1c>
 800319a:	6023      	str	r3, [r4, #0]
 800319c:	bd38      	pop	{r3, r4, r5, pc}
 800319e:	bf00      	nop
 80031a0:	20000218 	.word	0x20000218

080031a4 <_isatty_r>:
 80031a4:	b538      	push	{r3, r4, r5, lr}
 80031a6:	4d06      	ldr	r5, [pc, #24]	; (80031c0 <_isatty_r+0x1c>)
 80031a8:	2300      	movs	r3, #0
 80031aa:	4604      	mov	r4, r0
 80031ac:	4608      	mov	r0, r1
 80031ae:	602b      	str	r3, [r5, #0]
 80031b0:	f7fd f9d1 	bl	8000556 <_isatty>
 80031b4:	1c43      	adds	r3, r0, #1
 80031b6:	d102      	bne.n	80031be <_isatty_r+0x1a>
 80031b8:	682b      	ldr	r3, [r5, #0]
 80031ba:	b103      	cbz	r3, 80031be <_isatty_r+0x1a>
 80031bc:	6023      	str	r3, [r4, #0]
 80031be:	bd38      	pop	{r3, r4, r5, pc}
 80031c0:	20000218 	.word	0x20000218

080031c4 <_sbrk_r>:
 80031c4:	b538      	push	{r3, r4, r5, lr}
 80031c6:	4d06      	ldr	r5, [pc, #24]	; (80031e0 <_sbrk_r+0x1c>)
 80031c8:	2300      	movs	r3, #0
 80031ca:	4604      	mov	r4, r0
 80031cc:	4608      	mov	r0, r1
 80031ce:	602b      	str	r3, [r5, #0]
 80031d0:	f7fd f9da 	bl	8000588 <_sbrk>
 80031d4:	1c43      	adds	r3, r0, #1
 80031d6:	d102      	bne.n	80031de <_sbrk_r+0x1a>
 80031d8:	682b      	ldr	r3, [r5, #0]
 80031da:	b103      	cbz	r3, 80031de <_sbrk_r+0x1a>
 80031dc:	6023      	str	r3, [r4, #0]
 80031de:	bd38      	pop	{r3, r4, r5, pc}
 80031e0:	20000218 	.word	0x20000218

080031e4 <_init>:
 80031e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e6:	bf00      	nop
 80031e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ea:	bc08      	pop	{r3}
 80031ec:	469e      	mov	lr, r3
 80031ee:	4770      	bx	lr

080031f0 <_fini>:
 80031f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f2:	bf00      	nop
 80031f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f6:	bc08      	pop	{r3}
 80031f8:	469e      	mov	lr, r3
 80031fa:	4770      	bx	lr
