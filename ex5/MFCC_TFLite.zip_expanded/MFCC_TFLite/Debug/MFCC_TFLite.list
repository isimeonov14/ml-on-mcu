
MFCC_TFLite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013e3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b98  08013fd0  08013fd0  00023fd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017b68  08017b68  0003704c  2**0
                  CONTENTS
  4 .ARM          00000008  08017b68  08017b68  00027b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017b70  08017b70  0003704c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017b70  08017b70  00027b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017b74  08017b74  00027b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000704c  20000000  08017b78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007b68  2000704c  0801ebc4  0003704c  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2000ebb4  0801ebc4  0003ebb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003704c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003707c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0022566a  00000000  00000000  000370bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00012af1  00000000  00000000  0025c729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b0  00000000  00000000  0026f220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0001101d  00000000  00000000  002706d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035714  00000000  00000000  002816ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000628fd  00000000  00000000  002b6e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001aeab7  00000000  00000000  003196fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005afc  00000000  00000000  004c81b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00075f40  00000000  00000000  004cdcb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  00543bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000704c 	.word	0x2000704c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013fb4 	.word	0x08013fb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20007050 	.word	0x20007050
 80001cc:	08013fb4 	.word	0x08013fb4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b9a6 	b.w	8000fcc <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f83c 	bl	8000d04 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff2b 	bl	8000afc <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fca1 	bl	8000618 <__aeabi_dmul>
 8000cd6:	f000 f97b 	bl	8000fd0 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc22 	bl	8000524 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc98 	bl	8000618 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fada 	bl	80002a8 <__aeabi_dsub>
 8000cf4:	f000 f96c 	bl	8000fd0 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <__udivmoddi4>:
 8000d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d08:	9e08      	ldr	r6, [sp, #32]
 8000d0a:	460d      	mov	r5, r1
 8000d0c:	4604      	mov	r4, r0
 8000d0e:	460f      	mov	r7, r1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d14a      	bne.n	8000daa <__udivmoddi4+0xa6>
 8000d14:	428a      	cmp	r2, r1
 8000d16:	4694      	mov	ip, r2
 8000d18:	d965      	bls.n	8000de6 <__udivmoddi4+0xe2>
 8000d1a:	fab2 f382 	clz	r3, r2
 8000d1e:	b143      	cbz	r3, 8000d32 <__udivmoddi4+0x2e>
 8000d20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d24:	f1c3 0220 	rsb	r2, r3, #32
 8000d28:	409f      	lsls	r7, r3
 8000d2a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2e:	4317      	orrs	r7, r2
 8000d30:	409c      	lsls	r4, r3
 8000d32:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d36:	fa1f f58c 	uxth.w	r5, ip
 8000d3a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d3e:	0c22      	lsrs	r2, r4, #16
 8000d40:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d44:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d48:	fb01 f005 	mul.w	r0, r1, r5
 8000d4c:	4290      	cmp	r0, r2
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x62>
 8000d50:	eb1c 0202 	adds.w	r2, ip, r2
 8000d54:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d58:	f080 811c 	bcs.w	8000f94 <__udivmoddi4+0x290>
 8000d5c:	4290      	cmp	r0, r2
 8000d5e:	f240 8119 	bls.w	8000f94 <__udivmoddi4+0x290>
 8000d62:	3902      	subs	r1, #2
 8000d64:	4462      	add	r2, ip
 8000d66:	1a12      	subs	r2, r2, r0
 8000d68:	b2a4      	uxth	r4, r4
 8000d6a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d6e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d72:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d76:	fb00 f505 	mul.w	r5, r0, r5
 8000d7a:	42a5      	cmp	r5, r4
 8000d7c:	d90a      	bls.n	8000d94 <__udivmoddi4+0x90>
 8000d7e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d82:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d86:	f080 8107 	bcs.w	8000f98 <__udivmoddi4+0x294>
 8000d8a:	42a5      	cmp	r5, r4
 8000d8c:	f240 8104 	bls.w	8000f98 <__udivmoddi4+0x294>
 8000d90:	4464      	add	r4, ip
 8000d92:	3802      	subs	r0, #2
 8000d94:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	b11e      	cbz	r6, 8000da6 <__udivmoddi4+0xa2>
 8000d9e:	40dc      	lsrs	r4, r3
 8000da0:	2300      	movs	r3, #0
 8000da2:	e9c6 4300 	strd	r4, r3, [r6]
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0xbc>
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	f000 80ed 	beq.w	8000f8e <__udivmoddi4+0x28a>
 8000db4:	2100      	movs	r1, #0
 8000db6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dba:	4608      	mov	r0, r1
 8000dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc0:	fab3 f183 	clz	r1, r3
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	d149      	bne.n	8000e5c <__udivmoddi4+0x158>
 8000dc8:	42ab      	cmp	r3, r5
 8000dca:	d302      	bcc.n	8000dd2 <__udivmoddi4+0xce>
 8000dcc:	4282      	cmp	r2, r0
 8000dce:	f200 80f8 	bhi.w	8000fc2 <__udivmoddi4+0x2be>
 8000dd2:	1a84      	subs	r4, r0, r2
 8000dd4:	eb65 0203 	sbc.w	r2, r5, r3
 8000dd8:	2001      	movs	r0, #1
 8000dda:	4617      	mov	r7, r2
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d0e2      	beq.n	8000da6 <__udivmoddi4+0xa2>
 8000de0:	e9c6 4700 	strd	r4, r7, [r6]
 8000de4:	e7df      	b.n	8000da6 <__udivmoddi4+0xa2>
 8000de6:	b902      	cbnz	r2, 8000dea <__udivmoddi4+0xe6>
 8000de8:	deff      	udf	#255	; 0xff
 8000dea:	fab2 f382 	clz	r3, r2
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f040 8090 	bne.w	8000f14 <__udivmoddi4+0x210>
 8000df4:	1a8a      	subs	r2, r1, r2
 8000df6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfa:	fa1f fe8c 	uxth.w	lr, ip
 8000dfe:	2101      	movs	r1, #1
 8000e00:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e04:	fb07 2015 	mls	r0, r7, r5, r2
 8000e08:	0c22      	lsrs	r2, r4, #16
 8000e0a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e0e:	fb0e f005 	mul.w	r0, lr, r5
 8000e12:	4290      	cmp	r0, r2
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x124>
 8000e16:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0x122>
 8000e20:	4290      	cmp	r0, r2
 8000e22:	f200 80cb 	bhi.w	8000fbc <__udivmoddi4+0x2b8>
 8000e26:	4645      	mov	r5, r8
 8000e28:	1a12      	subs	r2, r2, r0
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e30:	fb07 2210 	mls	r2, r7, r0, r2
 8000e34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e38:	fb0e fe00 	mul.w	lr, lr, r0
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x14e>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x14c>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	f200 80bb 	bhi.w	8000fc6 <__udivmoddi4+0x2c2>
 8000e50:	4610      	mov	r0, r2
 8000e52:	eba4 040e 	sub.w	r4, r4, lr
 8000e56:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5a:	e79f      	b.n	8000d9c <__udivmoddi4+0x98>
 8000e5c:	f1c1 0720 	rsb	r7, r1, #32
 8000e60:	408b      	lsls	r3, r1
 8000e62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e6e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e72:	40fd      	lsrs	r5, r7
 8000e74:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e78:	4323      	orrs	r3, r4
 8000e7a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e7e:	fa1f fe8c 	uxth.w	lr, ip
 8000e82:	fb09 5518 	mls	r5, r9, r8, r5
 8000e86:	0c1c      	lsrs	r4, r3, #16
 8000e88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e8c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e90:	42a5      	cmp	r5, r4
 8000e92:	fa02 f201 	lsl.w	r2, r2, r1
 8000e96:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9a:	d90b      	bls.n	8000eb4 <__udivmoddi4+0x1b0>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea4:	f080 8088 	bcs.w	8000fb8 <__udivmoddi4+0x2b4>
 8000ea8:	42a5      	cmp	r5, r4
 8000eaa:	f240 8085 	bls.w	8000fb8 <__udivmoddi4+0x2b4>
 8000eae:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb2:	4464      	add	r4, ip
 8000eb4:	1b64      	subs	r4, r4, r5
 8000eb6:	b29d      	uxth	r5, r3
 8000eb8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ebc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0x1da>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed4:	d26c      	bcs.n	8000fb0 <__udivmoddi4+0x2ac>
 8000ed6:	45a6      	cmp	lr, r4
 8000ed8:	d96a      	bls.n	8000fb0 <__udivmoddi4+0x2ac>
 8000eda:	3b02      	subs	r3, #2
 8000edc:	4464      	add	r4, ip
 8000ede:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ee6:	eba4 040e 	sub.w	r4, r4, lr
 8000eea:	42ac      	cmp	r4, r5
 8000eec:	46c8      	mov	r8, r9
 8000eee:	46ae      	mov	lr, r5
 8000ef0:	d356      	bcc.n	8000fa0 <__udivmoddi4+0x29c>
 8000ef2:	d053      	beq.n	8000f9c <__udivmoddi4+0x298>
 8000ef4:	b156      	cbz	r6, 8000f0c <__udivmoddi4+0x208>
 8000ef6:	ebb0 0208 	subs.w	r2, r0, r8
 8000efa:	eb64 040e 	sbc.w	r4, r4, lr
 8000efe:	fa04 f707 	lsl.w	r7, r4, r7
 8000f02:	40ca      	lsrs	r2, r1
 8000f04:	40cc      	lsrs	r4, r1
 8000f06:	4317      	orrs	r7, r2
 8000f08:	e9c6 7400 	strd	r7, r4, [r6]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	2100      	movs	r1, #0
 8000f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f14:	f1c3 0120 	rsb	r1, r3, #32
 8000f18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f1c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f20:	fa25 f101 	lsr.w	r1, r5, r1
 8000f24:	409d      	lsls	r5, r3
 8000f26:	432a      	orrs	r2, r5
 8000f28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f2c:	fa1f fe8c 	uxth.w	lr, ip
 8000f30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f34:	fb07 1510 	mls	r5, r7, r0, r1
 8000f38:	0c11      	lsrs	r1, r2, #16
 8000f3a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f3e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f42:	428d      	cmp	r5, r1
 8000f44:	fa04 f403 	lsl.w	r4, r4, r3
 8000f48:	d908      	bls.n	8000f5c <__udivmoddi4+0x258>
 8000f4a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f52:	d22f      	bcs.n	8000fb4 <__udivmoddi4+0x2b0>
 8000f54:	428d      	cmp	r5, r1
 8000f56:	d92d      	bls.n	8000fb4 <__udivmoddi4+0x2b0>
 8000f58:	3802      	subs	r0, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	1b49      	subs	r1, r1, r5
 8000f5e:	b292      	uxth	r2, r2
 8000f60:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f64:	fb07 1115 	mls	r1, r7, r5, r1
 8000f68:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f6c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f70:	4291      	cmp	r1, r2
 8000f72:	d908      	bls.n	8000f86 <__udivmoddi4+0x282>
 8000f74:	eb1c 0202 	adds.w	r2, ip, r2
 8000f78:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f7c:	d216      	bcs.n	8000fac <__udivmoddi4+0x2a8>
 8000f7e:	4291      	cmp	r1, r2
 8000f80:	d914      	bls.n	8000fac <__udivmoddi4+0x2a8>
 8000f82:	3d02      	subs	r5, #2
 8000f84:	4462      	add	r2, ip
 8000f86:	1a52      	subs	r2, r2, r1
 8000f88:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f8c:	e738      	b.n	8000e00 <__udivmoddi4+0xfc>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	4630      	mov	r0, r6
 8000f92:	e708      	b.n	8000da6 <__udivmoddi4+0xa2>
 8000f94:	4639      	mov	r1, r7
 8000f96:	e6e6      	b.n	8000d66 <__udivmoddi4+0x62>
 8000f98:	4610      	mov	r0, r2
 8000f9a:	e6fb      	b.n	8000d94 <__udivmoddi4+0x90>
 8000f9c:	4548      	cmp	r0, r9
 8000f9e:	d2a9      	bcs.n	8000ef4 <__udivmoddi4+0x1f0>
 8000fa0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	e7a3      	b.n	8000ef4 <__udivmoddi4+0x1f0>
 8000fac:	4645      	mov	r5, r8
 8000fae:	e7ea      	b.n	8000f86 <__udivmoddi4+0x282>
 8000fb0:	462b      	mov	r3, r5
 8000fb2:	e794      	b.n	8000ede <__udivmoddi4+0x1da>
 8000fb4:	4640      	mov	r0, r8
 8000fb6:	e7d1      	b.n	8000f5c <__udivmoddi4+0x258>
 8000fb8:	46d0      	mov	r8, sl
 8000fba:	e77b      	b.n	8000eb4 <__udivmoddi4+0x1b0>
 8000fbc:	3d02      	subs	r5, #2
 8000fbe:	4462      	add	r2, ip
 8000fc0:	e732      	b.n	8000e28 <__udivmoddi4+0x124>
 8000fc2:	4608      	mov	r0, r1
 8000fc4:	e70a      	b.n	8000ddc <__udivmoddi4+0xd8>
 8000fc6:	4464      	add	r4, ip
 8000fc8:	3802      	subs	r0, #2
 8000fca:	e742      	b.n	8000e52 <__udivmoddi4+0x14e>

08000fcc <__aeabi_idiv0>:
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <__aeabi_d2uiz>:
 8000fd0:	004a      	lsls	r2, r1, #1
 8000fd2:	d211      	bcs.n	8000ff8 <__aeabi_d2uiz+0x28>
 8000fd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fd8:	d211      	bcs.n	8000ffe <__aeabi_d2uiz+0x2e>
 8000fda:	d50d      	bpl.n	8000ff8 <__aeabi_d2uiz+0x28>
 8000fdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fe0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fe4:	d40e      	bmi.n	8001004 <__aeabi_d2uiz+0x34>
 8000fe6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ff2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff6:	4770      	bx	lr
 8000ff8:	f04f 0000 	mov.w	r0, #0
 8000ffc:	4770      	bx	lr
 8000ffe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001002:	d102      	bne.n	800100a <__aeabi_d2uiz+0x3a>
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	4770      	bx	lr
 800100a:	f04f 0000 	mov.w	r0, #0
 800100e:	4770      	bx	lr

08001010 <_Z10ResetTimerv>:
#include "CycleCounter.h"

void ResetTimer(){
	DWT_CYCCNT   = (unsigned int *)0xE0001004; //address of the register
	DWT_CONTROL  = (unsigned int *)0xE0001000; //address of the register
 8001010:	4a0a      	ldr	r2, [pc, #40]	; (800103c <_Z10ResetTimerv+0x2c>)
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <_Z10ResetTimerv+0x30>)
	DWT_CYCCNT   = (unsigned int *)0xE0001004; //address of the register
 8001014:	490b      	ldr	r1, [pc, #44]	; (8001044 <_Z10ResetTimerv+0x34>)
	SCB_DEMCR    = (unsigned int *)0xE000EDFC; //address of the register
	*SCB_DEMCR   = *SCB_DEMCR | 0x01000000;
 8001016:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
void ResetTimer(){
 800101a:	b410      	push	{r4}
	DWT_CONTROL  = (unsigned int *)0xE0001000; //address of the register
 800101c:	6013      	str	r3, [r2, #0]
	*SCB_DEMCR   = *SCB_DEMCR | 0x01000000;
 800101e:	f8d0 2dfc 	ldr.w	r2, [r0, #3580]	; 0xdfc
	DWT_CYCCNT   = (unsigned int *)0xE0001004; //address of the register
 8001022:	4c09      	ldr	r4, [pc, #36]	; (8001048 <_Z10ResetTimerv+0x38>)
 8001024:	600c      	str	r4, [r1, #0]
	*SCB_DEMCR   = *SCB_DEMCR | 0x01000000;
 8001026:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
	*DWT_CYCCNT  = 0; // reset the counter
 800102a:	2100      	movs	r1, #0
	*SCB_DEMCR   = *SCB_DEMCR | 0x01000000;
 800102c:	f8c0 2dfc 	str.w	r2, [r0, #3580]	; 0xdfc
	*DWT_CONTROL = 0; 
}
 8001030:	f85d 4b04 	ldr.w	r4, [sp], #4
	*DWT_CYCCNT  = 0; // reset the counter
 8001034:	6059      	str	r1, [r3, #4]
	*DWT_CONTROL = 0; 
 8001036:	6019      	str	r1, [r3, #0]
}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	2000706c 	.word	0x2000706c
 8001040:	e0001000 	.word	0xe0001000
 8001044:	20007068 	.word	0x20007068
 8001048:	e0001004 	.word	0xe0001004

0800104c <_Z10StartTimerv>:

void StartTimer(){
	*DWT_CONTROL = *DWT_CONTROL | 1 ; // enable the counter
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <_Z10StartTimerv+0x10>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	6813      	ldr	r3, [r2, #0]
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	2000706c 	.word	0x2000706c

08001060 <_Z9StopTimerv>:

void StopTimer(){
	*DWT_CONTROL = *DWT_CONTROL & 0 ; // disable the counter    
 8001060:	4b02      	ldr	r3, [pc, #8]	; (800106c <_Z9StopTimerv+0xc>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2200      	movs	r2, #0
 8001066:	6819      	ldr	r1, [r3, #0]
 8001068:	601a      	str	r2, [r3, #0]
}
 800106a:	4770      	bx	lr
 800106c:	2000706c 	.word	0x2000706c

08001070 <_Z9getCyclesv>:

unsigned int getCycles(){
	return *DWT_CYCCNT;
 8001070:	4b01      	ldr	r3, [pc, #4]	; (8001078 <_Z9getCyclesv+0x8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6818      	ldr	r0, [r3, #0]
}
 8001076:	4770      	bx	lr
 8001078:	20007068 	.word	0x20007068

0800107c <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
    return TfLiteDelegatePtrVector();
 800107c:	2200      	movs	r2, #0
 800107e:	e9c0 2200 	strd	r2, r2, [r0]
 8001082:	6082      	str	r2, [r0, #8]
  }
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <__tcf_0>:
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  // Set up logging (modify tensorflow/lite/experimental/micro/debug_log.cc)
  static tflite::MicroErrorReporter micro_error_reporter;
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop

0800108c <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE>:
 public:
  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
      : error_reporter_(error_reporter) {}

  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 800108c:	2920      	cmp	r1, #32
 800108e:	d022      	beq.n	80010d6 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x4a>

    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001090:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
 8001094:	b1fb      	cbz	r3, 80010d6 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x4a>
      const TfLiteRegistration& registration = registrations_[i];
      if (registration.builtin_code == op) {
 8001096:	6982      	ldr	r2, [r0, #24]
 8001098:	428a      	cmp	r2, r1
 800109a:	d01e      	beq.n	80010da <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x4e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800109c:	2b01      	cmp	r3, #1
 800109e:	d01a      	beq.n	80010d6 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x4a>
      if (registration.builtin_code == op) {
 80010a0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80010a2:	4291      	cmp	r1, r2
 80010a4:	d01e      	beq.n	80010e4 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x58>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d015      	beq.n	80010d6 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x4a>
      if (registration.builtin_code == op) {
 80010aa:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80010ac:	4291      	cmp	r1, r2
 80010ae:	d01b      	beq.n	80010e8 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x5c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d010      	beq.n	80010d6 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x4a>
      if (registration.builtin_code == op) {
 80010b4:	6f82      	ldr	r2, [r0, #120]	; 0x78
 80010b6:	4291      	cmp	r1, r2
 80010b8:	d018      	beq.n	80010ec <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x60>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	d00b      	beq.n	80010d6 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x4a>
      if (registration.builtin_code == op) {
 80010be:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 80010c2:	4291      	cmp	r1, r2
 80010c4:	d014      	beq.n	80010f0 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x64>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80010c6:	2b05      	cmp	r3, #5
 80010c8:	d005      	beq.n	80010d6 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x4a>
      if (registration.builtin_code == op) {
 80010ca:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 80010ce:	428b      	cmp	r3, r1
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80010d0:	bf08      	it	eq
 80010d2:	2305      	moveq	r3, #5
      if (registration.builtin_code == op) {
 80010d4:	d002      	beq.n	80010dc <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x50>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 80010d6:	2000      	movs	r0, #0
        return &registration;
      }
    }
    return nullptr;
  }
 80010d8:	4770      	bx	lr
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80010da:	2300      	movs	r3, #0
      const TfLiteRegistration& registration = registrations_[i];
 80010dc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80010e0:	3004      	adds	r0, #4
 80010e2:	4770      	bx	lr
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80010e4:	2301      	movs	r3, #1
 80010e6:	e7f9      	b.n	80010dc <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x50>
 80010e8:	2302      	movs	r3, #2
 80010ea:	e7f7      	b.n	80010dc <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x50>
 80010ec:	2303      	movs	r3, #3
 80010ee:	e7f5      	b.n	80010dc <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x50>
 80010f0:	2304      	movs	r3, #4
 80010f2:	e7f3      	b.n	80010dc <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x50>

080010f4 <_ZN6tflite22MicroMutableOpResolverILj6EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop

080010f8 <__tcf_1>:
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 //Build an interpreter to run the model with.
  buf_len = sprintf(buf, "Interpreter\r\n");
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
  static tflite::MicroInterpreter static_interpreter(
	  model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 80010f8:	4801      	ldr	r0, [pc, #4]	; (8001100 <__tcf_1+0x8>)
 80010fa:	f004 be83 	b.w	8005e04 <_ZN6tflite16MicroInterpreterD1Ev>
 80010fe:	bf00      	nop
 8001100:	2000e88c 	.word	0x2000e88c

08001104 <_ZN6tflite22MicroMutableOpResolverILj6EED0Ev>:
 8001104:	b510      	push	{r4, lr}
 8001106:	21f0      	movs	r1, #240	; 0xf0
 8001108:	4604      	mov	r4, r0
 800110a:	f00f fd5f 	bl	8010bcc <_ZdlPvj>
 800110e:	4620      	mov	r0, r4
 8001110:	bd10      	pop	{r4, pc}
 8001112:	bf00      	nop

08001114 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE>:
      }
    }
    return nullptr;
  }

  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 8001114:	b508      	push	{r3, lr}
      BuiltinOperator op) const override {
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 8001116:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
 800111a:	2b06      	cmp	r3, #6
 800111c:	d833      	bhi.n	8001186 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x72>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 800111e:	b31b      	cbz	r3, 8001168 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x54>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8001120:	f890 20c8 	ldrb.w	r2, [r0, #200]	; 0xc8
 8001124:	428a      	cmp	r2, r1
 8001126:	d021      	beq.n	800116c <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x58>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001128:	2b01      	cmp	r3, #1
 800112a:	d01d      	beq.n	8001168 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x54>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 800112c:	f890 20c9 	ldrb.w	r2, [r0, #201]	; 0xc9
 8001130:	428a      	cmp	r2, r1
 8001132:	d020      	beq.n	8001176 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x62>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001134:	2b02      	cmp	r3, #2
 8001136:	d017      	beq.n	8001168 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x54>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8001138:	f890 20ca 	ldrb.w	r2, [r0, #202]	; 0xca
 800113c:	428a      	cmp	r2, r1
 800113e:	d01c      	beq.n	800117a <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x66>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001140:	2b03      	cmp	r3, #3
 8001142:	d011      	beq.n	8001168 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x54>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8001144:	f890 20cb 	ldrb.w	r2, [r0, #203]	; 0xcb
 8001148:	428a      	cmp	r2, r1
 800114a:	d018      	beq.n	800117e <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x6a>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 800114c:	2b04      	cmp	r3, #4
 800114e:	d00b      	beq.n	8001168 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x54>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8001150:	f890 20cc 	ldrb.w	r2, [r0, #204]	; 0xcc
 8001154:	428a      	cmp	r2, r1
 8001156:	d014      	beq.n	8001182 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x6e>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001158:	2b06      	cmp	r3, #6
 800115a:	d105      	bne.n	8001168 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x54>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 800115c:	f890 30cd 	ldrb.w	r3, [r0, #205]	; 0xcd
 8001160:	428b      	cmp	r3, r1
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001162:	bf08      	it	eq
 8001164:	2305      	moveq	r3, #5
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8001166:	d002      	beq.n	800116e <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x5a>
    }
    return nullptr;
 8001168:	2000      	movs	r0, #0
  }
 800116a:	bd08      	pop	{r3, pc}
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 800116c:	2300      	movs	r3, #0
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 800116e:	3334      	adds	r3, #52	; 0x34
 8001170:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
  }
 8001174:	bd08      	pop	{r3, pc}
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001176:	2301      	movs	r3, #1
 8001178:	e7f9      	b.n	800116e <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x5a>
 800117a:	2302      	movs	r3, #2
 800117c:	e7f7      	b.n	800116e <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x5a>
 800117e:	2303      	movs	r3, #3
 8001180:	e7f5      	b.n	800116e <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x5a>
 8001182:	2304      	movs	r3, #4
 8001184:	e7f3      	b.n	800116e <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x5a>
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 8001186:	f00f fffd 	bl	8011184 <abort>
 800118a:	bf00      	nop

0800118c <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 800118c:	b570      	push	{r4, r5, r6, lr}
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800118e:	f8d0 50c4 	ldr.w	r5, [r0, #196]	; 0xc4
 8001192:	b1fd      	cbz	r5, 80011d4 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x48>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001194:	6983      	ldr	r3, [r0, #24]
 8001196:	2b20      	cmp	r3, #32
 8001198:	4604      	mov	r4, r0
 800119a:	460e      	mov	r6, r1
 800119c:	d039      	beq.n	8001212 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x86>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800119e:	2d01      	cmp	r5, #1
 80011a0:	d018      	beq.n	80011d4 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x48>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80011a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80011a4:	2b20      	cmp	r3, #32
 80011a6:	d03a      	beq.n	800121e <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x92>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80011a8:	2d02      	cmp	r5, #2
 80011aa:	d013      	beq.n	80011d4 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x48>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80011ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011ae:	2b20      	cmp	r3, #32
 80011b0:	d03d      	beq.n	800122e <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0xa2>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80011b2:	2d03      	cmp	r5, #3
 80011b4:	d00e      	beq.n	80011d4 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x48>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80011b6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80011b8:	2b20      	cmp	r3, #32
 80011ba:	d00d      	beq.n	80011d8 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x4c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80011bc:	2d04      	cmp	r5, #4
 80011be:	d009      	beq.n	80011d4 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x48>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80011c0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80011c4:	2b20      	cmp	r3, #32
 80011c6:	d012      	beq.n	80011ee <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x62>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80011c8:	2d05      	cmp	r5, #5
 80011ca:	d003      	beq.n	80011d4 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x48>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80011cc:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 80011d0:	2b20      	cmp	r3, #32
 80011d2:	d015      	beq.n	8001200 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x74>
    return nullptr;
 80011d4:	2000      	movs	r0, #0
  }
 80011d6:	bd70      	pop	{r4, r5, r6, pc}
          (strcmp(registration.custom_name, op) == 0)) {
 80011d8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80011da:	4631      	mov	r1, r6
 80011dc:	f7fe fff8 	bl	80001d0 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d1eb      	bne.n	80011bc <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x30>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80011e4:	2003      	movs	r0, #3
      const TfLiteRegistration& registration = registrations_[i];
 80011e6:	eb04 1440 	add.w	r4, r4, r0, lsl #5
 80011ea:	1d20      	adds	r0, r4, #4
  }
 80011ec:	bd70      	pop	{r4, r5, r6, pc}
          (strcmp(registration.custom_name, op) == 0)) {
 80011ee:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 80011f2:	4631      	mov	r1, r6
 80011f4:	f7fe ffec 	bl	80001d0 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d1e5      	bne.n	80011c8 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x3c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80011fc:	2004      	movs	r0, #4
 80011fe:	e7f2      	b.n	80011e6 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x5a>
          (strcmp(registration.custom_name, op) == 0)) {
 8001200:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 8001204:	4631      	mov	r1, r6
 8001206:	f7fe ffe3 	bl	80001d0 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 800120a:	2800      	cmp	r0, #0
 800120c:	d1e2      	bne.n	80011d4 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x48>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800120e:	2005      	movs	r0, #5
 8001210:	e7e9      	b.n	80011e6 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x5a>
          (strcmp(registration.custom_name, op) == 0)) {
 8001212:	69c0      	ldr	r0, [r0, #28]
 8001214:	f7fe ffdc 	bl	80001d0 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001218:	2800      	cmp	r0, #0
 800121a:	d1c0      	bne.n	800119e <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x12>
 800121c:	e7e3      	b.n	80011e6 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x5a>
          (strcmp(registration.custom_name, op) == 0)) {
 800121e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001220:	4631      	mov	r1, r6
 8001222:	f7fe ffd5 	bl	80001d0 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001226:	2800      	cmp	r0, #0
 8001228:	d1be      	bne.n	80011a8 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x1c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800122a:	2001      	movs	r0, #1
 800122c:	e7db      	b.n	80011e6 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x5a>
          (strcmp(registration.custom_name, op) == 0)) {
 800122e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001230:	4631      	mov	r1, r6
 8001232:	f7fe ffcd 	bl	80001d0 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001236:	2800      	cmp	r0, #0
 8001238:	d1bb      	bne.n	80011b2 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x26>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800123a:	2002      	movs	r0, #2
 800123c:	e7d3      	b.n	80011e6 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x5a>
 800123e:	bf00      	nop

08001240 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 8001240:	b430      	push	{r4, r5}
                                   int version) const final {
    return FindOp(op);
 8001242:	6804      	ldr	r4, [r0, #0]
 8001244:	4d1f      	ldr	r5, [pc, #124]	; (80012c4 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x84>)
 8001246:	6964      	ldr	r4, [r4, #20]
 8001248:	42ac      	cmp	r4, r5
 800124a:	d12f      	bne.n	80012ac <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x6c>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 800124c:	2920      	cmp	r1, #32
 800124e:	460a      	mov	r2, r1
 8001250:	d023      	beq.n	800129a <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x5a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001252:	4603      	mov	r3, r0
 8001254:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8001258:	b300      	cbz	r0, 800129c <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x5c>
      if (registration.builtin_code == op) {
 800125a:	6999      	ldr	r1, [r3, #24]
 800125c:	428a      	cmp	r2, r1
 800125e:	d01f      	beq.n	80012a0 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x60>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001260:	2801      	cmp	r0, #1
 8001262:	d01a      	beq.n	800129a <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x5a>
      if (registration.builtin_code == op) {
 8001264:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001266:	428a      	cmp	r2, r1
 8001268:	d023      	beq.n	80012b2 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x72>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800126a:	2802      	cmp	r0, #2
 800126c:	d015      	beq.n	800129a <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x5a>
      if (registration.builtin_code == op) {
 800126e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8001270:	428a      	cmp	r2, r1
 8001272:	d020      	beq.n	80012b6 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x76>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001274:	2803      	cmp	r0, #3
 8001276:	d010      	beq.n	800129a <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x5a>
      if (registration.builtin_code == op) {
 8001278:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800127a:	428a      	cmp	r2, r1
 800127c:	d01d      	beq.n	80012ba <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x7a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800127e:	2804      	cmp	r0, #4
 8001280:	d00b      	beq.n	800129a <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x5a>
      if (registration.builtin_code == op) {
 8001282:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8001286:	428a      	cmp	r2, r1
 8001288:	d019      	beq.n	80012be <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x7e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800128a:	2805      	cmp	r0, #5
 800128c:	d005      	beq.n	800129a <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x5a>
      if (registration.builtin_code == op) {
 800128e:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8001292:	428a      	cmp	r2, r1
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001294:	bf08      	it	eq
 8001296:	2205      	moveq	r2, #5
      if (registration.builtin_code == op) {
 8001298:	d003      	beq.n	80012a2 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x62>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 800129a:	2000      	movs	r0, #0
  }
 800129c:	bc30      	pop	{r4, r5}
 800129e:	4770      	bx	lr
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80012a0:	2200      	movs	r2, #0
      const TfLiteRegistration& registration = registrations_[i];
 80012a2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80012a6:	1d18      	adds	r0, r3, #4
 80012a8:	bc30      	pop	{r4, r5}
 80012aa:	4770      	bx	lr
    return FindOp(op);
 80012ac:	4623      	mov	r3, r4
  }
 80012ae:	bc30      	pop	{r4, r5}
    return FindOp(op);
 80012b0:	4718      	bx	r3
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80012b2:	2201      	movs	r2, #1
 80012b4:	e7f5      	b.n	80012a2 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x62>
 80012b6:	2202      	movs	r2, #2
 80012b8:	e7f3      	b.n	80012a2 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x62>
 80012ba:	2203      	movs	r2, #3
 80012bc:	e7f1      	b.n	80012a2 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x62>
 80012be:	2204      	movs	r2, #4
 80012c0:	e7ef      	b.n	80012a2 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x62>
 80012c2:	bf00      	nop
 80012c4:	0800108d 	.word	0x0800108d

080012c8 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
    return FindOp(op);
 80012c8:	6803      	ldr	r3, [r0, #0]
 80012ca:	4a2f      	ldr	r2, [pc, #188]	; (8001388 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0xc0>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d146      	bne.n	8001360 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x98>
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 80012d2:	b570      	push	{r4, r5, r6, lr}
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80012d4:	f8d0 50c4 	ldr.w	r5, [r0, #196]	; 0xc4
 80012d8:	4604      	mov	r4, r0
 80012da:	b1f5      	cbz	r5, 800131a <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x52>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80012dc:	6983      	ldr	r3, [r0, #24]
 80012de:	2b20      	cmp	r3, #32
 80012e0:	460e      	mov	r6, r1
 80012e2:	d01c      	beq.n	800131e <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x56>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80012e4:	2d01      	cmp	r5, #1
 80012e6:	d018      	beq.n	800131a <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x52>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80012e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80012ea:	2b20      	cmp	r3, #32
 80012ec:	d020      	beq.n	8001330 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x68>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80012ee:	2d02      	cmp	r5, #2
 80012f0:	d013      	beq.n	800131a <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x52>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80012f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80012f4:	2b20      	cmp	r3, #32
 80012f6:	d023      	beq.n	8001340 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x78>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80012f8:	2d03      	cmp	r5, #3
 80012fa:	d00e      	beq.n	800131a <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x52>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80012fc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80012fe:	2b20      	cmp	r3, #32
 8001300:	d026      	beq.n	8001350 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x88>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001302:	2d04      	cmp	r5, #4
 8001304:	d009      	beq.n	800131a <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x52>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001306:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800130a:	2b20      	cmp	r3, #32
 800130c:	d029      	beq.n	8001362 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x9a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800130e:	2d05      	cmp	r5, #5
 8001310:	d003      	beq.n	800131a <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x52>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001312:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8001316:	2b20      	cmp	r3, #32
 8001318:	d02c      	beq.n	8001374 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0xac>
    return nullptr;
 800131a:	2000      	movs	r0, #0
  }
 800131c:	bd70      	pop	{r4, r5, r6, pc}
          (strcmp(registration.custom_name, op) == 0)) {
 800131e:	69c0      	ldr	r0, [r0, #28]
 8001320:	f7fe ff56 	bl	80001d0 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001324:	2800      	cmp	r0, #0
 8001326:	d1dd      	bne.n	80012e4 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x1c>
      const TfLiteRegistration& registration = registrations_[i];
 8001328:	eb04 1440 	add.w	r4, r4, r0, lsl #5
 800132c:	1d20      	adds	r0, r4, #4
 800132e:	bd70      	pop	{r4, r5, r6, pc}
          (strcmp(registration.custom_name, op) == 0)) {
 8001330:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001332:	4631      	mov	r1, r6
 8001334:	f7fe ff4c 	bl	80001d0 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001338:	2800      	cmp	r0, #0
 800133a:	d1d8      	bne.n	80012ee <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x26>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800133c:	2001      	movs	r0, #1
 800133e:	e7f3      	b.n	8001328 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x60>
          (strcmp(registration.custom_name, op) == 0)) {
 8001340:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001342:	4631      	mov	r1, r6
 8001344:	f7fe ff44 	bl	80001d0 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001348:	2800      	cmp	r0, #0
 800134a:	d1d5      	bne.n	80012f8 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x30>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800134c:	2002      	movs	r0, #2
 800134e:	e7eb      	b.n	8001328 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x60>
          (strcmp(registration.custom_name, op) == 0)) {
 8001350:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001352:	4631      	mov	r1, r6
 8001354:	f7fe ff3c 	bl	80001d0 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001358:	2800      	cmp	r0, #0
 800135a:	d1d2      	bne.n	8001302 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x3a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800135c:	2003      	movs	r0, #3
 800135e:	e7e3      	b.n	8001328 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x60>
    return FindOp(op);
 8001360:	4718      	bx	r3
          (strcmp(registration.custom_name, op) == 0)) {
 8001362:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8001366:	4631      	mov	r1, r6
 8001368:	f7fe ff32 	bl	80001d0 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 800136c:	2800      	cmp	r0, #0
 800136e:	d1ce      	bne.n	800130e <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x46>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001370:	2004      	movs	r0, #4
 8001372:	e7d9      	b.n	8001328 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x60>
          (strcmp(registration.custom_name, op) == 0)) {
 8001374:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 8001378:	4631      	mov	r1, r6
 800137a:	f7fe ff29 	bl	80001d0 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 800137e:	2800      	cmp	r0, #0
 8001380:	d1cb      	bne.n	800131a <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x52>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001382:	2005      	movs	r0, #5
 8001384:	e7d0      	b.n	8001328 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x60>
 8001386:	bf00      	nop
 8001388:	0800118d 	.word	0x0800118d

0800138c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800138c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800138e:	2400      	movs	r4, #0
{
 8001390:	b0bb      	sub	sp, #236	; 0xec
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001392:	4621      	mov	r1, r4
 8001394:	2224      	movs	r2, #36	; 0x24
 8001396:	a807      	add	r0, sp, #28
 8001398:	f010 fe6a 	bl	8012070 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800139c:	4621      	mov	r1, r4
 800139e:	2288      	movs	r2, #136	; 0x88
 80013a0:	a818      	add	r0, sp, #96	; 0x60
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80013a6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80013aa:	9405      	str	r4, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ac:	f010 fe60 	bl	8012070 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013b0:	2310      	movs	r3, #16
 80013b2:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013b4:	2360      	movs	r3, #96	; 0x60
 80013b6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b8:	2302      	movs	r3, #2
 80013ba:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013bc:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 40;
 80013be:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013c0:	2207      	movs	r2, #7
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013c2:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLN = 40;
 80013c4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013c8:	2302      	movs	r3, #2
 80013ca:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013ce:	e9cd 5511 	strd	r5, r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013d2:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d4:	f000 ffd2 	bl	800237c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013da:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013dc:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013de:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e0:	2303      	movs	r3, #3
 80013e2:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013e4:	e9cd 4403 	strd	r4, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e8:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013ea:	f001 faaf 	bl	800294c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ee:	a818      	add	r0, sp, #96	; 0x60
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013f0:	9518      	str	r5, [sp, #96]	; 0x60
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013f2:	9426      	str	r4, [sp, #152]	; 0x98
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f4:	f001 fc96 	bl	8002d24 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013fc:	f000 fedc 	bl	80021b8 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 8001400:	b03b      	add	sp, #236	; 0xec
 8001402:	bd30      	pop	{r4, r5, pc}

08001404 <main>:
{
 8001404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001408:	f6ad 1d34 	subw	sp, sp, #2356	; 0x934
  HAL_Init();
 800140c:	f000 fd2c 	bl	8001e68 <HAL_Init>
  SystemClock_Config();
 8001410:	f7ff ffbc 	bl	800138c <_Z18SystemClock_Configv>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001414:	4bc0      	ldr	r3, [pc, #768]	; (8001718 <main+0x314>)
  huart1.Instance = USART1;
 8001416:	48c1      	ldr	r0, [pc, #772]	; (800171c <main+0x318>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001418:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800141a:	f042 0202 	orr.w	r2, r2, #2
 800141e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001420:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001422:	f002 0202 	and.w	r2, r2, #2
 8001426:	9207      	str	r2, [sp, #28]
 8001428:	9c07      	ldr	r4, [sp, #28]
  huart1.Instance = USART1;
 800142a:	4abd      	ldr	r2, [pc, #756]	; (8001720 <main+0x31c>)
  static tflite::MicroErrorReporter micro_error_reporter;
 800142c:	4cbd      	ldr	r4, [pc, #756]	; (8001724 <main+0x320>)
  huart1.Instance = USART1;
 800142e:	6002      	str	r2, [r0, #0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001430:	2300      	movs	r3, #0
  huart1.Init.BaudRate = 115200;
 8001432:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001436:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001438:	e9c0 1301 	strd	r1, r3, [r0, #4]
  huart1.Init.Parity = UART_PARITY_NONE;
 800143c:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001440:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001444:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001448:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800144a:	f002 f9e1 	bl	8003810 <HAL_UART_Init>
  static tflite::MicroErrorReporter micro_error_reporter;
 800144e:	6823      	ldr	r3, [r4, #0]
 8001450:	f3bf 8f5b 	dmb	ish
 8001454:	07db      	lsls	r3, r3, #31
 8001456:	d52a      	bpl.n	80014ae <main+0xaa>
  buf_len = sprintf(buf, "START TEST\r\n");
 8001458:	4bb3      	ldr	r3, [pc, #716]	; (8001728 <main+0x324>)
  error_reporter = &micro_error_reporter;
 800145a:	f8df a300 	ldr.w	sl, [pc, #768]	; 800175c <main+0x358>
  model = tflite::GetModel(MFCC);
 800145e:	4eb3      	ldr	r6, [pc, #716]	; (800172c <main+0x328>)
  buf_len = sprintf(buf, "START TEST\r\n");
 8001460:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001462:	ad08      	add	r5, sp, #32
 8001464:	462c      	mov	r4, r5
 8001466:	c407      	stmia	r4!, {r0, r1, r2}
  error_reporter = &micro_error_reporter;
 8001468:	48b1      	ldr	r0, [pc, #708]	; (8001730 <main+0x32c>)
  buf_len = sprintf(buf, "START TEST\r\n");
 800146a:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 800146c:	220c      	movs	r2, #12
 800146e:	2364      	movs	r3, #100	; 0x64
 8001470:	4629      	mov	r1, r5
  error_reporter = &micro_error_reporter;
 8001472:	f8ca 0000 	str.w	r0, [sl]
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001476:	48a9      	ldr	r0, [pc, #676]	; (800171c <main+0x318>)
 8001478:	f001 fe74 	bl	8003164 <HAL_UART_Transmit>
  error_reporter->Report("STM32 TensorFlow Lite test");
 800147c:	49ad      	ldr	r1, [pc, #692]	; (8001734 <main+0x330>)
 800147e:	f8da 0000 	ldr.w	r0, [sl]
 8001482:	f002 fa07 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
// Helpers to get a typed pointer to the root object contained in the buffer.
template<typename T> T *GetMutableRoot(void *buf) {
  EndianCheck();
  return reinterpret_cast<T *>(
      reinterpret_cast<uint8_t *>(buf) +
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 8001486:	4bac      	ldr	r3, [pc, #688]	; (8001738 <main+0x334>)
 8001488:	6819      	ldr	r1, [r3, #0]
 800148a:	18ca      	adds	r2, r1, r3
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
 800148c:	585b      	ldr	r3, [r3, r1]
  model = tflite::GetModel(MFCC);
 800148e:	6032      	str	r2, [r6, #0]
 8001490:	1ad3      	subs	r3, r2, r3
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8001492:	8819      	ldrh	r1, [r3, #0]
 8001494:	2904      	cmp	r1, #4
 8001496:	d904      	bls.n	80014a2 <main+0x9e>

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001498:	889b      	ldrh	r3, [r3, #4]
  }

  template<typename T> T GetField(voffset_t field, T defaultval) const {
    auto field_offset = GetOptionalFieldOffset(field);
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800149a:	b113      	cbz	r3, 80014a2 <main+0x9e>
  if (model->version() != TFLITE_SCHEMA_VERSION)
 800149c:	58d3      	ldr	r3, [r2, r3]
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d011      	beq.n	80014c6 <main+0xc2>
    error_reporter->Report("Model version does not match Schema");
 80014a2:	49a6      	ldr	r1, [pc, #664]	; (800173c <main+0x338>)
 80014a4:	f8da 0000 	ldr.w	r0, [sl]
 80014a8:	f002 f9f4 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	while(1);
 80014ac:	e7fe      	b.n	80014ac <main+0xa8>
  static tflite::MicroErrorReporter micro_error_reporter;
 80014ae:	4620      	mov	r0, r4
 80014b0:	f00f fb90 	bl	8010bd4 <__cxa_guard_acquire>
 80014b4:	2800      	cmp	r0, #0
 80014b6:	d0cf      	beq.n	8001458 <main+0x54>
 80014b8:	48a1      	ldr	r0, [pc, #644]	; (8001740 <main+0x33c>)
 80014ba:	f00f fe89 	bl	80111d0 <atexit>
 80014be:	4620      	mov	r0, r4
 80014c0:	f00f fb94 	bl	8010bec <__cxa_guard_release>
 80014c4:	e7c8      	b.n	8001458 <main+0x54>
      : error_reporter_(error_reporter) {}
 80014c6:	ac15      	add	r4, sp, #84	; 0x54
 80014c8:	2700      	movs	r7, #0
 80014ca:	4b9e      	ldr	r3, [pc, #632]	; (8001744 <main+0x340>)
 80014cc:	6023      	str	r3, [r4, #0]
 80014ce:	e9c4 773a 	strd	r7, r7, [r4, #232]	; 0xe8
 80014d2:	f8c4 70c4 	str.w	r7, [r4, #196]	; 0xc4
  tflite_status = micro_op_resolver.AddFullyConnected();
 80014d6:	a851      	add	r0, sp, #324	; 0x144
 80014d8:	f00a f9d8 	bl	800b88c <_ZN6tflite24Register_FULLY_CONNECTEDEv>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80014dc:	463b      	mov	r3, r7
 80014de:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 80014e2:	4627      	mov	r7, r4
 80014e4:	4621      	mov	r1, r4
 80014e6:	e006      	b.n	80014f6 <main+0xf2>
      if (registration.builtin_code == op) {
 80014e8:	f851 2c08 	ldr.w	r2, [r1, #-8]
 80014ec:	2a09      	cmp	r2, #9
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80014ee:	f103 0301 	add.w	r3, r3, #1
      if (registration.builtin_code == op) {
 80014f2:	f000 81bc 	beq.w	800186e <main+0x46a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80014f6:	4283      	cmp	r3, r0
      if (registration.builtin_code == op) {
 80014f8:	f101 0120 	add.w	r1, r1, #32
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80014fc:	d1f4      	bne.n	80014e8 <main+0xe4>
                             op);
      }
      return kTfLiteError;
    }

    if (registrations_len_ >= tOpCount) {
 80014fe:	2b06      	cmp	r3, #6
 8001500:	f000 81c1 	beq.w	8001886 <main+0x482>
                             op, tOpCount);
      }
      return kTfLiteError;
    }

    registrations_[registrations_len_] = registration;
 8001504:	eb04 1843 	add.w	r8, r4, r3, lsl #5
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
    registrations_len_++;
 8001508:	3301      	adds	r3, #1
 800150a:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4

    builtin_codes_[num_buitin_ops_] = op;
 800150e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8001512:	18e2      	adds	r2, r4, r3
    registrations_[registrations_len_].builtin_code = op;
 8001514:	f04f 0909 	mov.w	r9, #9
    builtin_codes_[num_buitin_ops_] = op;
 8001518:	f882 90c8 	strb.w	r9, [r2, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
 800151c:	f103 0234 	add.w	r2, r3, #52	; 0x34
    num_buitin_ops_++;
 8001520:	3301      	adds	r3, #1
 8001522:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    registrations_[registrations_len_] = registration;
 8001526:	f50d 7ea2 	add.w	lr, sp, #324	; 0x144
    builtin_parsers_[num_buitin_ops_] = parser;
 800152a:	4b87      	ldr	r3, [pc, #540]	; (8001748 <main+0x344>)
 800152c:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
    registrations_[registrations_len_] = registration;
 8001530:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001534:	f108 0c04 	add.w	ip, r8, #4
 8001538:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800153c:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8001540:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return AddBuiltin(BuiltinOperator_CONV_2D, Register_CONV_2D(), ParseConv2D);
 8001544:	a851      	add	r0, sp, #324	; 0x144
    registrations_[registrations_len_].builtin_code = op;
 8001546:	f8c8 9018 	str.w	r9, [r8, #24]
    return AddBuiltin(BuiltinOperator_CONV_2D, Register_CONV_2D(), ParseConv2D);
 800154a:	f009 fa09 	bl	800a960 <_ZN6tflite16Register_CONV_2DEv>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800154e:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 8001552:	4621      	mov	r1, r4
 8001554:	2300      	movs	r3, #0
 8001556:	e006      	b.n	8001566 <main+0x162>
      if (registration.builtin_code == op) {
 8001558:	f851 2c08 	ldr.w	r2, [r1, #-8]
 800155c:	2a03      	cmp	r2, #3
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800155e:	f103 0301 	add.w	r3, r3, #1
      if (registration.builtin_code == op) {
 8001562:	f000 81a5 	beq.w	80018b0 <main+0x4ac>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001566:	4283      	cmp	r3, r0
      if (registration.builtin_code == op) {
 8001568:	f101 0120 	add.w	r1, r1, #32
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800156c:	d1f4      	bne.n	8001558 <main+0x154>
    if (registrations_len_ >= tOpCount) {
 800156e:	2b06      	cmp	r3, #6
 8001570:	f000 81aa 	beq.w	80018c8 <main+0x4c4>
    registrations_[registrations_len_] = registration;
 8001574:	eb04 1843 	add.w	r8, r4, r3, lsl #5
    registrations_len_++;
 8001578:	3301      	adds	r3, #1
 800157a:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    builtin_codes_[num_buitin_ops_] = op;
 800157e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8001582:	18e2      	adds	r2, r4, r3
    registrations_[registrations_len_].builtin_code = op;
 8001584:	f04f 0903 	mov.w	r9, #3
    builtin_codes_[num_buitin_ops_] = op;
 8001588:	f882 90c8 	strb.w	r9, [r2, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
 800158c:	f103 0234 	add.w	r2, r3, #52	; 0x34
    num_buitin_ops_++;
 8001590:	3301      	adds	r3, #1
 8001592:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    registrations_[registrations_len_] = registration;
 8001596:	f50d 7ea2 	add.w	lr, sp, #324	; 0x144
    builtin_parsers_[num_buitin_ops_] = parser;
 800159a:	4b6c      	ldr	r3, [pc, #432]	; (800174c <main+0x348>)
 800159c:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
    registrations_[registrations_len_] = registration;
 80015a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80015a4:	f108 0c04 	add.w	ip, r8, #4
 80015a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80015ac:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 80015b0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
 80015b4:	a851      	add	r0, sp, #324	; 0x144
    registrations_[registrations_len_].builtin_code = op;
 80015b6:	f8c8 9018 	str.w	r9, [r8, #24]
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
 80015ba:	f007 fed7 	bl	800936c <_ZN6tflite3ops5micro16Register_RESHAPEEv>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80015be:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 80015c2:	4621      	mov	r1, r4
 80015c4:	2300      	movs	r3, #0
 80015c6:	e006      	b.n	80015d6 <main+0x1d2>
      if (registration.builtin_code == op) {
 80015c8:	f851 2c08 	ldr.w	r2, [r1, #-8]
 80015cc:	2a16      	cmp	r2, #22
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80015ce:	f103 0301 	add.w	r3, r3, #1
      if (registration.builtin_code == op) {
 80015d2:	f000 8161 	beq.w	8001898 <main+0x494>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80015d6:	4283      	cmp	r3, r0
      if (registration.builtin_code == op) {
 80015d8:	f101 0120 	add.w	r1, r1, #32
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80015dc:	d1f4      	bne.n	80015c8 <main+0x1c4>
    if (registrations_len_ >= tOpCount) {
 80015de:	2b06      	cmp	r3, #6
 80015e0:	f000 8187 	beq.w	80018f2 <main+0x4ee>
    registrations_[registrations_len_] = registration;
 80015e4:	eb04 1843 	add.w	r8, r4, r3, lsl #5
    registrations_len_++;
 80015e8:	3301      	adds	r3, #1
 80015ea:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    builtin_codes_[num_buitin_ops_] = op;
 80015ee:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 80015f2:	18e2      	adds	r2, r4, r3
    registrations_[registrations_len_].builtin_code = op;
 80015f4:	f04f 0916 	mov.w	r9, #22
    builtin_codes_[num_buitin_ops_] = op;
 80015f8:	f882 90c8 	strb.w	r9, [r2, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
 80015fc:	f103 0234 	add.w	r2, r3, #52	; 0x34
    num_buitin_ops_++;
 8001600:	3301      	adds	r3, #1
 8001602:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    registrations_[registrations_len_] = registration;
 8001606:	f50d 7ea2 	add.w	lr, sp, #324	; 0x144
    builtin_parsers_[num_buitin_ops_] = parser;
 800160a:	4b51      	ldr	r3, [pc, #324]	; (8001750 <main+0x34c>)
 800160c:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
    registrations_[registrations_len_] = registration;
 8001610:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001614:	f108 0c04 	add.w	ip, r8, #4
 8001618:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800161c:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8001620:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
                      tflite::ops::micro::Register_MAX_POOL_2D(), ParsePool);
 8001624:	a851      	add	r0, sp, #324	; 0x144
    registrations_[registrations_len_].builtin_code = op;
 8001626:	f8c8 9018 	str.w	r9, [r8, #24]
                      tflite::ops::micro::Register_MAX_POOL_2D(), ParsePool);
 800162a:	f00b f93b 	bl	800c8a4 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800162e:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 8001632:	4621      	mov	r1, r4
 8001634:	2300      	movs	r3, #0
 8001636:	e006      	b.n	8001646 <main+0x242>
      if (registration.builtin_code == op) {
 8001638:	f851 2c08 	ldr.w	r2, [r1, #-8]
 800163c:	2a11      	cmp	r2, #17
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800163e:	f103 0301 	add.w	r3, r3, #1
      if (registration.builtin_code == op) {
 8001642:	f000 814a 	beq.w	80018da <main+0x4d6>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001646:	4283      	cmp	r3, r0
      if (registration.builtin_code == op) {
 8001648:	f101 0120 	add.w	r1, r1, #32
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800164c:	d1f4      	bne.n	8001638 <main+0x234>
    if (registrations_len_ >= tOpCount) {
 800164e:	2b06      	cmp	r3, #6
 8001650:	f000 8164 	beq.w	800191c <main+0x518>
    registrations_[registrations_len_] = registration;
 8001654:	eb04 1843 	add.w	r8, r4, r3, lsl #5
    registrations_len_++;
 8001658:	3301      	adds	r3, #1
 800165a:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    builtin_codes_[num_buitin_ops_] = op;
 800165e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8001662:	18e2      	adds	r2, r4, r3
    registrations_[registrations_len_].builtin_code = op;
 8001664:	f04f 0911 	mov.w	r9, #17
    builtin_codes_[num_buitin_ops_] = op;
 8001668:	f882 90c8 	strb.w	r9, [r2, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
 800166c:	f103 0234 	add.w	r2, r3, #52	; 0x34
    num_buitin_ops_++;
 8001670:	3301      	adds	r3, #1
 8001672:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    registrations_[registrations_len_] = registration;
 8001676:	f50d 7ea2 	add.w	lr, sp, #324	; 0x144
    builtin_parsers_[num_buitin_ops_] = parser;
 800167a:	4b36      	ldr	r3, [pc, #216]	; (8001754 <main+0x350>)
 800167c:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
    registrations_[registrations_len_] = registration;
 8001680:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001684:	f108 0c04 	add.w	ip, r8, #4
 8001688:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800168c:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8001690:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return AddBuiltin(BuiltinOperator_MEAN, tflite::ops::micro::Register_MEAN(),
 8001694:	a851      	add	r0, sp, #324	; 0x144
    registrations_[registrations_len_].builtin_code = op;
 8001696:	f8c8 9018 	str.w	r9, [r8, #24]
    return AddBuiltin(BuiltinOperator_MEAN, tflite::ops::micro::Register_MEAN(),
 800169a:	f006 f9c3 	bl	8007a24 <_ZN6tflite3ops5micro13Register_MEANEv>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800169e:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 80016a2:	4621      	mov	r1, r4
 80016a4:	2300      	movs	r3, #0
 80016a6:	e006      	b.n	80016b6 <main+0x2b2>
      if (registration.builtin_code == op) {
 80016a8:	f851 2c08 	ldr.w	r2, [r1, #-8]
 80016ac:	2a28      	cmp	r2, #40	; 0x28
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80016ae:	f103 0301 	add.w	r3, r3, #1
      if (registration.builtin_code == op) {
 80016b2:	f000 8127 	beq.w	8001904 <main+0x500>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80016b6:	4283      	cmp	r3, r0
      if (registration.builtin_code == op) {
 80016b8:	f101 0120 	add.w	r1, r1, #32
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80016bc:	d1f4      	bne.n	80016a8 <main+0x2a4>
    if (registrations_len_ >= tOpCount) {
 80016be:	2b06      	cmp	r3, #6
 80016c0:	f000 8262 	beq.w	8001b88 <main+0x784>
    registrations_[registrations_len_] = registration;
 80016c4:	eb04 1843 	add.w	r8, r4, r3, lsl #5
    registrations_len_++;
 80016c8:	3301      	adds	r3, #1
 80016ca:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    builtin_codes_[num_buitin_ops_] = op;
 80016ce:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 80016d2:	18e2      	adds	r2, r4, r3
    registrations_[registrations_len_].builtin_code = op;
 80016d4:	f04f 0928 	mov.w	r9, #40	; 0x28
    builtin_codes_[num_buitin_ops_] = op;
 80016d8:	f882 90c8 	strb.w	r9, [r2, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
 80016dc:	f103 0234 	add.w	r2, r3, #52	; 0x34
    num_buitin_ops_++;
 80016e0:	3301      	adds	r3, #1
 80016e2:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    registrations_[registrations_len_] = registration;
 80016e6:	f50d 7ea2 	add.w	lr, sp, #324	; 0x144
    builtin_parsers_[num_buitin_ops_] = parser;
 80016ea:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <main+0x354>)
 80016ec:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
    registrations_[registrations_len_] = registration;
 80016f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80016f4:	f108 0c04 	add.w	ip, r8, #4
 80016f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80016fc:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8001700:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
 8001704:	f8c8 9018 	str.w	r9, [r8, #24]
    return AddBuiltin(BuiltinOperator_SOFTMAX, Register_SOFTMAX(),
 8001708:	a851      	add	r0, sp, #324	; 0x144
 800170a:	f00b fa3f 	bl	800cb8c <_ZN6tflite16Register_SOFTMAXEv>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800170e:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8001712:	2300      	movs	r3, #0
 8001714:	e02b      	b.n	800176e <main+0x36a>
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000
 800171c:	2000e924 	.word	0x2000e924
 8001720:	40013800 	.word	0x40013800
 8001724:	20007074 	.word	0x20007074
 8001728:	080140b0 	.word	0x080140b0
 800172c:	20007088 	.word	0x20007088
 8001730:	20006e70 	.word	0x20006e70
 8001734:	080140c0 	.word	0x080140c0
 8001738:	20000000 	.word	0x20000000
 800173c:	080140dc 	.word	0x080140dc
 8001740:	08001089 	.word	0x08001089
 8001744:	08014b74 	.word	0x08014b74
 8001748:	08003a45 	.word	0x08003a45
 800174c:	08003965 	.word	0x08003965
 8001750:	08003c55 	.word	0x08003c55
 8001754:	08003b19 	.word	0x08003b19
 8001758:	08003be9 	.word	0x08003be9
 800175c:	20007084 	.word	0x20007084
      if (registration.builtin_code == op) {
 8001760:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8001764:	2a19      	cmp	r2, #25
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001766:	f103 0301 	add.w	r3, r3, #1
      if (registration.builtin_code == op) {
 800176a:	f000 80e0 	beq.w	800192e <main+0x52a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800176e:	428b      	cmp	r3, r1
      if (registration.builtin_code == op) {
 8001770:	f107 0720 	add.w	r7, r7, #32
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001774:	d1f4      	bne.n	8001760 <main+0x35c>
    if (registrations_len_ >= tOpCount) {
 8001776:	2b06      	cmp	r3, #6
 8001778:	f000 81fc 	beq.w	8001b74 <main+0x770>
    registrations_[registrations_len_] = registration;
 800177c:	eb04 1b43 	add.w	fp, r4, r3, lsl #5
    registrations_len_++;
 8001780:	3301      	adds	r3, #1
 8001782:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    builtin_codes_[num_buitin_ops_] = op;
 8001786:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
  buf_len = sprintf(buf, "ALL ADDED RIGHT\r\n");
 800178a:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8001a54 <main+0x650>
	  model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 800178e:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8001a58 <main+0x654>
 8001792:	18e2      	adds	r2, r4, r3
 8001794:	f04f 0119 	mov.w	r1, #25
 8001798:	f882 10c8 	strb.w	r1, [r2, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
 800179c:	f103 0234 	add.w	r2, r3, #52	; 0x34
    num_buitin_ops_++;
 80017a0:	3301      	adds	r3, #1
 80017a2:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    registrations_[registrations_len_] = registration;
 80017a6:	f50d 7ea2 	add.w	lr, sp, #324	; 0x144
    builtin_parsers_[num_buitin_ops_] = parser;
 80017aa:	4b95      	ldr	r3, [pc, #596]	; (8001a00 <main+0x5fc>)
 80017ac:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
    registrations_[registrations_len_] = registration;
 80017b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80017b4:	f10b 0c04 	add.w	ip, fp, #4
 80017b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80017bc:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 80017c0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
 80017c4:	2319      	movs	r3, #25
 80017c6:	f8cb 3018 	str.w	r3, [fp, #24]
  buf_len = sprintf(buf, "ALL ADDED RIGHT\r\n");
 80017ca:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80017ce:	462f      	mov	r7, r5
 80017d0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80017d2:	f8d8 3000 	ldr.w	r3, [r8]
 80017d6:	803b      	strh	r3, [r7, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 80017d8:	2211      	movs	r2, #17
 80017da:	2364      	movs	r3, #100	; 0x64
 80017dc:	4629      	mov	r1, r5
 80017de:	4889      	ldr	r0, [pc, #548]	; (8001a04 <main+0x600>)
 80017e0:	f001 fcc0 	bl	8003164 <HAL_UART_Transmit>
  buf_len = sprintf(buf, "Interpreter\r\n");
 80017e4:	4b88      	ldr	r3, [pc, #544]	; (8001a08 <main+0x604>)
 80017e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017e8:	462f      	mov	r7, r5
 80017ea:	c707      	stmia	r7!, {r0, r1, r2}
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 80017ec:	4885      	ldr	r0, [pc, #532]	; (8001a04 <main+0x600>)
  buf_len = sprintf(buf, "Interpreter\r\n");
 80017ee:	803b      	strh	r3, [r7, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 80017f0:	220d      	movs	r2, #13
 80017f2:	2364      	movs	r3, #100	; 0x64
 80017f4:	4629      	mov	r1, r5
 80017f6:	f001 fcb5 	bl	8003164 <HAL_UART_Transmit>
	  model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 80017fa:	f8d9 7000 	ldr.w	r7, [r9]
 80017fe:	f3bf 8f5b 	dmb	ish
 8001802:	f017 0701 	ands.w	r7, r7, #1
 8001806:	f000 819b 	beq.w	8001b40 <main+0x73c>
  interpreter = &static_interpreter;
 800180a:	4f80      	ldr	r7, [pc, #512]	; (8001a0c <main+0x608>)
  buf_len = sprintf(buf, "Successful\r\n");
 800180c:	4e80      	ldr	r6, [pc, #512]	; (8001a10 <main+0x60c>)
  interpreter = &static_interpreter;
 800180e:	4b81      	ldr	r3, [pc, #516]	; (8001a14 <main+0x610>)
 8001810:	603b      	str	r3, [r7, #0]
  buf_len = sprintf(buf, "Successful\r\n");
 8001812:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001816:	462c      	mov	r4, r5
 8001818:	c407      	stmia	r4!, {r0, r1, r2}
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 800181a:	220c      	movs	r2, #12
  buf_len = sprintf(buf, "Successful\r\n");
 800181c:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 800181e:	4629      	mov	r1, r5
 8001820:	2364      	movs	r3, #100	; 0x64
 8001822:	4878      	ldr	r0, [pc, #480]	; (8001a04 <main+0x600>)
 8001824:	f001 fc9e 	bl	8003164 <HAL_UART_Transmit>
  buf_len = sprintf(buf, "Tensors\r\n");
 8001828:	4a7b      	ldr	r2, [pc, #492]	; (8001a18 <main+0x614>)
 800182a:	ca07      	ldmia	r2, {r0, r1, r2}
 800182c:	462c      	mov	r4, r5
 800182e:	c403      	stmia	r4!, {r0, r1}
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001830:	2364      	movs	r3, #100	; 0x64
  buf_len = sprintf(buf, "Tensors\r\n");
 8001832:	8022      	strh	r2, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001834:	4629      	mov	r1, r5
 8001836:	2209      	movs	r2, #9
 8001838:	4872      	ldr	r0, [pc, #456]	; (8001a04 <main+0x600>)
 800183a:	f001 fc93 	bl	8003164 <HAL_UART_Transmit>
  tflite_status = interpreter->AllocateTensors();
 800183e:	6838      	ldr	r0, [r7, #0]
 8001840:	f004 fc42 	bl	80060c8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
  if (tflite_status != kTfLiteOk)
 8001844:	4681      	mov	r9, r0
 8001846:	2800      	cmp	r0, #0
 8001848:	d07d      	beq.n	8001946 <main+0x542>
	buf_len = sprintf(buf, "Failed tensors\r\n");
 800184a:	4e74      	ldr	r6, [pc, #464]	; (8001a1c <main+0x618>)
 800184c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800184e:	462c      	mov	r4, r5
 8001850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001852:	6832      	ldr	r2, [r6, #0]
 8001854:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001856:	4629      	mov	r1, r5
 8001858:	486a      	ldr	r0, [pc, #424]	; (8001a04 <main+0x600>)
 800185a:	2364      	movs	r3, #100	; 0x64
 800185c:	2210      	movs	r2, #16
 800185e:	f001 fc81 	bl	8003164 <HAL_UART_Transmit>
	error_reporter->Report("AllocateTensors() failed");
 8001862:	496f      	ldr	r1, [pc, #444]	; (8001a20 <main+0x61c>)
 8001864:	f8da 0000 	ldr.w	r0, [sl]
 8001868:	f002 f814 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	while(1);
 800186c:	e7fe      	b.n	800186c <main+0x468>
      if (error_reporter_ != nullptr) {
 800186e:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 8001872:	b110      	cbz	r0, 800187a <main+0x476>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001874:	496b      	ldr	r1, [pc, #428]	; (8001a24 <main+0x620>)
 8001876:	f002 f80d 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	error_reporter->Report("Could not add FULLY CONNECTED op");
 800187a:	496b      	ldr	r1, [pc, #428]	; (8001a28 <main+0x624>)
 800187c:	f8da 0000 	ldr.w	r0, [sl]
 8001880:	f002 f808 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	while(1);
 8001884:	e7fe      	b.n	8001884 <main+0x480>
 8001886:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
      if (error_reporter_) {
 800188a:	2800      	cmp	r0, #0
 800188c:	d0f5      	beq.n	800187a <main+0x476>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800188e:	4967      	ldr	r1, [pc, #412]	; (8001a2c <main+0x628>)
 8001890:	2209      	movs	r2, #9
 8001892:	f001 ffff 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  if (tflite_status != kTfLiteOk)
 8001896:	e7f0      	b.n	800187a <main+0x476>
      if (error_reporter_ != nullptr) {
 8001898:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 800189c:	b110      	cbz	r0, 80018a4 <main+0x4a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800189e:	4961      	ldr	r1, [pc, #388]	; (8001a24 <main+0x620>)
 80018a0:	f001 fff8 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  	error_reporter->Report("Could not add RESHAPE op");
 80018a4:	4962      	ldr	r1, [pc, #392]	; (8001a30 <main+0x62c>)
 80018a6:	f8da 0000 	ldr.w	r0, [sl]
 80018aa:	f001 fff3 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  	while(1);
 80018ae:	e7fe      	b.n	80018ae <main+0x4aa>
      if (error_reporter_ != nullptr) {
 80018b0:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 80018b4:	b110      	cbz	r0, 80018bc <main+0x4b8>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80018b6:	495b      	ldr	r1, [pc, #364]	; (8001a24 <main+0x620>)
 80018b8:	f001 ffec 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  	error_reporter->Report("Could not add CONV2D op");
 80018bc:	495d      	ldr	r1, [pc, #372]	; (8001a34 <main+0x630>)
 80018be:	f8da 0000 	ldr.w	r0, [sl]
 80018c2:	f001 ffe7 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  	while(1);
 80018c6:	e7fe      	b.n	80018c6 <main+0x4c2>
 80018c8:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
      if (error_reporter_) {
 80018cc:	2800      	cmp	r0, #0
 80018ce:	d0f5      	beq.n	80018bc <main+0x4b8>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80018d0:	4956      	ldr	r1, [pc, #344]	; (8001a2c <main+0x628>)
 80018d2:	2203      	movs	r2, #3
 80018d4:	f001 ffde 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  if (tflite_status != kTfLiteOk)
 80018d8:	e7f0      	b.n	80018bc <main+0x4b8>
      if (error_reporter_ != nullptr) {
 80018da:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 80018de:	b110      	cbz	r0, 80018e6 <main+0x4e2>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80018e0:	4950      	ldr	r1, [pc, #320]	; (8001a24 <main+0x620>)
 80018e2:	f001 ffd7 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	error_reporter->Report("Could not add MaxPool op");
 80018e6:	4954      	ldr	r1, [pc, #336]	; (8001a38 <main+0x634>)
 80018e8:	f8da 0000 	ldr.w	r0, [sl]
 80018ec:	f001 ffd2 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	while(1);
 80018f0:	e7fe      	b.n	80018f0 <main+0x4ec>
 80018f2:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
      if (error_reporter_) {
 80018f6:	2800      	cmp	r0, #0
 80018f8:	d0d4      	beq.n	80018a4 <main+0x4a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80018fa:	494c      	ldr	r1, [pc, #304]	; (8001a2c <main+0x628>)
 80018fc:	2216      	movs	r2, #22
 80018fe:	f001 ffc9 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  if (tflite_status != kTfLiteOk)
 8001902:	e7cf      	b.n	80018a4 <main+0x4a0>
      if (error_reporter_ != nullptr) {
 8001904:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 8001908:	b110      	cbz	r0, 8001910 <main+0x50c>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800190a:	4946      	ldr	r1, [pc, #280]	; (8001a24 <main+0x620>)
 800190c:	f001 ffc2 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  error_reporter->Report("Could not add Mean op");
 8001910:	494a      	ldr	r1, [pc, #296]	; (8001a3c <main+0x638>)
 8001912:	f8da 0000 	ldr.w	r0, [sl]
 8001916:	f001 ffbd 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  while(1);
 800191a:	e7fe      	b.n	800191a <main+0x516>
 800191c:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
      if (error_reporter_) {
 8001920:	2800      	cmp	r0, #0
 8001922:	d0e0      	beq.n	80018e6 <main+0x4e2>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001924:	4941      	ldr	r1, [pc, #260]	; (8001a2c <main+0x628>)
 8001926:	2211      	movs	r2, #17
 8001928:	f001 ffb4 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  if (tflite_status != kTfLiteOk)
 800192c:	e7db      	b.n	80018e6 <main+0x4e2>
      if (error_reporter_ != nullptr) {
 800192e:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 8001932:	b110      	cbz	r0, 800193a <main+0x536>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001934:	493b      	ldr	r1, [pc, #236]	; (8001a24 <main+0x620>)
 8001936:	f001 ffad 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  error_reporter->Report("Could not add Softmax op");
 800193a:	4941      	ldr	r1, [pc, #260]	; (8001a40 <main+0x63c>)
 800193c:	f8da 0000 	ldr.w	r0, [sl]
 8001940:	f001 ffa8 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  while(1);
 8001944:	e7fe      	b.n	8001944 <main+0x540>
  buf_len = sprintf(buf, "Successful\r\n");
 8001946:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800194a:	46ac      	mov	ip, r5
 800194c:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
	  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001950:	4c2c      	ldr	r4, [pc, #176]	; (8001a04 <main+0x600>)
  buf_len = sprintf(buf, "Successful\r\n");
 8001952:	f88c 3000 	strb.w	r3, [ip]
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001956:	220c      	movs	r2, #12
 8001958:	2364      	movs	r3, #100	; 0x64
 800195a:	4629      	mov	r1, r5
 800195c:	4620      	mov	r0, r4
 800195e:	f001 fc01 	bl	8003164 <HAL_UART_Transmit>
  model_input = interpreter->input(0);
 8001962:	4649      	mov	r1, r9
 8001964:	6838      	ldr	r0, [r7, #0]
 8001966:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8001a5c <main+0x658>
  model_output = interpreter->output(0);
 800196a:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 8001a60 <main+0x65c>
  model_input = interpreter->input(0);
 800196e:	f004 fa75 	bl	8005e5c <_ZN6tflite16MicroInterpreter5inputEj>
  model_output = interpreter->output(0);
 8001972:	4649      	mov	r1, r9
  model_input = interpreter->input(0);
 8001974:	f8c8 0000 	str.w	r0, [r8]
  model_output = interpreter->output(0);
 8001978:	6838      	ldr	r0, [r7, #0]
 800197a:	f004 facf 	bl	8005f1c <_ZN6tflite16MicroInterpreter6outputEj>
  float input_size = model_input->dims->size;
 800197e:	f8d8 3000 	ldr.w	r3, [r8]
  model_output = interpreter->output(0);
 8001982:	f8cb 0000 	str.w	r0, [fp]
  float input_size = model_input->dims->size;
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	6818      	ldr	r0, [r3, #0]
  buf_len = sprintf(buf, "Model input size: %f\r\n", input_size);
 800198a:	ee07 0a90 	vmov	s15, r0
 800198e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001992:	ee17 0a90 	vmov	r0, s15
 8001996:	f7fe fde7 	bl	8000568 <__aeabi_f2d>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4628      	mov	r0, r5
 80019a0:	4928      	ldr	r1, [pc, #160]	; (8001a44 <main+0x640>)
 80019a2:	f010 fa53 	bl	8011e4c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 80019a6:	2364      	movs	r3, #100	; 0x64
 80019a8:	b282      	uxth	r2, r0
 80019aa:	4629      	mov	r1, r5
 80019ac:	4620      	mov	r0, r4
 80019ae:	f001 fbd9 	bl	8003164 <HAL_UART_Transmit>
  num_elements = model_input->bytes / sizeof(int) * 4;
 80019b2:	f8d8 3000 	ldr.w	r3, [r8]
  buf_len = sprintf(buf, "Number of input elements: %lu\r\n", num_elements);
 80019b6:	4924      	ldr	r1, [pc, #144]	; (8001a48 <main+0x644>)
  num_elements = model_input->bytes / sizeof(int) * 4;
 80019b8:	699e      	ldr	r6, [r3, #24]
 80019ba:	f026 0603 	bic.w	r6, r6, #3
  buf_len = sprintf(buf, "Number of input elements: %lu\r\n", num_elements);
 80019be:	4632      	mov	r2, r6
 80019c0:	4628      	mov	r0, r5
 80019c2:	f010 fa43 	bl	8011e4c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 80019c6:	2364      	movs	r3, #100	; 0x64
 80019c8:	b282      	uxth	r2, r0
 80019ca:	4629      	mov	r1, r5
 80019cc:	4620      	mov	r0, r4
 80019ce:	f001 fbc9 	bl	8003164 <HAL_UART_Transmit>
 80019d2:	46b1      	mov	r9, r6
	  buf_len = sprintf(buf, "In while loop\r\n");
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <main+0x648>)
 80019d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019d8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 80019dc:	2364      	movs	r3, #100	; 0x64
 80019de:	220f      	movs	r2, #15
 80019e0:	4629      	mov	r1, r5
 80019e2:	4620      	mov	r0, r4
 80019e4:	f001 fbbe 	bl	8003164 <HAL_UART_Transmit>
	  signed char test[] = {
 80019e8:	4919      	ldr	r1, [pc, #100]	; (8001a50 <main+0x64c>)
 80019ea:	f240 72ec 	movw	r2, #2028	; 0x7ec
 80019ee:	a851      	add	r0, sp, #324	; 0x144
 80019f0:	f010 fc23 	bl	801223a <memcpy>
		  model_input->data.f[i] = test[i];
 80019f4:	f8d8 0000 	ldr.w	r0, [r8]
 80019f8:	a951      	add	r1, sp, #324	; 0x144
	  for (uint32_t i = 0; i < num_elements; i++) {
 80019fa:	2300      	movs	r3, #0
 80019fc:	e03e      	b.n	8001a7c <main+0x678>
 80019fe:	bf00      	nop
 8001a00:	08003d39 	.word	0x08003d39
 8001a04:	2000e924 	.word	0x2000e924
 8001a08:	08014234 	.word	0x08014234
 8001a0c:	20007078 	.word	0x20007078
 8001a10:	08014260 	.word	0x08014260
 8001a14:	2000e88c 	.word	0x2000e88c
 8001a18:	08014270 	.word	0x08014270
 8001a1c:	0801427c 	.word	0x0801427c
 8001a20:	08014290 	.word	0x08014290
 8001a24:	08014100 	.word	0x08014100
 8001a28:	08014194 	.word	0x08014194
 8001a2c:	08014150 	.word	0x08014150
 8001a30:	080141d0 	.word	0x080141d0
 8001a34:	080141b8 	.word	0x080141b8
 8001a38:	080141ec 	.word	0x080141ec
 8001a3c:	08014208 	.word	0x08014208
 8001a40:	08014244 	.word	0x08014244
 8001a44:	080142ac 	.word	0x080142ac
 8001a48:	080142c4 	.word	0x080142c4
 8001a4c:	080142e4 	.word	0x080142e4
 8001a50:	0801437c 	.word	0x0801437c
 8001a54:	08014220 	.word	0x08014220
 8001a58:	20007070 	.word	0x20007070
 8001a5c:	2000707c 	.word	0x2000707c
 8001a60:	20007080 	.word	0x20007080
		  model_input->data.f[i] = test[i];
 8001a64:	f911 2b01 	ldrsb.w	r2, [r1], #1
 8001a68:	ee07 2a90 	vmov	s15, r2
 8001a6c:	6842      	ldr	r2, [r0, #4]
 8001a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a72:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001a76:	edc2 7a00 	vstr	s15, [r2]
	  for (uint32_t i = 0; i < num_elements; i++) {
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	454b      	cmp	r3, r9
 8001a7e:	d1f1      	bne.n	8001a64 <main+0x660>
	  buf_len = sprintf(buf, "Timer reset\r\n");
 8001a80:	4b46      	ldr	r3, [pc, #280]	; (8001b9c <main+0x798>)
 8001a82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a84:	462e      	mov	r6, r5
 8001a86:	c607      	stmia	r6!, {r0, r1, r2}
	  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001a88:	4629      	mov	r1, r5
 8001a8a:	220d      	movs	r2, #13
	  buf_len = sprintf(buf, "Timer reset\r\n");
 8001a8c:	8033      	strh	r3, [r6, #0]
	  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001a8e:	4620      	mov	r0, r4
 8001a90:	2364      	movs	r3, #100	; 0x64
 8001a92:	f001 fb67 	bl	8003164 <HAL_UART_Transmit>
	  ResetTimer();
 8001a96:	f7ff fabb 	bl	8001010 <_Z10ResetTimerv>
	  StartTimer();
 8001a9a:	f7ff fad7 	bl	800104c <_Z10StartTimerv>
	  tflite_status = interpreter->Invoke();
 8001a9e:	6838      	ldr	r0, [r7, #0]
 8001aa0:	f004 fbe6 	bl	8006270 <_ZN6tflite16MicroInterpreter6InvokeEv>
 8001aa4:	4606      	mov	r6, r0
	  StopTimer();
 8001aa6:	f7ff fadb 	bl	8001060 <_Z9StopTimerv>
	  buf_len = sprintf(buf, "Timer result: %u\r\n",getCycles());
 8001aaa:	f7ff fae1 	bl	8001070 <_Z9getCyclesv>
 8001aae:	493c      	ldr	r1, [pc, #240]	; (8001ba0 <main+0x79c>)
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	4628      	mov	r0, r5
 8001ab4:	f010 f9ca 	bl	8011e4c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001ab8:	2364      	movs	r3, #100	; 0x64
 8001aba:	b282      	uxth	r2, r0
 8001abc:	4629      	mov	r1, r5
 8001abe:	4620      	mov	r0, r4
 8001ac0:	f001 fb50 	bl	8003164 <HAL_UART_Transmit>
	  if(tflite_status != kTfLiteOk)
 8001ac4:	b176      	cbz	r6, 8001ae4 <main+0x6e0>
		  buf_len = sprintf(buf, "Invoke failed\r\n");
 8001ac6:	4b37      	ldr	r3, [pc, #220]	; (8001ba4 <main+0x7a0>)
 8001ac8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001ace:	4629      	mov	r1, r5
 8001ad0:	2364      	movs	r3, #100	; 0x64
 8001ad2:	220f      	movs	r2, #15
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	f001 fb45 	bl	8003164 <HAL_UART_Transmit>
		  error_reporter->Report("Invoke failed");
 8001ada:	4933      	ldr	r1, [pc, #204]	; (8001ba8 <main+0x7a4>)
 8001adc:	f8da 0000 	ldr.w	r0, [sl]
 8001ae0:	f001 fed8 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  y_val_0 = model_output->data.int8[0];
 8001ae4:	f8db 2000 	ldr.w	r2, [fp]
	  buf_len = sprintf(buf, "Number of output elements: %lu\r\n", num_output_elements);
 8001ae8:	4930      	ldr	r1, [pc, #192]	; (8001bac <main+0x7a8>)
	  y_val_0 = model_output->data.int8[0];
 8001aea:	6853      	ldr	r3, [r2, #4]
	  buf_len = sprintf(buf, "Number of output elements: %lu\r\n", num_output_elements);
 8001aec:	6992      	ldr	r2, [r2, #24]
	  y_val_0 = model_output->data.int8[0];
 8001aee:	f993 6000 	ldrsb.w	r6, [r3]
 8001af2:	9605      	str	r6, [sp, #20]
	  buf_len = sprintf(buf, "Number of output elements: %lu\r\n", num_output_elements);
 8001af4:	4628      	mov	r0, r5
	  y_val_1 = model_output->data.int8[1];
 8001af6:	f993 6001 	ldrsb.w	r6, [r3, #1]
	  buf_len = sprintf(buf, "Number of output elements: %lu\r\n", num_output_elements);
 8001afa:	f010 f9a7 	bl	8011e4c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001afe:	2364      	movs	r3, #100	; 0x64
 8001b00:	b282      	uxth	r2, r0
 8001b02:	4629      	mov	r1, r5
 8001b04:	4620      	mov	r0, r4
 8001b06:	f001 fb2d 	bl	8003164 <HAL_UART_Transmit>
	  buf_len = sprintf(buf, "Output 0: %i\r\n", y_val_0);
 8001b0a:	9a05      	ldr	r2, [sp, #20]
 8001b0c:	4928      	ldr	r1, [pc, #160]	; (8001bb0 <main+0x7ac>)
 8001b0e:	4628      	mov	r0, r5
 8001b10:	f010 f99c 	bl	8011e4c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001b14:	2364      	movs	r3, #100	; 0x64
 8001b16:	b282      	uxth	r2, r0
 8001b18:	4629      	mov	r1, r5
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	f001 fb22 	bl	8003164 <HAL_UART_Transmit>
	  buf_len = sprintf(buf, "Output 1: %i\r\n", y_val_1);
 8001b20:	4632      	mov	r2, r6
 8001b22:	4924      	ldr	r1, [pc, #144]	; (8001bb4 <main+0x7b0>)
 8001b24:	4628      	mov	r0, r5
 8001b26:	f010 f991 	bl	8011e4c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001b2a:	2364      	movs	r3, #100	; 0x64
 8001b2c:	b282      	uxth	r2, r0
 8001b2e:	4629      	mov	r1, r5
 8001b30:	4620      	mov	r0, r4
 8001b32:	f001 fb17 	bl	8003164 <HAL_UART_Transmit>
	  HAL_Delay(2000);
 8001b36:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b3a:	f000 f9b7 	bl	8001eac <HAL_Delay>
  }
 8001b3e:	e749      	b.n	80019d4 <main+0x5d0>
	  model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 8001b40:	4648      	mov	r0, r9
 8001b42:	f00f f847 	bl	8010bd4 <__cxa_guard_acquire>
 8001b46:	2800      	cmp	r0, #0
 8001b48:	f43f ae5f 	beq.w	800180a <main+0x406>
 8001b4c:	f8da 3000 	ldr.w	r3, [sl]
 8001b50:	9702      	str	r7, [sp, #8]
 8001b52:	6831      	ldr	r1, [r6, #0]
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8001b5a:	4622      	mov	r2, r4
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	4816      	ldr	r0, [pc, #88]	; (8001bb8 <main+0x7b4>)
 8001b60:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <main+0x7b8>)
 8001b62:	f004 f8ef 	bl	8005d44 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>
 8001b66:	4816      	ldr	r0, [pc, #88]	; (8001bc0 <main+0x7bc>)
 8001b68:	f00f fb32 	bl	80111d0 <atexit>
 8001b6c:	4648      	mov	r0, r9
 8001b6e:	f00f f83d 	bl	8010bec <__cxa_guard_release>
 8001b72:	e64a      	b.n	800180a <main+0x406>
 8001b74:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
      if (error_reporter_) {
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	f43f aede 	beq.w	800193a <main+0x536>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001b7e:	4911      	ldr	r1, [pc, #68]	; (8001bc4 <main+0x7c0>)
 8001b80:	2219      	movs	r2, #25
 8001b82:	f001 fe87 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  if (tflite_status != kTfLiteOk)
 8001b86:	e6d8      	b.n	800193a <main+0x536>
 8001b88:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
      if (error_reporter_) {
 8001b8c:	2800      	cmp	r0, #0
 8001b8e:	f43f aebf 	beq.w	8001910 <main+0x50c>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001b92:	490c      	ldr	r1, [pc, #48]	; (8001bc4 <main+0x7c0>)
 8001b94:	2228      	movs	r2, #40	; 0x28
 8001b96:	f001 fe7d 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  if (tflite_status != kTfLiteOk)
 8001b9a:	e6b9      	b.n	8001910 <main+0x50c>
 8001b9c:	080142f4 	.word	0x080142f4
 8001ba0:	08014304 	.word	0x08014304
 8001ba4:	08014318 	.word	0x08014318
 8001ba8:	08014328 	.word	0x08014328
 8001bac:	08014338 	.word	0x08014338
 8001bb0:	0801435c 	.word	0x0801435c
 8001bb4:	0801436c 	.word	0x0801436c
 8001bb8:	2000e88c 	.word	0x2000e88c
 8001bbc:	2000708c 	.word	0x2000708c
 8001bc0:	080010f9 	.word	0x080010f9
 8001bc4:	08014150 	.word	0x08014150

08001bc8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop

08001bcc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <HAL_MspInit+0x2c>)
 8001bce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bd0:	f042 0201 	orr.w	r2, r2, #1
 8001bd4:	661a      	str	r2, [r3, #96]	; 0x60
 8001bd6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001bd8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bda:	f002 0201 	and.w	r2, r2, #1
 8001bde:	9200      	str	r2, [sp, #0]
 8001be0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001be4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001be8:	659a      	str	r2, [r3, #88]	; 0x58
 8001bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	9301      	str	r3, [sp, #4]
 8001bf2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf4:	b002      	add	sp, #8
 8001bf6:	4770      	bx	lr
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	00000000 	.word	0x00000000

08001c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c00:	b510      	push	{r4, lr}
 8001c02:	4604      	mov	r4, r0
 8001c04:	b0aa      	sub	sp, #168	; 0xa8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c06:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c08:	2288      	movs	r2, #136	; 0x88
 8001c0a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001c10:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001c14:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c16:	f010 fa2b 	bl	8012070 <memset>
  if(huart->Instance==USART1)
 8001c1a:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_UART_MspInit+0x90>)
 8001c1c:	6822      	ldr	r2, [r4, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d001      	beq.n	8001c26 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c22:	b02a      	add	sp, #168	; 0xa8
 8001c24:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c26:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c28:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c2a:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c2c:	f001 f87a 	bl	8002d24 <HAL_RCCEx_PeriphCLKConfig>
 8001c30:	bb10      	cbnz	r0, 8001c78 <HAL_UART_MspInit+0x78>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <HAL_UART_MspInit+0x94>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c34:	4818      	ldr	r0, [pc, #96]	; (8001c98 <HAL_UART_MspInit+0x98>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c3c:	661a      	str	r2, [r3, #96]	; 0x60
 8001c3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c40:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c44:	9200      	str	r2, [sp, #0]
 8001c46:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c4a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8001c80 <HAL_UART_MspInit+0x80>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4e:	f042 0202 	orr.w	r2, r2, #2
 8001c52:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c56:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001c5a:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8001c88 <HAL_UART_MspInit+0x88>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c64:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c66:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c68:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6c:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c6e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c70:	f000 f998 	bl	8001fa4 <HAL_GPIO_Init>
}
 8001c74:	b02a      	add	sp, #168	; 0xa8
 8001c76:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001c78:	f7ff ffa6 	bl	8001bc8 <Error_Handler>
 8001c7c:	e7d9      	b.n	8001c32 <HAL_UART_MspInit+0x32>
 8001c7e:	bf00      	nop
 8001c80:	000000e0 	.word	0x000000e0
 8001c84:	00000002 	.word	0x00000002
 8001c88:	00000000 	.word	0x00000000
 8001c8c:	00000003 	.word	0x00000003
 8001c90:	40013800 	.word	0x40013800
 8001c94:	40021000 	.word	0x40021000
 8001c98:	48000400 	.word	0x48000400

08001c9c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop

08001ca0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <HardFault_Handler>
 8001ca2:	bf00      	nop

08001ca4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <MemManage_Handler>
 8001ca6:	bf00      	nop

08001ca8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <BusFault_Handler>
 8001caa:	bf00      	nop

08001cac <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <UsageFault_Handler>
 8001cae:	bf00      	nop

08001cb0 <SVC_Handler>:
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop

08001cb4 <DebugMon_Handler>:
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop

08001cb8 <PendSV_Handler>:
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop

08001cbc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cbc:	f000 b8e4 	b.w	8001e88 <HAL_IncTick>

08001cc0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	4770      	bx	lr

08001cc4 <_kill>:

int _kill(int pid, int sig)
{
 8001cc4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001cc6:	f010 fa8b 	bl	80121e0 <__errno>
 8001cca:	2316      	movs	r3, #22
 8001ccc:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001cce:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd2:	bd08      	pop	{r3, pc}

08001cd4 <_exit>:

void _exit (int status)
{
 8001cd4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001cd6:	f010 fa83 	bl	80121e0 <__errno>
 8001cda:	2316      	movs	r3, #22
 8001cdc:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001cde:	e7fe      	b.n	8001cde <_exit+0xa>

08001ce0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ce0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce2:	1e16      	subs	r6, r2, #0
 8001ce4:	dd07      	ble.n	8001cf6 <_read+0x16>
 8001ce6:	460c      	mov	r4, r1
 8001ce8:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001cea:	f3af 8000 	nop.w
 8001cee:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf2:	42a5      	cmp	r5, r4
 8001cf4:	d1f9      	bne.n	8001cea <_read+0xa>
	}

return len;
}
 8001cf6:	4630      	mov	r0, r6
 8001cf8:	bd70      	pop	{r4, r5, r6, pc}
 8001cfa:	bf00      	nop

08001cfc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cfc:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfe:	1e16      	subs	r6, r2, #0
 8001d00:	dd07      	ble.n	8001d12 <_write+0x16>
 8001d02:	460c      	mov	r4, r1
 8001d04:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8001d06:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001d0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0e:	42ac      	cmp	r4, r5
 8001d10:	d1f9      	bne.n	8001d06 <_write+0xa>
	}
	return len;
}
 8001d12:	4630      	mov	r0, r6
 8001d14:	bd70      	pop	{r4, r5, r6, pc}
 8001d16:	bf00      	nop

08001d18 <_close>:

int _close(int file)
{
	return -1;
}
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop

08001d20 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d24:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001d26:	2000      	movs	r0, #0
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop

08001d2c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	4770      	bx	lr

08001d30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001d30:	2000      	movs	r0, #0
 8001d32:	4770      	bx	lr

08001d34 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d34:	490c      	ldr	r1, [pc, #48]	; (8001d68 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d36:	4a0d      	ldr	r2, [pc, #52]	; (8001d6c <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001d38:	680b      	ldr	r3, [r1, #0]
{
 8001d3a:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d3c:	4c0c      	ldr	r4, [pc, #48]	; (8001d70 <_sbrk+0x3c>)
 8001d3e:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001d40:	b12b      	cbz	r3, 8001d4e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d42:	4418      	add	r0, r3
 8001d44:	4290      	cmp	r0, r2
 8001d46:	d807      	bhi.n	8001d58 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001d48:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <_sbrk+0x40>)
 8001d50:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001d52:	4418      	add	r0, r3
 8001d54:	4290      	cmp	r0, r2
 8001d56:	d9f7      	bls.n	8001d48 <_sbrk+0x14>
    errno = ENOMEM;
 8001d58:	f010 fa42 	bl	80121e0 <__errno>
 8001d5c:	230c      	movs	r3, #12
 8001d5e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	bd10      	pop	{r4, pc}
 8001d68:	2000e9ac 	.word	0x2000e9ac
 8001d6c:	20018000 	.word	0x20018000
 8001d70:	00004000 	.word	0x00004000
 8001d74:	2000ebb8 	.word	0x2000ebb8

08001d78 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d78:	4911      	ldr	r1, [pc, #68]	; (8001dc0 <SystemInit+0x48>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <SystemInit+0x4c>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d7c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d80:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 8001d84:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d86:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 8001d8a:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001d8c:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8001d94:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001d9c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 8001da0:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001da4:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 8001da6:	60dc      	str	r4, [r3, #12]

  /* Reset HSEBYP bit */

  RCC->CR &= 0xFFFBFFFFU;
 8001da8:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001daa:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= 0xFFFBFFFFU;
 8001dae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001db2:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000U;
 8001db4:	6198      	str	r0, [r3, #24]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001db6:	608c      	str	r4, [r1, #8]
#endif
}
 8001db8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000ed00 	.word	0xe000ed00
 8001dc4:	40021000 	.word	0x40021000

08001dc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dcc:	f7ff ffd4 	bl	8001d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001dd0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001dd2:	e003      	b.n	8001ddc <LoopCopyDataInit>

08001dd4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001dd6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001dd8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001dda:	3104      	adds	r1, #4

08001ddc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ddc:	480a      	ldr	r0, [pc, #40]	; (8001e08 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001de0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001de2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001de4:	d3f6      	bcc.n	8001dd4 <CopyDataInit>
	ldr	r2, =_sbss
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001de8:	e002      	b.n	8001df0 <LoopFillZerobss>

08001dea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001dea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001dec:	f842 3b04 	str.w	r3, [r2], #4

08001df0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <LoopForever+0x16>)
	cmp	r2, r3
 8001df2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001df4:	d3f9      	bcc.n	8001dea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001df6:	f010 f9f9 	bl	80121ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dfa:	f7ff fb03 	bl	8001404 <main>

08001dfe <LoopForever>:

LoopForever:
    b LoopForever
 8001dfe:	e7fe      	b.n	8001dfe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e00:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001e04:	08017b78 	.word	0x08017b78
	ldr	r0, =_sdata
 8001e08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e0c:	2000704c 	.word	0x2000704c
	ldr	r2, =_sbss
 8001e10:	2000704c 	.word	0x2000704c
	ldr	r3, = _ebss
 8001e14:	2000ebb4 	.word	0x2000ebb4

08001e18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e18:	e7fe      	b.n	8001e18 <ADC1_2_IRQHandler>
	...

08001e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e1c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <HAL_InitTick+0x40>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	b90b      	cbnz	r3, 8001e28 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e24:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001e26:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e28:	490d      	ldr	r1, [pc, #52]	; (8001e60 <HAL_InitTick+0x44>)
 8001e2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e2e:	4605      	mov	r5, r0
 8001e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e34:	6808      	ldr	r0, [r1, #0]
 8001e36:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e3a:	f000 f899 	bl	8001f70 <HAL_SYSTICK_Config>
 8001e3e:	4604      	mov	r4, r0
 8001e40:	2800      	cmp	r0, #0
 8001e42:	d1ef      	bne.n	8001e24 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e44:	2d0f      	cmp	r5, #15
 8001e46:	d8ed      	bhi.n	8001e24 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4629      	mov	r1, r5
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	f000 f850 	bl	8001ef4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <HAL_InitTick+0x48>)
 8001e56:	4620      	mov	r0, r4
 8001e58:	601d      	str	r5, [r3, #0]
}
 8001e5a:	bd38      	pop	{r3, r4, r5, pc}
 8001e5c:	20006e78 	.word	0x20006e78
 8001e60:	20006e74 	.word	0x20006e74
 8001e64:	20006e7c 	.word	0x20006e7c

08001e68 <HAL_Init>:
{
 8001e68:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e6a:	2003      	movs	r0, #3
 8001e6c:	f000 f830 	bl	8001ed0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e70:	2000      	movs	r0, #0
 8001e72:	f7ff ffd3 	bl	8001e1c <HAL_InitTick>
 8001e76:	b110      	cbz	r0, 8001e7e <HAL_Init+0x16>
    status = HAL_ERROR;
 8001e78:	2401      	movs	r4, #1
}
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	bd10      	pop	{r4, pc}
 8001e7e:	4604      	mov	r4, r0
    HAL_MspInit();
 8001e80:	f7ff fea4 	bl	8001bcc <HAL_MspInit>
}
 8001e84:	4620      	mov	r0, r4
 8001e86:	bd10      	pop	{r4, pc}

08001e88 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001e88:	4a03      	ldr	r2, [pc, #12]	; (8001e98 <HAL_IncTick+0x10>)
 8001e8a:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <HAL_IncTick+0x14>)
 8001e8c:	6811      	ldr	r1, [r2, #0]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	440b      	add	r3, r1
 8001e92:	6013      	str	r3, [r2, #0]
}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	2000e9b0 	.word	0x2000e9b0
 8001e9c:	20006e78 	.word	0x20006e78

08001ea0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001ea0:	4b01      	ldr	r3, [pc, #4]	; (8001ea8 <HAL_GetTick+0x8>)
 8001ea2:	6818      	ldr	r0, [r3, #0]
}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	2000e9b0 	.word	0x2000e9b0

08001eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eac:	b538      	push	{r3, r4, r5, lr}
 8001eae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001eb0:	f7ff fff6 	bl	8001ea0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001eb6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001eb8:	d002      	beq.n	8001ec0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8001eba:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <HAL_Delay+0x20>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ec0:	f7ff ffee 	bl	8001ea0 <HAL_GetTick>
 8001ec4:	1b43      	subs	r3, r0, r5
 8001ec6:	42a3      	cmp	r3, r4
 8001ec8:	d3fa      	bcc.n	8001ec0 <HAL_Delay+0x14>
  {
  }
}
 8001eca:	bd38      	pop	{r3, r4, r5, pc}
 8001ecc:	20006e78 	.word	0x20006e78

08001ed0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed0:	4907      	ldr	r1, [pc, #28]	; (8001ef0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001ed2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed6:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ede:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001eea:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef4:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <HAL_NVIC_SetPriority+0x74>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001efc:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001efe:	f1c3 0e07 	rsb	lr, r3, #7
 8001f02:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f06:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f0a:	bf28      	it	cs
 8001f0c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f10:	f1bc 0f06 	cmp.w	ip, #6
 8001f14:	d91b      	bls.n	8001f4e <HAL_NVIC_SetPriority+0x5a>
 8001f16:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f18:	f04f 3cff 	mov.w	ip, #4294967295
 8001f1c:	fa0c fc03 	lsl.w	ip, ip, r3
 8001f20:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f24:	f04f 3cff 	mov.w	ip, #4294967295
 8001f28:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001f2c:	ea21 010c 	bic.w	r1, r1, ip
 8001f30:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001f32:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f34:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001f38:	db0c      	blt.n	8001f54 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001f3e:	0109      	lsls	r1, r1, #4
 8001f40:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001f44:	b2c9      	uxtb	r1, r1
 8001f46:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f4e:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f50:	4613      	mov	r3, r2
 8001f52:	e7e7      	b.n	8001f24 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_NVIC_SetPriority+0x78>)
 8001f56:	f000 000f 	and.w	r0, r0, #15
 8001f5a:	0109      	lsls	r1, r1, #4
 8001f5c:	4403      	add	r3, r0
 8001f5e:	b2c9      	uxtb	r1, r1
 8001f60:	7619      	strb	r1, [r3, #24]
 8001f62:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f66:	bf00      	nop
 8001f68:	e000ed00 	.word	0xe000ed00
 8001f6c:	e000ecfc 	.word	0xe000ecfc

08001f70 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f70:	3801      	subs	r0, #1
 8001f72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001f76:	d210      	bcs.n	8001f9a <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f78:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f7a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7e:	4c08      	ldr	r4, [pc, #32]	; (8001fa0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f80:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f82:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8001f86:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f8a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f8e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f90:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8001f92:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f96:	6119      	str	r1, [r3, #16]
 8001f98:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa8:	680c      	ldr	r4, [r1, #0]
{
 8001faa:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fac:	2c00      	cmp	r4, #0
 8001fae:	f000 808e 	beq.w	80020ce <HAL_GPIO_Init+0x12a>
 8001fb2:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fb6:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 80021a4 <HAL_GPIO_Init+0x200>
  uint32_t position = 0x00u;
 8001fba:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fbc:	f04f 0a01 	mov.w	sl, #1
 8001fc0:	4688      	mov	r8, r1
 8001fc2:	fa0a f603 	lsl.w	r6, sl, r3
    if (iocurrent != 0x00u)
 8001fc6:	ea16 0904 	ands.w	r9, r6, r4
 8001fca:	d079      	beq.n	80020c0 <HAL_GPIO_Init+0x11c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fcc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8001fd0:	f001 0203 	and.w	r2, r1, #3
 8001fd4:	1e55      	subs	r5, r2, #1
 8001fd6:	2d01      	cmp	r5, #1
 8001fd8:	d97c      	bls.n	80020d4 <HAL_GPIO_Init+0x130>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001fda:	2a03      	cmp	r2, #3
 8001fdc:	f040 80b7 	bne.w	800214e <HAL_GPIO_Init+0x1aa>
        temp = GPIOx->ASCR;
 8001fe0:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001fe2:	ea25 0606 	bic.w	r6, r5, r6
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001fe6:	f3c1 05c0 	ubfx	r5, r1, #3, #1
 8001fea:	409d      	lsls	r5, r3
 8001fec:	4335      	orrs	r5, r6
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fee:	fa02 f20c 	lsl.w	r2, r2, ip
        GPIOx->ASCR = temp;
 8001ff2:	62c5      	str	r5, [r0, #44]	; 0x2c
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ff4:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8001ff6:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ff8:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ffa:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ffc:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002000:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002002:	d05d      	beq.n	80020c0 <HAL_GPIO_Init+0x11c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002004:	4d60      	ldr	r5, [pc, #384]	; (8002188 <HAL_GPIO_Init+0x1e4>)
 8002006:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8002008:	f042 0201 	orr.w	r2, r2, #1
 800200c:	662a      	str	r2, [r5, #96]	; 0x60
 800200e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8002010:	f002 0201 	and.w	r2, r2, #1
 8002014:	9203      	str	r2, [sp, #12]
 8002016:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002018:	f023 0203 	bic.w	r2, r3, #3
 800201c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002020:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002024:	f003 0603 	and.w	r6, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8002028:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800202a:	00b6      	lsls	r6, r6, #2
 800202c:	270f      	movs	r7, #15
 800202e:	40b7      	lsls	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002030:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002034:	ea25 0507 	bic.w	r5, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002038:	d01b      	beq.n	8002072 <HAL_GPIO_Init+0xce>
 800203a:	4f54      	ldr	r7, [pc, #336]	; (800218c <HAL_GPIO_Init+0x1e8>)
 800203c:	42b8      	cmp	r0, r7
 800203e:	f000 8090 	beq.w	8002162 <HAL_GPIO_Init+0x1be>
 8002042:	4f53      	ldr	r7, [pc, #332]	; (8002190 <HAL_GPIO_Init+0x1ec>)
 8002044:	42b8      	cmp	r0, r7
 8002046:	f000 8090 	beq.w	800216a <HAL_GPIO_Init+0x1c6>
 800204a:	4f52      	ldr	r7, [pc, #328]	; (8002194 <HAL_GPIO_Init+0x1f0>)
 800204c:	42b8      	cmp	r0, r7
 800204e:	f000 8083 	beq.w	8002158 <HAL_GPIO_Init+0x1b4>
 8002052:	4f51      	ldr	r7, [pc, #324]	; (8002198 <HAL_GPIO_Init+0x1f4>)
 8002054:	42b8      	cmp	r0, r7
 8002056:	f000 808d 	beq.w	8002174 <HAL_GPIO_Init+0x1d0>
 800205a:	4f50      	ldr	r7, [pc, #320]	; (800219c <HAL_GPIO_Init+0x1f8>)
 800205c:	42b8      	cmp	r0, r7
 800205e:	f000 808e 	beq.w	800217e <HAL_GPIO_Init+0x1da>
 8002062:	4f4f      	ldr	r7, [pc, #316]	; (80021a0 <HAL_GPIO_Init+0x1fc>)
 8002064:	42b8      	cmp	r0, r7
 8002066:	bf0c      	ite	eq
 8002068:	2706      	moveq	r7, #6
 800206a:	2707      	movne	r7, #7
 800206c:	fa07 f606 	lsl.w	r6, r7, r6
 8002070:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002072:	6095      	str	r5, [r2, #8]
        temp = EXTI->RTSR1;
 8002074:	f8db 2008 	ldr.w	r2, [fp, #8]
        temp &= ~(iocurrent);
 8002078:	ea6f 0509 	mvn.w	r5, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800207c:	02ce      	lsls	r6, r1, #11
        temp &= ~(iocurrent);
 800207e:	bf54      	ite	pl
 8002080:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8002082:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR1 = temp;
 8002086:	f8cb 2008 	str.w	r2, [fp, #8]

        temp = EXTI->FTSR1;
 800208a:	f8db 200c 	ldr.w	r2, [fp, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800208e:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 8002090:	bf54      	ite	pl
 8002092:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8002094:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->FTSR1 = temp;
 8002098:	f8cb 200c 	str.w	r2, [fp, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800209c:	f8db 2004 	ldr.w	r2, [fp, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020a0:	038e      	lsls	r6, r1, #14
        temp &= ~(iocurrent);
 80020a2:	bf54      	ite	pl
 80020a4:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 80020a6:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->EMR1 = temp;
 80020aa:	f8cb 2004 	str.w	r2, [fp, #4]

        temp = EXTI->IMR1;
 80020ae:	f8db 2000 	ldr.w	r2, [fp]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020b2:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 80020b4:	bf54      	ite	pl
 80020b6:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 80020b8:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR1 = temp;
 80020bc:	f8cb 2000 	str.w	r2, [fp]
      }
    }

    position++;
 80020c0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c2:	fa34 f203 	lsrs.w	r2, r4, r3
 80020c6:	f10c 0c02 	add.w	ip, ip, #2
 80020ca:	f47f af7a 	bne.w	8001fc2 <HAL_GPIO_Init+0x1e>
  }
}
 80020ce:	b005      	add	sp, #20
 80020d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80020d4:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020d8:	f8d8 500c 	ldr.w	r5, [r8, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020dc:	2703      	movs	r7, #3
 80020de:	fa07 f70c 	lsl.w	r7, r7, ip
 80020e2:	ea2e 0e07 	bic.w	lr, lr, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020e6:	fa05 f50c 	lsl.w	r5, r5, ip
 80020ea:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OSPEEDR = temp;
 80020ee:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020f0:	43fd      	mvns	r5, r7
        temp = GPIOx->OTYPER;
 80020f2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020f4:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f8:	f3c1 1600 	ubfx	r6, r1, #4, #1
 80020fc:	409e      	lsls	r6, r3
 80020fe:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8002100:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8002102:	68c7      	ldr	r7, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002104:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002108:	402f      	ands	r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800210a:	fa06 f60c 	lsl.w	r6, r6, ip
 800210e:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002110:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8002112:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002114:	fa02 f20c 	lsl.w	r2, r2, ip
 8002118:	f47f af6d 	bne.w	8001ff6 <HAL_GPIO_Init+0x52>
        temp = GPIOx->AFR[position >> 3u];
 800211c:	08df      	lsrs	r7, r3, #3
 800211e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002122:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002126:	6a3e      	ldr	r6, [r7, #32]
 8002128:	9600      	str	r6, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800212a:	f8d8 6010 	ldr.w	r6, [r8, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800212e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002132:	fa06 f60e 	lsl.w	r6, r6, lr
 8002136:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002138:	260f      	movs	r6, #15
 800213a:	fa06 fe0e 	lsl.w	lr, r6, lr
 800213e:	9e00      	ldr	r6, [sp, #0]
 8002140:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002144:	9e01      	ldr	r6, [sp, #4]
 8002146:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 800214a:	623e      	str	r6, [r7, #32]
 800214c:	e753      	b.n	8001ff6 <HAL_GPIO_Init+0x52>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800214e:	2503      	movs	r5, #3
 8002150:	fa05 f50c 	lsl.w	r5, r5, ip
 8002154:	43ed      	mvns	r5, r5
 8002156:	e7d4      	b.n	8002102 <HAL_GPIO_Init+0x15e>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002158:	2703      	movs	r7, #3
 800215a:	fa07 f606 	lsl.w	r6, r7, r6
 800215e:	4335      	orrs	r5, r6
 8002160:	e787      	b.n	8002072 <HAL_GPIO_Init+0xce>
 8002162:	fa0a f606 	lsl.w	r6, sl, r6
 8002166:	4335      	orrs	r5, r6
 8002168:	e783      	b.n	8002072 <HAL_GPIO_Init+0xce>
 800216a:	2702      	movs	r7, #2
 800216c:	fa07 f606 	lsl.w	r6, r7, r6
 8002170:	4335      	orrs	r5, r6
 8002172:	e77e      	b.n	8002072 <HAL_GPIO_Init+0xce>
 8002174:	2704      	movs	r7, #4
 8002176:	fa07 f606 	lsl.w	r6, r7, r6
 800217a:	4335      	orrs	r5, r6
 800217c:	e779      	b.n	8002072 <HAL_GPIO_Init+0xce>
 800217e:	2705      	movs	r7, #5
 8002180:	fa07 f606 	lsl.w	r6, r7, r6
 8002184:	4335      	orrs	r5, r6
 8002186:	e774      	b.n	8002072 <HAL_GPIO_Init+0xce>
 8002188:	40021000 	.word	0x40021000
 800218c:	48000400 	.word	0x48000400
 8002190:	48000800 	.word	0x48000800
 8002194:	48000c00 	.word	0x48000c00
 8002198:	48001000 	.word	0x48001000
 800219c:	48001400 	.word	0x48001400
 80021a0:	48001800 	.word	0x48001800
 80021a4:	40010400 	.word	0x40010400

080021a8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021a8:	4b02      	ldr	r3, [pc, #8]	; (80021b4 <HAL_PWREx_GetVoltageRange+0xc>)
 80021aa:	6818      	ldr	r0, [r3, #0]
#endif
}
 80021ac:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40007000 	.word	0x40007000

080021b8 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021b8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80021bc:	d00e      	beq.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021be:	4a1c      	ldr	r2, [pc, #112]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80021c0:	6813      	ldr	r3, [r2, #0]
 80021c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ca:	d02d      	beq.n	8002228 <HAL_PWREx_ControlVoltageScaling+0x70>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021cc:	6813      	ldr	r3, [r2, #0]
 80021ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021d6:	2000      	movs	r0, #0
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021dc:	4914      	ldr	r1, [pc, #80]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80021de:	680b      	ldr	r3, [r1, #0]
 80021e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021e8:	d01e      	beq.n	8002228 <HAL_PWREx_ControlVoltageScaling+0x70>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ea:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021ec:	4a11      	ldr	r2, [pc, #68]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0x7c>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021f6:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021f8:	6813      	ldr	r3, [r2, #0]
 80021fa:	4a0f      	ldr	r2, [pc, #60]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0x80>)
 80021fc:	2032      	movs	r0, #50	; 0x32
 80021fe:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002202:	6948      	ldr	r0, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002204:	fba2 2303 	umull	r2, r3, r2, r3
 8002208:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800220a:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800220c:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002210:	d506      	bpl.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x68>
 8002212:	e000      	b.n	8002216 <HAL_PWREx_ControlVoltageScaling+0x5e>
 8002214:	b123      	cbz	r3, 8002220 <HAL_PWREx_ControlVoltageScaling+0x68>
 8002216:	694a      	ldr	r2, [r1, #20]
 8002218:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 800221a:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800221e:	d4f9      	bmi.n	8002214 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	055b      	lsls	r3, r3, #21
 8002226:	d401      	bmi.n	800222c <HAL_PWREx_ControlVoltageScaling+0x74>
  return HAL_OK;
 8002228:	2000      	movs	r0, #0
 800222a:	4770      	bx	lr
        return HAL_TIMEOUT;
 800222c:	2003      	movs	r0, #3
}
 800222e:	4770      	bx	lr
 8002230:	40007000 	.word	0x40007000
 8002234:	20006e74 	.word	0x20006e74
 8002238:	431bde83 	.word	0x431bde83

0800223c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800223c:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800223e:	4d20      	ldr	r5, [pc, #128]	; (80022c0 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8002240:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002242:	00db      	lsls	r3, r3, #3
{
 8002244:	b083      	sub	sp, #12
 8002246:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002248:	d51c      	bpl.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0x48>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800224a:	f7ff ffad 	bl	80021a8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800224e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002252:	d029      	beq.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x6c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002254:	2c80      	cmp	r4, #128	; 0x80
 8002256:	d813      	bhi.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x44>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002258:	d02f      	beq.n	80022ba <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 800225a:	f1a4 0470 	sub.w	r4, r4, #112	; 0x70
 800225e:	fab4 f484 	clz	r4, r4
 8002262:	0964      	lsrs	r4, r4, #5
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002264:	4917      	ldr	r1, [pc, #92]	; (80022c4 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002266:	680b      	ldr	r3, [r1, #0]
 8002268:	f023 0307 	bic.w	r3, r3, #7
 800226c:	4323      	orrs	r3, r4
 800226e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002270:	6808      	ldr	r0, [r1, #0]
 8002272:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002276:	1b00      	subs	r0, r0, r4
 8002278:	bf18      	it	ne
 800227a:	2001      	movne	r0, #1
 800227c:	b003      	add	sp, #12
 800227e:	bd30      	pop	{r4, r5, pc}
      latency = FLASH_LATENCY_3; /* 3WS */
 8002280:	2403      	movs	r4, #3
 8002282:	e7ef      	b.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002284:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228a:	65ab      	str	r3, [r5, #88]	; 0x58
 800228c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002296:	f7ff ff87 	bl	80021a8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800229a:	6dab      	ldr	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800229c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 80022a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a4:	65ab      	str	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022a6:	d1d5      	bne.n	8002254 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 80022a8:	2c80      	cmp	r4, #128	; 0x80
 80022aa:	d904      	bls.n	80022b6 <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_1; /* 1WS */
 80022ac:	2ca0      	cmp	r4, #160	; 0xa0
 80022ae:	bf8c      	ite	hi
 80022b0:	2402      	movhi	r4, #2
 80022b2:	2401      	movls	r4, #1
 80022b4:	e7d6      	b.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022b6:	2400      	movs	r4, #0
 80022b8:	e7d4      	b.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ba:	2402      	movs	r4, #2
 80022bc:	e7d2      	b.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x28>
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40022000 	.word	0x40022000

080022c8 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022c8:	4a28      	ldr	r2, [pc, #160]	; (800236c <HAL_RCC_GetSysClockFreq+0xa4>)
 80022ca:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022cc:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022ce:	f013 030c 	ands.w	r3, r3, #12
 80022d2:	d008      	beq.n	80022e6 <HAL_RCC_GetSysClockFreq+0x1e>
 80022d4:	2b0c      	cmp	r3, #12
 80022d6:	d038      	beq.n	800234a <HAL_RCC_GetSysClockFreq+0x82>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d034      	beq.n	8002346 <HAL_RCC_GetSysClockFreq+0x7e>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022dc:	2b08      	cmp	r3, #8
 80022de:	4824      	ldr	r0, [pc, #144]	; (8002370 <HAL_RCC_GetSysClockFreq+0xa8>)
 80022e0:	bf18      	it	ne
 80022e2:	2000      	movne	r0, #0
 80022e4:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022e6:	4a21      	ldr	r2, [pc, #132]	; (800236c <HAL_RCC_GetSysClockFreq+0xa4>)
 80022e8:	6811      	ldr	r1, [r2, #0]
 80022ea:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022ec:	bf54      	ite	pl
 80022ee:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022f2:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 80022f4:	491f      	ldr	r1, [pc, #124]	; (8002374 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022f6:	bf54      	ite	pl
 80022f8:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022fc:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8002300:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002304:	b303      	cbz	r3, 8002348 <HAL_RCC_GetSysClockFreq+0x80>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002306:	2b0c      	cmp	r3, #12
 8002308:	d12d      	bne.n	8002366 <HAL_RCC_GetSysClockFreq+0x9e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800230a:	4b18      	ldr	r3, [pc, #96]	; (800236c <HAL_RCC_GetSysClockFreq+0xa4>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002312:	2b02      	cmp	r3, #2
 8002314:	d025      	beq.n	8002362 <HAL_RCC_GetSysClockFreq+0x9a>
 8002316:	4a16      	ldr	r2, [pc, #88]	; (8002370 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002318:	2b03      	cmp	r3, #3
 800231a:	bf08      	it	eq
 800231c:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002320:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002322:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800232a:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800232e:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002332:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002334:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002338:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800233a:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800233c:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8002340:	fbb2 f0f3 	udiv	r0, r2, r3
 8002344:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8002346:	480c      	ldr	r0, [pc, #48]	; (8002378 <HAL_RCC_GetSysClockFreq+0xb0>)
}
 8002348:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800234a:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800234e:	2a01      	cmp	r2, #1
 8002350:	d0c9      	beq.n	80022e6 <HAL_RCC_GetSysClockFreq+0x1e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800235a:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800235c:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 8002360:	d1d9      	bne.n	8002316 <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = HSI_VALUE;
 8002362:	4805      	ldr	r0, [pc, #20]	; (8002378 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002364:	e7db      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x56>
 8002366:	2000      	movs	r0, #0
  return sysclockfreq;
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	007a1200 	.word	0x007a1200
 8002374:	08014bac 	.word	0x08014bac
 8002378:	00f42400 	.word	0x00f42400

0800237c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800237c:	2800      	cmp	r0, #0
 800237e:	f000 824a 	beq.w	8002816 <HAL_RCC_OscConfig+0x49a>
{
 8002382:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002386:	4aa8      	ldr	r2, [pc, #672]	; (8002628 <HAL_RCC_OscConfig+0x2ac>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002388:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800238a:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800238c:	68d6      	ldr	r6, [r2, #12]
 800238e:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002390:	06d8      	lsls	r0, r3, #27
{
 8002392:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002394:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002398:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800239c:	d52e      	bpl.n	80023fc <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800239e:	2d00      	cmp	r5, #0
 80023a0:	f000 8103 	beq.w	80025aa <HAL_RCC_OscConfig+0x22e>
 80023a4:	2d0c      	cmp	r5, #12
 80023a6:	f000 80fd 	beq.w	80025a4 <HAL_RCC_OscConfig+0x228>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023aa:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 80023ac:	4f9e      	ldr	r7, [pc, #632]	; (8002628 <HAL_RCC_OscConfig+0x2ac>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 81d7 	beq.w	8002762 <HAL_RCC_OscConfig+0x3e6>
        __HAL_RCC_MSI_ENABLE();
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80023bc:	f7ff fd70 	bl	8001ea0 <HAL_GetTick>
 80023c0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023c2:	e006      	b.n	80023d2 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023c4:	f7ff fd6c 	bl	8001ea0 <HAL_GetTick>
 80023c8:	eba0 0008 	sub.w	r0, r0, r8
 80023cc:	2802      	cmp	r0, #2
 80023ce:	f200 81d9 	bhi.w	8002784 <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	079b      	lsls	r3, r3, #30
 80023d6:	d5f5      	bpl.n	80023c4 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	f043 0308 	orr.w	r3, r3, #8
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6a22      	ldr	r2, [r4, #32]
 80023e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023e8:	4313      	orrs	r3, r2
 80023ea:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69e2      	ldr	r2, [r4, #28]
 80023f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80023f8:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023fa:	6823      	ldr	r3, [r4, #0]
 80023fc:	07d9      	lsls	r1, r3, #31
 80023fe:	f100 80a6 	bmi.w	800254e <HAL_RCC_OscConfig+0x1d2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002402:	0799      	lsls	r1, r3, #30
 8002404:	d523      	bpl.n	800244e <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002406:	2d04      	cmp	r5, #4
 8002408:	f000 819a 	beq.w	8002740 <HAL_RCC_OscConfig+0x3c4>
 800240c:	2d0c      	cmp	r5, #12
 800240e:	f000 8194 	beq.w	800273a <HAL_RCC_OscConfig+0x3be>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002412:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8002414:	4e84      	ldr	r6, [pc, #528]	; (8002628 <HAL_RCC_OscConfig+0x2ac>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 81cf 	beq.w	80027ba <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_HSI_ENABLE();
 800241c:	6833      	ldr	r3, [r6, #0]
 800241e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002422:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002424:	f7ff fd3c 	bl	8001ea0 <HAL_GetTick>
 8002428:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800242a:	e005      	b.n	8002438 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800242c:	f7ff fd38 	bl	8001ea0 <HAL_GetTick>
 8002430:	1bc0      	subs	r0, r0, r7
 8002432:	2802      	cmp	r0, #2
 8002434:	f200 81a6 	bhi.w	8002784 <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002438:	6833      	ldr	r3, [r6, #0]
 800243a:	055b      	lsls	r3, r3, #21
 800243c:	d5f6      	bpl.n	800242c <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243e:	6873      	ldr	r3, [r6, #4]
 8002440:	6922      	ldr	r2, [r4, #16]
 8002442:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002446:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800244a:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800244c:	6823      	ldr	r3, [r4, #0]
 800244e:	0719      	lsls	r1, r3, #28
 8002450:	d519      	bpl.n	8002486 <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002452:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002454:	4e74      	ldr	r6, [pc, #464]	; (8002628 <HAL_RCC_OscConfig+0x2ac>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 815b 	beq.w	8002712 <HAL_RCC_OscConfig+0x396>
      __HAL_RCC_LSI_ENABLE();
 800245c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002468:	f7ff fd1a 	bl	8001ea0 <HAL_GetTick>
 800246c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800246e:	e005      	b.n	800247c <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002470:	f7ff fd16 	bl	8001ea0 <HAL_GetTick>
 8002474:	1bc0      	subs	r0, r0, r7
 8002476:	2802      	cmp	r0, #2
 8002478:	f200 8184 	bhi.w	8002784 <HAL_RCC_OscConfig+0x408>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800247c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8002480:	079a      	lsls	r2, r3, #30
 8002482:	d5f5      	bpl.n	8002470 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002484:	6823      	ldr	r3, [r4, #0]
 8002486:	075f      	lsls	r7, r3, #29
 8002488:	d53e      	bpl.n	8002508 <HAL_RCC_OscConfig+0x18c>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800248a:	4b67      	ldr	r3, [pc, #412]	; (8002628 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800248e:	00d6      	lsls	r6, r2, #3
 8002490:	f100 8191 	bmi.w	80027b6 <HAL_RCC_OscConfig+0x43a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002494:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002496:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800249a:	659a      	str	r2, [r3, #88]	; 0x58
 800249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a2:	9301      	str	r3, [sp, #4]
 80024a4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80024a6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a8:	4f60      	ldr	r7, [pc, #384]	; (800262c <HAL_RCC_OscConfig+0x2b0>)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	05d8      	lsls	r0, r3, #23
 80024ae:	f140 81cc 	bpl.w	800284a <HAL_RCC_OscConfig+0x4ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b2:	68a3      	ldr	r3, [r4, #8]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	f000 8192 	beq.w	80027de <HAL_RCC_OscConfig+0x462>
 80024ba:	2b05      	cmp	r3, #5
 80024bc:	f000 81f0 	beq.w	80028a0 <HAL_RCC_OscConfig+0x524>
 80024c0:	4f59      	ldr	r7, [pc, #356]	; (8002628 <HAL_RCC_OscConfig+0x2ac>)
 80024c2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80024ce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80024d2:	f022 0204 	bic.w	r2, r2, #4
 80024d6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f040 8186 	bne.w	80027ec <HAL_RCC_OscConfig+0x470>
      tickstart = HAL_GetTick();
 80024e0:	f7ff fcde 	bl	8001ea0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e4:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80024e8:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024ea:	e006      	b.n	80024fa <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ec:	f7ff fcd8 	bl	8001ea0 <HAL_GetTick>
 80024f0:	eba0 0008 	sub.w	r0, r0, r8
 80024f4:	4548      	cmp	r0, r9
 80024f6:	f200 8145 	bhi.w	8002784 <HAL_RCC_OscConfig+0x408>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024fe:	079b      	lsls	r3, r3, #30
 8002500:	d4f4      	bmi.n	80024ec <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 8002502:	2e00      	cmp	r6, #0
 8002504:	f040 81b3 	bne.w	800286e <HAL_RCC_OscConfig+0x4f2>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002508:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 80f0 	beq.w	80026f0 <HAL_RCC_OscConfig+0x374>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002510:	2b02      	cmp	r3, #2
 8002512:	f000 809c 	beq.w	800264e <HAL_RCC_OscConfig+0x2d2>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002516:	2d0c      	cmp	r5, #12
 8002518:	f000 8095 	beq.w	8002646 <HAL_RCC_OscConfig+0x2ca>
        __HAL_RCC_PLL_DISABLE();
 800251c:	4c42      	ldr	r4, [pc, #264]	; (8002628 <HAL_RCC_OscConfig+0x2ac>)
 800251e:	6823      	ldr	r3, [r4, #0]
 8002520:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002524:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002526:	f7ff fcbb 	bl	8001ea0 <HAL_GetTick>
 800252a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800252c:	e005      	b.n	800253a <HAL_RCC_OscConfig+0x1be>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252e:	f7ff fcb7 	bl	8001ea0 <HAL_GetTick>
 8002532:	1b40      	subs	r0, r0, r5
 8002534:	2802      	cmp	r0, #2
 8002536:	f200 8125 	bhi.w	8002784 <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800253a:	6823      	ldr	r3, [r4, #0]
 800253c:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8002540:	d1f5      	bne.n	800252e <HAL_RCC_OscConfig+0x1b2>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002542:	68e1      	ldr	r1, [r4, #12]
 8002544:	4a3a      	ldr	r2, [pc, #232]	; (8002630 <HAL_RCC_OscConfig+0x2b4>)
 8002546:	400a      	ands	r2, r1
  return HAL_OK;
 8002548:	4618      	mov	r0, r3
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800254a:	60e2      	str	r2, [r4, #12]
 800254c:	e0d1      	b.n	80026f2 <HAL_RCC_OscConfig+0x376>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800254e:	2d08      	cmp	r5, #8
 8002550:	f000 80d5 	beq.w	80026fe <HAL_RCC_OscConfig+0x382>
 8002554:	2d0c      	cmp	r5, #12
 8002556:	f000 80cf 	beq.w	80026f8 <HAL_RCC_OscConfig+0x37c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800255a:	6863      	ldr	r3, [r4, #4]
 800255c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002560:	f000 8114 	beq.w	800278c <HAL_RCC_OscConfig+0x410>
 8002564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002568:	f000 818d 	beq.w	8002886 <HAL_RCC_OscConfig+0x50a>
 800256c:	4f2e      	ldr	r7, [pc, #184]	; (8002628 <HAL_RCC_OscConfig+0x2ac>)
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002574:	603a      	str	r2, [r7, #0]
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800257c:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800257e:	2b00      	cmp	r3, #0
 8002580:	f040 8109 	bne.w	8002796 <HAL_RCC_OscConfig+0x41a>
        tickstart = HAL_GetTick();
 8002584:	f7ff fc8c 	bl	8001ea0 <HAL_GetTick>
 8002588:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800258a:	e006      	b.n	800259a <HAL_RCC_OscConfig+0x21e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800258c:	f7ff fc88 	bl	8001ea0 <HAL_GetTick>
 8002590:	eba0 0008 	sub.w	r0, r0, r8
 8002594:	2864      	cmp	r0, #100	; 0x64
 8002596:	f200 80f5 	bhi.w	8002784 <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	0398      	lsls	r0, r3, #14
 800259e:	d4f5      	bmi.n	800258c <HAL_RCC_OscConfig+0x210>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a0:	6823      	ldr	r3, [r4, #0]
 80025a2:	e72e      	b.n	8002402 <HAL_RCC_OscConfig+0x86>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025a4:	2e01      	cmp	r6, #1
 80025a6:	f47f af00 	bne.w	80023aa <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025aa:	4b1f      	ldr	r3, [pc, #124]	; (8002628 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	0799      	lsls	r1, r3, #30
 80025b0:	d446      	bmi.n	8002640 <HAL_RCC_OscConfig+0x2c4>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025b2:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	6a20      	ldr	r0, [r4, #32]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	0712      	lsls	r2, r2, #28
 80025ba:	bf56      	itet	pl
 80025bc:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 80025c0:	681b      	ldrmi	r3, [r3, #0]
 80025c2:	091b      	lsrpl	r3, r3, #4
 80025c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025c8:	4298      	cmp	r0, r3
 80025ca:	f200 8126 	bhi.w	800281a <HAL_RCC_OscConfig+0x49e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025ce:	4b16      	ldr	r3, [pc, #88]	; (8002628 <HAL_RCC_OscConfig+0x2ac>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	f042 0208 	orr.w	r2, r2, #8
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80025de:	4302      	orrs	r2, r0
 80025e0:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	69e1      	ldr	r1, [r4, #28]
 80025e6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80025ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025ee:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025f0:	2d00      	cmp	r5, #0
 80025f2:	f000 8142 	beq.w	800287a <HAL_RCC_OscConfig+0x4fe>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025f6:	f7ff fe67 	bl	80022c8 <HAL_RCC_GetSysClockFreq>
 80025fa:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	4a0d      	ldr	r2, [pc, #52]	; (8002634 <HAL_RCC_OscConfig+0x2b8>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002604:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 8002606:	4a0c      	ldr	r2, [pc, #48]	; (8002638 <HAL_RCC_OscConfig+0x2bc>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002608:	f003 031f 	and.w	r3, r3, #31
 800260c:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8002610:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002612:	4a0a      	ldr	r2, [pc, #40]	; (800263c <HAL_RCC_OscConfig+0x2c0>)
 8002614:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8002616:	f7ff fc01 	bl	8001e1c <HAL_InitTick>
        if(status != HAL_OK)
 800261a:	2800      	cmp	r0, #0
 800261c:	d169      	bne.n	80026f2 <HAL_RCC_OscConfig+0x376>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261e:	6823      	ldr	r3, [r4, #0]
 8002620:	07d9      	lsls	r1, r3, #31
 8002622:	f57f aeee 	bpl.w	8002402 <HAL_RCC_OscConfig+0x86>
 8002626:	e792      	b.n	800254e <HAL_RCC_OscConfig+0x1d2>
 8002628:	40021000 	.word	0x40021000
 800262c:	40007000 	.word	0x40007000
 8002630:	feeefffc 	.word	0xfeeefffc
 8002634:	08014b94 	.word	0x08014b94
 8002638:	20006e7c 	.word	0x20006e7c
 800263c:	20006e74 	.word	0x20006e74
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002640:	69a3      	ldr	r3, [r4, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1b5      	bne.n	80025b2 <HAL_RCC_OscConfig+0x236>
    return HAL_ERROR;
 8002646:	2001      	movs	r0, #1
}
 8002648:	b003      	add	sp, #12
 800264a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      pll_config = RCC->PLLCFGR;
 800264e:	4e9b      	ldr	r6, [pc, #620]	; (80028bc <HAL_RCC_OscConfig+0x540>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002650:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      pll_config = RCC->PLLCFGR;
 8002652:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002654:	f003 0103 	and.w	r1, r3, #3
 8002658:	4291      	cmp	r1, r2
 800265a:	f000 8133 	beq.w	80028c4 <HAL_RCC_OscConfig+0x548>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800265e:	2d0c      	cmp	r5, #12
 8002660:	d0f1      	beq.n	8002646 <HAL_RCC_OscConfig+0x2ca>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002662:	4d96      	ldr	r5, [pc, #600]	; (80028bc <HAL_RCC_OscConfig+0x540>)
 8002664:	682b      	ldr	r3, [r5, #0]
 8002666:	015f      	lsls	r7, r3, #5
 8002668:	d4ed      	bmi.n	8002646 <HAL_RCC_OscConfig+0x2ca>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800266a:	682b      	ldr	r3, [r5, #0]
 800266c:	00de      	lsls	r6, r3, #3
 800266e:	d4ea      	bmi.n	8002646 <HAL_RCC_OscConfig+0x2ca>
            __HAL_RCC_PLL_DISABLE();
 8002670:	682b      	ldr	r3, [r5, #0]
 8002672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002676:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8002678:	f7ff fc12 	bl	8001ea0 <HAL_GetTick>
 800267c:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800267e:	e004      	b.n	800268a <HAL_RCC_OscConfig+0x30e>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002680:	f7ff fc0e 	bl	8001ea0 <HAL_GetTick>
 8002684:	1b80      	subs	r0, r0, r6
 8002686:	2802      	cmp	r0, #2
 8002688:	d87c      	bhi.n	8002784 <HAL_RCC_OscConfig+0x408>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800268a:	682b      	ldr	r3, [r5, #0]
 800268c:	0198      	lsls	r0, r3, #6
 800268e:	d4f7      	bmi.n	8002680 <HAL_RCC_OscConfig+0x304>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002690:	68e9      	ldr	r1, [r5, #12]
 8002692:	4b8b      	ldr	r3, [pc, #556]	; (80028c0 <HAL_RCC_OscConfig+0x544>)
 8002694:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002696:	4e89      	ldr	r6, [pc, #548]	; (80028bc <HAL_RCC_OscConfig+0x540>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002698:	400b      	ands	r3, r1
 800269a:	4313      	orrs	r3, r2
 800269c:	e9d4 210c 	ldrd	r2, r1, [r4, #48]	; 0x30
 80026a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80026a4:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 80026a8:	3a01      	subs	r2, #1
 80026aa:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80026ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80026b0:	0900      	lsrs	r0, r0, #4
 80026b2:	0849      	lsrs	r1, r1, #1
 80026b4:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 80026b8:	3901      	subs	r1, #1
 80026ba:	0852      	lsrs	r2, r2, #1
 80026bc:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80026c0:	3a01      	subs	r2, #1
 80026c2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80026c6:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 80026c8:	682b      	ldr	r3, [r5, #0]
 80026ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ce:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026d0:	68eb      	ldr	r3, [r5, #12]
 80026d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026d6:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 80026d8:	f7ff fbe2 	bl	8001ea0 <HAL_GetTick>
 80026dc:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026de:	e004      	b.n	80026ea <HAL_RCC_OscConfig+0x36e>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e0:	f7ff fbde 	bl	8001ea0 <HAL_GetTick>
 80026e4:	1b00      	subs	r0, r0, r4
 80026e6:	2802      	cmp	r0, #2
 80026e8:	d84c      	bhi.n	8002784 <HAL_RCC_OscConfig+0x408>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ea:	6833      	ldr	r3, [r6, #0]
 80026ec:	0199      	lsls	r1, r3, #6
 80026ee:	d5f7      	bpl.n	80026e0 <HAL_RCC_OscConfig+0x364>
  return HAL_OK;
 80026f0:	2000      	movs	r0, #0
}
 80026f2:	b003      	add	sp, #12
 80026f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026f8:	2e03      	cmp	r6, #3
 80026fa:	f47f af2e 	bne.w	800255a <HAL_RCC_OscConfig+0x1de>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fe:	4a6f      	ldr	r2, [pc, #444]	; (80028bc <HAL_RCC_OscConfig+0x540>)
 8002700:	6812      	ldr	r2, [r2, #0]
 8002702:	0392      	lsls	r2, r2, #14
 8002704:	f57f ae7d 	bpl.w	8002402 <HAL_RCC_OscConfig+0x86>
 8002708:	6862      	ldr	r2, [r4, #4]
 800270a:	2a00      	cmp	r2, #0
 800270c:	f47f ae79 	bne.w	8002402 <HAL_RCC_OscConfig+0x86>
 8002710:	e799      	b.n	8002646 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_LSI_DISABLE();
 8002712:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8002716:	f023 0301 	bic.w	r3, r3, #1
 800271a:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 800271e:	f7ff fbbf 	bl	8001ea0 <HAL_GetTick>
 8002722:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002724:	e004      	b.n	8002730 <HAL_RCC_OscConfig+0x3b4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002726:	f7ff fbbb 	bl	8001ea0 <HAL_GetTick>
 800272a:	1bc0      	subs	r0, r0, r7
 800272c:	2802      	cmp	r0, #2
 800272e:	d829      	bhi.n	8002784 <HAL_RCC_OscConfig+0x408>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002730:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8002734:	079b      	lsls	r3, r3, #30
 8002736:	d4f6      	bmi.n	8002726 <HAL_RCC_OscConfig+0x3aa>
 8002738:	e6a4      	b.n	8002484 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800273a:	2e02      	cmp	r6, #2
 800273c:	f47f ae69 	bne.w	8002412 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002740:	4a5e      	ldr	r2, [pc, #376]	; (80028bc <HAL_RCC_OscConfig+0x540>)
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	0552      	lsls	r2, r2, #21
 8002746:	d503      	bpl.n	8002750 <HAL_RCC_OscConfig+0x3d4>
 8002748:	68e2      	ldr	r2, [r4, #12]
 800274a:	2a00      	cmp	r2, #0
 800274c:	f43f af7b 	beq.w	8002646 <HAL_RCC_OscConfig+0x2ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002750:	495a      	ldr	r1, [pc, #360]	; (80028bc <HAL_RCC_OscConfig+0x540>)
 8002752:	6920      	ldr	r0, [r4, #16]
 8002754:	684a      	ldr	r2, [r1, #4]
 8002756:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 800275a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800275e:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002760:	e675      	b.n	800244e <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	f023 0301 	bic.w	r3, r3, #1
 8002768:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800276a:	f7ff fb99 	bl	8001ea0 <HAL_GetTick>
 800276e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	0798      	lsls	r0, r3, #30
 8002774:	f57f af53 	bpl.w	800261e <HAL_RCC_OscConfig+0x2a2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002778:	f7ff fb92 	bl	8001ea0 <HAL_GetTick>
 800277c:	eba0 0008 	sub.w	r0, r0, r8
 8002780:	2802      	cmp	r0, #2
 8002782:	d9f5      	bls.n	8002770 <HAL_RCC_OscConfig+0x3f4>
            return HAL_TIMEOUT;
 8002784:	2003      	movs	r0, #3
}
 8002786:	b003      	add	sp, #12
 8002788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800278c:	4a4b      	ldr	r2, [pc, #300]	; (80028bc <HAL_RCC_OscConfig+0x540>)
 800278e:	6813      	ldr	r3, [r2, #0]
 8002790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002794:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002796:	f7ff fb83 	bl	8001ea0 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800279a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 80028bc <HAL_RCC_OscConfig+0x540>
        tickstart = HAL_GetTick();
 800279e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027a0:	e004      	b.n	80027ac <HAL_RCC_OscConfig+0x430>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a2:	f7ff fb7d 	bl	8001ea0 <HAL_GetTick>
 80027a6:	1bc0      	subs	r0, r0, r7
 80027a8:	2864      	cmp	r0, #100	; 0x64
 80027aa:	d8eb      	bhi.n	8002784 <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ac:	f8d8 3000 	ldr.w	r3, [r8]
 80027b0:	039b      	lsls	r3, r3, #14
 80027b2:	d5f6      	bpl.n	80027a2 <HAL_RCC_OscConfig+0x426>
 80027b4:	e6f4      	b.n	80025a0 <HAL_RCC_OscConfig+0x224>
    FlagStatus       pwrclkchanged = RESET;
 80027b6:	2600      	movs	r6, #0
 80027b8:	e676      	b.n	80024a8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 80027ba:	6833      	ldr	r3, [r6, #0]
 80027bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027c0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80027c2:	f7ff fb6d 	bl	8001ea0 <HAL_GetTick>
 80027c6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027c8:	e004      	b.n	80027d4 <HAL_RCC_OscConfig+0x458>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ca:	f7ff fb69 	bl	8001ea0 <HAL_GetTick>
 80027ce:	1bc0      	subs	r0, r0, r7
 80027d0:	2802      	cmp	r0, #2
 80027d2:	d8d7      	bhi.n	8002784 <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027d4:	6833      	ldr	r3, [r6, #0]
 80027d6:	0558      	lsls	r0, r3, #21
 80027d8:	d4f7      	bmi.n	80027ca <HAL_RCC_OscConfig+0x44e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	e637      	b.n	800244e <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027de:	4a37      	ldr	r2, [pc, #220]	; (80028bc <HAL_RCC_OscConfig+0x540>)
 80027e0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80027ec:	f7ff fb58 	bl	8001ea0 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f0:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80028bc <HAL_RCC_OscConfig+0x540>
      tickstart = HAL_GetTick();
 80027f4:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f6:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027fa:	e004      	b.n	8002806 <HAL_RCC_OscConfig+0x48a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fc:	f7ff fb50 	bl	8001ea0 <HAL_GetTick>
 8002800:	1bc0      	subs	r0, r0, r7
 8002802:	4548      	cmp	r0, r9
 8002804:	d8be      	bhi.n	8002784 <HAL_RCC_OscConfig+0x408>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002806:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 800280a:	079a      	lsls	r2, r3, #30
 800280c:	d5f6      	bpl.n	80027fc <HAL_RCC_OscConfig+0x480>
    if(pwrclkchanged == SET)
 800280e:	2e00      	cmp	r6, #0
 8002810:	f43f ae7a 	beq.w	8002508 <HAL_RCC_OscConfig+0x18c>
 8002814:	e02b      	b.n	800286e <HAL_RCC_OscConfig+0x4f2>
    return HAL_ERROR;
 8002816:	2001      	movs	r0, #1
}
 8002818:	4770      	bx	lr
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800281a:	f7ff fd0f 	bl	800223c <RCC_SetFlashLatencyFromMSIRange>
 800281e:	2800      	cmp	r0, #0
 8002820:	f47f af11 	bne.w	8002646 <HAL_RCC_OscConfig+0x2ca>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002824:	4b25      	ldr	r3, [pc, #148]	; (80028bc <HAL_RCC_OscConfig+0x540>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	f042 0208 	orr.w	r2, r2, #8
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	6a21      	ldr	r1, [r4, #32]
 8002832:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002836:	430a      	orrs	r2, r1
 8002838:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	69e1      	ldr	r1, [r4, #28]
 800283e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002842:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	e6d5      	b.n	80025f6 <HAL_RCC_OscConfig+0x27a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002850:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002852:	f7ff fb25 	bl	8001ea0 <HAL_GetTick>
 8002856:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	05d9      	lsls	r1, r3, #23
 800285c:	f53f ae29 	bmi.w	80024b2 <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002860:	f7ff fb1e 	bl	8001ea0 <HAL_GetTick>
 8002864:	eba0 0008 	sub.w	r0, r0, r8
 8002868:	2802      	cmp	r0, #2
 800286a:	d9f5      	bls.n	8002858 <HAL_RCC_OscConfig+0x4dc>
 800286c:	e78a      	b.n	8002784 <HAL_RCC_OscConfig+0x408>
      __HAL_RCC_PWR_CLK_DISABLE();
 800286e:	4a13      	ldr	r2, [pc, #76]	; (80028bc <HAL_RCC_OscConfig+0x540>)
 8002870:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002872:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002876:	6593      	str	r3, [r2, #88]	; 0x58
 8002878:	e646      	b.n	8002508 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800287a:	f7ff fcdf 	bl	800223c <RCC_SetFlashLatencyFromMSIRange>
 800287e:	2800      	cmp	r0, #0
 8002880:	f43f aeb9 	beq.w	80025f6 <HAL_RCC_OscConfig+0x27a>
 8002884:	e6df      	b.n	8002646 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002886:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800288a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800289c:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800289e:	e77a      	b.n	8002796 <HAL_RCC_OscConfig+0x41a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_RCC_OscConfig+0x540>)
 80028a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80028a6:	f042 0204 	orr.w	r2, r2, #4
 80028aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80028ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ba:	e797      	b.n	80027ec <HAL_RCC_OscConfig+0x470>
 80028bc:	40021000 	.word	0x40021000
 80028c0:	f99d808c 	.word	0xf99d808c
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80028c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028ca:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028cc:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80028d0:	f47f aec5 	bne.w	800265e <HAL_RCC_OscConfig+0x2e2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028da:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80028de:	f47f aebe 	bne.w	800265e <HAL_RCC_OscConfig+0x2e2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80028e4:	3a07      	subs	r2, #7
 80028e6:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80028ea:	bf18      	it	ne
 80028ec:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ee:	4291      	cmp	r1, r2
 80028f0:	f47f aeb5 	bne.w	800265e <HAL_RCC_OscConfig+0x2e2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028f4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80028f6:	0852      	lsrs	r2, r2, #1
 80028f8:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80028fc:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028fe:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002902:	f47f aeac 	bne.w	800265e <HAL_RCC_OscConfig+0x2e2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002906:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002908:	0852      	lsrs	r2, r2, #1
 800290a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800290e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002910:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002914:	f47f aea3 	bne.w	800265e <HAL_RCC_OscConfig+0x2e2>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002918:	6833      	ldr	r3, [r6, #0]
 800291a:	019a      	lsls	r2, r3, #6
 800291c:	f53f aee8 	bmi.w	80026f0 <HAL_RCC_OscConfig+0x374>
          __HAL_RCC_PLL_ENABLE();
 8002920:	6833      	ldr	r3, [r6, #0]
 8002922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002926:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002928:	68f3      	ldr	r3, [r6, #12]
 800292a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800292e:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 8002930:	f7ff fab6 	bl	8001ea0 <HAL_GetTick>
 8002934:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002936:	e005      	b.n	8002944 <HAL_RCC_OscConfig+0x5c8>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002938:	f7ff fab2 	bl	8001ea0 <HAL_GetTick>
 800293c:	1b00      	subs	r0, r0, r4
 800293e:	2802      	cmp	r0, #2
 8002940:	f63f af20 	bhi.w	8002784 <HAL_RCC_OscConfig+0x408>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002944:	6833      	ldr	r3, [r6, #0]
 8002946:	019b      	lsls	r3, r3, #6
 8002948:	d5f6      	bpl.n	8002938 <HAL_RCC_OscConfig+0x5bc>
 800294a:	e6d1      	b.n	80026f0 <HAL_RCC_OscConfig+0x374>

0800294c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800294c:	2800      	cmp	r0, #0
 800294e:	f000 809f 	beq.w	8002a90 <HAL_RCC_ClockConfig+0x144>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002952:	4a53      	ldr	r2, [pc, #332]	; (8002aa0 <HAL_RCC_ClockConfig+0x154>)
 8002954:	6813      	ldr	r3, [r2, #0]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	428b      	cmp	r3, r1
{
 800295c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002960:	460d      	mov	r5, r1
 8002962:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002964:	d20c      	bcs.n	8002980 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	6813      	ldr	r3, [r2, #0]
 8002968:	f023 0307 	bic.w	r3, r3, #7
 800296c:	430b      	orrs	r3, r1
 800296e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002970:	6813      	ldr	r3, [r2, #0]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	428b      	cmp	r3, r1
 8002978:	d002      	beq.n	8002980 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800297a:	2001      	movs	r0, #1
}
 800297c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002980:	6823      	ldr	r3, [r4, #0]
 8002982:	079e      	lsls	r6, r3, #30
 8002984:	d571      	bpl.n	8002a6a <HAL_RCC_ClockConfig+0x11e>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002986:	4847      	ldr	r0, [pc, #284]	; (8002aa4 <HAL_RCC_ClockConfig+0x158>)
 8002988:	68a1      	ldr	r1, [r4, #8]
 800298a:	6882      	ldr	r2, [r0, #8]
 800298c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002990:	4291      	cmp	r1, r2
 8002992:	d904      	bls.n	800299e <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002994:	6882      	ldr	r2, [r0, #8]
 8002996:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800299a:	430a      	orrs	r2, r1
 800299c:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800299e:	07da      	lsls	r2, r3, #31
 80029a0:	d526      	bpl.n	80029f0 <HAL_RCC_ClockConfig+0xa4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029a2:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a4:	4b3f      	ldr	r3, [pc, #252]	; (8002aa4 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029a6:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a8:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029aa:	d065      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x12c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ac:	2a02      	cmp	r2, #2
 80029ae:	d06c      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x13e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029b0:	2a00      	cmp	r2, #0
 80029b2:	d171      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x14c>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029b4:	079b      	lsls	r3, r3, #30
 80029b6:	d5e0      	bpl.n	800297a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029b8:	4e3a      	ldr	r6, [pc, #232]	; (8002aa4 <HAL_RCC_ClockConfig+0x158>)
 80029ba:	68b3      	ldr	r3, [r6, #8]
 80029bc:	f023 0303 	bic.w	r3, r3, #3
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80029c4:	f7ff fa6c 	bl	8001ea0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80029cc:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ce:	e004      	b.n	80029da <HAL_RCC_ClockConfig+0x8e>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d0:	f7ff fa66 	bl	8001ea0 <HAL_GetTick>
 80029d4:	1bc0      	subs	r0, r0, r7
 80029d6:	4540      	cmp	r0, r8
 80029d8:	d85c      	bhi.n	8002a94 <HAL_RCC_ClockConfig+0x148>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	68b3      	ldr	r3, [r6, #8]
 80029dc:	6862      	ldr	r2, [r4, #4]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80029e6:	d1f3      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e8:	6823      	ldr	r3, [r4, #0]
 80029ea:	079e      	lsls	r6, r3, #30
 80029ec:	d506      	bpl.n	80029fc <HAL_RCC_ClockConfig+0xb0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029ee:	68a1      	ldr	r1, [r4, #8]
 80029f0:	482c      	ldr	r0, [pc, #176]	; (8002aa4 <HAL_RCC_ClockConfig+0x158>)
 80029f2:	6882      	ldr	r2, [r0, #8]
 80029f4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80029f8:	428a      	cmp	r2, r1
 80029fa:	d840      	bhi.n	8002a7e <HAL_RCC_ClockConfig+0x132>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029fc:	4928      	ldr	r1, [pc, #160]	; (8002aa0 <HAL_RCC_ClockConfig+0x154>)
 80029fe:	680a      	ldr	r2, [r1, #0]
 8002a00:	f002 0207 	and.w	r2, r2, #7
 8002a04:	42aa      	cmp	r2, r5
 8002a06:	d909      	bls.n	8002a1c <HAL_RCC_ClockConfig+0xd0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a08:	680a      	ldr	r2, [r1, #0]
 8002a0a:	f022 0207 	bic.w	r2, r2, #7
 8002a0e:	432a      	orrs	r2, r5
 8002a10:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	680a      	ldr	r2, [r1, #0]
 8002a14:	f002 0207 	and.w	r2, r2, #7
 8002a18:	42aa      	cmp	r2, r5
 8002a1a:	d1ae      	bne.n	800297a <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1c:	075d      	lsls	r5, r3, #29
 8002a1e:	d506      	bpl.n	8002a2e <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a20:	4920      	ldr	r1, [pc, #128]	; (8002aa4 <HAL_RCC_ClockConfig+0x158>)
 8002a22:	68e0      	ldr	r0, [r4, #12]
 8002a24:	688a      	ldr	r2, [r1, #8]
 8002a26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a2a:	4302      	orrs	r2, r0
 8002a2c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2e:	0718      	lsls	r0, r3, #28
 8002a30:	d507      	bpl.n	8002a42 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a32:	4a1c      	ldr	r2, [pc, #112]	; (8002aa4 <HAL_RCC_ClockConfig+0x158>)
 8002a34:	6921      	ldr	r1, [r4, #16]
 8002a36:	6893      	ldr	r3, [r2, #8]
 8002a38:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002a3c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a40:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a42:	f7ff fc41 	bl	80022c8 <HAL_RCC_GetSysClockFreq>
 8002a46:	4a17      	ldr	r2, [pc, #92]	; (8002aa4 <HAL_RCC_ClockConfig+0x158>)
 8002a48:	4c17      	ldr	r4, [pc, #92]	; (8002aa8 <HAL_RCC_ClockConfig+0x15c>)
 8002a4a:	6892      	ldr	r2, [r2, #8]
 8002a4c:	4917      	ldr	r1, [pc, #92]	; (8002aac <HAL_RCC_ClockConfig+0x160>)
 8002a4e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002a52:	4603      	mov	r3, r0
 8002a54:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 8002a56:	4816      	ldr	r0, [pc, #88]	; (8002ab0 <HAL_RCC_ClockConfig+0x164>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a58:	f002 021f 	and.w	r2, r2, #31
 8002a5c:	40d3      	lsrs	r3, r2
}
 8002a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8002a62:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a64:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8002a66:	f7ff b9d9 	b.w	8001e1c <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6a:	07d9      	lsls	r1, r3, #31
 8002a6c:	d5c6      	bpl.n	80029fc <HAL_RCC_ClockConfig+0xb0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a6e:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a70:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a72:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a74:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a76:	d199      	bne.n	80029ac <HAL_RCC_ClockConfig+0x60>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a78:	0198      	lsls	r0, r3, #6
 8002a7a:	d49d      	bmi.n	80029b8 <HAL_RCC_ClockConfig+0x6c>
 8002a7c:	e77d      	b.n	800297a <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a7e:	6882      	ldr	r2, [r0, #8]
 8002a80:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a84:	430a      	orrs	r2, r1
 8002a86:	6082      	str	r2, [r0, #8]
 8002a88:	e7b8      	b.n	80029fc <HAL_RCC_ClockConfig+0xb0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a8a:	0399      	lsls	r1, r3, #14
 8002a8c:	d494      	bmi.n	80029b8 <HAL_RCC_ClockConfig+0x6c>
 8002a8e:	e774      	b.n	800297a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002a90:	2001      	movs	r0, #1
}
 8002a92:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002a94:	2003      	movs	r0, #3
 8002a96:	e771      	b.n	800297c <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a98:	055f      	lsls	r7, r3, #21
 8002a9a:	f57f af6e 	bpl.w	800297a <HAL_RCC_ClockConfig+0x2e>
 8002a9e:	e78b      	b.n	80029b8 <HAL_RCC_ClockConfig+0x6c>
 8002aa0:	40022000 	.word	0x40022000
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	08014b94 	.word	0x08014b94
 8002aac:	20006e74 	.word	0x20006e74
 8002ab0:	20006e7c 	.word	0x20006e7c

08002ab4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ab4:	4b05      	ldr	r3, [pc, #20]	; (8002acc <HAL_RCC_GetPCLK1Freq+0x18>)
 8002ab6:	4a06      	ldr	r2, [pc, #24]	; (8002ad0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002aba:	4906      	ldr	r1, [pc, #24]	; (8002ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002abc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002ac0:	6808      	ldr	r0, [r1, #0]
 8002ac2:	5cd3      	ldrb	r3, [r2, r3]
 8002ac4:	f003 031f 	and.w	r3, r3, #31
}
 8002ac8:	40d8      	lsrs	r0, r3
 8002aca:	4770      	bx	lr
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	08014ba4 	.word	0x08014ba4
 8002ad4:	20006e74 	.word	0x20006e74

08002ad8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002ada:	4a06      	ldr	r2, [pc, #24]	; (8002af4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002adc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002ade:	4906      	ldr	r1, [pc, #24]	; (8002af8 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ae0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002ae4:	6808      	ldr	r0, [r1, #0]
 8002ae6:	5cd3      	ldrb	r3, [r2, r3]
 8002ae8:	f003 031f 	and.w	r3, r3, #31
}
 8002aec:	40d8      	lsrs	r0, r3
 8002aee:	4770      	bx	lr
 8002af0:	40021000 	.word	0x40021000
 8002af4:	08014ba4 	.word	0x08014ba4
 8002af8:	20006e74 	.word	0x20006e74

08002afc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002afe:	4b47      	ldr	r3, [pc, #284]	; (8002c1c <RCCEx_PLLSAI1_Config+0x120>)
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	0792      	lsls	r2, r2, #30
{
 8002b04:	4604      	mov	r4, r0
 8002b06:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b08:	d007      	beq.n	8002b1a <RCCEx_PLLSAI1_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	6801      	ldr	r1, [r0, #0]
 8002b0e:	f002 0203 	and.w	r2, r2, #3
 8002b12:	428a      	cmp	r2, r1
 8002b14:	d04c      	beq.n	8002bb0 <RCCEx_PLLSAI1_Config+0xb4>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002b16:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8002b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8002b1a:	6800      	ldr	r0, [r0, #0]
 8002b1c:	2802      	cmp	r0, #2
 8002b1e:	d058      	beq.n	8002bd2 <RCCEx_PLLSAI1_Config+0xd6>
 8002b20:	2803      	cmp	r0, #3
 8002b22:	d04f      	beq.n	8002bc4 <RCCEx_PLLSAI1_Config+0xc8>
 8002b24:	2801      	cmp	r0, #1
 8002b26:	d1f6      	bne.n	8002b16 <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	079b      	lsls	r3, r3, #30
 8002b2c:	d5f4      	bpl.n	8002b18 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b2e:	493b      	ldr	r1, [pc, #236]	; (8002c1c <RCCEx_PLLSAI1_Config+0x120>)
 8002b30:	6862      	ldr	r2, [r4, #4]
 8002b32:	68cb      	ldr	r3, [r1, #12]
 8002b34:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002b38:	4303      	orrs	r3, r0
 8002b3a:	3a01      	subs	r2, #1
 8002b3c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002b40:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b42:	4d36      	ldr	r5, [pc, #216]	; (8002c1c <RCCEx_PLLSAI1_Config+0x120>)
 8002b44:	682b      	ldr	r3, [r5, #0]
 8002b46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b4a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002b4c:	f7ff f9a8 	bl	8001ea0 <HAL_GetTick>
 8002b50:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b52:	e004      	b.n	8002b5e <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b54:	f7ff f9a4 	bl	8001ea0 <HAL_GetTick>
 8002b58:	1b83      	subs	r3, r0, r6
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d83d      	bhi.n	8002bda <RCCEx_PLLSAI1_Config+0xde>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b5e:	682b      	ldr	r3, [r5, #0]
 8002b60:	011a      	lsls	r2, r3, #4
 8002b62:	d4f7      	bmi.n	8002b54 <RCCEx_PLLSAI1_Config+0x58>
      if(Divider == DIVIDER_P_UPDATE)
 8002b64:	2f00      	cmp	r7, #0
 8002b66:	d13a      	bne.n	8002bde <RCCEx_PLLSAI1_Config+0xe2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b68:	692b      	ldr	r3, [r5, #16]
 8002b6a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8002b6e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b76:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b7a:	0912      	lsrs	r2, r2, #4
 8002b7c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002b80:	612b      	str	r3, [r5, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b82:	4d26      	ldr	r5, [pc, #152]	; (8002c1c <RCCEx_PLLSAI1_Config+0x120>)
 8002b84:	682b      	ldr	r3, [r5, #0]
 8002b86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b8a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002b8c:	f7ff f988 	bl	8001ea0 <HAL_GetTick>
 8002b90:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b92:	e004      	b.n	8002b9e <RCCEx_PLLSAI1_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b94:	f7ff f984 	bl	8001ea0 <HAL_GetTick>
 8002b98:	1b83      	subs	r3, r0, r6
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d81d      	bhi.n	8002bda <RCCEx_PLLSAI1_Config+0xde>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b9e:	682b      	ldr	r3, [r5, #0]
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	d5f7      	bpl.n	8002b94 <RCCEx_PLLSAI1_Config+0x98>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ba4:	692b      	ldr	r3, [r5, #16]
 8002ba6:	69a2      	ldr	r2, [r4, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	2000      	movs	r0, #0
 8002bac:	612b      	str	r3, [r5, #16]
}
 8002bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8002bb0:	2a00      	cmp	r2, #0
 8002bb2:	d0b0      	beq.n	8002b16 <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bb4:	68db      	ldr	r3, [r3, #12]
       ||
 8002bb6:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bb8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002bbc:	3301      	adds	r3, #1
       ||
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d1a9      	bne.n	8002b16 <RCCEx_PLLSAI1_Config+0x1a>
 8002bc2:	e7be      	b.n	8002b42 <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	0395      	lsls	r5, r2, #14
 8002bc8:	d4b1      	bmi.n	8002b2e <RCCEx_PLLSAI1_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	0359      	lsls	r1, r3, #13
 8002bce:	d5a2      	bpl.n	8002b16 <RCCEx_PLLSAI1_Config+0x1a>
 8002bd0:	e7ad      	b.n	8002b2e <RCCEx_PLLSAI1_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	055e      	lsls	r6, r3, #21
 8002bd6:	d59e      	bpl.n	8002b16 <RCCEx_PLLSAI1_Config+0x1a>
 8002bd8:	e7a9      	b.n	8002b2e <RCCEx_PLLSAI1_Config+0x32>
    switch(PllSai1->PLLSAI1Source)
 8002bda:	2003      	movs	r0, #3
}
 8002bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bde:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002be0:	692b      	ldr	r3, [r5, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8002be2:	d00d      	beq.n	8002c00 <RCCEx_PLLSAI1_Config+0x104>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002be4:	6962      	ldr	r2, [r4, #20]
 8002be6:	68a1      	ldr	r1, [r4, #8]
 8002be8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bec:	0852      	lsrs	r2, r2, #1
 8002bee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bf2:	3a01      	subs	r2, #1
 8002bf4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002bf8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002bfc:	612b      	str	r3, [r5, #16]
 8002bfe:	e7c0      	b.n	8002b82 <RCCEx_PLLSAI1_Config+0x86>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c00:	6922      	ldr	r2, [r4, #16]
 8002c02:	68a1      	ldr	r1, [r4, #8]
 8002c04:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c08:	0852      	lsrs	r2, r2, #1
 8002c0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c0e:	3a01      	subs	r2, #1
 8002c10:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002c14:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002c18:	612b      	str	r3, [r5, #16]
 8002c1a:	e7b2      	b.n	8002b82 <RCCEx_PLLSAI1_Config+0x86>
 8002c1c:	40021000 	.word	0x40021000

08002c20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c22:	4b3f      	ldr	r3, [pc, #252]	; (8002d20 <RCCEx_PLLSAI2_Config+0x100>)
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	0792      	lsls	r2, r2, #30
{
 8002c28:	4604      	mov	r4, r0
 8002c2a:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c2c:	d007      	beq.n	8002c3e <RCCEx_PLLSAI2_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	6801      	ldr	r1, [r0, #0]
 8002c32:	f002 0203 	and.w	r2, r2, #3
 8002c36:	428a      	cmp	r2, r1
 8002c38:	d04c      	beq.n	8002cd4 <RCCEx_PLLSAI2_Config+0xb4>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002c3a:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8002c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 8002c3e:	6800      	ldr	r0, [r0, #0]
 8002c40:	2802      	cmp	r0, #2
 8002c42:	d058      	beq.n	8002cf6 <RCCEx_PLLSAI2_Config+0xd6>
 8002c44:	2803      	cmp	r0, #3
 8002c46:	d04f      	beq.n	8002ce8 <RCCEx_PLLSAI2_Config+0xc8>
 8002c48:	2801      	cmp	r0, #1
 8002c4a:	d1f6      	bne.n	8002c3a <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	079b      	lsls	r3, r3, #30
 8002c50:	d5f4      	bpl.n	8002c3c <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c52:	4933      	ldr	r1, [pc, #204]	; (8002d20 <RCCEx_PLLSAI2_Config+0x100>)
 8002c54:	6862      	ldr	r2, [r4, #4]
 8002c56:	68cb      	ldr	r3, [r1, #12]
 8002c58:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002c5c:	4303      	orrs	r3, r0
 8002c5e:	3a01      	subs	r2, #1
 8002c60:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002c64:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c66:	4d2e      	ldr	r5, [pc, #184]	; (8002d20 <RCCEx_PLLSAI2_Config+0x100>)
 8002c68:	682b      	ldr	r3, [r5, #0]
 8002c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002c70:	f7ff f916 	bl	8001ea0 <HAL_GetTick>
 8002c74:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c76:	e004      	b.n	8002c82 <RCCEx_PLLSAI2_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c78:	f7ff f912 	bl	8001ea0 <HAL_GetTick>
 8002c7c:	1b83      	subs	r3, r0, r6
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d83d      	bhi.n	8002cfe <RCCEx_PLLSAI2_Config+0xde>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c82:	682b      	ldr	r3, [r5, #0]
 8002c84:	009a      	lsls	r2, r3, #2
 8002c86:	d4f7      	bmi.n	8002c78 <RCCEx_PLLSAI2_Config+0x58>
      if(Divider == DIVIDER_P_UPDATE)
 8002c88:	2f00      	cmp	r7, #0
 8002c8a:	d13a      	bne.n	8002d02 <RCCEx_PLLSAI2_Config+0xe2>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c8c:	696b      	ldr	r3, [r5, #20]
 8002c8e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8002c92:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c9a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002c9e:	0912      	lsrs	r2, r2, #4
 8002ca0:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002ca4:	616b      	str	r3, [r5, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ca6:	4d1e      	ldr	r5, [pc, #120]	; (8002d20 <RCCEx_PLLSAI2_Config+0x100>)
 8002ca8:	682b      	ldr	r3, [r5, #0]
 8002caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cae:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002cb0:	f7ff f8f6 	bl	8001ea0 <HAL_GetTick>
 8002cb4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cb6:	e004      	b.n	8002cc2 <RCCEx_PLLSAI2_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cb8:	f7ff f8f2 	bl	8001ea0 <HAL_GetTick>
 8002cbc:	1b83      	subs	r3, r0, r6
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d81d      	bhi.n	8002cfe <RCCEx_PLLSAI2_Config+0xde>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cc2:	682b      	ldr	r3, [r5, #0]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	d5f7      	bpl.n	8002cb8 <RCCEx_PLLSAI2_Config+0x98>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cc8:	696b      	ldr	r3, [r5, #20]
 8002cca:	6962      	ldr	r2, [r4, #20]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	2000      	movs	r0, #0
 8002cd0:	616b      	str	r3, [r5, #20]
}
 8002cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8002cd4:	2a00      	cmp	r2, #0
 8002cd6:	d0b0      	beq.n	8002c3a <RCCEx_PLLSAI2_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002cd8:	68db      	ldr	r3, [r3, #12]
       ||
 8002cda:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002cdc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002ce0:	3301      	adds	r3, #1
       ||
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d1a9      	bne.n	8002c3a <RCCEx_PLLSAI2_Config+0x1a>
 8002ce6:	e7be      	b.n	8002c66 <RCCEx_PLLSAI2_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	0395      	lsls	r5, r2, #14
 8002cec:	d4b1      	bmi.n	8002c52 <RCCEx_PLLSAI2_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	0359      	lsls	r1, r3, #13
 8002cf2:	d5a2      	bpl.n	8002c3a <RCCEx_PLLSAI2_Config+0x1a>
 8002cf4:	e7ad      	b.n	8002c52 <RCCEx_PLLSAI2_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	055e      	lsls	r6, r3, #21
 8002cfa:	d59e      	bpl.n	8002c3a <RCCEx_PLLSAI2_Config+0x1a>
 8002cfc:	e7a9      	b.n	8002c52 <RCCEx_PLLSAI2_Config+0x32>
    switch(PllSai2->PLLSAI2Source)
 8002cfe:	2003      	movs	r0, #3
}
 8002d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d02:	696b      	ldr	r3, [r5, #20]
 8002d04:	6922      	ldr	r2, [r4, #16]
 8002d06:	68a1      	ldr	r1, [r4, #8]
 8002d08:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d0c:	0852      	lsrs	r2, r2, #1
 8002d0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d12:	3a01      	subs	r2, #1
 8002d14:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002d18:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002d1c:	616b      	str	r3, [r5, #20]
 8002d1e:	e7c2      	b.n	8002ca6 <RCCEx_PLLSAI2_Config+0x86>
 8002d20:	40021000 	.word	0x40021000

08002d24 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002d24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d28:	6803      	ldr	r3, [r0, #0]
 8002d2a:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
{
 8002d2e:	b083      	sub	sp, #12
 8002d30:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d32:	d020      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002d34:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002d36:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002d3a:	f000 81d4 	beq.w	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8002d3e:	f200 8122 	bhi.w	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8002d42:	2900      	cmp	r1, #0
 8002d44:	f000 81ab 	beq.w	800309e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8002d48:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002d4c:	f040 811f 	bne.w	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d50:	2100      	movs	r1, #0
 8002d52:	3020      	adds	r0, #32
 8002d54:	f7ff ff64 	bl	8002c20 <RCCEx_PLLSAI2_Config>
 8002d58:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002d5a:	2d00      	cmp	r5, #0
 8002d5c:	f040 81d0 	bne.w	8003100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d60:	6e61      	ldr	r1, [r4, #100]	; 0x64
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d62:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d64:	48ae      	ldr	r0, [pc, #696]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002d66:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002d6a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8002d74:	2500      	movs	r5, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d76:	04d8      	lsls	r0, r3, #19
 8002d78:	f140 810e 	bpl.w	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x274>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002d7c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002d7e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8002d82:	f000 81b6 	beq.w	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002d86:	f200 816c 	bhi.w	8003062 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8002d8a:	2900      	cmp	r1, #0
 8002d8c:	f000 8181 	beq.w	8003092 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002d90:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002d94:	f040 819a 	bne.w	80030cc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d98:	2100      	movs	r1, #0
 8002d9a:	f104 0020 	add.w	r0, r4, #32
 8002d9e:	f7ff ff3f 	bl	8002c20 <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002da2:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002da4:	4680      	mov	r8, r0
    if(ret == HAL_OK)
 8002da6:	f1b8 0f00 	cmp.w	r8, #0
 8002daa:	f040 8162 	bne.w	8003072 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dae:	499c      	ldr	r1, [pc, #624]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002db0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002db2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002db6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002dba:	4302      	orrs	r2, r0
 8002dbc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dc0:	0399      	lsls	r1, r3, #14
 8002dc2:	f100 80ed 	bmi.w	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dc6:	07da      	lsls	r2, r3, #31
 8002dc8:	d508      	bpl.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dca:	4995      	ldr	r1, [pc, #596]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002dcc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002dce:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002dd2:	f022 0203 	bic.w	r2, r2, #3
 8002dd6:	4302      	orrs	r2, r0
 8002dd8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ddc:	079f      	lsls	r7, r3, #30
 8002dde:	d508      	bpl.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002de0:	498f      	ldr	r1, [pc, #572]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002de2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002de4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002de8:	f022 020c 	bic.w	r2, r2, #12
 8002dec:	4302      	orrs	r2, r0
 8002dee:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002df2:	075e      	lsls	r6, r3, #29
 8002df4:	d508      	bpl.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002df6:	498a      	ldr	r1, [pc, #552]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002df8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002dfa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002dfe:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002e02:	4302      	orrs	r2, r0
 8002e04:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e08:	0718      	lsls	r0, r3, #28
 8002e0a:	d508      	bpl.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0xfa>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e0c:	4984      	ldr	r1, [pc, #528]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002e0e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002e10:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e14:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002e18:	4302      	orrs	r2, r0
 8002e1a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e1e:	06d9      	lsls	r1, r3, #27
 8002e20:	d508      	bpl.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e22:	497f      	ldr	r1, [pc, #508]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002e24:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002e26:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e2a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002e2e:	4302      	orrs	r2, r0
 8002e30:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e34:	069a      	lsls	r2, r3, #26
 8002e36:	d508      	bpl.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e38:	4979      	ldr	r1, [pc, #484]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002e3a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002e3c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e40:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002e44:	4302      	orrs	r2, r0
 8002e46:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e4a:	059f      	lsls	r7, r3, #22
 8002e4c:	d508      	bpl.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e4e:	4974      	ldr	r1, [pc, #464]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002e50:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002e52:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e56:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002e5a:	4302      	orrs	r2, r0
 8002e5c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e60:	055e      	lsls	r6, r3, #21
 8002e62:	d508      	bpl.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e64:	496e      	ldr	r1, [pc, #440]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002e66:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002e68:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e6c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002e70:	4302      	orrs	r2, r0
 8002e72:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e76:	0658      	lsls	r0, r3, #25
 8002e78:	d508      	bpl.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e7a:	4969      	ldr	r1, [pc, #420]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002e7c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002e7e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e82:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002e86:	4302      	orrs	r2, r0
 8002e88:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e8c:	0619      	lsls	r1, r3, #24
 8002e8e:	d508      	bpl.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e90:	4963      	ldr	r1, [pc, #396]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002e92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e94:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002e98:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002e9c:	4302      	orrs	r2, r0
 8002e9e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ea2:	05da      	lsls	r2, r3, #23
 8002ea4:	d508      	bpl.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ea6:	495e      	ldr	r1, [pc, #376]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002eaa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002eae:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002eb2:	4302      	orrs	r2, r0
 8002eb4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002eb8:	049f      	lsls	r7, r3, #18
 8002eba:	d510      	bpl.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ebc:	4958      	ldr	r1, [pc, #352]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002ebe:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002ec0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ec4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002ec8:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002eca:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ece:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ed2:	f000 80f1 	beq.w	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x394>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ed6:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8002eda:	f000 8128 	beq.w	800312e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ede:	031e      	lsls	r6, r3, #12
 8002ee0:	d510      	bpl.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ee2:	494f      	ldr	r1, [pc, #316]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002ee4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002ee6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002eea:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002eee:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ef0:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ef4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ef8:	f000 80e3 	beq.w	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002efc:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8002f00:	f000 811f 	beq.w	8003142 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f04:	0358      	lsls	r0, r3, #13
 8002f06:	d510      	bpl.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f08:	4945      	ldr	r1, [pc, #276]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002f0a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002f0c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002f10:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002f14:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f16:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f1a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f1e:	f000 80c6 	beq.w	80030ae <HAL_RCCEx_PeriphCLKConfig+0x38a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f22:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8002f26:	f000 80f8 	beq.w	800311a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f2a:	0459      	lsls	r1, r3, #17
 8002f2c:	d510      	bpl.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f2e:	483c      	ldr	r0, [pc, #240]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002f30:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8002f32:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002f36:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f3a:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f3c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f40:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f44:	f000 80c5 	beq.w	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f48:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8002f4c:	f000 80da 	beq.w	8003104 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f50:	041a      	lsls	r2, r3, #16
 8002f52:	d508      	bpl.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x242>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f54:	4932      	ldr	r1, [pc, #200]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002f56:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002f58:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002f5c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002f60:	4302      	orrs	r2, r0
 8002f62:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f66:	03db      	lsls	r3, r3, #15
 8002f68:	d509      	bpl.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f6a:	4a2d      	ldr	r2, [pc, #180]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002f6c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002f70:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002f74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002f7e:	4628      	mov	r0, r5
 8002f80:	b003      	add	sp, #12
 8002f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai1ClockSelection)
 8002f86:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002f8a:	f43f aeeb 	beq.w	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x40>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f8e:	04d8      	lsls	r0, r3, #19
    switch(PeriphClkInit->Sai1ClockSelection)
 8002f90:	f04f 0501 	mov.w	r5, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f94:	f53f aef2 	bmi.w	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002f98:	46a8      	mov	r8, r5
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f9a:	0399      	lsls	r1, r3, #14
 8002f9c:	f57f af13 	bpl.w	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fa0:	4b1f      	ldr	r3, [pc, #124]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002fa2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fa4:	00d2      	lsls	r2, r2, #3
 8002fa6:	d566      	bpl.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x352>
    FlagStatus       pwrclkchanged = RESET;
 8002fa8:	f04f 0900 	mov.w	r9, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fac:	4e1d      	ldr	r6, [pc, #116]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002fae:	6833      	ldr	r3, [r6, #0]
 8002fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002fb6:	f7fe ff73 	bl	8001ea0 <HAL_GetTick>
 8002fba:	4607      	mov	r7, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fbc:	e004      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fbe:	f7fe ff6f 	bl	8001ea0 <HAL_GetTick>
 8002fc2:	1bc3      	subs	r3, r0, r7
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d862      	bhi.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fc8:	6833      	ldr	r3, [r6, #0]
 8002fca:	05db      	lsls	r3, r3, #23
 8002fcc:	d5f7      	bpl.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x29a>
    if(ret == HAL_OK)
 8002fce:	f1b8 0f00 	cmp.w	r8, #0
 8002fd2:	f040 80c0 	bne.w	8003156 <HAL_RCCEx_PeriphCLKConfig+0x432>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fd6:	4e12      	ldr	r6, [pc, #72]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002fd8:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fdc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002fe0:	d02b      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x316>
 8002fe2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d029      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x31a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fea:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fee:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff6:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ffa:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003002:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003006:	07c8      	lsls	r0, r1, #31
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003008:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        RCC->BDCR = tmpregister;
 800300c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003010:	f140 80a3 	bpl.w	800315a <HAL_RCCEx_PeriphCLKConfig+0x436>
        tickstart = HAL_GetTick();
 8003014:	f7fe ff44 	bl	8001ea0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003018:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800301c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800301e:	e008      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8003020:	40021000 	.word	0x40021000
 8003024:	40007000 	.word	0x40007000
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003028:	f7fe ff3a 	bl	8001ea0 <HAL_GetTick>
 800302c:	1bc0      	subs	r0, r0, r7
 800302e:	4540      	cmp	r0, r8
 8003030:	d82d      	bhi.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003032:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8003036:	0799      	lsls	r1, r3, #30
 8003038:	d5f6      	bpl.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x304>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800303a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800303e:	4948      	ldr	r1, [pc, #288]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8003040:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003044:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    if(pwrclkchanged == SET)
 800304e:	f1b9 0f00 	cmp.w	r9, #0
 8003052:	d004      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x33a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003054:	4a42      	ldr	r2, [pc, #264]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8003056:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800305c:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	e6b1      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003062:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8003066:	d131      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003068:	46a8      	mov	r8, r5
    if(ret == HAL_OK)
 800306a:	f1b8 0f00 	cmp.w	r8, #0
 800306e:	f43f ae9e 	beq.w	8002dae <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8003072:	4645      	mov	r5, r8
 8003074:	e791      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x276>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003076:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003078:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800307c:	659a      	str	r2, [r3, #88]	; 0x58
 800307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003084:	9301      	str	r3, [sp, #4]
 8003086:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003088:	f04f 0901 	mov.w	r9, #1
 800308c:	e78e      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x288>
        ret = HAL_TIMEOUT;
 800308e:	2503      	movs	r5, #3
 8003090:	e7dd      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x32a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003092:	1d20      	adds	r0, r4, #4
 8003094:	f7ff fd32 	bl	8002afc <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003098:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800309a:	4680      	mov	r8, r0
      break;
 800309c:	e683      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800309e:	3004      	adds	r0, #4
 80030a0:	f7ff fd2c 	bl	8002afc <RCCEx_PLLSAI1_Config>
 80030a4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80030a6:	2d00      	cmp	r5, #0
 80030a8:	f43f ae5a 	beq.w	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80030ac:	e028      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030ae:	68ca      	ldr	r2, [r1, #12]
 80030b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80030b4:	60ca      	str	r2, [r1, #12]
 80030b6:	e738      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x206>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030b8:	68ca      	ldr	r2, [r1, #12]
 80030ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80030be:	60ca      	str	r2, [r1, #12]
 80030c0:	e70d      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030c2:	68ca      	ldr	r2, [r1, #12]
 80030c4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80030c8:	60ca      	str	r2, [r1, #12]
 80030ca:	e71b      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Sai2ClockSelection)
 80030cc:	2501      	movs	r5, #1
 80030ce:	46a8      	mov	r8, r5
 80030d0:	e763      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x276>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030d2:	2102      	movs	r1, #2
 80030d4:	1d20      	adds	r0, r4, #4
 80030d6:	f7ff fd11 	bl	8002afc <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030da:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 80030dc:	2800      	cmp	r0, #0
 80030de:	f43f af37 	beq.w	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030e2:	4605      	mov	r5, r0
 80030e4:	e734      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030e6:	481e      	ldr	r0, [pc, #120]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 80030e8:	68c2      	ldr	r2, [r0, #12]
 80030ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80030ee:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 80030f0:	e638      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x40>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030f2:	491b      	ldr	r1, [pc, #108]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 80030f4:	68ca      	ldr	r2, [r1, #12]
 80030f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80030fa:	60ca      	str	r2, [r1, #12]
      break;
 80030fc:	46a8      	mov	r8, r5
 80030fe:	e652      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x82>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	e638      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x52>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003104:	2102      	movs	r1, #2
 8003106:	f104 0020 	add.w	r0, r4, #32
 800310a:	f7ff fd89 	bl	8002c20 <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800310e:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003110:	2800      	cmp	r0, #0
 8003112:	f43f af1d 	beq.w	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003116:	4605      	mov	r5, r0
 8003118:	e71a      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800311a:	2101      	movs	r1, #1
 800311c:	1d20      	adds	r0, r4, #4
 800311e:	f7ff fced 	bl	8002afc <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003122:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003124:	2800      	cmp	r0, #0
 8003126:	f43f af00 	beq.w	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x206>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800312a:	4605      	mov	r5, r0
 800312c:	e6fd      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x206>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800312e:	2101      	movs	r1, #1
 8003130:	1d20      	adds	r0, r4, #4
 8003132:	f7ff fce3 	bl	8002afc <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003136:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 8003138:	2800      	cmp	r0, #0
 800313a:	f43f aed0 	beq.w	8002ede <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800313e:	4605      	mov	r5, r0
 8003140:	e6cd      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003142:	2101      	movs	r1, #1
 8003144:	1d20      	adds	r0, r4, #4
 8003146:	f7ff fcd9 	bl	8002afc <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800314a:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800314c:	2800      	cmp	r0, #0
 800314e:	f43f aed9 	beq.w	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003152:	4605      	mov	r5, r0
 8003154:	e6d6      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8003156:	4645      	mov	r5, r8
 8003158:	e779      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800315a:	4613      	mov	r3, r2
 800315c:	e76f      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800315e:	bf00      	nop
 8003160:	40021000 	.word	0x40021000

08003164 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003168:	4605      	mov	r5, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800316a:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800316c:	2820      	cmp	r0, #32
 800316e:	d14d      	bne.n	800320c <HAL_UART_Transmit+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003170:	4689      	mov	r9, r1
 8003172:	b109      	cbz	r1, 8003178 <HAL_UART_Transmit+0x14>
 8003174:	4614      	mov	r4, r2
 8003176:	b912      	cbnz	r2, 800317e <HAL_UART_Transmit+0x1a>
    {
      return  HAL_ERROR;
 8003178:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 800317a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800317e:	461e      	mov	r6, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003180:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003184:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003186:	f8c5 8084 	str.w	r8, [r5, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800318a:	67eb      	str	r3, [r5, #124]	; 0x7c
    tickstart = HAL_GetTick();
 800318c:	f7fe fe88 	bl	8001ea0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003190:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 8003192:	f8a5 4050 	strh.w	r4, [r5, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 800319a:	f8a5 4052 	strh.w	r4, [r5, #82]	; 0x52
    tickstart = HAL_GetTick();
 800319e:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031a0:	d037      	beq.n	8003212 <HAL_UART_Transmit+0xae>
    while (huart->TxXferCount > 0U)
 80031a2:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031a6:	682c      	ldr	r4, [r5, #0]
    while (huart->TxXferCount > 0U)
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	b1ab      	cbz	r3, 80031d8 <HAL_UART_Transmit+0x74>
 80031ac:	1c72      	adds	r2, r6, #1
 80031ae:	d11c      	bne.n	80031ea <HAL_UART_Transmit+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031b0:	69e2      	ldr	r2, [r4, #28]
 80031b2:	0613      	lsls	r3, r2, #24
 80031b4:	d5fc      	bpl.n	80031b0 <HAL_UART_Transmit+0x4c>
      if (pdata8bits == NULL)
 80031b6:	f1b9 0f00 	cmp.w	r9, #0
 80031ba:	d022      	beq.n	8003202 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031bc:	f819 3b01 	ldrb.w	r3, [r9], #1
 80031c0:	8523      	strh	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 80031c2:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80031ce:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e9      	bne.n	80031ac <HAL_UART_Transmit+0x48>
 80031d8:	1c71      	adds	r1, r6, #1
 80031da:	d125      	bne.n	8003228 <HAL_UART_Transmit+0xc4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031dc:	69e3      	ldr	r3, [r4, #28]
 80031de:	065a      	lsls	r2, r3, #25
 80031e0:	d5fc      	bpl.n	80031dc <HAL_UART_Transmit+0x78>
    huart->gState = HAL_UART_STATE_READY;
 80031e2:	2320      	movs	r3, #32
 80031e4:	67eb      	str	r3, [r5, #124]	; 0x7c
    return HAL_OK;
 80031e6:	2000      	movs	r0, #0
 80031e8:	e7c7      	b.n	800317a <HAL_UART_Transmit+0x16>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ea:	69e3      	ldr	r3, [r4, #28]
 80031ec:	0618      	lsls	r0, r3, #24
 80031ee:	d4e2      	bmi.n	80031b6 <HAL_UART_Transmit+0x52>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f0:	f7fe fe56 	bl	8001ea0 <HAL_GetTick>
 80031f4:	1bc0      	subs	r0, r0, r7
 80031f6:	4286      	cmp	r6, r0
 80031f8:	d311      	bcc.n	800321e <HAL_UART_Transmit+0xba>
 80031fa:	b186      	cbz	r6, 800321e <HAL_UART_Transmit+0xba>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031fc:	682c      	ldr	r4, [r5, #0]
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	e7d4      	b.n	80031ac <HAL_UART_Transmit+0x48>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003202:	f838 3b02 	ldrh.w	r3, [r8], #2
 8003206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800320a:	e7d9      	b.n	80031c0 <HAL_UART_Transmit+0x5c>
    return HAL_BUSY;
 800320c:	2002      	movs	r0, #2
}
 800320e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003212:	692b      	ldr	r3, [r5, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1c4      	bne.n	80031a2 <HAL_UART_Transmit+0x3e>
 8003218:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 800321a:	4699      	mov	r9, r3
 800321c:	e7c1      	b.n	80031a2 <HAL_UART_Transmit+0x3e>
      huart->gState = HAL_UART_STATE_READY;
 800321e:	2320      	movs	r3, #32
 8003220:	67eb      	str	r3, [r5, #124]	; 0x7c
      return HAL_TIMEOUT;
 8003222:	2003      	movs	r0, #3
}
 8003224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003228:	69e3      	ldr	r3, [r4, #28]
 800322a:	065b      	lsls	r3, r3, #25
 800322c:	d4d9      	bmi.n	80031e2 <HAL_UART_Transmit+0x7e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800322e:	f7fe fe37 	bl	8001ea0 <HAL_GetTick>
 8003232:	1bc0      	subs	r0, r0, r7
 8003234:	4286      	cmp	r6, r0
 8003236:	d3f2      	bcc.n	800321e <HAL_UART_Transmit+0xba>
 8003238:	2e00      	cmp	r6, #0
 800323a:	d0f0      	beq.n	800321e <HAL_UART_Transmit+0xba>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800323c:	682c      	ldr	r4, [r5, #0]
 800323e:	6823      	ldr	r3, [r4, #0]
 8003240:	e7ca      	b.n	80031d8 <HAL_UART_Transmit+0x74>
 8003242:	bf00      	nop

08003244 <UART_SetConfig>:
{
 8003244:	b538      	push	{r3, r4, r5, lr}
 8003246:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8003248:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800324a:	6882      	ldr	r2, [r0, #8]
 800324c:	6900      	ldr	r0, [r0, #16]
 800324e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003250:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003252:	4302      	orrs	r2, r0
 8003254:	430a      	orrs	r2, r1
 8003256:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003258:	499f      	ldr	r1, [pc, #636]	; (80034d8 <UART_SetConfig+0x294>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800325a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800325c:	4029      	ands	r1, r5
 800325e:	430a      	orrs	r2, r1
 8003260:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	68e1      	ldr	r1, [r4, #12]
 8003266:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800326a:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800326c:	499b      	ldr	r1, [pc, #620]	; (80034dc <UART_SetConfig+0x298>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800326e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003270:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003272:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003274:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003276:	d071      	beq.n	800335c <UART_SetConfig+0x118>
    tmpreg |= huart->Init.OneBitSampling;
 8003278:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800327a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800327e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003280:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003282:	4997      	ldr	r1, [pc, #604]	; (80034e0 <UART_SetConfig+0x29c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003284:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003286:	428b      	cmp	r3, r1
 8003288:	d024      	beq.n	80032d4 <UART_SetConfig+0x90>
 800328a:	4a96      	ldr	r2, [pc, #600]	; (80034e4 <UART_SetConfig+0x2a0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d043      	beq.n	8003318 <UART_SetConfig+0xd4>
 8003290:	4a95      	ldr	r2, [pc, #596]	; (80034e8 <UART_SetConfig+0x2a4>)
 8003292:	4293      	cmp	r3, r2
 8003294:	f000 80d7 	beq.w	8003446 <UART_SetConfig+0x202>
 8003298:	4a94      	ldr	r2, [pc, #592]	; (80034ec <UART_SetConfig+0x2a8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	f000 80a1 	beq.w	80033e2 <UART_SetConfig+0x19e>
 80032a0:	4a93      	ldr	r2, [pc, #588]	; (80034f0 <UART_SetConfig+0x2ac>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d111      	bne.n	80032ca <UART_SetConfig+0x86>
 80032a6:	4b93      	ldr	r3, [pc, #588]	; (80034f4 <UART_SetConfig+0x2b0>)
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b4:	f000 80ff 	beq.w	80034b6 <UART_SetConfig+0x272>
 80032b8:	f200 80be 	bhi.w	8003438 <UART_SetConfig+0x1f4>
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80dc 	beq.w	800347a <UART_SetConfig+0x236>
 80032c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c6:	f000 8099 	beq.w	80033fc <UART_SetConfig+0x1b8>
        ret = HAL_ERROR;
 80032ca:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80032cc:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 80032ce:	e9c4 221a 	strd	r2, r2, [r4, #104]	; 0x68
}
 80032d2:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032d4:	4b87      	ldr	r3, [pc, #540]	; (80034f4 <UART_SetConfig+0x2b0>)
 80032d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	3b01      	subs	r3, #1
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d978      	bls.n	80033d6 <UART_SetConfig+0x192>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032e4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80032e8:	f000 80f0 	beq.w	80034cc <UART_SetConfig+0x288>
        pclk = HAL_RCC_GetPCLK2Freq();
 80032ec:	f7ff fbf4 	bl	8002ad8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80032f0:	2800      	cmp	r0, #0
 80032f2:	d048      	beq.n	8003386 <UART_SetConfig+0x142>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032f4:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032f6:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032fa:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 80032fe:	fbb0 f2f2 	udiv	r2, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003302:	f1a2 0310 	sub.w	r3, r2, #16
 8003306:	428b      	cmp	r3, r1
 8003308:	d8df      	bhi.n	80032ca <UART_SetConfig+0x86>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	60da      	str	r2, [r3, #12]
  huart->RxISR = NULL;
 800330e:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 8003310:	e9c4 221a 	strd	r2, r2, [r4, #104]	; 0x68
 8003314:	2000      	movs	r0, #0
}
 8003316:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003318:	4b76      	ldr	r3, [pc, #472]	; (80034f4 <UART_SetConfig+0x2b0>)
 800331a:	4a77      	ldr	r2, [pc, #476]	; (80034f8 <UART_SetConfig+0x2b4>)
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003320:	f003 030c 	and.w	r3, r3, #12
 8003324:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003326:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800332a:	d06d      	beq.n	8003408 <UART_SetConfig+0x1c4>
    switch (clocksource)
 800332c:	2b08      	cmp	r3, #8
 800332e:	d8cc      	bhi.n	80032ca <UART_SetConfig+0x86>
 8003330:	a201      	add	r2, pc, #4	; (adr r2, 8003338 <UART_SetConfig+0xf4>)
 8003332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003336:	bf00      	nop
 8003338:	08003441 	.word	0x08003441
 800333c:	080032ed 	.word	0x080032ed
 8003340:	080034bd 	.word	0x080034bd
 8003344:	080032cb 	.word	0x080032cb
 8003348:	08003403 	.word	0x08003403
 800334c:	080032cb 	.word	0x080032cb
 8003350:	080032cb 	.word	0x080032cb
 8003354:	080032cb 	.word	0x080032cb
 8003358:	0800346b 	.word	0x0800346b
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800335c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003360:	4864      	ldr	r0, [pc, #400]	; (80034f4 <UART_SetConfig+0x2b0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003362:	430a      	orrs	r2, r1
 8003364:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003366:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800336a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800336e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003372:	f000 8080 	beq.w	8003476 <UART_SetConfig+0x232>
 8003376:	d80b      	bhi.n	8003390 <UART_SetConfig+0x14c>
 8003378:	b383      	cbz	r3, 80033dc <UART_SetConfig+0x198>
 800337a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800337e:	d1a4      	bne.n	80032ca <UART_SetConfig+0x86>
        pclk = HAL_RCC_GetSysClockFreq();
 8003380:	f7fe ffa2 	bl	80022c8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8003384:	b948      	cbnz	r0, 800339a <UART_SetConfig+0x156>
  huart->RxISR = NULL;
 8003386:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 8003388:	e9c4 221a 	strd	r2, r2, [r4, #104]	; 0x68
 800338c:	2000      	movs	r0, #0
}
 800338e:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003390:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003394:	d199      	bne.n	80032ca <UART_SetConfig+0x86>
        pclk = (uint32_t) LSE_VALUE;
 8003396:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800339a:	6862      	ldr	r2, [r4, #4]
 800339c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80033a0:	4283      	cmp	r3, r0
 80033a2:	d892      	bhi.n	80032ca <UART_SetConfig+0x86>
 80033a4:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80033a8:	d88f      	bhi.n	80032ca <UART_SetConfig+0x86>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033aa:	2500      	movs	r5, #0
 80033ac:	0853      	lsrs	r3, r2, #1
 80033ae:	f44f 7c80 	mov.w	ip, #256	; 0x100
 80033b2:	4629      	mov	r1, r5
 80033b4:	fbe0 310c 	umlal	r3, r1, r0, ip
 80033b8:	4618      	mov	r0, r3
 80033ba:	462b      	mov	r3, r5
 80033bc:	f7fd fc54 	bl	8000c68 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033c0:	4a4e      	ldr	r2, [pc, #312]	; (80034fc <UART_SetConfig+0x2b8>)
 80033c2:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80033c6:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033c8:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033ca:	f63f af7e 	bhi.w	80032ca <UART_SetConfig+0x86>
          huart->Instance->BRR = usartdiv;
 80033ce:	6822      	ldr	r2, [r4, #0]
 80033d0:	4628      	mov	r0, r5
 80033d2:	60d3      	str	r3, [r2, #12]
 80033d4:	e77a      	b.n	80032cc <UART_SetConfig+0x88>
 80033d6:	4a4a      	ldr	r2, [pc, #296]	; (8003500 <UART_SetConfig+0x2bc>)
 80033d8:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 80033da:	e7a4      	b.n	8003326 <UART_SetConfig+0xe2>
        pclk = HAL_RCC_GetPCLK1Freq();
 80033dc:	f7ff fb6a 	bl	8002ab4 <HAL_RCC_GetPCLK1Freq>
        break;
 80033e0:	e7d0      	b.n	8003384 <UART_SetConfig+0x140>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033e2:	4b44      	ldr	r3, [pc, #272]	; (80034f4 <UART_SetConfig+0x2b0>)
 80033e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80033ec:	2b80      	cmp	r3, #128	; 0x80
 80033ee:	d062      	beq.n	80034b6 <UART_SetConfig+0x272>
 80033f0:	d83e      	bhi.n	8003470 <UART_SetConfig+0x22c>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d041      	beq.n	800347a <UART_SetConfig+0x236>
 80033f6:	2b40      	cmp	r3, #64	; 0x40
 80033f8:	f47f af67 	bne.w	80032ca <UART_SetConfig+0x86>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033fc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003400:	d05e      	beq.n	80034c0 <UART_SetConfig+0x27c>
        pclk = HAL_RCC_GetSysClockFreq();
 8003402:	f7fe ff61 	bl	80022c8 <HAL_RCC_GetSysClockFreq>
        break;
 8003406:	e773      	b.n	80032f0 <UART_SetConfig+0xac>
    switch (clocksource)
 8003408:	2b08      	cmp	r3, #8
 800340a:	f63f af5e 	bhi.w	80032ca <UART_SetConfig+0x86>
 800340e:	a201      	add	r2, pc, #4	; (adr r2, 8003414 <UART_SetConfig+0x1d0>)
 8003410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003414:	08003481 	.word	0x08003481
 8003418:	080034cd 	.word	0x080034cd
 800341c:	080034d3 	.word	0x080034d3
 8003420:	080032cb 	.word	0x080032cb
 8003424:	080034c1 	.word	0x080034c1
 8003428:	080032cb 	.word	0x080032cb
 800342c:	080032cb 	.word	0x080032cb
 8003430:	080032cb 	.word	0x080032cb
 8003434:	080034c7 	.word	0x080034c7
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800343c:	d012      	beq.n	8003464 <UART_SetConfig+0x220>
 800343e:	e744      	b.n	80032ca <UART_SetConfig+0x86>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003440:	f7ff fb38 	bl	8002ab4 <HAL_RCC_GetPCLK1Freq>
        break;
 8003444:	e754      	b.n	80032f0 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003446:	4b2b      	ldr	r3, [pc, #172]	; (80034f4 <UART_SetConfig+0x2b0>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003450:	2b20      	cmp	r3, #32
 8003452:	d030      	beq.n	80034b6 <UART_SetConfig+0x272>
 8003454:	d803      	bhi.n	800345e <UART_SetConfig+0x21a>
 8003456:	b183      	cbz	r3, 800347a <UART_SetConfig+0x236>
 8003458:	2b10      	cmp	r3, #16
 800345a:	d0cf      	beq.n	80033fc <UART_SetConfig+0x1b8>
 800345c:	e735      	b.n	80032ca <UART_SetConfig+0x86>
 800345e:	2b30      	cmp	r3, #48	; 0x30
 8003460:	f47f af33 	bne.w	80032ca <UART_SetConfig+0x86>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003464:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003468:	d02d      	beq.n	80034c6 <UART_SetConfig+0x282>
    switch (clocksource)
 800346a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800346e:	e741      	b.n	80032f4 <UART_SetConfig+0xb0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003470:	2bc0      	cmp	r3, #192	; 0xc0
 8003472:	d0f7      	beq.n	8003464 <UART_SetConfig+0x220>
 8003474:	e729      	b.n	80032ca <UART_SetConfig+0x86>
 8003476:	4823      	ldr	r0, [pc, #140]	; (8003504 <UART_SetConfig+0x2c0>)
 8003478:	e78f      	b.n	800339a <UART_SetConfig+0x156>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800347a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800347e:	d1df      	bne.n	8003440 <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003480:	f7ff fb18 	bl	8002ab4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003484:	2800      	cmp	r0, #0
 8003486:	f43f af7e 	beq.w	8003386 <UART_SetConfig+0x142>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800348a:	0043      	lsls	r3, r0, #1
 800348c:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800348e:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003492:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8003496:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800349a:	f1a3 0210 	sub.w	r2, r3, #16
 800349e:	428a      	cmp	r2, r1
 80034a0:	f63f af13 	bhi.w	80032ca <UART_SetConfig+0x86>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034a4:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 80034a8:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034aa:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034ac:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80034b0:	4313      	orrs	r3, r2
 80034b2:	60cb      	str	r3, [r1, #12]
 80034b4:	e767      	b.n	8003386 <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034b6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80034ba:	d00a      	beq.n	80034d2 <UART_SetConfig+0x28e>
        pclk = (uint32_t) HSI_VALUE;
 80034bc:	4811      	ldr	r0, [pc, #68]	; (8003504 <UART_SetConfig+0x2c0>)
 80034be:	e719      	b.n	80032f4 <UART_SetConfig+0xb0>
        pclk = HAL_RCC_GetSysClockFreq();
 80034c0:	f7fe ff02 	bl	80022c8 <HAL_RCC_GetSysClockFreq>
        break;
 80034c4:	e7de      	b.n	8003484 <UART_SetConfig+0x240>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034ca:	e7df      	b.n	800348c <UART_SetConfig+0x248>
        pclk = HAL_RCC_GetPCLK2Freq();
 80034cc:	f7ff fb04 	bl	8002ad8 <HAL_RCC_GetPCLK2Freq>
        break;
 80034d0:	e7d8      	b.n	8003484 <UART_SetConfig+0x240>
    switch (clocksource)
 80034d2:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <UART_SetConfig+0x2c4>)
 80034d4:	e7da      	b.n	800348c <UART_SetConfig+0x248>
 80034d6:	bf00      	nop
 80034d8:	efff69f3 	.word	0xefff69f3
 80034dc:	40008000 	.word	0x40008000
 80034e0:	40013800 	.word	0x40013800
 80034e4:	40004400 	.word	0x40004400
 80034e8:	40004800 	.word	0x40004800
 80034ec:	40004c00 	.word	0x40004c00
 80034f0:	40005000 	.word	0x40005000
 80034f4:	40021000 	.word	0x40021000
 80034f8:	08014be0 	.word	0x08014be0
 80034fc:	000ffcff 	.word	0x000ffcff
 8003500:	08014bdc 	.word	0x08014bdc
 8003504:	00f42400 	.word	0x00f42400
 8003508:	01e84800 	.word	0x01e84800

0800350c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800350c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800350e:	071a      	lsls	r2, r3, #28
{
 8003510:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003512:	d506      	bpl.n	8003522 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003514:	6801      	ldr	r1, [r0, #0]
 8003516:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003518:	684a      	ldr	r2, [r1, #4]
 800351a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800351e:	4322      	orrs	r2, r4
 8003520:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003522:	07dc      	lsls	r4, r3, #31
 8003524:	d506      	bpl.n	8003534 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003526:	6801      	ldr	r1, [r0, #0]
 8003528:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800352a:	684a      	ldr	r2, [r1, #4]
 800352c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003530:	4322      	orrs	r2, r4
 8003532:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003534:	0799      	lsls	r1, r3, #30
 8003536:	d506      	bpl.n	8003546 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003538:	6801      	ldr	r1, [r0, #0]
 800353a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800353c:	684a      	ldr	r2, [r1, #4]
 800353e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003542:	4322      	orrs	r2, r4
 8003544:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003546:	075a      	lsls	r2, r3, #29
 8003548:	d506      	bpl.n	8003558 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800354a:	6801      	ldr	r1, [r0, #0]
 800354c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800354e:	684a      	ldr	r2, [r1, #4]
 8003550:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003554:	4322      	orrs	r2, r4
 8003556:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003558:	06dc      	lsls	r4, r3, #27
 800355a:	d506      	bpl.n	800356a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800355c:	6801      	ldr	r1, [r0, #0]
 800355e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003560:	688a      	ldr	r2, [r1, #8]
 8003562:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003566:	4322      	orrs	r2, r4
 8003568:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800356a:	0699      	lsls	r1, r3, #26
 800356c:	d506      	bpl.n	800357c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800356e:	6801      	ldr	r1, [r0, #0]
 8003570:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003572:	688a      	ldr	r2, [r1, #8]
 8003574:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003578:	4322      	orrs	r2, r4
 800357a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800357c:	065a      	lsls	r2, r3, #25
 800357e:	d509      	bpl.n	8003594 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003580:	6801      	ldr	r1, [r0, #0]
 8003582:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003584:	684a      	ldr	r2, [r1, #4]
 8003586:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800358a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800358c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003590:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003592:	d00b      	beq.n	80035ac <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003594:	061b      	lsls	r3, r3, #24
 8003596:	d506      	bpl.n	80035a6 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003598:	6802      	ldr	r2, [r0, #0]
 800359a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800359c:	6853      	ldr	r3, [r2, #4]
 800359e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80035a2:	430b      	orrs	r3, r1
 80035a4:	6053      	str	r3, [r2, #4]
}
 80035a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035aa:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035ac:	684a      	ldr	r2, [r1, #4]
 80035ae:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80035b0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80035b4:	4322      	orrs	r2, r4
 80035b6:	604a      	str	r2, [r1, #4]
 80035b8:	e7ec      	b.n	8003594 <UART_AdvFeatureConfig+0x88>
 80035ba:	bf00      	nop

080035bc <UART_CheckIdleState>:
{
 80035bc:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035be:	2300      	movs	r3, #0
{
 80035c0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 80035c6:	f7fe fc6b 	bl	8001ea0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035ca:	6822      	ldr	r2, [r4, #0]
 80035cc:	6813      	ldr	r3, [r2, #0]
 80035ce:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 80035d0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035d2:	d40e      	bmi.n	80035f2 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035d4:	6813      	ldr	r3, [r2, #0]
 80035d6:	0759      	lsls	r1, r3, #29
 80035d8:	d42f      	bmi.n	800363a <UART_CheckIdleState+0x7e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035da:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80035dc:	2220      	movs	r2, #32
 80035de:	67e2      	str	r2, [r4, #124]	; 0x7c
  return HAL_OK;
 80035e0:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 80035e2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e6:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035e8:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(huart);
 80035ea:	2300      	movs	r3, #0
 80035ec:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 80035f0:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035f2:	69d3      	ldr	r3, [r2, #28]
 80035f4:	0298      	lsls	r0, r3, #10
 80035f6:	d4ed      	bmi.n	80035d4 <UART_CheckIdleState+0x18>
 80035f8:	e00c      	b.n	8003614 <UART_CheckIdleState+0x58>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035fa:	6819      	ldr	r1, [r3, #0]
 80035fc:	0749      	lsls	r1, r1, #29
 80035fe:	461a      	mov	r2, r3
 8003600:	d505      	bpl.n	800360e <UART_CheckIdleState+0x52>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003602:	69d9      	ldr	r1, [r3, #28]
 8003604:	0708      	lsls	r0, r1, #28
 8003606:	d44a      	bmi.n	800369e <UART_CheckIdleState+0xe2>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003608:	69d9      	ldr	r1, [r3, #28]
 800360a:	0509      	lsls	r1, r1, #20
 800360c:	d475      	bmi.n	80036fa <UART_CheckIdleState+0x13e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	0298      	lsls	r0, r3, #10
 8003612:	d4df      	bmi.n	80035d4 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003614:	f7fe fc44 	bl	8001ea0 <HAL_GetTick>
 8003618:	1b43      	subs	r3, r0, r5
 800361a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	d3eb      	bcc.n	80035fa <UART_CheckIdleState+0x3e>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003622:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003626:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362a:	e843 2100 	strex	r1, r2, [r3]
 800362e:	2900      	cmp	r1, #0
 8003630:	d1f7      	bne.n	8003622 <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 8003632:	2320      	movs	r3, #32
 8003634:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8003636:	2003      	movs	r0, #3
 8003638:	e7d7      	b.n	80035ea <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800363a:	69d3      	ldr	r3, [r2, #28]
 800363c:	025b      	lsls	r3, r3, #9
 800363e:	d4cc      	bmi.n	80035da <UART_CheckIdleState+0x1e>
 8003640:	e00d      	b.n	800365e <UART_CheckIdleState+0xa2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	0750      	lsls	r0, r2, #29
 8003646:	d507      	bpl.n	8003658 <UART_CheckIdleState+0x9c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003648:	69da      	ldr	r2, [r3, #28]
 800364a:	0711      	lsls	r1, r2, #28
 800364c:	f100 8083 	bmi.w	8003756 <UART_CheckIdleState+0x19a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003650:	69da      	ldr	r2, [r3, #28]
 8003652:	0512      	lsls	r2, r2, #20
 8003654:	f100 80ad 	bmi.w	80037b2 <UART_CheckIdleState+0x1f6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	025b      	lsls	r3, r3, #9
 800365c:	d4bd      	bmi.n	80035da <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365e:	f7fe fc1f 	bl	8001ea0 <HAL_GetTick>
 8003662:	1b43      	subs	r3, r0, r5
 8003664:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	d3ea      	bcc.n	8003642 <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003670:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003674:	e843 2100 	strex	r1, r2, [r3]
 8003678:	2900      	cmp	r1, #0
 800367a:	d1f7      	bne.n	800366c <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367c:	f103 0208 	add.w	r2, r3, #8
 8003680:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003684:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003688:	f103 0008 	add.w	r0, r3, #8
 800368c:	e840 2100 	strex	r1, r2, [r0]
 8003690:	2900      	cmp	r1, #0
 8003692:	d1f3      	bne.n	800367c <UART_CheckIdleState+0xc0>
      huart->RxState = HAL_UART_STATE_READY;
 8003694:	2320      	movs	r3, #32
 8003696:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      return HAL_TIMEOUT;
 800369a:	2003      	movs	r0, #3
 800369c:	e7a5      	b.n	80035ea <UART_CheckIdleState+0x2e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800369e:	2208      	movs	r2, #8
 80036a0:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a2:	e853 2f00 	ldrex	r2, [r3]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036aa:	e843 2100 	strex	r1, r2, [r3]
 80036ae:	2900      	cmp	r1, #0
 80036b0:	d1f7      	bne.n	80036a2 <UART_CheckIdleState+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b2:	f103 0208 	add.w	r2, r3, #8
 80036b6:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ba:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036be:	f103 0008 	add.w	r0, r3, #8
 80036c2:	e840 2100 	strex	r1, r2, [r0]
 80036c6:	2900      	cmp	r1, #0
 80036c8:	d1f3      	bne.n	80036b2 <UART_CheckIdleState+0xf6>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ca:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80036cc:	2a01      	cmp	r2, #1
 80036ce:	d00b      	beq.n	80036e8 <UART_CheckIdleState+0x12c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d0:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80036d2:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036d4:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80036d6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036da:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036dc:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 80036de:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036e2:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_ERROR;
 80036e6:	e79c      	b.n	8003622 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ec:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f0:	e843 2100 	strex	r1, r2, [r3]
 80036f4:	2900      	cmp	r1, #0
 80036f6:	d1f7      	bne.n	80036e8 <UART_CheckIdleState+0x12c>
 80036f8:	e7ea      	b.n	80036d0 <UART_CheckIdleState+0x114>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036fe:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003704:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003708:	e843 2100 	strex	r1, r2, [r3]
 800370c:	2900      	cmp	r1, #0
 800370e:	d1f7      	bne.n	8003700 <UART_CheckIdleState+0x144>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003710:	f103 0208 	add.w	r2, r3, #8
 8003714:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003718:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371c:	f103 0008 	add.w	r0, r3, #8
 8003720:	e840 2100 	strex	r1, r2, [r0]
 8003724:	2900      	cmp	r1, #0
 8003726:	d1f3      	bne.n	8003710 <UART_CheckIdleState+0x154>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003728:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800372a:	2a01      	cmp	r2, #1
 800372c:	d00a      	beq.n	8003744 <UART_CheckIdleState+0x188>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003730:	2120      	movs	r1, #32
 8003732:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8003736:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003738:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 800373a:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800373e:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 8003742:	e76e      	b.n	8003622 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003744:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003748:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374c:	e843 2100 	strex	r1, r2, [r3]
 8003750:	2900      	cmp	r1, #0
 8003752:	d1f7      	bne.n	8003744 <UART_CheckIdleState+0x188>
 8003754:	e7eb      	b.n	800372e <UART_CheckIdleState+0x172>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003756:	2208      	movs	r2, #8
 8003758:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800375e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003762:	e843 2100 	strex	r1, r2, [r3]
 8003766:	2900      	cmp	r1, #0
 8003768:	d1f7      	bne.n	800375a <UART_CheckIdleState+0x19e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376a:	f103 0208 	add.w	r2, r3, #8
 800376e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003772:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	f103 0008 	add.w	r0, r3, #8
 800377a:	e840 2100 	strex	r1, r2, [r0]
 800377e:	2900      	cmp	r1, #0
 8003780:	d1f3      	bne.n	800376a <UART_CheckIdleState+0x1ae>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003782:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003784:	2a01      	cmp	r2, #1
 8003786:	d00b      	beq.n	80037a0 <UART_CheckIdleState+0x1e4>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003788:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800378a:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800378c:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800378e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8003792:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003794:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 8003796:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800379a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_ERROR;
 800379e:	e765      	b.n	800366c <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a0:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	e843 2100 	strex	r1, r2, [r3]
 80037ac:	2900      	cmp	r1, #0
 80037ae:	d1f7      	bne.n	80037a0 <UART_CheckIdleState+0x1e4>
 80037b0:	e7ea      	b.n	8003788 <UART_CheckIdleState+0x1cc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037b6:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c0:	e843 2100 	strex	r1, r2, [r3]
 80037c4:	2900      	cmp	r1, #0
 80037c6:	d1f7      	bne.n	80037b8 <UART_CheckIdleState+0x1fc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c8:	f103 0208 	add.w	r2, r3, #8
 80037cc:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d4:	f103 0008 	add.w	r0, r3, #8
 80037d8:	e840 2100 	strex	r1, r2, [r0]
 80037dc:	2900      	cmp	r1, #0
 80037de:	d1f3      	bne.n	80037c8 <UART_CheckIdleState+0x20c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80037e2:	2a01      	cmp	r2, #1
 80037e4:	d00a      	beq.n	80037fc <UART_CheckIdleState+0x240>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e6:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80037e8:	2120      	movs	r1, #32
 80037ea:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 80037ee:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f0:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 80037f2:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037f6:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 80037fa:	e737      	b.n	800366c <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fc:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003800:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003804:	e843 2100 	strex	r1, r2, [r3]
 8003808:	2900      	cmp	r1, #0
 800380a:	d1f7      	bne.n	80037fc <UART_CheckIdleState+0x240>
 800380c:	e7eb      	b.n	80037e6 <UART_CheckIdleState+0x22a>
 800380e:	bf00      	nop

08003810 <HAL_UART_Init>:
  if (huart == NULL)
 8003810:	b370      	cbz	r0, 8003870 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003812:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8003814:	b510      	push	{r4, lr}
 8003816:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003818:	b32b      	cbz	r3, 8003866 <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 800381a:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800381c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  huart->gState = HAL_UART_STATE_BUSY;
 800381e:	2324      	movs	r3, #36	; 0x24
 8003820:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8003822:	6813      	ldr	r3, [r2, #0]
 8003824:	f023 0301 	bic.w	r3, r3, #1
 8003828:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800382a:	b9c1      	cbnz	r1, 800385e <HAL_UART_Init+0x4e>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800382c:	4620      	mov	r0, r4
 800382e:	f7ff fd09 	bl	8003244 <UART_SetConfig>
 8003832:	2801      	cmp	r0, #1
 8003834:	d011      	beq.n	800385a <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800383e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003846:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800384e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003850:	601a      	str	r2, [r3, #0]
}
 8003852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003856:	f7ff beb1 	b.w	80035bc <UART_CheckIdleState>
}
 800385a:	2001      	movs	r0, #1
 800385c:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800385e:	4620      	mov	r0, r4
 8003860:	f7ff fe54 	bl	800350c <UART_AdvFeatureConfig>
 8003864:	e7e2      	b.n	800382c <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8003866:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 800386a:	f7fe f9c9 	bl	8001c00 <HAL_UART_MspInit>
 800386e:	e7d4      	b.n	800381a <HAL_UART_Init+0xa>
}
 8003870:	2001      	movs	r0, #1
 8003872:	4770      	bx	lr

08003874 <TfLiteIntArrayGetSizeInBytes>:
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
 8003874:	3001      	adds	r0, #1
}
 8003876:	0080      	lsls	r0, r0, #2
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop

0800387c <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
 800387c:	280c      	cmp	r0, #12
 800387e:	bf9a      	itte	ls
 8003880:	4b02      	ldrls	r3, [pc, #8]	; (800388c <TfLiteTypeGetName+0x10>)
 8003882:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
const char* TfLiteTypeGetName(TfLiteType type) {
 8003886:	4802      	ldrhi	r0, [pc, #8]	; (8003890 <TfLiteTypeGetName+0x14>)
      return "FLOAT16";
    case kTfLiteFloat64:
      return "FLOAT64";
  }
  return "Unknown type";
}
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	08014c70 	.word	0x08014c70
 8003890:	08014bf0 	.word	0x08014bf0

08003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 8003894:	b40e      	push	{r1, r2, r3}
 8003896:	b500      	push	{lr}
 8003898:	b082      	sub	sp, #8
 800389a:	aa03      	add	r2, sp, #12
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
 800389c:	6803      	ldr	r3, [r0, #0]
int ErrorReporter::Report(const char* format, ...) {
 800389e:	f852 1b04 	ldr.w	r1, [r2], #4
  int code = Report(format, args);
 80038a2:	689b      	ldr	r3, [r3, #8]
  va_start(args, format);
 80038a4:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
 80038a6:	4798      	blx	r3
  va_end(args);
  return code;
}
 80038a8:	b002      	add	sp, #8
 80038aa:	f85d eb04 	ldr.w	lr, [sp], #4
 80038ae:	b003      	add	sp, #12
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop

080038b4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 80038b4:	b40c      	push	{r2, r3}
 80038b6:	b500      	push	{lr}
 80038b8:	b083      	sub	sp, #12
 80038ba:	aa04      	add	r2, sp, #16
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
 80038bc:	6803      	ldr	r3, [r0, #0]
int ErrorReporter::ReportError(void*, const char* format, ...) {
 80038be:	f852 1b04 	ldr.w	r1, [r2], #4
  int code = Report(format, args);
 80038c2:	689b      	ldr	r3, [r3, #8]
  va_start(args, format);
 80038c4:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
 80038c6:	4798      	blx	r3
  va_end(args);
  return code;
}
 80038c8:	b003      	add	sp, #12
 80038ca:	f85d eb04 	ldr.w	lr, [sp], #4
 80038ce:	b002      	add	sp, #8
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop

080038d4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 80038d4:	b508      	push	{r3, lr}
 80038d6:	468c      	mov	ip, r1
 80038d8:	4613      	mov	r3, r2
  switch (tensor_type) {
 80038da:	280b      	cmp	r0, #11
 80038dc:	d836      	bhi.n	800394c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x78>
 80038de:	e8df f000 	tbb	[pc, r0]
 80038e2:	0d0a      	.short	0x0d0a
 80038e4:	1d191511 	.word	0x1d191511
 80038e8:	2d292521 	.word	0x2d292521
 80038ec:	0631      	.short	0x0631
      return kTfLiteOk;
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
      return kTfLiteOk;
    case TensorType_COMPLEX128:
      *type = kTfLiteComplex128;
 80038ee:	230c      	movs	r3, #12
 80038f0:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 80038f2:	2000      	movs	r0, #0
      *type = kTfLiteNoType;
      TF_LITE_REPORT_ERROR(error_reporter,
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
  }
}
 80038f4:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat32;
 80038f6:	2301      	movs	r3, #1
 80038f8:	700b      	strb	r3, [r1, #0]
}
 80038fa:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat16;
 80038fc:	230a      	movs	r3, #10
 80038fe:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8003900:	2000      	movs	r0, #0
}
 8003902:	bd08      	pop	{r3, pc}
      *type = kTfLiteInt32;
 8003904:	2302      	movs	r3, #2
 8003906:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8003908:	2000      	movs	r0, #0
}
 800390a:	bd08      	pop	{r3, pc}
      *type = kTfLiteUInt8;
 800390c:	2303      	movs	r3, #3
 800390e:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8003910:	2000      	movs	r0, #0
}
 8003912:	bd08      	pop	{r3, pc}
      *type = kTfLiteInt64;
 8003914:	2304      	movs	r3, #4
 8003916:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8003918:	2000      	movs	r0, #0
}
 800391a:	bd08      	pop	{r3, pc}
      *type = kTfLiteString;
 800391c:	2305      	movs	r3, #5
 800391e:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8003920:	2000      	movs	r0, #0
}
 8003922:	bd08      	pop	{r3, pc}
      *type = kTfLiteBool;
 8003924:	2306      	movs	r3, #6
 8003926:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8003928:	2000      	movs	r0, #0
}
 800392a:	bd08      	pop	{r3, pc}
      *type = kTfLiteInt16;
 800392c:	2307      	movs	r3, #7
 800392e:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8003930:	2000      	movs	r0, #0
}
 8003932:	bd08      	pop	{r3, pc}
      *type = kTfLiteComplex64;
 8003934:	2308      	movs	r3, #8
 8003936:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8003938:	2000      	movs	r0, #0
}
 800393a:	bd08      	pop	{r3, pc}
      *type = kTfLiteInt8;
 800393c:	2309      	movs	r3, #9
 800393e:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8003940:	2000      	movs	r0, #0
}
 8003942:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat64;
 8003944:	230b      	movs	r3, #11
 8003946:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
 8003948:	2000      	movs	r0, #0
}
 800394a:	bd08      	pop	{r3, pc}
      *type = kTfLiteNoType;
 800394c:	2200      	movs	r2, #0
 800394e:	f88c 2000 	strb.w	r2, [ip]
      TF_LITE_REPORT_ERROR(error_reporter,
 8003952:	4903      	ldr	r1, [pc, #12]	; (8003960 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x8c>)
 8003954:	4602      	mov	r2, r0
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff ff9c 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
 800395c:	2001      	movs	r0, #1
}
 800395e:	bd08      	pop	{r3, pc}
 8003960:	08014ca4 	.word	0x08014ca4

08003964 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  *builtin_data = params.release();
  return kTfLiteOk;
}

TfLiteStatus ParseConv2D(const Operator* op, ErrorReporter* error_reporter,
                         BuiltinDataAllocator* allocator, void** builtin_data) {
 8003964:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(op != nullptr);
 8003966:	2800      	cmp	r0, #0
 8003968:	d06a      	beq.n	8003a40 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xdc>
  TFLITE_DCHECK(error_reporter != nullptr);
 800396a:	2900      	cmp	r1, #0
 800396c:	d068      	beq.n	8003a40 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xdc>
  TFLITE_DCHECK(allocator != nullptr);
 800396e:	4615      	mov	r5, r2
 8003970:	2a00      	cmp	r2, #0
 8003972:	d065      	beq.n	8003a40 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xdc>
  TFLITE_DCHECK(builtin_data != nullptr);
 8003974:	461e      	mov	r6, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d062      	beq.n	8003a40 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xdc>
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800397a:	6813      	ldr	r3, [r2, #0]
 800397c:	4604      	mov	r4, r0
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2204      	movs	r2, #4
 8003982:	2118      	movs	r1, #24
 8003984:	4628      	mov	r0, r5
 8003986:	4798      	blx	r3
    return data_ - ReadScalar<soffset_t>(data_);
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	1ae3      	subs	r3, r4, r3
    return new (allocated_memory) T();
 800398c:	2100      	movs	r1, #0
 800398e:	e9c0 1100 	strd	r1, r1, [r0]
 8003992:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8003996:	e9c0 1104 	strd	r1, r1, [r0, #16]
 800399a:	8819      	ldrh	r1, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800399c:	290a      	cmp	r1, #10
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800399e:	4602      	mov	r2, r0
 80039a0:	d93e      	bls.n	8003a20 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>
 80039a2:	8958      	ldrh	r0, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80039a4:	2800      	cmp	r0, #0
 80039a6:	d03b      	beq.n	8003a20 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>
 80039a8:	5c25      	ldrb	r5, [r4, r0]
  const void *builtin_options() const {
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
  }
  template<typename T> const T *builtin_options_as() const;
  const tflite::Conv2DOptions *builtin_options_as_Conv2DOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
 80039aa:	2d01      	cmp	r5, #1
 80039ac:	d138      	bne.n	8003a20 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80039ae:	290c      	cmp	r1, #12
 80039b0:	d936      	bls.n	8003a20 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>
 80039b2:	899b      	ldrh	r3, [r3, #12]
  }

  template<typename P> P GetPointer(voffset_t field) {
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
 80039b4:	18e0      	adds	r0, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d032      	beq.n	8003a20 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>
 80039ba:	58e1      	ldr	r1, [r4, r3]
    return data_ - ReadScalar<soffset_t>(data_);
 80039bc:	5843      	ldr	r3, [r0, r1]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80039be:	4408      	add	r0, r1
    return data_ - ReadScalar<soffset_t>(data_);
 80039c0:	1ac3      	subs	r3, r0, r3
 80039c2:	881c      	ldrh	r4, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80039c4:	2c04      	cmp	r4, #4
 80039c6:	d92e      	bls.n	8003a26 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2>
 80039c8:	8899      	ldrh	r1, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80039ca:	b139      	cbz	r1, 80039dc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>
 80039cc:	5641      	ldrsb	r1, [r0, r1]
  switch (padding) {
 80039ce:	b129      	cbz	r1, 80039dc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>
 80039d0:	f1a1 0101 	sub.w	r1, r1, #1
 80039d4:	fab1 f181 	clz	r1, r1
 80039d8:	0949      	lsrs	r1, r1, #5
 80039da:	004d      	lsls	r5, r1, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80039dc:	2c06      	cmp	r4, #6
  TF_LITE_ENSURE(error_reporter, params != nullptr);

  const Conv2DOptions* schema_params = op->builtin_options_as_Conv2DOptions();

  if (schema_params != nullptr) {
    params->padding = ConvertPadding(schema_params->padding());
 80039de:	7015      	strb	r5, [r2, #0]
 80039e0:	d923      	bls.n	8003a2a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
 80039e2:	88d9      	ldrh	r1, [r3, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80039e4:	b101      	cbz	r1, 80039e8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>
 80039e6:	5841      	ldr	r1, [r0, r1]
    params->stride_width = schema_params->stride_w();
 80039e8:	6051      	str	r1, [r2, #4]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80039ea:	2c08      	cmp	r4, #8
 80039ec:	d91d      	bls.n	8003a2a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
 80039ee:	8919      	ldrh	r1, [r3, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80039f0:	b101      	cbz	r1, 80039f4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>
 80039f2:	5841      	ldr	r1, [r0, r1]
    params->stride_height = schema_params->stride_h();
 80039f4:	6091      	str	r1, [r2, #8]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80039f6:	2c0a      	cmp	r4, #10
 80039f8:	d917      	bls.n	8003a2a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
 80039fa:	8959      	ldrh	r1, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80039fc:	b1a9      	cbz	r1, 8003a2a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 80039fe:	5c41      	ldrb	r1, [r0, r1]
 8003a00:	1e4d      	subs	r5, r1, #1
 8003a02:	2d04      	cmp	r5, #4
 8003a04:	d811      	bhi.n	8003a2a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003a06:	2c0c      	cmp	r4, #12
    params->activation =
 8003a08:	7311      	strb	r1, [r2, #12]
 8003a0a:	d912      	bls.n	8003a32 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
 8003a0c:	8999      	ldrh	r1, [r3, #12]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003a0e:	b1a9      	cbz	r1, 8003a3c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
 8003a10:	5841      	ldr	r1, [r0, r1]
        ConvertActivation(schema_params->fused_activation_function());

    params->dilation_width_factor = schema_params->dilation_w_factor();
 8003a12:	6111      	str	r1, [r2, #16]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003a14:	2c0e      	cmp	r4, #14
 8003a16:	d90f      	bls.n	8003a38 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
 8003a18:	89db      	ldrh	r3, [r3, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003a1a:	b16b      	cbz	r3, 8003a38 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
 8003a1c:	58c3      	ldr	r3, [r0, r3]
    params->dilation_height_factor = schema_params->dilation_h_factor();
 8003a1e:	6153      	str	r3, [r2, #20]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8003a20:	6032      	str	r2, [r6, #0]
  return kTfLiteOk;
}
 8003a22:	2000      	movs	r0, #0
 8003a24:	bd70      	pop	{r4, r5, r6, pc}
    params->padding = ConvertPadding(schema_params->padding());
 8003a26:	2101      	movs	r1, #1
 8003a28:	7011      	strb	r1, [r2, #0]
 8003a2a:	2100      	movs	r1, #0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003a2c:	2c0c      	cmp	r4, #12
    params->activation =
 8003a2e:	7311      	strb	r1, [r2, #12]
 8003a30:	d8ec      	bhi.n	8003a0c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    params->dilation_width_factor = schema_params->dilation_w_factor();
 8003a32:	2301      	movs	r3, #1
 8003a34:	6113      	str	r3, [r2, #16]
 8003a36:	e7f2      	b.n	8003a1e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xba>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e7f0      	b.n	8003a1e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xba>
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	e7e8      	b.n	8003a12 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
  TFLITE_DCHECK(op != nullptr);
 8003a40:	f00d fba0 	bl	8011184 <abort>

08003a44 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
 8003a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(op != nullptr);
 8003a48:	2800      	cmp	r0, #0
 8003a4a:	d060      	beq.n	8003b0e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
  TFLITE_DCHECK(error_reporter != nullptr);
 8003a4c:	4688      	mov	r8, r1
 8003a4e:	2900      	cmp	r1, #0
 8003a50:	d05d      	beq.n	8003b0e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
  TFLITE_DCHECK(allocator != nullptr);
 8003a52:	4614      	mov	r4, r2
 8003a54:	2a00      	cmp	r2, #0
 8003a56:	d05a      	beq.n	8003b0e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
  TFLITE_DCHECK(builtin_data != nullptr);
 8003a58:	461f      	mov	r7, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d057      	beq.n	8003b0e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
 8003a5e:	6813      	ldr	r3, [r2, #0]
 8003a60:	4605      	mov	r5, r0
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2201      	movs	r2, #1
 8003a66:	2104      	movs	r1, #4
 8003a68:	4620      	mov	r0, r4
 8003a6a:	4798      	blx	r3
    return data_ - ReadScalar<soffset_t>(data_);
 8003a6c:	682b      	ldr	r3, [r5, #0]
 8003a6e:	1aeb      	subs	r3, r5, r3
    return new (allocated_memory) T();
 8003a70:	2200      	movs	r2, #0
 8003a72:	6002      	str	r2, [r0, #0]
 8003a74:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003a76:	2a0a      	cmp	r2, #10
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8003a78:	4606      	mov	r6, r0
 8003a7a:	d901      	bls.n	8003a80 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3c>
 8003a7c:	8959      	ldrh	r1, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003a7e:	b919      	cbnz	r1, 8003a88 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x44>
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8003a80:	603e      	str	r6, [r7, #0]
  return kTfLiteOk;
 8003a82:	2000      	movs	r0, #0
}
 8003a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  const tflite::RNNOptions *builtin_options_as_RNNOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_RNNOptions ? static_cast<const tflite::RNNOptions *>(builtin_options()) : nullptr;
  }
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 8003a88:	5c69      	ldrb	r1, [r5, r1]
 8003a8a:	2908      	cmp	r1, #8
 8003a8c:	d1f8      	bne.n	8003a80 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003a8e:	2a0c      	cmp	r2, #12
 8003a90:	d9f6      	bls.n	8003a80 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3c>
 8003a92:	899b      	ldrh	r3, [r3, #12]
    auto p = data_ + field_offset;
 8003a94:	18ea      	adds	r2, r5, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f2      	beq.n	8003a80 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3c>
 8003a9a:	58e9      	ldr	r1, [r5, r3]
    return data_ - ReadScalar<soffset_t>(data_);
 8003a9c:	5853      	ldr	r3, [r2, r1]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003a9e:	440a      	add	r2, r1
    return data_ - ReadScalar<soffset_t>(data_);
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	8818      	ldrh	r0, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003aa4:	2804      	cmp	r0, #4
 8003aa6:	d92f      	bls.n	8003b08 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc4>
 8003aa8:	8899      	ldrh	r1, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003aaa:	b121      	cbz	r1, 8003ab6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x72>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8003aac:	5c51      	ldrb	r1, [r2, r1]
 8003aae:	1e4d      	subs	r5, r1, #1
 8003ab0:	2d04      	cmp	r5, #4
 8003ab2:	bf88      	it	hi
 8003ab4:	2100      	movhi	r1, #0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003ab6:	2808      	cmp	r0, #8
    params->activation =
 8003ab8:	7031      	strb	r1, [r6, #0]
 8003aba:	d925      	bls.n	8003b08 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc4>
 8003abc:	8919      	ldrh	r1, [r3, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003abe:	b119      	cbz	r1, 8003ac8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 8003ac0:	5c51      	ldrb	r1, [r2, r1]
 8003ac2:	3900      	subs	r1, #0
 8003ac4:	bf18      	it	ne
 8003ac6:	2101      	movne	r1, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003ac8:	280a      	cmp	r0, #10
    params->keep_num_dims = schema_params->keep_num_dims();
 8003aca:	70b1      	strb	r1, [r6, #2]
 8003acc:	d906      	bls.n	8003adc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
 8003ace:	8959      	ldrh	r1, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003ad0:	b119      	cbz	r1, 8003ada <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x96>
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 8003ad2:	5c51      	ldrb	r1, [r2, r1]
 8003ad4:	3900      	subs	r1, #0
 8003ad6:	bf18      	it	ne
 8003ad8:	2101      	movne	r1, #1
    params->asymmetric_quantize_inputs =
 8003ada:	70f1      	strb	r1, [r6, #3]
 8003adc:	88db      	ldrh	r3, [r3, #6]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0ce      	beq.n	8003a80 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3c>
 8003ae2:	56d3      	ldrsb	r3, [r2, r3]
    switch (schema_params->weights_format()) {
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0cb      	beq.n	8003a80 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3c>
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xac>
        params->weights_format =
 8003aec:	7073      	strb	r3, [r6, #1]
        break;
 8003aee:	e7c7      	b.n	8003a80 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3c>
        TF_LITE_REPORT_ERROR(error_reporter,
 8003af0:	4908      	ldr	r1, [pc, #32]	; (8003b14 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd0>)
 8003af2:	4640      	mov	r0, r8
 8003af4:	f7ff fece 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    void operator()(void* data) { allocator_->Deallocate(data); }
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	4620      	mov	r0, r4
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4631      	mov	r1, r6
 8003b00:	4798      	blx	r3
        return kTfLiteError;
 8003b02:	2001      	movs	r0, #1
}
 8003b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003b08:	2806      	cmp	r0, #6
 8003b0a:	d9b9      	bls.n	8003a80 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3c>
 8003b0c:	e7e6      	b.n	8003adc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
  TFLITE_DCHECK(op != nullptr);
 8003b0e:	f00d fb39 	bl	8011184 <abort>
 8003b12:	bf00      	nop
 8003b14:	08014cc8 	.word	0x08014cc8

08003b18 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                        void**) {
  return kTfLiteOk;
}

TfLiteStatus ParsePool(const Operator* op, ErrorReporter* error_reporter,
                       BuiltinDataAllocator* allocator, void** builtin_data) {
 8003b18:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(op != nullptr);
 8003b1a:	2800      	cmp	r0, #0
 8003b1c:	d062      	beq.n	8003be4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
  TFLITE_DCHECK(error_reporter != nullptr);
 8003b1e:	2900      	cmp	r1, #0
 8003b20:	d060      	beq.n	8003be4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
  TFLITE_DCHECK(allocator != nullptr);
 8003b22:	4615      	mov	r5, r2
 8003b24:	2a00      	cmp	r2, #0
 8003b26:	d05d      	beq.n	8003be4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
  TFLITE_DCHECK(builtin_data != nullptr);
 8003b28:	461e      	mov	r6, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d05a      	beq.n	8003be4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
 8003b2e:	6813      	ldr	r3, [r2, #0]
 8003b30:	4604      	mov	r4, r0
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2204      	movs	r2, #4
 8003b36:	4628      	mov	r0, r5
 8003b38:	2128      	movs	r1, #40	; 0x28
 8003b3a:	4798      	blx	r3
    return new (allocated_memory) T();
 8003b3c:	2228      	movs	r2, #40	; 0x28
 8003b3e:	2100      	movs	r1, #0
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8003b40:	4605      	mov	r5, r0
    return new (allocated_memory) T();
 8003b42:	f00e fa95 	bl	8012070 <memset>
    return data_ - ReadScalar<soffset_t>(data_);
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	1ae3      	subs	r3, r4, r3
 8003b4a:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003b4c:	2a0a      	cmp	r2, #10
 8003b4e:	d93f      	bls.n	8003bd0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
 8003b50:	8959      	ldrh	r1, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003b52:	2900      	cmp	r1, #0
 8003b54:	d03c      	beq.n	8003bd0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
 8003b56:	5c61      	ldrb	r1, [r4, r1]
 8003b58:	2905      	cmp	r1, #5
 8003b5a:	d139      	bne.n	8003bd0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003b5c:	2a0c      	cmp	r2, #12
 8003b5e:	d937      	bls.n	8003bd0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
 8003b60:	899b      	ldrh	r3, [r3, #12]
    auto p = data_ + field_offset;
 8003b62:	18e2      	adds	r2, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d033      	beq.n	8003bd0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
 8003b68:	58e3      	ldr	r3, [r4, r3]
 8003b6a:	18d1      	adds	r1, r2, r3
    return data_ - ReadScalar<soffset_t>(data_);
 8003b6c:	58d3      	ldr	r3, [r2, r3]
 8003b6e:	1acb      	subs	r3, r1, r3
 8003b70:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003b72:	2a04      	cmp	r2, #4
 8003b74:	d92f      	bls.n	8003bd6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbe>
 8003b76:	8898      	ldrh	r0, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	d031      	beq.n	8003be0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
 8003b7c:	5608      	ldrsb	r0, [r1, r0]
  switch (padding) {
 8003b7e:	b378      	cbz	r0, 8003be0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
 8003b80:	f1a0 0001 	sub.w	r0, r0, #1
 8003b84:	fab0 f080 	clz	r0, r0
 8003b88:	0940      	lsrs	r0, r0, #5
 8003b8a:	0040      	lsls	r0, r0, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003b8c:	2a06      	cmp	r2, #6
  TF_LITE_ENSURE(error_reporter, params != nullptr);

  const Pool2DOptions* schema_params = op->builtin_options_as_Pool2DOptions();

  if (schema_params != nullptr) {
    params->padding = ConvertPadding(schema_params->padding());
 8003b8e:	7028      	strb	r0, [r5, #0]
 8003b90:	d923      	bls.n	8003bda <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2>
 8003b92:	88d8      	ldrh	r0, [r3, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003b94:	b100      	cbz	r0, 8003b98 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x80>
 8003b96:	5808      	ldr	r0, [r1, r0]
    params->stride_width = schema_params->stride_w();
 8003b98:	6068      	str	r0, [r5, #4]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003b9a:	2a08      	cmp	r2, #8
 8003b9c:	d91d      	bls.n	8003bda <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2>
 8003b9e:	8918      	ldrh	r0, [r3, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003ba0:	b100      	cbz	r0, 8003ba4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
 8003ba2:	5808      	ldr	r0, [r1, r0]
    params->stride_height = schema_params->stride_h();
 8003ba4:	60a8      	str	r0, [r5, #8]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003ba6:	2a0a      	cmp	r2, #10
 8003ba8:	d917      	bls.n	8003bda <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2>
 8003baa:	8958      	ldrh	r0, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003bac:	b100      	cbz	r0, 8003bb0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
 8003bae:	5808      	ldr	r0, [r1, r0]
    params->filter_width = schema_params->filter_width();
 8003bb0:	60e8      	str	r0, [r5, #12]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003bb2:	2a0c      	cmp	r2, #12
 8003bb4:	d911      	bls.n	8003bda <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2>
 8003bb6:	8998      	ldrh	r0, [r3, #12]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003bb8:	b100      	cbz	r0, 8003bbc <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
 8003bba:	5808      	ldr	r0, [r1, r0]
    params->filter_height = schema_params->filter_height();
 8003bbc:	6128      	str	r0, [r5, #16]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003bbe:	2a0e      	cmp	r2, #14
 8003bc0:	d90b      	bls.n	8003bda <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2>
 8003bc2:	89db      	ldrh	r3, [r3, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003bc4:	b14b      	cbz	r3, 8003bda <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8003bc6:	5ccb      	ldrb	r3, [r1, r3]
 8003bc8:	1e5a      	subs	r2, r3, #1
 8003bca:	2a04      	cmp	r2, #4
 8003bcc:	d805      	bhi.n	8003bda <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2>
    params->activation =
 8003bce:	752b      	strb	r3, [r5, #20]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8003bd0:	6035      	str	r5, [r6, #0]
  return kTfLiteOk;
}
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	bd70      	pop	{r4, r5, r6, pc}
    params->padding = ConvertPadding(schema_params->padding());
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	702b      	strb	r3, [r5, #0]
 8003bda:	2300      	movs	r3, #0
    params->activation =
 8003bdc:	752b      	strb	r3, [r5, #20]
 8003bde:	e7f7      	b.n	8003bd0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
      return kTfLitePaddingSame;
 8003be0:	2001      	movs	r0, #1
 8003be2:	e7d3      	b.n	8003b8c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x74>
  TFLITE_DCHECK(op != nullptr);
 8003be4:	f00d face 	bl	8011184 <abort>

08003be8 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReducer(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8003be8:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(op != nullptr);
 8003bea:	2800      	cmp	r0, #0
 8003bec:	d030      	beq.n	8003c50 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
  TFLITE_DCHECK(error_reporter != nullptr);
 8003bee:	b379      	cbz	r1, 8003c50 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
  TFLITE_DCHECK(allocator != nullptr);
 8003bf0:	4615      	mov	r5, r2
 8003bf2:	b36a      	cbz	r2, 8003c50 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
  TFLITE_DCHECK(builtin_data != nullptr);
 8003bf4:	461e      	mov	r6, r3
 8003bf6:	b35b      	cbz	r3, 8003c50 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8003bf8:	6813      	ldr	r3, [r2, #0]
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4611      	mov	r1, r2
 8003c02:	4628      	mov	r0, r5
 8003c04:	4798      	blx	r3
    return data_ - ReadScalar<soffset_t>(data_);
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	1ae3      	subs	r3, r4, r3
    return new (allocated_memory) T();
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	7002      	strb	r2, [r0, #0]
 8003c0e:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003c10:	2a0a      	cmp	r2, #10
 8003c12:	d917      	bls.n	8003c44 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>
 8003c14:	8959      	ldrh	r1, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003c16:	b1a9      	cbz	r1, 8003c44 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>
  }
  const tflite::TransposeOptions *builtin_options_as_TransposeOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_TransposeOptions ? static_cast<const tflite::TransposeOptions *>(builtin_options()) : nullptr;
  }
  const tflite::ReducerOptions *builtin_options_as_ReducerOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_ReducerOptions ? static_cast<const tflite::ReducerOptions *>(builtin_options()) : nullptr;
 8003c18:	5c61      	ldrb	r1, [r4, r1]
 8003c1a:	291b      	cmp	r1, #27
 8003c1c:	d112      	bne.n	8003c44 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003c1e:	2a0c      	cmp	r2, #12
 8003c20:	d910      	bls.n	8003c44 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>
 8003c22:	899b      	ldrh	r3, [r3, #12]
    auto p = data_ + field_offset;
 8003c24:	18e1      	adds	r1, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003c26:	b16b      	cbz	r3, 8003c44 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>
 8003c28:	58e3      	ldr	r3, [r4, r3]
 8003c2a:	18ca      	adds	r2, r1, r3
    return data_ - ReadScalar<soffset_t>(data_);
 8003c2c:	58cb      	ldr	r3, [r1, r3]
 8003c2e:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003c30:	8819      	ldrh	r1, [r3, #0]
 8003c32:	2904      	cmp	r1, #4
 8003c34:	d909      	bls.n	8003c4a <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x62>
 8003c36:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003c38:	b11b      	cbz	r3, 8003c42 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5a>
    return GetField<uint8_t>(VT_KEEP_DIMS, 0) != 0;
 8003c3a:	5cd3      	ldrb	r3, [r2, r3]
 8003c3c:	3b00      	subs	r3, #0
 8003c3e:	bf18      	it	ne
 8003c40:	2301      	movne	r3, #1
  TF_LITE_ENSURE(error_reporter, params != nullptr);

  const ReducerOptions* schema_params = op->builtin_options_as_ReducerOptions();

  if (schema_params != nullptr) {
    params->keep_dims = schema_params->keep_dims();
 8003c42:	7003      	strb	r3, [r0, #0]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8003c44:	6030      	str	r0, [r6, #0]
  return kTfLiteOk;
}
 8003c46:	2000      	movs	r0, #0
 8003c48:	bd70      	pop	{r4, r5, r6, pc}
 8003c4a:	2300      	movs	r3, #0
    params->keep_dims = schema_params->keep_dims();
 8003c4c:	7003      	strb	r3, [r0, #0]
 8003c4e:	e7f9      	b.n	8003c44 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>
  TFLITE_DCHECK(op != nullptr);
 8003c50:	f00d fa98 	bl	8011184 <abort>

08003c54 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8003c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(op != nullptr);
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	d066      	beq.n	8003d2a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd6>
  TFLITE_DCHECK(error_reporter != nullptr);
 8003c5c:	4688      	mov	r8, r1
 8003c5e:	2900      	cmp	r1, #0
 8003c60:	d063      	beq.n	8003d2a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd6>
  TFLITE_DCHECK(allocator != nullptr);
 8003c62:	4614      	mov	r4, r2
 8003c64:	2a00      	cmp	r2, #0
 8003c66:	d060      	beq.n	8003d2a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd6>
  TFLITE_DCHECK(builtin_data != nullptr);
 8003c68:	461f      	mov	r7, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d05d      	beq.n	8003d2a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd6>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8003c6e:	6813      	ldr	r3, [r2, #0]
 8003c70:	4605      	mov	r5, r0
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2204      	movs	r2, #4
 8003c76:	2124      	movs	r1, #36	; 0x24
 8003c78:	4620      	mov	r0, r4
 8003c7a:	4798      	blx	r3
    return new (allocated_memory) T();
 8003c7c:	2224      	movs	r2, #36	; 0x24
 8003c7e:	2100      	movs	r1, #0
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8003c80:	4606      	mov	r6, r0
    return new (allocated_memory) T();
 8003c82:	f00e f9f5 	bl	8012070 <memset>
    return data_ - ReadScalar<soffset_t>(data_);
 8003c86:	682b      	ldr	r3, [r5, #0]
 8003c88:	1aeb      	subs	r3, r5, r3
 8003c8a:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003c8c:	2a0a      	cmp	r2, #10
 8003c8e:	d901      	bls.n	8003c94 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
 8003c90:	8959      	ldrh	r1, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003c92:	b919      	cbnz	r1, 8003c9c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x48>
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8003c94:	603e      	str	r6, [r7, #0]
  return kTfLiteOk;
 8003c96:	2000      	movs	r0, #0
}
 8003c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
 8003c9c:	5c69      	ldrb	r1, [r5, r1]
 8003c9e:	2911      	cmp	r1, #17
 8003ca0:	d1f8      	bne.n	8003c94 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003ca2:	2a0c      	cmp	r2, #12
 8003ca4:	d9f6      	bls.n	8003c94 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
 8003ca6:	899a      	ldrh	r2, [r3, #12]
    auto p = data_ + field_offset;
 8003ca8:	18ab      	adds	r3, r5, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003caa:	2a00      	cmp	r2, #0
 8003cac:	d0f2      	beq.n	8003c94 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
 8003cae:	58a9      	ldr	r1, [r5, r2]
    return data_ - ReadScalar<soffset_t>(data_);
 8003cb0:	585a      	ldr	r2, [r3, r1]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003cb2:	440b      	add	r3, r1
    return data_ - ReadScalar<soffset_t>(data_);
 8003cb4:	1a9a      	subs	r2, r3, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003cb6:	8811      	ldrh	r1, [r2, #0]
 8003cb8:	2904      	cmp	r1, #4
 8003cba:	d9eb      	bls.n	8003c94 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
 8003cbc:	8892      	ldrh	r2, [r2, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003cbe:	2a00      	cmp	r2, #0
 8003cc0:	d0e8      	beq.n	8003c94 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
 8003cc2:	5899      	ldr	r1, [r3, r2]
    auto p = data_ + field_offset;
 8003cc4:	4413      	add	r3, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003cc6:	185a      	adds	r2, r3, r1
  uoffset_t size() const { return EndianScalar(length_); }
 8003cc8:	585b      	ldr	r3, [r3, r1]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d820      	bhi.n	8003d10 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>
      for (size_t i = 0; i < num_dimensions; ++i) {
 8003cce:	b1eb      	cbz	r3, 8003d0c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
        buffer[i] = flat_vector->Get(i);
 8003cd0:	6851      	ldr	r1, [r2, #4]
 8003cd2:	6031      	str	r1, [r6, #0]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d019      	beq.n	8003d0c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
        buffer[i] = flat_vector->Get(i);
 8003cd8:	6891      	ldr	r1, [r2, #8]
 8003cda:	6071      	str	r1, [r6, #4]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d015      	beq.n	8003d0c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
        buffer[i] = flat_vector->Get(i);
 8003ce0:	68d1      	ldr	r1, [r2, #12]
 8003ce2:	60b1      	str	r1, [r6, #8]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	d011      	beq.n	8003d0c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
        buffer[i] = flat_vector->Get(i);
 8003ce8:	6911      	ldr	r1, [r2, #16]
 8003cea:	60f1      	str	r1, [r6, #12]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d00d      	beq.n	8003d0c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
        buffer[i] = flat_vector->Get(i);
 8003cf0:	6951      	ldr	r1, [r2, #20]
 8003cf2:	6131      	str	r1, [r6, #16]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8003cf4:	2b05      	cmp	r3, #5
 8003cf6:	d009      	beq.n	8003d0c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
        buffer[i] = flat_vector->Get(i);
 8003cf8:	6991      	ldr	r1, [r2, #24]
 8003cfa:	6171      	str	r1, [r6, #20]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8003cfc:	2b06      	cmp	r3, #6
 8003cfe:	d005      	beq.n	8003d0c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
        buffer[i] = flat_vector->Get(i);
 8003d00:	69d1      	ldr	r1, [r2, #28]
 8003d02:	61b1      	str	r1, [r6, #24]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d101      	bne.n	8003d0c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>
        buffer[i] = flat_vector->Get(i);
 8003d08:	6a12      	ldr	r2, [r2, #32]
 8003d0a:	61f2      	str	r2, [r6, #28]
      params->num_dimensions = new_shape->size();
 8003d0c:	6233      	str	r3, [r6, #32]
 8003d0e:	e7c1      	b.n	8003c94 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
      TF_LITE_REPORT_ERROR(
 8003d10:	4a07      	ldr	r2, [pc, #28]	; (8003d30 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xdc>)
 8003d12:	4908      	ldr	r1, [pc, #32]	; (8003d34 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe0>)
 8003d14:	4640      	mov	r0, r8
 8003d16:	f7ff fdbd 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    void operator()(void* data) { allocator_->Deallocate(data); }
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	4631      	mov	r1, r6
 8003d22:	4798      	blx	r3
 8003d24:	2001      	movs	r0, #1
}
 8003d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TFLITE_DCHECK(op != nullptr);
 8003d2a:	f00d fa2b 	bl	8011184 <abort>
 8003d2e:	bf00      	nop
 8003d30:	08014cf4 	.word	0x08014cf4
 8003d34:	08014cfc 	.word	0x08014cfc

08003d38 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8003d38:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(op != nullptr);
 8003d3a:	b368      	cbz	r0, 8003d98 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
  TFLITE_DCHECK(error_reporter != nullptr);
 8003d3c:	b361      	cbz	r1, 8003d98 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
  TFLITE_DCHECK(allocator != nullptr);
 8003d3e:	4615      	mov	r5, r2
 8003d40:	b352      	cbz	r2, 8003d98 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
  TFLITE_DCHECK(builtin_data != nullptr);
 8003d42:	461e      	mov	r6, r3
 8003d44:	b343      	cbz	r3, 8003d98 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8003d46:	6813      	ldr	r3, [r2, #0]
 8003d48:	4604      	mov	r4, r0
 8003d4a:	2204      	movs	r2, #4
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4611      	mov	r1, r2
 8003d50:	4628      	mov	r0, r5
 8003d52:	4798      	blx	r3
    return data_ - ReadScalar<soffset_t>(data_);
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	1ae3      	subs	r3, r4, r3
    return new (allocated_memory) T();
 8003d58:	2200      	movs	r2, #0
 8003d5a:	6002      	str	r2, [r0, #0]
 8003d5c:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003d5e:	2a0a      	cmp	r2, #10
 8003d60:	d915      	bls.n	8003d8e <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x56>
 8003d62:	8959      	ldrh	r1, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003d64:	b199      	cbz	r1, 8003d8e <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x56>
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
 8003d66:	5c61      	ldrb	r1, [r4, r1]
 8003d68:	2909      	cmp	r1, #9
 8003d6a:	d110      	bne.n	8003d8e <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x56>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003d6c:	2a0c      	cmp	r2, #12
 8003d6e:	d90e      	bls.n	8003d8e <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x56>
 8003d70:	899b      	ldrh	r3, [r3, #12]
    auto p = data_ + field_offset;
 8003d72:	18e1      	adds	r1, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003d74:	b15b      	cbz	r3, 8003d8e <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x56>
 8003d76:	58e3      	ldr	r3, [r4, r3]
 8003d78:	18ca      	adds	r2, r1, r3
    return data_ - ReadScalar<soffset_t>(data_);
 8003d7a:	58cb      	ldr	r3, [r1, r3]
 8003d7c:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003d7e:	8819      	ldrh	r1, [r3, #0]
 8003d80:	2904      	cmp	r1, #4
 8003d82:	d907      	bls.n	8003d94 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>
 8003d84:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003d86:	b12b      	cbz	r3, 8003d94 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>
 8003d88:	441a      	add	r2, r3
 8003d8a:	6813      	ldr	r3, [r2, #0]
  TF_LITE_ENSURE(error_reporter, params != nullptr);

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();

  if (schema_params != nullptr) {
    params->beta = schema_params->beta();
 8003d8c:	6003      	str	r3, [r0, #0]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8003d8e:	6030      	str	r0, [r6, #0]
  return kTfLiteOk;
}
 8003d90:	2000      	movs	r0, #0
 8003d92:	bd70      	pop	{r4, r5, r6, pc}
 8003d94:	2300      	movs	r3, #0
 8003d96:	e7f9      	b.n	8003d8c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x54>
  TFLITE_DCHECK(op != nullptr);
 8003d98:	f00d f9f4 	bl	8011184 <abort>

08003d9c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 8003d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003da0:	461e      	mov	r6, r3
 8003da2:	4604      	mov	r4, r0
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
 8003da4:	2300      	movs	r3, #0
 8003da6:	6033      	str	r3, [r6, #0]
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 8003da8:	4690      	mov	r8, r2
 8003daa:	460f      	mov	r7, r1
  auto builtin_code = GetBuiltinCode(opcode);
 8003dac:	f00c fef4 	bl	8010b98 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
    return data_ - ReadScalar<soffset_t>(data_);
 8003db0:	6823      	ldr	r3, [r4, #0]
 8003db2:	eba4 0c03 	sub.w	ip, r4, r3
 8003db6:	4605      	mov	r5, r0
 8003db8:	f8bc 2000 	ldrh.w	r2, [ip]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003dbc:	2a08      	cmp	r2, #8
 8003dbe:	d902      	bls.n	8003dc6 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x2a>
 8003dc0:	f8bc 3008 	ldrh.w	r3, [ip, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003dc4:	b983      	cbnz	r3, 8003de8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x4c>
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX ||
 8003dc6:	2d80      	cmp	r5, #128	; 0x80
 8003dc8:	f04f 0901 	mov.w	r9, #1
 8003dcc:	d810      	bhi.n	8003df0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x54>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 8003dce:	2d20      	cmp	r5, #32
 8003dd0:	d016      	beq.n	8003e00 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x64>
    *registration = op_resolver.FindOp(builtin_code, version);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	4638      	mov	r0, r7
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	464a      	mov	r2, r9
 8003dda:	4629      	mov	r1, r5
 8003ddc:	4798      	blx	r3
 8003dde:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
 8003de0:	b348      	cbz	r0, 8003e36 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x9a>
  TfLiteStatus status = kTfLiteOk;
 8003de2:	2000      	movs	r0, #0
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
}
 8003de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (builtin_code > BuiltinOperator_MAX ||
 8003de8:	2d80      	cmp	r5, #128	; 0x80
 8003dea:	f854 9003 	ldr.w	r9, [r4, r3]
 8003dee:	d9ee      	bls.n	8003dce <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x32>
    TF_LITE_REPORT_ERROR(
 8003df0:	4916      	ldr	r1, [pc, #88]	; (8003e4c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xb0>)
 8003df2:	462a      	mov	r2, r5
 8003df4:	4640      	mov	r0, r8
 8003df6:	f7ff fd4d 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
 8003dfa:	2001      	movs	r0, #1
}
 8003dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003e00:	2a06      	cmp	r2, #6
 8003e02:	d911      	bls.n	8003e28 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x8c>
 8003e04:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003e08:	b173      	cbz	r3, 8003e28 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x8c>
 8003e0a:	58e1      	ldr	r1, [r4, r3]
    auto p = data_ + field_offset;
 8003e0c:	441c      	add	r4, r3
    *registration = op_resolver.FindOp(name, version);
 8003e0e:	683b      	ldr	r3, [r7, #0]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003e10:	4421      	add	r1, r4
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	464a      	mov	r2, r9
 8003e16:	3104      	adds	r1, #4
 8003e18:	4638      	mov	r0, r7
 8003e1a:	4798      	blx	r3
 8003e1c:	4603      	mov	r3, r0
    status = kTfLiteError;
 8003e1e:	fab0 f080 	clz	r0, r0
    *registration = op_resolver.FindOp(name, version);
 8003e22:	6033      	str	r3, [r6, #0]
    status = kTfLiteError;
 8003e24:	0940      	lsrs	r0, r0, #5
 8003e26:	e7dd      	b.n	8003de4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x48>
    TF_LITE_REPORT_ERROR(
 8003e28:	4909      	ldr	r1, [pc, #36]	; (8003e50 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xb4>)
 8003e2a:	4640      	mov	r0, r8
 8003e2c:	f7ff fd32 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
 8003e30:	2001      	movs	r0, #1
}
 8003e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return EnumNamesBuiltinOperator()[index];
 8003e36:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xb8>)
      TF_LITE_REPORT_ERROR(
 8003e38:	4907      	ldr	r1, [pc, #28]	; (8003e58 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xbc>)
 8003e3a:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8003e3e:	4640      	mov	r0, r8
 8003e40:	464b      	mov	r3, r9
 8003e42:	f7ff fd27 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      status = kTfLiteError;
 8003e46:	2001      	movs	r0, #1
 8003e48:	e7cc      	b.n	8003de4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x48>
 8003e4a:	bf00      	nop
 8003e4c:	08014d40 	.word	0x08014d40
 8003e50:	08014dcc 	.word	0x08014dcc
 8003e54:	080153dc 	.word	0x080153dc
 8003e58:	08014d94 	.word	0x08014d94

08003e5c <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8003e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e60:	ec57 6b10 	vmov	r6, r7, d0
 8003e64:	4680      	mov	r8, r0
 8003e66:	460d      	mov	r5, r1
  if (double_multiplier == 0.) {
 8003e68:	ee10 0a10 	vmov	r0, s0
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	2300      	movs	r3, #0
 8003e70:	4639      	mov	r1, r7
 8003e72:	f7fc fe39 	bl	8000ae8 <__aeabi_dcmpeq>
 8003e76:	b128      	cbz	r0, 8003e84 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x28>
    *quantized_multiplier = 0;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f8c8 3000 	str.w	r3, [r8]
    *shift = 0;
 8003e7e:	602b      	str	r3, [r5, #0]
  if (*shift < -31) {
    *shift = 0;
    q_fixed = 0;
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
}
 8003e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  const double q = std::frexp(double_multiplier, shift);
 8003e84:	ec47 6b10 	vmov	d0, r6, r7
 8003e88:	4604      	mov	r4, r0
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	f00c fece 	bl	8010c2c <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8003e90:	4b13      	ldr	r3, [pc, #76]	; (8003ee0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x84>)
 8003e92:	2200      	movs	r2, #0
  const double q = std::frexp(double_multiplier, shift);
 8003e94:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8003e98:	f7fc fbbe 	bl	8000618 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 8003e9c:	ec41 0b10 	vmov	d0, r0, r1
 8003ea0:	f00d f836 	bl	8010f10 <round>
 8003ea4:	ec51 0b10 	vmov	r0, r1, d0
 8003ea8:	f7fc fef6 	bl	8000c98 <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8003eac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003eb0:	4282      	cmp	r2, r0
 8003eb2:	eb74 0601 	sbcs.w	r6, r4, r1
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8003eb6:	4603      	mov	r3, r0
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8003eb8:	db10      	blt.n	8003edc <_ZN6tflite18QuantizeMultiplierEdPlPi+0x80>
  if (q_fixed == (1ll << 31)) {
 8003eba:	42a1      	cmp	r1, r4
 8003ebc:	bf08      	it	eq
 8003ebe:	4290      	cmpeq	r0, r2
    ++*shift;
 8003ec0:	682a      	ldr	r2, [r5, #0]
 8003ec2:	bf02      	ittt	eq
 8003ec4:	3201      	addeq	r2, #1
    q_fixed /= 2;
 8003ec6:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
    ++*shift;
 8003eca:	602a      	streq	r2, [r5, #0]
  if (*shift < -31) {
 8003ecc:	321f      	adds	r2, #31
    *shift = 0;
 8003ece:	bfbc      	itt	lt
 8003ed0:	2300      	movlt	r3, #0
 8003ed2:	602b      	strlt	r3, [r5, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8003ed4:	f8c8 3000 	str.w	r3, [r8]
}
 8003ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8003edc:	f00d f952 	bl	8011184 <abort>
 8003ee0:	41e00000 	.word	0x41e00000
 8003ee4:	00000000 	.word	0x00000000

08003ee8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 8003ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 8003eec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003ef0:	fa23 f000 	lsr.w	r0, r3, r0
                              int32_t* quantized_multiplier, int* left_shift) {
 8003ef4:	ec57 6b11 	vmov	r6, r7, d1
 8003ef8:	ec59 8b10 	vmov	r8, r9, d0
 8003efc:	4614      	mov	r4, r2
 8003efe:	460d      	mov	r5, r1
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 8003f00:	f7fc fb20 	bl	8000544 <__aeabi_i2d>
 8003f04:	4632      	mov	r2, r6
 8003f06:	463b      	mov	r3, r7
 8003f08:	4606      	mov	r6, r0
 8003f0a:	460f      	mov	r7, r1
 8003f0c:	4640      	mov	r0, r8
 8003f0e:	4649      	mov	r1, r9
 8003f10:	f7fc fb82 	bl	8000618 <__aeabi_dmul>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4630      	mov	r0, r6
 8003f1a:	4639      	mov	r1, r7
 8003f1c:	f7fc fb7c 	bl	8000618 <__aeabi_dmul>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8003f20:	a329      	add	r3, pc, #164	; (adr r3, 8003fc8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0xe0>)
 8003f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f26:	4606      	mov	r6, r0
 8003f28:	460f      	mov	r7, r1
 8003f2a:	f7fc fe05 	bl	8000b38 <__aeabi_dcmpgt>
 8003f2e:	b9a8      	cbnz	r0, 8003f5c <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x74>
  TFLITE_CHECK_GT(double_multiplier, 1.);
 8003f30:	4680      	mov	r8, r0
 8003f32:	4b27      	ldr	r3, [pc, #156]	; (8003fd0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0xe8>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	4630      	mov	r0, r6
 8003f38:	4639      	mov	r1, r7
 8003f3a:	f7fc fdfd 	bl	8000b38 <__aeabi_dcmpgt>
 8003f3e:	2800      	cmp	r0, #0
 8003f40:	d039      	beq.n	8003fb6 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0xce>
  if (double_multiplier == 0.) {
 8003f42:	2200      	movs	r2, #0
 8003f44:	2300      	movs	r3, #0
 8003f46:	4630      	mov	r0, r6
 8003f48:	4639      	mov	r1, r7
 8003f4a:	f7fc fdcd 	bl	8000ae8 <__aeabi_dcmpeq>
 8003f4e:	b140      	cbz	r0, 8003f62 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x7a>
    *quantized_multiplier = 0;
 8003f50:	f8c5 8000 	str.w	r8, [r5]
    *shift = 0;
 8003f54:	f8c4 8000 	str.w	r8, [r4]
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
                                   quantized_multiplier, left_shift);
}
 8003f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return __b;
 8003f5c:	a71a      	add	r7, pc, #104	; (adr r7, 8003fc8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0xe0>)
 8003f5e:	e9d7 6700 	ldrd	r6, r7, [r7]
  const double q = std::frexp(double_multiplier, shift);
 8003f62:	ec47 6b10 	vmov	d0, r6, r7
 8003f66:	4620      	mov	r0, r4
 8003f68:	f00c fe60 	bl	8010c2c <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8003f6c:	4b19      	ldr	r3, [pc, #100]	; (8003fd4 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0xec>)
 8003f6e:	2200      	movs	r2, #0
  const double q = std::frexp(double_multiplier, shift);
 8003f70:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8003f74:	f7fc fb50 	bl	8000618 <__aeabi_dmul>
 8003f78:	ec41 0b10 	vmov	d0, r0, r1
 8003f7c:	f00c ffc8 	bl	8010f10 <round>
 8003f80:	ec51 0b10 	vmov	r0, r1, d0
 8003f84:	f7fc fe88 	bl	8000c98 <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8003f88:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	4282      	cmp	r2, r0
 8003f90:	eb73 0701 	sbcs.w	r7, r3, r1
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8003f94:	4606      	mov	r6, r0
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8003f96:	db0e      	blt.n	8003fb6 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0xce>
  if (q_fixed == (1ll << 31)) {
 8003f98:	4299      	cmp	r1, r3
 8003f9a:	bf08      	it	eq
 8003f9c:	4290      	cmpeq	r0, r2
    ++*shift;
 8003f9e:	6823      	ldr	r3, [r4, #0]
 8003fa0:	bf02      	ittt	eq
 8003fa2:	3301      	addeq	r3, #1
    q_fixed /= 2;
 8003fa4:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
    ++*shift;
 8003fa8:	6023      	streq	r3, [r4, #0]
  if (*shift < -31) {
 8003faa:	f113 0f1f 	cmn.w	r3, #31
 8003fae:	db04      	blt.n	8003fba <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0xd2>
  TFLITE_CHECK_GE(*left_shift, 0);
 8003fb0:	2b00      	cmp	r3, #0
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8003fb2:	602e      	str	r6, [r5, #0]
  TFLITE_CHECK_GE(*left_shift, 0);
 8003fb4:	dad0      	bge.n	8003f58 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x70>
  TFLITE_CHECK_GT(double_multiplier, 1.);
 8003fb6:	f00d f8e5 	bl	8011184 <abort>
    *shift = 0;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	6023      	str	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8003fbe:	602b      	str	r3, [r5, #0]
}
 8003fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fc4:	f3af 8000 	nop.w
 8003fc8:	ffc00000 	.word	0xffc00000
 8003fcc:	41dfffff 	.word	0x41dfffff
 8003fd0:	3ff00000 	.word	0x3ff00000
 8003fd4:	41e00000 	.word	0x41e00000

08003fd8 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 8003fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 8003fdc:	2401      	movs	r4, #1
                         int total_signed_bits) {
 8003fde:	4607      	mov	r7, r0
      1.0 * ((1 << input_integer_bits) - 1) *
 8003fe0:	fa04 f000 	lsl.w	r0, r4, r0
 8003fe4:	3801      	subs	r0, #1
                         int total_signed_bits) {
 8003fe6:	460e      	mov	r6, r1
 8003fe8:	4615      	mov	r5, r2
      1.0 * ((1 << input_integer_bits) - 1) *
 8003fea:	f7fc faab 	bl	8000544 <__aeabi_i2d>
      (1ll << (total_signed_bits - input_integer_bits)) /
 8003fee:	1bed      	subs	r5, r5, r7
      1.0 * ((1 << input_integer_bits) - 1) *
 8003ff0:	4689      	mov	r9, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 8003ff2:	f1c5 0320 	rsb	r3, r5, #32
 8003ff6:	f1a5 0120 	sub.w	r1, r5, #32
 8003ffa:	fa24 f303 	lsr.w	r3, r4, r3
 8003ffe:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 8004002:	4680      	mov	r8, r0
 8004004:	4319      	orrs	r1, r3
 8004006:	fa04 f005 	lsl.w	r0, r4, r5
 800400a:	f7fc fad7 	bl	80005bc <__aeabi_l2d>
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	4640      	mov	r0, r8
 8004014:	4649      	mov	r1, r9
 8004016:	f7fc faff 	bl	8000618 <__aeabi_dmul>
      (1ll << input_left_shift);
 800401a:	f1c6 0320 	rsb	r3, r6, #32
      1.0 * ((1 << input_integer_bits) - 1) *
 800401e:	4689      	mov	r9, r1
      (1ll << input_left_shift);
 8004020:	f1a6 0120 	sub.w	r1, r6, #32
 8004024:	fa24 f303 	lsr.w	r3, r4, r3
 8004028:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 800402c:	4680      	mov	r8, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
 800402e:	4319      	orrs	r1, r3
 8004030:	fa04 f006 	lsl.w	r0, r4, r6
 8004034:	f7fc fac2 	bl	80005bc <__aeabi_l2d>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
  const double max_input_rescaled =
 800403c:	4640      	mov	r0, r8
 800403e:	4649      	mov	r1, r9
 8004040:	f7fc fc14 	bl	800086c <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 8004044:	ec41 0b10 	vmov	d0, r0, r1
 8004048:	f00c fee2 	bl	8010e10 <floor>
 800404c:	ec51 0b10 	vmov	r0, r1, d0
 8004050:	f7fc fd92 	bl	8000b78 <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
 8004054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004058 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
  return -1;
}

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
  const int tensor_index = ValidateTensorIndexing(
 8004058:	6809      	ldr	r1, [r1, #0]
  if (index >= 0 && index < max_size) {
 800405a:	2a00      	cmp	r2, #0
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 800405c:	b410      	push	{r4}
  const int tensor_index = ValidateTensorIndexing(
 800405e:	f851 4b04 	ldr.w	r4, [r1], #4
  if (index >= 0 && index < max_size) {
 8004062:	db10      	blt.n	8004086 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x2e>
 8004064:	42a2      	cmp	r2, r4
 8004066:	da0e      	bge.n	8004086 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x2e>
    const int tensor_index = tensor_indices[index];
 8004068:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  if (tensor_index < 0) {
 800406c:	2900      	cmp	r1, #0
 800406e:	db0a      	blt.n	8004086 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x2e>
  if (context->tensors != nullptr) {
 8004070:	6882      	ldr	r2, [r0, #8]
 8004072:	b122      	cbz	r2, 800407e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
    return &context->tensors[tensor_index];
 8004074:	eb02 1081 	add.w	r0, r2, r1, lsl #6
  return GetMutableInput(context, node, index);
}
 8004078:	f85d 4b04 	ldr.w	r4, [sp], #4
 800407c:	4770      	bx	lr
    return context->GetTensor(context, tensor_index);
 800407e:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8004080:	f85d 4b04 	ldr.w	r4, [sp], #4
    return context->GetTensor(context, tensor_index);
 8004084:	4718      	bx	r3
    return nullptr;
 8004086:	2000      	movs	r0, #0
}
 8004088:	f85d 4b04 	ldr.w	r4, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop

08004090 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
  const int tensor_index = ValidateTensorIndexing(
 8004090:	6849      	ldr	r1, [r1, #4]
  if (index >= 0 && index < max_size) {
 8004092:	2a00      	cmp	r2, #0
                        int index) {
 8004094:	b410      	push	{r4}
  const int tensor_index = ValidateTensorIndexing(
 8004096:	f851 4b04 	ldr.w	r4, [r1], #4
  if (index >= 0 && index < max_size) {
 800409a:	db10      	blt.n	80040be <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2e>
 800409c:	4294      	cmp	r4, r2
 800409e:	dd0e      	ble.n	80040be <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2e>
    const int tensor_index = tensor_indices[index];
 80040a0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
      context, index, node->outputs->size, node->outputs->data);
  if (tensor_index < 0) {
 80040a4:	2900      	cmp	r1, #0
 80040a6:	db0a      	blt.n	80040be <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2e>
  if (context->tensors != nullptr) {
 80040a8:	6882      	ldr	r2, [r0, #8]
 80040aa:	b122      	cbz	r2, 80040b6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
    return &context->tensors[tensor_index];
 80040ac:	eb02 1081 	add.w	r0, r2, r1, lsl #6
    return nullptr;
  }
  return GetTensorAtIndex(context, tensor_index);
}
 80040b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040b4:	4770      	bx	lr
    return context->GetTensor(context, tensor_index);
 80040b6:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 80040b8:	f85d 4b04 	ldr.w	r4, [sp], #4
    return context->GetTensor(context, tensor_index);
 80040bc:	4718      	bx	r3
    return nullptr;
 80040be:	2000      	movs	r0, #0
}
 80040c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop

080040c8 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
 80040c8:	6809      	ldr	r1, [r1, #0]
 80040ca:	2a00      	cmp	r2, #0
 80040cc:	b410      	push	{r4}
 80040ce:	f851 4b04 	ldr.w	r4, [r1], #4
 80040d2:	db10      	blt.n	80040f6 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei+0x2e>
 80040d4:	42a2      	cmp	r2, r4
 80040d6:	da0e      	bge.n	80040f6 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei+0x2e>
 80040d8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80040dc:	2900      	cmp	r1, #0
 80040de:	db0a      	blt.n	80040f6 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei+0x2e>
 80040e0:	6882      	ldr	r2, [r0, #8]
 80040e2:	b122      	cbz	r2, 80040ee <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei+0x26>
 80040e4:	eb02 1081 	add.w	r0, r2, r1, lsl #6
 80040e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80040f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040f4:	4718      	bx	r3
 80040f6:	2000      	movs	r0, #0
 80040f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop

08004100 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8004100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004104:	ed2d 8b02 	vpush	{d8}
 8004108:	b082      	sub	sp, #8
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800410a:	ed91 8a03 	vldr	s16, [r1, #12]
                                              double* multiplier) {
 800410e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
                                     static_cast<double>(filter->params.scale);
 8004112:	edd2 8a03 	vldr	s17, [r2, #12]
                                              double* multiplier) {
 8004116:	4605      	mov	r5, r0
  // TODO(ahentz): The following conditions must be guaranteed by the training
  // pipeline.
  if (bias) {
 8004118:	b373      	cbz	r3, 8004178 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x78>
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800411a:	ee18 0a10 	vmov	r0, s16
 800411e:	461c      	mov	r4, r3
 8004120:	f7fc fa22 	bl	8000568 <__aeabi_f2d>
 8004124:	4606      	mov	r6, r0
                                     static_cast<double>(filter->params.scale);
 8004126:	ee18 0a90 	vmov	r0, s17
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800412a:	460f      	mov	r7, r1
                                     static_cast<double>(filter->params.scale);
 800412c:	f7fc fa1c 	bl	8000568 <__aeabi_f2d>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8004134:	4630      	mov	r0, r6
 8004136:	4639      	mov	r1, r7
 8004138:	f7fc fa6e 	bl	8000618 <__aeabi_dmul>
 800413c:	4606      	mov	r6, r0
    const double bias_scale = static_cast<double>(bias->params.scale);
 800413e:	68e0      	ldr	r0, [r4, #12]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8004140:	460f      	mov	r7, r1
    const double bias_scale = static_cast<double>(bias->params.scale);
 8004142:	f7fc fa11 	bl	8000568 <__aeabi_f2d>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 800414a:	4630      	mov	r0, r6
 800414c:	4639      	mov	r1, r7
 800414e:	f7fc f8ab 	bl	80002a8 <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8004152:	4606      	mov	r6, r0
    const double output_scale = static_cast<double>(output->params.scale);
 8004154:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8004158:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800415c:	f7fc fa04 	bl	8000568 <__aeabi_f2d>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8004164:	4630      	mov	r0, r6
 8004166:	4639      	mov	r1, r7
 8004168:	f7fc fb80 	bl	800086c <__aeabi_ddiv>
 800416c:	a326      	add	r3, pc, #152	; (adr r3, 8004208 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x108>)
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	f7fc fccd 	bl	8000b10 <__aeabi_dcmple>
 8004176:	b308      	cbz	r0, 80041bc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xbc>
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 8004178:	ee28 8a28 	vmul.f32	s16, s16, s17
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 800417c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004184:	db29      	blt.n	80041da <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xda>
  const double input_product_scale =
 8004186:	ee18 0a10 	vmov	r0, s16
 800418a:	f7fc f9ed 	bl	8000568 <__aeabi_f2d>
 800418e:	4604      	mov	r4, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8004190:	f8d8 000c 	ldr.w	r0, [r8, #12]
  const double input_product_scale =
 8004194:	460d      	mov	r5, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8004196:	f7fc f9e7 	bl	8000568 <__aeabi_f2d>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4620      	mov	r0, r4
 80041a0:	4629      	mov	r1, r5
 80041a2:	f7fc fb63 	bl	800086c <__aeabi_ddiv>
 80041a6:	460b      	mov	r3, r1
 80041a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041aa:	4602      	mov	r2, r0

  return kTfLiteOk;
 80041ac:	2000      	movs	r0, #0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 80041ae:	e9c1 2300 	strd	r2, r3, [r1]
}
 80041b2:	b002      	add	sp, #8
 80041b4:	ecbd 8b02 	vpop	{d8}
 80041b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 80041bc:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 80041be:	696c      	ldr	r4, [r5, #20]
 80041c0:	4a0e      	ldr	r2, [pc, #56]	; (80041fc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	4628      	mov	r0, r5
 80041c6:	490e      	ldr	r1, [pc, #56]	; (8004200 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 80041c8:	f240 1335 	movw	r3, #309	; 0x135
 80041cc:	47a0      	blx	r4
 80041ce:	2001      	movs	r0, #1
}
 80041d0:	b002      	add	sp, #8
 80041d2:	ecbd 8b02 	vpop	{d8}
 80041d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 80041da:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 80041dc:	696c      	ldr	r4, [r5, #20]
 80041de:	4a07      	ldr	r2, [pc, #28]	; (80041fc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	4628      	mov	r0, r5
 80041e4:	4906      	ldr	r1, [pc, #24]	; (8004200 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 80041e6:	f44f 73a1 	mov.w	r3, #322	; 0x142
 80041ea:	47a0      	blx	r4
 80041ec:	2001      	movs	r0, #1
}
 80041ee:	b002      	add	sp, #8
 80041f0:	ecbd 8b02 	vpop	{d8}
 80041f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041f8:	08015630 	.word	0x08015630
 80041fc:	080155e4 	.word	0x080155e4
 8004200:	08015618 	.word	0x08015618
 8004204:	08015654 	.word	0x08015654
 8004208:	47ae147b 	.word	0x47ae147b
 800420c:	3f947ae1 	.word	0x3f947ae1

08004210 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8004210:	b5f0      	push	{r4, r5, r6, r7, lr}
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
 8004212:	f892 c000 	ldrb.w	ip, [r2]
                                               int32_t* act_max) {
 8004216:	ed2d 8b02 	vpush	{d8}
  if (output->type == kTfLiteUInt8) {
 800421a:	f1bc 0f03 	cmp.w	ip, #3
                                               int32_t* act_max) {
 800421e:	b083      	sub	sp, #12
 8004220:	461e      	mov	r6, r3
  if (output->type == kTfLiteUInt8) {
 8004222:	d03e      	beq.n	80042a2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x92>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
 8004224:	f1bc 0f09 	cmp.w	ip, #9
 8004228:	d023      	beq.n	8004272 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x62>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
 800422a:	f1bc 0f07 	cmp.w	ip, #7
 800422e:	d113      	bne.n	8004258 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x48>
    qmin = std::numeric_limits<int16_t>::min();
 8004230:	4c34      	ldr	r4, [pc, #208]	; (8004304 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xf4>)
    qmax = std::numeric_limits<int16_t>::max();
 8004232:	f647 75ff 	movw	r5, #32767	; 0x7fff
  if (activation == kTfLiteActRelu) {
 8004236:	2901      	cmp	r1, #1
 8004238:	ed92 8a03 	vldr	s16, [r2, #12]
 800423c:	6917      	ldr	r7, [r2, #16]
 800423e:	d021      	beq.n	8004284 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8004240:	2903      	cmp	r1, #3
 8004242:	d031      	beq.n	80042a8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x98>
  } else if (activation == kTfLiteActReluN1To1) {
 8004244:	2902      	cmp	r1, #2
 8004246:	d04c      	beq.n	80042e2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xd2>
    *act_max = qmax;
 8004248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    *act_min = std::max(qmin, quantize(0.0));
 800424a:	6034      	str	r4, [r6, #0]
    TF_LITE_ENSURE(context, false);
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
                                        act_max);
  return kTfLiteOk;
 800424c:	2000      	movs	r0, #0
    *act_max = qmax;
 800424e:	601d      	str	r5, [r3, #0]
}
 8004250:	b003      	add	sp, #12
 8004252:	ecbd 8b02 	vpop	{d8}
 8004256:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TF_LITE_ENSURE(context, false);
 8004258:	4b2b      	ldr	r3, [pc, #172]	; (8004308 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xf8>)
 800425a:	6944      	ldr	r4, [r0, #20]
 800425c:	4a2b      	ldr	r2, [pc, #172]	; (800430c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xfc>)
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	492b      	ldr	r1, [pc, #172]	; (8004310 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x100>)
 8004262:	f240 1375 	movw	r3, #373	; 0x175
 8004266:	47a0      	blx	r4
 8004268:	2001      	movs	r0, #1
}
 800426a:	b003      	add	sp, #12
 800426c:	ecbd 8b02 	vpop	{d8}
 8004270:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (activation == kTfLiteActRelu) {
 8004272:	2901      	cmp	r1, #1
 8004274:	ed92 8a03 	vldr	s16, [r2, #12]
 8004278:	6917      	ldr	r7, [r2, #16]
    qmax = std::numeric_limits<int8_t>::max();
 800427a:	f04f 057f 	mov.w	r5, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
 800427e:	f06f 047f 	mvn.w	r4, #127	; 0x7f
  if (activation == kTfLiteActRelu) {
 8004282:	d1dd      	bne.n	8004240 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x30>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 8004284:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8004314 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x104>
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8004288:	ee80 0a08 	vdiv.f32	s0, s0, s16
 800428c:	f00c fe88 	bl	8010fa0 <roundf>
 8004290:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004294:	ee17 3a90 	vmov	r3, s15
 8004298:	443b      	add	r3, r7
 800429a:	429c      	cmp	r4, r3
 800429c:	bfb8      	it	lt
 800429e:	461c      	movlt	r4, r3
    *act_max = qmax;
 80042a0:	e7d2      	b.n	8004248 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x38>
    qmax = std::numeric_limits<uint8_t>::max();
 80042a2:	25ff      	movs	r5, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
 80042a4:	2400      	movs	r4, #0
 80042a6:	e7c6      	b.n	8004236 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x26>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 80042a8:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8004314 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x104>
 80042ac:	ee80 0a08 	vdiv.f32	s0, s0, s16
 80042b0:	f00c fe76 	bl	8010fa0 <roundf>
 80042b4:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 80042b8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80042bc:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80042c0:	ee17 3a10 	vmov	r3, s14
 80042c4:	443b      	add	r3, r7
 80042c6:	429c      	cmp	r4, r3
 80042c8:	bfb8      	it	lt
 80042ca:	461c      	movlt	r4, r3
 80042cc:	f00c fe68 	bl	8010fa0 <roundf>
 80042d0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80042d4:	ee17 3a90 	vmov	r3, s15
 80042d8:	443b      	add	r3, r7
 80042da:	429d      	cmp	r5, r3
 80042dc:	bfa8      	it	ge
 80042de:	461d      	movge	r5, r3
 80042e0:	e7b2      	b.n	8004248 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x38>
 80042e2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80042e6:	eec7 8a88 	vdiv.f32	s17, s15, s16
 80042ea:	eeb0 0a68 	vmov.f32	s0, s17
 80042ee:	f00c fe57 	bl	8010fa0 <roundf>
 80042f2:	eef0 7a40 	vmov.f32	s15, s0
 80042f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042fa:	eeb1 0a68 	vneg.f32	s0, s17
 80042fe:	ee17 3a90 	vmov	r3, s15
 8004302:	e7df      	b.n	80042c4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb4>
 8004304:	ffff8000 	.word	0xffff8000
 8004308:	08015670 	.word	0x08015670
 800430c:	080155e4 	.word	0x080155e4
 8004310:	08015618 	.word	0x08015618
 8004314:	00000000 	.word	0x00000000

08004318 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 8004318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800431c:	ed2d 8b04 	vpush	{d8-d9}
 8004320:	b091      	sub	sp, #68	; 0x44
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 8004322:	f891 7030 	ldrb.w	r7, [r1, #48]	; 0x30
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 8004326:	9308      	str	r3, [sp, #32]
 8004328:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800432a:	9304      	str	r3, [sp, #16]
 800432c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800432e:	9305      	str	r3, [sp, #20]
 8004330:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004332:	9309      	str	r3, [sp, #36]	; 0x24
 8004334:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004336:	930a      	str	r3, [sp, #40]	; 0x28
 8004338:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800433a:	9306      	str	r3, [sp, #24]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 800433c:	2f01      	cmp	r7, #1
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 800433e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004340:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 8004344:	9307      	str	r3, [sp, #28]
 8004346:	460c      	mov	r4, r1
 8004348:	4616      	mov	r6, r2
 800434a:	4605      	mov	r5, r0
 800434c:	e9dd 1224 	ldrd	r1, r2, [sp, #144]	; 0x90
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 8004350:	d012      	beq.n	8004378 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x60>
 8004352:	4ba3      	ldr	r3, [pc, #652]	; (80045e0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c8>)
 8004354:	9702      	str	r7, [sp, #8]
 8004356:	6944      	ldr	r4, [r0, #20]
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	2101      	movs	r1, #1
 800435c:	4ba1      	ldr	r3, [pc, #644]	; (80045e4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2cc>)
 800435e:	9103      	str	r1, [sp, #12]
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	460f      	mov	r7, r1
 8004364:	4aa0      	ldr	r2, [pc, #640]	; (80045e8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2d0>)
 8004366:	49a1      	ldr	r1, [pc, #644]	; (80045ec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2d4>)
 8004368:	23d0      	movs	r3, #208	; 0xd0
 800436a:	47a0      	blx	r4
}
 800436c:	4638      	mov	r0, r7
 800436e:	b011      	add	sp, #68	; 0x44
 8004370:	ecbd 8b04 	vpop	{d8-d9}
 8004374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 8004378:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800437c:	2b01      	cmp	r3, #1
 800437e:	d010      	beq.n	80043a2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x8a>
 8004380:	6944      	ldr	r4, [r0, #20]
 8004382:	4a97      	ldr	r2, [pc, #604]	; (80045e0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c8>)
 8004384:	9201      	str	r2, [sp, #4]
 8004386:	e9cd 3702 	strd	r3, r7, [sp, #8]
 800438a:	4b99      	ldr	r3, [pc, #612]	; (80045f0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2d8>)
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	4a96      	ldr	r2, [pc, #600]	; (80045e8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2d0>)
 8004390:	4996      	ldr	r1, [pc, #600]	; (80045ec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2d4>)
 8004392:	23d2      	movs	r3, #210	; 0xd2
 8004394:	47a0      	blx	r4
}
 8004396:	4638      	mov	r0, r7
 8004398:	b011      	add	sp, #68	; 0x44
 800439a:	ecbd 8b04 	vpop	{d8-d9}
 800439e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const auto* affine_quantization =
 80043a2:	6b73      	ldr	r3, [r6, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 80fa 	beq.w	800459e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x286>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 80043aa:	f8d3 9000 	ldr.w	r9, [r3]
 80043ae:	f1b9 0f00 	cmp.w	r9, #0
 80043b2:	f000 80dd 	beq.w	8004570 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 80043b6:	f8d9 c000 	ldr.w	ip, [r9]
  if (is_per_channel) {
 80043ba:	f1bc 0f01 	cmp.w	ip, #1
 80043be:	dd24      	ble.n	800440a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
    TF_LITE_ENSURE(context,
 80043c0:	f894 e000 	ldrb.w	lr, [r4]
 80043c4:	f1be 0f09 	cmp.w	lr, #9
 80043c8:	d00a      	beq.n	80043e0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xc8>
 80043ca:	f1be 0f07 	cmp.w	lr, #7
 80043ce:	d007      	beq.n	80043e0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xc8>
 80043d0:	4b88      	ldr	r3, [pc, #544]	; (80045f4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2dc>)
 80043d2:	6944      	ldr	r4, [r0, #20]
 80043d4:	4a84      	ldr	r2, [pc, #528]	; (80045e8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2d0>)
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	4987      	ldr	r1, [pc, #540]	; (80045f8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e0>)
 80043da:	23e2      	movs	r3, #226	; 0xe2
 80043dc:	47a0      	blx	r4
 80043de:	e7c5      	b.n	800436c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x54>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 80043e0:	7830      	ldrb	r0, [r6, #0]
 80043e2:	2809      	cmp	r0, #9
 80043e4:	f040 80cc 	bne.w	8004580 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x268>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 80043e8:	45e3      	cmp	fp, ip
 80043ea:	f000 80e0 	beq.w	80045ae <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x296>
 80043ee:	e9cd cb02 	strd	ip, fp, [sp, #8]
 80043f2:	4a82      	ldr	r2, [pc, #520]	; (80045fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e4>)
 80043f4:	4b82      	ldr	r3, [pc, #520]	; (8004600 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e8>)
 80043f6:	696c      	ldr	r4, [r5, #20]
 80043f8:	497c      	ldr	r1, [pc, #496]	; (80045ec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2d4>)
 80043fa:	e9cd 3200 	strd	r3, r2, [sp]
 80043fe:	4628      	mov	r0, r5
 8004400:	4a79      	ldr	r2, [pc, #484]	; (80045e8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2d0>)
 8004402:	23e5      	movs	r3, #229	; 0xe5
 8004404:	47a0      	blx	r4
 8004406:	2701      	movs	r7, #1
 8004408:	e7b0      	b.n	800436c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x54>
  const float output_scale = output->params.scale;
 800440a:	9b04      	ldr	r3, [sp, #16]
  const float input_scale = input->params.scale;
 800440c:	68e0      	ldr	r0, [r4, #12]
  const float output_scale = output->params.scale;
 800440e:	f8d3 a00c 	ldr.w	sl, [r3, #12]
  for (int i = 0; i < num_channels; ++i) {
 8004412:	f1bb 0f00 	cmp.w	fp, #0
 8004416:	dd34      	ble.n	8004482 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x16a>
 8004418:	1f0b      	subs	r3, r1, #4
 800441a:	930b      	str	r3, [sp, #44]	; 0x2c
 800441c:	1f17      	subs	r7, r2, #4
    const double effective_output_scale = static_cast<double>(input_scale) *
 800441e:	f7fc f8a3 	bl	8000568 <__aeabi_f2d>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
                                          static_cast<double>(output_scale);
 8004426:	4650      	mov	r0, sl
    const double effective_output_scale = static_cast<double>(input_scale) *
 8004428:	ec43 2b18 	vmov	d8, r2, r3
                                          static_cast<double>(output_scale);
 800442c:	f7fc f89c 	bl	8000568 <__aeabi_f2d>
 8004430:	e9cd 540c 	strd	r5, r4, [sp, #48]	; 0x30
 8004434:	aa0f      	add	r2, sp, #60	; 0x3c
 8004436:	ec41 0b19 	vmov	d9, r0, r1
 800443a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800443c:	f04f 0800 	mov.w	r8, #0
 8004440:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8004444:	4615      	mov	r5, r2
    const double filter_scale = static_cast<double>(scale);
 8004446:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800444a:	f7fc f88d 	bl	8000568 <__aeabi_f2d>
    const double effective_output_scale = static_cast<double>(input_scale) *
 800444e:	ec53 2b18 	vmov	r2, r3, d8
 8004452:	f7fc f8e1 	bl	8000618 <__aeabi_dmul>
 8004456:	ec53 2b19 	vmov	r2, r3, d9
 800445a:	f7fc fa07 	bl	800086c <__aeabi_ddiv>
 800445e:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 8004462:	4629      	mov	r1, r5
 8004464:	4650      	mov	r0, sl
 8004466:	f7ff fcf9 	bl	8003e5c <_ZN6tflite18QuantizeMultiplierEdPlPi>
  for (int i = 0; i < num_channels; ++i) {
 800446a:	f108 0801 	add.w	r8, r8, #1
    per_channel_multiplier[i] = significand;
 800446e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004470:	f844 3f04 	str.w	r3, [r4, #4]!
  for (int i = 0; i < num_channels; ++i) {
 8004474:	45c3      	cmp	fp, r8
    per_channel_shift[i] = channel_shift;
 8004476:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004478:	f847 3f04 	str.w	r3, [r7, #4]!
  for (int i = 0; i < num_channels; ++i) {
 800447c:	dce3      	bgt.n	8004446 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x12e>
 800447e:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
  if (input->type == kTfLiteUInt8) {
 8004482:	7823      	ldrb	r3, [r4, #0]
 8004484:	2b03      	cmp	r3, #3
 8004486:	d005      	beq.n	8004494 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x17c>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8004488:	2b09      	cmp	r3, #9
 800448a:	d063      	beq.n	8004554 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x23c>
 800448c:	2b07      	cmp	r3, #7
 800448e:	d061      	beq.n	8004554 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x23c>
  return kTfLiteOk;
 8004490:	2700      	movs	r7, #0
 8004492:	e76b      	b.n	800436c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x54>
  if (bias) {
 8004494:	9b08      	ldr	r3, [sp, #32]
                                     static_cast<double>(filter->params.scale);
 8004496:	edd6 8a03 	vldr	s17, [r6, #12]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800449a:	ed94 8a03 	vldr	s16, [r4, #12]
  if (bias) {
 800449e:	b393      	cbz	r3, 8004506 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1ee>
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80044a0:	ee18 0a10 	vmov	r0, s16
 80044a4:	f7fc f860 	bl	8000568 <__aeabi_f2d>
 80044a8:	4606      	mov	r6, r0
                                     static_cast<double>(filter->params.scale);
 80044aa:	ee18 0a90 	vmov	r0, s17
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80044ae:	460f      	mov	r7, r1
                                     static_cast<double>(filter->params.scale);
 80044b0:	f7fc f85a 	bl	8000568 <__aeabi_f2d>
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80044b8:	4630      	mov	r0, r6
 80044ba:	4639      	mov	r1, r7
 80044bc:	f7fc f8ac 	bl	8000618 <__aeabi_dmul>
    const double bias_scale = static_cast<double>(bias->params.scale);
 80044c0:	9b08      	ldr	r3, [sp, #32]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80044c2:	4606      	mov	r6, r0
    const double bias_scale = static_cast<double>(bias->params.scale);
 80044c4:	68d8      	ldr	r0, [r3, #12]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80044c6:	460f      	mov	r7, r1
    const double bias_scale = static_cast<double>(bias->params.scale);
 80044c8:	f7fc f84e 	bl	8000568 <__aeabi_f2d>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 80044d0:	4630      	mov	r0, r6
 80044d2:	4639      	mov	r1, r7
 80044d4:	f7fb fee8 	bl	80002a8 <__aeabi_dsub>
 80044d8:	460b      	mov	r3, r1
    const double output_scale = static_cast<double>(output->params.scale);
 80044da:	9904      	ldr	r1, [sp, #16]
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 80044dc:	4602      	mov	r2, r0
    const double output_scale = static_cast<double>(output->params.scale);
 80044de:	68c8      	ldr	r0, [r1, #12]
 80044e0:	4616      	mov	r6, r2
 80044e2:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 80044e6:	f7fc f83f 	bl	8000568 <__aeabi_f2d>
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 80044ee:	4630      	mov	r0, r6
 80044f0:	4639      	mov	r1, r7
 80044f2:	f7fc f9bb 	bl	800086c <__aeabi_ddiv>
 80044f6:	a338      	add	r3, pc, #224	; (adr r3, 80045d8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c0>)
 80044f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fc:	f7fc fb08 	bl	8000b10 <__aeabi_dcmple>
 8004500:	2800      	cmp	r0, #0
 8004502:	f000 80c0 	beq.w	8004686 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x36e>
      static_cast<double>(input->params.scale * filter->params.scale);
 8004506:	ee28 8a28 	vmul.f32	s16, s16, s17
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 800450a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800450e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004512:	f2c0 80c3 	blt.w	800469c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x384>
  const double input_product_scale =
 8004516:	ee18 0a10 	vmov	r0, s16
 800451a:	f7fc f825 	bl	8000568 <__aeabi_f2d>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 800451e:	9b04      	ldr	r3, [sp, #16]
  const double input_product_scale =
 8004520:	4606      	mov	r6, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8004522:	68d8      	ldr	r0, [r3, #12]
  const double input_product_scale =
 8004524:	460f      	mov	r7, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8004526:	f7fc f81f 	bl	8000568 <__aeabi_f2d>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4630      	mov	r0, r6
 8004530:	4639      	mov	r1, r7
 8004532:	f7fc f99b 	bl	800086c <__aeabi_ddiv>
 8004536:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 800453a:	a90f      	add	r1, sp, #60	; 0x3c
 800453c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800453e:	f7ff fc8d 	bl	8003e5c <_ZN6tflite18QuantizeMultiplierEdPlPi>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8004542:	7823      	ldrb	r3, [r4, #0]
    *shift = -exponent;
 8004544:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004546:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004548:	4252      	negs	r2, r2
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 800454a:	2b09      	cmp	r3, #9
    *shift = -exponent;
 800454c:	600a      	str	r2, [r1, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 800454e:	d001      	beq.n	8004554 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x23c>
 8004550:	2b03      	cmp	r3, #3
 8004552:	d19b      	bne.n	800448c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x174>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8004554:	9b05      	ldr	r3, [sp, #20]
 8004556:	9a04      	ldr	r2, [sp, #16]
 8004558:	7819      	ldrb	r1, [r3, #0]
 800455a:	9b07      	ldr	r3, [sp, #28]
 800455c:	931e      	str	r3, [sp, #120]	; 0x78
 800455e:	9b06      	ldr	r3, [sp, #24]
 8004560:	4628      	mov	r0, r5
}
 8004562:	b011      	add	sp, #68	; 0x44
 8004564:	ecbd 8b04 	vpop	{d8-d9}
 8004568:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800456c:	f7ff be50 	b.w	8004210 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 8004570:	4b24      	ldr	r3, [pc, #144]	; (8004604 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2ec>)
 8004572:	6944      	ldr	r4, [r0, #20]
 8004574:	4a1c      	ldr	r2, [pc, #112]	; (80045e8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2d0>)
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	491f      	ldr	r1, [pc, #124]	; (80045f8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e0>)
 800457a:	23de      	movs	r3, #222	; 0xde
 800457c:	47a0      	blx	r4
 800457e:	e6f5      	b.n	800436c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x54>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 8004580:	4a21      	ldr	r2, [pc, #132]	; (8004608 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2f0>)
 8004582:	4b22      	ldr	r3, [pc, #136]	; (800460c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2f4>)
 8004584:	2109      	movs	r1, #9
 8004586:	9103      	str	r1, [sp, #12]
 8004588:	696c      	ldr	r4, [r5, #20]
 800458a:	4918      	ldr	r1, [pc, #96]	; (80045ec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2d4>)
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	e9cd 2001 	strd	r2, r0, [sp, #4]
 8004592:	23e4      	movs	r3, #228	; 0xe4
 8004594:	4a14      	ldr	r2, [pc, #80]	; (80045e8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2d0>)
 8004596:	4628      	mov	r0, r5
 8004598:	47a0      	blx	r4
 800459a:	2701      	movs	r7, #1
 800459c:	e6e6      	b.n	800436c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x54>
  TF_LITE_ENSURE(context, affine_quantization);
 800459e:	4b1c      	ldr	r3, [pc, #112]	; (8004610 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2f8>)
 80045a0:	6944      	ldr	r4, [r0, #20]
 80045a2:	4a11      	ldr	r2, [pc, #68]	; (80045e8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2d0>)
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	4914      	ldr	r1, [pc, #80]	; (80045f8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e0>)
 80045a8:	23dd      	movs	r3, #221	; 0xdd
 80045aa:	47a0      	blx	r4
 80045ac:	e6de      	b.n	800436c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x54>
    TF_LITE_ENSURE_EQ(
 80045ae:	6898      	ldr	r0, [r3, #8]
 80045b0:	68b3      	ldr	r3, [r6, #8]
 80045b2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	459b      	cmp	fp, r3
 80045ba:	d02d      	beq.n	8004618 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x300>
 80045bc:	e9cd b302 	strd	fp, r3, [sp, #8]
 80045c0:	4914      	ldr	r1, [pc, #80]	; (8004614 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>)
 80045c2:	4a0e      	ldr	r2, [pc, #56]	; (80045fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e4>)
 80045c4:	696c      	ldr	r4, [r5, #20]
 80045c6:	23e6      	movs	r3, #230	; 0xe6
 80045c8:	e9cd 2100 	strd	r2, r1, [sp]
 80045cc:	4628      	mov	r0, r5
 80045ce:	4a06      	ldr	r2, [pc, #24]	; (80045e8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2d0>)
 80045d0:	4906      	ldr	r1, [pc, #24]	; (80045ec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2d4>)
 80045d2:	47a0      	blx	r4
 80045d4:	2701      	movs	r7, #1
 80045d6:	e6c9      	b.n	800436c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x54>
 80045d8:	47ae147b 	.word	0x47ae147b
 80045dc:	3f947ae1 	.word	0x3f947ae1
 80045e0:	08015694 	.word	0x08015694
 80045e4:	080156b0 	.word	0x080156b0
 80045e8:	080155e4 	.word	0x080155e4
 80045ec:	08015678 	.word	0x08015678
 80045f0:	080156cc 	.word	0x080156cc
 80045f4:	08015718 	.word	0x08015718
 80045f8:	08015618 	.word	0x08015618
 80045fc:	08015770 	.word	0x08015770
 8004600:	08015780 	.word	0x08015780
 8004604:	080156fc 	.word	0x080156fc
 8004608:	08015754 	.word	0x08015754
 800460c:	08015760 	.word	0x08015760
 8004610:	080156e8 	.word	0x080156e8
 8004614:	080157a4 	.word	0x080157a4
  const float* filter_scales = affine_quantization->scale->data;
 8004618:	f109 0304 	add.w	r3, r9, #4
    const double effective_output_scale = static_cast<double>(input_scale) *
 800461c:	68e0      	ldr	r0, [r4, #12]
  const float* filter_scales = affine_quantization->scale->data;
 800461e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004620:	1f17      	subs	r7, r2, #4
 8004622:	f1a1 0804 	sub.w	r8, r1, #4
    const double effective_output_scale = static_cast<double>(input_scale) *
 8004626:	f7fb ff9f 	bl	8000568 <__aeabi_f2d>
                                          static_cast<double>(output_scale);
 800462a:	9a04      	ldr	r2, [sp, #16]
    const double effective_output_scale = static_cast<double>(input_scale) *
 800462c:	ec41 0b18 	vmov	d8, r0, r1
                                          static_cast<double>(output_scale);
 8004630:	68d0      	ldr	r0, [r2, #12]
 8004632:	f7fb ff99 	bl	8000568 <__aeabi_f2d>
 8004636:	e9cd 540c 	strd	r5, r4, [sp, #48]	; 0x30
 800463a:	aa0f      	add	r2, sp, #60	; 0x3c
 800463c:	ec41 0b19 	vmov	d9, r0, r1
 8004640:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004642:	f04f 0900 	mov.w	r9, #0
 8004646:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800464a:	4615      	mov	r5, r2
    const double filter_scale = static_cast<double>(scale);
 800464c:	f854 0b04 	ldr.w	r0, [r4], #4
 8004650:	f7fb ff8a 	bl	8000568 <__aeabi_f2d>
    const double effective_output_scale = static_cast<double>(input_scale) *
 8004654:	ec53 2b18 	vmov	r2, r3, d8
 8004658:	f7fb ffde 	bl	8000618 <__aeabi_dmul>
 800465c:	ec53 2b19 	vmov	r2, r3, d9
 8004660:	f7fc f904 	bl	800086c <__aeabi_ddiv>
 8004664:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 8004668:	4629      	mov	r1, r5
 800466a:	4650      	mov	r0, sl
 800466c:	f7ff fbf6 	bl	8003e5c <_ZN6tflite18QuantizeMultiplierEdPlPi>
  for (int i = 0; i < num_channels; ++i) {
 8004670:	f109 0901 	add.w	r9, r9, #1
    per_channel_multiplier[i] = significand;
 8004674:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004676:	f848 3f04 	str.w	r3, [r8, #4]!
  for (int i = 0; i < num_channels; ++i) {
 800467a:	45cb      	cmp	fp, r9
    per_channel_shift[i] = channel_shift;
 800467c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800467e:	f847 3f04 	str.w	r3, [r7, #4]!
  for (int i = 0; i < num_channels; ++i) {
 8004682:	dce3      	bgt.n	800464c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x334>
 8004684:	e6fb      	b.n	800447e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x166>
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8004686:	4b0a      	ldr	r3, [pc, #40]	; (80046b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x398>)
 8004688:	696c      	ldr	r4, [r5, #20]
 800468a:	4a0a      	ldr	r2, [pc, #40]	; (80046b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x39c>)
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	490a      	ldr	r1, [pc, #40]	; (80046b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x3a0>)
 8004690:	f240 1335 	movw	r3, #309	; 0x135
 8004694:	4628      	mov	r0, r5
 8004696:	47a0      	blx	r4
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8004698:	2701      	movs	r7, #1
 800469a:	e667      	b.n	800436c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x54>
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 800469c:	4b07      	ldr	r3, [pc, #28]	; (80046bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x3a4>)
 800469e:	696c      	ldr	r4, [r5, #20]
 80046a0:	4a04      	ldr	r2, [pc, #16]	; (80046b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x39c>)
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	4904      	ldr	r1, [pc, #16]	; (80046b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x3a0>)
 80046a6:	f44f 73a1 	mov.w	r3, #322	; 0x142
 80046aa:	4628      	mov	r0, r5
 80046ac:	47a0      	blx	r4
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 80046ae:	e7f3      	b.n	8004698 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x380>
 80046b0:	08015630 	.word	0x08015630
 80046b4:	080155e4 	.word	0x080155e4
 80046b8:	08015618 	.word	0x08015618
 80046bc:	08015654 	.word	0x08015654

080046c0 <_ZN6tflite14AlignPointerUpEPhj>:
namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 80046c0:	1e4b      	subs	r3, r1, #1
 80046c2:	4418      	add	r0, r3
 80046c4:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
 80046c8:	fb01 f000 	mul.w	r0, r1, r0
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop

080046d0 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 80046d0:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
 80046d4:	fb01 f000 	mul.w	r0, r1, r0
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop

080046dc <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 80046dc:	1e43      	subs	r3, r0, #1
 80046de:	440b      	add	r3, r1
 80046e0:	fbb3 f3f1 	udiv	r3, r3, r1
  return aligned_size;
}
 80046e4:	fb01 f003 	mul.w	r0, r1, r3
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop

080046ec <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
  switch (type) {
 80046ec:	3801      	subs	r0, #1
 80046ee:	280b      	cmp	r0, #11
 80046f0:	d813      	bhi.n	800471a <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x2e>
 80046f2:	e8df f000 	tbb	[pc, r0]
 80046f6:	0a0a      	.short	0x0a0a
 80046f8:	06120e06 	.word	0x06120e06
 80046fc:	12060e18 	.word	0x12060e18
 8004700:	1412      	.short	0x1412
      break;
    case kTfLiteInt32:
      *size = sizeof(int32_t);
      break;
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 8004702:	2301      	movs	r3, #1
 8004704:	600b      	str	r3, [r1, #0]
      *size = sizeof(double) * 2;
      break;
    default:
      return kTfLiteError;
  }
  return kTfLiteOk;
 8004706:	2000      	movs	r0, #0
      break;
 8004708:	4770      	bx	lr
      *size = sizeof(float);
 800470a:	2304      	movs	r3, #4
 800470c:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
 800470e:	2000      	movs	r0, #0
      break;
 8004710:	4770      	bx	lr
      *size = sizeof(int64_t);
 8004712:	2308      	movs	r3, #8
 8004714:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
 8004716:	2000      	movs	r0, #0
      break;
 8004718:	4770      	bx	lr
  switch (type) {
 800471a:	2001      	movs	r0, #1
}
 800471c:	4770      	bx	lr
      *size = sizeof(double) * 2;
 800471e:	2310      	movs	r3, #16
 8004720:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
 8004722:	2000      	movs	r0, #0
      break;
 8004724:	4770      	bx	lr
      *size = sizeof(int16_t);
 8004726:	2302      	movs	r3, #2
 8004728:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
 800472a:	2000      	movs	r0, #0
      break;
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop

08004730 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 8004730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return data_ - ReadScalar<soffset_t>(data_);
 8004734:	6804      	ldr	r4, [r0, #0]
 8004736:	eba0 0e04 	sub.w	lr, r0, r4
 800473a:	4617      	mov	r7, r2
 800473c:	f8be 8000 	ldrh.w	r8, [lr]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004740:	f1b8 0f04 	cmp.w	r8, #4
 8004744:	b082      	sub	sp, #8
 8004746:	460e      	mov	r6, r1
 8004748:	461a      	mov	r2, r3
 800474a:	d92a      	bls.n	80047a2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x72>
 800474c:	f8be 3004 	ldrh.w	r3, [lr, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004750:	b3a3      	cbz	r3, 80047bc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x8c>
 8004752:	58c1      	ldr	r1, [r0, r3]
    auto p = data_ + field_offset;
 8004754:	4403      	add	r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004756:	eb03 0c01 	add.w	ip, r3, r1
  uoffset_t size() const { return EndianScalar(length_); }
 800475a:	5859      	ldr	r1, [r3, r1]
  int element_count = 1;
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 800475c:	b371      	cbz	r1, 80047bc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x8c>
 800475e:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
  int element_count = 1;
 8004762:	2401      	movs	r4, #1
      element_count *= flatbuffer_tensor.shape()->Get(n);
 8004764:	f85c 5f04 	ldr.w	r5, [ip, #4]!
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8004768:	458c      	cmp	ip, r1
      element_count *= flatbuffer_tensor.shape()->Get(n);
 800476a:	fb05 f404 	mul.w	r4, r5, r4
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 800476e:	d1f9      	bne.n	8004764 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x34>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004770:	f1b8 0f06 	cmp.w	r8, #6
 8004774:	d936      	bls.n	80047e4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xb4>
 8004776:	f8be 3006 	ldrh.w	r3, [lr, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800477a:	b1eb      	cbz	r3, 80047b8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x88>
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 800477c:	5cc0      	ldrb	r0, [r0, r3]
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800477e:	f10d 0107 	add.w	r1, sp, #7
 8004782:	f7ff f8a7 	bl	80038d4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8004786:	b9a0      	cbnz	r0, 80047b2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x82>
  switch (type) {
 8004788:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800478c:	3b01      	subs	r3, #1
 800478e:	2b0b      	cmp	r3, #11
 8004790:	d822      	bhi.n	80047d8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xa8>
 8004792:	e8df f003 	tbb	[pc, r3]
 8004796:	1f1f      	.short	0x1f1f
 8004798:	15211d15 	.word	0x15211d15
 800479c:	21151d25 	.word	0x21151d25
 80047a0:	2321      	.short	0x2321
 80047a2:	2000      	movs	r0, #0
  int element_count = 1;
 80047a4:	2401      	movs	r4, #1
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 80047a6:	f10d 0107 	add.w	r1, sp, #7
 80047aa:	f7ff f893 	bl	80038d4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 80047ae:	2800      	cmp	r0, #0
 80047b0:	d0ea      	beq.n	8004788 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x58>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
  *bytes = element_count * (*type_size);
  return kTfLiteOk;
}
 80047b2:	b002      	add	sp, #8
 80047b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047b8:	4618      	mov	r0, r3
 80047ba:	e7f4      	b.n	80047a6 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x76>
  int element_count = 1;
 80047bc:	2401      	movs	r4, #1
 80047be:	e7d7      	b.n	8004770 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x40>
    case kTfLiteUInt8:
 80047c0:	2301      	movs	r3, #1
  *bytes = element_count * (*type_size);
 80047c2:	fb03 f404 	mul.w	r4, r3, r4
      *size = sizeof(float);
 80047c6:	603b      	str	r3, [r7, #0]
  *bytes = element_count * (*type_size);
 80047c8:	6034      	str	r4, [r6, #0]
}
 80047ca:	b002      	add	sp, #8
 80047cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case kTfLiteInt64:
 80047d0:	2308      	movs	r3, #8
 80047d2:	e7f6      	b.n	80047c2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
  switch (type) {
 80047d4:	2304      	movs	r3, #4
 80047d6:	e7f4      	b.n	80047c2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 80047d8:	2001      	movs	r0, #1
 80047da:	e7ea      	b.n	80047b2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x82>
    case kTfLiteComplex128:
 80047dc:	2310      	movs	r3, #16
 80047de:	e7f0      	b.n	80047c2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
  switch (type) {
 80047e0:	2302      	movs	r3, #2
 80047e2:	e7ee      	b.n	80047c2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 80047e4:	2000      	movs	r0, #0
 80047e6:	e7de      	b.n	80047a6 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x76>

080047e8 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
 80047e8:	b538      	push	{r3, r4, r5, lr}
  TFLITE_DCHECK(out_bytes != nullptr);
 80047ea:	b369      	cbz	r1, 8004848 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x60>

  int element_count = 1;
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 80047ec:	6842      	ldr	r2, [r0, #4]
 80047ee:	b302      	cbz	r2, 8004832 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4a>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 80047f0:	6815      	ldr	r5, [r2, #0]
 80047f2:	2d00      	cmp	r5, #0
 80047f4:	dd1d      	ble.n	8004832 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4a>
 80047f6:	2300      	movs	r3, #0
  int element_count = 1;
 80047f8:	f04f 0c01 	mov.w	ip, #1
      element_count *= eval_tensor->dims->data[n];
 80047fc:	f852 4f04 	ldr.w	r4, [r2, #4]!
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8004800:	3301      	adds	r3, #1
 8004802:	42ab      	cmp	r3, r5
      element_count *= eval_tensor->dims->data[n];
 8004804:	fb04 fc0c 	mul.w	ip, r4, ip
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8004808:	d1f8      	bne.n	80047fc <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x14>
  switch (type) {
 800480a:	7a03      	ldrb	r3, [r0, #8]
 800480c:	3b01      	subs	r3, #1
 800480e:	2b0b      	cmp	r3, #11
 8004810:	d814      	bhi.n	800483c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x54>
 8004812:	e8df f003 	tbb	[pc, r3]
 8004816:	0c0c      	.short	0x0c0c
 8004818:	06131106 	.word	0x06131106
 800481c:	13061115 	.word	0x13061115
 8004820:	1713      	.short	0x1713
      *size = sizeof(bool);
 8004822:	2301      	movs	r3, #1
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
  *out_bytes = element_count * type_size;
 8004824:	fb03 f30c 	mul.w	r3, r3, ip
 8004828:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
 800482a:	2000      	movs	r0, #0
}
 800482c:	bd38      	pop	{r3, r4, r5, pc}
      *size = sizeof(int32_t);
 800482e:	2304      	movs	r3, #4
 8004830:	e7f8      	b.n	8004824 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3c>
  int element_count = 1;
 8004832:	f04f 0c01 	mov.w	ip, #1
 8004836:	e7e8      	b.n	800480a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x22>
  switch (type) {
 8004838:	2308      	movs	r3, #8
 800483a:	e7f3      	b.n	8004824 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3c>
 800483c:	2001      	movs	r0, #1
}
 800483e:	bd38      	pop	{r3, r4, r5, pc}
      *size = sizeof(int16_t);
 8004840:	2302      	movs	r3, #2
 8004842:	e7ef      	b.n	8004824 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3c>
      *size = sizeof(double) * 2;
 8004844:	2310      	movs	r3, #16
 8004846:	e7ed      	b.n	8004824 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3c>
  TFLITE_DCHECK(out_bytes != nullptr);
 8004848:	f00c fc9c 	bl	8011184 <abort>

0800484c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
      : memory_allocator_(memory_allocator) {}

  void* Allocate(size_t size, size_t alignment_hint) override {
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 800484c:	6840      	ldr	r0, [r0, #4]
 800484e:	6803      	ldr	r3, [r0, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	4718      	bx	r3

08004854 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  }
  void Deallocate(void* data) override {
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop

08004858 <_ZN6tflite14MicroAllocatorD1Ev>:
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}

MicroAllocator::~MicroAllocator() {}
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop

0800485c <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:
  model_is_allocating_ = false;
  return kTfLiteOk;
}

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 800485c:	6840      	ldr	r0, [r0, #4]
 800485e:	6803      	ldr	r3, [r0, #0]
 8004860:	2210      	movs	r2, #16
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	4718      	bx	r3
 8004866:	bf00      	nop

08004868 <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:
  }
  return tensor;
}

void MicroAllocator::ResetTempAllocations() {
  memory_allocator_->ResetTempAllocations();
 8004868:	6840      	ldr	r0, [r0, #4]
 800486a:	6803      	ldr	r3, [r0, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	4718      	bx	r3

08004870 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEPKNS_5ModelEP16TfLiteEvalTensori>:
  return kTfLiteOk;
}

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal(
    const Model* model, TfLiteEvalTensor* eval_tensors, int tensor_index) {
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 8004870:	6840      	ldr	r0, [r0, #4]
 8004872:	6803      	ldr	r3, [r0, #0]
 8004874:	2204      	movs	r2, #4
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	2140      	movs	r1, #64	; 0x40
 800487a:	4718      	bx	r3

0800487c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop

08004880 <_ZN6tflite14MicroAllocatorD0Ev>:
MicroAllocator::~MicroAllocator() {}
 8004880:	b510      	push	{r4, lr}
 8004882:	2118      	movs	r1, #24
 8004884:	4604      	mov	r4, r0
 8004886:	f00c f9a1 	bl	8010bcc <_ZdlPvj>
 800488a:	4620      	mov	r0, r4
 800488c:	bd10      	pop	{r4, pc}
 800488e:	bf00      	nop

08004890 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 8004890:	b510      	push	{r4, lr}
 8004892:	2108      	movs	r1, #8
 8004894:	4604      	mov	r4, r0
 8004896:	f00c f999 	bl	8010bcc <_ZdlPvj>
 800489a:	4620      	mov	r0, r4
 800489c:	bd10      	pop	{r4, pc}
 800489e:	bf00      	nop

080048a0 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
}

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
 80048a0:	b510      	push	{r4, lr}
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 80048a2:	b161      	cbz	r1, 80048be <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1e>

  if (scratch_buffer_request_count_ == 0) {
 80048a4:	4613      	mov	r3, r2
 80048a6:	6902      	ldr	r2, [r0, #16]
 80048a8:	b13a      	cbz	r2, 80048ba <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1a>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
 80048aa:	6840      	ldr	r0, [r0, #4]
 80048ac:	460c      	mov	r4, r1
 80048ae:	0099      	lsls	r1, r3, #2
 80048b0:	6803      	ldr	r3, [r0, #0]
 80048b2:	2204      	movs	r2, #4
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	4798      	blx	r3
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 80048b8:	6020      	str	r0, [r4, #0]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));

  return kTfLiteOk;
}
 80048ba:	2000      	movs	r0, #0
 80048bc:	bd10      	pop	{r4, pc}
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 80048be:	f00c fc61 	bl	8011184 <abort>
 80048c2:	bf00      	nop

080048c4 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
                                               TfLiteEvalTensor* eval_tensors) {
 80048c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048c8:	680b      	ldr	r3, [r1, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 80048ca:	eba1 0e03 	sub.w	lr, r1, r3
 80048ce:	4688      	mov	r8, r1
 80048d0:	b082      	sub	sp, #8
 80048d2:	f8be 1000 	ldrh.w	r1, [lr]
 80048d6:	4607      	mov	r7, r0
 80048d8:	4616      	mov	r6, r2
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 80048da:	2500      	movs	r5, #0
 80048dc:	e01d      	b.n	800491a <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x56>
 80048de:	f8be 3004 	ldrh.w	r3, [lr, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80048e2:	b1fb      	cbz	r3, 8004924 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x60>
 80048e4:	f858 2003 	ldr.w	r2, [r8, r3]
    auto p = data_ + field_offset;
 80048e8:	4443      	add	r3, r8
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80048ea:	189c      	adds	r4, r3, r2
 80048ec:	589b      	ldr	r3, [r3, r2]
 80048ee:	429d      	cmp	r5, r3
 80048f0:	d22e      	bcs.n	8004950 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x8c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80048f2:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
 80048f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80048f8:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 80048fc:	589c      	ldr	r4, [r3, r2]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80048fe:	4413      	add	r3, r2
    return data_ - ReadScalar<soffset_t>(data_);
 8004900:	eba3 0c04 	sub.w	ip, r3, r4
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004904:	f8bc 2000 	ldrh.w	r2, [ip]
 8004908:	2a0e      	cmp	r2, #14
 800490a:	d904      	bls.n	8004916 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x52>
 800490c:	f8bc 200e 	ldrh.w	r2, [ip, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004910:	b10a      	cbz	r2, 8004916 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x52>
    if (tensor->is_variable()) {
 8004912:	5c9b      	ldrb	r3, [r3, r2]
 8004914:	b943      	cbnz	r3, 8004928 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x64>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8004916:	3501      	adds	r5, #1
 8004918:	360c      	adds	r6, #12
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800491a:	2904      	cmp	r1, #4
 800491c:	d8df      	bhi.n	80048de <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x1a>
  uoffset_t size() const { return EndianScalar(length_); }
 800491e:	2300      	movs	r3, #0
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	deff      	udf	#255	; 0xff
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	deff      	udf	#255	; 0xff
      TF_LITE_ENSURE_STATUS(
 8004928:	a901      	add	r1, sp, #4
 800492a:	4630      	mov	r0, r6
 800492c:	f7ff ff5c 	bl	80047e8 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8004930:	b978      	cbnz	r0, 8004952 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x8e>
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	9901      	ldr	r1, [sp, #4]
 8004936:	6803      	ldr	r3, [r0, #0]
 8004938:	2210      	movs	r2, #16
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	4798      	blx	r3
      eval_tensors[i].data.data =
 800493e:	6030      	str	r0, [r6, #0]
      if (eval_tensors[i].data.data == nullptr) {
 8004940:	b150      	cbz	r0, 8004958 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x94>
 8004942:	f8d8 3000 	ldr.w	r3, [r8]
    return data_ - ReadScalar<soffset_t>(data_);
 8004946:	eba8 0e03 	sub.w	lr, r8, r3
 800494a:	f8be 1000 	ldrh.w	r1, [lr]
 800494e:	e7e2      	b.n	8004916 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x52>
  return kTfLiteOk;
 8004950:	2000      	movs	r0, #0
}
 8004952:	b002      	add	sp, #8
 8004954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TF_LITE_REPORT_ERROR(error_reporter_,
 8004958:	9a01      	ldr	r2, [sp, #4]
 800495a:	4903      	ldr	r1, [pc, #12]	; (8004968 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xa4>)
 800495c:	68b8      	ldr	r0, [r7, #8]
 800495e:	f7fe ff99 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
 8004962:	2001      	movs	r0, #1
 8004964:	e7f5      	b.n	8004952 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x8e>
 8004966:	bf00      	nop
 8004968:	080157e4 	.word	0x080157e4

0800496c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE>:
    const Model* model, NodeAndRegistration** node_and_registrations) {
 800496c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  TFLITE_DCHECK(node_and_registrations);
 800496e:	2a00      	cmp	r2, #0
 8004970:	d032      	beq.n	80049d8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x6c>
 8004972:	680b      	ldr	r3, [r1, #0]
 8004974:	1acb      	subs	r3, r1, r3
 8004976:	4614      	mov	r4, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004978:	881a      	ldrh	r2, [r3, #0]
 800497a:	2a08      	cmp	r2, #8
 800497c:	d92e      	bls.n	80049dc <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x70>
 800497e:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004980:	b363      	cbz	r3, 80049dc <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x70>
 8004982:	4605      	mov	r5, r0
    auto p = data_ + field_offset;
 8004984:	18c8      	adds	r0, r1, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004986:	58cb      	ldr	r3, [r1, r3]
  if (subgraphs->size() != 1) {
 8004988:	58c6      	ldr	r6, [r0, r3]
 800498a:	2e01      	cmp	r6, #1
 800498c:	eb00 0203 	add.w	r2, r0, r3
 8004990:	d11e      	bne.n	80049d0 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x64>
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8004992:	6851      	ldr	r1, [r2, #4]
      memory_allocator_->AllocateFromTail(
 8004994:	6868      	ldr	r0, [r5, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004996:	1d13      	adds	r3, r2, #4
    return data_ - ReadScalar<soffset_t>(data_);
 8004998:	585a      	ldr	r2, [r3, r1]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800499a:	440b      	add	r3, r1
    return data_ - ReadScalar<soffset_t>(data_);
 800499c:	1a9a      	subs	r2, r3, r2
 800499e:	6801      	ldr	r1, [r0, #0]
 80049a0:	68cf      	ldr	r7, [r1, #12]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80049a2:	8811      	ldrh	r1, [r2, #0]
 80049a4:	290a      	cmp	r1, #10
 80049a6:	d919      	bls.n	80049dc <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x70>
 80049a8:	8952      	ldrh	r2, [r2, #10]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80049aa:	b1ba      	cbz	r2, 80049dc <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x70>
  uoffset_t size() const { return EndianScalar(length_); }
 80049ac:	5899      	ldr	r1, [r3, r2]
    auto p = data_ + field_offset;
 80049ae:	4413      	add	r3, r2
 80049b0:	2204      	movs	r2, #4
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
 80049b2:	5859      	ldr	r1, [r3, r1]
 80049b4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
      memory_allocator_->AllocateFromTail(
 80049b8:	00c9      	lsls	r1, r1, #3
 80049ba:	47b8      	blx	r7
  if (output == nullptr) {
 80049bc:	b110      	cbz	r0, 80049c4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x58>
  *node_and_registrations = output;
 80049be:	6020      	str	r0, [r4, #0]
  return kTfLiteOk;
 80049c0:	2000      	movs	r0, #0
}
 80049c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(
 80049c4:	4907      	ldr	r1, [pc, #28]	; (80049e4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x78>)
 80049c6:	68a8      	ldr	r0, [r5, #8]
 80049c8:	f7fe ff64 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 80049cc:	4630      	mov	r0, r6
}
 80049ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
 80049d0:	4905      	ldr	r1, [pc, #20]	; (80049e8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x7c>)
 80049d2:	68a8      	ldr	r0, [r5, #8]
 80049d4:	f7fe ff5e 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  TFLITE_DCHECK(subgraph != nullptr);
 80049d8:	f00c fbd4 	bl	8011184 <abort>
  uoffset_t size() const { return EndianScalar(length_); }
 80049dc:	2300      	movs	r3, #0
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	deff      	udf	#255	; 0xff
 80049e2:	bf00      	nop
 80049e4:	08015840 	.word	0x08015840
 80049e8:	08015814 	.word	0x08015814

080049ec <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE>:
    NodeAndRegistration* node_and_registrations) {
 80049ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f0:	ed2d 8b02 	vpush	{d8}
 80049f4:	b089      	sub	sp, #36	; 0x24
 80049f6:	9000      	str	r0, [sp, #0]
  TFLITE_DCHECK(model != nullptr);
 80049f8:	2900      	cmp	r1, #0
 80049fa:	f000 80a8 	beq.w	8004b4e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x162>
  TFLITE_DCHECK(node_and_registrations != nullptr);
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f000 80a5 	beq.w	8004b4e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x162>
 8004a04:	ee08 2a10 	vmov	s16, r2
    return data_ - ReadScalar<soffset_t>(data_);
 8004a08:	680a      	ldr	r2, [r1, #0]
 8004a0a:	1a8a      	subs	r2, r1, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004a0c:	8810      	ldrh	r0, [r2, #0]
 8004a0e:	2808      	cmp	r0, #8
 8004a10:	d97f      	bls.n	8004b12 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x126>
 8004a12:	8910      	ldrh	r0, [r2, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004a14:	2800      	cmp	r0, #0
 8004a16:	f000 8112 	beq.w	8004c3e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x252>
 8004a1a:	580d      	ldr	r5, [r1, r0]
    auto p = data_ + field_offset;
 8004a1c:	4408      	add	r0, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004a1e:	1944      	adds	r4, r0, r5
  if (subgraphs->size() != 1) {
 8004a20:	5940      	ldr	r0, [r0, r5]
 8004a22:	2801      	cmp	r0, #1
 8004a24:	f040 8105 	bne.w	8004c32 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x246>
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8004a28:	6860      	ldr	r0, [r4, #4]
 8004a2a:	88d2      	ldrh	r2, [r2, #6]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004a2c:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8004a2e:	eb04 0b00 	add.w	fp, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004a32:	b112      	cbz	r2, 8004a3a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x4e>
 8004a34:	5888      	ldr	r0, [r1, r2]
    auto p = data_ + field_offset;
 8004a36:	440a      	add	r2, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004a38:	4402      	add	r2, r0
 8004a3a:	461c      	mov	r4, r3
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
 8004a3c:	9b00      	ldr	r3, [sp, #0]
 8004a3e:	9202      	str	r2, [sp, #8]
 8004a40:	685b      	ldr	r3, [r3, #4]
      : memory_allocator_(memory_allocator) {}
 8004a42:	9307      	str	r3, [sp, #28]
 8004a44:	4b7f      	ldr	r3, [pc, #508]	; (8004c44 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x258>)
 8004a46:	9306      	str	r3, [sp, #24]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004a48:	9b02      	ldr	r3, [sp, #8]
 8004a4a:	3304      	adds	r3, #4
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 8004a4c:	f04f 0900 	mov.w	r9, #0
 8004a50:	9303      	str	r3, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
 8004a52:	f8db 3000 	ldr.w	r3, [fp]
 8004a56:	ebab 0303 	sub.w	r3, fp, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004a5a:	881a      	ldrh	r2, [r3, #0]
 8004a5c:	2a0a      	cmp	r2, #10
 8004a5e:	d958      	bls.n	8004b12 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x126>
 8004a60:	895a      	ldrh	r2, [r3, #10]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004a62:	2a00      	cmp	r2, #0
 8004a64:	f000 80a4 	beq.w	8004bb0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1c4>
 8004a68:	f85b 1002 	ldr.w	r1, [fp, r2]
    auto p = data_ + field_offset;
 8004a6c:	445a      	add	r2, fp
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004a6e:	1853      	adds	r3, r2, r1
 8004a70:	5852      	ldr	r2, [r2, r1]
 8004a72:	4591      	cmp	r9, r2
 8004a74:	f080 80d7 	bcs.w	8004c26 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x23a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004a78:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
 8004a7a:	eb03 0889 	add.w	r8, r3, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8004a7e:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 8004a82:	f858 3007 	ldr.w	r3, [r8, r7]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8004a86:	eb08 0507 	add.w	r5, r8, r7
    return data_ - ReadScalar<soffset_t>(data_);
 8004a8a:	1aeb      	subs	r3, r5, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004a8c:	881a      	ldrh	r2, [r3, #0]
 8004a8e:	2a04      	cmp	r2, #4
 8004a90:	d942      	bls.n	8004b18 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x12c>
 8004a92:	889e      	ldrh	r6, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004a94:	b106      	cbz	r6, 8004a98 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xac>
 8004a96:	59ae      	ldr	r6, [r5, r6]
    if (index >= opcodes->size()) {
 8004a98:	9b02      	ldr	r3, [sp, #8]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	42b3      	cmp	r3, r6
 8004a9e:	f240 808b 	bls.w	8004bb8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1cc>
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8004aa2:	9a03      	ldr	r2, [sp, #12]
 8004aa4:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
    p += i * sizeof(uoffset_t);
 8004aa8:	eb02 0a86 	add.w	sl, r2, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8004aac:	449a      	add	sl, r3
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 8004aae:	9b00      	ldr	r3, [sp, #0]
 8004ab0:	ee18 1a10 	vmov	r1, s16
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	4650      	mov	r0, sl
 8004ab8:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8004abc:	f7ff f96e 	bl	8003d9c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
                                  &(node_and_registrations[i].registration));
 8004ac0:	9401      	str	r4, [sp, #4]
    if (status != kTfLiteOk) {
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	f040 8085 	bne.w	8004bd2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1e6>
    const auto* registration = node_and_registrations[i].registration;
 8004ac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (registration == nullptr) {
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 8093 	beq.w	8004bf6 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x20a>
    BuiltinOperator op_type =
 8004ad0:	f893 a014 	ldrb.w	sl, [r3, #20]
    return data_ - ReadScalar<soffset_t>(data_);
 8004ad4:	f858 3007 	ldr.w	r3, [r8, r7]
    unsigned char* builtin_data = nullptr;
 8004ad8:	9005      	str	r0, [sp, #20]
 8004ada:	1aeb      	subs	r3, r5, r3
    if (op_type == BuiltinOperator_CUSTOM) {
 8004adc:	f1ba 0f20 	cmp.w	sl, #32
 8004ae0:	881a      	ldrh	r2, [r3, #0]
 8004ae2:	d036      	beq.n	8004b52 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x166>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004ae4:	2a0e      	cmp	r2, #14
 8004ae6:	d919      	bls.n	8004b1c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x130>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004ae8:	89db      	ldrh	r3, [r3, #14]
 8004aea:	b1bb      	cbz	r3, 8004b1c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x130>
        TF_LITE_REPORT_ERROR(
 8004aec:	9b00      	ldr	r3, [sp, #0]
 8004aee:	4956      	ldr	r1, [pc, #344]	; (8004c48 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x25c>)
 8004af0:	6898      	ldr	r0, [r3, #8]
  return (v < low) || (high < v);
 8004af2:	f1ba 0f80 	cmp.w	sl, #128	; 0x80
  return EnumNamesBuiltinOperator()[index];
 8004af6:	bf96      	itet	ls
 8004af8:	4b54      	ldrls	r3, [pc, #336]	; (8004c4c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x260>)
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_CUMSUM)) return "";
 8004afa:	4a55      	ldrhi	r2, [pc, #340]	; (8004c50 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x264>)
  return EnumNamesBuiltinOperator()[index];
 8004afc:	f853 202a 	ldrls.w	r2, [r3, sl, lsl #2]
 8004b00:	f7fe fec8 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
 8004b04:	2301      	movs	r3, #1
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	b009      	add	sp, #36	; 0x24
 8004b0a:	ecbd 8b02 	vpop	{d8}
 8004b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uoffset_t size() const { return EndianScalar(length_); }
 8004b12:	2300      	movs	r3, #0
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	deff      	udf	#255	; 0xff
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004b18:	2600      	movs	r6, #0
 8004b1a:	e7bd      	b.n	8004a98 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xac>
          op_resolver.GetOpDataParser(op_type);
 8004b1c:	ee18 0a10 	vmov	r0, s16
 8004b20:	6803      	ldr	r3, [r0, #0]
 8004b22:	4651      	mov	r1, sl
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	4798      	blx	r3
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
 8004b28:	9b00      	ldr	r3, [sp, #0]
      if (parser == nullptr) {
 8004b2a:	4606      	mov	r6, r0
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d06b      	beq.n	8004c08 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x21c>
      TF_LITE_ENSURE_STATUS(parser(op, error_reporter_, &builtin_data_allocator,
 8004b30:	6899      	ldr	r1, [r3, #8]
 8004b32:	aa06      	add	r2, sp, #24
 8004b34:	ab05      	add	r3, sp, #20
 8004b36:	4628      	mov	r0, r5
 8004b38:	47b0      	blx	r6
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	d171      	bne.n	8004c22 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x236>
    return data_ - ReadScalar<soffset_t>(data_);
 8004b3e:	f858 3007 	ldr.w	r3, [r8, r7]
 8004b42:	1aeb      	subs	r3, r5, r3
 8004b44:	881a      	ldrh	r2, [r3, #0]
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 8004b46:	9900      	ldr	r1, [sp, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004b48:	2a06      	cmp	r2, #6
 8004b4a:	6889      	ldr	r1, [r1, #8]
 8004b4c:	d82d      	bhi.n	8004baa <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1be>
  TFLITE_DCHECK(subgraph != nullptr);
 8004b4e:	f00c fb19 	bl	8011184 <abort>
 8004b52:	2a0e      	cmp	r2, #14
 8004b54:	d9f7      	bls.n	8004b46 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x15a>
 8004b56:	89df      	ldrh	r7, [r3, #14]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004b58:	b367      	cbz	r7, 8004bb4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1c8>
 8004b5a:	59e9      	ldr	r1, [r5, r7]
    auto p = data_ + field_offset;
 8004b5c:	442f      	add	r7, r5
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004b5e:	1878      	adds	r0, r7, r1
  uoffset_t size() const { return EndianScalar(length_); }
 8004b60:	587f      	ldr	r7, [r7, r1]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004b62:	f100 0804 	add.w	r8, r0, #4
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 8004b66:	9900      	ldr	r1, [sp, #0]
 8004b68:	6889      	ldr	r1, [r1, #8]
 8004b6a:	88de      	ldrh	r6, [r3, #6]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004b6c:	2e00      	cmp	r6, #0
 8004b6e:	d0ee      	beq.n	8004b4e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x162>
 8004b70:	59a8      	ldr	r0, [r5, r6]
    auto p = data_ + field_offset;
 8004b72:	442e      	add	r6, r5
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004b74:	4406      	add	r6, r0
  TFLITE_DCHECK(error_reporter != nullptr);
 8004b76:	2900      	cmp	r1, #0
 8004b78:	d0e9      	beq.n	8004b4e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x162>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004b7a:	2a08      	cmp	r2, #8
 8004b7c:	d9e7      	bls.n	8004b4e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x162>
 8004b7e:	891a      	ldrh	r2, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004b80:	3428      	adds	r4, #40	; 0x28
    auto p = data_ + field_offset;
 8004b82:	18ab      	adds	r3, r5, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004b84:	2a00      	cmp	r2, #0
 8004b86:	d0e2      	beq.n	8004b4e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x162>
 8004b88:	58ad      	ldr	r5, [r5, r2]
    *node = {};
 8004b8a:	9801      	ldr	r0, [sp, #4]
 8004b8c:	2224      	movs	r2, #36	; 0x24
 8004b8e:	2100      	movs	r1, #0
 8004b90:	441d      	add	r5, r3
 8004b92:	f00d fa6d 	bl	8012070 <memset>
    node->builtin_data = reinterpret_cast<void*>(builtin_data);
 8004b96:	9b05      	ldr	r3, [sp, #20]
    node->custom_initial_data_size = custom_data_size;
 8004b98:	f844 7c0c 	str.w	r7, [r4, #-12]
    node->outputs = outputs_array;
 8004b9c:	e944 650a 	strd	r6, r5, [r4, #-40]	; 0x28
    node->custom_initial_data = custom_data;
 8004ba0:	e944 3805 	strd	r3, r8, [r4, #-20]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 8004ba4:	f109 0901 	add.w	r9, r9, #1
 8004ba8:	e753      	b.n	8004a52 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x66>
 8004baa:	2700      	movs	r7, #0
 8004bac:	46b8      	mov	r8, r7
 8004bae:	e7dc      	b.n	8004b6a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x17e>
  uoffset_t size() const { return EndianScalar(length_); }
 8004bb0:	6813      	ldr	r3, [r2, #0]
 8004bb2:	deff      	udf	#255	; 0xff
    const char* custom_data = nullptr;
 8004bb4:	46b8      	mov	r8, r7
 8004bb6:	e7d6      	b.n	8004b66 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x17a>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8004bb8:	4926      	ldr	r1, [pc, #152]	; (8004c54 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x268>)
      TF_LITE_REPORT_ERROR(error_reporter_, "Skipping op for opcode_index %d\n",
 8004bba:	9b00      	ldr	r3, [sp, #0]
 8004bbc:	4632      	mov	r2, r6
 8004bbe:	6898      	ldr	r0, [r3, #8]
 8004bc0:	f7fe fe68 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
 8004bc4:	2301      	movs	r3, #1
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	b009      	add	sp, #36	; 0x24
 8004bca:	ecbd 8b02 	vpop	{d8}
 8004bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return data_ - ReadScalar<soffset_t>(data_);
 8004bd2:	f8da 2000 	ldr.w	r2, [sl]
      TF_LITE_REPORT_ERROR(error_reporter_,
 8004bd6:	9900      	ldr	r1, [sp, #0]
 8004bd8:	ebaa 0202 	sub.w	r2, sl, r2
 8004bdc:	4603      	mov	r3, r0
 8004bde:	6888      	ldr	r0, [r1, #8]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004be0:	8811      	ldrh	r1, [r2, #0]
 8004be2:	290a      	cmp	r1, #10
 8004be4:	d909      	bls.n	8004bfa <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x20e>
 8004be6:	8952      	ldrh	r2, [r2, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004be8:	b13a      	cbz	r2, 8004bfa <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x20e>
  return (v < low) || (high < v);
 8004bea:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8004bee:	2a80      	cmp	r2, #128	; 0x80
 8004bf0:	d91b      	bls.n	8004c2a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x23e>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_CUMSUM)) return "";
 8004bf2:	4a17      	ldr	r2, [pc, #92]	; (8004c50 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x264>)
 8004bf4:	e002      	b.n	8004bfc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x210>
      TF_LITE_REPORT_ERROR(error_reporter_, "Skipping op for opcode_index %d\n",
 8004bf6:	4918      	ldr	r1, [pc, #96]	; (8004c58 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x26c>)
 8004bf8:	e7df      	b.n	8004bba <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ce>
 8004bfa:	4a18      	ldr	r2, [pc, #96]	; (8004c5c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x270>)
      TF_LITE_REPORT_ERROR(error_reporter_,
 8004bfc:	4918      	ldr	r1, [pc, #96]	; (8004c60 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x274>)
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	f7fe fe48 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return status;
 8004c04:	9b00      	ldr	r3, [sp, #0]
 8004c06:	e77e      	b.n	8004b06 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x11a>
 8004c08:	f1ba 0f80 	cmp.w	sl, #128	; 0x80
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
 8004c0c:	6898      	ldr	r0, [r3, #8]
  return EnumNamesBuiltinOperator()[index];
 8004c0e:	bf96      	itet	ls
 8004c10:	4b0e      	ldrls	r3, [pc, #56]	; (8004c4c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x260>)
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_CUMSUM)) return "";
 8004c12:	4a0f      	ldrhi	r2, [pc, #60]	; (8004c50 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x264>)
  return EnumNamesBuiltinOperator()[index];
 8004c14:	f853 202a 	ldrls.w	r2, [r3, sl, lsl #2]
 8004c18:	4912      	ldr	r1, [pc, #72]	; (8004c64 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x278>)
 8004c1a:	f7fe fe3b 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e771      	b.n	8004b06 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x11a>
 8004c22:	4603      	mov	r3, r0
 8004c24:	e76f      	b.n	8004b06 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x11a>
  return kTfLiteOk;
 8004c26:	2300      	movs	r3, #0
  }

  virtual ~BuiltinDataAllocator() {}
 8004c28:	e76d      	b.n	8004b06 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x11a>
 8004c2a:	4908      	ldr	r1, [pc, #32]	; (8004c4c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x260>)
 8004c2c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004c30:	e7e4      	b.n	8004bfc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x210>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8004c32:	9b00      	ldr	r3, [sp, #0]
 8004c34:	490c      	ldr	r1, [pc, #48]	; (8004c68 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x27c>)
 8004c36:	6898      	ldr	r0, [r3, #8]
 8004c38:	f7fe fe2c 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
 8004c3c:	e787      	b.n	8004b4e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x162>
  uoffset_t size() const { return EndianScalar(length_); }
 8004c3e:	6803      	ldr	r3, [r0, #0]
 8004c40:	deff      	udf	#255	; 0xff
 8004c42:	bf00      	nop
 8004c44:	08016160 	.word	0x08016160
 8004c48:	080158f8 	.word	0x080158f8
 8004c4c:	080153dc 	.word	0x080153dc
 8004c50:	080140bc 	.word	0x080140bc
 8004c54:	08015878 	.word	0x08015878
 8004c58:	080158d4 	.word	0x080158d4
 8004c5c:	08014e04 	.word	0x08014e04
 8004c60:	080158a4 	.word	0x080158a4
 8004c64:	08015940 	.word	0x08015940
 8004c68:	08015814 	.word	0x08015814

08004c6c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 8004c6c:	b508      	push	{r3, lr}
    return data_ - ReadScalar<soffset_t>(data_);
 8004c6e:	6803      	ldr	r3, [r0, #0]
 8004c70:	1ac3      	subs	r3, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004c72:	881a      	ldrh	r2, [r3, #0]
 8004c74:	2a08      	cmp	r2, #8
 8004c76:	d918      	bls.n	8004caa <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x3e>
 8004c78:	891a      	ldrh	r2, [r3, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004c7a:	bb1a      	cbnz	r2, 8004cc4 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x58>
    FLATBUFFERS_ASSERT(i < size());
 8004c7c:	680b      	ldr	r3, [r1, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d217      	bcs.n	8004cb2 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x46>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004c82:	3104      	adds	r1, #4
    p += i * sizeof(uoffset_t);
 8004c84:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8004c88:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 8004c8c:	585a      	ldr	r2, [r3, r1]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8004c8e:	440b      	add	r3, r1
    return data_ - ReadScalar<soffset_t>(data_);
 8004c90:	1a9a      	subs	r2, r3, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004c92:	8811      	ldrh	r1, [r2, #0]
 8004c94:	2904      	cmp	r1, #4
 8004c96:	d913      	bls.n	8004cc0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x54>
 8004c98:	8890      	ldrh	r0, [r2, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004c9a:	b128      	cbz	r0, 8004ca8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x3c>
 8004c9c:	581a      	ldr	r2, [r3, r0]
    auto p = data_ + field_offset;
 8004c9e:	4403      	add	r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004ca0:	1899      	adds	r1, r3, r2
      if (array->size()) {
 8004ca2:	5898      	ldr	r0, [r3, r2]
 8004ca4:	b100      	cbz	r0, 8004ca8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x3c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004ca6:	1d08      	adds	r0, r1, #4
}
 8004ca8:	bd08      	pop	{r3, pc}
    FLATBUFFERS_ASSERT(i < size());
 8004caa:	680b      	ldr	r3, [r1, #0]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004cac:	2200      	movs	r2, #0
    FLATBUFFERS_ASSERT(i < size());
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d3e7      	bcc.n	8004c82 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x16>
 8004cb2:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x5c>)
 8004cb4:	4a05      	ldr	r2, [pc, #20]	; (8004ccc <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x60>)
 8004cb6:	4806      	ldr	r0, [pc, #24]	; (8004cd0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x64>)
 8004cb8:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004cbc:	f00c fa6a 	bl	8011194 <__assert_func>
  void* out_buffer = nullptr;
 8004cc0:	2000      	movs	r0, #0
}
 8004cc2:	bd08      	pop	{r3, pc}
 8004cc4:	5882      	ldr	r2, [r0, r2]
 8004cc6:	e7d9      	b.n	8004c7c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x10>
 8004cc8:	08015960 	.word	0x08015960
 8004ccc:	0801596c 	.word	0x0801596c
 8004cd0:	08015a64 	.word	0x08015a64

08004cd4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor>:
    const Model* model, TfLiteEvalTensor** eval_tensors) {
 8004cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd8:	b087      	sub	sp, #28
 8004cda:	9001      	str	r0, [sp, #4]
  TFLITE_DCHECK(eval_tensors != nullptr);
 8004cdc:	9205      	str	r2, [sp, #20]
 8004cde:	2a00      	cmp	r2, #0
 8004ce0:	f000 80c8 	beq.w	8004e74 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1a0>
    return data_ - ReadScalar<soffset_t>(data_);
 8004ce4:	680b      	ldr	r3, [r1, #0]
 8004ce6:	1acb      	subs	r3, r1, r3
 8004ce8:	468a      	mov	sl, r1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004cea:	881a      	ldrh	r2, [r3, #0]
 8004cec:	2a08      	cmp	r2, #8
 8004cee:	f240 80b9 	bls.w	8004e64 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x190>
 8004cf2:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 80b5 	beq.w	8004e64 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x190>
    auto p = data_ + field_offset;
 8004cfa:	18ca      	adds	r2, r1, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004cfc:	58cb      	ldr	r3, [r1, r3]
  if (subgraphs->size() != 1) {
 8004cfe:	58d4      	ldr	r4, [r2, r3]
 8004d00:	2c01      	cmp	r4, #1
 8004d02:	441a      	add	r2, r3
 8004d04:	f040 80b1 	bne.w	8004e6a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x196>
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8004d08:	6851      	ldr	r1, [r2, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004d0a:	3204      	adds	r2, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8004d0c:	eb02 0b01 	add.w	fp, r2, r1
    return data_ - ReadScalar<soffset_t>(data_);
 8004d10:	5852      	ldr	r2, [r2, r1]
 8004d12:	ebab 0202 	sub.w	r2, fp, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004d16:	8811      	ldrh	r1, [r2, #0]
 8004d18:	2904      	cmp	r1, #4
 8004d1a:	f240 80a3 	bls.w	8004e64 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x190>
 8004d1e:	8892      	ldrh	r2, [r2, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004d20:	2a00      	cmp	r2, #0
 8004d22:	f000 809f 	beq.w	8004e64 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x190>
  uoffset_t size() const { return EndianScalar(length_); }
 8004d26:	f85b 1002 	ldr.w	r1, [fp, r2]
      reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 8004d2a:	6840      	ldr	r0, [r0, #4]
    auto p = data_ + field_offset;
 8004d2c:	445a      	add	r2, fp
  uoffset_t size() const { return EndianScalar(length_); }
 8004d2e:	5857      	ldr	r7, [r2, r1]
 8004d30:	6802      	ldr	r2, [r0, #0]
 8004d32:	9703      	str	r7, [sp, #12]
 8004d34:	eb07 0547 	add.w	r5, r7, r7, lsl #1
 8004d38:	00ad      	lsls	r5, r5, #2
 8004d3a:	68d6      	ldr	r6, [r2, #12]
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	2204      	movs	r2, #4
 8004d40:	47b0      	blx	r6
  if (tensors == nullptr) {
 8004d42:	9004      	str	r0, [sp, #16]
 8004d44:	2800      	cmp	r0, #0
 8004d46:	f000 8084 	beq.w	8004e52 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x17e>
  for (size_t i = 0; i < alloc_count; ++i) {
 8004d4a:	2f00      	cmp	r7, #0
 8004d4c:	d078      	beq.n	8004e40 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x16c>
 8004d4e:	2500      	movs	r5, #0
 8004d50:	f100 0408 	add.w	r4, r0, #8
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004d54:	462b      	mov	r3, r5
 8004d56:	e01c      	b.n	8004d92 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xbe>
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8004d58:	9902      	ldr	r1, [sp, #8]
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	f7ff ff86 	bl	8004c6c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    return data_ - ReadScalar<soffset_t>(data_);
 8004d60:	f859 1008 	ldr.w	r1, [r9, r8]
 8004d64:	f844 0c08 	str.w	r0, [r4, #-8]
 8004d68:	1a71      	subs	r1, r6, r1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	8808      	ldrh	r0, [r1, #0]
 8004d6e:	2804      	cmp	r0, #4
 8004d70:	d95d      	bls.n	8004e2e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x15a>
 8004d72:	8889      	ldrh	r1, [r1, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004d74:	2900      	cmp	r1, #0
 8004d76:	d05a      	beq.n	8004e2e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x15a>
 8004d78:	5870      	ldr	r0, [r6, r1]
    auto p = data_ + field_offset;
 8004d7a:	440e      	add	r6, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004d7c:	4406      	add	r6, r0
  TFLITE_DCHECK(error_reporter != nullptr);
 8004d7e:	2f00      	cmp	r7, #0
 8004d80:	d078      	beq.n	8004e74 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1a0>
  for (size_t i = 0; i < alloc_count; ++i) {
 8004d82:	9a03      	ldr	r2, [sp, #12]
    *result = const_cast<kTfLiteArrayType*>(
 8004d84:	f844 6c04 	str.w	r6, [r4, #-4]
  for (size_t i = 0; i < alloc_count; ++i) {
 8004d88:	3501      	adds	r5, #1
 8004d8a:	42aa      	cmp	r2, r5
 8004d8c:	f104 040c 	add.w	r4, r4, #12
 8004d90:	d056      	beq.n	8004e40 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x16c>
    return data_ - ReadScalar<soffset_t>(data_);
 8004d92:	f8db 2000 	ldr.w	r2, [fp]
 8004d96:	ebab 0202 	sub.w	r2, fp, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004d9a:	8811      	ldrh	r1, [r2, #0]
 8004d9c:	2904      	cmp	r1, #4
 8004d9e:	d961      	bls.n	8004e64 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x190>
 8004da0:	8891      	ldrh	r1, [r2, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004da2:	2900      	cmp	r1, #0
 8004da4:	d05e      	beq.n	8004e64 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x190>
 8004da6:	f85b 0001 	ldr.w	r0, [fp, r1]
    auto p = data_ + field_offset;
 8004daa:	4459      	add	r1, fp
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004dac:	180a      	adds	r2, r1, r0
    FLATBUFFERS_ASSERT(i < size());
 8004dae:	5809      	ldr	r1, [r1, r0]
 8004db0:	42a9      	cmp	r1, r5
 8004db2:	d950      	bls.n	8004e56 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x182>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004db4:	3204      	adds	r2, #4
    p += i * sizeof(uoffset_t);
 8004db6:	eb02 0985 	add.w	r9, r2, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8004dba:	f852 8025 	ldr.w	r8, [r2, r5, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 8004dbe:	f8da 2000 	ldr.w	r2, [sl]
 8004dc2:	ebaa 0202 	sub.w	r2, sl, r2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8004dc6:	eb09 0608 	add.w	r6, r9, r8
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004dca:	8811      	ldrh	r1, [r2, #0]
 8004dcc:	290c      	cmp	r1, #12
 8004dce:	d929      	bls.n	8004e24 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x150>
 8004dd0:	8997      	ldrh	r7, [r2, #12]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004dd2:	2f00      	cmp	r7, #0
 8004dd4:	d03b      	beq.n	8004e4e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x17a>
 8004dd6:	f85a 2007 	ldr.w	r2, [sl, r7]
    auto p = data_ + field_offset;
 8004dda:	4457      	add	r7, sl
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004ddc:	18ba      	adds	r2, r7, r2
 8004dde:	9202      	str	r2, [sp, #8]
    return data_ - ReadScalar<soffset_t>(data_);
 8004de0:	f859 0008 	ldr.w	r0, [r9, r8]
    TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 8004de4:	9a01      	ldr	r2, [sp, #4]
 8004de6:	1a30      	subs	r0, r6, r0
  *result = {};
 8004de8:	f1a4 0108 	sub.w	r1, r4, #8
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004dec:	f8b0 c000 	ldrh.w	ip, [r0]
    TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 8004df0:	6897      	ldr	r7, [r2, #8]
 8004df2:	f1bc 0f06 	cmp.w	ip, #6
  *result = {};
 8004df6:	e944 3302 	strd	r3, r3, [r4, #-8]
 8004dfa:	608b      	str	r3, [r1, #8]
 8004dfc:	d915      	bls.n	8004e2a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x156>
 8004dfe:	88c0      	ldrh	r0, [r0, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004e00:	b100      	cbz	r0, 8004e04 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x130>
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 8004e02:	5c30      	ldrb	r0, [r6, r0]
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8004e04:	463a      	mov	r2, r7
 8004e06:	4621      	mov	r1, r4
 8004e08:	f7fe fd64 	bl	80038d4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8004e0c:	2800      	cmp	r0, #0
 8004e0e:	d0a3      	beq.n	8004d58 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x84>
      TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 8004e10:	4919      	ldr	r1, [pc, #100]	; (8004e78 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1a4>)
 8004e12:	9b01      	ldr	r3, [sp, #4]
 8004e14:	462a      	mov	r2, r5
 8004e16:	6898      	ldr	r0, [r3, #8]
 8004e18:	f7fe fd3c 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
 8004e1c:	2001      	movs	r0, #1
}
 8004e1e:	b007      	add	sp, #28
 8004e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004e24:	2200      	movs	r2, #0
 8004e26:	9202      	str	r2, [sp, #8]
 8004e28:	e7da      	b.n	8004de0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x10c>
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	e7ea      	b.n	8004e04 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x130>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8004e2e:	4a13      	ldr	r2, [pc, #76]	; (8004e7c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1a8>)
 8004e30:	f844 2c04 	str.w	r2, [r4, #-4]
  for (size_t i = 0; i < alloc_count; ++i) {
 8004e34:	9a03      	ldr	r2, [sp, #12]
 8004e36:	3501      	adds	r5, #1
 8004e38:	42aa      	cmp	r2, r5
 8004e3a:	f104 040c 	add.w	r4, r4, #12
 8004e3e:	d1a8      	bne.n	8004d92 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xbe>
  *eval_tensors = tensors;
 8004e40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  return kTfLiteOk;
 8004e44:	2000      	movs	r0, #0
  *eval_tensors = tensors;
 8004e46:	601a      	str	r2, [r3, #0]
}
 8004e48:	b007      	add	sp, #28
 8004e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e4e:	9702      	str	r7, [sp, #8]
 8004e50:	e7c6      	b.n	8004de0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x10c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8004e52:	490b      	ldr	r1, [pc, #44]	; (8004e80 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1ac>)
 8004e54:	e7dd      	b.n	8004e12 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x13e>
    FLATBUFFERS_ASSERT(i < size());
 8004e56:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1b0>)
 8004e58:	4a0b      	ldr	r2, [pc, #44]	; (8004e88 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1b4>)
 8004e5a:	480c      	ldr	r0, [pc, #48]	; (8004e8c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1b8>)
 8004e5c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004e60:	f00c f998 	bl	8011194 <__assert_func>
  uoffset_t size() const { return EndianScalar(length_); }
 8004e64:	2300      	movs	r3, #0
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	deff      	udf	#255	; 0xff
    TF_LITE_REPORT_ERROR(error_reporter_,
 8004e6a:	9b01      	ldr	r3, [sp, #4]
 8004e6c:	4908      	ldr	r1, [pc, #32]	; (8004e90 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1bc>)
 8004e6e:	6898      	ldr	r0, [r3, #8]
 8004e70:	f7fe fd10 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  TFLITE_DCHECK(subgraph != nullptr);
 8004e74:	f00c f986 	bl	8011184 <abort>
 8004e78:	08015be8 	.word	0x08015be8
 8004e7c:	0801613c 	.word	0x0801613c
 8004e80:	08015aa8 	.word	0x08015aa8
 8004e84:	08015960 	.word	0x08015960
 8004e88:	08015af0 	.word	0x08015af0
 8004e8c:	08015a64 	.word	0x08015a64
 8004e90:	08015814 	.word	0x08015814

08004e94 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 8004e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e98:	b085      	sub	sp, #20
 8004e9a:	e9dd 960e 	ldrd	r9, r6, [sp, #56]	; 0x38
  TFLITE_DCHECK(result != nullptr);
 8004e9e:	2e00      	cmp	r6, #0
 8004ea0:	f000 80b4 	beq.w	800500c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x178>
 8004ea4:	4615      	mov	r5, r2
 8004ea6:	4607      	mov	r7, r0
  *result = {};
 8004ea8:	2240      	movs	r2, #64	; 0x40
 8004eaa:	4688      	mov	r8, r1
 8004eac:	4630      	mov	r0, r6
 8004eae:	2100      	movs	r1, #0
 8004eb0:	469a      	mov	sl, r3
 8004eb2:	f00d f8dd 	bl	8012070 <memset>
    return data_ - ReadScalar<soffset_t>(data_);
 8004eb6:	682a      	ldr	r2, [r5, #0]
 8004eb8:	1aaa      	subs	r2, r5, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004eba:	8813      	ldrh	r3, [r2, #0]
 8004ebc:	2b06      	cmp	r3, #6
 8004ebe:	d93d      	bls.n	8004f3c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa8>
 8004ec0:	88d0      	ldrh	r0, [r2, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	d13c      	bne.n	8004f40 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xac>
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8004ec6:	464a      	mov	r2, r9
 8004ec8:	4631      	mov	r1, r6
 8004eca:	f7fe fd03 	bl	80038d4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8004ece:	4604      	mov	r4, r0
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	d12f      	bne.n	8004f34 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa0>
    return data_ - ReadScalar<soffset_t>(data_);
 8004ed4:	682b      	ldr	r3, [r5, #0]
 8004ed6:	1aeb      	subs	r3, r5, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004ed8:	881a      	ldrh	r2, [r3, #0]
 8004eda:	2a0e      	cmp	r2, #14
 8004edc:	d905      	bls.n	8004eea <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x56>
 8004ede:	89dc      	ldrh	r4, [r3, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004ee0:	b11c      	cbz	r4, 8004eea <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x56>
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 8004ee2:	5d2c      	ldrb	r4, [r5, r4]
 8004ee4:	3c00      	subs	r4, #0
 8004ee6:	bf18      	it	ne
 8004ee8:	2401      	movne	r4, #1
  result->is_variable = flatbuffer_tensor.is_variable();
 8004eea:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8004eee:	4651      	mov	r1, sl
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	f7ff febb 	bl	8004c6c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    result->allocation_type = kTfLiteMmapRo;
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	bf0c      	ite	eq
 8004efa:	2302      	moveq	r3, #2
 8004efc:	2301      	movne	r3, #1
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8004efe:	6070      	str	r0, [r6, #4]
  if (result->data.data == nullptr) {
 8004f00:	7533      	strb	r3, [r6, #20]
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 8004f02:	aa03      	add	r2, sp, #12
 8004f04:	464b      	mov	r3, r9
 8004f06:	f106 0118 	add.w	r1, r6, #24
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	f7ff fc10 	bl	8004730 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 8004f10:	4604      	mov	r4, r0
 8004f12:	b978      	cbnz	r0, 8004f34 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa0>
    return data_ - ReadScalar<soffset_t>(data_);
 8004f14:	682b      	ldr	r3, [r5, #0]
 8004f16:	1aeb      	subs	r3, r5, r3
 8004f18:	8819      	ldrh	r1, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004f1a:	2904      	cmp	r1, #4
 8004f1c:	d912      	bls.n	8004f44 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xb0>
 8004f1e:	889a      	ldrh	r2, [r3, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004f20:	b182      	cbz	r2, 8004f44 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xb0>
 8004f22:	58a8      	ldr	r0, [r5, r2]
    auto p = data_ + field_offset;
 8004f24:	442a      	add	r2, r5
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004f26:	4402      	add	r2, r0
  TFLITE_DCHECK(error_reporter != nullptr);
 8004f28:	f1b9 0f00 	cmp.w	r9, #0
 8004f2c:	d06e      	beq.n	800500c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x178>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004f2e:	290c      	cmp	r1, #12
    *result = const_cast<kTfLiteArrayType*>(
 8004f30:	60b2      	str	r2, [r6, #8]
 8004f32:	d80b      	bhi.n	8004f4c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xb8>
}
 8004f34:	4620      	mov	r0, r4
 8004f36:	b005      	add	sp, #20
 8004f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	e7c2      	b.n	8004ec6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x32>
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 8004f40:	5c28      	ldrb	r0, [r5, r0]
 8004f42:	e7c0      	b.n	8004ec6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x32>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8004f44:	4a61      	ldr	r2, [pc, #388]	; (80050cc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x238>)
 8004f46:	60b2      	str	r2, [r6, #8]
 8004f48:	290c      	cmp	r1, #12
 8004f4a:	d9f3      	bls.n	8004f34 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa0>
 8004f4c:	899a      	ldrh	r2, [r3, #12]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004f4e:	2a00      	cmp	r2, #0
 8004f50:	d0f0      	beq.n	8004f34 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa0>
 8004f52:	58ab      	ldr	r3, [r5, r2]
    auto p = data_ + field_offset;
 8004f54:	4415      	add	r5, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004f56:	eb05 0a03 	add.w	sl, r5, r3
    return data_ - ReadScalar<soffset_t>(data_);
 8004f5a:	58ea      	ldr	r2, [r5, r3]
 8004f5c:	ebaa 0202 	sub.w	r2, sl, r2
 8004f60:	8810      	ldrh	r0, [r2, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004f62:	2808      	cmp	r0, #8
 8004f64:	d9e6      	bls.n	8004f34 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa0>
 8004f66:	8911      	ldrh	r1, [r2, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004f68:	2900      	cmp	r1, #0
 8004f6a:	d0e3      	beq.n	8004f34 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa0>
 8004f6c:	f85a c001 	ldr.w	ip, [sl, r1]
    auto p = data_ + field_offset;
 8004f70:	4451      	add	r1, sl
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004f72:	eb01 0e0c 	add.w	lr, r1, ip
  if (src_quantization && src_quantization->scale() &&
 8004f76:	f851 100c 	ldr.w	r1, [r1, ip]
 8004f7a:	2900      	cmp	r1, #0
 8004f7c:	d0da      	beq.n	8004f34 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa0>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004f7e:	280a      	cmp	r0, #10
 8004f80:	d9d8      	bls.n	8004f34 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa0>
 8004f82:	8952      	ldrh	r2, [r2, #10]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004f84:	2a00      	cmp	r2, #0
 8004f86:	d0d5      	beq.n	8004f34 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa0>
 8004f88:	f85a 1002 	ldr.w	r1, [sl, r2]
    auto p = data_ + field_offset;
 8004f8c:	4452      	add	r2, sl
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004f8e:	1850      	adds	r0, r2, r1
      src_quantization->zero_point() &&
 8004f90:	5852      	ldr	r2, [r2, r1]
 8004f92:	2a00      	cmp	r2, #0
 8004f94:	d0ce      	beq.n	8004f34 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa0>
    result->params.zero_point =
 8004f96:	6841      	ldr	r1, [r0, #4]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8004f98:	f8de 2004 	ldr.w	r2, [lr, #4]
 8004f9c:	6131      	str	r1, [r6, #16]
    result->params.scale = src_quantization->scale()->Get(0);
 8004f9e:	60f2      	str	r2, [r6, #12]
    return data_ - ReadScalar<soffset_t>(data_);
 8004fa0:	58ea      	ldr	r2, [r5, r3]
 8004fa2:	ebaa 0202 	sub.w	r2, sl, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004fa6:	8811      	ldrh	r1, [r2, #0]
 8004fa8:	2908      	cmp	r1, #8
 8004faa:	f240 808c 	bls.w	80050c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x232>
 8004fae:	8912      	ldrh	r2, [r2, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004fb0:	2a00      	cmp	r2, #0
 8004fb2:	f000 8088 	beq.w	80050c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x232>
  uoffset_t size() const { return EndianScalar(length_); }
 8004fb6:	f85a 1002 	ldr.w	r1, [sl, r2]
 8004fba:	9300      	str	r3, [sp, #0]
    auto p = data_ + field_offset;
 8004fbc:	4452      	add	r2, sl
    int channels = src_quantization->scale()->size();
 8004fbe:	f852 b001 	ldr.w	fp, [r2, r1]
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
 8004fc2:	683a      	ldr	r2, [r7, #0]
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 8004fc4:	f1b8 0f00 	cmp.w	r8, #0
 8004fc8:	d022      	beq.n	8005010 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x17c>
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
 8004fca:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8004fce:	210c      	movs	r1, #12
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	4638      	mov	r0, r7
 8004fd4:	47c0      	blx	r8
    if (quantization == nullptr) {
 8004fd6:	9b00      	ldr	r3, [sp, #0]
 8004fd8:	4680      	mov	r8, r0
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	d060      	beq.n	80050a0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x20c>
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	9301      	str	r3, [sp, #4]
 8004fe2:	6913      	ldr	r3, [r2, #16]
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 8004fe4:	9300      	str	r3, [sp, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 8004fe6:	4658      	mov	r0, fp
 8004fe8:	f7fe fc44 	bl	8003874 <TfLiteIntArrayGetSizeInBytes>
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 8004fec:	9b00      	ldr	r3, [sp, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 8004fee:	4601      	mov	r1, r0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 8004ff0:	2204      	movs	r2, #4
 8004ff2:	4638      	mov	r0, r7
 8004ff4:	4798      	blx	r3
 8004ff6:	9b01      	ldr	r3, [sp, #4]
    quantization->zero_point =
 8004ff8:	f8c8 0004 	str.w	r0, [r8, #4]
    if (quantization->zero_point == nullptr) {
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	d055      	beq.n	80050ac <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x218>
    return data_ - ReadScalar<soffset_t>(data_);
 8005000:	58ed      	ldr	r5, [r5, r3]
 8005002:	ebaa 0505 	sub.w	r5, sl, r5
 8005006:	882f      	ldrh	r7, [r5, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005008:	2f08      	cmp	r7, #8
 800500a:	d80f      	bhi.n	800502c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x198>
  TFLITE_DCHECK(result != nullptr);
 800500c:	f00c f8ba 	bl	8011184 <abort>
                  allocator->AllocateFromTail(
 8005010:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8005014:	210c      	movs	r1, #12
 8005016:	2204      	movs	r2, #4
 8005018:	4638      	mov	r0, r7
 800501a:	47c0      	blx	r8
    if (quantization == nullptr) {
 800501c:	9b00      	ldr	r3, [sp, #0]
 800501e:	4680      	mov	r8, r0
 8005020:	2800      	cmp	r0, #0
 8005022:	d03d      	beq.n	80050a0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x20c>
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	68d3      	ldr	r3, [r2, #12]
 800502a:	e7db      	b.n	8004fe4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x150>
 800502c:	892b      	ldrh	r3, [r5, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0ec      	beq.n	800500c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x178>
 8005032:	f85a 2003 	ldr.w	r2, [sl, r3]
    auto p = data_ + field_offset;
 8005036:	4453      	add	r3, sl
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005038:	4413      	add	r3, r2
  TFLITE_DCHECK(error_reporter != nullptr);
 800503a:	f1b9 0f00 	cmp.w	r9, #0
 800503e:	d0e5      	beq.n	800500c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x178>
    for (int i = 0; i < channels; i++) {
 8005040:	f1bb 0f00 	cmp.w	fp, #0
    *result = const_cast<kTfLiteArrayType*>(
 8005044:	f8c8 3000 	str.w	r3, [r8]
    quantization->zero_point->size = channels;
 8005048:	f8c0 b000 	str.w	fp, [r0]
    for (int i = 0; i < channels; i++) {
 800504c:	dd17      	ble.n	800507e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ea>
 800504e:	2f0a      	cmp	r7, #10
 8005050:	d939      	bls.n	80050c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x232>
 8005052:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 8005056:	2200      	movs	r2, #0
    auto p = data_ + field_offset;
 8005058:	eb0a 010c 	add.w	r1, sl, ip
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800505c:	f1bc 0f00 	cmp.w	ip, #0
 8005060:	d031      	beq.n	80050c6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x232>
 8005062:	680b      	ldr	r3, [r1, #0]
    FLATBUFFERS_ASSERT(i < size());
 8005064:	f851 e003 	ldr.w	lr, [r1, r3]
 8005068:	4596      	cmp	lr, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800506a:	440b      	add	r3, r1
    FLATBUFFERS_ASSERT(i < size());
 800506c:	d924      	bls.n	80050b8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x224>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800506e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005072:	3201      	adds	r2, #1
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f840 3f04 	str.w	r3, [r0, #4]!
    for (int i = 0; i < channels; i++) {
 800507a:	4593      	cmp	fp, r2
 800507c:	d1ee      	bne.n	800505c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1c8>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800507e:	2f10      	cmp	r7, #16
 8005080:	d808      	bhi.n	8005094 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x200>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005082:	2300      	movs	r3, #0
    result->quantization = {kTfLiteAffineQuantization, quantization};
 8005084:	2201      	movs	r2, #1
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 8005086:	f8c8 3008 	str.w	r3, [r8, #8]
    result->quantization = {kTfLiteAffineQuantization, quantization};
 800508a:	f886 2030 	strb.w	r2, [r6, #48]	; 0x30
 800508e:	f8c6 8034 	str.w	r8, [r6, #52]	; 0x34
 8005092:	e74f      	b.n	8004f34 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa0>
 8005094:	8a2b      	ldrh	r3, [r5, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0f4      	beq.n	8005084 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1f0>
 800509a:	f85a 3003 	ldr.w	r3, [sl, r3]
 800509e:	e7f1      	b.n	8005084 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1f0>
      TF_LITE_REPORT_ERROR(error_reporter,
 80050a0:	490b      	ldr	r1, [pc, #44]	; (80050d0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x23c>)
 80050a2:	4648      	mov	r0, r9
 80050a4:	f7fe fbf6 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
 80050a8:	2401      	movs	r4, #1
 80050aa:	e743      	b.n	8004f34 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa0>
      TF_LITE_REPORT_ERROR(error_reporter,
 80050ac:	4909      	ldr	r1, [pc, #36]	; (80050d4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x240>)
 80050ae:	4648      	mov	r0, r9
 80050b0:	f7fe fbf0 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
 80050b4:	2401      	movs	r4, #1
 80050b6:	e73d      	b.n	8004f34 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa0>
    FLATBUFFERS_ASSERT(i < size());
 80050b8:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x244>)
 80050ba:	4a08      	ldr	r2, [pc, #32]	; (80050dc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x248>)
 80050bc:	4808      	ldr	r0, [pc, #32]	; (80050e0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x24c>)
 80050be:	f44f 7183 	mov.w	r1, #262	; 0x106
 80050c2:	f00c f867 	bl	8011194 <__assert_func>
  uoffset_t size() const { return EndianScalar(length_); }
 80050c6:	2300      	movs	r3, #0
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	deff      	udf	#255	; 0xff
 80050cc:	0801613c 	.word	0x0801613c
 80050d0:	08015c08 	.word	0x08015c08
 80050d4:	08015c38 	.word	0x08015c38
 80050d8:	08015960 	.word	0x08015960
 80050dc:	08015c68 	.word	0x08015c68
 80050e0:	08015a64 	.word	0x08015a64

080050e4 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib>:
    int tensor_index, bool allocate_temp) {
 80050e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050e8:	468e      	mov	lr, r1
    return data_ - ReadScalar<soffset_t>(data_);
 80050ea:	6811      	ldr	r1, [r2, #0]
 80050ec:	9f06      	ldr	r7, [sp, #24]
 80050ee:	eba2 0c01 	sub.w	ip, r2, r1
 80050f2:	461e      	mov	r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80050f4:	f8bc 3000 	ldrh.w	r3, [ip]
 80050f8:	f89d 101c 	ldrb.w	r1, [sp, #28]
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	4604      	mov	r4, r0
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8005100:	6840      	ldr	r0, [r0, #4]
 8005102:	d92e      	bls.n	8005162 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib+0x7e>
 8005104:	f8bc 3004 	ldrh.w	r3, [ip, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005108:	b35b      	cbz	r3, 8005162 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib+0x7e>
 800510a:	58d5      	ldr	r5, [r2, r3]
    auto p = data_ + field_offset;
 800510c:	441a      	add	r2, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800510e:	eb02 0c05 	add.w	ip, r2, r5
    FLATBUFFERS_ASSERT(i < size());
 8005112:	5953      	ldr	r3, [r2, r5]
 8005114:	429f      	cmp	r7, r3
 8005116:	d21d      	bcs.n	8005154 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib+0x70>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8005118:	f10c 0c04 	add.w	ip, ip, #4
    return data_ - ReadScalar<soffset_t>(data_);
 800511c:	f8de 5000 	ldr.w	r5, [lr]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8005120:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 8005124:	ebae 0505 	sub.w	r5, lr, r5
    p += i * sizeof(uoffset_t);
 8005128:	eb0c 0287 	add.w	r2, ip, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800512c:	441a      	add	r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800512e:	882b      	ldrh	r3, [r5, #0]
 8005130:	2b0c      	cmp	r3, #12
 8005132:	d907      	bls.n	8005144 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib+0x60>
 8005134:	89ab      	ldrh	r3, [r5, #12]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005136:	b133      	cbz	r3, 8005146 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib+0x62>
 8005138:	f85e 5003 	ldr.w	r5, [lr, r3]
    auto p = data_ + field_offset;
 800513c:	449e      	add	lr, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800513e:	eb0e 0305 	add.w	r3, lr, r5
 8005142:	e000      	b.n	8005146 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib+0x62>
 8005144:	2300      	movs	r3, #0
 8005146:	9607      	str	r6, [sp, #28]
 8005148:	68a4      	ldr	r4, [r4, #8]
 800514a:	9406      	str	r4, [sp, #24]
}
 800514c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8005150:	f7ff bea0 	b.w	8004e94 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
    FLATBUFFERS_ASSERT(i < size());
 8005154:	4b04      	ldr	r3, [pc, #16]	; (8005168 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib+0x84>)
 8005156:	4a05      	ldr	r2, [pc, #20]	; (800516c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib+0x88>)
 8005158:	4805      	ldr	r0, [pc, #20]	; (8005170 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib+0x8c>)
 800515a:	f44f 7183 	mov.w	r1, #262	; 0x106
 800515e:	f00c f819 	bl	8011194 <__assert_func>
  uoffset_t size() const { return EndianScalar(length_); }
 8005162:	2300      	movs	r3, #0
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	deff      	udf	#255	; 0xff
 8005168:	08015960 	.word	0x08015960
 800516c:	08015af0 	.word	0x08015af0
 8005170:	08015a64 	.word	0x08015a64

08005174 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori>:
    const Model* model, TfLiteEvalTensor* eval_tensors, int tensor_index) {
 8005174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005178:	460c      	mov	r4, r1
    return data_ - ReadScalar<soffset_t>(data_);
 800517a:	6809      	ldr	r1, [r1, #0]
 800517c:	1a61      	subs	r1, r4, r1
 800517e:	461d      	mov	r5, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005180:	880b      	ldrh	r3, [r1, #0]
 8005182:	2b08      	cmp	r3, #8
 8005184:	b085      	sub	sp, #20
 8005186:	d971      	bls.n	800526c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xf8>
 8005188:	890b      	ldrh	r3, [r1, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800518a:	2b00      	cmp	r3, #0
 800518c:	d06e      	beq.n	800526c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xf8>
 800518e:	4690      	mov	r8, r2
 8005190:	58e2      	ldr	r2, [r4, r3]
    auto p = data_ + field_offset;
 8005192:	4423      	add	r3, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005194:	eb03 0902 	add.w	r9, r3, r2
  if (subgraphs->size() != 1) {
 8005198:	589b      	ldr	r3, [r3, r2]
 800519a:	9303      	str	r3, [sp, #12]
 800519c:	2b01      	cmp	r3, #1
 800519e:	4606      	mov	r6, r0
 80051a0:	d15e      	bne.n	8005260 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xec>
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 80051a2:	6840      	ldr	r0, [r0, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80051a4:	f8d9 a004 	ldr.w	sl, [r9, #4]
 80051a8:	6803      	ldr	r3, [r0, #0]
 80051aa:	2204      	movs	r2, #4
 80051ac:	691f      	ldr	r7, [r3, #16]
 80051ae:	2140      	movs	r1, #64	; 0x40
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80051b0:	4491      	add	r9, r2
 80051b2:	47b8      	blx	r7
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 80051b4:	6832      	ldr	r2, [r6, #0]
 80051b6:	492f      	ldr	r1, [pc, #188]	; (8005274 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x100>)
 80051b8:	f8d2 b02c 	ldr.w	fp, [r2, #44]	; 0x2c
 80051bc:	458b      	cmp	fp, r1
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 80051be:	4607      	mov	r7, r0
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80051c0:	eb09 020a 	add.w	r2, r9, sl
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 80051c4:	d137      	bne.n	8005236 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xc2>
    return data_ - ReadScalar<soffset_t>(data_);
 80051c6:	f859 300a 	ldr.w	r3, [r9, sl]
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 80051ca:	6870      	ldr	r0, [r6, #4]
 80051cc:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80051ce:	8819      	ldrh	r1, [r3, #0]
 80051d0:	2904      	cmp	r1, #4
 80051d2:	d94b      	bls.n	800526c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xf8>
 80051d4:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d048      	beq.n	800526c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xf8>
 80051da:	f852 c003 	ldr.w	ip, [r2, r3]
    auto p = data_ + field_offset;
 80051de:	4413      	add	r3, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80051e0:	eb03 010c 	add.w	r1, r3, ip
    FLATBUFFERS_ASSERT(i < size());
 80051e4:	f853 300c 	ldr.w	r3, [r3, ip]
 80051e8:	429d      	cmp	r5, r3
 80051ea:	d232      	bcs.n	8005252 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xde>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80051ec:	3104      	adds	r1, #4
    return data_ - ReadScalar<soffset_t>(data_);
 80051ee:	6823      	ldr	r3, [r4, #0]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80051f0:	f851 2025 	ldr.w	r2, [r1, r5, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 80051f4:	1ae3      	subs	r3, r4, r3
    p += i * sizeof(uoffset_t);
 80051f6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80051fa:	440a      	add	r2, r1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80051fc:	8819      	ldrh	r1, [r3, #0]
 80051fe:	290c      	cmp	r1, #12
 8005200:	d917      	bls.n	8005232 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xbe>
 8005202:	899b      	ldrh	r3, [r3, #12]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005204:	b113      	cbz	r3, 800520c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x98>
 8005206:	58e1      	ldr	r1, [r4, r3]
    auto p = data_ + field_offset;
 8005208:	4423      	add	r3, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800520a:	440b      	add	r3, r1
 800520c:	9701      	str	r7, [sp, #4]
 800520e:	68b1      	ldr	r1, [r6, #8]
 8005210:	9100      	str	r1, [sp, #0]
 8005212:	2101      	movs	r1, #1
 8005214:	f7ff fe3e 	bl	8004e94 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 8005218:	b9a8      	cbnz	r0, 8005246 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xd2>
  if (eval_tensors != nullptr) {
 800521a:	f1b8 0f00 	cmp.w	r8, #0
 800521e:	d004      	beq.n	800522a <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xb6>
    tensor->data.data = eval_tensors[tensor_index].data.data;
 8005220:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005224:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
 8005228:	607b      	str	r3, [r7, #4]
}
 800522a:	4638      	mov	r0, r7
 800522c:	b005      	add	sp, #20
 800522e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005232:	2300      	movs	r3, #0
 8005234:	e7ea      	b.n	800520c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x98>
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 8005236:	9b03      	ldr	r3, [sp, #12]
 8005238:	4621      	mov	r1, r4
 800523a:	e9cd 5300 	strd	r5, r3, [sp]
 800523e:	4603      	mov	r3, r0
 8005240:	4630      	mov	r0, r6
 8005242:	47d8      	blx	fp
 8005244:	e7e8      	b.n	8005218 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xa4>
    TF_LITE_REPORT_ERROR(
 8005246:	490c      	ldr	r1, [pc, #48]	; (8005278 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x104>)
 8005248:	68b0      	ldr	r0, [r6, #8]
 800524a:	f7fe fb23 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
 800524e:	2700      	movs	r7, #0
 8005250:	e7eb      	b.n	800522a <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xb6>
    FLATBUFFERS_ASSERT(i < size());
 8005252:	4b0a      	ldr	r3, [pc, #40]	; (800527c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x108>)
 8005254:	4a0a      	ldr	r2, [pc, #40]	; (8005280 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x10c>)
 8005256:	480b      	ldr	r0, [pc, #44]	; (8005284 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x110>)
 8005258:	f44f 7183 	mov.w	r1, #262	; 0x106
 800525c:	f00b ff9a 	bl	8011194 <__assert_func>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8005260:	4909      	ldr	r1, [pc, #36]	; (8005288 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x114>)
 8005262:	6880      	ldr	r0, [r0, #8]
 8005264:	f7fe fb16 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  TFLITE_DCHECK(subgraph != nullptr);
 8005268:	f00b ff8c 	bl	8011184 <abort>
  uoffset_t size() const { return EndianScalar(length_); }
 800526c:	2300      	movs	r3, #0
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	deff      	udf	#255	; 0xff
 8005272:	bf00      	nop
 8005274:	080050e5 	.word	0x080050e5
 8005278:	08015d40 	.word	0x08015d40
 800527c:	08015960 	.word	0x08015960
 8005280:	08015af0 	.word	0x08015af0
 8005284:	08015a64 	.word	0x08015a64
 8005288:	08015814 	.word	0x08015814

0800528c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori>:
    const Model* model, TfLiteEvalTensor* eval_tensors, int tensor_index) {
 800528c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ - ReadScalar<soffset_t>(data_);
 8005290:	680f      	ldr	r7, [r1, #0]
 8005292:	1bcf      	subs	r7, r1, r7
 8005294:	b083      	sub	sp, #12
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005296:	f8b7 c000 	ldrh.w	ip, [r7]
 800529a:	f1bc 0f08 	cmp.w	ip, #8
 800529e:	d97a      	bls.n	8005396 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x10a>
 80052a0:	893f      	ldrh	r7, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80052a2:	2f00      	cmp	r7, #0
 80052a4:	d077      	beq.n	8005396 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x10a>
 80052a6:	f851 c007 	ldr.w	ip, [r1, r7]
    auto p = data_ + field_offset;
 80052aa:	440f      	add	r7, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80052ac:	eb07 080c 	add.w	r8, r7, ip
  if (subgraphs->size() != 1) {
 80052b0:	f857 700c 	ldr.w	r7, [r7, ip]
 80052b4:	2f01      	cmp	r7, #1
 80052b6:	4605      	mov	r5, r0
 80052b8:	460c      	mov	r4, r1
 80052ba:	d16f      	bne.n	800539c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x110>
      AllocatePersistentTfLiteTensorInternal(model, eval_tensors, tensor_index);
 80052bc:	6807      	ldr	r7, [r0, #0]
 80052be:	f8df c100 	ldr.w	ip, [pc, #256]	; 80053c0 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x134>
 80052c2:	6abf      	ldr	r7, [r7, #40]	; 0x28
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80052c4:	f8d8 a004 	ldr.w	sl, [r8, #4]
 80052c8:	4567      	cmp	r7, ip
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80052ca:	f108 0804 	add.w	r8, r8, #4
 80052ce:	4691      	mov	r9, r2
 80052d0:	461e      	mov	r6, r3
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80052d2:	eb08 0b0a 	add.w	fp, r8, sl
  TfLiteTensor* tensor =
 80052d6:	d14e      	bne.n	8005376 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xea>
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 80052d8:	6840      	ldr	r0, [r0, #4]
 80052da:	6803      	ldr	r3, [r0, #0]
 80052dc:	2204      	movs	r2, #4
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	2140      	movs	r1, #64	; 0x40
 80052e2:	4798      	blx	r3
 80052e4:	4607      	mov	r7, r0
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 80052e6:	682b      	ldr	r3, [r5, #0]
 80052e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ea:	461a      	mov	r2, r3
 80052ec:	469c      	mov	ip, r3
 80052ee:	4b2e      	ldr	r3, [pc, #184]	; (80053a8 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x11c>)
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d136      	bne.n	8005362 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xd6>
    return data_ - ReadScalar<soffset_t>(data_);
 80052f4:	f858 300a 	ldr.w	r3, [r8, sl]
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 80052f8:	6868      	ldr	r0, [r5, #4]
 80052fa:	ebab 0303 	sub.w	r3, fp, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80052fe:	881a      	ldrh	r2, [r3, #0]
 8005300:	2a04      	cmp	r2, #4
 8005302:	d948      	bls.n	8005396 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x10a>
 8005304:	889a      	ldrh	r2, [r3, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005306:	2a00      	cmp	r2, #0
 8005308:	d045      	beq.n	8005396 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x10a>
 800530a:	f85b 1002 	ldr.w	r1, [fp, r2]
    auto p = data_ + field_offset;
 800530e:	445a      	add	r2, fp
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005310:	1853      	adds	r3, r2, r1
    FLATBUFFERS_ASSERT(i < size());
 8005312:	5852      	ldr	r2, [r2, r1]
 8005314:	4296      	cmp	r6, r2
 8005316:	d237      	bcs.n	8005388 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xfc>
    return data_ - ReadScalar<soffset_t>(data_);
 8005318:	6821      	ldr	r1, [r4, #0]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800531a:	3304      	adds	r3, #4
    return data_ - ReadScalar<soffset_t>(data_);
 800531c:	1a61      	subs	r1, r4, r1
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800531e:	f853 c026 	ldr.w	ip, [r3, r6, lsl #2]
    p += i * sizeof(uoffset_t);
 8005322:	eb03 0286 	add.w	r2, r3, r6, lsl #2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005326:	880b      	ldrh	r3, [r1, #0]
 8005328:	2b0c      	cmp	r3, #12
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800532a:	4462      	add	r2, ip
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800532c:	d917      	bls.n	800535e <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xd2>
 800532e:	898b      	ldrh	r3, [r1, #12]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005330:	b113      	cbz	r3, 8005338 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xac>
 8005332:	58e1      	ldr	r1, [r4, r3]
    auto p = data_ + field_offset;
 8005334:	4423      	add	r3, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005336:	440b      	add	r3, r1
 8005338:	9701      	str	r7, [sp, #4]
 800533a:	68a9      	ldr	r1, [r5, #8]
 800533c:	9100      	str	r1, [sp, #0]
 800533e:	2100      	movs	r1, #0
 8005340:	f7ff fda8 	bl	8004e94 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 8005344:	b9d0      	cbnz	r0, 800537c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xf0>
  if (eval_tensors != nullptr) {
 8005346:	f1b9 0f00 	cmp.w	r9, #0
 800534a:	d004      	beq.n	8005356 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xca>
    tensor->data.data = eval_tensors[tensor_index].data.data;
 800534c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8005350:	f859 3026 	ldr.w	r3, [r9, r6, lsl #2]
 8005354:	607b      	str	r3, [r7, #4]
}
 8005356:	4638      	mov	r0, r7
 8005358:	b003      	add	sp, #12
 800535a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535e:	2300      	movs	r3, #0
 8005360:	e7ea      	b.n	8005338 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xac>
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 8005362:	2300      	movs	r3, #0
 8005364:	4621      	mov	r1, r4
 8005366:	9301      	str	r3, [sp, #4]
 8005368:	9600      	str	r6, [sp, #0]
 800536a:	465a      	mov	r2, fp
 800536c:	463b      	mov	r3, r7
 800536e:	4628      	mov	r0, r5
 8005370:	4664      	mov	r4, ip
 8005372:	47a0      	blx	r4
 8005374:	e7e6      	b.n	8005344 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xb8>
      AllocatePersistentTfLiteTensorInternal(model, eval_tensors, tensor_index);
 8005376:	47b8      	blx	r7
 8005378:	4607      	mov	r7, r0
 800537a:	e7b4      	b.n	80052e6 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x5a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800537c:	490b      	ldr	r1, [pc, #44]	; (80053ac <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x120>)
 800537e:	68a8      	ldr	r0, [r5, #8]
 8005380:	f7fe fa88 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
 8005384:	2700      	movs	r7, #0
 8005386:	e7e6      	b.n	8005356 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xca>
    FLATBUFFERS_ASSERT(i < size());
 8005388:	4b09      	ldr	r3, [pc, #36]	; (80053b0 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x124>)
 800538a:	4a0a      	ldr	r2, [pc, #40]	; (80053b4 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x128>)
 800538c:	480a      	ldr	r0, [pc, #40]	; (80053b8 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x12c>)
 800538e:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005392:	f00b feff 	bl	8011194 <__assert_func>
  uoffset_t size() const { return EndianScalar(length_); }
 8005396:	2300      	movs	r3, #0
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	deff      	udf	#255	; 0xff
    TF_LITE_REPORT_ERROR(error_reporter_,
 800539c:	4907      	ldr	r1, [pc, #28]	; (80053bc <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x130>)
 800539e:	6880      	ldr	r0, [r0, #8]
 80053a0:	f7fe fa78 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  TFLITE_DCHECK(subgraph != nullptr);
 80053a4:	f00b feee 	bl	8011184 <abort>
 80053a8:	080050e5 	.word	0x080050e5
 80053ac:	08015d84 	.word	0x08015d84
 80053b0:	08015960 	.word	0x08015960
 80053b4:	08015af0 	.word	0x08015af0
 80053b8:	08015a64 	.word	0x08015a64
 80053bc:	08015814 	.word	0x08015814
 80053c0:	08004871 	.word	0x08004871

080053c4 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
 80053c4:	b570      	push	{r4, r5, r6, lr}
 80053c6:	460e      	mov	r6, r1
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 80053c8:	2110      	movs	r1, #16
                                       ErrorReporter* error_reporter) {
 80053ca:	4614      	mov	r4, r2
 80053cc:	4605      	mov	r5, r0
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 80053ce:	f7ff f977 	bl	80046c0 <_ZN6tflite14AlignPointerUpEPhj>
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 80053d2:	19aa      	adds	r2, r5, r6
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 80053d4:	4601      	mov	r1, r0
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
 80053d6:	1a12      	subs	r2, r2, r0
 80053d8:	4620      	mov	r0, r4
 80053da:	f001 fb1f 	bl	8006a1c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
  TFLITE_DCHECK(memory_allocator != nullptr);
 80053de:	b178      	cbz	r0, 8005400 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x3c>
  TFLITE_DCHECK(error_reporter != nullptr);
 80053e0:	b174      	cbz	r4, 8005400 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x3c>
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
 80053e2:	6803      	ldr	r3, [r0, #0]
 80053e4:	2204      	movs	r2, #4
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	2118      	movs	r1, #24
 80053ea:	4605      	mov	r5, r0
 80053ec:	4798      	blx	r3
      model_is_allocating_(false) {}
 80053ee:	4a05      	ldr	r2, [pc, #20]	; (8005404 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x40>)
 80053f0:	6002      	str	r2, [r0, #0]
 80053f2:	2200      	movs	r2, #0
      error_reporter_(error_reporter),
 80053f4:	e9c0 5401 	strd	r5, r4, [r0, #4]
      model_is_allocating_(false) {}
 80053f8:	e9c0 2204 	strd	r2, r2, [r0, #16]
 80053fc:	7302      	strb	r2, [r0, #12]
}
 80053fe:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(memory_allocator != nullptr);
 8005400:	f00b fec0 	bl	8011184 <abort>
 8005404:	08016178 	.word	0x08016178

08005408 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor>:
    TfLiteEvalTensor** eval_tensors) {
 8005408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800540c:	f8dd 8018 	ldr.w	r8, [sp, #24]
  TFLITE_DCHECK(model != nullptr);
 8005410:	2900      	cmp	r1, #0
 8005412:	d02e      	beq.n	8005472 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x6a>
  if (model_is_allocating_) {
 8005414:	461e      	mov	r6, r3
 8005416:	7b03      	ldrb	r3, [r0, #12]
 8005418:	4604      	mov	r4, r0
 800541a:	bb1b      	cbnz	r3, 8005464 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x5c>

TfLiteStatus MicroAllocator::InitScratchBufferData() {
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
 800541c:	6103      	str	r3, [r0, #16]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 800541e:	6840      	ldr	r0, [r0, #4]
  model_is_allocating_ = true;
 8005420:	2301      	movs	r3, #1
 8005422:	7323      	strb	r3, [r4, #12]
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8005424:	6803      	ldr	r3, [r0, #0]
 8005426:	4617      	mov	r7, r2
 8005428:	460d      	mov	r5, r1
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	2204      	movs	r2, #4
 800542e:	2140      	movs	r1, #64	; 0x40
 8005430:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(InitScratchBufferData());
 8005432:	b9e0      	cbnz	r0, 800546e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x66>
  TF_LITE_ENSURE_STATUS(AllocateTfLiteEvalTensors(model, eval_tensors));
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	4642      	mov	r2, r8
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	4629      	mov	r1, r5
 800543c:	4620      	mov	r0, r4
 800543e:	4798      	blx	r3
 8005440:	b9a8      	cbnz	r0, 800546e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x66>
  TF_LITE_ENSURE_STATUS(
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	4632      	mov	r2, r6
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	4629      	mov	r1, r5
 800544a:	4620      	mov	r0, r4
 800544c:	4798      	blx	r3
 800544e:	b970      	cbnz	r0, 800546e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x66>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
 8005450:	6822      	ldr	r2, [r4, #0]
 8005452:	6833      	ldr	r3, [r6, #0]
 8005454:	69d6      	ldr	r6, [r2, #28]
 8005456:	4629      	mov	r1, r5
 8005458:	463a      	mov	r2, r7
 800545a:	4620      	mov	r0, r4
 800545c:	46b4      	mov	ip, r6
}
 800545e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
 8005462:	4760      	bx	ip
    TF_LITE_REPORT_ERROR(error_reporter_,
 8005464:	4904      	ldr	r1, [pc, #16]	; (8005478 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x70>)
 8005466:	6880      	ldr	r0, [r0, #8]
 8005468:	f7fe fa14 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 800546c:	2001      	movs	r0, #1
}
 800546e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TFLITE_DCHECK(model != nullptr);
 8005472:	f00b fe87 	bl	8011184 <abort>
 8005476:	bf00      	nop
 8005478:	08015dd0 	.word	0x08015dd0

0800547c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle** scratch_buffer_handles) {
 800547c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005480:	461e      	mov	r6, r3
  if (!model_is_allocating_) {
 8005482:	7b03      	ldrb	r3, [r0, #12]
    ScratchBufferHandle** scratch_buffer_handles) {
 8005484:	b082      	sub	sp, #8
 8005486:	4604      	mov	r4, r0
  if (!model_is_allocating_) {
 8005488:	2b00      	cmp	r3, #0
 800548a:	d03a      	beq.n	8005502 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x86>
    return data_ - ReadScalar<soffset_t>(data_);
 800548c:	680b      	ldr	r3, [r1, #0]
 800548e:	1acb      	subs	r3, r1, r3
 8005490:	4617      	mov	r7, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005492:	881a      	ldrh	r2, [r3, #0]
 8005494:	2a08      	cmp	r2, #8
 8005496:	460d      	mov	r5, r1
 8005498:	d944      	bls.n	8005524 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xa8>
 800549a:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800549c:	2b00      	cmp	r3, #0
 800549e:	d041      	beq.n	8005524 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xa8>
 80054a0:	58ca      	ldr	r2, [r1, r3]
    auto p = data_ + field_offset;
 80054a2:	440b      	add	r3, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80054a4:	eb03 0802 	add.w	r8, r3, r2
  if (subgraphs->size() != 1) {
 80054a8:	589b      	ldr	r3, [r3, r2]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d13d      	bne.n	800552a <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xae>
  TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 80054ae:	6803      	ldr	r3, [r0, #0]
 80054b0:	4922      	ldr	r1, [pc, #136]	; (800553c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xc0>)
 80054b2:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 80054b6:	f8d8 9004 	ldr.w	r9, [r8, #4]
 80054ba:	6902      	ldr	r2, [r0, #16]
 80054bc:	458a      	cmp	sl, r1
 80054be:	d12a      	bne.n	8005516 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x9a>
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 80054c0:	2e00      	cmp	r6, #0
 80054c2:	d038      	beq.n	8005536 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xba>
  if (scratch_buffer_request_count_ == 0) {
 80054c4:	b32a      	cbz	r2, 8005512 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x96>
      memory_allocator_->AllocateFromTail(
 80054c6:	6840      	ldr	r0, [r0, #4]
 80054c8:	6803      	ldr	r3, [r0, #0]
 80054ca:	0091      	lsls	r1, r2, #2
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	2204      	movs	r2, #4
 80054d0:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, subgraph, eval_tensors,
 80054d2:	6823      	ldr	r3, [r4, #0]
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 80054d4:	6030      	str	r0, [r6, #0]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80054d6:	f108 0804 	add.w	r8, r8, #4
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, subgraph, eval_tensors,
 80054da:	9000      	str	r0, [sp, #0]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80054dc:	44c8      	add	r8, r9
 80054de:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80054e0:	4629      	mov	r1, r5
 80054e2:	463b      	mov	r3, r7
 80054e4:	4642      	mov	r2, r8
 80054e6:	4620      	mov	r0, r4
 80054e8:	47b0      	blx	r6
 80054ea:	b938      	cbnz	r0, 80054fc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x80>
  TF_LITE_ENSURE_STATUS(AllocateVariables(subgraph, eval_tensors));
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	463a      	mov	r2, r7
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	4641      	mov	r1, r8
 80054f4:	4620      	mov	r0, r4
 80054f6:	4798      	blx	r3
 80054f8:	b900      	cbnz	r0, 80054fc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x80>
  model_is_allocating_ = false;
 80054fa:	7320      	strb	r0, [r4, #12]
}
 80054fc:	b002      	add	sp, #8
 80054fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
 8005502:	490f      	ldr	r1, [pc, #60]	; (8005540 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xc4>)
 8005504:	6880      	ldr	r0, [r0, #8]
 8005506:	f7fe f9c5 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 800550a:	2001      	movs	r0, #1
}
 800550c:	b002      	add	sp, #8
 800550e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, subgraph, eval_tensors,
 8005512:	6830      	ldr	r0, [r6, #0]
 8005514:	e7df      	b.n	80054d6 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x5a>
  TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 8005516:	4631      	mov	r1, r6
 8005518:	47d0      	blx	sl
 800551a:	2800      	cmp	r0, #0
 800551c:	d1ee      	bne.n	80054fc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x80>
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, subgraph, eval_tensors,
 800551e:	6830      	ldr	r0, [r6, #0]
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	e7d8      	b.n	80054d6 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x5a>
  uoffset_t size() const { return EndianScalar(length_); }
 8005524:	2300      	movs	r3, #0
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	deff      	udf	#255	; 0xff
    TF_LITE_REPORT_ERROR(error_reporter_,
 800552a:	4906      	ldr	r1, [pc, #24]	; (8005544 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xc8>)
 800552c:	6880      	ldr	r0, [r0, #8]
 800552e:	f7fe f9b1 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  TFLITE_DCHECK(subgraph != nullptr);
 8005532:	f00b fe27 	bl	8011184 <abort>
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 8005536:	f00b fe25 	bl	8011184 <abort>
 800553a:	bf00      	nop
 800553c:	080048a1 	.word	0x080048a1
 8005540:	08015e28 	.word	0x08015e28
 8005544:	08015814 	.word	0x08015814

08005548 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi>:
                                                         int* buffer_idx) {
 8005548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554a:	4607      	mov	r7, r0
  return kTfLiteOk;
}

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 800554c:	6840      	ldr	r0, [r0, #4]
                                                         int* buffer_idx) {
 800554e:	4615      	mov	r5, r2
 8005550:	460e      	mov	r6, r1
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 8005552:	f001 fa8f 	bl	8006a74 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 8005556:	2104      	movs	r1, #4
 8005558:	f7ff f8b2 	bl	80046c0 <_ZN6tflite14AlignPointerUpEPhj>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800555c:	693a      	ldr	r2, [r7, #16]
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 800555e:	4603      	mov	r3, r0
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8005560:	b172      	cbz	r2, 8005580 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x38>
 8005562:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
  size_t current_node_request_count = 0;
 8005566:	f04f 0e00 	mov.w	lr, #0
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 800556a:	685c      	ldr	r4, [r3, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800556c:	3308      	adds	r3, #8
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 800556e:	3401      	adds	r4, #1
      ++current_node_request_count;
 8005570:	bf08      	it	eq
 8005572:	f10e 0e01 	addeq.w	lr, lr, #1
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8005576:	4563      	cmp	r3, ip
 8005578:	d1f7      	bne.n	800556a <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x22>
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 800557a:	f1be 0f07 	cmp.w	lr, #7
 800557e:	d809      	bhi.n	8005594 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x4c>
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 8005580:	f04f 31ff 	mov.w	r1, #4294967295
  current_request->bytes = bytes;
 8005584:	601e      	str	r6, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 8005586:	6059      	str	r1, [r3, #4]
  *buffer_idx = scratch_buffer_request_count_;
 8005588:	602a      	str	r2, [r5, #0]
  ++scratch_buffer_request_count_;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	3301      	adds	r3, #1
  return kTfLiteOk;
 800558e:	2000      	movs	r0, #0
  ++scratch_buffer_request_count_;
 8005590:	613b      	str	r3, [r7, #16]
}
 8005592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(
 8005594:	4903      	ldr	r1, [pc, #12]	; (80055a4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x5c>)
 8005596:	68b8      	ldr	r0, [r7, #8]
 8005598:	2208      	movs	r2, #8
 800559a:	f7fe f97b 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 800559e:	2001      	movs	r0, #1
}
 80055a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055a2:	bf00      	nop
 80055a4:	08015e74 	.word	0x08015e74

080055a8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:
  ResetTempAllocations();
 80055a8:	6803      	ldr	r3, [r0, #0]
 80055aa:	4a14      	ldr	r2, [pc, #80]	; (80055fc <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x54>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	4293      	cmp	r3, r2
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 80055b0:	b570      	push	{r4, r5, r6, lr}
 80055b2:	4604      	mov	r4, r0
  memory_allocator_->ResetTempAllocations();
 80055b4:	bf02      	ittt	eq
 80055b6:	6840      	ldreq	r0, [r0, #4]
 80055b8:	6803      	ldreq	r3, [r0, #0]
 80055ba:	695b      	ldreq	r3, [r3, #20]
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 80055bc:	460d      	mov	r5, r1
  ResetTempAllocations();
 80055be:	4798      	blx	r3
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 80055c0:	6860      	ldr	r0, [r4, #4]
 80055c2:	f001 fa57 	bl	8006a74 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 80055c6:	2104      	movs	r1, #4
 80055c8:	f7ff f87a 	bl	80046c0 <_ZN6tflite14AlignPointerUpEPhj>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80055cc:	6922      	ldr	r2, [r4, #16]
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 80055ce:	4603      	mov	r3, r0
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80055d0:	b18a      	cbz	r2, 80055f6 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x4e>
 80055d2:	00d1      	lsls	r1, r2, #3
 80055d4:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	3201      	adds	r2, #1
      requests[i].node_idx = node_id;
 80055dc:	bf08      	it	eq
 80055de:	605d      	streq	r5, [r3, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80055e0:	3308      	adds	r3, #8
 80055e2:	4563      	cmp	r3, ip
 80055e4:	d1f8      	bne.n	80055d8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x30>
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 80055e6:	3140      	adds	r1, #64	; 0x40
 80055e8:	6860      	ldr	r0, [r4, #4]
 80055ea:	6803      	ldr	r3, [r0, #0]
}
 80055ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	2204      	movs	r2, #4
 80055f4:	4718      	bx	r3
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80055f6:	2140      	movs	r1, #64	; 0x40
 80055f8:	e7f6      	b.n	80055e8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x40>
 80055fa:	bf00      	nop
 80055fc:	08004869 	.word	0x08004869

08005600 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle* scratch_buffer_handles) {
 8005600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005604:	ed2d 8b02 	vpush	{d8}
 8005608:	4690      	mov	r8, r2
    return data_ - ReadScalar<soffset_t>(data_);
 800560a:	6812      	ldr	r2, [r2, #0]
 800560c:	b099      	sub	sp, #100	; 0x64
 800560e:	eba8 0202 	sub.w	r2, r8, r2
 8005612:	9306      	str	r3, [sp, #24]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005614:	8813      	ldrh	r3, [r2, #0]
 8005616:	2b04      	cmp	r3, #4
 8005618:	f240 80e2 	bls.w	80057e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1e0>
 800561c:	8893      	ldrh	r3, [r2, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 80de 	beq.w	80057e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1e0>
  uoffset_t size() const { return EndianScalar(length_); }
 8005624:	f858 2003 	ldr.w	r2, [r8, r3]
    auto p = data_ + field_offset;
 8005628:	4443      	add	r3, r8
  uoffset_t size() const { return EndianScalar(length_); }
 800562a:	4605      	mov	r5, r0
      subgraph->tensors()->size() + scratch_buffer_request_count_;
 800562c:	589a      	ldr	r2, [r3, r2]
 800562e:	6903      	ldr	r3, [r0, #16]
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 8005630:	6840      	ldr	r0, [r0, #4]
      subgraph->tensors()->size() + scratch_buffer_request_count_;
 8005632:	18d3      	adds	r3, r2, r3
 8005634:	9308      	str	r3, [sp, #32]
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
 8005636:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800563a:	460e      	mov	r6, r1
 800563c:	00d9      	lsls	r1, r3, #3
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 800563e:	6803      	ldr	r3, [r0, #0]
 8005640:	2204      	movs	r2, #4
 8005642:	691b      	ldr	r3, [r3, #16]
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
 8005644:	ee08 1a90 	vmov	s17, r1
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 8005648:	4798      	blx	r3
  if (allocation_info == nullptr) {
 800564a:	4604      	mov	r4, r0
 800564c:	2800      	cmp	r0, #0
 800564e:	f000 815e 	beq.w	800590e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x30e>
    return data_ - ReadScalar<soffset_t>(data_);
 8005652:	f8d8 3000 	ldr.w	r3, [r8]
 8005656:	eba8 0303 	sub.w	r3, r8, r3
 800565a:	9302      	str	r3, [sp, #8]
 800565c:	881a      	ldrh	r2, [r3, #0]
 800565e:	9205      	str	r2, [sp, #20]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005660:	2a04      	cmp	r2, #4
 8005662:	f240 80bd 	bls.w	80057e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1e0>
 8005666:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 80b9 	beq.w	80057e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1e0>
    return data_ - ReadScalar<soffset_t>(data_);
 800566e:	6832      	ldr	r2, [r6, #0]
 8005670:	1ab2      	subs	r2, r6, r2
 8005672:	4611      	mov	r1, r2
 8005674:	9204      	str	r2, [sp, #16]
  uoffset_t size() const { return EndianScalar(length_); }
 8005676:	f858 2003 	ldr.w	r2, [r8, r3]
    auto p = data_ + field_offset;
 800567a:	4443      	add	r3, r8
    return data_ - ReadScalar<soffset_t>(data_);
 800567c:	4637      	mov	r7, r6
  uoffset_t size() const { return EndianScalar(length_); }
 800567e:	589b      	ldr	r3, [r3, r2]
 8005680:	9303      	str	r3, [sp, #12]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005682:	460a      	mov	r2, r1
 8005684:	880b      	ldrh	r3, [r1, #0]
                                scratch_buffer_request_count_, error_reporter_);
 8005686:	6929      	ldr	r1, [r5, #16]
 8005688:	9107      	str	r1, [sp, #28]
 800568a:	68a9      	ldr	r1, [r5, #8]
 800568c:	2b10      	cmp	r3, #16
 800568e:	ee08 1a10 	vmov	s16, r1
 8005692:	f240 80a8 	bls.w	80057e6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1e6>
 8005696:	8a13      	ldrh	r3, [r2, #16]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 80a4 	beq.w	80057e6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1e6>
 800569e:	58f2      	ldr	r2, [r6, r3]
    auto p = data_ + field_offset;
 80056a0:	4433      	add	r3, r6
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80056a2:	eb03 0902 	add.w	r9, r3, r2
  uoffset_t size() const { return EndianScalar(length_); }
 80056a6:	589e      	ldr	r6, [r3, r2]
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 80056a8:	2e00      	cmp	r6, #0
 80056aa:	f000 824f 	beq.w	8005b4c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x54c>
  const int32_t* offline_planner_offsets = nullptr;
 80056ae:	f04f 0b00 	mov.w	fp, #0
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 80056b2:	e9cd 0509 	strd	r0, r5, [sp, #36]	; 0x24
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 80056b6:	49b3      	ldr	r1, [pc, #716]	; (8005984 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x384>)
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 80056b8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80056bc:	f109 0904 	add.w	r9, r9, #4
 80056c0:	46da      	mov	sl, fp
 80056c2:	e03a      	b.n	800573a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x13a>
 80056c4:	88a8      	ldrh	r0, [r5, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80056c6:	b110      	cbz	r0, 80056ce <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0xce>
 80056c8:	5822      	ldr	r2, [r4, r0]
    auto p = data_ + field_offset;
 80056ca:	4420      	add	r0, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80056cc:	4410      	add	r0, r2
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 80056ce:	3004      	adds	r0, #4
 80056d0:	2217      	movs	r2, #23
 80056d2:	f00c fcd5 	bl	8012080 <strncmp>
 80056d6:	49ab      	ldr	r1, [pc, #684]	; (8005984 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x384>)
 80056d8:	bb50      	cbnz	r0, 8005730 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x130>
 80056da:	9b04      	ldr	r3, [sp, #16]
 80056dc:	899a      	ldrh	r2, [r3, #12]
 80056de:	b112      	cbz	r2, 80056e6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0xe6>
 80056e0:	58b8      	ldr	r0, [r7, r2]
    auto p = data_ + field_offset;
 80056e2:	443a      	add	r2, r7
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80056e4:	4402      	add	r2, r0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80056e6:	f1b8 0f06 	cmp.w	r8, #6
 80056ea:	f240 810c 	bls.w	8005906 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x306>
 80056ee:	88e8      	ldrh	r0, [r5, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80056f0:	b100      	cbz	r0, 80056f4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0xf4>
 80056f2:	5820      	ldr	r0, [r4, r0]
    FLATBUFFERS_ASSERT(i < size());
 80056f4:	6813      	ldr	r3, [r2, #0]
 80056f6:	4298      	cmp	r0, r3
 80056f8:	f080 82b2 	bcs.w	8005c60 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x660>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80056fc:	1d13      	adds	r3, r2, #4
    p += i * sizeof(uoffset_t);
 80056fe:	eb03 0280 	add.w	r2, r3, r0, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8005702:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 8005706:	5813      	ldr	r3, [r2, r0]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8005708:	4410      	add	r0, r2
    return data_ - ReadScalar<soffset_t>(data_);
 800570a:	1ac3      	subs	r3, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800570c:	881a      	ldrh	r2, [r3, #0]
 800570e:	2a04      	cmp	r2, #4
 8005710:	f240 82b4 	bls.w	8005c7c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x67c>
 8005714:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 82b0 	beq.w	8005c7c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x67c>
 800571c:	58c2      	ldr	r2, [r0, r3]
    auto p = data_ + field_offset;
 800571e:	4403      	add	r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005720:	4413      	add	r3, r2
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 8005722:	f103 0b10 	add.w	fp, r3, #16
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 8005726:	68da      	ldr	r2, [r3, #12]
        if (tensor_count_ != nbr_tensors) {
 8005728:	9b03      	ldr	r3, [sp, #12]
 800572a:	4293      	cmp	r3, r2
 800572c:	f040 812e 	bne.w	800598c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x38c>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 8005730:	f10a 0a01 	add.w	sl, sl, #1
 8005734:	4556      	cmp	r6, sl
 8005736:	f000 80f2 	beq.w	800591e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x31e>
    p += i * sizeof(uoffset_t);
 800573a:	464c      	mov	r4, r9
T ReadScalar(const void *p) {
 800573c:	f109 0904 	add.w	r9, r9, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8005740:	6823      	ldr	r3, [r4, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 8005742:	58e5      	ldr	r5, [r4, r3]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8005744:	441c      	add	r4, r3
    return data_ - ReadScalar<soffset_t>(data_);
 8005746:	1b65      	subs	r5, r4, r5
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8005748:	f8b5 8000 	ldrh.w	r8, [r5]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800574c:	f1b8 0f04 	cmp.w	r8, #4
 8005750:	d8b8      	bhi.n	80056c4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0xc4>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005752:	2000      	movs	r0, #0
 8005754:	e7bb      	b.n	80056ce <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0xce>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005756:	9b05      	ldr	r3, [sp, #20]
 8005758:	2b0a      	cmp	r3, #10
 800575a:	d941      	bls.n	80057e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1e0>
 800575c:	9b02      	ldr	r3, [sp, #8]
 800575e:	895b      	ldrh	r3, [r3, #10]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005760:	2b00      	cmp	r3, #0
 8005762:	d03d      	beq.n	80057e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1e0>
 8005764:	f858 2003 	ldr.w	r2, [r8, r3]
    auto p = data_ + field_offset;
 8005768:	4443      	add	r3, r8
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800576a:	eb03 0802 	add.w	r8, r3, r2
  uoffset_t size() const { return EndianScalar(length_); }
 800576e:	f853 9002 	ldr.w	r9, [r3, r2]
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 8005772:	f1b9 0001 	subs.w	r0, r9, #1
 8005776:	bf58      	it	pl
 8005778:	eb08 0889 	addpl.w	r8, r8, r9, lsl #2
 800577c:	f100 814e 	bmi.w	8005a1c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x41c>
    FLATBUFFERS_ASSERT(i < size());
 8005780:	4581      	cmp	r9, r0
 8005782:	f240 8234 	bls.w	8005bee <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x5ee>
    p += i * sizeof(uoffset_t);
 8005786:	4646      	mov	r6, r8
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 8005788:	2100      	movs	r1, #0
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800578a:	6833      	ldr	r3, [r6, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 800578c:	58f2      	ldr	r2, [r6, r3]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800578e:	441e      	add	r6, r3
    return data_ - ReadScalar<soffset_t>(data_);
 8005790:	eba6 0c02 	sub.w	ip, r6, r2
 8005794:	f1a8 0804 	sub.w	r8, r8, #4
 8005798:	f8bc 7000 	ldrh.w	r7, [ip]
 800579c:	e01e      	b.n	80057dc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1dc>
 800579e:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80057a2:	b1f3      	cbz	r3, 80057e2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1e2>
 80057a4:	58f2      	ldr	r2, [r6, r3]
    auto p = data_ + field_offset;
 80057a6:	4433      	add	r3, r6
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80057a8:	eb03 0e02 	add.w	lr, r3, r2
  uoffset_t size() const { return EndianScalar(length_); }
 80057ac:	f853 a002 	ldr.w	sl, [r3, r2]
 80057b0:	4551      	cmp	r1, sl
 80057b2:	f080 8111 	bcs.w	80059d8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x3d8>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 80057b6:	eb0e 0381 	add.w	r3, lr, r1, lsl #2
      AllocationInfo* current = &info_[tensor_index];
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80057c0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
      if (current->first_created == 0) {
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	2a00      	cmp	r2, #0
 80057c8:	f000 80ec 	beq.w	80059a4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x3a4>
      if (((current->last_used == -1) || (current->last_used < i))) {
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	f1b2 3fff 	cmp.w	r2, #4294967295
 80057d2:	d001      	beq.n	80057d8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1d8>
 80057d4:	4282      	cmp	r2, r0
 80057d6:	da00      	bge.n	80057da <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1da>
        current->last_used = i;
 80057d8:	60d8      	str	r0, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 80057da:	3101      	adds	r1, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80057dc:	2f06      	cmp	r7, #6
 80057de:	d8de      	bhi.n	800579e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x19e>
  uoffset_t size() const { return EndianScalar(length_); }
 80057e0:	2300      	movs	r3, #0
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	deff      	udf	#255	; 0xff
  const int32_t* offline_planner_offsets = nullptr;
 80057e6:	f04f 0b00 	mov.w	fp, #0
  TFLITE_DCHECK(eval_tensors != nullptr);
 80057ea:	9b06      	ldr	r3, [sp, #24]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 8248 	beq.w	8005c82 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x682>
  for (size_t i = 0; i < tensor_count_; ++i) {
 80057f2:	9b03      	ldr	r3, [sp, #12]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 81ab 	beq.w	8005b50 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x550>
 80057fa:	9f06      	ldr	r7, [sp, #24]
 80057fc:	46a2      	mov	sl, r4
 80057fe:	f04f 0900 	mov.w	r9, #0
    current->first_created = -1;
 8005802:	465e      	mov	r6, fp
    current->output_ptr = &(eval_tensors[i].data.data);
 8005804:	f8ca 7004 	str.w	r7, [sl, #4]
    TF_LITE_ENSURE_STATUS(
 8005808:	4651      	mov	r1, sl
 800580a:	4638      	mov	r0, r7
 800580c:	f7fe ffec 	bl	80047e8 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8005810:	2800      	cmp	r0, #0
 8005812:	d14d      	bne.n	80058b0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x2b0>
    current->first_created = -1;
 8005814:	f04f 33ff 	mov.w	r3, #4294967295
    current->last_used = -1;
 8005818:	e9ca 3302 	strd	r3, r3, [sl, #8]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d04d      	beq.n	80058be <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x2be>
 8005822:	f88a 0014 	strb.w	r0, [sl, #20]
    if (offline_offsets) {
 8005826:	b376      	cbz	r6, 8005886 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x286>
      current->offline_offset = offline_offsets[i];
 8005828:	f856 3029 	ldr.w	r3, [r6, r9, lsl #2]
 800582c:	f8ca 3010 	str.w	r3, [sl, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 8005830:	9b03      	ldr	r3, [sp, #12]
 8005832:	f109 0901 	add.w	r9, r9, #1
 8005836:	454b      	cmp	r3, r9
 8005838:	f107 070c 	add.w	r7, r7, #12
 800583c:	f10a 0a18 	add.w	sl, sl, #24
 8005840:	d1e0      	bne.n	8005804 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x204>
    return data_ - ReadScalar<soffset_t>(data_);
 8005842:	f8d8 3000 	ldr.w	r3, [r8]
 8005846:	eba8 0303 	sub.w	r3, r8, r3
 800584a:	9302      	str	r3, [sp, #8]
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	9305      	str	r3, [sp, #20]
 8005850:	2b06      	cmp	r3, #6
 8005852:	d9c5      	bls.n	80057e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1e0>
 8005854:	9b02      	ldr	r3, [sp, #8]
 8005856:	88d9      	ldrh	r1, [r3, #6]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 8005858:	2200      	movs	r2, #0
    auto p = data_ + field_offset;
 800585a:	eb08 0601 	add.w	r6, r8, r1
    current->first_created = 0;
 800585e:	4610      	mov	r0, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005860:	b179      	cbz	r1, 8005882 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x282>
 8005862:	6833      	ldr	r3, [r6, #0]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 8005864:	58f7      	ldr	r7, [r6, r3]
 8005866:	42ba      	cmp	r2, r7
 8005868:	4433      	add	r3, r6
 800586a:	d25d      	bcs.n	8005928 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x328>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800586c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    AllocationInfo* current = &info_[tensor_index];
 8005870:	3201      	adds	r2, #1
 8005872:	685b      	ldr	r3, [r3, #4]
    current->first_created = 0;
 8005874:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005878:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800587c:	6098      	str	r0, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800587e:	2900      	cmp	r1, #0
 8005880:	d1ef      	bne.n	8005862 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x262>
  uoffset_t size() const { return EndianScalar(length_); }
 8005882:	680b      	ldr	r3, [r1, #0]
 8005884:	deff      	udf	#255	; 0xff
 8005886:	f04f 33ff 	mov.w	r3, #4294967295
 800588a:	f8ca 3010 	str.w	r3, [sl, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 800588e:	9b03      	ldr	r3, [sp, #12]
 8005890:	f109 0901 	add.w	r9, r9, #1
 8005894:	454b      	cmp	r3, r9
 8005896:	f107 070c 	add.w	r7, r7, #12
 800589a:	f10a 0a18 	add.w	sl, sl, #24
 800589e:	d0d0      	beq.n	8005842 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x242>
    current->output_ptr = &(eval_tensors[i].data.data);
 80058a0:	f8ca 7004 	str.w	r7, [sl, #4]
    TF_LITE_ENSURE_STATUS(
 80058a4:	4651      	mov	r1, sl
 80058a6:	4638      	mov	r0, r7
 80058a8:	f7fe ff9e 	bl	80047e8 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	d0b1      	beq.n	8005814 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x214>
 80058b0:	4606      	mov	r6, r0
}
 80058b2:	4630      	mov	r0, r6
 80058b4:	b019      	add	sp, #100	; 0x64
 80058b6:	ecbd 8b02 	vpop	{d8}
 80058ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return data_ - ReadScalar<soffset_t>(data_);
 80058be:	f8d8 3000 	ldr.w	r3, [r8]
 80058c2:	eba8 0303 	sub.w	r3, r8, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80058c6:	881a      	ldrh	r2, [r3, #0]
 80058c8:	2a04      	cmp	r2, #4
 80058ca:	d989      	bls.n	80057e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1e0>
 80058cc:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d086      	beq.n	80057e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1e0>
 80058d2:	f858 1003 	ldr.w	r1, [r8, r3]
    auto p = data_ + field_offset;
 80058d6:	4443      	add	r3, r8
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80058d8:	185a      	adds	r2, r3, r1
    FLATBUFFERS_ASSERT(i < size());
 80058da:	585b      	ldr	r3, [r3, r1]
 80058dc:	454b      	cmp	r3, r9
 80058de:	f240 81c6 	bls.w	8005c6e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x66e>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80058e2:	3204      	adds	r2, #4
    p += i * sizeof(uoffset_t);
 80058e4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80058e8:	f852 1029 	ldr.w	r1, [r2, r9, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 80058ec:	585a      	ldr	r2, [r3, r1]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80058ee:	440b      	add	r3, r1
    return data_ - ReadScalar<soffset_t>(data_);
 80058f0:	1a9a      	subs	r2, r3, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80058f2:	8811      	ldrh	r1, [r2, #0]
 80058f4:	290e      	cmp	r1, #14
 80058f6:	d908      	bls.n	800590a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x30a>
 80058f8:	89d2      	ldrh	r2, [r2, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80058fa:	b132      	cbz	r2, 800590a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x30a>
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 80058fc:	5c98      	ldrb	r0, [r3, r2]
 80058fe:	fab0 f080 	clz	r0, r0
 8005902:	0940      	lsrs	r0, r0, #5
 8005904:	e78d      	b.n	8005822 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x222>
 8005906:	2000      	movs	r0, #0
 8005908:	e6f4      	b.n	80056f4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0xf4>
 800590a:	2001      	movs	r0, #1
 800590c:	e789      	b.n	8005822 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x222>
    TF_LITE_REPORT_ERROR(
 800590e:	491e      	ldr	r1, [pc, #120]	; (8005988 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x388>)
 8005910:	68a8      	ldr	r0, [r5, #8]
 8005912:	ee18 2a90 	vmov	r2, s17
 8005916:	f7fd ffbd 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 800591a:	2601      	movs	r6, #1
 800591c:	e7c9      	b.n	80058b2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x2b2>
 800591e:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8005922:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8005926:	e760      	b.n	80057ea <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1ea>
 8005928:	9e05      	ldr	r6, [sp, #20]
 800592a:	2e08      	cmp	r6, #8
 800592c:	f67f af58 	bls.w	80057e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1e0>
 8005930:	9f02      	ldr	r7, [sp, #8]
 8005932:	8939      	ldrh	r1, [r7, #8]
    auto p = data_ + field_offset;
 8005934:	2200      	movs	r2, #0
 8005936:	eb08 0001 	add.w	r0, r8, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800593a:	2900      	cmp	r1, #0
 800593c:	d0a1      	beq.n	8005882 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x282>
 800593e:	6803      	ldr	r3, [r0, #0]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 8005940:	f850 c003 	ldr.w	ip, [r0, r3]
 8005944:	4562      	cmp	r2, ip
 8005946:	4403      	add	r3, r0
 8005948:	f4bf af05 	bcs.w	8005756 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x156>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800594c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005950:	2e0a      	cmp	r6, #10
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8005952:	685b      	ldr	r3, [r3, #4]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005954:	f67f af44 	bls.w	80057e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1e0>
 8005958:	f8b7 c00a 	ldrh.w	ip, [r7, #10]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800595c:	f1bc 0f00 	cmp.w	ip, #0
 8005960:	f43f af3e 	beq.w	80057e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1e0>
  uoffset_t size() const { return EndianScalar(length_); }
 8005964:	f858 e00c 	ldr.w	lr, [r8, ip]
    auto p = data_ + field_offset;
 8005968:	44c4      	add	ip, r8
    current->last_used = subgraph->operators()->size() - 1;
 800596a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800596e:	f85c c00e 	ldr.w	ip, [ip, lr]
 8005972:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8005976:	f10c 3cff 	add.w	ip, ip, #4294967295
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 800597a:	3201      	adds	r2, #1
    current->last_used = subgraph->operators()->size() - 1;
 800597c:	f8c3 c00c 	str.w	ip, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 8005980:	e7db      	b.n	800593a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x33a>
 8005982:	bf00      	nop
 8005984:	08016140 	.word	0x08016140
 8005988:	08015eac 	.word	0x08015eac
          TF_LITE_REPORT_ERROR(reporter_,
 800598c:	49ab      	ldr	r1, [pc, #684]	; (8005c3c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x63c>)
 800598e:	ee18 0a10 	vmov	r0, s16
 8005992:	f7fd ff7f 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          return kTfLiteError;
 8005996:	2601      	movs	r6, #1
}
 8005998:	4630      	mov	r0, r6
 800599a:	b019      	add	sp, #100	; 0x64
 800599c:	ecbd 8b02 	vpop	{d8}
 80059a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (size_t op_input = 0; op_input < op->inputs()->size(); ++op_input) {
 80059a4:	f1ba 0f00 	cmp.w	sl, #0
 80059a8:	f43f af10 	beq.w	80057cc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1cc>
 80059ac:	eb0e 0a8a 	add.w	sl, lr, sl, lsl #2
 80059b0:	9302      	str	r3, [sp, #8]
          AllocationInfo* op_current = &info_[op_tensor_index];
 80059b2:	f85e 2f04 	ldr.w	r2, [lr, #4]!
 80059b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80059ba:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
          if (op_current->needs_allocating && op_current->first_created == -1) {
 80059be:	f892 b014 	ldrb.w	fp, [r2, #20]
 80059c2:	f1bb 0f00 	cmp.w	fp, #0
 80059c6:	d003      	beq.n	80059d0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x3d0>
 80059c8:	6893      	ldr	r3, [r2, #8]
 80059ca:	3301      	adds	r3, #1
            op_current->first_created = i;
 80059cc:	bf08      	it	eq
 80059ce:	6090      	streq	r0, [r2, #8]
        for (size_t op_input = 0; op_input < op->inputs()->size(); ++op_input) {
 80059d0:	45f2      	cmp	sl, lr
 80059d2:	d1ee      	bne.n	80059b2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x3b2>
 80059d4:	9b02      	ldr	r3, [sp, #8]
 80059d6:	e6f9      	b.n	80057cc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1cc>
 80059d8:	2f08      	cmp	r7, #8
 80059da:	f67f af01 	bls.w	80057e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1e0>
 80059de:	f8bc 1008 	ldrh.w	r1, [ip, #8]
 80059e2:	2200      	movs	r2, #0
 80059e4:	440e      	add	r6, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80059e6:	2900      	cmp	r1, #0
 80059e8:	f43f af4b 	beq.w	8005882 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x282>
 80059ec:	6833      	ldr	r3, [r6, #0]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 80059ee:	58f7      	ldr	r7, [r6, r3]
 80059f0:	42ba      	cmp	r2, r7
 80059f2:	4433      	add	r3, r6
 80059f4:	d20f      	bcs.n	8005a16 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x416>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 80059f6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
      AllocationInfo* current = &info_[tensor_index];
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005a00:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
      if ((current->first_created == -1) || (current->first_created > i)) {
 8005a04:	689f      	ldr	r7, [r3, #8]
 8005a06:	f1b7 3fff 	cmp.w	r7, #4294967295
 8005a0a:	d001      	beq.n	8005a10 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x410>
 8005a0c:	4287      	cmp	r7, r0
 8005a0e:	dd00      	ble.n	8005a12 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x412>
        current->first_created = i;
 8005a10:	6098      	str	r0, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 8005a12:	3201      	adds	r2, #1
 8005a14:	e7e7      	b.n	80059e6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x3e6>
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 8005a16:	3801      	subs	r0, #1
 8005a18:	f4bf aeb2 	bcs.w	8005780 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x180>
  for (size_t i = 0; i < tensor_count_; ++i) {
 8005a1c:	9b03      	ldr	r3, [sp, #12]
 8005a1e:	b30b      	cbz	r3, 8005a64 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x464>
 8005a20:	2200      	movs	r2, #0
 8005a22:	461f      	mov	r7, r3
 8005a24:	4621      	mov	r1, r4
      current->needs_allocating = false;
 8005a26:	4616      	mov	r6, r2
 8005a28:	e006      	b.n	8005a38 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x438>
        ((current->first_created == -1) || (current->last_used == -1));
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	d00d      	beq.n	8005a4a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x44a>
  for (size_t i = 0; i < tensor_count_; ++i) {
 8005a2e:	3201      	adds	r2, #1
 8005a30:	4297      	cmp	r7, r2
 8005a32:	f101 0118 	add.w	r1, r1, #24
 8005a36:	d015      	beq.n	8005a64 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x464>
        (current->first_created == -1) && (current->last_used != -1);
 8005a38:	e9d1 3002 	ldrd	r3, r0, [r1, #8]
 8005a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a40:	d1f3      	bne.n	8005a2a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x42a>
 8005a42:	3001      	adds	r0, #1
 8005a44:	d001      	beq.n	8005a4a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x44a>
      current->needs_allocating = false;
 8005a46:	750e      	strb	r6, [r1, #20]
    const bool has_partial_lifetime =
 8005a48:	e7f1      	b.n	8005a2e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x42e>
    if (has_partial_lifetime && current->needs_allocating) {
 8005a4a:	7d08      	ldrb	r0, [r1, #20]
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	d0ee      	beq.n	8005a2e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x42e>
      TF_LITE_REPORT_ERROR(
 8005a50:	f04f 30ff 	mov.w	r0, #4294967295
 8005a54:	9000      	str	r0, [sp, #0]
 8005a56:	497a      	ldr	r1, [pc, #488]	; (8005c40 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x640>)
 8005a58:	ee18 0a10 	vmov	r0, s16
 8005a5c:	f7fd ff1a 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
 8005a60:	2601      	movs	r6, #1
 8005a62:	e726      	b.n	80058b2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x2b2>
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 8005a64:	6868      	ldr	r0, [r5, #4]
 8005a66:	f001 f805 	bl	8006a74 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 8005a6a:	2104      	movs	r1, #4
 8005a6c:	f7fe fe28 	bl	80046c0 <_ZN6tflite14AlignPointerUpEPhj>
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 8005a70:	9a03      	ldr	r2, [sp, #12]
 8005a72:	9b07      	ldr	r3, [sp, #28]
 8005a74:	4413      	add	r3, r2
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d221      	bcs.n	8005abe <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x4be>
 8005a7a:	9907      	ldr	r1, [sp, #28]
 8005a7c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8005a80:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005a82:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8005a86:	eb02 0681 	add.w	r6, r2, r1, lsl #2
 8005a8a:	4619      	mov	r1, r3
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 8005a8c:	604a      	str	r2, [r1, #4]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 8005a8e:	3204      	adds	r2, #4
 8005a90:	42b2      	cmp	r2, r6
 8005a92:	f101 0118 	add.w	r1, r1, #24
 8005a96:	d1f9      	bne.n	8005a8c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x48c>
 8005a98:	9907      	ldr	r1, [sp, #28]
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
    current->offline_offset = kOnlinePlannedBuffer;
 8005aa0:	f04f 36ff 	mov.w	r6, #4294967295
    current->needs_allocating = true;
 8005aa4:	2001      	movs	r0, #1
    current->bytes = current_request->bytes;
 8005aa6:	6811      	ldr	r1, [r2, #0]
 8005aa8:	6019      	str	r1, [r3, #0]
    current->first_created = current_request->node_idx;
 8005aaa:	6851      	ldr	r1, [r2, #4]
    current->offline_offset = kOnlinePlannedBuffer;
 8005aac:	611e      	str	r6, [r3, #16]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 8005aae:	3208      	adds	r2, #8
 8005ab0:	4297      	cmp	r7, r2
    current->last_used = current_request->node_idx;
 8005ab2:	e9c3 1102 	strd	r1, r1, [r3, #8]
    current->needs_allocating = true;
 8005ab6:	7518      	strb	r0, [r3, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 8005ab8:	f103 0318 	add.w	r3, r3, #24
 8005abc:	d1f3      	bne.n	8005aa6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x4a6>
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 8005abe:	2110      	movs	r1, #16
 8005ac0:	6868      	ldr	r0, [r5, #4]
 8005ac2:	f000 ffd9 	bl	8006a78 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 8005ac6:	4606      	mov	r6, r0
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
 8005ac8:	6868      	ldr	r0, [r5, #4]
 8005aca:	6803      	ldr	r3, [r0, #0]
 8005acc:	4631      	mov	r1, r6
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	2210      	movs	r2, #16
 8005ad2:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 8005ad4:	4601      	mov	r1, r0
 8005ad6:	2800      	cmp	r0, #0
 8005ad8:	f000 80a2 	beq.w	8005c20 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x620>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 8005adc:	4632      	mov	r2, r6
 8005ade:	a80d      	add	r0, sp, #52	; 0x34
 8005ae0:	f007 ffba 	bl	800da58 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8005ae4:	9e08      	ldr	r6, [sp, #32]
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
 8005ae6:	f8d5 a008 	ldr.w	sl, [r5, #8]
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8005aea:	2e00      	cmp	r6, #0
 8005aec:	f000 8086 	beq.w	8005bfc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x5fc>
 8005af0:	46a1      	mov	r9, r4
 8005af2:	4627      	mov	r7, r4
 8005af4:	f04f 0800 	mov.w	r8, #0
 8005af8:	e005      	b.n	8005b06 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x506>
 8005afa:	f108 0801 	add.w	r8, r8, #1
 8005afe:	4546      	cmp	r6, r8
 8005b00:	f107 0718 	add.w	r7, r7, #24
 8005b04:	d026      	beq.n	8005b54 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x554>
    if (current->needs_allocating) {
 8005b06:	7d3b      	ldrb	r3, [r7, #20]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0f6      	beq.n	8005afa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x4fa>
          AlignSizeUp(current->bytes, kBufferAlignment);
 8005b0c:	2110      	movs	r1, #16
 8005b0e:	6838      	ldr	r0, [r7, #0]
 8005b10:	f7fe fde4 	bl	80046dc <_ZN6tflite11AlignSizeUpEjj>
      if (current->offline_offset == kOnlinePlannedBuffer) {
 8005b14:	6939      	ldr	r1, [r7, #16]
        TF_LITE_ENSURE_STATUS(
 8005b16:	68bb      	ldr	r3, [r7, #8]
          AlignSizeUp(current->bytes, kBufferAlignment);
 8005b18:	4602      	mov	r2, r0
      if (current->offline_offset == kOnlinePlannedBuffer) {
 8005b1a:	1c48      	adds	r0, r1, #1
 8005b1c:	d10c      	bne.n	8005b38 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x538>
        TF_LITE_ENSURE_STATUS(
 8005b1e:	68f9      	ldr	r1, [r7, #12]
 8005b20:	9100      	str	r1, [sp, #0]
 8005b22:	a80d      	add	r0, sp, #52	; 0x34
 8005b24:	4651      	mov	r1, sl
 8005b26:	f007 ff73 	bl	800da10 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	d0e5      	beq.n	8005afa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x4fa>
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8005b2e:	4606      	mov	r6, r0
}
 8005b30:	a80d      	add	r0, sp, #52	; 0x34
 8005b32:	f007 ff61 	bl	800d9f8 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 8005b36:	e6bc      	b.n	80058b2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x2b2>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 8005b38:	9101      	str	r1, [sp, #4]
 8005b3a:	68f9      	ldr	r1, [r7, #12]
 8005b3c:	9100      	str	r1, [sp, #0]
 8005b3e:	a80d      	add	r0, sp, #52	; 0x34
 8005b40:	4651      	mov	r1, sl
 8005b42:	f007 ffab 	bl	800da9c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	d0d7      	beq.n	8005afa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x4fa>
 8005b4a:	e7f0      	b.n	8005b2e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x52e>
  const int32_t* offline_planner_offsets = nullptr;
 8005b4c:	46b3      	mov	fp, r6
 8005b4e:	e64c      	b.n	80057ea <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1ea>
 8005b50:	9b05      	ldr	r3, [sp, #20]
 8005b52:	e67d      	b.n	8005850 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x250>
  memory_allocator_->ResetTempAllocations();
 8005b54:	6868      	ldr	r0, [r5, #4]
 8005b56:	6803      	ldr	r3, [r0, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	4798      	blx	r3
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 8005b5c:	2110      	movs	r1, #16
 8005b5e:	6868      	ldr	r0, [r5, #4]
 8005b60:	f000 ff8a 	bl	8006a78 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 8005b64:	4606      	mov	r6, r0
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 8005b66:	a80d      	add	r0, sp, #52	; 0x34
 8005b68:	f008 f8fc 	bl	800dd64 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8005b6c:	42b0      	cmp	r0, r6
 8005b6e:	d832      	bhi.n	8005bd6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x5d6>
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 8005b70:	ee18 3a90 	vmov	r3, s17
 8005b74:	e9d5 0b01 	ldrd	r0, fp, [r5, #4]
 8005b78:	4423      	add	r3, r4
 8005b7a:	469a      	mov	sl, r3
 8005b7c:	f000 ff7a 	bl	8006a74 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 8005b80:	f04f 0800 	mov.w	r8, #0
 8005b84:	4607      	mov	r7, r0
      int offset = -1;
 8005b86:	f04f 34ff 	mov.w	r4, #4294967295
    if (current->needs_allocating) {
 8005b8a:	f899 3014 	ldrb.w	r3, [r9, #20]
 8005b8e:	b183      	cbz	r3, 8005bb2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x5b2>
      TF_LITE_ENSURE_STATUS(
 8005b90:	ab0c      	add	r3, sp, #48	; 0x30
 8005b92:	4642      	mov	r2, r8
 8005b94:	4659      	mov	r1, fp
 8005b96:	a80d      	add	r0, sp, #52	; 0x34
      int offset = -1;
 8005b98:	940c      	str	r4, [sp, #48]	; 0x30
      TF_LITE_ENSURE_STATUS(
 8005b9a:	f008 f907 	bl	800ddac <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>
 8005b9e:	4606      	mov	r6, r0
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	d1c5      	bne.n	8005b30 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x530>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 8005ba4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ba6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8005baa:	443b      	add	r3, r7
      ++planner_index;
 8005bac:	f108 0801 	add.w	r8, r8, #1
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 8005bb0:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8005bb2:	f109 0918 	add.w	r9, r9, #24
 8005bb6:	45d1      	cmp	r9, sl
 8005bb8:	d1e7      	bne.n	8005b8a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x58a>
  head_usage = planner.GetMaximumMemorySize();
 8005bba:	a80d      	add	r0, sp, #52	; 0x34
 8005bbc:	f008 f8d2 	bl	800dd64 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
  if (max_head_buffer_usage_ < head_usage) {
 8005bc0:	6969      	ldr	r1, [r5, #20]
 8005bc2:	4281      	cmp	r1, r0
 8005bc4:	d201      	bcs.n	8005bca <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x5ca>
    max_head_buffer_usage_ = head_usage;
 8005bc6:	6168      	str	r0, [r5, #20]
 8005bc8:	4601      	mov	r1, r0
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8005bca:	6868      	ldr	r0, [r5, #4]
 8005bcc:	6803      	ldr	r3, [r0, #0]
 8005bce:	2210      	movs	r2, #16
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	4798      	blx	r3
 8005bd4:	e7ab      	b.n	8005b2e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x52e>
    TF_LITE_REPORT_ERROR(
 8005bd6:	a80d      	add	r0, sp, #52	; 0x34
 8005bd8:	68ac      	ldr	r4, [r5, #8]
 8005bda:	f008 f8c3 	bl	800dd64 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8005bde:	4633      	mov	r3, r6
 8005be0:	4602      	mov	r2, r0
 8005be2:	4918      	ldr	r1, [pc, #96]	; (8005c44 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x644>)
 8005be4:	4620      	mov	r0, r4
 8005be6:	f7fd fe55 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 8005bea:	2601      	movs	r6, #1
 8005bec:	e7a0      	b.n	8005b30 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x530>
    FLATBUFFERS_ASSERT(i < size());
 8005bee:	4b16      	ldr	r3, [pc, #88]	; (8005c48 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x648>)
 8005bf0:	4a16      	ldr	r2, [pc, #88]	; (8005c4c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x64c>)
 8005bf2:	4817      	ldr	r0, [pc, #92]	; (8005c50 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x650>)
 8005bf4:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005bf8:	f00b facc 	bl	8011194 <__assert_func>
  memory_allocator_->ResetTempAllocations();
 8005bfc:	6868      	ldr	r0, [r5, #4]
 8005bfe:	6803      	ldr	r3, [r0, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	4798      	blx	r3
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 8005c04:	2110      	movs	r1, #16
 8005c06:	6868      	ldr	r0, [r5, #4]
 8005c08:	f000 ff36 	bl	8006a78 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 8005c0c:	4606      	mov	r6, r0
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 8005c0e:	a80d      	add	r0, sp, #52	; 0x34
 8005c10:	f008 f8a8 	bl	800dd64 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8005c14:	42b0      	cmp	r0, r6
 8005c16:	d8de      	bhi.n	8005bd6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x5d6>
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 8005c18:	6868      	ldr	r0, [r5, #4]
 8005c1a:	f000 ff2b 	bl	8006a74 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8005c1e:	e7cc      	b.n	8005bba <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x5ba>
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 8005c20:	68a9      	ldr	r1, [r5, #8]
 8005c22:	4c0c      	ldr	r4, [pc, #48]	; (8005c54 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x654>)
 8005c24:	4b0c      	ldr	r3, [pc, #48]	; (8005c58 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x658>)
 8005c26:	4a0d      	ldr	r2, [pc, #52]	; (8005c5c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x65c>)
 8005c28:	f240 4044 	movw	r0, #1092	; 0x444
 8005c2c:	e9cd 0400 	strd	r0, r4, [sp]
 8005c30:	4608      	mov	r0, r1
 8005c32:	f7fd fe3f 	bl	80038b4 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8005c36:	2601      	movs	r6, #1
 8005c38:	e63b      	b.n	80058b2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x2b2>
 8005c3a:	bf00      	nop
 8005c3c:	08015ef0 	.word	0x08015ef0
 8005c40:	08016038 	.word	0x08016038
 8005c44:	080160ec 	.word	0x080160ec
 8005c48:	08015960 	.word	0x08015960
 8005c4c:	08015f3c 	.word	0x08015f3c
 8005c50:	08015a64 	.word	0x08015a64
 8005c54:	080160d0 	.word	0x080160d0
 8005c58:	0801609c 	.word	0x0801609c
 8005c5c:	08015618 	.word	0x08015618
 8005c60:	4b09      	ldr	r3, [pc, #36]	; (8005c88 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x688>)
 8005c62:	4a0a      	ldr	r2, [pc, #40]	; (8005c8c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x68c>)
 8005c64:	480a      	ldr	r0, [pc, #40]	; (8005c90 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x690>)
 8005c66:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005c6a:	f00b fa93 	bl	8011194 <__assert_func>
 8005c6e:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x688>)
 8005c70:	4a08      	ldr	r2, [pc, #32]	; (8005c94 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x694>)
 8005c72:	4807      	ldr	r0, [pc, #28]	; (8005c90 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x690>)
 8005c74:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005c78:	f00b fa8c 	bl	8011194 <__assert_func>
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	deff      	udf	#255	; 0xff
  TFLITE_DCHECK(eval_tensors != nullptr);
 8005c82:	f00b fa7f 	bl	8011184 <abort>
 8005c86:	bf00      	nop
 8005c88:	08015960 	.word	0x08015960
 8005c8c:	0801596c 	.word	0x0801596c
 8005c90:	08015a64 	.word	0x08015a64
 8005c94:	08015af0 	.word	0x08015af0

08005c98 <_ZN6tflite18MicroErrorReporterD1Ev>:

namespace tflite {

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop

08005c9c <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
#include "tensorflow/lite/micro/micro_string.h"
#endif

namespace tflite {

int MicroErrorReporter::Report(const char* format, va_list args) {
 8005c9c:	b500      	push	{lr}
 8005c9e:	b0c1      	sub	sp, #260	; 0x104
 8005ca0:	4613      	mov	r3, r2
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 8005ca2:	4668      	mov	r0, sp
 8005ca4:	460a      	mov	r2, r1
 8005ca6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005caa:	f000 fb8d 	bl	80063c8 <MicroVsnprintf>
  DebugLog(log_buffer);
 8005cae:	4668      	mov	r0, sp
 8005cb0:	f000 fef0 	bl	8006a94 <DebugLog>
  DebugLog("\r\n");
 8005cb4:	4803      	ldr	r0, [pc, #12]	; (8005cc4 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x28>)
 8005cb6:	f000 feed 	bl	8006a94 <DebugLog>
#endif
  return 0;
}
 8005cba:	2000      	movs	r0, #0
 8005cbc:	b041      	add	sp, #260	; 0x104
 8005cbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8005cc2:	bf00      	nop
 8005cc4:	080142c0 	.word	0x080142c0

08005cc8 <_ZN6tflite18MicroErrorReporterD0Ev>:
 8005cc8:	b510      	push	{r4, lr}
 8005cca:	2104      	movs	r1, #4
 8005ccc:	4604      	mov	r4, r0
 8005cce:	f00a ff7d 	bl	8010bcc <_ZdlPvj>
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	bd10      	pop	{r4, pc}
 8005cd6:	bf00      	nop

08005cd8 <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextj>:
    : allocator_(allocator), error_reporter_(error_reporter), model_(model) {}

void* ContextHelper::AllocatePersistentBuffer(TfLiteContext* ctx,
                                              size_t bytes) {
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
      ->allocator_->AllocatePersistentBuffer(bytes);
 8005cd8:	68c3      	ldr	r3, [r0, #12]
 8005cda:	6818      	ldr	r0, [r3, #0]
 8005cdc:	6803      	ldr	r3, [r0, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	4718      	bx	r3
 8005ce2:	bf00      	nop

08005ce4 <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti>:
  return helper->allocator_->RequestScratchBufferInArena(bytes, buffer_idx);
}

void* ContextHelper::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
  ScratchBufferHandle* handle = helper->scratch_buffer_handles_ + buffer_idx;
 8005ce4:	68c3      	ldr	r3, [r0, #12]
  return handle->data;
 8005ce6:	691b      	ldr	r3, [r3, #16]
}
 8005ce8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop

08005cf0 <_ZN6tflite8internal13ContextHelper9GetTensorEPK13TfLiteContexti>:
  va_end(args);
#endif
}

TfLiteTensor* ContextHelper::GetTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 8005cf0:	b410      	push	{r4}
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
 8005cf2:	68c4      	ldr	r4, [r0, #12]
  return helper->allocator_->AllocateTempTfLiteTensor(
 8005cf4:	6820      	ldr	r0, [r4, #0]
                                       int tensor_idx) {
 8005cf6:	460b      	mov	r3, r1
  return helper->allocator_->AllocateTempTfLiteTensor(
 8005cf8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8005cfc:	6804      	ldr	r4, [r0, #0]
 8005cfe:	6864      	ldr	r4, [r4, #4]
 8005d00:	46a4      	mov	ip, r4
      helper->model_, helper->eval_tensors_, tensor_idx);
}
 8005d02:	f85d 4b04 	ldr.w	r4, [sp], #4
  return helper->allocator_->AllocateTempTfLiteTensor(
 8005d06:	4760      	bx	ip

08005d08 <_ZN6tflite8internal13ContextHelper13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* ContextHelper::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(context->impl_);
  return &helper->eval_tensors_[tensor_idx];
 8005d08:	68c3      	ldr	r3, [r0, #12]
 8005d0a:	68d8      	ldr	r0, [r3, #12]
 8005d0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
 8005d10:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop

08005d18 <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
  return helper->allocator_->RequestScratchBufferInArena(bytes, buffer_idx);
 8005d18:	68c3      	ldr	r3, [r0, #12]
 8005d1a:	6818      	ldr	r0, [r3, #0]
 8005d1c:	f7ff bc14 	b.w	8005548 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi>

08005d20 <_ZN6tflite8internal13ContextHelper13ReportOpErrorEP13TfLiteContextPKcz>:
                                  const char* format, ...) {
 8005d20:	b40e      	push	{r1, r2, r3}
 8005d22:	b500      	push	{lr}
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
 8005d24:	68c3      	ldr	r3, [r0, #12]
                                  const char* format, ...) {
 8005d26:	b082      	sub	sp, #8
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
 8005d28:	6858      	ldr	r0, [r3, #4]
                                  const char* format, ...) {
 8005d2a:	aa03      	add	r2, sp, #12
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
 8005d2c:	6803      	ldr	r3, [r0, #0]
                                  const char* format, ...) {
 8005d2e:	f852 1b04 	ldr.w	r1, [r2], #4
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
 8005d32:	689b      	ldr	r3, [r3, #8]
  va_start(args, format);
 8005d34:	9201      	str	r2, [sp, #4]
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
 8005d36:	4798      	blx	r3
}
 8005d38:	b002      	add	sp, #8
 8005d3a:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d3e:	b003      	add	sp, #12
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop

08005d44 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>:
  scratch_buffer_handles_ = scratch_buffer_handles;
}

}  // namespace internal

MicroInterpreter::MicroInterpreter(const Model* model,
 8005d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d48:	f8dd 801c 	ldr.w	r8, [sp, #28]
                                   uint8_t* tensor_arena,
                                   size_t tensor_arena_size,
                                   ErrorReporter* error_reporter,
                                   tflite::Profiler* profiler)
    : model_(model),
      op_resolver_(op_resolver),
 8005d4c:	6082      	str	r2, [r0, #8]
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      eval_tensors_(nullptr),
      context_helper_(error_reporter_, &allocator_, model),
      input_tensor_(nullptr),
      output_tensor_(nullptr) {
 8005d4e:	2500      	movs	r5, #0
MicroInterpreter::MicroInterpreter(const Model* model,
 8005d50:	4604      	mov	r4, r0
 8005d52:	461f      	mov	r7, r3
    : model_(model),
 8005d54:	6041      	str	r1, [r0, #4]
MicroInterpreter::MicroInterpreter(const Model* model,
 8005d56:	460e      	mov	r6, r1
      error_reporter_(error_reporter),
 8005d58:	f8c0 800c 	str.w	r8, [r0, #12]
      output_tensor_(nullptr) {
 8005d5c:	2258      	movs	r2, #88	; 0x58
 8005d5e:	6005      	str	r5, [r0, #0]
 8005d60:	4629      	mov	r1, r5
 8005d62:	3010      	adds	r0, #16
 8005d64:	f00c f984 	bl	8012070 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 8005d68:	9906      	ldr	r1, [sp, #24]
 8005d6a:	4642      	mov	r2, r8
 8005d6c:	4638      	mov	r0, r7
 8005d6e:	f7ff fb29 	bl	80053c4 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
      tensors_allocated_(false),
 8005d72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d76:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
  }
}

void MicroInterpreter::Init(tflite::Profiler* profiler) {
  const flatbuffers::Vector<flatbuffers::Offset<SubGraph>>* subgraphs =
      model_->subgraphs();
 8005d7a:	6863      	ldr	r3, [r4, #4]
      context_helper_(error_reporter_, &allocator_, model),
 8005d7c:	68e7      	ldr	r7, [r4, #12]
    return data_ - ReadScalar<soffset_t>(data_);
 8005d7e:	681a      	ldr	r2, [r3, #0]
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 8005d80:	66a0      	str	r0, [r4, #104]	; 0x68
 8005d82:	1a9a      	subs	r2, r3, r2
      eval_tensors_(nullptr),
 8005d84:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005d88:	8811      	ldrh	r1, [r2, #0]
 8005d8a:	2908      	cmp	r1, #8
    : allocator_(allocator), error_reporter_(error_reporter), model_(model) {}
 8005d8c:	e9c4 501e 	strd	r5, r0, [r4, #120]	; 0x78
 8005d90:	e9c4 7620 	strd	r7, r6, [r4, #128]	; 0x80
 8005d94:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
      output_tensor_(nullptr) {
 8005d98:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
 8005d9c:	d926      	bls.n	8005dec <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE+0xa8>
 8005d9e:	8912      	ldrh	r2, [r2, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005da0:	b322      	cbz	r2, 8005dec <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE+0xa8>
 8005da2:	5899      	ldr	r1, [r3, r2]
    auto p = data_ + field_offset;
 8005da4:	4413      	add	r3, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005da6:	185a      	adds	r2, r3, r1
  if (subgraphs->size() != 1) {
 8005da8:	5859      	ldr	r1, [r3, r1]
 8005daa:	2901      	cmp	r1, #1
 8005dac:	d009      	beq.n	8005dc2 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE+0x7e>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8005dae:	4911      	ldr	r1, [pc, #68]	; (8005df4 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE+0xb0>)
 8005db0:	4638      	mov	r0, r7
 8005db2:	2501      	movs	r5, #1
 8005db4:	f7fd fd6e 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    initialization_status_ = kTfLiteError;
 8005db8:	f884 506d 	strb.w	r5, [r4, #109]	; 0x6d
}
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8005dc2:	1d13      	adds	r3, r2, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8005dc4:	6852      	ldr	r2, [r2, #4]

  context_.impl_ = static_cast<void*>(&context_helper_);
  context_.ReportError = context_helper_.ReportOpError;
  context_.GetTensor = context_helper_.GetTensor;
  context_.GetEvalTensor = context_helper_.GetEvalTensor;
  context_.recommended_num_threads = 1;
 8005dc6:	6361      	str	r1, [r4, #52]	; 0x34
 8005dc8:	4413      	add	r3, r2
  subgraph_ = (*subgraphs)[0];
 8005dca:	6723      	str	r3, [r4, #112]	; 0x70
  context_.GetTensor = context_helper_.GetTensor;
 8005dcc:	4a0a      	ldr	r2, [pc, #40]	; (8005df8 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE+0xb4>)
  context_.GetEvalTensor = context_helper_.GetEvalTensor;
 8005dce:	4b0b      	ldr	r3, [pc, #44]	; (8005dfc <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE+0xb8>)
  context_.ReportError = context_helper_.ReportOpError;
 8005dd0:	490b      	ldr	r1, [pc, #44]	; (8005e00 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE+0xbc>)
 8005dd2:	6261      	str	r1, [r4, #36]	; 0x24
  context_.impl_ = static_cast<void*>(&context_helper_);
 8005dd4:	f104 007c 	add.w	r0, r4, #124	; 0x7c
  context_.GetEvalTensor = context_helper_.GetEvalTensor;
 8005dd8:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60
  context_.profiler = profiler;
 8005ddc:	9b08      	ldr	r3, [sp, #32]
  context_.impl_ = static_cast<void*>(&context_helper_);
 8005dde:	61e0      	str	r0, [r4, #28]
  context_.profiler = profiler;
 8005de0:	6463      	str	r3, [r4, #68]	; 0x44
    initialization_status_ = kTfLiteError;
 8005de2:	f884 506d 	strb.w	r5, [r4, #109]	; 0x6d
}
 8005de6:	4620      	mov	r0, r4
 8005de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uoffset_t size() const { return EndianScalar(length_); }
 8005dec:	2300      	movs	r3, #0
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	deff      	udf	#255	; 0xff
 8005df2:	bf00      	nop
 8005df4:	08015814 	.word	0x08015814
 8005df8:	08005cf1 	.word	0x08005cf1
 8005dfc:	08005d09 	.word	0x08005d09
 8005e00:	08005d21 	.word	0x08005d21

08005e04 <_ZN6tflite16MicroInterpreterD1Ev>:
  if (node_and_registrations_ != nullptr) {
 8005e04:	6803      	ldr	r3, [r0, #0]
MicroInterpreter::~MicroInterpreter() {
 8005e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0a:	4605      	mov	r5, r0
  if (node_and_registrations_ != nullptr) {
 8005e0c:	b303      	cbz	r3, 8005e50 <_ZN6tflite16MicroInterpreterD1Ev+0x4c>
 8005e0e:	2400      	movs	r4, #0
 8005e10:	6f02      	ldr	r2, [r0, #112]	; 0x70
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8005e12:	4626      	mov	r6, r4
        registration->free(&context_, node->user_data);
 8005e14:	f100 0710 	add.w	r7, r0, #16
 8005e18:	e00e      	b.n	8005e38 <_ZN6tflite16MicroInterpreterD1Ev+0x34>
      TfLiteNode* node = &(node_and_registrations_[i].node);
 8005e1a:	682b      	ldr	r3, [r5, #0]
 8005e1c:	4423      	add	r3, r4
      const TfLiteRegistration* registration =
 8005e1e:	6a59      	ldr	r1, [r3, #36]	; 0x24
      if (registration != nullptr && registration->free != nullptr) {
 8005e20:	b141      	cbz	r1, 8005e34 <_ZN6tflite16MicroInterpreterD1Ev+0x30>
 8005e22:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8005e26:	f1b8 0f00 	cmp.w	r8, #0
 8005e2a:	d003      	beq.n	8005e34 <_ZN6tflite16MicroInterpreterD1Ev+0x30>
        registration->free(&context_, node->user_data);
 8005e2c:	6919      	ldr	r1, [r3, #16]
 8005e2e:	4638      	mov	r0, r7
 8005e30:	47c0      	blx	r8
 8005e32:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8005e34:	3601      	adds	r6, #1
 8005e36:	3428      	adds	r4, #40	; 0x28
    return data_ - ReadScalar<soffset_t>(data_);
 8005e38:	6813      	ldr	r3, [r2, #0]
 8005e3a:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005e3c:	8819      	ldrh	r1, [r3, #0]
 8005e3e:	290a      	cmp	r1, #10
 8005e40:	d909      	bls.n	8005e56 <_ZN6tflite16MicroInterpreterD1Ev+0x52>
 8005e42:	895b      	ldrh	r3, [r3, #10]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005e44:	b13b      	cbz	r3, 8005e56 <_ZN6tflite16MicroInterpreterD1Ev+0x52>
  uoffset_t size() const { return EndianScalar(length_); }
 8005e46:	58d1      	ldr	r1, [r2, r3]
    auto p = data_ + field_offset;
 8005e48:	4413      	add	r3, r2
 8005e4a:	585b      	ldr	r3, [r3, r1]
 8005e4c:	429e      	cmp	r6, r3
 8005e4e:	d3e4      	bcc.n	8005e1a <_ZN6tflite16MicroInterpreterD1Ev+0x16>
}
 8005e50:	4628      	mov	r0, r5
 8005e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uoffset_t size() const { return EndianScalar(length_); }
 8005e56:	2300      	movs	r3, #0
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	deff      	udf	#255	; 0xff

08005e5c <_ZN6tflite16MicroInterpreter5inputEj>:
    }
    return nullptr;
  }

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const { return subgraph_->inputs()->Length(); }
 8005e5c:	6f02      	ldr	r2, [r0, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
 8005e5e:	6813      	ldr	r3, [r2, #0]
 8005e60:	1ad3      	subs	r3, r2, r3
    }
  }
  return kTfLiteOk;
}

TfLiteTensor* MicroInterpreter::input(size_t index) {
 8005e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e66:	460d      	mov	r5, r1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005e68:	8819      	ldrh	r1, [r3, #0]
 8005e6a:	2906      	cmp	r1, #6
 8005e6c:	d949      	bls.n	8005f02 <_ZN6tflite16MicroInterpreter5inputEj+0xa6>
 8005e6e:	88db      	ldrh	r3, [r3, #6]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d046      	beq.n	8005f02 <_ZN6tflite16MicroInterpreter5inputEj+0xa6>
    auto p = data_ + field_offset;
 8005e74:	18d1      	adds	r1, r2, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005e76:	58d3      	ldr	r3, [r2, r3]
 8005e78:	18ce      	adds	r6, r1, r3
  uoffset_t size() const { return EndianScalar(length_); }
 8005e7a:	58cb      	ldr	r3, [r1, r3]
  const size_t length = inputs_size();
  if (index >= length) {
 8005e7c:	429d      	cmp	r5, r3
 8005e7e:	4604      	mov	r4, r0
 8005e80:	d231      	bcs.n	8005ee6 <_ZN6tflite16MicroInterpreter5inputEj+0x8a>
    TF_LITE_REPORT_ERROR(error_reporter_,
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
  }
  if (index != 0) {
 8005e82:	b925      	cbnz	r5, 8005e8e <_ZN6tflite16MicroInterpreter5inputEj+0x32>
        "persistent memory arena. Repeat calls will cause excess "
        "allocation!");
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
                                                     inputs().Get(index));
  }
  if (input_tensor_ == nullptr) {
 8005e84:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
 8005e88:	b308      	cbz	r0, 8005ece <_ZN6tflite16MicroInterpreter5inputEj+0x72>
    input_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
        model_, eval_tensors_, inputs().Get(index));
  }
  return input_tensor_;
}
 8005e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TF_LITE_REPORT_ERROR(
 8005e8e:	491e      	ldr	r1, [pc, #120]	; (8005f08 <_ZN6tflite16MicroInterpreter5inputEj+0xac>)
 8005e90:	68c0      	ldr	r0, [r0, #12]
 8005e92:	f7fd fcff 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 8005e96:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005e98:	6861      	ldr	r1, [r4, #4]
 8005e9a:	6803      	ldr	r3, [r0, #0]
 8005e9c:	681e      	ldr	r6, [r3, #0]
 8005e9e:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
 8005ea2:	681c      	ldr	r4, [r3, #0]
 8005ea4:	1b1c      	subs	r4, r3, r4
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005ea6:	f8b4 c000 	ldrh.w	ip, [r4]
 8005eaa:	f1bc 0f06 	cmp.w	ip, #6
 8005eae:	d928      	bls.n	8005f02 <_ZN6tflite16MicroInterpreter5inputEj+0xa6>
 8005eb0:	88e4      	ldrh	r4, [r4, #6]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005eb2:	b334      	cbz	r4, 8005f02 <_ZN6tflite16MicroInterpreter5inputEj+0xa6>
 8005eb4:	591f      	ldr	r7, [r3, r4]
    auto p = data_ + field_offset;
 8005eb6:	4423      	add	r3, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005eb8:	19dc      	adds	r4, r3, r7
    FLATBUFFERS_ASSERT(i < size());
 8005eba:	59db      	ldr	r3, [r3, r7]
 8005ebc:	429d      	cmp	r5, r3
 8005ebe:	d219      	bcs.n	8005ef4 <_ZN6tflite16MicroInterpreter5inputEj+0x98>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8005ec0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ec4:	46b4      	mov	ip, r6
 8005ec6:	685b      	ldr	r3, [r3, #4]
}
 8005ec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 8005ecc:	4760      	bx	ip
    input_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 8005ece:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005ed0:	6861      	ldr	r1, [r4, #4]
 8005ed2:	6802      	ldr	r2, [r0, #0]
 8005ed4:	6815      	ldr	r5, [r2, #0]
 8005ed6:	6f62      	ldr	r2, [r4, #116]	; 0x74
    FLATBUFFERS_ASSERT(i < size());
 8005ed8:	b163      	cbz	r3, 8005ef4 <_ZN6tflite16MicroInterpreter5inputEj+0x98>
 8005eda:	6873      	ldr	r3, [r6, #4]
 8005edc:	47a8      	blx	r5
 8005ede:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
}
 8005ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
 8005ee6:	4909      	ldr	r1, [pc, #36]	; (8005f0c <_ZN6tflite16MicroInterpreter5inputEj+0xb0>)
 8005ee8:	68c0      	ldr	r0, [r0, #12]
 8005eea:	462a      	mov	r2, r5
 8005eec:	f7fd fcd2 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	e7ca      	b.n	8005e8a <_ZN6tflite16MicroInterpreter5inputEj+0x2e>
 8005ef4:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <_ZN6tflite16MicroInterpreter5inputEj+0xb4>)
 8005ef6:	4a07      	ldr	r2, [pc, #28]	; (8005f14 <_ZN6tflite16MicroInterpreter5inputEj+0xb8>)
 8005ef8:	4807      	ldr	r0, [pc, #28]	; (8005f18 <_ZN6tflite16MicroInterpreter5inputEj+0xbc>)
 8005efa:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005efe:	f00b f949 	bl	8011194 <__assert_func>
  uoffset_t size() const { return EndianScalar(length_); }
 8005f02:	2300      	movs	r3, #0
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	deff      	udf	#255	; 0xff
 8005f08:	080161f0 	.word	0x080161f0
 8005f0c:	080161c4 	.word	0x080161c4
 8005f10:	08015960 	.word	0x08015960
 8005f14:	08016268 	.word	0x08016268
 8005f18:	08015a64 	.word	0x08015a64

08005f1c <_ZN6tflite16MicroInterpreter6outputEj>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const { return subgraph_->outputs()->Length(); }
 8005f1c:	6f02      	ldr	r2, [r0, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
 8005f1e:	6813      	ldr	r3, [r2, #0]
 8005f20:	1ad3      	subs	r3, r2, r3

TfLiteTensor* MicroInterpreter::output(size_t index) {
 8005f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f26:	460d      	mov	r5, r1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005f28:	8819      	ldrh	r1, [r3, #0]
 8005f2a:	2908      	cmp	r1, #8
 8005f2c:	d949      	bls.n	8005fc2 <_ZN6tflite16MicroInterpreter6outputEj+0xa6>
 8005f2e:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d046      	beq.n	8005fc2 <_ZN6tflite16MicroInterpreter6outputEj+0xa6>
    auto p = data_ + field_offset;
 8005f34:	18d1      	adds	r1, r2, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005f36:	58d3      	ldr	r3, [r2, r3]
 8005f38:	18ce      	adds	r6, r1, r3
  uoffset_t size() const { return EndianScalar(length_); }
 8005f3a:	58cb      	ldr	r3, [r1, r3]
  const size_t length = outputs_size();
  if (index >= length) {
 8005f3c:	429d      	cmp	r5, r3
 8005f3e:	4604      	mov	r4, r0
 8005f40:	d231      	bcs.n	8005fa6 <_ZN6tflite16MicroInterpreter6outputEj+0x8a>
    TF_LITE_REPORT_ERROR(error_reporter_,
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
  }
  if (index != 0) {
 8005f42:	b925      	cbnz	r5, 8005f4e <_ZN6tflite16MicroInterpreter6outputEj+0x32>
        "persistent memory arena. Repeat calls will cause excess "
        "allocation!");
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
                                                     outputs().Get(index));
  }
  if (output_tensor_ == nullptr) {
 8005f44:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 8005f48:	b308      	cbz	r0, 8005f8e <_ZN6tflite16MicroInterpreter6outputEj+0x72>
    // handling buffers from TfLiteEvalTensor.
    output_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
        model_, eval_tensors_, outputs().Get(index));
  }
  return output_tensor_;
}
 8005f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TF_LITE_REPORT_ERROR(
 8005f4e:	491e      	ldr	r1, [pc, #120]	; (8005fc8 <_ZN6tflite16MicroInterpreter6outputEj+0xac>)
 8005f50:	68c0      	ldr	r0, [r0, #12]
 8005f52:	f7fd fc9f 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 8005f56:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005f58:	6861      	ldr	r1, [r4, #4]
 8005f5a:	6803      	ldr	r3, [r0, #0]
 8005f5c:	681e      	ldr	r6, [r3, #0]
 8005f5e:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
 8005f62:	681c      	ldr	r4, [r3, #0]
 8005f64:	1b1c      	subs	r4, r3, r4
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005f66:	f8b4 c000 	ldrh.w	ip, [r4]
 8005f6a:	f1bc 0f08 	cmp.w	ip, #8
 8005f6e:	d928      	bls.n	8005fc2 <_ZN6tflite16MicroInterpreter6outputEj+0xa6>
 8005f70:	8924      	ldrh	r4, [r4, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005f72:	b334      	cbz	r4, 8005fc2 <_ZN6tflite16MicroInterpreter6outputEj+0xa6>
 8005f74:	591f      	ldr	r7, [r3, r4]
    auto p = data_ + field_offset;
 8005f76:	4423      	add	r3, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005f78:	19dc      	adds	r4, r3, r7
    FLATBUFFERS_ASSERT(i < size());
 8005f7a:	59db      	ldr	r3, [r3, r7]
 8005f7c:	429d      	cmp	r5, r3
 8005f7e:	d219      	bcs.n	8005fb4 <_ZN6tflite16MicroInterpreter6outputEj+0x98>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8005f80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005f84:	46b4      	mov	ip, r6
 8005f86:	685b      	ldr	r3, [r3, #4]
}
 8005f88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 8005f8c:	4760      	bx	ip
    output_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 8005f8e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005f90:	6861      	ldr	r1, [r4, #4]
 8005f92:	6802      	ldr	r2, [r0, #0]
 8005f94:	6815      	ldr	r5, [r2, #0]
 8005f96:	6f62      	ldr	r2, [r4, #116]	; 0x74
    FLATBUFFERS_ASSERT(i < size());
 8005f98:	b163      	cbz	r3, 8005fb4 <_ZN6tflite16MicroInterpreter6outputEj+0x98>
 8005f9a:	6873      	ldr	r3, [r6, #4]
 8005f9c:	47a8      	blx	r5
 8005f9e:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
}
 8005fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
 8005fa6:	4909      	ldr	r1, [pc, #36]	; (8005fcc <_ZN6tflite16MicroInterpreter6outputEj+0xb0>)
 8005fa8:	68c0      	ldr	r0, [r0, #12]
 8005faa:	462a      	mov	r2, r5
 8005fac:	f7fd fc72 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	e7ca      	b.n	8005f4a <_ZN6tflite16MicroInterpreter6outputEj+0x2e>
 8005fb4:	4b06      	ldr	r3, [pc, #24]	; (8005fd0 <_ZN6tflite16MicroInterpreter6outputEj+0xb4>)
 8005fb6:	4a07      	ldr	r2, [pc, #28]	; (8005fd4 <_ZN6tflite16MicroInterpreter6outputEj+0xb8>)
 8005fb8:	4807      	ldr	r0, [pc, #28]	; (8005fd8 <_ZN6tflite16MicroInterpreter6outputEj+0xbc>)
 8005fba:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005fbe:	f00b f8e9 	bl	8011194 <__assert_func>
  uoffset_t size() const { return EndianScalar(length_); }
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	deff      	udf	#255	; 0xff
 8005fc8:	08016364 	.word	0x08016364
 8005fcc:	08016338 	.word	0x08016338
 8005fd0:	08015960 	.word	0x08015960
 8005fd4:	08016268 	.word	0x08016268
 8005fd8:	08015a64 	.word	0x08015a64

08005fdc <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:
  }
  return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
                                                   index);
}

TfLiteStatus MicroInterpreter::ResetVariableTensors() {
 8005fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  for (size_t i = 0; i < subgraph_->tensors()->size(); ++i) {
 8005fe0:	2500      	movs	r5, #0
 8005fe2:	6f01      	ldr	r1, [r0, #112]	; 0x70
TfLiteStatus MicroInterpreter::ResetVariableTensors() {
 8005fe4:	b083      	sub	sp, #12
 8005fe6:	4606      	mov	r6, r0
  for (size_t i = 0; i < subgraph_->tensors()->size(); ++i) {
 8005fe8:	462c      	mov	r4, r5
 8005fea:	e01c      	b.n	8006026 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x4a>
 8005fec:	889a      	ldrh	r2, [r3, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005fee:	b312      	cbz	r2, 8006036 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x5a>
 8005ff0:	5888      	ldr	r0, [r1, r2]
    auto p = data_ + field_offset;
 8005ff2:	440a      	add	r2, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005ff4:	1813      	adds	r3, r2, r0
 8005ff6:	5812      	ldr	r2, [r2, r0]
 8005ff8:	4294      	cmp	r4, r2
 8005ffa:	d239      	bcs.n	8006070 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x94>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8005ffc:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
 8005ffe:	eb03 0884 	add.w	r8, r3, r4, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8006002:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 8006006:	f858 3007 	ldr.w	r3, [r8, r7]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800600a:	eb08 0907 	add.w	r9, r8, r7
    return data_ - ReadScalar<soffset_t>(data_);
 800600e:	eba9 0303 	sub.w	r3, r9, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8006012:	881a      	ldrh	r2, [r3, #0]
 8006014:	2a0e      	cmp	r2, #14
 8006016:	d904      	bls.n	8006022 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x46>
 8006018:	89db      	ldrh	r3, [r3, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800601a:	b113      	cbz	r3, 8006022 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x46>
    auto* tensor = subgraph_->tensors()->Get(i);
    if (tensor->is_variable()) {
 800601c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006020:	b95b      	cbnz	r3, 800603a <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x5e>
  for (size_t i = 0; i < subgraph_->tensors()->size(); ++i) {
 8006022:	3401      	adds	r4, #1
 8006024:	350c      	adds	r5, #12
    return data_ - ReadScalar<soffset_t>(data_);
 8006026:	680b      	ldr	r3, [r1, #0]
 8006028:	1acb      	subs	r3, r1, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800602a:	881a      	ldrh	r2, [r3, #0]
 800602c:	2a04      	cmp	r2, #4
 800602e:	d8dd      	bhi.n	8005fec <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x10>
  uoffset_t size() const { return EndianScalar(length_); }
 8006030:	2300      	movs	r3, #0
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	deff      	udf	#255	; 0xff
 8006036:	6813      	ldr	r3, [r2, #0]
 8006038:	deff      	udf	#255	; 0xff
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 800603a:	6f70      	ldr	r0, [r6, #116]	; 0x74
 800603c:	a901      	add	r1, sp, #4
 800603e:	4428      	add	r0, r5
 8006040:	f7fe fbd2 	bl	80047e8 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8006044:	b9a8      	cbnz	r0, 8006072 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x96>
    return data_ - ReadScalar<soffset_t>(data_);
 8006046:	f858 3007 	ldr.w	r3, [r8, r7]
 800604a:	eba9 0303 	sub.w	r3, r9, r3
 800604e:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8006050:	2a06      	cmp	r2, #6
 8006052:	d905      	bls.n	8006060 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x84>
 8006054:	88d9      	ldrh	r1, [r3, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8006056:	b121      	cbz	r1, 8006062 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x86>
          TfLiteEvalTensorByteLength(&eval_tensors_[i], &buffer_size));

      int value = 0;
      if (tensor->type() == tflite::TensorType_INT8) {
 8006058:	f919 1001 	ldrsb.w	r1, [r9, r1]
 800605c:	2909      	cmp	r1, #9
 800605e:	d00b      	beq.n	8006078 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x9c>
      int value = 0;
 8006060:	2100      	movs	r1, #0
        value = tensor->quantization()->zero_point()->Get(0);
      }
      memset(eval_tensors_[i].data.raw, value, buffer_size);
 8006062:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8006064:	9a01      	ldr	r2, [sp, #4]
 8006066:	5958      	ldr	r0, [r3, r5]
 8006068:	f00c f802 	bl	8012070 <memset>
 800606c:	6f31      	ldr	r1, [r6, #112]	; 0x70
 800606e:	e7d8      	b.n	8006022 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x46>
    }
  }

  return kTfLiteOk;
 8006070:	2000      	movs	r0, #0
}
 8006072:	b003      	add	sp, #12
 8006074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8006078:	2a0c      	cmp	r2, #12
 800607a:	d9d9      	bls.n	8006030 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x54>
 800607c:	899b      	ldrh	r3, [r3, #12]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800607e:	2b00      	cmp	r3, #0
 8006080:	d0d6      	beq.n	8006030 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x54>
 8006082:	f859 2003 	ldr.w	r2, [r9, r3]
    auto p = data_ + field_offset;
 8006086:	4499      	add	r9, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8006088:	eb09 0102 	add.w	r1, r9, r2
    return data_ - ReadScalar<soffset_t>(data_);
 800608c:	f859 3002 	ldr.w	r3, [r9, r2]
 8006090:	1acb      	subs	r3, r1, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8006092:	881a      	ldrh	r2, [r3, #0]
 8006094:	2a0a      	cmp	r2, #10
 8006096:	d9cb      	bls.n	8006030 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x54>
 8006098:	895a      	ldrh	r2, [r3, #10]
    auto p = data_ + field_offset;
 800609a:	188b      	adds	r3, r1, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800609c:	2a00      	cmp	r2, #0
 800609e:	d0c7      	beq.n	8006030 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x54>
 80060a0:	588a      	ldr	r2, [r1, r2]
    FLATBUFFERS_ASSERT(i < size());
 80060a2:	5899      	ldr	r1, [r3, r2]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80060a4:	4413      	add	r3, r2
    FLATBUFFERS_ASSERT(i < size());
 80060a6:	b109      	cbz	r1, 80060ac <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xd0>
        value = tensor->quantization()->zero_point()->Get(0);
 80060a8:	6859      	ldr	r1, [r3, #4]
 80060aa:	e7da      	b.n	8006062 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x86>
 80060ac:	4b03      	ldr	r3, [pc, #12]	; (80060bc <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xe0>)
 80060ae:	4a04      	ldr	r2, [pc, #16]	; (80060c0 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xe4>)
 80060b0:	4804      	ldr	r0, [pc, #16]	; (80060c4 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xe8>)
 80060b2:	f44f 7183 	mov.w	r1, #262	; 0x106
 80060b6:	f00b f86d 	bl	8011194 <__assert_func>
 80060ba:	bf00      	nop
 80060bc:	08015960 	.word	0x08015960
 80060c0:	08015c68 	.word	0x08015c68
 80060c4:	08015a64 	.word	0x08015a64

080060c8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
TfLiteStatus MicroInterpreter::AllocateTensors() {
 80060c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060cc:	b083      	sub	sp, #12
  if (allocator_.StartModelAllocation(model_, op_resolver_,
 80060ce:	f100 0374 	add.w	r3, r0, #116	; 0x74
TfLiteStatus MicroInterpreter::AllocateTensors() {
 80060d2:	4604      	mov	r4, r0
  if (allocator_.StartModelAllocation(model_, op_resolver_,
 80060d4:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 80060d8:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	4623      	mov	r3, r4
 80060de:	f7ff f993 	bl	8005408 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	f040 80a6 	bne.w	8006234 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x16c>
  eval_tensors_ = eval_tensors;
 80060e8:	e9d4 311c 	ldrd	r3, r1, [r4, #112]	; 0x70
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    return data_ - ReadScalar<soffset_t>(data_);
 80060f2:	eba3 0c02 	sub.w	ip, r3, r2
 80060f6:	f8bc e000 	ldrh.w	lr, [ip]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80060fa:	f1be 0f04 	cmp.w	lr, #4
 80060fe:	f240 80a3 	bls.w	8006248 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x180>
 8006102:	f8bc 2004 	ldrh.w	r2, [ip, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8006106:	2a00      	cmp	r2, #0
 8006108:	f000 809e 	beq.w	8006248 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x180>
  uoffset_t size() const { return EndianScalar(length_); }
 800610c:	5899      	ldr	r1, [r3, r2]
    auto p = data_ + field_offset;
 800610e:	441a      	add	r2, r3
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8006110:	4606      	mov	r6, r0
  context_.tensors_size = subgraph_->tensors()->size();
 8006112:	5852      	ldr	r2, [r2, r1]
 8006114:	6122      	str	r2, [r4, #16]
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
 8006116:	4a4e      	ldr	r2, [pc, #312]	; (8006250 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x188>)
 8006118:	64a2      	str	r2, [r4, #72]	; 0x48
  context_.GetScratchBuffer = nullptr;
 800611a:	e9c4 0014 	strd	r0, r0, [r4, #80]	; 0x50
          registration->init(&context_, init_data, init_data_size);
 800611e:	f104 0710 	add.w	r7, r4, #16
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8006122:	e01e      	b.n	8006162 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x9a>
    auto* node = &(node_and_registrations_[i].node);
 8006124:	6825      	ldr	r5, [r4, #0]
 8006126:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800612a:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
    auto* registration = node_and_registrations_[i].registration;
 800612e:	6a68      	ldr	r0, [r5, #36]	; 0x24
      init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 8006130:	f8d5 8018 	ldr.w	r8, [r5, #24]
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8006134:	6942      	ldr	r2, [r0, #20]
      init_data = reinterpret_cast<const char*>(node->builtin_data);
 8006136:	6969      	ldr	r1, [r5, #20]
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8006138:	2a20      	cmp	r2, #32
      init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 800613a:	bf08      	it	eq
 800613c:	4641      	moveq	r1, r8
    if (registration->init) {
 800613e:	f8d0 8000 	ldr.w	r8, [r0]
      init_data_size = node->custom_initial_data_size;
 8006142:	bf0c      	ite	eq
 8006144:	69ea      	ldreq	r2, [r5, #28]
      init_data_size = 0;
 8006146:	2200      	movne	r2, #0
    if (registration->init) {
 8006148:	f1b8 0f00 	cmp.w	r8, #0
 800614c:	d008      	beq.n	8006160 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x98>
          registration->init(&context_, init_data, init_data_size);
 800614e:	4638      	mov	r0, r7
 8006150:	47c0      	blx	r8
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8006152:	6f23      	ldr	r3, [r4, #112]	; 0x70
      node->user_data =
 8006154:	6128      	str	r0, [r5, #16]
 8006156:	681a      	ldr	r2, [r3, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 8006158:	eba3 0c02 	sub.w	ip, r3, r2
 800615c:	f8bc e000 	ldrh.w	lr, [ip]
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8006160:	3601      	adds	r6, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8006162:	f1be 0f0a 	cmp.w	lr, #10
 8006166:	d96f      	bls.n	8006248 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x180>
 8006168:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800616c:	2a00      	cmp	r2, #0
 800616e:	d06b      	beq.n	8006248 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x180>
  uoffset_t size() const { return EndianScalar(length_); }
 8006170:	5899      	ldr	r1, [r3, r2]
    auto p = data_ + field_offset;
 8006172:	441a      	add	r2, r3
 8006174:	5852      	ldr	r2, [r2, r1]
 8006176:	4296      	cmp	r6, r2
 8006178:	d3d4      	bcc.n	8006124 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5c>
  context_.RequestScratchBufferInArena =
 800617a:	4a36      	ldr	r2, [pc, #216]	; (8006254 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x18c>)
        TF_LITE_REPORT_ERROR(
 800617c:	4d36      	ldr	r5, [pc, #216]	; (8006258 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x190>)
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_CUMSUM)) return "";
 800617e:	4f37      	ldr	r7, [pc, #220]	; (800625c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x194>)
  return EnumNamesBuiltinOperator()[index];
 8006180:	4e37      	ldr	r6, [pc, #220]	; (8006260 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x198>)
  context_.RequestScratchBufferInArena =
 8006182:	6522      	str	r2, [r4, #80]	; 0x50
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8006184:	f04f 0800 	mov.w	r8, #0
 8006188:	e018      	b.n	80061bc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf4>
  return (v < low) || (high < v);
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	2a80      	cmp	r2, #128	; 0x80
 800618e:	bf94      	ite	ls
 8006190:	f856 2022 	ldrls.w	r2, [r6, r2, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_CUMSUM)) return "";
 8006194:	463a      	movhi	r2, r7
        TF_LITE_REPORT_ERROR(
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	4629      	mov	r1, r5
 800619a:	4643      	mov	r3, r8
 800619c:	f7fd fb7a 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    allocator_.FinishPrepareNodeAllocations(/*node_id=*/i);
 80061a0:	4641      	mov	r1, r8
 80061a2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80061a4:	f7ff fa00 	bl	80055a8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 80061a8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80061aa:	681a      	ldr	r2, [r3, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 80061ac:	eba3 0c02 	sub.w	ip, r3, r2
 80061b0:	f108 0801 	add.w	r8, r8, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80061b4:	f8bc 2000 	ldrh.w	r2, [ip]
 80061b8:	2a0a      	cmp	r2, #10
 80061ba:	d945      	bls.n	8006248 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x180>
 80061bc:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80061c0:	2a00      	cmp	r2, #0
 80061c2:	d041      	beq.n	8006248 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x180>
  uoffset_t size() const { return EndianScalar(length_); }
 80061c4:	5899      	ldr	r1, [r3, r2]
    auto p = data_ + field_offset;
 80061c6:	441a      	add	r2, r3
 80061c8:	5853      	ldr	r3, [r2, r1]
 80061ca:	4543      	cmp	r3, r8
 80061cc:	d918      	bls.n	8006200 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x138>
    auto* node = &(node_and_registrations_[i].node);
 80061ce:	6821      	ldr	r1, [r4, #0]
 80061d0:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 80061d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    auto* registration = node_and_registrations_[i].registration;
 80061d8:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
    if (registration->prepare) {
 80061dc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d0dd      	beq.n	80061a0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xd8>
      TfLiteStatus prepare_status = registration->prepare(&context_, node);
 80061e4:	f104 0010 	add.w	r0, r4, #16
 80061e8:	4798      	blx	r3
      if (prepare_status != kTfLiteOk) {
 80061ea:	4603      	mov	r3, r0
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d0d7      	beq.n	80061a0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xd8>
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 80061f0:	f8d9 2014 	ldr.w	r2, [r9, #20]
        TF_LITE_REPORT_ERROR(
 80061f4:	68e0      	ldr	r0, [r4, #12]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 80061f6:	2a20      	cmp	r2, #32
 80061f8:	d1c7      	bne.n	800618a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xc2>
    return registration->custom_name;
 80061fa:	f8d9 2018 	ldr.w	r2, [r9, #24]
 80061fe:	e7ca      	b.n	8006196 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xce>
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
 8006200:	4818      	ldr	r0, [pc, #96]	; (8006264 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x19c>)
  TF_LITE_ENSURE_OK(&context_,
 8006202:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8006204:	6861      	ldr	r1, [r4, #4]
  context_.AllocatePersistentBuffer = nullptr;
 8006206:	2300      	movs	r3, #0
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
 8006208:	e9c4 3014 	strd	r3, r0, [r4, #80]	; 0x50
  context_.AllocatePersistentBuffer = nullptr;
 800620c:	64a3      	str	r3, [r4, #72]	; 0x48
  TF_LITE_ENSURE_OK(&context_,
 800620e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006210:	f104 0378 	add.w	r3, r4, #120	; 0x78
 8006214:	f7ff f932 	bl	800547c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE>
 8006218:	b948      	cbnz	r0, 800622e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x166>
  scratch_buffer_handles_ = scratch_buffer_handles;
 800621a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800621c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
 8006220:	4620      	mov	r0, r4
 8006222:	f7ff fedb 	bl	8005fdc <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
 8006226:	b910      	cbnz	r0, 800622e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x166>
  tensors_allocated_ = true;
 8006228:	2301      	movs	r3, #1
 800622a:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
 800622e:	b003      	add	sp, #12
 8006230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
 8006234:	490c      	ldr	r1, [pc, #48]	; (8006268 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a0>)
 8006236:	68e0      	ldr	r0, [r4, #12]
 8006238:	f7fd fb2c 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    initialization_status_ = kTfLiteError;
 800623c:	2001      	movs	r0, #1
 800623e:	f884 006d 	strb.w	r0, [r4, #109]	; 0x6d
}
 8006242:	b003      	add	sp, #12
 8006244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  uoffset_t size() const { return EndianScalar(length_); }
 8006248:	2300      	movs	r3, #0
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	deff      	udf	#255	; 0xff
 800624e:	bf00      	nop
 8006250:	08005cd9 	.word	0x08005cd9
 8006254:	08005d19 	.word	0x08005d19
 8006258:	08016404 	.word	0x08016404
 800625c:	080140bc 	.word	0x080140bc
 8006260:	080153dc 	.word	0x080153dc
 8006264:	08005ce5 	.word	0x08005ce5
 8006268:	080163e0 	.word	0x080163e0
 800626c:	00000000 	.word	0x00000000

08006270 <_ZN6tflite16MicroInterpreter6InvokeEv>:
TfLiteStatus MicroInterpreter::Invoke() {
 8006270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006274:	ed2d 8b02 	vpush	{d8}
  if (initialization_status_ != kTfLiteOk) {
 8006278:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
TfLiteStatus MicroInterpreter::Invoke() {
 800627c:	b085      	sub	sp, #20
 800627e:	4604      	mov	r4, r0
  if (initialization_status_ != kTfLiteOk) {
 8006280:	2b00      	cmp	r3, #0
 8006282:	d17c      	bne.n	800637e <_ZN6tflite16MicroInterpreter6InvokeEv+0x10e>
  if (!tensors_allocated_) {
 8006284:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8006288:	2b00      	cmp	r3, #0
 800628a:	d072      	beq.n	8006372 <_ZN6tflite16MicroInterpreter6InvokeEv+0x102>
                              int64_t event_metadata1,
                              int64_t event_metadata2) = 0;
  // Similar w/ the above, but `event_metadata2` defaults to 0.
  uint32_t BeginEvent(const char* tag, EventType event_type,
                      int64_t event_metadata) {
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
 800628c:	ed9f 8b48 	vldr	d8, [pc, #288]	; 80063b0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x140>
 8006290:	2700      	movs	r7, #0
 8006292:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8006294:	f8df b124 	ldr.w	fp, [pc, #292]	; 80063bc <_ZN6tflite16MicroInterpreter6InvokeEv+0x14c>
 8006298:	46b8      	mov	r8, r7
    return data_ - ReadScalar<soffset_t>(data_);
 800629a:	680b      	ldr	r3, [r1, #0]
 800629c:	1acb      	subs	r3, r1, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800629e:	881a      	ldrh	r2, [r3, #0]
 80062a0:	2a0a      	cmp	r2, #10
 80062a2:	f240 8081 	bls.w	80063a8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x138>
 80062a6:	895b      	ldrh	r3, [r3, #10]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d07d      	beq.n	80063a8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x138>
  uoffset_t size() const { return EndianScalar(length_); }
 80062ac:	58ca      	ldr	r2, [r1, r3]
    auto p = data_ + field_offset;
 80062ae:	440b      	add	r3, r1
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 80062b0:	589b      	ldr	r3, [r3, r2]
 80062b2:	4598      	cmp	r8, r3
 80062b4:	d26e      	bcs.n	8006394 <_ZN6tflite16MicroInterpreter6InvokeEv+0x124>
    auto* node = &(node_and_registrations_[i].node);
 80062b6:	6826      	ldr	r6, [r4, #0]
 80062b8:	443e      	add	r6, r7
    auto* registration = node_and_registrations_[i].registration;
 80062ba:	f8d6 a024 	ldr.w	sl, [r6, #36]	; 0x24
    if (registration->invoke) {
 80062be:	f8da 300c 	ldr.w	r3, [sl, #12]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d02e      	beq.n	8006324 <_ZN6tflite16MicroInterpreter6InvokeEv+0xb4>
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 80062c6:	f8da 2014 	ldr.w	r2, [sl, #20]
      tflite::Profiler* profiler =
 80062ca:	6c65      	ldr	r5, [r4, #68]	; 0x44
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 80062cc:	2a20      	cmp	r2, #32
 80062ce:	d02f      	beq.n	8006330 <_ZN6tflite16MicroInterpreter6InvokeEv+0xc0>
  return (v < low) || (high < v);
 80062d0:	b2d2      	uxtb	r2, r2
 80062d2:	2a80      	cmp	r2, #128	; 0x80
  return EnumNamesBuiltinOperator()[index];
 80062d4:	bf9a      	itte	ls
 80062d6:	4938      	ldrls	r1, [pc, #224]	; (80063b8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x148>)
 80062d8:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_CUMSUM)) return "";
 80062dc:	4659      	movhi	r1, fp
 public:
  ScopedProfile(Profiler* profiler, const char* tag,
                Profiler::EventType event_type = Profiler::EventType::DEFAULT,
                int64_t event_metadata = 0)
      : profiler_(profiler), event_handle_(0) {
    if (profiler) {
 80062de:	b32d      	cbz	r5, 800632c <_ZN6tflite16MicroInterpreter6InvokeEv+0xbc>
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
 80062e0:	682b      	ldr	r3, [r5, #0]

class ScopedOperatorProfile : public ScopedProfile {
 public:
  ScopedOperatorProfile(Profiler* profiler, const char* tag, int node_index)
      : ScopedProfile(profiler, tag, Profiler::EventType::OPERATOR_INVOKE_EVENT,
                      static_cast<uint32_t>(node_index)) {}
 80062e2:	f8cd 8000 	str.w	r8, [sp]
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
 80062e6:	ed8d 8b02 	vstr	d8, [sp, #8]
                      static_cast<uint32_t>(node_index)) {}
 80062ea:	2200      	movs	r2, #0
 80062ec:	9201      	str	r2, [sp, #4]
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	2202      	movs	r2, #2
 80062f2:	4628      	mov	r0, r5
 80062f4:	4798      	blx	r3
      invoke_status = registration->invoke(&context_, node);
 80062f6:	f8da 300c 	ldr.w	r3, [sl, #12]
 80062fa:	4681      	mov	r9, r0
 80062fc:	4631      	mov	r1, r6
 80062fe:	f104 0010 	add.w	r0, r4, #16
 8006302:	4798      	blx	r3
      allocator_.ResetTempAllocations();
 8006304:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006306:	681a      	ldr	r2, [r3, #0]
      invoke_status = registration->invoke(&context_, node);
 8006308:	4606      	mov	r6, r0
      allocator_.ResetTempAllocations();
 800630a:	4618      	mov	r0, r3
 800630c:	6893      	ldr	r3, [r2, #8]
 800630e:	4798      	blx	r3
      if (invoke_status == kTfLiteError) {
 8006310:	2e01      	cmp	r6, #1
 8006312:	d010      	beq.n	8006336 <_ZN6tflite16MicroInterpreter6InvokeEv+0xc6>
      } else if (invoke_status != kTfLiteOk) {
 8006314:	bb0e      	cbnz	r6, 800635a <_ZN6tflite16MicroInterpreter6InvokeEv+0xea>
    if (profiler_) {
 8006316:	b125      	cbz	r5, 8006322 <_ZN6tflite16MicroInterpreter6InvokeEv+0xb2>
      profiler_->EndEvent(event_handle_);
 8006318:	682b      	ldr	r3, [r5, #0]
 800631a:	4649      	mov	r1, r9
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	4628      	mov	r0, r5
 8006320:	4798      	blx	r3
 8006322:	6f21      	ldr	r1, [r4, #112]	; 0x70
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8006324:	f108 0801 	add.w	r8, r8, #1
 8006328:	3728      	adds	r7, #40	; 0x28
 800632a:	e7b6      	b.n	800629a <_ZN6tflite16MicroInterpreter6InvokeEv+0x2a>
      : profiler_(profiler), event_handle_(0) {
 800632c:	46a9      	mov	r9, r5
 800632e:	e7e5      	b.n	80062fc <_ZN6tflite16MicroInterpreter6InvokeEv+0x8c>
    return registration->custom_name;
 8006330:	f8da 1018 	ldr.w	r1, [sl, #24]
 8006334:	e7d3      	b.n	80062de <_ZN6tflite16MicroInterpreter6InvokeEv+0x6e>
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8006336:	f8da 2014 	ldr.w	r2, [sl, #20]
        TF_LITE_REPORT_ERROR(
 800633a:	68e0      	ldr	r0, [r4, #12]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800633c:	2a20      	cmp	r2, #32
 800633e:	d030      	beq.n	80063a2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x132>
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	2a80      	cmp	r2, #128	; 0x80
  return EnumNamesBuiltinOperator()[index];
 8006344:	bf96      	itet	ls
 8006346:	4b1c      	ldrls	r3, [pc, #112]	; (80063b8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x148>)
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_CUMSUM)) return "";
 8006348:	4a1c      	ldrhi	r2, [pc, #112]	; (80063bc <_ZN6tflite16MicroInterpreter6InvokeEv+0x14c>)
  return EnumNamesBuiltinOperator()[index];
 800634a:	f853 2022 	ldrls.w	r2, [r3, r2, lsl #2]
        TF_LITE_REPORT_ERROR(
 800634e:	2101      	movs	r1, #1
 8006350:	9100      	str	r1, [sp, #0]
 8006352:	4643      	mov	r3, r8
 8006354:	491a      	ldr	r1, [pc, #104]	; (80063c0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x150>)
 8006356:	f7fd fa9d 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    if (profiler_) {
 800635a:	b125      	cbz	r5, 8006366 <_ZN6tflite16MicroInterpreter6InvokeEv+0xf6>
      profiler_->EndEvent(event_handle_);
 800635c:	682b      	ldr	r3, [r5, #0]
 800635e:	4649      	mov	r1, r9
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	4628      	mov	r0, r5
 8006364:	4798      	blx	r3
}
 8006366:	4630      	mov	r0, r6
 8006368:	b005      	add	sp, #20
 800636a:	ecbd 8b02 	vpop	{d8}
 800636e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 8006372:	f7ff fea9 	bl	80060c8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 8006376:	4606      	mov	r6, r0
 8006378:	2800      	cmp	r0, #0
 800637a:	d087      	beq.n	800628c <_ZN6tflite16MicroInterpreter6InvokeEv+0x1c>
 800637c:	e7f3      	b.n	8006366 <_ZN6tflite16MicroInterpreter6InvokeEv+0xf6>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800637e:	4911      	ldr	r1, [pc, #68]	; (80063c4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x154>)
 8006380:	68c0      	ldr	r0, [r0, #12]
 8006382:	f7fd fa87 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 8006386:	2601      	movs	r6, #1
}
 8006388:	4630      	mov	r0, r6
 800638a:	b005      	add	sp, #20
 800638c:	ecbd 8b02 	vpop	{d8}
 8006390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return kTfLiteOk;
 8006394:	2600      	movs	r6, #0
}
 8006396:	4630      	mov	r0, r6
 8006398:	b005      	add	sp, #20
 800639a:	ecbd 8b02 	vpop	{d8}
 800639e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return registration->custom_name;
 80063a2:	f8da 2018 	ldr.w	r2, [sl, #24]
 80063a6:	e7d2      	b.n	800634e <_ZN6tflite16MicroInterpreter6InvokeEv+0xde>
  uoffset_t size() const { return EndianScalar(length_); }
 80063a8:	2300      	movs	r3, #0
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	deff      	udf	#255	; 0xff
 80063ae:	bf00      	nop
	...
 80063b8:	080153dc 	.word	0x080153dc
 80063bc:	080140bc 	.word	0x080140bc
 80063c0:	0801646c 	.word	0x0801646c
 80063c4:	0801643c 	.word	0x0801643c

080063c8 <MicroVsnprintf>:
}

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 80063c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063cc:	ed2d 8b02 	vpush	{d8}
 80063d0:	461f      	mov	r7, r3
  int output_index = 0;
  const char* current = format;
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
  while (*current != '\0' && output_index < usable_length) {
 80063d2:	7813      	ldrb	r3, [r2, #0]
                              va_list args) {
 80063d4:	b093      	sub	sp, #76	; 0x4c
 80063d6:	4683      	mov	fp, r0
  while (*current != '\0' && output_index < usable_length) {
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 8288 	beq.w	80068ee <MicroVsnprintf+0x526>
 80063de:	f101 3aff 	add.w	sl, r1, #4294967295
 80063e2:	f1ba 0f00 	cmp.w	sl, #0
 80063e6:	f340 8282 	ble.w	80068ee <MicroVsnprintf+0x526>
 80063ea:	4690      	mov	r8, r2
    int32_t digit = i % base;
 80063ec:	f8df 951c 	ldr.w	r9, [pc, #1308]	; 800690c <MicroVsnprintf+0x544>
 80063f0:	1e8a      	subs	r2, r1, #2
 80063f2:	9202      	str	r2, [sp, #8]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
          current++;
          break;
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 80063f4:	eeb2 8a0c 	vmov.f32	s16, #44	; 0x41600000  14.0
  int output_index = 0;
 80063f8:	2400      	movs	r4, #0
    if (*current == '%') {
 80063fa:	2b25      	cmp	r3, #37	; 0x25
 80063fc:	d013      	beq.n	8006426 <MicroVsnprintf+0x5e>
            output[output_index++] = string[string_idx++];
          }
          current++;
      }
    } else {
      output[output_index++] = *current++;
 80063fe:	f80b 3004 	strb.w	r3, [fp, r4]
  while (*current != '\0' && output_index < usable_length) {
 8006402:	f898 3001 	ldrb.w	r3, [r8, #1]
      output[output_index++] = *current++;
 8006406:	3401      	adds	r4, #1
 8006408:	f108 0801 	add.w	r8, r8, #1
  while (*current != '\0' && output_index < usable_length) {
 800640c:	b10b      	cbz	r3, 8006412 <MicroVsnprintf+0x4a>
 800640e:	4554      	cmp	r4, sl
 8006410:	dbf3      	blt.n	80063fa <MicroVsnprintf+0x32>
    }
  }
  output[output_index++] = '\0';
 8006412:	44a3      	add	fp, r4
 8006414:	1c60      	adds	r0, r4, #1
 8006416:	2300      	movs	r3, #0
 8006418:	f88b 3000 	strb.w	r3, [fp]
  return output_index;
}
 800641c:	b013      	add	sp, #76	; 0x4c
 800641e:	ecbd 8b02 	vpop	{d8}
 8006422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (*current) {
 8006426:	f898 3001 	ldrb.w	r3, [r8, #1]
 800642a:	2b25      	cmp	r3, #37	; 0x25
 800642c:	f000 81d8 	beq.w	80067e0 <MicroVsnprintf+0x418>
 8006430:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8006434:	b2d1      	uxtb	r1, r2
 8006436:	2914      	cmp	r1, #20
 8006438:	d8e6      	bhi.n	8006408 <MicroVsnprintf+0x40>
 800643a:	2a14      	cmp	r2, #20
 800643c:	d8e4      	bhi.n	8006408 <MicroVsnprintf+0x40>
 800643e:	a101      	add	r1, pc, #4	; (adr r1, 8006444 <MicroVsnprintf+0x7c>)
 8006440:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006444:	08006771 	.word	0x08006771
 8006448:	08006409 	.word	0x08006409
 800644c:	08006573 	.word	0x08006573
 8006450:	08006409 	.word	0x08006409
 8006454:	08006409 	.word	0x08006409
 8006458:	08006409 	.word	0x08006409
 800645c:	08006409 	.word	0x08006409
 8006460:	08006409 	.word	0x08006409
 8006464:	08006409 	.word	0x08006409
 8006468:	08006409 	.word	0x08006409
 800646c:	08006409 	.word	0x08006409
 8006470:	08006409 	.word	0x08006409
 8006474:	08006409 	.word	0x08006409
 8006478:	08006409 	.word	0x08006409
 800647c:	08006409 	.word	0x08006409
 8006480:	0800653d 	.word	0x0800653d
 8006484:	08006409 	.word	0x08006409
 8006488:	080064df 	.word	0x080064df
 800648c:	08006409 	.word	0x08006409
 8006490:	08006409 	.word	0x08006409
 8006494:	08006499 	.word	0x08006499
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 8006498:	ebaa 0304 	sub.w	r3, sl, r4
 800649c:	2b09      	cmp	r3, #9
 800649e:	f340 821c 	ble.w	80068da <MicroVsnprintf+0x512>
          output[output_index++] = '0';
 80064a2:	f647 0330 	movw	r3, #30768	; 0x7830
 80064a6:	f82b 3004 	strh.w	r3, [fp, r4]
          output[output_index++] = 'x';
 80064aa:	3402      	adds	r4, #2
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 80064ac:	eb0b 0e04 	add.w	lr, fp, r4
 80064b0:	f857 2b04 	ldr.w	r2, [r7], #4
 80064b4:	4673      	mov	r3, lr
    int32_t digit = i % base;
 80064b6:	f002 000f 	and.w	r0, r2, #15
    if (digit < 10) {
 80064ba:	2809      	cmp	r0, #9
      character = '0' + digit;
 80064bc:	f100 0630 	add.w	r6, r0, #48	; 0x30
      character = 'a' + (digit - 10);
 80064c0:	f100 0557 	add.w	r5, r0, #87	; 0x57
    *buffer++ = character;
 80064c4:	4619      	mov	r1, r3
    i /= base;
 80064c6:	ea4f 1012 	mov.w	r0, r2, lsr #4
    if (digit < 10) {
 80064ca:	f200 8182 	bhi.w	80067d2 <MicroVsnprintf+0x40a>
  } while (i > 0);
 80064ce:	2a0f      	cmp	r2, #15
    *buffer++ = character;
 80064d0:	f801 6b01 	strb.w	r6, [r1], #1
  } while (i > 0);
 80064d4:	f240 818c 	bls.w	80067f0 <MicroVsnprintf+0x428>
 80064d8:	460b      	mov	r3, r1
    i /= base;
 80064da:	4602      	mov	r2, r0
 80064dc:	e7eb      	b.n	80064b6 <MicroVsnprintf+0xee>
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 80064de:	ebaa 0304 	sub.w	r3, sl, r4
 80064e2:	2b0a      	cmp	r3, #10
 80064e4:	f340 81f9 	ble.w	80068da <MicroVsnprintf+0x512>
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 80064e8:	eb0b 0504 	add.w	r5, fp, r4
 80064ec:	f857 1b04 	ldr.w	r1, [r7], #4
 80064f0:	4628      	mov	r0, r5
    int32_t digit = i % base;
 80064f2:	fba9 3201 	umull	r3, r2, r9, r1
 80064f6:	08d2      	lsrs	r2, r2, #3
 80064f8:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80064fc:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
 8006500:	460e      	mov	r6, r1
      character = '0' + digit;
 8006502:	3330      	adds	r3, #48	; 0x30
  } while (i > 0);
 8006504:	2e09      	cmp	r6, #9
    i /= base;
 8006506:	4611      	mov	r1, r2
 8006508:	4602      	mov	r2, r0
    *buffer++ = character;
 800650a:	f800 3b01 	strb.w	r3, [r0], #1
  } while (i > 0);
 800650e:	d8f0      	bhi.n	80064f2 <MicroVsnprintf+0x12a>
  *buffer = 0;
 8006510:	f04f 0300 	mov.w	r3, #0
  while (p1 < p2) {
 8006514:	4295      	cmp	r5, r2
  *buffer = 0;
 8006516:	7003      	strb	r3, [r0, #0]
  while (p1 < p2) {
 8006518:	bf38      	it	cc
 800651a:	462b      	movcc	r3, r5
 800651c:	d207      	bcs.n	800652e <MicroVsnprintf+0x166>
    char tmp = *p1;
 800651e:	7819      	ldrb	r1, [r3, #0]
    *p1++ = *p2;
 8006520:	7816      	ldrb	r6, [r2, #0]
 8006522:	f803 6b01 	strb.w	r6, [r3], #1
    *p2-- = tmp;
 8006526:	f802 1901 	strb.w	r1, [r2], #-1
  while (p1 < p2) {
 800652a:	4293      	cmp	r3, r2
 800652c:	d3f7      	bcc.n	800651e <MicroVsnprintf+0x156>
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 800652e:	1b45      	subs	r5, r0, r5
  while (*current != '\0' && output_index < usable_length) {
 8006530:	f898 3002 	ldrb.w	r3, [r8, #2]
          output_index +=
 8006534:	442c      	add	r4, r5
          current++;
 8006536:	f108 0802 	add.w	r8, r8, #2
          break;
 800653a:	e767      	b.n	800640c <MicroVsnprintf+0x44>
          while (string_idx + output_index < usable_length &&
 800653c:	45a2      	cmp	sl, r4
          char* string = va_arg(args, char*);
 800653e:	f857 3b04 	ldr.w	r3, [r7], #4
          while (string_idx + output_index < usable_length &&
 8006542:	dd11      	ble.n	8006568 <MicroVsnprintf+0x1a0>
 8006544:	9a02      	ldr	r2, [sp, #8]
 8006546:	1e61      	subs	r1, r4, #1
 8006548:	1b10      	subs	r0, r2, r4
 800654a:	eb03 0050 	add.w	r0, r3, r0, lsr #1
 800654e:	4459      	add	r1, fp
 8006550:	3b01      	subs	r3, #1
 8006552:	e005      	b.n	8006560 <MicroVsnprintf+0x198>
 8006554:	4298      	cmp	r0, r3
            output[output_index++] = string[string_idx++];
 8006556:	f801 2f01 	strb.w	r2, [r1, #1]!
 800655a:	f104 0401 	add.w	r4, r4, #1
          while (string_idx + output_index < usable_length &&
 800655e:	d003      	beq.n	8006568 <MicroVsnprintf+0x1a0>
                 string[string_idx] != '\0') {
 8006560:	f813 2f01 	ldrb.w	r2, [r3, #1]!
          while (string_idx + output_index < usable_length &&
 8006564:	2a00      	cmp	r2, #0
 8006566:	d1f5      	bne.n	8006554 <MicroVsnprintf+0x18c>
  while (*current != '\0' && output_index < usable_length) {
 8006568:	f898 3002 	ldrb.w	r3, [r8, #2]
          current++;
 800656c:	f108 0802 	add.w	r8, r8, #2
 8006570:	e74c      	b.n	800640c <MicroVsnprintf+0x44>
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 8006572:	ebaa 0304 	sub.w	r3, sl, r4
 8006576:	ee07 3a90 	vmov	s15, r3
 800657a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800657e:	eef4 7ac8 	vcmpe.f32	s15, s16
 8006582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006586:	f100 81a8 	bmi.w	80068da <MicroVsnprintf+0x512>
              FormatFloat(&output[output_index], va_arg(args, double));
 800658a:	3707      	adds	r7, #7
 800658c:	f027 0707 	bic.w	r7, r7, #7
 8006590:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006594:	eb0b 0504 	add.w	r5, fp, r4
 8006598:	9501      	str	r5, [sp, #4]
 800659a:	f7fa fb15 	bl	8000bc8 <__aeabi_d2f>
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 800659e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
  if (u & sign_mask) {
 80065a2:	2800      	cmp	r0, #0
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 80065a4:	9304      	str	r3, [sp, #16]
 80065a6:	f1a3 067f 	sub.w	r6, r3, #127	; 0x7f
  const uint32_t fraction = (u & fraction_mask);
 80065aa:	f3c0 0116 	ubfx	r1, r0, #0, #23
  if (u & sign_mask) {
 80065ae:	f2c0 8136 	blt.w	800681e <MicroVsnprintf+0x456>
 80065b2:	46ae      	mov	lr, r5
  *current = 0;
 80065b4:	f04f 0300 	mov.w	r3, #0
  if (exponent == 128) {
 80065b8:	2e80      	cmp	r6, #128	; 0x80
 80065ba:	f04f 022e 	mov.w	r2, #46	; 0x2e
  *current = 0;
 80065be:	f88e 3000 	strb.w	r3, [lr]
  if (exponent == 128) {
 80065c2:	f000 813b 	beq.w	800683c <MicroVsnprintf+0x474>
  *current = '1';
 80065c6:	4673      	mov	r3, lr
 80065c8:	f642 6231 	movw	r2, #11825	; 0x2e31
 80065cc:	f823 2b02 	strh.w	r2, [r3], #2
  *current = 0;
 80065d0:	f04f 0200 	mov.w	r2, #0
 80065d4:	f88e 2002 	strb.w	r2, [lr, #2]
  char* current_end = buffer + (kFastToBufferSize - 1);
 80065d8:	9a01      	ldr	r2, [sp, #4]
 80065da:	322f      	adds	r2, #47	; 0x2f
 80065dc:	9203      	str	r2, [sp, #12]
  if (current_end - current <= kMaxFractionalDigits) {
 80065de:	1ad2      	subs	r2, r2, r3
 80065e0:	2a07      	cmp	r2, #7
 80065e2:	9205      	str	r2, [sp, #20]
 80065e4:	f340 80bc 	ble.w	8006760 <MicroVsnprintf+0x398>
    *(current + i) = '0';
 80065e8:	f04f 3230 	mov.w	r2, #808464432	; 0x30303030
 80065ec:	f8ce 2003 	str.w	r2, [lr, #3]
 80065f0:	f243 0230 	movw	r2, #12336	; 0x3030
 80065f4:	f8ae 2007 	strh.w	r2, [lr, #7]
    scaled_fraction += (fraction >> scale_shifts[i]);
 80065f8:	0d8a      	lsrs	r2, r1, #22
 80065fa:	eb02 5251 	add.w	r2, r2, r1, lsr #21
 80065fe:	440a      	add	r2, r1
 8006600:	eb02 5211 	add.w	r2, r2, r1, lsr #20
 8006604:	eb02 42d1 	add.w	r2, r2, r1, lsr #19
 8006608:	eb02 4291 	add.w	r2, r2, r1, lsr #18
 800660c:	eb02 4251 	add.w	r2, r2, r1, lsr #17
 8006610:	eb02 3291 	add.w	r2, r2, r1, lsr #14
 8006614:	eb02 3251 	add.w	r2, r2, r1, lsr #13
 8006618:	eb02 22d1 	add.w	r2, r2, r1, lsr #11
 800661c:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8006620:	eb02 1211 	add.w	r2, r2, r1, lsr #4
 8006624:	eb02 02d1 	add.w	r2, r2, r1, lsr #3
    *(current + i) = '0';
 8006628:	a806      	add	r0, sp, #24
    *buffer++ = character;
 800662a:	4605      	mov	r5, r0
    int32_t digit = i % base;
 800662c:	fba9 1002 	umull	r1, r0, r9, r2
 8006630:	08c0      	lsrs	r0, r0, #3
 8006632:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8006636:	eba2 0141 	sub.w	r1, r2, r1, lsl #1
 800663a:	4694      	mov	ip, r2
    i /= base;
 800663c:	4602      	mov	r2, r0
    *buffer++ = character;
 800663e:	4628      	mov	r0, r5
      character = '0' + digit;
 8006640:	3130      	adds	r1, #48	; 0x30
  } while (i > 0);
 8006642:	f1bc 0f09 	cmp.w	ip, #9
    *buffer++ = character;
 8006646:	f800 1b01 	strb.w	r1, [r0], #1
  } while (i > 0);
 800664a:	d8ee      	bhi.n	800662a <MicroVsnprintf+0x262>
  *buffer = 0;
 800664c:	f04f 0200 	mov.w	r2, #0
 8006650:	7002      	strb	r2, [r0, #0]
  while (p1 < p2) {
 8006652:	aa06      	add	r2, sp, #24
 8006654:	4295      	cmp	r5, r2
  char* p1 = start;
 8006656:	bf88      	it	hi
 8006658:	aa06      	addhi	r2, sp, #24
  while (p1 < p2) {
 800665a:	d907      	bls.n	800666c <MicroVsnprintf+0x2a4>
    char tmp = *p1;
 800665c:	7811      	ldrb	r1, [r2, #0]
    *p1++ = *p2;
 800665e:	7828      	ldrb	r0, [r5, #0]
 8006660:	f802 0b01 	strb.w	r0, [r2], #1
    *p2-- = tmp;
 8006664:	f805 1901 	strb.w	r1, [r5], #-1
  while (p1 < p2) {
 8006668:	42aa      	cmp	r2, r5
 800666a:	d3f7      	bcc.n	800665c <MicroVsnprintf+0x294>
  char* current_end = main + (main_max_length - 1);
 800666c:	9a05      	ldr	r2, [sp, #20]
  while ((*to_append != 0) && (current < current_end)) {
 800666e:	f89d 1018 	ldrb.w	r1, [sp, #24]
  char* current_end = main + (main_max_length - 1);
 8006672:	1e50      	subs	r0, r2, #1
 8006674:	4418      	add	r0, r3
  while ((*to_append != 0) && (current < current_end)) {
 8006676:	2900      	cmp	r1, #0
 8006678:	f000 8134 	beq.w	80068e4 <MicroVsnprintf+0x51c>
 800667c:	4283      	cmp	r3, r0
 800667e:	f080 8131 	bcs.w	80068e4 <MicroVsnprintf+0x51c>
 8006682:	461a      	mov	r2, r3
 8006684:	ad06      	add	r5, sp, #24
 8006686:	e001      	b.n	800668c <MicroVsnprintf+0x2c4>
 8006688:	4290      	cmp	r0, r2
 800668a:	d005      	beq.n	8006698 <MicroVsnprintf+0x2d0>
    *current = *to_append;
 800668c:	f802 1b01 	strb.w	r1, [r2], #1
  while ((*to_append != 0) && (current < current_end)) {
 8006690:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8006694:	2900      	cmp	r1, #0
 8006696:	d1f7      	bne.n	8006688 <MicroVsnprintf+0x2c0>
  int fraction_digits = current - previous;
 8006698:	1ad0      	subs	r0, r2, r3
  *current = '0';
 800669a:	f04f 0c30 	mov.w	ip, #48	; 0x30
  if (leading_zeros != 0) {
 800669e:	f1d0 0107 	rsbs	r1, r0, #7
  *current = '0';
 80066a2:	f882 c000 	strb.w	ip, [r2]
  if (leading_zeros != 0) {
 80066a6:	d002      	beq.n	80066ae <MicroVsnprintf+0x2e6>
 80066a8:	e109      	b.n	80068be <MicroVsnprintf+0x4f6>
  while (*(current - 1) == '0' && (current - 1) > previous) {
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d204      	bcs.n	80066b8 <MicroVsnprintf+0x2f0>
 80066ae:	4611      	mov	r1, r2
 80066b0:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 80066b4:	2830      	cmp	r0, #48	; 0x30
 80066b6:	d0f8      	beq.n	80066aa <MicroVsnprintf+0x2e2>
  char* current_end = main + (main_max_length - 1);
 80066b8:	9b03      	ldr	r3, [sp, #12]
 80066ba:	f103 3cff 	add.w	ip, r3, #4294967295
  while ((*to_append != 0) && (current < current_end)) {
 80066be:	4561      	cmp	r1, ip
 80066c0:	f080 8117 	bcs.w	80068f2 <MicroVsnprintf+0x52a>
    *current = *to_append;
 80066c4:	460a      	mov	r2, r1
 80066c6:	232a      	movs	r3, #42	; 0x2a
 80066c8:	f802 3b01 	strb.w	r3, [r2], #1
    ++to_append;
 80066cc:	488c      	ldr	r0, [pc, #560]	; (8006900 <MicroVsnprintf+0x538>)
  while ((*to_append != 0) && (current < current_end)) {
 80066ce:	2132      	movs	r1, #50	; 0x32
 80066d0:	e000      	b.n	80066d4 <MicroVsnprintf+0x30c>
    ++current;
 80066d2:	461a      	mov	r2, r3
  while ((*to_append != 0) && (current < current_end)) {
 80066d4:	4562      	cmp	r2, ip
    *current = *to_append;
 80066d6:	4613      	mov	r3, r2
  while ((*to_append != 0) && (current < current_end)) {
 80066d8:	f000 80dd 	beq.w	8006896 <MicroVsnprintf+0x4ce>
    *current = *to_append;
 80066dc:	f803 1b01 	strb.w	r1, [r3], #1
  while ((*to_append != 0) && (current < current_end)) {
 80066e0:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 80066e4:	2900      	cmp	r1, #0
 80066e6:	d1f4      	bne.n	80066d2 <MicroVsnprintf+0x30a>
  current = StrCatInt32(current, (current_end - current), exponent);
 80066e8:	9903      	ldr	r1, [sp, #12]
 80066ea:	eba1 0c03 	sub.w	ip, r1, r3
  char* current_end = main + (main_max_length - 1);
 80066ee:	4494      	add	ip, r2
  *current = 0;
 80066f0:	f04f 0200 	mov.w	r2, #0
  if (i < 0) {
 80066f4:	2e00      	cmp	r6, #0
  *current = 0;
 80066f6:	701a      	strb	r2, [r3, #0]
  if (i < 0) {
 80066f8:	f2c0 80d7 	blt.w	80068aa <MicroVsnprintf+0x4e2>
 80066fc:	ad06      	add	r5, sp, #24
    *buffer++ = '-';
 80066fe:	4629      	mov	r1, r5
    *buffer++ = character;
 8006700:	4608      	mov	r0, r1
    int32_t digit = i % base;
 8006702:	fba9 2106 	umull	r2, r1, r9, r6
 8006706:	08c9      	lsrs	r1, r1, #3
 8006708:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800670c:	eba6 0242 	sub.w	r2, r6, r2, lsl #1
 8006710:	46b6      	mov	lr, r6
    i /= base;
 8006712:	460e      	mov	r6, r1
    *buffer++ = character;
 8006714:	4601      	mov	r1, r0
      character = '0' + digit;
 8006716:	3230      	adds	r2, #48	; 0x30
  } while (i > 0);
 8006718:	f1be 0f09 	cmp.w	lr, #9
    *buffer++ = character;
 800671c:	f801 2b01 	strb.w	r2, [r1], #1
  } while (i > 0);
 8006720:	d8ee      	bhi.n	8006700 <MicroVsnprintf+0x338>
  *buffer = 0;
 8006722:	f04f 0200 	mov.w	r2, #0
  while (p1 < p2) {
 8006726:	42a8      	cmp	r0, r5
  *buffer = 0;
 8006728:	700a      	strb	r2, [r1, #0]
  while (p1 < p2) {
 800672a:	d907      	bls.n	800673c <MicroVsnprintf+0x374>
    char tmp = *p1;
 800672c:	782a      	ldrb	r2, [r5, #0]
    *p1++ = *p2;
 800672e:	7801      	ldrb	r1, [r0, #0]
 8006730:	f805 1b01 	strb.w	r1, [r5], #1
    *p2-- = tmp;
 8006734:	f800 2901 	strb.w	r2, [r0], #-1
  while (p1 < p2) {
 8006738:	4285      	cmp	r5, r0
 800673a:	d3f7      	bcc.n	800672c <MicroVsnprintf+0x364>
  while ((*to_append != 0) && (current < current_end)) {
 800673c:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8006740:	b15a      	cbz	r2, 800675a <MicroVsnprintf+0x392>
 8006742:	4563      	cmp	r3, ip
 8006744:	d209      	bcs.n	800675a <MicroVsnprintf+0x392>
 8006746:	a906      	add	r1, sp, #24
 8006748:	e001      	b.n	800674e <MicroVsnprintf+0x386>
 800674a:	4563      	cmp	r3, ip
 800674c:	d005      	beq.n	800675a <MicroVsnprintf+0x392>
    *current = *to_append;
 800674e:	f803 2b01 	strb.w	r2, [r3], #1
  while ((*to_append != 0) && (current < current_end)) {
 8006752:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006756:	2a00      	cmp	r2, #0
 8006758:	d1f7      	bne.n	800674a <MicroVsnprintf+0x382>
  *current = 0;
 800675a:	f04f 0200 	mov.w	r2, #0
 800675e:	701a      	strb	r2, [r3, #0]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 8006760:	9a01      	ldr	r2, [sp, #4]
 8006762:	1a9b      	subs	r3, r3, r2
          output_index +=
 8006764:	441c      	add	r4, r3
          current++;
 8006766:	f108 0802 	add.w	r8, r8, #2
  while (*current != '\0' && output_index < usable_length) {
 800676a:	f898 3000 	ldrb.w	r3, [r8]
          break;
 800676e:	e64d      	b.n	800640c <MicroVsnprintf+0x44>
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 8006770:	ebaa 0304 	sub.w	r3, sl, r4
 8006774:	2b0a      	cmp	r3, #10
 8006776:	f340 80b0 	ble.w	80068da <MicroVsnprintf+0x512>
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 800677a:	f857 1b04 	ldr.w	r1, [r7], #4
  if (i < 0) {
 800677e:	2900      	cmp	r1, #0
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 8006780:	eb0b 0c04 	add.w	ip, fp, r4
  if (i < 0) {
 8006784:	db6d      	blt.n	8006862 <MicroVsnprintf+0x49a>
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 8006786:	4660      	mov	r0, ip
 8006788:	4605      	mov	r5, r0
    int32_t digit = i % base;
 800678a:	fba9 3201 	umull	r3, r2, r9, r1
 800678e:	08d2      	lsrs	r2, r2, #3
 8006790:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8006794:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
 8006798:	460e      	mov	r6, r1
      character = '0' + digit;
 800679a:	3330      	adds	r3, #48	; 0x30
  } while (i > 0);
 800679c:	2e09      	cmp	r6, #9
    i /= base;
 800679e:	4611      	mov	r1, r2
 80067a0:	462a      	mov	r2, r5
    *buffer++ = character;
 80067a2:	f805 3b01 	strb.w	r3, [r5], #1
  } while (i > 0);
 80067a6:	d8f0      	bhi.n	800678a <MicroVsnprintf+0x3c2>
  *buffer = 0;
 80067a8:	f04f 0300 	mov.w	r3, #0
  while (p1 < p2) {
 80067ac:	4282      	cmp	r2, r0
  *buffer = 0;
 80067ae:	702b      	strb	r3, [r5, #0]
  while (p1 < p2) {
 80067b0:	d907      	bls.n	80067c2 <MicroVsnprintf+0x3fa>
    char tmp = *p1;
 80067b2:	7803      	ldrb	r3, [r0, #0]
    *p1++ = *p2;
 80067b4:	7811      	ldrb	r1, [r2, #0]
 80067b6:	f800 1b01 	strb.w	r1, [r0], #1
    *p2-- = tmp;
 80067ba:	f802 3901 	strb.w	r3, [r2], #-1
  while (p1 < p2) {
 80067be:	4290      	cmp	r0, r2
 80067c0:	d3f7      	bcc.n	80067b2 <MicroVsnprintf+0x3ea>
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 80067c2:	eba5 0c0c 	sub.w	ip, r5, ip
  while (*current != '\0' && output_index < usable_length) {
 80067c6:	f898 3002 	ldrb.w	r3, [r8, #2]
          output_index +=
 80067ca:	4464      	add	r4, ip
          current++;
 80067cc:	f108 0802 	add.w	r8, r8, #2
          break;
 80067d0:	e61c      	b.n	800640c <MicroVsnprintf+0x44>
  } while (i > 0);
 80067d2:	2a0f      	cmp	r2, #15
    *buffer++ = character;
 80067d4:	f801 5b01 	strb.w	r5, [r1], #1
  } while (i > 0);
 80067d8:	d90a      	bls.n	80067f0 <MicroVsnprintf+0x428>
 80067da:	460b      	mov	r3, r1
    i /= base;
 80067dc:	4602      	mov	r2, r0
 80067de:	e66a      	b.n	80064b6 <MicroVsnprintf+0xee>
          output[output_index++] = *current++;
 80067e0:	f80b 3004 	strb.w	r3, [fp, r4]
 80067e4:	f108 0802 	add.w	r8, r8, #2
  while (*current != '\0' && output_index < usable_length) {
 80067e8:	f898 3000 	ldrb.w	r3, [r8]
          output[output_index++] = *current++;
 80067ec:	3401      	adds	r4, #1
          break;
 80067ee:	e60d      	b.n	800640c <MicroVsnprintf+0x44>
  *buffer = 0;
 80067f0:	f04f 0200 	mov.w	r2, #0
  while (p1 < p2) {
 80067f4:	459e      	cmp	lr, r3
  *buffer = 0;
 80067f6:	700a      	strb	r2, [r1, #0]
  while (p1 < p2) {
 80067f8:	bf38      	it	cc
 80067fa:	4672      	movcc	r2, lr
 80067fc:	d207      	bcs.n	800680e <MicroVsnprintf+0x446>
    char tmp = *p1;
 80067fe:	7810      	ldrb	r0, [r2, #0]
    *p1++ = *p2;
 8006800:	781d      	ldrb	r5, [r3, #0]
 8006802:	f802 5b01 	strb.w	r5, [r2], #1
    *p2-- = tmp;
 8006806:	f803 0901 	strb.w	r0, [r3], #-1
  while (p1 < p2) {
 800680a:	429a      	cmp	r2, r3
 800680c:	d3f7      	bcc.n	80067fe <MicroVsnprintf+0x436>
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 800680e:	eba1 0e0e 	sub.w	lr, r1, lr
  while (*current != '\0' && output_index < usable_length) {
 8006812:	f898 3002 	ldrb.w	r3, [r8, #2]
          output_index +=
 8006816:	4474      	add	r4, lr
          current++;
 8006818:	f108 0802 	add.w	r8, r8, #2
          break;
 800681c:	e5f6      	b.n	800640c <MicroVsnprintf+0x44>
    *current = '-';
 800681e:	f04f 032d 	mov.w	r3, #45	; 0x2d
    current += 1;
 8006822:	f105 0e01 	add.w	lr, r5, #1
    *current = '-';
 8006826:	f80b 3004 	strb.w	r3, [fp, r4]
  if (exponent == 128) {
 800682a:	2e80      	cmp	r6, #128	; 0x80
  *current = 0;
 800682c:	f04f 0300 	mov.w	r3, #0
 8006830:	f04f 022d 	mov.w	r2, #45	; 0x2d
 8006834:	f88e 3000 	strb.w	r3, [lr]
  if (exponent == 128) {
 8006838:	f47f aec5 	bne.w	80065c6 <MicroVsnprintf+0x1fe>
  char* current_end = main + (main_max_length - 1);
 800683c:	4472      	add	r2, lr
    *current = *to_append;
 800683e:	4673      	mov	r3, lr
    if (fraction == 0) {
 8006840:	b9b9      	cbnz	r1, 8006872 <MicroVsnprintf+0x4aa>
  while ((*to_append != 0) && (current < current_end)) {
 8006842:	4596      	cmp	lr, r2
 8006844:	d289      	bcs.n	800675a <MicroVsnprintf+0x392>
    *current = *to_append;
 8006846:	2149      	movs	r1, #73	; 0x49
    ++to_append;
 8006848:	482e      	ldr	r0, [pc, #184]	; (8006904 <MicroVsnprintf+0x53c>)
    *current = *to_append;
 800684a:	f803 1b01 	strb.w	r1, [r3], #1
  while ((*to_append != 0) && (current < current_end)) {
 800684e:	216e      	movs	r1, #110	; 0x6e
 8006850:	429a      	cmp	r2, r3
 8006852:	d082      	beq.n	800675a <MicroVsnprintf+0x392>
    *current = *to_append;
 8006854:	f803 1b01 	strb.w	r1, [r3], #1
  while ((*to_append != 0) && (current < current_end)) {
 8006858:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 800685c:	2900      	cmp	r1, #0
 800685e:	d1f7      	bne.n	8006850 <MicroVsnprintf+0x488>
 8006860:	e77b      	b.n	800675a <MicroVsnprintf+0x392>
    *buffer++ = '-';
 8006862:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8006866:	f80b 3004 	strb.w	r3, [fp, r4]
    u = -u;
 800686a:	4249      	negs	r1, r1
    *buffer++ = '-';
 800686c:	f10c 0001 	add.w	r0, ip, #1
    u = -u;
 8006870:	e78a      	b.n	8006788 <MicroVsnprintf+0x3c0>
  while ((*to_append != 0) && (current < current_end)) {
 8006872:	4596      	cmp	lr, r2
 8006874:	f4bf af71 	bcs.w	800675a <MicroVsnprintf+0x392>
    *current = *to_append;
 8006878:	214e      	movs	r1, #78	; 0x4e
    ++to_append;
 800687a:	4823      	ldr	r0, [pc, #140]	; (8006908 <MicroVsnprintf+0x540>)
    *current = *to_append;
 800687c:	f803 1b01 	strb.w	r1, [r3], #1
  while ((*to_append != 0) && (current < current_end)) {
 8006880:	2161      	movs	r1, #97	; 0x61
 8006882:	429a      	cmp	r2, r3
 8006884:	f43f af69 	beq.w	800675a <MicroVsnprintf+0x392>
    *current = *to_append;
 8006888:	f803 1b01 	strb.w	r1, [r3], #1
  while ((*to_append != 0) && (current < current_end)) {
 800688c:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8006890:	2900      	cmp	r1, #0
 8006892:	d1f6      	bne.n	8006882 <MicroVsnprintf+0x4ba>
 8006894:	e761      	b.n	800675a <MicroVsnprintf+0x392>
  char* current_end = main + (main_max_length - 1);
 8006896:	9b03      	ldr	r3, [sp, #12]
 8006898:	f103 3cff 	add.w	ip, r3, #4294967295
 800689c:	4613      	mov	r3, r2
  if (i < 0) {
 800689e:	2e00      	cmp	r6, #0
  *current = 0;
 80068a0:	f04f 0200 	mov.w	r2, #0
 80068a4:	701a      	strb	r2, [r3, #0]
  if (i < 0) {
 80068a6:	f6bf af29 	bge.w	80066fc <MicroVsnprintf+0x334>
    *buffer++ = '-';
 80068aa:	f04f 022d 	mov.w	r2, #45	; 0x2d
 80068ae:	f88d 2018 	strb.w	r2, [sp, #24]
    u = -u;
 80068b2:	9a04      	ldr	r2, [sp, #16]
    *buffer++ = '-';
 80068b4:	f10d 0519 	add.w	r5, sp, #25
    u = -u;
 80068b8:	f1c2 067f 	rsb	r6, r2, #127	; 0x7f
 80068bc:	e71f      	b.n	80066fe <MicroVsnprintf+0x336>
    for (int i = 0; i < fraction_digits; i++) {
 80068be:	2800      	cmp	r0, #0
 80068c0:	dd1c      	ble.n	80068fc <MicroVsnprintf+0x534>
 80068c2:	4411      	add	r1, r2
 80068c4:	1a10      	subs	r0, r2, r0
      *(current + leading_zeros) = *current;
 80068c6:	f812 5d01 	ldrb.w	r5, [r2, #-1]!
 80068ca:	f801 5d01 	strb.w	r5, [r1, #-1]!
    for (int i = 0; i < fraction_digits; i++) {
 80068ce:	4290      	cmp	r0, r2
      *current = '0';
 80068d0:	f882 c000 	strb.w	ip, [r2]
    for (int i = 0; i < fraction_digits; i++) {
 80068d4:	d1f7      	bne.n	80068c6 <MicroVsnprintf+0x4fe>
    current += kMaxFractionalDigits;
 80068d6:	1dc2      	adds	r2, r0, #7
 80068d8:	e6e9      	b.n	80066ae <MicroVsnprintf+0x2e6>
            output[output_index++] = '\0';
 80068da:	2300      	movs	r3, #0
 80068dc:	f80b 3004 	strb.w	r3, [fp, r4]
 80068e0:	1c60      	adds	r0, r4, #1
            return output_index;
 80068e2:	e59b      	b.n	800641c <MicroVsnprintf+0x54>
  *current = '0';
 80068e4:	2230      	movs	r2, #48	; 0x30
 80068e6:	f88e 2002 	strb.w	r2, [lr, #2]
  current += 1;
 80068ea:	4618      	mov	r0, r3
 80068ec:	e7f3      	b.n	80068d6 <MicroVsnprintf+0x50e>
  while (*current != '\0' && output_index < usable_length) {
 80068ee:	2001      	movs	r0, #1
 80068f0:	e591      	b.n	8006416 <MicroVsnprintf+0x4e>
  *current = 0;
 80068f2:	f04f 0300 	mov.w	r3, #0
 80068f6:	700b      	strb	r3, [r1, #0]
 80068f8:	460b      	mov	r3, r1
 80068fa:	e6f9      	b.n	80066f0 <MicroVsnprintf+0x328>
    for (int i = 0; i < fraction_digits; i++) {
 80068fc:	4610      	mov	r0, r2
 80068fe:	e7ea      	b.n	80068d6 <MicroVsnprintf+0x50e>
 8006900:	080164a9 	.word	0x080164a9
 8006904:	080164a1 	.word	0x080164a1
 8006908:	080164a5 	.word	0x080164a5
 800690c:	cccccccd 	.word	0xcccccccd

08006910 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "tensorflow/lite/c/common.h"
#include "tensorflow/lite/kernels/op_macros.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
 8006910:	b410      	push	{r4}
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
 8006912:	6804      	ldr	r4, [r0, #0]
 8006914:	2c00      	cmp	r4, #0
 8006916:	dd0c      	ble.n	8006932 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x22>
 8006918:	4602      	mov	r2, r0
 800691a:	2300      	movs	r3, #0
  int result = 1;
 800691c:	2001      	movs	r0, #1
    result *= dims.data[i];
 800691e:	f852 1f04 	ldr.w	r1, [r2, #4]!
  for (int i = 0; i < dims.size; ++i) {
 8006922:	3301      	adds	r3, #1
 8006924:	42a3      	cmp	r3, r4
    result *= dims.data[i];
 8006926:	fb01 f000 	mul.w	r0, r1, r0
  for (int i = 0; i < dims.size; ++i) {
 800692a:	d1f8      	bne.n	800691e <_ZN6tflite12ElementCountERK14TfLiteIntArray+0xe>
  }
  return result;
}
 800692c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006930:	4770      	bx	lr
  int result = 1;
 8006932:	2001      	movs	r0, #1
}
 8006934:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop

0800693c <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
}

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop

08006940 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:
  }
  temp_ = aligned_result + size;
  return aligned_result;
}

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
 8006940:	6903      	ldr	r3, [r0, #16]
 8006942:	6183      	str	r3, [r0, #24]
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop

08006948 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 8006948:	b510      	push	{r4, lr}
 800694a:	211c      	movs	r1, #28
 800694c:	4604      	mov	r4, r0
 800694e:	f00a f93d 	bl	8010bcc <_ZdlPvj>
 8006952:	4620      	mov	r0, r4
 8006954:	bd10      	pop	{r4, pc}
 8006956:	bf00      	nop

08006958 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:
uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
 8006958:	b530      	push	{r4, r5, lr}
 800695a:	4605      	mov	r5, r0
 800695c:	460c      	mov	r4, r1
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 800695e:	6980      	ldr	r0, [r0, #24]
uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
 8006960:	b083      	sub	sp, #12
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 8006962:	4611      	mov	r1, r2
 8006964:	f7fd feac 	bl	80046c0 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
 8006968:	696b      	ldr	r3, [r5, #20]
 800696a:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
 800696c:	42a3      	cmp	r3, r4
 800696e:	d303      	bcc.n	8006978 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x20>
  temp_ = aligned_result + size;
 8006970:	4404      	add	r4, r0
 8006972:	61ac      	str	r4, [r5, #24]
}
 8006974:	b003      	add	sp, #12
 8006976:	bd30      	pop	{r4, r5, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
 8006978:	1ae2      	subs	r2, r4, r3
 800697a:	6868      	ldr	r0, [r5, #4]
 800697c:	4903      	ldr	r1, [pc, #12]	; (800698c <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x34>)
 800697e:	9200      	str	r2, [sp, #0]
 8006980:	4622      	mov	r2, r4
 8006982:	f7fc ff87 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
 8006986:	2000      	movs	r0, #0
 8006988:	e7f4      	b.n	8006974 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x1c>
 800698a:	bf00      	nop
 800698c:	080164ac 	.word	0x080164ac

08006990 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:
                                                 size_t alignment) {
 8006990:	b530      	push	{r4, r5, lr}
 8006992:	4604      	mov	r4, r0
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 8006994:	6940      	ldr	r0, [r0, #20]
                                                 size_t alignment) {
 8006996:	460d      	mov	r5, r1
 8006998:	b083      	sub	sp, #12
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 800699a:	4611      	mov	r1, r2
 800699c:	1b40      	subs	r0, r0, r5
 800699e:	f7fd fe97 	bl	80046d0 <_ZN6tflite16AlignPointerDownEPhj>
  if (aligned_result < head_) {
 80069a2:	6923      	ldr	r3, [r4, #16]
 80069a4:	4283      	cmp	r3, r0
  tail_ = aligned_result;
 80069a6:	bf98      	it	ls
 80069a8:	6160      	strls	r0, [r4, #20]
  if (aligned_result < head_) {
 80069aa:	d801      	bhi.n	80069b0 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x20>
}
 80069ac:	b003      	add	sp, #12
 80069ae:	bd30      	pop	{r4, r5, pc}
    const size_t missing_memory = head_ - aligned_result;
 80069b0:	1a1b      	subs	r3, r3, r0
    TF_LITE_REPORT_ERROR(error_reporter_,
 80069b2:	4904      	ldr	r1, [pc, #16]	; (80069c4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x34>)
 80069b4:	6860      	ldr	r0, [r4, #4]
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	462a      	mov	r2, r5
 80069ba:	1aeb      	subs	r3, r5, r3
 80069bc:	f7fc ff6a 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
 80069c0:	2000      	movs	r0, #0
 80069c2:	e7f3      	b.n	80069ac <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x1c>
 80069c4:	080164f8 	.word	0x080164f8

080069c8 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:
                                                      size_t alignment) {
 80069c8:	b530      	push	{r4, r5, lr}
 80069ca:	4604      	mov	r4, r0
  if (head_ != temp_) {
 80069cc:	6900      	ldr	r0, [r0, #16]
 80069ce:	69a3      	ldr	r3, [r4, #24]
 80069d0:	4298      	cmp	r0, r3
                                                      size_t alignment) {
 80069d2:	b083      	sub	sp, #12
  if (head_ != temp_) {
 80069d4:	d006      	beq.n	80069e4 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x1c>
    TF_LITE_REPORT_ERROR(
 80069d6:	490f      	ldr	r1, [pc, #60]	; (8006a14 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x4c>)
 80069d8:	6860      	ldr	r0, [r4, #4]
 80069da:	f7fc ff5b 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 80069de:	2001      	movs	r0, #1
}
 80069e0:	b003      	add	sp, #12
 80069e2:	bd30      	pop	{r4, r5, pc}
 80069e4:	460d      	mov	r5, r1
  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 80069e6:	68a0      	ldr	r0, [r4, #8]
 80069e8:	4611      	mov	r1, r2
 80069ea:	f7fd fe69 	bl	80046c0 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
 80069ee:	6963      	ldr	r3, [r4, #20]
 80069f0:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
 80069f2:	429d      	cmp	r5, r3
 80069f4:	d805      	bhi.n	8006a02 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x3a>
  head_ = aligned_result + size;
 80069f6:	4428      	add	r0, r5
 80069f8:	6120      	str	r0, [r4, #16]
  temp_ = head_;
 80069fa:	61a0      	str	r0, [r4, #24]
  return kTfLiteOk;
 80069fc:	2000      	movs	r0, #0
}
 80069fe:	b003      	add	sp, #12
 8006a00:	bd30      	pop	{r4, r5, pc}
    TF_LITE_REPORT_ERROR(
 8006a02:	1aea      	subs	r2, r5, r3
 8006a04:	6860      	ldr	r0, [r4, #4]
 8006a06:	4904      	ldr	r1, [pc, #16]	; (8006a18 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x50>)
 8006a08:	9200      	str	r2, [sp, #0]
 8006a0a:	462a      	mov	r2, r5
 8006a0c:	f7fc ff42 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 8006a10:	2001      	movs	r0, #1
 8006a12:	e7e5      	b.n	80069e0 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x18>
 8006a14:	08016544 	.word	0x08016544
 8006a18:	0801659c 	.word	0x0801659c

08006a1c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 8006a1c:	b570      	push	{r4, r5, r6, lr}
 8006a1e:	b082      	sub	sp, #8
  TFLITE_DCHECK(error_reporter != nullptr);
 8006a20:	b1a0      	cbz	r0, 8006a4c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x30>
  TFLITE_DCHECK(buffer_head != nullptr);
 8006a22:	460c      	mov	r4, r1
 8006a24:	b191      	cbz	r1, 8006a4c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x30>
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 8006a26:	188d      	adds	r5, r1, r2
 8006a28:	4606      	mov	r6, r0
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 8006a2a:	2104      	movs	r1, #4
 8006a2c:	f1a5 001c 	sub.w	r0, r5, #28
 8006a30:	f7fd fe4e 	bl	80046d0 <_ZN6tflite16AlignPointerDownEPhj>
  if (aligned_result < head_) {
 8006a34:	4284      	cmp	r4, r0
 8006a36:	d80b      	bhi.n	8006a50 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x34>
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 8006a38:	4a0c      	ldr	r2, [pc, #48]	; (8006a6c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x50>)
 8006a3a:	6002      	str	r2, [r0, #0]
 8006a3c:	e9c0 6401 	strd	r6, r4, [r0, #4]
 8006a40:	e9c0 5403 	strd	r5, r4, [r0, #12]
 8006a44:	e9c0 0405 	strd	r0, r4, [r0, #20]
}
 8006a48:	b002      	add	sp, #8
 8006a4a:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
 8006a4c:	f00a fb9a 	bl	8011184 <abort>
    const size_t missing_memory = head_ - aligned_result;
 8006a50:	1a23      	subs	r3, r4, r0
    TF_LITE_REPORT_ERROR(error_reporter_,
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	4906      	ldr	r1, [pc, #24]	; (8006a70 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x54>)
 8006a56:	f1c3 031c 	rsb	r3, r3, #28
 8006a5a:	221c      	movs	r2, #28
 8006a5c:	4630      	mov	r0, r6
 8006a5e:	f7fc ff19 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
 8006a62:	2300      	movs	r3, #0
 8006a64:	4a01      	ldr	r2, [pc, #4]	; (8006a6c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x50>)
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	deff      	udf	#255	; 0xff
 8006a6a:	bf00      	nop
 8006a6c:	080165e8 	.word	0x080165e8
 8006a70:	080164f8 	.word	0x080164f8

08006a74 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
 8006a74:	6880      	ldr	r0, [r0, #8]
 8006a76:	4770      	bx	lr

08006a78 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
 8006a78:	b538      	push	{r3, r4, r5, lr}
 8006a7a:	4604      	mov	r4, r0
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 8006a7c:	6980      	ldr	r0, [r0, #24]
size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
 8006a7e:	460d      	mov	r5, r1
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 8006a80:	f7fd fe1e 	bl	80046c0 <_ZN6tflite14AlignPointerUpEPhj>
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 8006a84:	4629      	mov	r1, r5
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 8006a86:	4603      	mov	r3, r0
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 8006a88:	6960      	ldr	r0, [r4, #20]
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 8006a8a:	461c      	mov	r4, r3
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 8006a8c:	f7fd fe20 	bl	80046d0 <_ZN6tflite16AlignPointerDownEPhj>
  return aligned_tail - aligned_temp;
}
 8006a90:	1b00      	subs	r0, r0, r4
 8006a92:	bd38      	pop	{r3, r4, r5, pc}

08006a94 <DebugLog>:
#include <stdio.h>

extern "C" void DebugLog(const char* s) {
 8006a94:	4601      	mov	r1, r0
	printf("\%s", s);
 8006a96:	4801      	ldr	r0, [pc, #4]	; (8006a9c <DebugLog+0x8>)
 8006a98:	f00b b9c6 	b.w	8011e28 <iprintf>
 8006a9c:	08016600 	.word	0x08016600

08006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 8006aa0:	b570      	push	{r4, r5, r6, lr}
 8006aa2:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
 8006aa4:	b171      	cbz	r1, 8006ac4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x24>
 8006aa6:	684d      	ldr	r5, [r1, #4]
 8006aa8:	b165      	cbz	r5, 8006ac4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x24>
    return RuntimeShape();
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
 8006aaa:	f855 6b04 	ldr.w	r6, [r5], #4
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 8006aae:	6006      	str	r6, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
 8006ab0:	2e05      	cmp	r6, #5
 8006ab2:	dc0b      	bgt.n	8006acc <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x2c>
 8006ab4:	00b6      	lsls	r6, r6, #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8006ab6:	1d20      	adds	r0, r4, #4
  }

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
    Resize(dimensions_count);
    int32_t* dst_dims = DimsData();
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8006ab8:	4632      	mov	r2, r6
 8006aba:	4629      	mov	r1, r5
 8006abc:	f00b fbbd 	bl	801223a <memcpy>
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	bd70      	pop	{r4, r5, r6, pc}
  RuntimeShape() : size_(0) {}
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	6023      	str	r3, [r4, #0]
 8006ac8:	4620      	mov	r0, r4
 8006aca:	bd70      	pop	{r4, r5, r6, pc}
      dims_pointer_ = new int32_t[dimensions_count];
 8006acc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006ad0:	429e      	cmp	r6, r3
 8006ad2:	ea4f 0686 	mov.w	r6, r6, lsl #2
 8006ad6:	bfac      	ite	ge
 8006ad8:	f04f 30ff 	movge.w	r0, #4294967295
 8006adc:	4630      	movlt	r0, r6
 8006ade:	f00a f899 	bl	8010c14 <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8006ae2:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32_t[dimensions_count];
 8006ae4:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8006ae6:	2b05      	cmp	r3, #5
 8006ae8:	dce6      	bgt.n	8006ab8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 8006aea:	e7e4      	b.n	8006ab6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x16>

08006aec <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:
  return a;
}

template <>
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
  std::int64_t a64 = a;
 8006aec:	17c3      	asrs	r3, r0, #31
  std::int64_t b64 = b;
  std::int64_t sum = a64 + b64;
  std::int64_t sign = sum >= 0 ? 1 : -1;
 8006aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af2:	bf08      	it	eq
 8006af4:	f1b0 4f00 	cmpeq.w	r0, #2147483648	; 0x80000000

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 8006af8:	b530      	push	{r4, r5, lr}
  std::int64_t sign = sum >= 0 ? 1 : -1;
 8006afa:	f000 80f2 	beq.w	8006ce2 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x1f6>
  return static_cast<std::int32_t>((sum + sign) / 2);
 8006afe:	f110 4100 	adds.w	r1, r0, #2147483648	; 0x80000000
 8006b02:	f143 0000 	adc.w	r0, r3, #0
 8006b06:	0849      	lsrs	r1, r1, #1
 8006b08:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
  std::int64_t ab_64 = a_64 * b_64;
 8006b0c:	4baa      	ldr	r3, [pc, #680]	; (8006db8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2cc>)
  return static_cast<std::int32_t>((sum + sign) / 2);
 8006b0e:	1040      	asrs	r0, r0, #1
  std::int64_t ab_64 = a_64 * b_64;
 8006b10:	424a      	negs	r2, r1
 8006b12:	fb03 2200 	mla	r2, r3, r0, r2
 8006b16:	fba1 4303 	umull	r4, r3, r1, r3
 8006b1a:	4413      	add	r3, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8006b1c:	ea51 0200 	orrs.w	r2, r1, r0
 8006b20:	f000 813d 	beq.w	8006d9e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2b2>
 8006b24:	4aa5      	ldr	r2, [pc, #660]	; (8006dbc <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2d0>)
 8006b26:	f04f 35ff 	mov.w	r5, #4294967295
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006b2a:	1912      	adds	r2, r2, r4
 8006b2c:	eb43 0305 	adc.w	r3, r3, r5
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	da04      	bge.n	8006b3e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x52>
 8006b34:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8006b38:	1912      	adds	r2, r2, r4
 8006b3a:	f143 0300 	adc.w	r3, r3, #0
 8006b3e:	0fd2      	lsrs	r2, r2, #31
 8006b40:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
  return a + b;
 8006b44:	f102 325a 	add.w	r2, r2, #1515870810	; 0x5a5a5a5a
  std::int64_t b_64(b);
 8006b48:	17d3      	asrs	r3, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
 8006b4a:	fb02 f400 	mul.w	r4, r2, r0
 8006b4e:	fb01 4403 	mla	r4, r1, r3, r4
 8006b52:	fba2 3501 	umull	r3, r5, r2, r1
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006b56:	f113 4380 	adds.w	r3, r3, #1073741824	; 0x40000000
 8006b5a:	eb44 0405 	adc.w	r4, r4, r5
 8006b5e:	0fdb      	lsrs	r3, r3, #31
 8006b60:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
  return a - b;
 8006b64:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
  std::int64_t ab_64 = a_64 * b_64;
 8006b68:	fb83 3402 	smull	r3, r4, r3, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8006b6c:	2c00      	cmp	r4, #0
 8006b6e:	f280 80bf 	bge.w	8006cf0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x204>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006b72:	4d92      	ldr	r5, [pc, #584]	; (8006dbc <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2d0>)
 8006b74:	195b      	adds	r3, r3, r5
 8006b76:	f164 0c00 	sbc.w	ip, r4, #0
 8006b7a:	f1bc 0f00 	cmp.w	ip, #0
 8006b7e:	da04      	bge.n	8006b8a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x9e>
 8006b80:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8006b84:	191b      	adds	r3, r3, r4
 8006b86:	f14c 0c00 	adc.w	ip, ip, #0
 8006b8a:	0fdb      	lsrs	r3, r3, #31
 8006b8c:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
  std::int32_t ab_x2_high32 =
 8006b90:	461c      	mov	r4, r3
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006b92:	ea4f 7cec 	mov.w	ip, ip, asr #31
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 8006b96:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
  return a ? BitNot(zero) : zero;
 8006b9a:	f1b4 4f60 	cmp.w	r4, #3758096384	; 0xe0000000
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 8006b9e:	ea4c 7c93 	orr.w	ip, ip, r3, lsr #30
 8006ba2:	ea4f 0383 	mov.w	r3, r3, lsl #2
  return a ? BitNot(zero) : zero;
 8006ba6:	bfcc      	ite	gt
 8006ba8:	2400      	movgt	r4, #0
 8006baa:	2401      	movle	r4, #1
             ? min
 8006bac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bb0:	f15c 0c00 	adcs.w	ip, ip, #0
  return a ? BitNot(zero) : zero;
 8006bb4:	f1c4 0e00 	rsb	lr, r4, #0
             ? min
 8006bb8:	f2c0 80ee 	blt.w	8006d98 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2ac>
  return a & b;
 8006bbc:	f104 3cff 	add.w	ip, r4, #4294967295
 8006bc0:	ea0c 0c03 	and.w	ip, ip, r3
 8006bc4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  return a ^ b;
 8006bc8:	ea8c 0c0e 	eor.w	ip, ip, lr
  return a + b;
 8006bcc:	4494      	add	ip, r2
  std::int64_t b_64(b);
 8006bce:	ea4f 73ec 	mov.w	r3, ip, asr #31
  std::int64_t ab_64 = a_64 * b_64;
 8006bd2:	fb0c f400 	mul.w	r4, ip, r0
 8006bd6:	fb01 4403 	mla	r4, r1, r3, r4
 8006bda:	fbac 3201 	umull	r3, r2, ip, r1
 8006bde:	4422      	add	r2, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8006be0:	2a00      	cmp	r2, #0
 8006be2:	4c76      	ldr	r4, [pc, #472]	; (8006dbc <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2d0>)
 8006be4:	bfa6      	itte	ge
 8006be6:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
 8006bea:	f04f 0e00 	movge.w	lr, #0
 8006bee:	f04f 3eff 	movlt.w	lr, #4294967295
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006bf2:	191b      	adds	r3, r3, r4
 8006bf4:	eb42 020e 	adc.w	r2, r2, lr
 8006bf8:	2a00      	cmp	r2, #0
 8006bfa:	da04      	bge.n	8006c06 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x11a>
 8006bfc:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8006c00:	191b      	adds	r3, r3, r4
 8006c02:	f142 0200 	adc.w	r2, r2, #0
 8006c06:	0fdb      	lsrs	r3, r3, #31
 8006c08:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  return a - b;
 8006c0c:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
  std::int64_t ab_64 = a_64 * b_64;
 8006c10:	fb83 340c 	smull	r3, r4, r3, ip
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8006c14:	2c00      	cmp	r4, #0
 8006c16:	f2c0 8098 	blt.w	8006d4a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x25e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006c1a:	f113 4380 	adds.w	r3, r3, #1073741824	; 0x40000000
 8006c1e:	f144 0400 	adc.w	r4, r4, #0
 8006c22:	0fdb      	lsrs	r3, r3, #31
 8006c24:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
  return a ? BitNot(zero) : zero;
 8006c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c2c:	f280 80c0 	bge.w	8006db0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2c4>
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 8006c30:	009b      	lsls	r3, r3, #2
  return a ? BitNot(zero) : zero;
 8006c32:	2200      	movs	r2, #0
  return a & b;
 8006c34:	ea23 0302 	bic.w	r3, r3, r2
 8006c38:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
  return a ^ b;
 8006c3c:	405a      	eors	r2, r3
  return a + b;
 8006c3e:	4462      	add	r2, ip
  std::int64_t b_64(b);
 8006c40:	17d3      	asrs	r3, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
 8006c42:	fb02 f000 	mul.w	r0, r2, r0
 8006c46:	fb01 0003 	mla	r0, r1, r3, r0
 8006c4a:	fba2 c401 	umull	ip, r4, r2, r1
 8006c4e:	4404      	add	r4, r0
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8006c50:	2c00      	cmp	r4, #0
 8006c52:	4b5a      	ldr	r3, [pc, #360]	; (8006dbc <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2d0>)
 8006c54:	bfa6      	itte	ge
 8006c56:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 8006c5a:	2100      	movge	r1, #0
 8006c5c:	f04f 31ff 	movlt.w	r1, #4294967295
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006c60:	eb13 030c 	adds.w	r3, r3, ip
 8006c64:	eb41 0104 	adc.w	r1, r1, r4
 8006c68:	2900      	cmp	r1, #0
 8006c6a:	da04      	bge.n	8006c76 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x18a>
 8006c6c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8006c70:	181b      	adds	r3, r3, r0
 8006c72:	f141 0100 	adc.w	r1, r1, #0
 8006c76:	0fdb      	lsrs	r3, r3, #31
 8006c78:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  return a - b;
 8006c7c:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
  std::int64_t ab_64 = a_64 * b_64;
 8006c80:	fb83 3102 	smull	r3, r1, r3, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8006c84:	2900      	cmp	r1, #0
 8006c86:	db3e      	blt.n	8006d06 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x21a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006c88:	f113 4380 	adds.w	r3, r3, #1073741824	; 0x40000000
 8006c8c:	f141 0100 	adc.w	r1, r1, #0
 8006c90:	0fdb      	lsrs	r3, r3, #31
 8006c92:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  return a ? BitNot(zero) : zero;
 8006c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c9a:	bfa8      	it	ge
 8006c9c:	f06f 4300 	mvnge.w	r3, #2147483648	; 0x80000000
 8006ca0:	da06      	bge.n	8006cb0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x1c4>
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 8006ca2:	009b      	lsls	r3, r3, #2
  return a ? BitNot(zero) : zero;
 8006ca4:	2000      	movs	r0, #0
  return a & b;
 8006ca6:	ea23 0300 	bic.w	r3, r3, r0
 8006caa:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  return a ^ b;
 8006cae:	4043      	eors	r3, r0
  return a + b;
 8006cb0:	4413      	add	r3, r2
  return a ? BitNot(zero) : zero;
 8006cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cb6:	da78      	bge.n	8006daa <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2be>
 8006cb8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006cbc:	bfcc      	ite	gt
 8006cbe:	2200      	movgt	r2, #0
 8006cc0:	2201      	movle	r2, #1
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 8006cc2:	17d9      	asrs	r1, r3, #31
 8006cc4:	18db      	adds	r3, r3, r3
 8006cc6:	4149      	adcs	r1, r1
             ? min
 8006cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ccc:	f171 31ff 	sbcs.w	r1, r1, #4294967295
  return a ? BitNot(zero) : zero;
 8006cd0:	f1c2 0400 	rsb	r4, r2, #0
             ? min
 8006cd4:	db5d      	blt.n	8006d92 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2a6>
  return a & b;
 8006cd6:	1e50      	subs	r0, r2, #1
 8006cd8:	4018      	ands	r0, r3
 8006cda:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
  return a ^ b;
 8006cde:	4060      	eors	r0, r4
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
}
 8006ce0:	bd30      	pop	{r4, r5, pc}
  return static_cast<std::int32_t>((sum + sign) / 2);
 8006ce2:	f04f 31ff 	mov.w	r1, #4294967295
  std::int64_t ab_64 = a_64 * b_64;
 8006ce6:	4b36      	ldr	r3, [pc, #216]	; (8006dc0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2d4>)
 8006ce8:	4c36      	ldr	r4, [pc, #216]	; (8006dc4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2d8>)
  return static_cast<std::int32_t>((sum + sign) / 2);
 8006cea:	4608      	mov	r0, r1
  return a + b;
 8006cec:	f04f 325a 	mov.w	r2, #1515870810	; 0x5a5a5a5a
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006cf0:	f113 4380 	adds.w	r3, r3, #1073741824	; 0x40000000
 8006cf4:	f144 0c00 	adc.w	ip, r4, #0
 8006cf8:	0fdb      	lsrs	r3, r3, #31
 8006cfa:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
  std::int32_t ab_x2_high32 =
 8006cfe:	461c      	mov	r4, r3
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006d00:	ea4f 7cec 	mov.w	ip, ip, asr #31
tIntegerType MaskIfNonZero(tIntegerType a) {
 8006d04:	e747      	b.n	8006b96 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xaa>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006d06:	482d      	ldr	r0, [pc, #180]	; (8006dbc <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2d0>)
 8006d08:	181b      	adds	r3, r3, r0
 8006d0a:	f161 0100 	sbc.w	r1, r1, #0
 8006d0e:	2900      	cmp	r1, #0
 8006d10:	da04      	bge.n	8006d1c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x230>
 8006d12:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8006d16:	181b      	adds	r3, r3, r0
 8006d18:	f141 0100 	adc.w	r1, r1, #0
 8006d1c:	0fdb      	lsrs	r3, r3, #31
 8006d1e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8006d22:	17c9      	asrs	r1, r1, #31
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 8006d24:	0089      	lsls	r1, r1, #2
  return a ? BitNot(zero) : zero;
 8006d26:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 8006d2a:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8006d2e:	ea4f 0383 	mov.w	r3, r3, lsl #2
  return a ? BitNot(zero) : zero;
 8006d32:	f04f 30ff 	mov.w	r0, #4294967295
 8006d36:	bfc8      	it	gt
 8006d38:	2000      	movgt	r0, #0
             ? min
 8006d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d3e:	f171 31ff 	sbcs.w	r1, r1, #4294967295
 8006d42:	dab0      	bge.n	8006ca6 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x1ba>
  return a ^ b;
 8006d44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d48:	e7b2      	b.n	8006cb0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x1c4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006d4a:	4a1c      	ldr	r2, [pc, #112]	; (8006dbc <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2d0>)
 8006d4c:	189a      	adds	r2, r3, r2
 8006d4e:	f164 0400 	sbc.w	r4, r4, #0
 8006d52:	2c00      	cmp	r4, #0
 8006d54:	da04      	bge.n	8006d60 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x274>
 8006d56:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006d5a:	18d2      	adds	r2, r2, r3
 8006d5c:	f144 0400 	adc.w	r4, r4, #0
 8006d60:	0fd2      	lsrs	r2, r2, #31
 8006d62:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8006d66:	17e4      	asrs	r4, r4, #31
  return a ? BitNot(zero) : zero;
 8006d68:	f1b2 4f60 	cmp.w	r2, #3758096384	; 0xe0000000
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 8006d6c:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8006d70:	ea4f 0484 	mov.w	r4, r4, lsl #2
 8006d74:	ea44 7492 	orr.w	r4, r4, r2, lsr #30
  return a ? BitNot(zero) : zero;
 8006d78:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7c:	bfc8      	it	gt
 8006d7e:	2200      	movgt	r2, #0
             ? min
 8006d80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d84:	f174 34ff 	sbcs.w	r4, r4, #4294967295
 8006d88:	f6bf af54 	bge.w	8006c34 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x148>
  return a ^ b;
 8006d8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d90:	e755      	b.n	8006c3e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x152>
             ? min
 8006d92:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006d96:	bd30      	pop	{r4, r5, pc}
  return a ^ b;
 8006d98:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8006d9c:	e716      	b.n	8006bcc <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xe0>
 8006d9e:	460c      	mov	r4, r1
 8006da0:	4603      	mov	r3, r0
 8006da2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006da6:	2500      	movs	r5, #0
 8006da8:	e6bf      	b.n	8006b2a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x3e>
 8006daa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
 8006dae:	bd30      	pop	{r4, r5, pc}
  return a ? BitNot(zero) : zero;
 8006db0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006db4:	e743      	b.n	8006c3e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x152>
 8006db6:	bf00      	nop
 8006db8:	c3c3c3c4 	.word	0xc3c3c3c4
 8006dbc:	c0000001 	.word	0xc0000001
 8006dc0:	9a5a5a5a 	.word	0x9a5a5a5a
 8006dc4:	0b4b4b4b 	.word	0x0b4b4b4b

08006dc8 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
  return a + b;
 8006dc8:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006dcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	fbc0 3200 	smlal	r3, r2, r0, r0
 8006dd6:	2a00      	cmp	r2, #0
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 8006dd8:	b570      	push	{r4, r5, r6, lr}
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006dda:	da04      	bge.n	8006de6 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x1e>
 8006ddc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006de0:	185b      	adds	r3, r3, r1
 8006de2:	f142 0200 	adc.w	r2, r2, #0
 8006de6:	17d1      	asrs	r1, r2, #31
 8006de8:	0fdb      	lsrs	r3, r3, #31
 8006dea:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  std::int64_t a_64(a);
 8006dee:	17c4      	asrs	r4, r0, #31
  std::int64_t ab_64 = a_64 * b_64;
 8006df0:	fb00 f201 	mul.w	r2, r0, r1
 8006df4:	fb03 2204 	mla	r2, r3, r4, r2
 8006df8:	fba0 5e03 	umull	r5, lr, r0, r3
 8006dfc:	4496      	add	lr, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8006dfe:	f1be 0f00 	cmp.w	lr, #0
  std::int64_t ab_64 = a_64 * b_64;
 8006e02:	fba3 2c03 	umull	r2, ip, r3, r3
 8006e06:	fb03 f601 	mul.w	r6, r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8006e0a:	bfa8      	it	ge
 8006e0c:	2400      	movge	r4, #0
 8006e0e:	4935      	ldr	r1, [pc, #212]	; (8006ee4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x11c>)
 8006e10:	bfb4      	ite	lt
 8006e12:	f04f 34ff 	movlt.w	r4, #4294967295
 8006e16:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006e1a:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
 8006e1e:	eb4c 0c46 	adc.w	ip, ip, r6, lsl #1
 8006e22:	f1bc 0f00 	cmp.w	ip, #0
 8006e26:	da04      	bge.n	8006e32 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x6a>
 8006e28:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 8006e2c:	1992      	adds	r2, r2, r6
 8006e2e:	f14c 0c00 	adc.w	ip, ip, #0
 8006e32:	0fd2      	lsrs	r2, r2, #31
 8006e34:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
  return a + b;
 8006e38:	2a00      	cmp	r2, #0
 8006e3a:	bfac      	ite	ge
 8006e3c:	2601      	movge	r6, #1
 8006e3e:	2602      	movlt	r6, #2
  return a & b;
 8006e40:	f002 0c03 	and.w	ip, r2, #3
  return a >> offset;
 8006e44:	1092      	asrs	r2, r2, #2
  return a + b;
 8006e46:	45b4      	cmp	ip, r6
 8006e48:	bfc8      	it	gt
 8006e4a:	3201      	addgt	r2, #1
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006e4c:	1949      	adds	r1, r1, r5
 8006e4e:	eb44 040e 	adc.w	r4, r4, lr
 8006e52:	2c00      	cmp	r4, #0
 8006e54:	da04      	bge.n	8006e60 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x98>
 8006e56:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8006e5a:	1949      	adds	r1, r1, r5
 8006e5c:	f144 0400 	adc.w	r4, r4, #0
 8006e60:	0fc9      	lsrs	r1, r1, #31
 8006e62:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
  std::int64_t ab_64 = a_64 * b_64;
 8006e66:	4c20      	ldr	r4, [pc, #128]	; (8006ee8 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x120>)
  return a + b;
 8006e68:	440a      	add	r2, r1
  std::int64_t ab_64 = a_64 * b_64;
 8006e6a:	fb82 2104 	smull	r2, r1, r2, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8006e6e:	2900      	cmp	r1, #0
 8006e70:	4c1c      	ldr	r4, [pc, #112]	; (8006ee4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x11c>)
 8006e72:	bfa6      	itte	ge
 8006e74:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
 8006e78:	2500      	movge	r5, #0
 8006e7a:	f04f 35ff 	movlt.w	r5, #4294967295
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006e7e:	1912      	adds	r2, r2, r4
 8006e80:	eb41 0105 	adc.w	r1, r1, r5
 8006e84:	2900      	cmp	r1, #0
 8006e86:	da04      	bge.n	8006e92 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xca>
 8006e88:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8006e8c:	1912      	adds	r2, r2, r4
 8006e8e:	f141 0100 	adc.w	r1, r1, #0
 8006e92:	0fd2      	lsrs	r2, r2, #31
 8006e94:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
  return a + b;
 8006e98:	4413      	add	r3, r2
  return a & b;
 8006e9a:	f003 0201 	and.w	r2, r3, #1
  return a ? BitNot(zero) : zero;
 8006e9e:	2b00      	cmp	r3, #0
  return a + b;
 8006ea0:	bfa8      	it	ge
 8006ea2:	eb02 0363 	addge.w	r3, r2, r3, asr #1
  return a ? BitNot(zero) : zero;
 8006ea6:	db1b      	blt.n	8006ee0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x118>
  std::int64_t ab_64 = a_64 * b_64;
 8006ea8:	4a10      	ldr	r2, [pc, #64]	; (8006eec <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x124>)
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8006eaa:	490e      	ldr	r1, [pc, #56]	; (8006ee4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x11c>)
  return a + b;
 8006eac:	4403      	add	r3, r0
  std::int64_t ab_64 = a_64 * b_64;
 8006eae:	fb83 3202 	smull	r3, r2, r3, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8006eb2:	2a00      	cmp	r2, #0
 8006eb4:	bfa6      	itte	ge
 8006eb6:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
 8006eba:	2000      	movge	r0, #0
 8006ebc:	f04f 30ff 	movlt.w	r0, #4294967295
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006ec0:	185b      	adds	r3, r3, r1
 8006ec2:	eb42 0200 	adc.w	r2, r2, r0
 8006ec6:	2a00      	cmp	r2, #0
 8006ec8:	da04      	bge.n	8006ed4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x10c>
 8006eca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ece:	185b      	adds	r3, r3, r1
 8006ed0:	f142 0200 	adc.w	r2, r2, #0
  return a + b;
 8006ed4:	4805      	ldr	r0, [pc, #20]	; (8006eec <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x124>)
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006ed6:	0fdb      	lsrs	r3, r3, #31
 8006ed8:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  return a + b;
 8006edc:	4418      	add	r0, r3
}
 8006ede:	bd70      	pop	{r4, r5, r6, pc}
  return a >> offset;
 8006ee0:	105b      	asrs	r3, r3, #1
tIntegerType MaskIfNonZero(tIntegerType a) {
 8006ee2:	e7e1      	b.n	8006ea8 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xe0>
 8006ee4:	c0000001 	.word	0xc0000001
 8006ee8:	2aaaaaab 	.word	0x2aaaaaab
 8006eec:	70f5a894 	.word	0x70f5a894

08006ef0 <_ZN6tflite3ops5micro6reduce10InitReduceEP13TfLiteContextPKcj>:
  float output_scale;
  int num_output_elements;
};

void* InitReduce(TfLiteContext* context, const char* buffer, size_t length) {
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8006ef0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006ef2:	2124      	movs	r1, #36	; 0x24
 8006ef4:	4718      	bx	r3
 8006ef6:	bf00      	nop

08006ef8 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode>:
                         "is supported.");
  }
  return kTfLiteOk;
}

TfLiteStatus EvalMax(TfLiteContext* context, TfLiteNode* node) {
 8006ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efc:	ed2d 8b02 	vpush	{d8}
 8006f00:	b08d      	sub	sp, #52	; 0x34
// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
  TFLITE_DCHECK(context != nullptr);
 8006f02:	2800      	cmp	r0, #0
 8006f04:	f000 8184 	beq.w	8007210 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x318>
  TFLITE_DCHECK(node != nullptr);
 8006f08:	460f      	mov	r7, r1
 8006f0a:	2900      	cmp	r1, #0
 8006f0c:	f000 8180 	beq.w	8007210 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x318>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8006f10:	680a      	ldr	r2, [r1, #0]
 8006f12:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006f14:	6851      	ldr	r1, [r2, #4]
 8006f16:	4604      	mov	r4, r0
 8006f18:	4798      	blx	r3
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006f1e:	6891      	ldr	r1, [r2, #8]
 8006f20:	4606      	mov	r6, r0
 8006f22:	4620      	mov	r0, r4
 8006f24:	4798      	blx	r3
// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
  TFLITE_DCHECK(context != nullptr);
  TFLITE_DCHECK(node != nullptr);
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8006f26:	687b      	ldr	r3, [r7, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8006f28:	4680      	mov	r8, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8006f2a:	6859      	ldr	r1, [r3, #4]
 8006f2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006f2e:	4620      	mov	r0, r4
 8006f30:	4798      	blx	r3
 8006f32:	4605      	mov	r5, r0
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
  const TfLiteEvalTensor* axis = tflite::micro::GetEvalInput(context, node, 1);
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8006f34:	7a30      	ldrb	r0, [r6, #8]
 8006f36:	7a2b      	ldrb	r3, [r5, #8]
 8006f38:	4283      	cmp	r3, r0
 8006f3a:	d01a      	beq.n	8006f72 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x7a>
 8006f3c:	6966      	ldr	r6, [r4, #20]
 8006f3e:	f7fc fc9d 	bl	800387c <TfLiteTypeGetName>
 8006f42:	4603      	mov	r3, r0
 8006f44:	7a28      	ldrb	r0, [r5, #8]
 8006f46:	461d      	mov	r5, r3
 8006f48:	f7fc fc98 	bl	800387c <TfLiteTypeGetName>
 8006f4c:	49b9      	ldr	r1, [pc, #740]	; (8007234 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x33c>)
 8006f4e:	4bba      	ldr	r3, [pc, #744]	; (8007238 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x340>)
 8006f50:	4aba      	ldr	r2, [pc, #744]	; (800723c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x344>)
 8006f52:	e9cd 3100 	strd	r3, r1, [sp]
 8006f56:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8006f5a:	49b9      	ldr	r1, [pc, #740]	; (8007240 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x348>)
 8006f5c:	f240 1309 	movw	r3, #265	; 0x109
 8006f60:	4620      	mov	r0, r4
 8006f62:	47b0      	blx	r6
 8006f64:	2701      	movs	r7, #1
      TF_LITE_KERNEL_LOG(context,
                         "Only float32 and int8 types are supported.\n");
      return kTfLiteError;
  }
  return kTfLiteOk;
}
 8006f66:	4638      	mov	r0, r7
 8006f68:	b00d      	add	sp, #52	; 0x34
 8006f6a:	ecbd 8b02 	vpop	{d8}
 8006f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int num_axis = static_cast<int>(ElementCount(*axis->dims));
 8006f72:	f8d8 0004 	ldr.w	r0, [r8, #4]
  OpData* op_data = static_cast<OpData*>(node->user_data);
 8006f76:	f8d7 9010 	ldr.w	r9, [r7, #16]
  int num_axis = static_cast<int>(ElementCount(*axis->dims));
 8006f7a:	f7ff fcc9 	bl	8006910 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
      context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 8006f7e:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8006f82:	6c63      	ldr	r3, [r4, #68]	; 0x44
  int num_axis = static_cast<int>(ElementCount(*axis->dims));
 8006f84:	4682      	mov	sl, r0
      context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 8006f86:	4620      	mov	r0, r4
 8006f88:	4798      	blx	r3
      context->GetScratchBuffer(context, op_data->resolved_axis_idx));
 8006f8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006f8c:	f8d9 100c 	ldr.w	r1, [r9, #12]
      context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 8006f90:	4683      	mov	fp, r0
      context->GetScratchBuffer(context, op_data->resolved_axis_idx));
 8006f92:	4620      	mov	r0, r4
 8006f94:	4798      	blx	r3
  switch (input->type) {
 8006f96:	7a37      	ldrb	r7, [r6, #8]
 8006f98:	2f01      	cmp	r7, #1
      context->GetScratchBuffer(context, op_data->resolved_axis_idx));
 8006f9a:	4603      	mov	r3, r0
  switch (input->type) {
 8006f9c:	d02c      	beq.n	8006ff8 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x100>
 8006f9e:	2f09      	cmp	r7, #9
 8006fa0:	d11f      	bne.n	8006fe2 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0xea>
      TF_LITE_ENSURE_EQ(context, static_cast<double>(op_data->input_scale),
 8006fa2:	ed99 8a05 	vldr	s16, [r9, #20]
 8006fa6:	edd9 7a07 	vldr	s15, [r9, #28]
 8006faa:	eeb4 8a67 	vcmp.f32	s16, s15
 8006fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb2:	f040 80fd 	bne.w	80071b0 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x2b8>
      TF_LITE_ENSURE_EQ(context, op_data->input_zp, op_data->output_zp);
 8006fb6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8006fba:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8006fbe:	428a      	cmp	r2, r1
 8006fc0:	f000 814c 	beq.w	800725c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x364>
 8006fc4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8006fc8:	489e      	ldr	r0, [pc, #632]	; (8007244 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x34c>)
 8006fca:	4b9f      	ldr	r3, [pc, #636]	; (8007248 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x350>)
 8006fcc:	6965      	ldr	r5, [r4, #20]
 8006fce:	4a9b      	ldr	r2, [pc, #620]	; (800723c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x344>)
 8006fd0:	499e      	ldr	r1, [pc, #632]	; (800724c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x354>)
 8006fd2:	e9cd 3000 	strd	r3, r0, [sp]
 8006fd6:	f44f 7393 	mov.w	r3, #294	; 0x126
 8006fda:	4620      	mov	r0, r4
 8006fdc:	47a8      	blx	r5
 8006fde:	2701      	movs	r7, #1
 8006fe0:	e7c1      	b.n	8006f66 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x6e>
      TF_LITE_KERNEL_LOG(context,
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	6963      	ldr	r3, [r4, #20]
 8006fe6:	499a      	ldr	r1, [pc, #616]	; (8007250 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x358>)
 8006fe8:	4798      	blx	r3
      return kTfLiteError;
 8006fea:	2701      	movs	r7, #1
}
 8006fec:	4638      	mov	r0, r7
 8006fee:	b00d      	add	sp, #52	; 0x34
 8006ff0:	ecbd 8b02 	vpop	{d8}
 8006ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      TF_LITE_ENSURE(
 8006ff8:	6872      	ldr	r2, [r6, #4]

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
  TFLITE_DCHECK(tensor != nullptr);
  return reinterpret_cast<const T*>(tensor->data.raw);
 8006ffa:	6831      	ldr	r1, [r6, #0]
 8006ffc:	9108      	str	r1, [sp, #32]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8006ffe:	e9d5 1600 	ldrd	r1, r6, [r5]
 8007002:	6815      	ldr	r5, [r2, #0]
  return reinterpret_cast<const T*>(tensor->data.raw);
 8007004:	f8d8 e000 	ldr.w	lr, [r8]
 8007008:	9209      	str	r2, [sp, #36]	; 0x24
                          const int* axis, const int64_t num_axis_dimensions,
                          bool keep_dims, int* temp_index, int* resolved_axis,
                          T init_value,
                          T reducer(const T current, const T in)) {
  // Return early when input shape has zero dim.
  for (int i = 0; i < input_num_dims; ++i) {
 800700a:	2d00      	cmp	r5, #0
 800700c:	f8d6 8000 	ldr.w	r8, [r6]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8007010:	9107      	str	r1, [sp, #28]
 8007012:	dd10      	ble.n	8007036 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x13e>
 8007014:	4611      	mov	r1, r2
 8007016:	2200      	movs	r2, #0
 8007018:	e002      	b.n	8007020 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x128>
 800701a:	3201      	adds	r2, #1
 800701c:	4295      	cmp	r5, r2
 800701e:	d00a      	beq.n	8007036 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x13e>
    if (input_dims[i] == 0) return true;
 8007020:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8007024:	2800      	cmp	r0, #0
 8007026:	d1f8      	bne.n	800701a <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x122>
  return kTfLiteOk;
 8007028:	2700      	movs	r7, #0
}
 800702a:	4638      	mov	r0, r7
 800702c:	b00d      	add	sp, #52	; 0x34
 800702e:	ecbd 8b02 	vpop	{d8}
 8007032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (int idx = 0; idx < num_dims; ++idx) {
 8007036:	f1b8 0f00 	cmp.w	r8, #0
  size_t num_elements = 1;
 800703a:	f04f 0201 	mov.w	r2, #1
  for (int idx = 0; idx < num_dims; ++idx) {
 800703e:	dd11      	ble.n	8007064 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x16c>
    size_t current = static_cast<size_t>(dims[idx]);
 8007040:	f856 0f04 	ldr.w	r0, [r6, #4]!
  for (int idx = 0; idx < num_dims; ++idx) {
 8007044:	2100      	movs	r1, #0
 8007046:	46a1      	mov	r9, r4
 8007048:	e006      	b.n	8007058 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x160>
    size_t current = static_cast<size_t>(dims[idx]);
 800704a:	f856 0f04 	ldr.w	r0, [r6, #4]!
    if (num_elements > std::numeric_limits<size_t>::max() / current) {
 800704e:	fba0 c402 	umull	ip, r4, r0, r2
 8007052:	2c00      	cmp	r4, #0
 8007054:	f040 81fb 	bne.w	800744e <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x556>
  for (int idx = 0; idx < num_dims; ++idx) {
 8007058:	3101      	adds	r1, #1
 800705a:	4588      	cmp	r8, r1
    num_elements *= current;
 800705c:	fb00 f202 	mul.w	r2, r0, r2
  for (int idx = 0; idx < num_dims; ++idx) {
 8007060:	d1f3      	bne.n	800704a <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x152>
  for (size_t idx = 0; idx < num_elements; ++idx) {
 8007062:	b142      	cbz	r2, 8007076 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x17e>
 8007064:	9807      	ldr	r0, [sp, #28]
    data[idx] = init_value;
 8007066:	f46f 0400 	mvn.w	r4, #8388608	; 0x800000
  for (size_t idx = 0; idx < num_elements; ++idx) {
 800706a:	2100      	movs	r1, #0
 800706c:	3101      	adds	r1, #1
 800706e:	4291      	cmp	r1, r2
    data[idx] = init_value;
 8007070:	f840 4b04 	str.w	r4, [r0], #4
  for (size_t idx = 0; idx < num_elements; ++idx) {
 8007074:	d3fa      	bcc.n	800706c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x174>
  if (num_dims == 0) {
 8007076:	2d00      	cmp	r5, #0
 8007078:	f000 8108 	beq.w	800728c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x394>
      TF_LITE_ENSURE(
 800707c:	ea4f 78ea 	mov.w	r8, sl, asr #31
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 8007080:	f1ba 0f01 	cmp.w	sl, #1
 8007084:	f178 0200 	sbcs.w	r2, r8, #0
                               output_data)) {
    return false;
  }

  // Resolve axis.
  int num_resolved_axis = 0;
 8007088:	bfb8      	it	lt
 800708a:	2400      	movlt	r4, #0
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 800708c:	db21      	blt.n	80070d2 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x1da>
  int num_resolved_axis = 0;
 800708e:	2400      	movs	r4, #0
 8007090:	f1ae 0e04 	sub.w	lr, lr, #4
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 8007094:	4627      	mov	r7, r4
 8007096:	46a4      	mov	ip, r4
    int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];
 8007098:	f85e 6f04 	ldr.w	r6, [lr, #4]!
 800709c:	2e00      	cmp	r6, #0
 800709e:	f2c0 80b4 	blt.w	800720a <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x312>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 80070a2:	42b5      	cmp	r5, r6
 80070a4:	f340 80b4 	ble.w	8007210 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x318>
    for (int j = 0; j < *out_num_axis; ++j) {
 80070a8:	2c00      	cmp	r4, #0
 80070aa:	f000 80aa 	beq.w	8007202 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x30a>
 80070ae:	1f19      	subs	r1, r3, #4
 80070b0:	2200      	movs	r2, #0
 80070b2:	e003      	b.n	80070bc <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x1c4>
 80070b4:	3201      	adds	r2, #1
 80070b6:	42a2      	cmp	r2, r4
 80070b8:	f000 80a3 	beq.w	8007202 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x30a>
      if (out_axis[j] == current) {
 80070bc:	f851 0f04 	ldr.w	r0, [r1, #4]!
 80070c0:	42b0      	cmp	r0, r6
 80070c2:	d1f7      	bne.n	80070b4 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x1bc>
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 80070c4:	3701      	adds	r7, #1
 80070c6:	f14c 0c00 	adc.w	ip, ip, #0
 80070ca:	45e0      	cmp	r8, ip
 80070cc:	bf08      	it	eq
 80070ce:	45ba      	cmpeq	sl, r7
 80070d0:	d1e2      	bne.n	8007098 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x1a0>
  for (int idx = 0; idx < input_num_dims; ++idx) {
 80070d2:	2d00      	cmp	r5, #0
 80070d4:	bfd8      	it	le
 80070d6:	00af      	lslle	r7, r5, #2
 80070d8:	dd07      	ble.n	80070ea <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x1f2>
    input_iter[idx] = 0;
 80070da:	00af      	lsls	r7, r5, #2
 80070dc:	463a      	mov	r2, r7
 80070de:	2100      	movs	r1, #0
 80070e0:	4658      	mov	r0, fp
 80070e2:	930a      	str	r3, [sp, #40]	; 0x28
 80070e4:	f00a ffc4 	bl	8012070 <memset>
 80070e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070ec:	1c6a      	adds	r2, r5, #1
 80070ee:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    return false;
  }
  TFLITE_DCHECK(dims != nullptr);
  TFLITE_DCHECK(current != nullptr);
  int carry = 1;
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 80070f2:	f105 3aff 	add.w	sl, r5, #4294967295
 80070f6:	920a      	str	r2, [sp, #40]	; 0x28
 80070f8:	eb0b 028a 	add.w	r2, fp, sl, lsl #2
 80070fc:	440f      	add	r7, r1
 80070fe:	920b      	str	r2, [sp, #44]	; 0x2c
  if (num_dims == 0) {
    return 0;
  }
  TFLITE_DCHECK(dims != nullptr);
  TFLITE_DCHECK(index != nullptr);
  size_t offset = 0;
 8007100:	f04f 0c00 	mov.w	ip, #0
          break;
        }
      }
    }
    if (!is_axis) {
      offset = offset * static_cast<size_t>(dims[idx]) +
 8007104:	f101 0e04 	add.w	lr, r1, #4
  if (num_dims == 0) {
 8007108:	2d00      	cmp	r5, #0
 800710a:	f000 8083 	beq.w	8007214 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x31c>
  TFLITE_DCHECK(index != nullptr);
 800710e:	f1bb 0f00 	cmp.w	fp, #0
 8007112:	d07d      	beq.n	8007210 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x318>
  for (int idx = 0; idx < num_dims; ++idx) {
 8007114:	2d00      	cmp	r5, #0
 8007116:	f340 8191 	ble.w	800743c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x544>
 800711a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800711c:	f1ab 0104 	sub.w	r1, fp, #4
  size_t offset = 0;
 8007120:	2000      	movs	r0, #0
 8007122:	4698      	mov	r8, r3
      offset = offset * static_cast<size_t>(dims[idx]) +
 8007124:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8007128:	f851 6f04 	ldr.w	r6, [r1, #4]!
  for (int idx = 0; idx < num_dims; ++idx) {
 800712c:	4297      	cmp	r7, r2
      offset = offset * static_cast<size_t>(dims[idx]) +
 800712e:	fb03 6000 	mla	r0, r3, r0, r6
  for (int idx = 0; idx < num_dims; ++idx) {
 8007132:	d1f7      	bne.n	8007124 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x22c>
 8007134:	2600      	movs	r6, #0
 8007136:	4643      	mov	r3, r8
 8007138:	4631      	mov	r1, r6
 800713a:	4681      	mov	r9, r0
    if (axis != nullptr) {
 800713c:	2b00      	cmp	r3, #0
 800713e:	d152      	bne.n	80071e6 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x2ee>
      offset = offset * static_cast<size_t>(dims[idx]) +
 8007140:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
 8007144:	f85e 0021 	ldr.w	r0, [lr, r1, lsl #2]
 8007148:	fb00 2606 	mla	r6, r0, r6, r2
  for (int idx = 0; idx < num_dims; ++idx) {
 800714c:	3101      	adds	r1, #1
 800714e:	428d      	cmp	r5, r1
 8007150:	d1f4      	bne.n	800713c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x244>
        reducer(output_data[output_offset], input_data[input_offset]);
 8007152:	9a08      	ldr	r2, [sp, #32]
 8007154:	eb02 0089 	add.w	r0, r2, r9, lsl #2
 8007158:	9a07      	ldr	r2, [sp, #28]
 800715a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800715e:	edd0 7a00 	vldr	s15, [r0]
 8007162:	ed96 7a00 	vldr	s14, [r6]
 8007166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800716a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800716e:	dd01      	ble.n	8007174 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x27c>
    output_data[output_offset] =
 8007170:	edc6 7a00 	vstr	s15, [r6]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8007174:	f1ba 0f00 	cmp.w	sl, #0
 8007178:	f6ff af56 	blt.w	8007028 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x130>
 800717c:	e9dd 610a 	ldrd	r6, r1, [sp, #40]	; 0x28
 8007180:	4650      	mov	r0, sl
 8007182:	4699      	mov	r9, r3
 8007184:	e005      	b.n	8007192 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x29a>
 8007186:	3801      	subs	r0, #1
 8007188:	1c43      	adds	r3, r0, #1
      current[idx] = 0;
 800718a:	f8c1 c004 	str.w	ip, [r1, #4]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 800718e:	f43f af4b 	beq.w	8007028 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x130>
    int current_val = current[idx] + carry;
 8007192:	4688      	mov	r8, r1
    TFLITE_DCHECK_GE(dims[idx], current_val);
 8007194:	f856 3d04 	ldr.w	r3, [r6, #-4]!
    int current_val = current[idx] + carry;
 8007198:	f8d8 2000 	ldr.w	r2, [r8]
 800719c:	3201      	adds	r2, #1
    TFLITE_DCHECK_GE(dims[idx], current_val);
 800719e:	429a      	cmp	r2, r3
 80071a0:	f1a1 0104 	sub.w	r1, r1, #4
 80071a4:	dc34      	bgt.n	8007210 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x318>
    if (dims[idx] == current_val) {
 80071a6:	d0ee      	beq.n	8007186 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x28e>
      current[idx] = current_val;
 80071a8:	464b      	mov	r3, r9
 80071aa:	f8c8 2000 	str.w	r2, [r8]
  return (carry == 0);
 80071ae:	e7ab      	b.n	8007108 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x210>
      TF_LITE_ENSURE_EQ(context, static_cast<double>(op_data->input_scale),
 80071b0:	ee17 0a90 	vmov	r0, s15
 80071b4:	f7f9 f9d8 	bl	8000568 <__aeabi_f2d>
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	ee18 0a10 	vmov	r0, s16
 80071c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80071c4:	f7f9 f9d0 	bl	8000568 <__aeabi_f2d>
 80071c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071cc:	4a21      	ldr	r2, [pc, #132]	; (8007254 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x35c>)
 80071ce:	9201      	str	r2, [sp, #4]
 80071d0:	4b21      	ldr	r3, [pc, #132]	; (8007258 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x360>)
 80071d2:	6965      	ldr	r5, [r4, #20]
 80071d4:	4a19      	ldr	r2, [pc, #100]	; (800723c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x344>)
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	491c      	ldr	r1, [pc, #112]	; (800724c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x354>)
 80071da:	f44f 7392 	mov.w	r3, #292	; 0x124
 80071de:	4620      	mov	r0, r4
 80071e0:	47a8      	blx	r5
 80071e2:	2701      	movs	r7, #1
 80071e4:	e6bf      	b.n	8006f66 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x6e>
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
 80071e6:	2c00      	cmp	r4, #0
 80071e8:	d0aa      	beq.n	8007140 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x248>
 80071ea:	f1a3 0804 	sub.w	r8, r3, #4
 80071ee:	2200      	movs	r2, #0
 80071f0:	e002      	b.n	80071f8 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x300>
 80071f2:	3201      	adds	r2, #1
 80071f4:	42a2      	cmp	r2, r4
 80071f6:	d0a3      	beq.n	8007140 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x248>
        if (idx == axis[axis_idx]) {
 80071f8:	f858 0f04 	ldr.w	r0, [r8, #4]!
 80071fc:	4288      	cmp	r0, r1
 80071fe:	d1f8      	bne.n	80071f2 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x2fa>
 8007200:	e7a4      	b.n	800714c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x254>
      out_axis[*out_num_axis] = current;
 8007202:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
      *out_num_axis += 1;
 8007206:	3401      	adds	r4, #1
 8007208:	e75c      	b.n	80070c4 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x1cc>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 800720a:	1976      	adds	r6, r6, r5
 800720c:	f57f af49 	bpl.w	80070a2 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x1aa>
  TFLITE_DCHECK(context != nullptr);
 8007210:	f009 ffb8 	bl	8011184 <abort>
        reducer(output_data[output_offset], input_data[input_offset]);
 8007214:	9b08      	ldr	r3, [sp, #32]
 8007216:	edd3 7a00 	vldr	s15, [r3]
      TF_LITE_ENSURE(
 800721a:	9b07      	ldr	r3, [sp, #28]
 800721c:	ed93 7a00 	vldr	s14, [r3]
 8007220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007228:	f57f aefe 	bpl.w	8007028 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x130>
    output_data[output_offset] =
 800722c:	edc3 7a00 	vstr	s15, [r3]
  return kTfLiteOk;
 8007230:	462f      	mov	r7, r5
 8007232:	e698      	b.n	8006f66 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x6e>
 8007234:	08016654 	.word	0x08016654
 8007238:	08016664 	.word	0x08016664
 800723c:	08016604 	.word	0x08016604
 8007240:	08016638 	.word	0x08016638
 8007244:	080166c8 	.word	0x080166c8
 8007248:	080166dc 	.word	0x080166dc
 800724c:	08015678 	.word	0x08015678
 8007250:	080166f0 	.word	0x080166f0
 8007254:	08016670 	.word	0x08016670
 8007258:	0801669c 	.word	0x0801669c
  return reinterpret_cast<const T*>(tensor->data.raw);
 800725c:	e9d6 2700 	ldrd	r2, r7, [r6]
 8007260:	9208      	str	r2, [sp, #32]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8007262:	e9d5 2600 	ldrd	r2, r6, [r5]
      TF_LITE_ENSURE(
 8007266:	683d      	ldr	r5, [r7, #0]
  return reinterpret_cast<const T*>(tensor->data.raw);
 8007268:	f8d8 8000 	ldr.w	r8, [r8]
 800726c:	f8d6 e000 	ldr.w	lr, [r6]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8007270:	9207      	str	r2, [sp, #28]
  for (int i = 0; i < input_num_dims; ++i) {
 8007272:	2d00      	cmp	r5, #0
 8007274:	dd0d      	ble.n	8007292 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x39a>
 8007276:	4639      	mov	r1, r7
 8007278:	2200      	movs	r2, #0
 800727a:	e002      	b.n	8007282 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x38a>
 800727c:	3201      	adds	r2, #1
 800727e:	4295      	cmp	r5, r2
 8007280:	d007      	beq.n	8007292 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x39a>
    if (input_dims[i] == 0) return true;
 8007282:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8007286:	2800      	cmp	r0, #0
 8007288:	d1f8      	bne.n	800727c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x384>
 800728a:	e6cd      	b.n	8007028 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x130>
  int num_resolved_axis = 0;
 800728c:	462c      	mov	r4, r5
 800728e:	462f      	mov	r7, r5
 8007290:	e72b      	b.n	80070ea <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x1f2>
  for (int idx = 0; idx < num_dims; ++idx) {
 8007292:	f1be 0f00 	cmp.w	lr, #0
  size_t num_elements = 1;
 8007296:	f04f 0201 	mov.w	r2, #1
  for (int idx = 0; idx < num_dims; ++idx) {
 800729a:	dd11      	ble.n	80072c0 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x3c8>
    size_t current = static_cast<size_t>(dims[idx]);
 800729c:	f856 0f04 	ldr.w	r0, [r6, #4]!
  for (int idx = 0; idx < num_dims; ++idx) {
 80072a0:	2100      	movs	r1, #0
 80072a2:	46a1      	mov	r9, r4
 80072a4:	e006      	b.n	80072b4 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x3bc>
    size_t current = static_cast<size_t>(dims[idx]);
 80072a6:	f856 0f04 	ldr.w	r0, [r6, #4]!
    if (num_elements > std::numeric_limits<size_t>::max() / current) {
 80072aa:	fba0 c402 	umull	ip, r4, r0, r2
 80072ae:	2c00      	cmp	r4, #0
 80072b0:	f040 80d8 	bne.w	8007464 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x56c>
  for (int idx = 0; idx < num_dims; ++idx) {
 80072b4:	3101      	adds	r1, #1
 80072b6:	458e      	cmp	lr, r1
    num_elements *= current;
 80072b8:	fb00 f202 	mul.w	r2, r0, r2
  for (int idx = 0; idx < num_dims; ++idx) {
 80072bc:	d1f3      	bne.n	80072a6 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x3ae>
  for (size_t idx = 0; idx < num_elements; ++idx) {
 80072be:	b142      	cbz	r2, 80072d2 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x3da>
    data[idx] = init_value;
 80072c0:	2a00      	cmp	r2, #0
 80072c2:	9807      	ldr	r0, [sp, #28]
 80072c4:	9309      	str	r3, [sp, #36]	; 0x24
 80072c6:	bf08      	it	eq
 80072c8:	2201      	moveq	r2, #1
 80072ca:	2180      	movs	r1, #128	; 0x80
 80072cc:	f00a fed0 	bl	8012070 <memset>
 80072d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  if (num_dims == 0) {
 80072d2:	2d00      	cmp	r5, #0
 80072d4:	f000 80b5 	beq.w	8007442 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x54a>
 80072d8:	ea4f 79ea 	mov.w	r9, sl, asr #31
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 80072dc:	f1ba 0f01 	cmp.w	sl, #1
 80072e0:	f179 0200 	sbcs.w	r2, r9, #0
  int num_resolved_axis = 0;
 80072e4:	bfb8      	it	lt
 80072e6:	2400      	movlt	r4, #0
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 80072e8:	db20      	blt.n	800732c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x434>
  int num_resolved_axis = 0;
 80072ea:	2400      	movs	r4, #0
 80072ec:	f1a8 0804 	sub.w	r8, r8, #4
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 80072f0:	46a4      	mov	ip, r4
 80072f2:	46a6      	mov	lr, r4
    int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];
 80072f4:	f858 6f04 	ldr.w	r6, [r8, #4]!
 80072f8:	2e00      	cmp	r6, #0
 80072fa:	f2c0 808f 	blt.w	800741c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x524>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 80072fe:	42b5      	cmp	r5, r6
 8007300:	dd86      	ble.n	8007210 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x318>
    for (int j = 0; j < *out_num_axis; ++j) {
 8007302:	2c00      	cmp	r4, #0
 8007304:	f000 8086 	beq.w	8007414 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x51c>
 8007308:	1f19      	subs	r1, r3, #4
 800730a:	2200      	movs	r2, #0
 800730c:	e002      	b.n	8007314 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x41c>
 800730e:	3201      	adds	r2, #1
 8007310:	42a2      	cmp	r2, r4
 8007312:	d07f      	beq.n	8007414 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x51c>
      if (out_axis[j] == current) {
 8007314:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8007318:	42b0      	cmp	r0, r6
 800731a:	d1f8      	bne.n	800730e <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x416>
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 800731c:	f11c 0c01 	adds.w	ip, ip, #1
 8007320:	f14e 0e00 	adc.w	lr, lr, #0
 8007324:	45f1      	cmp	r9, lr
 8007326:	bf08      	it	eq
 8007328:	45e2      	cmpeq	sl, ip
 800732a:	d1e3      	bne.n	80072f4 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x3fc>
  for (int idx = 0; idx < input_num_dims; ++idx) {
 800732c:	2d00      	cmp	r5, #0
 800732e:	bfd8      	it	le
 8007330:	00ae      	lslle	r6, r5, #2
 8007332:	dd07      	ble.n	8007344 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x44c>
    input_iter[idx] = 0;
 8007334:	00ae      	lsls	r6, r5, #2
 8007336:	4632      	mov	r2, r6
 8007338:	2100      	movs	r1, #0
 800733a:	4658      	mov	r0, fp
 800733c:	9309      	str	r3, [sp, #36]	; 0x24
 800733e:	f00a fe97 	bl	8012070 <memset>
 8007342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007344:	1c6a      	adds	r2, r5, #1
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8007346:	1e69      	subs	r1, r5, #1
 8007348:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 800734c:	920a      	str	r2, [sp, #40]	; 0x28
 800734e:	eb0b 0281 	add.w	r2, fp, r1, lsl #2
 8007352:	eb07 0c06 	add.w	ip, r7, r6
 8007356:	9109      	str	r1, [sp, #36]	; 0x24
 8007358:	920b      	str	r2, [sp, #44]	; 0x2c
  size_t offset = 0;
 800735a:	f04f 0e00 	mov.w	lr, #0
      offset = offset * static_cast<size_t>(dims[idx]) +
 800735e:	f107 0804 	add.w	r8, r7, #4
 8007362:	46ba      	mov	sl, r7
  if (num_dims == 0) {
 8007364:	2d00      	cmp	r5, #0
 8007366:	d05d      	beq.n	8007424 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x52c>
  TFLITE_DCHECK(index != nullptr);
 8007368:	f1bb 0f00 	cmp.w	fp, #0
 800736c:	f43f af50 	beq.w	8007210 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x318>
  for (int idx = 0; idx < num_dims; ++idx) {
 8007370:	2d00      	cmp	r5, #0
 8007372:	dd69      	ble.n	8007448 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x550>
 8007374:	f1ab 0104 	sub.w	r1, fp, #4
 8007378:	4652      	mov	r2, sl
  size_t offset = 0;
 800737a:	2000      	movs	r0, #0
      offset = offset * static_cast<size_t>(dims[idx]) +
 800737c:	f852 7f04 	ldr.w	r7, [r2, #4]!
 8007380:	f851 6f04 	ldr.w	r6, [r1, #4]!
  for (int idx = 0; idx < num_dims; ++idx) {
 8007384:	4594      	cmp	ip, r2
      offset = offset * static_cast<size_t>(dims[idx]) +
 8007386:	fb07 6000 	mla	r0, r7, r0, r6
  for (int idx = 0; idx < num_dims; ++idx) {
 800738a:	d1f7      	bne.n	800737c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x484>
 800738c:	2600      	movs	r6, #0
 800738e:	4631      	mov	r1, r6
 8007390:	4681      	mov	r9, r0
    if (axis != nullptr) {
 8007392:	bb93      	cbnz	r3, 80073fa <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x502>
      offset = offset * static_cast<size_t>(dims[idx]) +
 8007394:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8007398:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
 800739c:	fb07 2606 	mla	r6, r7, r6, r2
  for (int idx = 0; idx < num_dims; ++idx) {
 80073a0:	3101      	adds	r1, #1
 80073a2:	428d      	cmp	r5, r1
 80073a4:	d1f5      	bne.n	8007392 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x49a>
        reducer(output_data[output_offset], input_data[input_offset]);
 80073a6:	9a07      	ldr	r2, [sp, #28]
 80073a8:	4416      	add	r6, r2
 80073aa:	9a08      	ldr	r2, [sp, #32]
 80073ac:	4648      	mov	r0, r9
 80073ae:	4410      	add	r0, r2
    output_data[output_offset] =
 80073b0:	f996 2000 	ldrsb.w	r2, [r6]
 80073b4:	f990 1000 	ldrsb.w	r1, [r0]
 80073b8:	428a      	cmp	r2, r1
 80073ba:	bfb8      	it	lt
 80073bc:	460a      	movlt	r2, r1
 80073be:	7032      	strb	r2, [r6, #0]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 80073c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073c2:	2a00      	cmp	r2, #0
 80073c4:	f6ff ae30 	blt.w	8007028 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x130>
 80073c8:	e9dd 610a 	ldrd	r6, r1, [sp, #40]	; 0x28
 80073cc:	4610      	mov	r0, r2
 80073ce:	e005      	b.n	80073dc <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x4e4>
 80073d0:	3801      	subs	r0, #1
 80073d2:	1c42      	adds	r2, r0, #1
      current[idx] = 0;
 80073d4:	f8c1 e004 	str.w	lr, [r1, #4]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 80073d8:	f43f ae26 	beq.w	8007028 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x130>
    int current_val = current[idx] + carry;
 80073dc:	4689      	mov	r9, r1
    TFLITE_DCHECK_GE(dims[idx], current_val);
 80073de:	f856 7d04 	ldr.w	r7, [r6, #-4]!
    int current_val = current[idx] + carry;
 80073e2:	f8d9 2000 	ldr.w	r2, [r9]
 80073e6:	3201      	adds	r2, #1
    TFLITE_DCHECK_GE(dims[idx], current_val);
 80073e8:	42ba      	cmp	r2, r7
 80073ea:	f1a1 0104 	sub.w	r1, r1, #4
 80073ee:	f73f af0f 	bgt.w	8007210 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x318>
    if (dims[idx] == current_val) {
 80073f2:	d0ed      	beq.n	80073d0 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x4d8>
      current[idx] = current_val;
 80073f4:	f8c9 2000 	str.w	r2, [r9]
  return (carry == 0);
 80073f8:	e7b4      	b.n	8007364 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x46c>
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
 80073fa:	2c00      	cmp	r4, #0
 80073fc:	d0ca      	beq.n	8007394 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x49c>
 80073fe:	1f1f      	subs	r7, r3, #4
 8007400:	2200      	movs	r2, #0
 8007402:	e002      	b.n	800740a <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x512>
 8007404:	3201      	adds	r2, #1
 8007406:	42a2      	cmp	r2, r4
 8007408:	d0c4      	beq.n	8007394 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x49c>
        if (idx == axis[axis_idx]) {
 800740a:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800740e:	4288      	cmp	r0, r1
 8007410:	d1f8      	bne.n	8007404 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x50c>
 8007412:	e7c5      	b.n	80073a0 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x4a8>
      out_axis[*out_num_axis] = current;
 8007414:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
      *out_num_axis += 1;
 8007418:	3401      	adds	r4, #1
 800741a:	e77f      	b.n	800731c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x424>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 800741c:	1976      	adds	r6, r6, r5
 800741e:	f57f af6e 	bpl.w	80072fe <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x406>
 8007422:	e6f5      	b.n	8007210 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x318>
    output_data[output_offset] =
 8007424:	9907      	ldr	r1, [sp, #28]
 8007426:	9b08      	ldr	r3, [sp, #32]
 8007428:	f991 2000 	ldrsb.w	r2, [r1]
 800742c:	f993 3000 	ldrsb.w	r3, [r3]
 8007430:	4293      	cmp	r3, r2
 8007432:	bfb8      	it	lt
 8007434:	4613      	movlt	r3, r2
  return kTfLiteOk;
 8007436:	462f      	mov	r7, r5
 8007438:	700b      	strb	r3, [r1, #0]
  if (num_dims == 0) {
 800743a:	e594      	b.n	8006f66 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x6e>
  for (int idx = 0; idx < num_dims; ++idx) {
 800743c:	e9dd 6007 	ldrd	r6, r0, [sp, #28]
 8007440:	e68d      	b.n	800715e <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x266>
  int num_resolved_axis = 0;
 8007442:	462c      	mov	r4, r5
 8007444:	462e      	mov	r6, r5
 8007446:	e77d      	b.n	8007344 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x44c>
 8007448:	e9dd 6007 	ldrd	r6, r0, [sp, #28]
 800744c:	e7b0      	b.n	80073b0 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x4b8>
      TF_LITE_ENSURE(
 800744e:	4b0b      	ldr	r3, [pc, #44]	; (800747c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x584>)
 8007450:	f8d9 5014 	ldr.w	r5, [r9, #20]
 8007454:	4a0a      	ldr	r2, [pc, #40]	; (8007480 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x588>)
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	490a      	ldr	r1, [pc, #40]	; (8007484 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x58c>)
 800745a:	f44f 738b 	mov.w	r3, #278	; 0x116
 800745e:	4648      	mov	r0, r9
 8007460:	47a8      	blx	r5
 8007462:	e580      	b.n	8006f66 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x6e>
      TF_LITE_ENSURE(
 8007464:	4b08      	ldr	r3, [pc, #32]	; (8007488 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x590>)
 8007466:	f8d9 5014 	ldr.w	r5, [r9, #20]
 800746a:	4a05      	ldr	r2, [pc, #20]	; (8007480 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x588>)
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	4905      	ldr	r1, [pc, #20]	; (8007484 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x58c>)
 8007470:	f240 1327 	movw	r3, #295	; 0x127
 8007474:	4648      	mov	r0, r9
 8007476:	47a8      	blx	r5
 8007478:	2701      	movs	r7, #1
 800747a:	e574      	b.n	8006f66 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x6e>
 800747c:	0801671c 	.word	0x0801671c
 8007480:	08016604 	.word	0x08016604
 8007484:	08015618 	.word	0x08015618
 8007488:	080168cc 	.word	0x080168cc

0800748c <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf>:
inline void Mean(const tflite::MeanParams& op_params,
                 const RuntimeShape& unextended_input_shape,
                 const uint8_t* input_data, int32_t input_zero_point,
                 float input_scale, const RuntimeShape& unextended_output_shape,
                 uint8_t* output_data, int32_t output_zero_point,
                 float output_scale) {
 800748c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007490:	ed2d 8b04 	vpush	{d8-d9}
 8007494:	ee09 3a10 	vmov	s18, r3
  ruy::profiler::ScopeLabel label("Mean4D/Uint8");

  // Current implementation only supports dimension equals 4 and simultaneous
  // reduction over width and height.
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 8007498:	680b      	ldr	r3, [r1, #0]
                 float output_scale) {
 800749a:	b0a3      	sub	sp, #140	; 0x8c
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 800749c:	2b04      	cmp	r3, #4
                 float output_scale) {
 800749e:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 80074a0:	9213      	str	r2, [sp, #76]	; 0x4c
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 80074a2:	f040 8161 	bne.w	8007768 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2dc>
  inline int32_t DimensionsCount() const { return size_; }
 80074a6:	682e      	ldr	r6, [r5, #0]
  TFLITE_CHECK_LE(unextended_output_shape.DimensionsCount(), 4);
 80074a8:	2e04      	cmp	r6, #4
 80074aa:	f300 815d 	bgt.w	8007768 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2dc>
    size_ = dimensions_count;
 80074ae:	460c      	mov	r4, r1
 80074b0:	4607      	mov	r7, r0
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 80074b2:	68e2      	ldr	r2, [r4, #12]
 80074b4:	6848      	ldr	r0, [r1, #4]
    size_ = dimensions_count;
 80074b6:	9316      	str	r3, [sp, #88]	; 0x58
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 80074b8:	6889      	ldr	r1, [r1, #8]
    size_ = dimensions_count;
 80074ba:	931c      	str	r3, [sp, #112]	; 0x70
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 80074bc:	6923      	ldr	r3, [r4, #16]
 80074be:	ac17      	add	r4, sp, #92	; 0x5c
 80074c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    for (int i = 0; i < size_increase; ++i) {
 80074c2:	f1d6 0004 	rsbs	r0, r6, #4
 80074c6:	eeb0 8a40 	vmov.f32	s16, s0
 80074ca:	eef0 8a60 	vmov.f32	s17, s1
 80074ce:	d00d      	beq.n	80074ec <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x60>
      dims_[i] = val;
 80074d0:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
 80074d2:	4298      	cmp	r0, r3
      dims_[i] = val;
 80074d4:	931d      	str	r3, [sp, #116]	; 0x74
    for (int i = 0; i < size_increase; ++i) {
 80074d6:	d009      	beq.n	80074ec <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x60>
 80074d8:	2802      	cmp	r0, #2
      dims_[i] = val;
 80074da:	931e      	str	r3, [sp, #120]	; 0x78
    for (int i = 0; i < size_increase; ++i) {
 80074dc:	d006      	beq.n	80074ec <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x60>
 80074de:	2803      	cmp	r0, #3
      dims_[i] = val;
 80074e0:	931f      	str	r3, [sp, #124]	; 0x7c
    for (int i = 0; i < size_increase; ++i) {
 80074e2:	d003      	beq.n	80074ec <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x60>
 80074e4:	2804      	cmp	r0, #4
      dims_[i] = val;
 80074e6:	9320      	str	r3, [sp, #128]	; 0x80
    for (int i = 0; i < size_increase; ++i) {
 80074e8:	f040 813e 	bne.w	8007768 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2dc>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 80074ec:	ab1d      	add	r3, sp, #116	; 0x74
 80074ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80074f2:	00b2      	lsls	r2, r6, #2
 80074f4:	1d29      	adds	r1, r5, #4
 80074f6:	f00a fea0 	bl	801223a <memcpy>
    TFLITE_DCHECK_LT(i, size_);
 80074fa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80074fc:	9304      	str	r3, [sp, #16]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f340 8132 	ble.w	8007768 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2dc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8007504:	2b05      	cmp	r3, #5
 8007506:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007508:	f340 811c 	ble.w	8007744 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2b8>
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	920e      	str	r2, [sp, #56]	; 0x38
 8007510:	e9d3 2501 	ldrd	r2, r5, [r3, #4]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	9303      	str	r3, [sp, #12]
 8007518:	e9dd 6418 	ldrd	r6, r4, [sp, #96]	; 0x60
  const int output_depth = output_shape.Dims(3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const float num_elements_in_axis = input_width * input_height;

  TFLITE_CHECK_EQ(op_params.axis_count, 2);
 800751c:	f997 3000 	ldrsb.w	r3, [r7]
  const float num_elements_in_axis = input_width * input_height;
 8007520:	fb06 f904 	mul.w	r9, r6, r4
 8007524:	ee07 9a90 	vmov	s15, r9
  TFLITE_CHECK_EQ(op_params.axis_count, 2);
 8007528:	2b02      	cmp	r3, #2
  const float num_elements_in_axis = input_width * input_height;
 800752a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  TFLITE_CHECK_EQ(op_params.axis_count, 2);
 800752e:	f040 811b 	bne.w	8007768 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2dc>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 8007532:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007536:	2b01      	cmp	r3, #1
 8007538:	f000 8111 	beq.w	800775e <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2d2>
 800753c:	2b02      	cmp	r3, #2
 800753e:	f040 8113 	bne.w	8007768 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2dc>
 8007542:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007546:	2b01      	cmp	r3, #1
 8007548:	f040 810e 	bne.w	8007768 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2dc>
               (op_params.axis[0] == 2 && op_params.axis[1] == 1));
  TFLITE_CHECK_EQ(output_height, 1);
 800754c:	2a01      	cmp	r2, #1
 800754e:	f040 810b 	bne.w	8007768 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2dc>
  TFLITE_CHECK_EQ(output_width, 1);
 8007552:	2d01      	cmp	r5, #1
 8007554:	f040 8108 	bne.w	8007768 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2dc>
  constexpr int32_t kMinValue = std::numeric_limits<uint8_t>::min();
  constexpr int32_t kMaxValue = std::numeric_limits<uint8_t>::max();

  int32_t bias =
      output_zero_point -
      static_cast<int32_t>(input_zero_point * input_scale / output_scale);
 8007558:	eef8 7ac9 	vcvt.f32.s32	s15, s18
  double real_scale =
      static_cast<double>(input_scale / (num_elements_in_axis * output_scale));
 800755c:	ee66 6aa8 	vmul.f32	s13, s13, s17
      static_cast<int32_t>(input_zero_point * input_scale / output_scale);
 8007560:	ee67 7a88 	vmul.f32	s15, s15, s16
  int32_t bias =
 8007564:	9b32      	ldr	r3, [sp, #200]	; 0xc8
      static_cast<int32_t>(input_zero_point * input_scale / output_scale);
 8007566:	ee87 7aa8 	vdiv.f32	s14, s15, s17
  double real_scale =
 800756a:	eec8 7a26 	vdiv.f32	s15, s16, s13
      static_cast<int32_t>(input_zero_point * input_scale / output_scale);
 800756e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  double real_scale =
 8007572:	ee17 0a90 	vmov	r0, s15
  int32_t bias =
 8007576:	ee17 2a10 	vmov	r2, s14
 800757a:	1a9b      	subs	r3, r3, r2
 800757c:	9305      	str	r3, [sp, #20]
  double real_scale =
 800757e:	f7f8 fff3 	bl	8000568 <__aeabi_f2d>
 8007582:	ec41 0b10 	vmov	d0, r0, r1

  int32_t multiplier;
  int shift;
  QuantizeMultiplier(real_scale, &multiplier, &shift);
 8007586:	a915      	add	r1, sp, #84	; 0x54
 8007588:	a814      	add	r0, sp, #80	; 0x50
 800758a:	f7fc fc67 	bl	8003e5c <_ZN6tflite18QuantizeMultiplierEdPlPi>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 800758e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007590:	2b00      	cmp	r3, #0
 8007592:	f340 80a8 	ble.w	80076e6 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x25a>
      for (int in_h = 0; in_h < input_height; ++in_h) {
        for (int in_w = 0; in_w < input_width; ++in_w) {
          acc += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
        }
      }
      acc = MultiplyByQuantizedMultiplier(acc, multiplier, shift);
 8007596:	9b15      	ldr	r3, [sp, #84]	; 0x54
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8007598:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800759c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800759e:	910a      	str	r1, [sp, #40]	; 0x28
                                             int32_t quantized_multiplier,
                                             int shift) {
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
  int right_shift = shift > 0 ? 0 : -shift;
 80075a0:	425a      	negs	r2, r3
 80075a2:	2b00      	cmp	r3, #0
  int left_shift = shift > 0 ? shift : 0;
 80075a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80075a8:	bfc8      	it	gt
 80075aa:	2200      	movgt	r2, #0
 80075ac:	fb0c f009 	mul.w	r0, ip, r9
 80075b0:	930c      	str	r3, [sp, #48]	; 0x30
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 80075b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80075b4:	9011      	str	r0, [sp, #68]	; 0x44
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 80075b6:	fa05 f802 	lsl.w	r8, r5, r2
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 80075ba:	9820      	ldr	r0, [sp, #128]	; 0x80
 80075bc:	9201      	str	r2, [sp, #4]
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 80075be:	9309      	str	r3, [sp, #36]	; 0x24
 80075c0:	f108 32ff 	add.w	r2, r8, #4294967295
 80075c4:	fb03 f301 	mul.w	r3, r3, r1
 80075c8:	fb00 f303 	mul.w	r3, r0, r3
 80075cc:	9206      	str	r2, [sp, #24]
  return a >> offset;
 80075ce:	1052      	asrs	r2, r2, #1
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 80075d0:	991d      	ldr	r1, [sp, #116]	; 0x74
 80075d2:	9312      	str	r3, [sp, #72]	; 0x48
 80075d4:	9207      	str	r2, [sp, #28]
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 80075d6:	2300      	movs	r3, #0
 80075d8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 80075da:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 80075de:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 80075e2:	900b      	str	r0, [sp, #44]	; 0x2c
 80075e4:	930f      	str	r3, [sp, #60]	; 0x3c
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 80075e6:	9108      	str	r1, [sp, #32]
 80075e8:	9210      	str	r2, [sp, #64]	; 0x40
 80075ea:	fb04 f90c 	mul.w	r9, r4, ip
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 80075ee:	4698      	mov	r8, r3
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 80075f0:	9b03      	ldr	r3, [sp, #12]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	dd6a      	ble.n	80076cc <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x240>
 80075f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80075fa:	3b01      	subs	r3, #1
 80075fc:	9302      	str	r3, [sp, #8]
 80075fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007600:	4413      	add	r3, r2
 8007602:	f04f 0e00 	mov.w	lr, #0
 8007606:	930d      	str	r3, [sp, #52]	; 0x34
      for (int in_h = 0; in_h < input_height; ++in_h) {
 8007608:	2e00      	cmp	r6, #0
      int32_t acc = 0;
 800760a:	f04f 0100 	mov.w	r1, #0
      for (int in_h = 0; in_h < input_height; ++in_h) {
 800760e:	f340 8094 	ble.w	800773a <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2ae>
 8007612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007614:	460d      	mov	r5, r1
 8007616:	eb03 070e 	add.w	r7, r3, lr
        for (int in_w = 0; in_w < input_width; ++in_w) {
 800761a:	2c00      	cmp	r4, #0
 800761c:	dd10      	ble.n	8007640 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x1b4>
 800761e:	45c2      	cmp	sl, r8
 8007620:	f340 80a2 	ble.w	8007768 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2dc>
 8007624:	45e6      	cmp	lr, ip
 8007626:	f280 809f 	bge.w	8007768 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2dc>
 800762a:	42ae      	cmp	r6, r5
 800762c:	f340 809c 	ble.w	8007768 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2dc>
 8007630:	463a      	mov	r2, r7
 8007632:	2300      	movs	r3, #0
          acc += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
 8007634:	7810      	ldrb	r0, [r2, #0]
        for (int in_w = 0; in_w < input_width; ++in_w) {
 8007636:	3301      	adds	r3, #1
 8007638:	42a3      	cmp	r3, r4
          acc += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
 800763a:	4401      	add	r1, r0
        for (int in_w = 0; in_w < input_width; ++in_w) {
 800763c:	4462      	add	r2, ip
 800763e:	d1f9      	bne.n	8007634 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x1a8>
      for (int in_h = 0; in_h < input_height; ++in_h) {
 8007640:	3501      	adds	r5, #1
 8007642:	42b5      	cmp	r5, r6
 8007644:	444f      	add	r7, r9
 8007646:	d1e8      	bne.n	800761a <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x18e>
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8007648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800764a:	4099      	lsls	r1, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800764c:	458b      	cmp	fp, r1
  std::int64_t ab_64 = a_64 * b_64;
 800764e:	fb8b 0201 	smull	r0, r2, fp, r1
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8007652:	d054      	beq.n	80076fe <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x272>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8007654:	2a00      	cmp	r2, #0
 8007656:	db61      	blt.n	800771c <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x290>
 8007658:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800765c:	2100      	movs	r1, #0
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800765e:	18c3      	adds	r3, r0, r3
 8007660:	eb42 0101 	adc.w	r1, r2, r1
 8007664:	2900      	cmp	r1, #0
 8007666:	da04      	bge.n	8007672 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x1e6>
 8007668:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800766c:	189b      	adds	r3, r3, r2
 800766e:	f141 0100 	adc.w	r1, r1, #0
 8007672:	0fdb      	lsrs	r3, r3, #31
 8007674:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  assert(exponent <= 31);
 8007678:	9a01      	ldr	r2, [sp, #4]
 800767a:	2a1f      	cmp	r2, #31
 800767c:	dc76      	bgt.n	800776c <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2e0>
      acc += bias;
      acc = std::min(std::max(acc, kMinValue), kMaxValue);
 800767e:	4610      	mov	r0, r2
  return a & b;
 8007680:	9a06      	ldr	r2, [sp, #24]
 8007682:	ea03 0102 	and.w	r1, r3, r2
  return a + b;
 8007686:	9a07      	ldr	r2, [sp, #28]
 8007688:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
  return a >> offset;
 800768c:	4103      	asrs	r3, r0
  return a + b;
 800768e:	4291      	cmp	r1, r2
 8007690:	bfc8      	it	gt
 8007692:	3301      	addgt	r3, #1
      acc += bias;
 8007694:	9a05      	ldr	r2, [sp, #20]
 8007696:	4413      	add	r3, r2
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 8007698:	9a04      	ldr	r2, [sp, #16]
 800769a:	2a04      	cmp	r2, #4
 800769c:	f383 0308 	usat	r3, #8, r3
 80076a0:	d162      	bne.n	8007768 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2dc>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 80076a2:	9a08      	ldr	r2, [sp, #32]
 80076a4:	4542      	cmp	r2, r8
 80076a6:	dd5f      	ble.n	8007768 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2dc>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 80076a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076aa:	2a00      	cmp	r2, #0
 80076ac:	dd5c      	ble.n	8007768 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2dc>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 80076ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076b0:	2a00      	cmp	r2, #0
 80076b2:	dd59      	ble.n	8007768 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2dc>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 80076b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076b6:	4596      	cmp	lr, r2
 80076b8:	da56      	bge.n	8007768 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2dc>
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
 80076ba:	9a02      	ldr	r2, [sp, #8]
 80076bc:	f802 3f01 	strb.w	r3, [r2, #1]!
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 80076c0:	9b03      	ldr	r3, [sp, #12]
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
 80076c2:	9202      	str	r2, [sp, #8]
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 80076c4:	f10e 0e01 	add.w	lr, lr, #1
 80076c8:	459e      	cmp	lr, r3
 80076ca:	d19d      	bne.n	8007608 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x17c>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 80076cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076d0:	4413      	add	r3, r2
 80076d2:	9310      	str	r3, [sp, #64]	; 0x40
 80076d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80076d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076d8:	4413      	add	r3, r2
 80076da:	930f      	str	r3, [sp, #60]	; 0x3c
 80076dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076de:	f108 0801 	add.w	r8, r8, #1
 80076e2:	4598      	cmp	r8, r3
 80076e4:	d184      	bne.n	80075f0 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x164>
    if (size_ > kMaxSmallSize) {
 80076e6:	9b04      	ldr	r3, [sp, #16]
 80076e8:	2b05      	cmp	r3, #5
 80076ea:	dd03      	ble.n	80076f4 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x268>
      delete[] dims_pointer_;
 80076ec:	981d      	ldr	r0, [sp, #116]	; 0x74
 80076ee:	b108      	cbz	r0, 80076f4 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x268>
 80076f0:	f009 fa6e 	bl	8010bd0 <_ZdaPv>
          static_cast<uint8_t>(acc);
    }
  }
}
 80076f4:	b023      	add	sp, #140	; 0x8c
 80076f6:	ecbd 8b04 	vpop	{d8-d9}
 80076fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 80076fe:	2a00      	cmp	r2, #0
 8007700:	4b1e      	ldr	r3, [pc, #120]	; (800777c <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2f0>)
 8007702:	bfa6      	itte	ge
 8007704:	2100      	movge	r1, #0
 8007706:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 800770a:	f04f 31ff 	movlt.w	r1, #4294967295
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800770e:	f1bb 4f00 	cmp.w	fp, #2147483648	; 0x80000000
 8007712:	bf08      	it	eq
 8007714:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
 8007718:	d0ae      	beq.n	8007678 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x1ec>
 800771a:	e7a0      	b.n	800765e <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x1d2>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800771c:	4b17      	ldr	r3, [pc, #92]	; (800777c <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2f0>)
 800771e:	18c3      	adds	r3, r0, r3
 8007720:	f162 0200 	sbc.w	r2, r2, #0
 8007724:	2a00      	cmp	r2, #0
 8007726:	da04      	bge.n	8007732 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2a6>
 8007728:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800772c:	185b      	adds	r3, r3, r1
 800772e:	f142 0200 	adc.w	r2, r2, #0
 8007732:	0fdb      	lsrs	r3, r3, #31
 8007734:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8007738:	e79e      	b.n	8007678 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x1ec>
      for (int in_h = 0; in_h < input_height; ++in_h) {
 800773a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800773e:	4608      	mov	r0, r1
 8007740:	460a      	mov	r2, r1
 8007742:	e78c      	b.n	800765e <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x1d2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8007744:	930e      	str	r3, [sp, #56]	; 0x38
    TFLITE_DCHECK_LT(i, size_);
 8007746:	9b04      	ldr	r3, [sp, #16]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d00d      	beq.n	8007768 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2dc>
 800774c:	2b02      	cmp	r3, #2
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800774e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    TFLITE_DCHECK_LT(i, size_);
 8007750:	d00a      	beq.n	8007768 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2dc>
 8007752:	2b03      	cmp	r3, #3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8007754:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
    TFLITE_DCHECK_LT(i, size_);
 8007756:	d007      	beq.n	8007768 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2dc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8007758:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800775a:	9303      	str	r3, [sp, #12]
 800775c:	e6dc      	b.n	8007518 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x8c>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 800775e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007762:	2b02      	cmp	r3, #2
 8007764:	f43f aef2 	beq.w	800754c <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0xc0>
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 8007768:	f009 fd0c 	bl	8011184 <abort>
  assert(exponent <= 31);
 800776c:	4b04      	ldr	r3, [pc, #16]	; (8007780 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2f4>)
 800776e:	4a05      	ldr	r2, [pc, #20]	; (8007784 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2f8>)
 8007770:	4805      	ldr	r0, [pc, #20]	; (8007788 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2fc>)
 8007772:	f240 1167 	movw	r1, #359	; 0x167
 8007776:	f009 fd0d 	bl	8011194 <__assert_func>
 800777a:	bf00      	nop
 800777c:	c0000001 	.word	0xc0000001
 8007780:	08016a84 	.word	0x08016a84
 8007784:	08016a94 	.word	0x08016a94
 8007788:	08016af0 	.word	0x08016af0

0800778c <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus PrepareSimple(TfLiteContext* context, TfLiteNode* node) {
 800778c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007790:	460d      	mov	r5, r1
 8007792:	b084      	sub	sp, #16
  const TfLiteTensor* input = GetInput(context, node, 0);
 8007794:	2200      	movs	r2, #0
TfLiteStatus PrepareSimple(TfLiteContext* context, TfLiteNode* node) {
 8007796:	4604      	mov	r4, r0
  const TfLiteTensor* input = GetInput(context, node, 0);
 8007798:	f7fc fc5e 	bl	8004058 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE_EQ(context, node->inputs->size, 2);
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	681f      	ldr	r7, [r3, #0]
 80077a0:	2f02      	cmp	r7, #2
 80077a2:	d010      	beq.n	80077c6 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x3a>
 80077a4:	4a39      	ldr	r2, [pc, #228]	; (800788c <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x100>)
 80077a6:	4b3a      	ldr	r3, [pc, #232]	; (8007890 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x104>)
 80077a8:	2102      	movs	r1, #2
 80077aa:	9103      	str	r1, [sp, #12]
 80077ac:	6965      	ldr	r5, [r4, #20]
 80077ae:	4939      	ldr	r1, [pc, #228]	; (8007894 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x108>)
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	e9cd 2701 	strd	r2, r7, [sp, #4]
 80077b6:	4620      	mov	r0, r4
 80077b8:	4a37      	ldr	r2, [pc, #220]	; (8007898 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x10c>)
 80077ba:	233e      	movs	r3, #62	; 0x3e
 80077bc:	47a8      	blx	r5
 80077be:	2001      	movs	r0, #1
}
 80077c0:	b004      	add	sp, #16
 80077c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 80077c6:	686b      	ldr	r3, [r5, #4]
 80077c8:	f8d3 8000 	ldr.w	r8, [r3]
 80077cc:	f1b8 0f01 	cmp.w	r8, #1
 80077d0:	d010      	beq.n	80077f4 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x68>
 80077d2:	2501      	movs	r5, #1
 80077d4:	e9cd 8502 	strd	r8, r5, [sp, #8]
 80077d8:	4a30      	ldr	r2, [pc, #192]	; (800789c <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x110>)
 80077da:	9201      	str	r2, [sp, #4]
 80077dc:	4b30      	ldr	r3, [pc, #192]	; (80078a0 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x114>)
 80077de:	6966      	ldr	r6, [r4, #20]
 80077e0:	4a2d      	ldr	r2, [pc, #180]	; (8007898 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x10c>)
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	4620      	mov	r0, r4
 80077e6:	492b      	ldr	r1, [pc, #172]	; (8007894 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x108>)
 80077e8:	233f      	movs	r3, #63	; 0x3f
 80077ea:	47b0      	blx	r6
 80077ec:	4628      	mov	r0, r5
}
 80077ee:	b004      	add	sp, #16
 80077f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  const TfLiteTensor* axis = GetInput(context, node, 1);
 80077f4:	4606      	mov	r6, r0
 80077f6:	4642      	mov	r2, r8
 80077f8:	4629      	mov	r1, r5
 80077fa:	4620      	mov	r0, r4
 80077fc:	f7fc fc2c 	bl	8004058 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, axis != nullptr);
 8007800:	b1d8      	cbz	r0, 800783a <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xae>
  TF_LITE_ENSURE_TYPES_EQ(context, axis->type, kTfLiteInt32);
 8007802:	7800      	ldrb	r0, [r0, #0]
 8007804:	2802      	cmp	r0, #2
 8007806:	d104      	bne.n	8007812 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x86>
  if (input->type == kTfLiteInt8) {
 8007808:	7833      	ldrb	r3, [r6, #0]
 800780a:	2b09      	cmp	r3, #9
 800780c:	d01f      	beq.n	800784e <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xc2>
  return kTfLiteOk;
 800780e:	2000      	movs	r0, #0
 8007810:	e7d6      	b.n	80077c0 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x34>
  TF_LITE_ENSURE_TYPES_EQ(context, axis->type, kTfLiteInt32);
 8007812:	6966      	ldr	r6, [r4, #20]
 8007814:	f7fc f832 	bl	800387c <TfLiteTypeGetName>
 8007818:	4605      	mov	r5, r0
 800781a:	4638      	mov	r0, r7
 800781c:	f7fc f82e 	bl	800387c <TfLiteTypeGetName>
 8007820:	4b20      	ldr	r3, [pc, #128]	; (80078a4 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x118>)
 8007822:	9003      	str	r0, [sp, #12]
 8007824:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8007828:	4b1f      	ldr	r3, [pc, #124]	; (80078a8 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x11c>)
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	4620      	mov	r0, r4
 800782e:	4a1a      	ldr	r2, [pc, #104]	; (8007898 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x10c>)
 8007830:	491e      	ldr	r1, [pc, #120]	; (80078ac <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x120>)
 8007832:	2344      	movs	r3, #68	; 0x44
 8007834:	47b0      	blx	r6
 8007836:	4640      	mov	r0, r8
 8007838:	e7c2      	b.n	80077c0 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x34>
  TF_LITE_ENSURE(context, axis != nullptr);
 800783a:	4b1d      	ldr	r3, [pc, #116]	; (80078b0 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x124>)
 800783c:	6965      	ldr	r5, [r4, #20]
 800783e:	4a16      	ldr	r2, [pc, #88]	; (8007898 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x10c>)
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	4620      	mov	r0, r4
 8007844:	491b      	ldr	r1, [pc, #108]	; (80078b4 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x128>)
 8007846:	2343      	movs	r3, #67	; 0x43
 8007848:	47a8      	blx	r5
 800784a:	4640      	mov	r0, r8
 800784c:	e7b8      	b.n	80077c0 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x34>
    const TfLiteTensor* output = GetOutput(context, node, 0);
 800784e:	2200      	movs	r2, #0
 8007850:	4629      	mov	r1, r5
 8007852:	4620      	mov	r0, r4
    OpData* data = static_cast<OpData*>(node->user_data);
 8007854:	692f      	ldr	r7, [r5, #16]
    const TfLiteTensor* output = GetOutput(context, node, 0);
 8007856:	f7fc fc1b 	bl	8004090 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800785a:	4603      	mov	r3, r0
    const double real_multiplier = static_cast<double>(input->params.scale) /
 800785c:	68f0      	ldr	r0, [r6, #12]
    const TfLiteTensor* output = GetOutput(context, node, 0);
 800785e:	461e      	mov	r6, r3
    const double real_multiplier = static_cast<double>(input->params.scale) /
 8007860:	f7f8 fe82 	bl	8000568 <__aeabi_f2d>
 8007864:	4604      	mov	r4, r0
                                   static_cast<double>(output->params.scale);
 8007866:	68f0      	ldr	r0, [r6, #12]
    const double real_multiplier = static_cast<double>(input->params.scale) /
 8007868:	460d      	mov	r5, r1
                                   static_cast<double>(output->params.scale);
 800786a:	f7f8 fe7d 	bl	8000568 <__aeabi_f2d>
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
    const double real_multiplier = static_cast<double>(input->params.scale) /
 8007872:	4620      	mov	r0, r4
 8007874:	4629      	mov	r1, r5
 8007876:	f7f8 fff9 	bl	800086c <__aeabi_ddiv>
    QuantizeMultiplier(real_multiplier, &data->multiplier, &data->shift);
 800787a:	1d3c      	adds	r4, r7, #4
    const double real_multiplier = static_cast<double>(input->params.scale) /
 800787c:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(real_multiplier, &data->multiplier, &data->shift);
 8007880:	4638      	mov	r0, r7
 8007882:	4621      	mov	r1, r4
 8007884:	f7fc faea 	bl	8003e5c <_ZN6tflite18QuantizeMultiplierEdPlPi>
  return kTfLiteOk;
 8007888:	2000      	movs	r0, #0
 800788a:	e799      	b.n	80077c0 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x34>
 800788c:	08015650 	.word	0x08015650
 8007890:	08016b28 	.word	0x08016b28
 8007894:	08015678 	.word	0x08015678
 8007898:	08016604 	.word	0x08016604
 800789c:	080176f0 	.word	0x080176f0
 80078a0:	08016b3c 	.word	0x08016b3c
 80078a4:	08016b60 	.word	0x08016b60
 80078a8:	08016b70 	.word	0x08016b70
 80078ac:	08016638 	.word	0x08016638
 80078b0:	08016b50 	.word	0x08016b50
 80078b4:	08015618 	.word	0x08015618

080078b8 <_ZN6tflite3ops5micro6reduce10PrepareMaxEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus PrepareMax(TfLiteContext* context, TfLiteNode* node) {
 80078b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078bc:	4604      	mov	r4, r0
 80078be:	4688      	mov	r8, r1
  TF_LITE_ENSURE_OK(context, PrepareSimple(context, node));
 80078c0:	f7ff ff64 	bl	800778c <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode>
 80078c4:	4605      	mov	r5, r0
 80078c6:	b110      	cbz	r0, 80078ce <_ZN6tflite3ops5micro6reduce10PrepareMaxEP13TfLiteContextP10TfLiteNode+0x16>
}
 80078c8:	4628      	mov	r0, r5
 80078ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  const TfLiteTensor* input = GetInput(context, node, 0);
 80078ce:	4602      	mov	r2, r0
 80078d0:	4641      	mov	r1, r8
 80078d2:	4620      	mov	r0, r4
  OpData* op_data = static_cast<OpData*>(node->user_data);
 80078d4:	f8d8 6010 	ldr.w	r6, [r8, #16]
  const TfLiteTensor* input = GetInput(context, node, 0);
 80078d8:	f7fc fbbe 	bl	8004058 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteTensor* output = GetOutput(context, node, 0);
 80078dc:	4641      	mov	r1, r8
  const TfLiteTensor* input = GetInput(context, node, 0);
 80078de:	4607      	mov	r7, r0
  const TfLiteTensor* output = GetOutput(context, node, 0);
 80078e0:	462a      	mov	r2, r5
 80078e2:	4620      	mov	r0, r4
 80078e4:	f7fc fbd4 	bl	8004090 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  const TfLiteTensor* axis = GetInput(context, node, 1);
 80078e8:	4641      	mov	r1, r8
  const TfLiteTensor* output = GetOutput(context, node, 0);
 80078ea:	4681      	mov	r9, r0
  const TfLiteTensor* axis = GetInput(context, node, 1);
 80078ec:	2201      	movs	r2, #1
 80078ee:	4620      	mov	r0, r4
 80078f0:	f7fc fbb2 	bl	8004058 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80078f4:	4680      	mov	r8, r0
  }
  return count;
}

inline int64_t NumElements(const TfLiteTensor* t) {
  return NumElements(t->dims);
 80078f6:	f8d9 0008 	ldr.w	r0, [r9, #8]
  op_data->output_scale = output->params.scale;
 80078fa:	f8d9 100c 	ldr.w	r1, [r9, #12]
  for (int i = 0; i < dims->size; ++i) {
 80078fe:	f8d0 c000 	ldr.w	ip, [r0]
  op_data->input_scale = input->params.scale;
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	6172      	str	r2, [r6, #20]
 8007906:	f1bc 0f00 	cmp.w	ip, #0
  op_data->output_scale = output->params.scale;
 800790a:	61f1      	str	r1, [r6, #28]
  int64_t count = 1;
 800790c:	f04f 0101 	mov.w	r1, #1
  for (int i = 0; i < dims->size; ++i) {
 8007910:	dd07      	ble.n	8007922 <_ZN6tflite3ops5micro6reduce10PrepareMaxEP13TfLiteContextP10TfLiteNode+0x6a>
 8007912:	462a      	mov	r2, r5
    count *= dims->data[i];
 8007914:	f850 3f04 	ldr.w	r3, [r0, #4]!
  for (int i = 0; i < dims->size; ++i) {
 8007918:	3201      	adds	r2, #1
 800791a:	4562      	cmp	r2, ip
    count *= dims->data[i];
 800791c:	fba1 1303 	umull	r1, r3, r1, r3
  for (int i = 0; i < dims->size; ++i) {
 8007920:	d1f8      	bne.n	8007914 <_ZN6tflite3ops5micro6reduce10PrepareMaxEP13TfLiteContextP10TfLiteNode+0x5c>
  context->RequestScratchBufferInArena(context, sizeof(int) * input->dims->size,
 8007922:	68bb      	ldr	r3, [r7, #8]
  op_data->num_output_elements = NumElements(output);
 8007924:	6231      	str	r1, [r6, #32]
  context->RequestScratchBufferInArena(context, sizeof(int) * input->dims->size,
 8007926:	6819      	ldr	r1, [r3, #0]
 8007928:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800792a:	f106 0208 	add.w	r2, r6, #8
 800792e:	0089      	lsls	r1, r1, #2
 8007930:	4620      	mov	r0, r4
 8007932:	4798      	blx	r3
      context, sizeof(int) * static_cast<int>(ElementCount(*axis->dims)),
 8007934:	f8d8 0008 	ldr.w	r0, [r8, #8]
  context->RequestScratchBufferInArena(
 8007938:	6c27      	ldr	r7, [r4, #64]	; 0x40
      context, sizeof(int) * static_cast<int>(ElementCount(*axis->dims)),
 800793a:	f7fe ffe9 	bl	8006910 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
  context->RequestScratchBufferInArena(
 800793e:	f106 020c 	add.w	r2, r6, #12
 8007942:	0081      	lsls	r1, r0, #2
 8007944:	4620      	mov	r0, r4
 8007946:	47b8      	blx	r7
}
 8007948:	4628      	mov	r0, r5
 800794a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800794e:	bf00      	nop

08007950 <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus PrepareMeanOrSum(TfLiteContext* context, TfLiteNode* node) {
 8007950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  const TfLiteTensor* input = GetInput(context, node, 0);
 8007954:	2200      	movs	r2, #0
TfLiteStatus PrepareMeanOrSum(TfLiteContext* context, TfLiteNode* node) {
 8007956:	460d      	mov	r5, r1
 8007958:	4604      	mov	r4, r0
  const TfLiteTensor* input = GetInput(context, node, 0);
 800795a:	f7fc fb7d 	bl	8004058 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800795e:	4606      	mov	r6, r0
  const TfLiteTensor* output = GetOutput(context, node, 0);
 8007960:	2200      	movs	r2, #0
 8007962:	4629      	mov	r1, r5
 8007964:	4620      	mov	r0, r4
  OpData* op_data = reinterpret_cast<OpData*>(node->user_data);
 8007966:	f8d5 a010 	ldr.w	sl, [r5, #16]
  const TfLiteTensor* output = GetOutput(context, node, 0);
 800796a:	f7fc fb91 	bl	8004090 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  if (input->type == kTfLiteInt8) {
 800796e:	f896 e000 	ldrb.w	lr, [r6]
 8007972:	f1be 0f09 	cmp.w	lr, #9
  const TfLiteTensor* output = GetOutput(context, node, 0);
 8007976:	4607      	mov	r7, r0
  if (input->type == kTfLiteInt8) {
 8007978:	d034      	beq.n	80079e4 <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode+0x94>
  return NumElements(t->dims);
 800797a:	6880      	ldr	r0, [r0, #8]
  for (int i = 0; i < dims->size; ++i) {
 800797c:	f8d0 c000 	ldr.w	ip, [r0]
 8007980:	f1bc 0f00 	cmp.w	ip, #0
  int64_t count = 1;
 8007984:	bfd8      	it	le
 8007986:	2101      	movle	r1, #1
  for (int i = 0; i < dims->size; ++i) {
 8007988:	dd0b      	ble.n	80079a2 <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode+0x52>
  int64_t count = 1;
 800798a:	2101      	movs	r1, #1
  for (int i = 0; i < dims->size; ++i) {
 800798c:	2200      	movs	r2, #0
    count *= dims->data[i];
 800798e:	f850 3f04 	ldr.w	r3, [r0, #4]!
  for (int i = 0; i < dims->size; ++i) {
 8007992:	3201      	adds	r2, #1
 8007994:	4562      	cmp	r2, ip
    count *= dims->data[i];
 8007996:	fba1 1303 	umull	r1, r3, r1, r3
  for (int i = 0; i < dims->size; ++i) {
 800799a:	dbf8      	blt.n	800798e <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode+0x3e>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8) {
 800799c:	f1be 0f09 	cmp.w	lr, #9
 80079a0:	d008      	beq.n	80079b4 <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode+0x64>
 80079a2:	f1be 0f03 	cmp.w	lr, #3
 80079a6:	d005      	beq.n	80079b4 <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode+0x64>
  TF_LITE_ENSURE_OK(context, PrepareSimple(context, node));
 80079a8:	4629      	mov	r1, r5
 80079aa:	4620      	mov	r0, r4
}
 80079ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TF_LITE_ENSURE_OK(context, PrepareSimple(context, node));
 80079b0:	f7ff beec 	b.w	800778c <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode>
    context->RequestScratchBufferInArena(context, output_size * sizeof(int32_t),
 80079b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079b6:	f10a 0208 	add.w	r2, sl, #8
 80079ba:	0089      	lsls	r1, r1, #2
 80079bc:	4620      	mov	r0, r4
 80079be:	4798      	blx	r3
    op_data->input_scale = input->params.scale;
 80079c0:	68f3      	ldr	r3, [r6, #12]
    op_data->input_zp = input->params.zero_point;
 80079c2:	6932      	ldr	r2, [r6, #16]
 80079c4:	f8ca 2010 	str.w	r2, [sl, #16]
    op_data->input_scale = input->params.scale;
 80079c8:	f8ca 3014 	str.w	r3, [sl, #20]
    op_data->output_zp = output->params.zero_point;
 80079cc:	693a      	ldr	r2, [r7, #16]
    op_data->output_scale = output->params.scale;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8ca 301c 	str.w	r3, [sl, #28]
    op_data->output_zp = output->params.zero_point;
 80079d4:	f8ca 2018 	str.w	r2, [sl, #24]
  TF_LITE_ENSURE_OK(context, PrepareSimple(context, node));
 80079d8:	4629      	mov	r1, r5
 80079da:	4620      	mov	r0, r4
}
 80079dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TF_LITE_ENSURE_OK(context, PrepareSimple(context, node));
 80079e0:	f7ff bed4 	b.w	800778c <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode>
    const double real_multiplier = static_cast<double>(input->params.scale) /
 80079e4:	68f0      	ldr	r0, [r6, #12]
 80079e6:	f7f8 fdbf 	bl	8000568 <__aeabi_f2d>
 80079ea:	4680      	mov	r8, r0
                                   static_cast<double>(output->params.scale);
 80079ec:	68f8      	ldr	r0, [r7, #12]
    const double real_multiplier = static_cast<double>(input->params.scale) /
 80079ee:	4689      	mov	r9, r1
                                   static_cast<double>(output->params.scale);
 80079f0:	f7f8 fdba 	bl	8000568 <__aeabi_f2d>
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
    const double real_multiplier = static_cast<double>(input->params.scale) /
 80079f8:	4640      	mov	r0, r8
 80079fa:	4649      	mov	r1, r9
 80079fc:	f7f8 ff36 	bl	800086c <__aeabi_ddiv>
    QuantizeMultiplier(real_multiplier, &op_data->multiplier, &op_data->shift);
 8007a00:	f10a 0804 	add.w	r8, sl, #4
    const double real_multiplier = static_cast<double>(input->params.scale) /
 8007a04:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(real_multiplier, &op_data->multiplier, &op_data->shift);
 8007a08:	4650      	mov	r0, sl
 8007a0a:	4641      	mov	r1, r8
 8007a0c:	f7fc fa26 	bl	8003e5c <_ZN6tflite18QuantizeMultiplierEdPlPi>
  return NumElements(t->dims);
 8007a10:	68b8      	ldr	r0, [r7, #8]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8) {
 8007a12:	f896 e000 	ldrb.w	lr, [r6]
  for (int i = 0; i < dims->size; ++i) {
 8007a16:	f8d0 c000 	ldr.w	ip, [r0]
 8007a1a:	f1bc 0f00 	cmp.w	ip, #0
 8007a1e:	dcb4      	bgt.n	800798a <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode+0x3a>
  int64_t count = 1;
 8007a20:	2101      	movs	r1, #1
 8007a22:	e7bb      	b.n	800799c <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode+0x4c>

08007a24 <_ZN6tflite3ops5micro13Register_MEANEv>:

}  // namespace reduce

TfLiteRegistration Register_MEAN() {
 8007a24:	b510      	push	{r4, lr}
          /*prepare=*/reduce::PrepareMeanOrSum,
          /*invoke=*/reduce::EvalMean,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8007a26:	4c06      	ldr	r4, [pc, #24]	; (8007a40 <_ZN6tflite3ops5micro13Register_MEANEv+0x1c>)
TfLiteRegistration Register_MEAN() {
 8007a28:	4686      	mov	lr, r0
          /*version=*/0};
 8007a2a:	4684      	mov	ip, r0
 8007a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007a32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007a36:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 8007a3a:	4670      	mov	r0, lr
 8007a3c:	bd10      	pop	{r4, pc}
 8007a3e:	bf00      	nop
 8007a40:	08013fd0 	.word	0x08013fd0

08007a44 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
inline void Mean(const tflite::MeanParams& op_params,
 8007a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a48:	460c      	mov	r4, r1
 8007a4a:	b099      	sub	sp, #100	; 0x64
 8007a4c:	461f      	mov	r7, r3
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 8007a4e:	6823      	ldr	r3, [r4, #0]
inline void Mean(const tflite::MeanParams& op_params,
 8007a50:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007a52:	910b      	str	r1, [sp, #44]	; 0x2c
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 8007a54:	2b04      	cmp	r3, #4
 8007a56:	f040 80e6 	bne.w	8007c26 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e2>
  inline int32_t DimensionsCount() const { return size_; }
 8007a5a:	f8d7 c000 	ldr.w	ip, [r7]
  TFLITE_CHECK_LE(unextended_output_shape.DimensionsCount(), 4);
 8007a5e:	f1bc 0f04 	cmp.w	ip, #4
 8007a62:	f300 80e0 	bgt.w	8007c26 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e2>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 8007a66:	68a1      	ldr	r1, [r4, #8]
    size_ = dimensions_count;
 8007a68:	930c      	str	r3, [sp, #48]	; 0x30
  inline int32_t DimensionsCount() const { return size_; }
 8007a6a:	4605      	mov	r5, r0
 8007a6c:	4616      	mov	r6, r2
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 8007a6e:	6860      	ldr	r0, [r4, #4]
 8007a70:	68e2      	ldr	r2, [r4, #12]
    size_ = dimensions_count;
 8007a72:	9312      	str	r3, [sp, #72]	; 0x48
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 8007a74:	6923      	ldr	r3, [r4, #16]
 8007a76:	ac0d      	add	r4, sp, #52	; 0x34
 8007a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    for (int i = 0; i < size_increase; ++i) {
 8007a7a:	f1dc 0004 	rsbs	r0, ip, #4
 8007a7e:	d00d      	beq.n	8007a9c <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x58>
      dims_[i] = val;
 8007a80:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
 8007a82:	4298      	cmp	r0, r3
      dims_[i] = val;
 8007a84:	9313      	str	r3, [sp, #76]	; 0x4c
    for (int i = 0; i < size_increase; ++i) {
 8007a86:	d009      	beq.n	8007a9c <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x58>
 8007a88:	2802      	cmp	r0, #2
      dims_[i] = val;
 8007a8a:	9314      	str	r3, [sp, #80]	; 0x50
    for (int i = 0; i < size_increase; ++i) {
 8007a8c:	d006      	beq.n	8007a9c <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x58>
 8007a8e:	2803      	cmp	r0, #3
      dims_[i] = val;
 8007a90:	9315      	str	r3, [sp, #84]	; 0x54
    for (int i = 0; i < size_increase; ++i) {
 8007a92:	d003      	beq.n	8007a9c <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x58>
 8007a94:	2804      	cmp	r0, #4
      dims_[i] = val;
 8007a96:	9316      	str	r3, [sp, #88]	; 0x58
    for (int i = 0; i < size_increase; ++i) {
 8007a98:	f040 80c5 	bne.w	8007c26 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e2>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 8007a9c:	ab13      	add	r3, sp, #76	; 0x4c
 8007a9e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007aa2:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8007aa6:	1d39      	adds	r1, r7, #4
 8007aa8:	f00a fbc7 	bl	801223a <memcpy>
    TFLITE_DCHECK_LT(i, size_);
 8007aac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007aae:	9301      	str	r3, [sp, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f340 80b8 	ble.w	8007c26 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8007ab6:	2b05      	cmp	r3, #5
 8007ab8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007aba:	f340 80a2 	ble.w	8007c02 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1be>
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	9206      	str	r2, [sp, #24]
 8007ac2:	e9d3 0201 	ldrd	r0, r2, [r3, #4]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	9300      	str	r3, [sp, #0]
  TFLITE_CHECK_EQ(op_params.axis_count, 2);
 8007aca:	f995 3000 	ldrsb.w	r3, [r5]
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	e9dd 410e 	ldrd	r4, r1, [sp, #56]	; 0x38
 8007ad4:	f040 80a7 	bne.w	8007c26 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e2>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 8007ad8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	f000 809d 	beq.w	8007c1c <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1d8>
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	f040 809f 	bne.w	8007c26 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e2>
 8007ae8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	f040 809a 	bne.w	8007c26 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e2>
  TFLITE_CHECK_EQ(output_height, 1);
 8007af2:	2801      	cmp	r0, #1
 8007af4:	f040 8097 	bne.w	8007c26 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e2>
  TFLITE_CHECK_EQ(output_width, 1);
 8007af8:	2a01      	cmp	r2, #1
 8007afa:	f040 8094 	bne.w	8007c26 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e2>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 8007afe:	9b06      	ldr	r3, [sp, #24]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	dd71      	ble.n	8007be8 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1a4>
          value / (input_width * input_height);
 8007b04:	fb01 f304 	mul.w	r3, r1, r4
 8007b08:	ee06 3a10 	vmov	s12, r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8007b0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8007b0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8007b10:	9816      	ldr	r0, [sp, #88]	; 0x58
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8007b12:	9303      	str	r3, [sp, #12]
 8007b14:	fb02 f303 	mul.w	r3, r2, r3
 8007b18:	fb00 f303 	mul.w	r3, r0, r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8007b1c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8007b20:	930a      	str	r3, [sp, #40]	; 0x28
 8007b22:	ee16 3a10 	vmov	r3, s12
 8007b26:	fb08 f303 	mul.w	r3, r8, r3
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	9607      	str	r6, [sp, #28]
 8007b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b30:	fb08 f701 	mul.w	r7, r8, r1
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 8007b34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b36:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8007b3a:	9005      	str	r0, [sp, #20]
 8007b3c:	2600      	movs	r6, #0
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8007b3e:	9204      	str	r2, [sp, #16]
 8007b40:	00bf      	lsls	r7, r7, #2
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8007b42:	9608      	str	r6, [sp, #32]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 8007b44:	9302      	str	r3, [sp, #8]
 8007b46:	ea4f 0088 	mov.w	r0, r8, lsl #2
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 8007b4a:	9b00      	ldr	r3, [sp, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	dd3f      	ble.n	8007bd0 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18c>
 8007b50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b52:	9a08      	ldr	r2, [sp, #32]
 8007b54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007b58:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
 8007b5c:	f04f 0e00 	mov.w	lr, #0
      for (int in_h = 0; in_h < input_height; ++in_h) {
 8007b60:	2c00      	cmp	r4, #0
      float value = 0;
 8007b62:	eddf 7a32 	vldr	s15, [pc, #200]	; 8007c2c <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e8>
      for (int in_h = 0; in_h < input_height; ++in_h) {
 8007b66:	dd17      	ble.n	8007b98 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x154>
 8007b68:	46d4      	mov	ip, sl
 8007b6a:	2500      	movs	r5, #0
        for (int in_w = 0; in_w < input_width; ++in_w) {
 8007b6c:	2900      	cmp	r1, #0
 8007b6e:	dd0f      	ble.n	8007b90 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x14c>
 8007b70:	454e      	cmp	r6, r9
 8007b72:	da58      	bge.n	8007c26 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e2>
 8007b74:	45c6      	cmp	lr, r8
 8007b76:	da56      	bge.n	8007c26 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e2>
 8007b78:	42ac      	cmp	r4, r5
 8007b7a:	dd54      	ble.n	8007c26 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e2>
 8007b7c:	4662      	mov	r2, ip
 8007b7e:	2300      	movs	r3, #0
          value += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
 8007b80:	ed92 7a00 	vldr	s14, [r2]
        for (int in_w = 0; in_w < input_width; ++in_w) {
 8007b84:	3301      	adds	r3, #1
 8007b86:	428b      	cmp	r3, r1
          value += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
 8007b88:	ee77 7a87 	vadd.f32	s15, s15, s14
        for (int in_w = 0; in_w < input_width; ++in_w) {
 8007b8c:	4402      	add	r2, r0
 8007b8e:	d1f7      	bne.n	8007b80 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x13c>
      for (int in_h = 0; in_h < input_height; ++in_h) {
 8007b90:	3501      	adds	r5, #1
 8007b92:	42a5      	cmp	r5, r4
 8007b94:	44bc      	add	ip, r7
 8007b96:	d1e9      	bne.n	8007b6c <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x128>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 8007b98:	9b01      	ldr	r3, [sp, #4]
 8007b9a:	2b04      	cmp	r3, #4
          value / (input_width * input_height);
 8007b9c:	eef8 6ac6 	vcvt.f32.s32	s13, s12
 8007ba0:	d141      	bne.n	8007c26 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e2>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 8007ba2:	9b02      	ldr	r3, [sp, #8]
 8007ba4:	429e      	cmp	r6, r3
 8007ba6:	da3e      	bge.n	8007c26 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e2>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8007ba8:	9b03      	ldr	r3, [sp, #12]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	dd3b      	ble.n	8007c26 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e2>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8007bae:	9b04      	ldr	r3, [sp, #16]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	dd38      	ble.n	8007c26 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e2>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8007bb4:	9b05      	ldr	r3, [sp, #20]
 8007bb6:	459e      	cmp	lr, r3
 8007bb8:	da35      	bge.n	8007c26 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e2>
 8007bba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 8007bbe:	9b00      	ldr	r3, [sp, #0]
 8007bc0:	f10e 0e01 	add.w	lr, lr, #1
 8007bc4:	459e      	cmp	lr, r3
 8007bc6:	f10a 0a04 	add.w	sl, sl, #4
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
 8007bca:	ecab 7a01 	vstmia	fp!, {s14}
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 8007bce:	d1c7      	bne.n	8007b60 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x11c>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 8007bd0:	9b08      	ldr	r3, [sp, #32]
 8007bd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bd4:	4413      	add	r3, r2
 8007bd6:	9308      	str	r3, [sp, #32]
 8007bd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bda:	9b07      	ldr	r3, [sp, #28]
 8007bdc:	4413      	add	r3, r2
 8007bde:	9307      	str	r3, [sp, #28]
 8007be0:	9b06      	ldr	r3, [sp, #24]
 8007be2:	3601      	adds	r6, #1
 8007be4:	42b3      	cmp	r3, r6
 8007be6:	d1b0      	bne.n	8007b4a <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x106>
    if (size_ > kMaxSmallSize) {
 8007be8:	9b01      	ldr	r3, [sp, #4]
 8007bea:	2b05      	cmp	r3, #5
 8007bec:	dd06      	ble.n	8007bfc <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1b8>
      delete[] dims_pointer_;
 8007bee:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007bf0:	b120      	cbz	r0, 8007bfc <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1b8>
}
 8007bf2:	b019      	add	sp, #100	; 0x64
 8007bf4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf8:	f008 bfea 	b.w	8010bd0 <_ZdaPv>
 8007bfc:	b019      	add	sp, #100	; 0x64
 8007bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8007c02:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
 8007c04:	9b01      	ldr	r3, [sp, #4]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d00d      	beq.n	8007c26 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e2>
 8007c0a:	2b02      	cmp	r3, #2
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8007c0c:	9814      	ldr	r0, [sp, #80]	; 0x50
    TFLITE_DCHECK_LT(i, size_);
 8007c0e:	d00a      	beq.n	8007c26 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e2>
 8007c10:	2b03      	cmp	r3, #3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8007c12:	9a15      	ldr	r2, [sp, #84]	; 0x54
    TFLITE_DCHECK_LT(i, size_);
 8007c14:	d007      	beq.n	8007c26 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8007c16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	e756      	b.n	8007aca <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x86>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 8007c1c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	f43f af66 	beq.w	8007af2 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xae>
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 8007c26:	f009 faad 	bl	8011184 <abort>
 8007c2a:	bf00      	nop
 8007c2c:	00000000 	.word	0x00000000

08007c30 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l>:

namespace tflite {
namespace reference_integer_ops {

template <typename integer_type>
inline void Mean(const tflite::MeanParams& op_params, int32_t multiplier,
 8007c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c34:	b0a3      	sub	sp, #140	; 0x8c
 8007c36:	4615      	mov	r5, r2
 8007c38:	9102      	str	r1, [sp, #8]
                 const integer_type* input_data, int32_t input_zero_point,
                 const RuntimeShape& unextended_output_shape,
                 integer_type* output_data, int32_t output_zero_point) {
  // Current implementation only supports dimension equals 4 and simultaneous
  // reduction over width and height.
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 8007c3a:	681a      	ldr	r2, [r3, #0]
inline void Mean(const tflite::MeanParams& op_params, int32_t multiplier,
 8007c3c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8007c3e:	9415      	str	r4, [sp, #84]	; 0x54
 8007c40:	e9dd 812f 	ldrd	r8, r1, [sp, #188]	; 0xbc
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 8007c44:	2a04      	cmp	r2, #4
inline void Mean(const tflite::MeanParams& op_params, int32_t multiplier,
 8007c46:	e9dd 4c2d 	ldrd	r4, ip, [sp, #180]	; 0xb4
 8007c4a:	910d      	str	r1, [sp, #52]	; 0x34
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 8007c4c:	f040 815c 	bne.w	8007f08 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2d8>
  inline int32_t DimensionsCount() const { return size_; }
 8007c50:	f8dc 7000 	ldr.w	r7, [ip]
  TFLITE_CHECK_LE(unextended_output_shape.DimensionsCount(), 4);
 8007c54:	2f04      	cmp	r7, #4
 8007c56:	f300 8157 	bgt.w	8007f08 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2d8>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 8007c5a:	6899      	ldr	r1, [r3, #8]
    size_ = dimensions_count;
 8007c5c:	9216      	str	r2, [sp, #88]	; 0x58
  inline int32_t DimensionsCount() const { return size_; }
 8007c5e:	4606      	mov	r6, r0
    size_ = dimensions_count;
 8007c60:	921c      	str	r2, [sp, #112]	; 0x70
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 8007c62:	6858      	ldr	r0, [r3, #4]
 8007c64:	68da      	ldr	r2, [r3, #12]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 8007c6c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    for (int i = 0; i < size_increase; ++i) {
 8007c70:	f1d7 0004 	rsbs	r0, r7, #4
 8007c74:	d00d      	beq.n	8007c92 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x62>
      dims_[i] = val;
 8007c76:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
 8007c78:	4298      	cmp	r0, r3
      dims_[i] = val;
 8007c7a:	931d      	str	r3, [sp, #116]	; 0x74
    for (int i = 0; i < size_increase; ++i) {
 8007c7c:	d009      	beq.n	8007c92 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x62>
 8007c7e:	2802      	cmp	r0, #2
      dims_[i] = val;
 8007c80:	931e      	str	r3, [sp, #120]	; 0x78
    for (int i = 0; i < size_increase; ++i) {
 8007c82:	d006      	beq.n	8007c92 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x62>
 8007c84:	2803      	cmp	r0, #3
      dims_[i] = val;
 8007c86:	931f      	str	r3, [sp, #124]	; 0x7c
    for (int i = 0; i < size_increase; ++i) {
 8007c88:	d003      	beq.n	8007c92 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x62>
 8007c8a:	2804      	cmp	r0, #4
      dims_[i] = val;
 8007c8c:	9320      	str	r3, [sp, #128]	; 0x80
    for (int i = 0; i < size_increase; ++i) {
 8007c8e:	f040 813b 	bne.w	8007f08 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2d8>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 8007c92:	ab1d      	add	r3, sp, #116	; 0x74
 8007c94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007c98:	00ba      	lsls	r2, r7, #2
 8007c9a:	f10c 0104 	add.w	r1, ip, #4
 8007c9e:	f00a facc 	bl	801223a <memcpy>
    TFLITE_DCHECK_LT(i, size_);
 8007ca2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007ca4:	9304      	str	r3, [sp, #16]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f340 812e 	ble.w	8007f08 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2d8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8007cac:	2b05      	cmp	r3, #5
 8007cae:	f340 8118 	ble.w	8007ee2 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2b2>
 8007cb2:	991d      	ldr	r1, [sp, #116]	; 0x74
 8007cb4:	680b      	ldr	r3, [r1, #0]
 8007cb6:	9311      	str	r3, [sp, #68]	; 0x44
 8007cb8:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
 8007cbc:	68c9      	ldr	r1, [r1, #12]
 8007cbe:	9103      	str	r1, [sp, #12]
 8007cc0:	e9dd 7c18 	ldrd	r7, ip, [sp, #96]	; 0x60
  const int output_depth = output_shape.Dims(3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int num_elements_in_axis = input_width * input_height;

  TFLITE_CHECK_EQ(op_params.axis_count, 2);
 8007cc4:	f996 1000 	ldrsb.w	r1, [r6]
  const int num_elements_in_axis = input_width * input_height;
 8007cc8:	fb07 f00c 	mul.w	r0, r7, ip
  TFLITE_CHECK_EQ(op_params.axis_count, 2);
 8007ccc:	2902      	cmp	r1, #2
  const int num_elements_in_axis = input_width * input_height;
 8007cce:	9005      	str	r0, [sp, #20]
  TFLITE_CHECK_EQ(op_params.axis_count, 2);
 8007cd0:	f040 811a 	bne.w	8007f08 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2d8>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 8007cd4:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 8007cd8:	2901      	cmp	r1, #1
 8007cda:	f000 8110 	beq.w	8007efe <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2ce>
 8007cde:	2902      	cmp	r1, #2
 8007ce0:	f040 8112 	bne.w	8007f08 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2d8>
 8007ce4:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 8007ce8:	2901      	cmp	r1, #1
 8007cea:	f040 810d 	bne.w	8007f08 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2d8>
               (op_params.axis[0] == 2 && op_params.axis[1] == 1));
  TFLITE_CHECK_EQ(output_height, 1);
 8007cee:	2a01      	cmp	r2, #1
 8007cf0:	f040 810a 	bne.w	8007f08 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2d8>
  TFLITE_CHECK_EQ(output_width, 1);
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	f040 8107 	bne.w	8007f08 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2d8>

  static constexpr int32_t kMinInt = std::numeric_limits<integer_type>::min();
  static constexpr int32_t kMaxInt = std::numeric_limits<integer_type>::max();

  for (int out_b = 0; out_b < output_batch; ++out_b) {
 8007cfa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007cfc:	2a00      	cmp	r2, #0
 8007cfe:	f340 80be 	ble.w	8007e7e <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x24e>
 8007d02:	2d00      	cmp	r5, #0
  int right_shift = shift > 0 ? 0 : -shift;
 8007d04:	f1c5 0200 	rsb	r2, r5, #0
 8007d08:	bfc8      	it	gt
 8007d0a:	2200      	movgt	r2, #0
                 input_zero_point;
        }
      }
      acc = MultiplyByQuantizedMultiplier(acc, multiplier, shift);
      acc = acc > 0 ? (acc + num_elements_in_axis / 2) / num_elements_in_axis
                    : (acc - num_elements_in_axis / 2) / num_elements_in_axis;
 8007d0c:	9e05      	ldr	r6, [sp, #20]
 8007d0e:	9200      	str	r2, [sp, #0]
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 8007d10:	4093      	lsls	r3, r2
 8007d12:	1e5a      	subs	r2, r3, #1
  int left_shift = shift > 0 ? shift : 0;
 8007d14:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8007d18:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d1a:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8007d1e:	991e      	ldr	r1, [sp, #120]	; 0x78
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8007d20:	981f      	ldr	r0, [sp, #124]	; 0x7c
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8007d22:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8007d24:	f8dd e068 	ldr.w	lr, [sp, #104]	; 0x68
 8007d28:	9207      	str	r2, [sp, #28]
 8007d2a:	105b      	asrs	r3, r3, #1
 8007d2c:	425b      	negs	r3, r3
 8007d2e:	9306      	str	r3, [sp, #24]
 8007d30:	fb00 f301 	mul.w	r3, r0, r1
 8007d34:	fb05 f303 	mul.w	r3, r5, r3
  return a >> offset;
 8007d38:	1052      	asrs	r2, r2, #1
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8007d3a:	910a      	str	r1, [sp, #40]	; 0x28
 8007d3c:	9314      	str	r3, [sp, #80]	; 0x50
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 8007d3e:	991d      	ldr	r1, [sp, #116]	; 0x74
 8007d40:	9208      	str	r2, [sp, #32]
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8007d42:	2300      	movs	r3, #0
 8007d44:	fb0e f206 	mul.w	r2, lr, r6
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 8007d48:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 8007d4c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8007d50:	900b      	str	r0, [sp, #44]	; 0x2c
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8007d52:	950c      	str	r5, [sp, #48]	; 0x30
 8007d54:	9312      	str	r3, [sp, #72]	; 0x48
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 8007d56:	9109      	str	r1, [sp, #36]	; 0x24
 8007d58:	9213      	str	r2, [sp, #76]	; 0x4c
 8007d5a:	fb0c fb0e 	mul.w	fp, ip, lr
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 8007d5e:	469a      	mov	sl, r3
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 8007d60:	9b03      	ldr	r3, [sp, #12]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	dd7d      	ble.n	8007e62 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x232>
 8007d66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	9301      	str	r3, [sp, #4]
 8007d6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d70:	4413      	add	r3, r2
 8007d72:	f04f 0800 	mov.w	r8, #0
 8007d76:	930e      	str	r3, [sp, #56]	; 0x38
      for (int in_h = 0; in_h < input_height; ++in_h) {
 8007d78:	2f00      	cmp	r7, #0
      int32_t acc = 0;
 8007d7a:	f04f 0000 	mov.w	r0, #0
      for (int in_h = 0; in_h < input_height; ++in_h) {
 8007d7e:	f340 80ab 	ble.w	8007ed8 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2a8>
 8007d82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d84:	4605      	mov	r5, r0
 8007d86:	eb03 0608 	add.w	r6, r3, r8
        for (int in_w = 0; in_w < input_width; ++in_w) {
 8007d8a:	f1bc 0f00 	cmp.w	ip, #0
 8007d8e:	dd12      	ble.n	8007db6 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x186>
 8007d90:	45ca      	cmp	sl, r9
 8007d92:	f280 80b9 	bge.w	8007f08 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2d8>
 8007d96:	45f0      	cmp	r8, lr
 8007d98:	f280 80b6 	bge.w	8007f08 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2d8>
 8007d9c:	42bd      	cmp	r5, r7
 8007d9e:	f280 80b3 	bge.w	8007f08 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2d8>
 8007da2:	4631      	mov	r1, r6
 8007da4:	2200      	movs	r2, #0
          acc += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)] -
 8007da6:	f991 3000 	ldrsb.w	r3, [r1]
        for (int in_w = 0; in_w < input_width; ++in_w) {
 8007daa:	3201      	adds	r2, #1
          acc += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)] -
 8007dac:	1b1b      	subs	r3, r3, r4
        for (int in_w = 0; in_w < input_width; ++in_w) {
 8007dae:	4562      	cmp	r2, ip
 8007db0:	4471      	add	r1, lr
          acc += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)] -
 8007db2:	4418      	add	r0, r3
        for (int in_w = 0; in_w < input_width; ++in_w) {
 8007db4:	d1f7      	bne.n	8007da6 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x176>
      for (int in_h = 0; in_h < input_height; ++in_h) {
 8007db6:	3501      	adds	r5, #1
 8007db8:	42bd      	cmp	r5, r7
 8007dba:	445e      	add	r6, fp
 8007dbc:	d1e5      	bne.n	8007d8a <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x15a>
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8007dbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007dc0:	4098      	lsls	r0, r3
  std::int64_t ab_64 = a_64 * b_64;
 8007dc2:	9b02      	ldr	r3, [sp, #8]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8007dc4:	4283      	cmp	r3, r0
  std::int64_t ab_64 = a_64 * b_64;
 8007dc6:	fb83 1200 	smull	r1, r2, r3, r0
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8007dca:	d065      	beq.n	8007e98 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x268>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8007dcc:	2a00      	cmp	r2, #0
 8007dce:	db74      	blt.n	8007eba <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x28a>
 8007dd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007dd4:	2000      	movs	r0, #0
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8007dd6:	18cb      	adds	r3, r1, r3
 8007dd8:	eb42 0000 	adc.w	r0, r2, r0
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	da04      	bge.n	8007dea <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x1ba>
 8007de0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007de4:	189b      	adds	r3, r3, r2
 8007de6:	f140 0000 	adc.w	r0, r0, #0
 8007dea:	0fdb      	lsrs	r3, r3, #31
 8007dec:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  assert(exponent <= 31);
 8007df0:	9a00      	ldr	r2, [sp, #0]
 8007df2:	2a1f      	cmp	r2, #31
 8007df4:	f300 808a 	bgt.w	8007f0c <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2dc>
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8007df8:	4610      	mov	r0, r2
  return a & b;
 8007dfa:	9a07      	ldr	r2, [sp, #28]
 8007dfc:	ea03 0102 	and.w	r1, r3, r2
  return a + b;
 8007e00:	9a08      	ldr	r2, [sp, #32]
 8007e02:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
  return a >> offset;
 8007e06:	4103      	asrs	r3, r0
  return a + b;
 8007e08:	4291      	cmp	r1, r2
 8007e0a:	bfc8      	it	gt
 8007e0c:	3301      	addgt	r3, #1
      acc = acc > 0 ? (acc + num_elements_in_axis / 2) / num_elements_in_axis
 8007e0e:	9a06      	ldr	r2, [sp, #24]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	bfcc      	ite	gt
 8007e14:	1a9b      	subgt	r3, r3, r2
                    : (acc - num_elements_in_axis / 2) / num_elements_in_axis;
 8007e16:	189b      	addle	r3, r3, r2
      acc = acc > 0 ? (acc + num_elements_in_axis / 2) / num_elements_in_axis
 8007e18:	9a05      	ldr	r2, [sp, #20]
 8007e1a:	fb93 f3f2 	sdiv	r3, r3, r2
      acc += output_zero_point;
 8007e1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e20:	4413      	add	r3, r2
 8007e22:	2b7f      	cmp	r3, #127	; 0x7f
 8007e24:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8007e28:	bfa8      	it	ge
 8007e2a:	237f      	movge	r3, #127	; 0x7f
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	bfb8      	it	lt
 8007e30:	4613      	movlt	r3, r2
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 8007e32:	9a04      	ldr	r2, [sp, #16]
 8007e34:	2a04      	cmp	r2, #4
 8007e36:	d167      	bne.n	8007f08 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2d8>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 8007e38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e3a:	4592      	cmp	sl, r2
 8007e3c:	da64      	bge.n	8007f08 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2d8>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8007e3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e40:	2a00      	cmp	r2, #0
 8007e42:	dd61      	ble.n	8007f08 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2d8>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8007e44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e46:	2a00      	cmp	r2, #0
 8007e48:	dd5e      	ble.n	8007f08 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2d8>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8007e4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e4c:	4590      	cmp	r8, r2
 8007e4e:	da5b      	bge.n	8007f08 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2d8>
      acc = std::min(std::max(acc, kMinInt), kMaxInt);
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
 8007e50:	9a01      	ldr	r2, [sp, #4]
 8007e52:	f802 3f01 	strb.w	r3, [r2, #1]!
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 8007e56:	9b03      	ldr	r3, [sp, #12]
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
 8007e58:	9201      	str	r2, [sp, #4]
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 8007e5a:	f108 0801 	add.w	r8, r8, #1
 8007e5e:	4598      	cmp	r8, r3
 8007e60:	d18a      	bne.n	8007d78 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x148>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 8007e62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e66:	4413      	add	r3, r2
 8007e68:	9310      	str	r3, [sp, #64]	; 0x40
 8007e6a:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
 8007e6e:	4413      	add	r3, r2
 8007e70:	9312      	str	r3, [sp, #72]	; 0x48
 8007e72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e74:	f10a 0a01 	add.w	sl, sl, #1
 8007e78:	459a      	cmp	sl, r3
 8007e7a:	f47f af71 	bne.w	8007d60 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x130>
    if (size_ > kMaxSmallSize) {
 8007e7e:	9b04      	ldr	r3, [sp, #16]
 8007e80:	2b05      	cmp	r3, #5
 8007e82:	dd06      	ble.n	8007e92 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x262>
      delete[] dims_pointer_;
 8007e84:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007e86:	b120      	cbz	r0, 8007e92 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x262>
          static_cast<integer_type>(acc);
    }
  }
}
 8007e88:	b023      	add	sp, #140	; 0x8c
 8007e8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8e:	f008 be9f 	b.w	8010bd0 <_ZdaPv>
 8007e92:	b023      	add	sp, #140	; 0x8c
 8007e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8007e98:	2a00      	cmp	r2, #0
 8007e9a:	461d      	mov	r5, r3
 8007e9c:	bfa8      	it	ge
 8007e9e:	2000      	movge	r0, #0
 8007ea0:	4b1e      	ldr	r3, [pc, #120]	; (8007f1c <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2ec>)
 8007ea2:	bfb4      	ite	lt
 8007ea4:	f04f 30ff 	movlt.w	r0, #4294967295
 8007ea8:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8007eac:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8007eb0:	bf08      	it	eq
 8007eb2:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
 8007eb6:	d09b      	beq.n	8007df0 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x1c0>
 8007eb8:	e78d      	b.n	8007dd6 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x1a6>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8007eba:	4b18      	ldr	r3, [pc, #96]	; (8007f1c <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2ec>)
 8007ebc:	18cb      	adds	r3, r1, r3
 8007ebe:	f162 0200 	sbc.w	r2, r2, #0
 8007ec2:	2a00      	cmp	r2, #0
 8007ec4:	da04      	bge.n	8007ed0 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2a0>
 8007ec6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007eca:	185b      	adds	r3, r3, r1
 8007ecc:	f142 0200 	adc.w	r2, r2, #0
 8007ed0:	0fdb      	lsrs	r3, r3, #31
 8007ed2:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8007ed6:	e78b      	b.n	8007df0 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x1c0>
      for (int in_h = 0; in_h < input_height; ++in_h) {
 8007ed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007edc:	4601      	mov	r1, r0
 8007ede:	4602      	mov	r2, r0
 8007ee0:	e779      	b.n	8007dd6 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x1a6>
 8007ee2:	4619      	mov	r1, r3
    TFLITE_DCHECK_LT(i, size_);
 8007ee4:	2901      	cmp	r1, #1
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8007ee6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ee8:	9311      	str	r3, [sp, #68]	; 0x44
    TFLITE_DCHECK_LT(i, size_);
 8007eea:	d00d      	beq.n	8007f08 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2d8>
 8007eec:	2902      	cmp	r1, #2
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8007eee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    TFLITE_DCHECK_LT(i, size_);
 8007ef0:	d00a      	beq.n	8007f08 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2d8>
 8007ef2:	2903      	cmp	r1, #3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8007ef4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    TFLITE_DCHECK_LT(i, size_);
 8007ef6:	d007      	beq.n	8007f08 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2d8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8007ef8:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007efa:	9103      	str	r1, [sp, #12]
 8007efc:	e6e0      	b.n	8007cc0 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x90>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 8007efe:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 8007f02:	2902      	cmp	r1, #2
 8007f04:	f43f aef3 	beq.w	8007cee <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0xbe>
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 8007f08:	f009 f93c 	bl	8011184 <abort>
  assert(exponent <= 31);
 8007f0c:	4b04      	ldr	r3, [pc, #16]	; (8007f20 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2f0>)
 8007f0e:	4a05      	ldr	r2, [pc, #20]	; (8007f24 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2f4>)
 8007f10:	4805      	ldr	r0, [pc, #20]	; (8007f28 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2f8>)
 8007f12:	f240 1167 	movw	r1, #359	; 0x167
 8007f16:	f009 f93d 	bl	8011194 <__assert_func>
 8007f1a:	bf00      	nop
 8007f1c:	c0000001 	.word	0xc0000001
 8007f20:	08016a84 	.word	0x08016a84
 8007f24:	08016a94 	.word	0x08016a94
 8007f28:	08016af0 	.word	0x08016af0

08007f2c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus EvalMean(TfLiteContext* context, TfLiteNode* node) {
 8007f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f30:	ed2d 8b06 	vpush	{d8-d10}
 8007f34:	b0a1      	sub	sp, #132	; 0x84
  TFLITE_DCHECK(context != nullptr);
 8007f36:	2800      	cmp	r0, #0
 8007f38:	f000 85d9 	beq.w	8008aee <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbc2>
  TFLITE_DCHECK(node != nullptr);
 8007f3c:	460c      	mov	r4, r1
 8007f3e:	2900      	cmp	r1, #0
 8007f40:	f000 85d5 	beq.w	8008aee <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbc2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8007f44:	680a      	ldr	r2, [r1, #0]
 8007f46:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8007f48:	6851      	ldr	r1, [r2, #4]
 8007f4a:	4683      	mov	fp, r0
 8007f4c:	4798      	blx	r3
 8007f4e:	6822      	ldr	r2, [r4, #0]
 8007f50:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
 8007f54:	6891      	ldr	r1, [r2, #8]
 8007f56:	4605      	mov	r5, r0
 8007f58:	4658      	mov	r0, fp
 8007f5a:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8007f5c:	6863      	ldr	r3, [r4, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8007f5e:	4680      	mov	r8, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8007f60:	6859      	ldr	r1, [r3, #4]
 8007f62:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
 8007f66:	4658      	mov	r0, fp
 8007f68:	4798      	blx	r3
  TfLiteReducerParams* params =
 8007f6a:	6963      	ldr	r3, [r4, #20]
  OpData* op_data = reinterpret_cast<OpData*>(node->user_data);
 8007f6c:	f8d4 a010 	ldr.w	sl, [r4, #16]
  TfLiteReducerParams* params =
 8007f70:	9306      	str	r3, [sp, #24]
 8007f72:	4681      	mov	r9, r0
  int num_axis = static_cast<int>(ElementCount(*axis->dims));
 8007f74:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007f78:	f7fe fcca 	bl	8006910 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
  for (; i < axis_count; ++i) {
 8007f7c:	1e04      	subs	r4, r0, #0
  return reinterpret_cast<const T*>(tensor->data.raw);
 8007f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f82:	f340 8349 	ble.w	8008618 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x6ec>
    op_params->axis[i] = static_cast<int16_t>(axis_data[i]);
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
  for (; i < axis_count; ++i) {
 8007f8c:	2c01      	cmp	r4, #1
 8007f8e:	d04e      	beq.n	800802e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x102>
    op_params->axis[i] = static_cast<int16_t>(axis_data[i]);
 8007f90:	685a      	ldr	r2, [r3, #4]
 8007f92:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
  for (; i < axis_count; ++i) {
 8007f96:	2c02      	cmp	r4, #2
 8007f98:	d049      	beq.n	800802e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x102>
    op_params->axis[i] = static_cast<int16_t>(axis_data[i]);
 8007f9a:	689a      	ldr	r2, [r3, #8]
 8007f9c:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
  for (; i < axis_count; ++i) {
 8007fa0:	2c03      	cmp	r4, #3
 8007fa2:	d044      	beq.n	800802e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x102>
    op_params->axis[i] = static_cast<int16_t>(axis_data[i]);
 8007fa4:	68da      	ldr	r2, [r3, #12]
 8007fa6:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
  for (; i < 4; ++i) {
 8007faa:	2c04      	cmp	r4, #4
 8007fac:	f000 832b 	beq.w	8008606 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x6da>
    op_params->axis[i] = 1;
 8007fb0:	aa20      	add	r2, sp, #128	; 0x80
 8007fb2:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	f822 1c3a 	strh.w	r1, [r2, #-58]
  for (; i < 4; ++i) {
 8007fbc:	1861      	adds	r1, r4, r1
    op_params->axis[i] = 1;
 8007fbe:	aa20      	add	r2, sp, #128	; 0x80
 8007fc0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8007fc4:	2001      	movs	r0, #1
  for (; i < 4; ++i) {
 8007fc6:	2903      	cmp	r1, #3
    op_params->axis[i] = 1;
 8007fc8:	f822 0c3a 	strh.w	r0, [r2, #-58]
  for (; i < 4; ++i) {
 8007fcc:	eb01 0200 	add.w	r2, r1, r0
 8007fd0:	d00e      	beq.n	8007ff0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc4>
    op_params->axis[i] = 1;
 8007fd2:	a920      	add	r1, sp, #128	; 0x80
 8007fd4:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8007fd8:	2001      	movs	r0, #1
  for (; i < 4; ++i) {
 8007fda:	2a03      	cmp	r2, #3
    op_params->axis[i] = 1;
 8007fdc:	f821 0c3a 	strh.w	r0, [r1, #-58]
  for (; i < 4; ++i) {
 8007fe0:	eb02 0100 	add.w	r1, r2, r0
 8007fe4:	d004      	beq.n	8007ff0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc4>
    op_params->axis[i] = 1;
 8007fe6:	aa20      	add	r2, sp, #128	; 0x80
 8007fe8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007fec:	f821 0c3a 	strh.w	r0, [r1, #-58]
      input->dims->size == 4 && op_params.axis_count == 2 &&
 8007ff0:	686a      	ldr	r2, [r5, #4]
 8007ff2:	9207      	str	r2, [sp, #28]
 8007ff4:	4611      	mov	r1, r2
  op_params->axis_count = axis_count;
 8007ff6:	b262      	sxtb	r2, r4
      input->dims->size == 4 && op_params.axis_count == 2 &&
 8007ff8:	680f      	ldr	r7, [r1, #0]
  op_params->axis_count = axis_count;
 8007ffa:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
      input->dims->size == 4 && op_params.axis_count == 2 &&
 8007ffe:	2f04      	cmp	r7, #4
 8008000:	d01f      	beq.n	8008042 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x116>
  switch (input->type) {
 8008002:	7a2e      	ldrb	r6, [r5, #8]
 8008004:	2e03      	cmp	r6, #3
 8008006:	f000 813e 	beq.w	8008286 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x35a>
      input->dims->size == 4 && op_params.axis_count == 2 &&
 800800a:	2200      	movs	r2, #0
  switch (input->type) {
 800800c:	2e09      	cmp	r6, #9
 800800e:	d025      	beq.n	800805c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x130>
 8008010:	2e01      	cmp	r6, #1
 8008012:	f000 822c 	beq.w	800846e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x542>
      TF_LITE_ENSURE_MSG(context, false,
 8008016:	f8db 3014 	ldr.w	r3, [fp, #20]
 800801a:	49b4      	ldr	r1, [pc, #720]	; (80082ec <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x3c0>)
 800801c:	4658      	mov	r0, fp
 800801e:	4798      	blx	r3
 8008020:	2601      	movs	r6, #1
}
 8008022:	4630      	mov	r0, r6
 8008024:	b021      	add	sp, #132	; 0x84
 8008026:	ecbd 8b06 	vpop	{d8-d10}
 800802a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    op_params->axis[i] = 1;
 800802e:	aa20      	add	r2, sp, #128	; 0x80
 8008030:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8008034:	2101      	movs	r1, #1
  for (; i < 4; ++i) {
 8008036:	2c03      	cmp	r4, #3
    op_params->axis[i] = 1;
 8008038:	f822 1c3a 	strh.w	r1, [r2, #-58]
  for (; i < 4; ++i) {
 800803c:	4421      	add	r1, r4
 800803e:	d0d7      	beq.n	8007ff0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc4>
 8008040:	e7bd      	b.n	8007fbe <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x92>
      input->dims->size == 4 && op_params.axis_count == 2 &&
 8008042:	2a02      	cmp	r2, #2
 8008044:	f000 82ef 	beq.w	8008626 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x6fa>
  switch (input->type) {
 8008048:	7a2e      	ldrb	r6, [r5, #8]
 800804a:	2e03      	cmp	r6, #3
 800804c:	f000 811b 	beq.w	8008286 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x35a>
 8008050:	2e09      	cmp	r6, #9
 8008052:	f04f 0704 	mov.w	r7, #4
      input->dims->size == 4 && op_params.axis_count == 2 &&
 8008056:	f04f 0200 	mov.w	r2, #0
  switch (input->type) {
 800805a:	d1d9      	bne.n	8008010 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe4>
      if (params->keep_dims && special_case_4d_axes_1_and_2) {
 800805c:	9b06      	ldr	r3, [sp, #24]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	b113      	cbz	r3, 8008068 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x13c>
 8008062:	2a00      	cmp	r2, #0
 8008064:	f040 8673 	bne.w	8008d4e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe22>
      } else if (op_data->input_zp == op_data->output_zp &&
 8008068:	f8da 2010 	ldr.w	r2, [sl, #16]
 800806c:	f8da 3018 	ldr.w	r3, [sl, #24]
 8008070:	429a      	cmp	r2, r3
 8008072:	f000 840b 	beq.w	800888c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x960>
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 8008076:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
 800807a:	f8da 1008 	ldr.w	r1, [sl, #8]
 800807e:	4658      	mov	r0, fp
 8008080:	4798      	blx	r3
        TF_LITE_ENSURE(
 8008082:	686b      	ldr	r3, [r5, #4]
 8008084:	682a      	ldr	r2, [r5, #0]
 8008086:	9209      	str	r2, [sp, #36]	; 0x24
 8008088:	f8da 2010 	ldr.w	r2, [sl, #16]
 800808c:	ed9a 8a05 	vldr	s16, [sl, #20]
 8008090:	681e      	ldr	r6, [r3, #0]
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 8008092:	9007      	str	r0, [sp, #28]
        TF_LITE_ENSURE(
 8008094:	9308      	str	r3, [sp, #32]
 8008096:	920e      	str	r2, [sp, #56]	; 0x38
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8008098:	f1b9 0f00 	cmp.w	r9, #0
 800809c:	f000 86f8 	beq.w	8008e90 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf64>
 80080a0:	f8d9 3000 	ldr.w	r3, [r9]
 80080a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80080a6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80080aa:	f8da 3018 	ldr.w	r3, [sl, #24]
 80080ae:	f8d1 c000 	ldr.w	ip, [r1]
 80080b2:	edda 8a07 	vldr	s17, [sl, #28]
  return reinterpret_cast<const T*>(tensor->data.raw);
 80080b6:	f8d8 5000 	ldr.w	r5, [r8]
 80080ba:	930f      	str	r3, [sp, #60]	; 0x3c
  } else {
    ruy::profiler::ScopeLabel label(compute_sum ? "Sum/Int8" : "Mean/Int8");
  }
  // Reset output data.
  size_t num_outputs = 1;
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80080bc:	f1bc 0f00 	cmp.w	ip, #0
    size_t current = static_cast<size_t>(output_dims[idx]);
 80080c0:	f04f 0701 	mov.w	r7, #1
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80080c4:	dd10      	ble.n	80080e8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1bc>
    size_t current = static_cast<size_t>(output_dims[idx]);
 80080c6:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80080ca:	2300      	movs	r3, #0
 80080cc:	e006      	b.n	80080dc <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1b0>
 80080ce:	f851 2f04 	ldr.w	r2, [r1, #4]!
    // Overflow prevention.
    if (num_outputs > std::numeric_limits<size_t>::max() / current) {
 80080d2:	fba2 e007 	umull	lr, r0, r2, r7
 80080d6:	2800      	cmp	r0, #0
 80080d8:	f040 852e 	bne.w	8008b38 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc0c>
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80080dc:	3301      	adds	r3, #1
 80080de:	459c      	cmp	ip, r3
      return false;
    }
    num_outputs *= current;
 80080e0:	fb02 f707 	mul.w	r7, r2, r7
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80080e4:	d1f3      	bne.n	80080ce <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1a2>
  }
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 80080e6:	b32f      	cbz	r7, 8008134 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x208>
 80080e8:	2f00      	cmp	r7, #0
 80080ea:	9807      	ldr	r0, [sp, #28]
 80080ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080ee:	ea4f 0887 	mov.w	r8, r7, lsl #2
 80080f2:	bf08      	it	eq
 80080f4:	f04f 0804 	moveq.w	r8, #4
 80080f8:	eb00 0308 	add.w	r3, r0, r8
 80080fc:	bf14      	ite	ne
 80080fe:	463a      	movne	r2, r7
 8008100:	2201      	moveq	r2, #1
 8008102:	4299      	cmp	r1, r3
 8008104:	f080 84b1 	bcs.w	8008a6a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb3e>
 8008108:	4411      	add	r1, r2
 800810a:	4288      	cmp	r0, r1
 800810c:	bf34      	ite	cc
 800810e:	2100      	movcc	r1, #0
 8008110:	2101      	movcs	r1, #1
 8008112:	2900      	cmp	r1, #0
 8008114:	f040 84a9 	bne.w	8008a6a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb3e>
 8008118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800811a:	3804      	subs	r0, #4
 800811c:	1e5a      	subs	r2, r3, #1
 800811e:	469c      	mov	ip, r3
 8008120:	4613      	mov	r3, r2
 8008122:	3302      	adds	r3, #2
 8008124:	eba3 030c 	sub.w	r3, r3, ip
 8008128:	429f      	cmp	r7, r3
    output_data[idx] = T();
 800812a:	f802 1f01 	strb.w	r1, [r2, #1]!
    temp_sum[idx] = U();
 800812e:	f840 1f04 	str.w	r1, [r0, #4]!
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008132:	d8f5      	bhi.n	8008120 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1f4>
  if (num_dims == 0) {
 8008134:	2e00      	cmp	r6, #0
 8008136:	f000 869f 	beq.w	8008e78 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf4c>
  }

  // Resolve axis.
  int num_resolved_axis = 0;
  if (!ResolveAxis(input_num_dims, axis, num_axis_dimensions, resolved_axis,
 800813a:	ea4f 79e4 	mov.w	r9, r4, asr #31
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 800813e:	2c01      	cmp	r4, #1
 8008140:	f179 0300 	sbcs.w	r3, r9, #0
 8008144:	f2c0 874d 	blt.w	8008fe2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x10b6>
 8008148:	f1a5 0804 	sub.w	r8, r5, #4
  int num_resolved_axis = 0;
 800814c:	2500      	movs	r5, #0
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 800814e:	46ac      	mov	ip, r5
 8008150:	46ae      	mov	lr, r5
    int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];
 8008152:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8008156:	2800      	cmp	r0, #0
 8008158:	f2c0 84cf 	blt.w	8008afa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbce>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 800815c:	4286      	cmp	r6, r0
 800815e:	f340 84c6 	ble.w	8008aee <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbc2>
    for (int j = 0; j < *out_num_axis; ++j) {
 8008162:	2d00      	cmp	r5, #0
 8008164:	f000 84b1 	beq.w	8008aca <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb9e>
 8008168:	aa14      	add	r2, sp, #80	; 0x50
 800816a:	2300      	movs	r3, #0
 800816c:	e003      	b.n	8008176 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x24a>
 800816e:	3301      	adds	r3, #1
 8008170:	42ab      	cmp	r3, r5
 8008172:	f000 84aa 	beq.w	8008aca <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb9e>
      if (out_axis[j] == current) {
 8008176:	f852 1b04 	ldr.w	r1, [r2], #4
 800817a:	4281      	cmp	r1, r0
 800817c:	d1f7      	bne.n	800816e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x242>
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 800817e:	f11c 0c01 	adds.w	ip, ip, #1
 8008182:	f14e 0e00 	adc.w	lr, lr, #0
 8008186:	45a4      	cmp	ip, r4
 8008188:	eb7e 0309 	sbcs.w	r3, lr, r9
 800818c:	dbe1      	blt.n	8008152 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x226>
  for (int idx = 0; idx < input_num_dims; ++idx) {
 800818e:	2e00      	cmp	r6, #0
 8008190:	f340 8778 	ble.w	8009084 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1158>
    input_iter[idx] = 0;
 8008194:	ab1a      	add	r3, sp, #104	; 0x68
 8008196:	00b4      	lsls	r4, r6, #2
 8008198:	4622      	mov	r2, r4
 800819a:	2100      	movs	r1, #0
 800819c:	4618      	mov	r0, r3
 800819e:	9306      	str	r3, [sp, #24]
 80081a0:	f009 ff66 	bl	8012070 <memset>
 80081a4:	9a08      	ldr	r2, [sp, #32]
 80081a6:	1c73      	adds	r3, r6, #1
 80081a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80081ac:	930c      	str	r3, [sp, #48]	; 0x30
 80081ae:	9b06      	ldr	r3, [sp, #24]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 80081b0:	1e71      	subs	r1, r6, #1
 80081b2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80081b6:	eb02 0e04 	add.w	lr, r2, r4
 80081ba:	910a      	str	r1, [sp, #40]	; 0x28
 80081bc:	f102 0904 	add.w	r9, r2, #4
 80081c0:	930d      	str	r3, [sp, #52]	; 0x34
  size_t offset = 0;
 80081c2:	f04f 0800 	mov.w	r8, #0
 80081c6:	46ba      	mov	sl, r7
  if (num_dims == 0) {
 80081c8:	2e00      	cmp	r6, #0
 80081ca:	f000 84fc 	beq.w	8008bc6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc9a>
  for (int idx = 0; idx < num_dims; ++idx) {
 80081ce:	f340 8683 	ble.w	8008ed8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xfac>
 80081d2:	9a06      	ldr	r2, [sp, #24]
 80081d4:	9b08      	ldr	r3, [sp, #32]
 80081d6:	4611      	mov	r1, r2
  size_t offset = 0;
 80081d8:	2000      	movs	r0, #0
      offset = offset * static_cast<size_t>(dims[idx]) +
 80081da:	f853 7f04 	ldr.w	r7, [r3, #4]!
               static_cast<size_t>(index[idx]);
 80081de:	f852 4b04 	ldr.w	r4, [r2], #4
  for (int idx = 0; idx < num_dims; ++idx) {
 80081e2:	459e      	cmp	lr, r3
      offset = offset * static_cast<size_t>(dims[idx]) +
 80081e4:	fb07 4000 	mla	r0, r7, r0, r4
  for (int idx = 0; idx < num_dims; ++idx) {
 80081e8:	d1f7      	bne.n	80081da <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x2ae>
 80081ea:	2400      	movs	r4, #0
 80081ec:	4622      	mov	r2, r4
 80081ee:	4684      	mov	ip, r0
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
 80081f0:	2d00      	cmp	r5, #0
 80081f2:	f000 845c 	beq.w	8008aae <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb82>
 80081f6:	af14      	add	r7, sp, #80	; 0x50
 80081f8:	2300      	movs	r3, #0
 80081fa:	e003      	b.n	8008204 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x2d8>
 80081fc:	3301      	adds	r3, #1
 80081fe:	42ab      	cmp	r3, r5
 8008200:	f000 8455 	beq.w	8008aae <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb82>
        if (idx == axis[axis_idx]) {
 8008204:	f857 0b04 	ldr.w	r0, [r7], #4
 8008208:	4290      	cmp	r0, r2
 800820a:	d1f7      	bne.n	80081fc <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x2d0>
  for (int idx = 0; idx < num_dims; ++idx) {
 800820c:	3201      	adds	r2, #1
 800820e:	4296      	cmp	r6, r2
 8008210:	f101 0104 	add.w	r1, r1, #4
 8008214:	d1ec      	bne.n	80081f0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x2c4>
        reducer(output_data[output_offset], input_data[input_offset]);
 8008216:	9b07      	ldr	r3, [sp, #28]
 8008218:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800821c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800821e:	4660      	mov	r0, ip
 8008220:	4418      	add	r0, r3
    const Out actual_in = static_cast<Out>(in);
 8008222:	f990 2000 	ldrsb.w	r2, [r0]
    return current + actual_in;
 8008226:	6823      	ldr	r3, [r4, #0]
 8008228:	4413      	add	r3, r2
    output_data[output_offset] =
 800822a:	6023      	str	r3, [r4, #0]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 800822c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800822e:	2b00      	cmp	r3, #0
 8008230:	f2c0 8589 	blt.w	8008d46 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe1a>
 8008234:	e9dd 020c 	ldrd	r0, r2, [sp, #48]	; 0x30
 8008238:	4619      	mov	r1, r3
 800823a:	e005      	b.n	8008248 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x31c>
 800823c:	3901      	subs	r1, #1
 800823e:	1c4f      	adds	r7, r1, #1
      current[idx] = 0;
 8008240:	f8c2 8004 	str.w	r8, [r2, #4]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8008244:	f000 857f 	beq.w	8008d46 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe1a>
    int current_val = current[idx] + carry;
 8008248:	4614      	mov	r4, r2
    TFLITE_DCHECK_GE(dims[idx], current_val);
 800824a:	f850 7d04 	ldr.w	r7, [r0, #-4]!
    int current_val = current[idx] + carry;
 800824e:	6823      	ldr	r3, [r4, #0]
 8008250:	3301      	adds	r3, #1
    TFLITE_DCHECK_GE(dims[idx], current_val);
 8008252:	42bb      	cmp	r3, r7
 8008254:	f1a2 0204 	sub.w	r2, r2, #4
 8008258:	f300 8449 	bgt.w	8008aee <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbc2>
    if (dims[idx] == current_val) {
 800825c:	d0ee      	beq.n	800823c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x310>
      current[idx] = current_val;
 800825e:	6023      	str	r3, [r4, #0]
  return (carry == 0);
 8008260:	e7b2      	b.n	80081c8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x29c>
      ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 8008262:	f9bd 1048 	ldrsh.w	r1, [sp, #72]	; 0x48
  switch (input->type) {
 8008266:	7a2e      	ldrb	r6, [r5, #8]
      ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 8008268:	f1a1 0202 	sub.w	r2, r1, #2
 800826c:	fab2 f282 	clz	r2, r2
  switch (input->type) {
 8008270:	2e03      	cmp	r6, #3
      ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 8008272:	ea4f 1252 	mov.w	r2, r2, lsr #5
  switch (input->type) {
 8008276:	f47f aec9 	bne.w	800800c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe0>
      if (params->keep_dims && special_case_4d_axes_1_and_2) {
 800827a:	9b06      	ldr	r3, [sp, #24]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	b113      	cbz	r3, 8008286 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x35a>
 8008280:	2902      	cmp	r1, #2
 8008282:	f000 81e6 	beq.w	8008652 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x726>
      } else if (op_data->input_zp == op_data->output_zp &&
 8008286:	f8da 2010 	ldr.w	r2, [sl, #16]
 800828a:	f8da 3018 	ldr.w	r3, [sl, #24]
 800828e:	429a      	cmp	r2, r3
 8008290:	f000 820d 	beq.w	80086ae <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x782>
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 8008294:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
 8008298:	f8da 1008 	ldr.w	r1, [sl, #8]
 800829c:	4658      	mov	r0, fp
 800829e:	4798      	blx	r3
        TF_LITE_ENSURE(
 80082a0:	686b      	ldr	r3, [r5, #4]
 80082a2:	682a      	ldr	r2, [r5, #0]
 80082a4:	9209      	str	r2, [sp, #36]	; 0x24
 80082a6:	f8da 2010 	ldr.w	r2, [sl, #16]
 80082aa:	ed9a 8a05 	vldr	s16, [sl, #20]
 80082ae:	681e      	ldr	r6, [r3, #0]
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 80082b0:	9007      	str	r0, [sp, #28]
        TF_LITE_ENSURE(
 80082b2:	9308      	str	r3, [sp, #32]
 80082b4:	920e      	str	r2, [sp, #56]	; 0x38
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80082b6:	f1b9 0f00 	cmp.w	r9, #0
 80082ba:	f000 85ed 	beq.w	8008e98 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf6c>
 80082be:	f8d9 3000 	ldr.w	r3, [r9]
 80082c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80082c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80082c8:	f8da 3018 	ldr.w	r3, [sl, #24]
 80082cc:	f8d1 c000 	ldr.w	ip, [r1]
 80082d0:	edda 8a07 	vldr	s17, [sl, #28]
  return reinterpret_cast<const T*>(tensor->data.raw);
 80082d4:	f8d8 5000 	ldr.w	r5, [r8]
 80082d8:	930f      	str	r3, [sp, #60]	; 0x3c
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80082da:	f1bc 0f00 	cmp.w	ip, #0
 80082de:	f340 8675 	ble.w	8008fcc <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x10a0>
    size_t current = static_cast<size_t>(output_dims[idx]);
 80082e2:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80082e6:	2701      	movs	r7, #1
 80082e8:	2300      	movs	r3, #0
 80082ea:	e008      	b.n	80082fe <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x3d2>
 80082ec:	08016b7c 	.word	0x08016b7c
 80082f0:	f851 2f04 	ldr.w	r2, [r1, #4]!
    if (num_outputs > std::numeric_limits<size_t>::max() / current) {
 80082f4:	fba2 e007 	umull	lr, r0, r2, r7
 80082f8:	2800      	cmp	r0, #0
 80082fa:	f040 8411 	bne.w	8008b20 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbf4>
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80082fe:	3301      	adds	r3, #1
 8008300:	459c      	cmp	ip, r3
    num_outputs *= current;
 8008302:	fb02 f707 	mul.w	r7, r2, r7
  for (int idx = 0; idx < output_num_dims; ++idx) {
 8008306:	d1f3      	bne.n	80082f0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x3c4>
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008308:	b1df      	cbz	r7, 8008342 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x416>
 800830a:	9a07      	ldr	r2, [sp, #28]
 800830c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800830e:	eb02 0387 	add.w	r3, r2, r7, lsl #2
 8008312:	4299      	cmp	r1, r3
 8008314:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8008318:	f080 83b2 	bcs.w	8008a80 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb54>
 800831c:	19cb      	adds	r3, r1, r7
 800831e:	429a      	cmp	r2, r3
 8008320:	bf34      	ite	cc
 8008322:	2300      	movcc	r3, #0
 8008324:	2301      	movcs	r3, #1
 8008326:	2b00      	cmp	r3, #0
 8008328:	f040 83aa 	bne.w	8008a80 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb54>
 800832c:	1e78      	subs	r0, r7, #1
 800832e:	4408      	add	r0, r1
 8008330:	1e4a      	subs	r2, r1, #1
 8008332:	9907      	ldr	r1, [sp, #28]
 8008334:	3904      	subs	r1, #4
    output_data[idx] = T();
 8008336:	f802 3f01 	strb.w	r3, [r2, #1]!
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 800833a:	4290      	cmp	r0, r2
    temp_sum[idx] = U();
 800833c:	f841 3f04 	str.w	r3, [r1, #4]!
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008340:	d1f9      	bne.n	8008336 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x40a>
  if (num_dims == 0) {
 8008342:	2e00      	cmp	r6, #0
 8008344:	f000 859e 	beq.w	8008e84 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf58>
  if (!ResolveAxis(input_num_dims, axis, num_axis_dimensions, resolved_axis,
 8008348:	ea4f 79e4 	mov.w	r9, r4, asr #31
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 800834c:	2c01      	cmp	r4, #1
 800834e:	f179 0300 	sbcs.w	r3, r9, #0
 8008352:	f2c0 8643 	blt.w	8008fdc <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x10b0>
 8008356:	f1a5 0804 	sub.w	r8, r5, #4
  int num_resolved_axis = 0;
 800835a:	2500      	movs	r5, #0
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 800835c:	46ac      	mov	ip, r5
 800835e:	46ae      	mov	lr, r5
    int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];
 8008360:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8008364:	2800      	cmp	r0, #0
 8008366:	f2c0 83c4 	blt.w	8008af2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbc6>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 800836a:	4286      	cmp	r6, r0
 800836c:	f340 83bf 	ble.w	8008aee <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbc2>
    for (int j = 0; j < *out_num_axis; ++j) {
 8008370:	2d00      	cmp	r5, #0
 8008372:	f000 83b2 	beq.w	8008ada <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbae>
 8008376:	aa14      	add	r2, sp, #80	; 0x50
 8008378:	2300      	movs	r3, #0
 800837a:	e003      	b.n	8008384 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x458>
 800837c:	3301      	adds	r3, #1
 800837e:	429d      	cmp	r5, r3
 8008380:	f000 83ab 	beq.w	8008ada <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbae>
      if (out_axis[j] == current) {
 8008384:	f852 1b04 	ldr.w	r1, [r2], #4
 8008388:	4281      	cmp	r1, r0
 800838a:	d1f7      	bne.n	800837c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x450>
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 800838c:	f11c 0c01 	adds.w	ip, ip, #1
 8008390:	f14e 0e00 	adc.w	lr, lr, #0
 8008394:	45a4      	cmp	ip, r4
 8008396:	eb7e 0309 	sbcs.w	r3, lr, r9
 800839a:	dbe1      	blt.n	8008360 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x434>
  for (int idx = 0; idx < input_num_dims; ++idx) {
 800839c:	2e00      	cmp	r6, #0
 800839e:	f340 866c 	ble.w	800907a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x114e>
    input_iter[idx] = 0;
 80083a2:	ab1a      	add	r3, sp, #104	; 0x68
 80083a4:	00b4      	lsls	r4, r6, #2
 80083a6:	4622      	mov	r2, r4
 80083a8:	2100      	movs	r1, #0
 80083aa:	4618      	mov	r0, r3
 80083ac:	9306      	str	r3, [sp, #24]
 80083ae:	f009 fe5f 	bl	8012070 <memset>
 80083b2:	9a08      	ldr	r2, [sp, #32]
 80083b4:	1c73      	adds	r3, r6, #1
 80083b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80083ba:	930c      	str	r3, [sp, #48]	; 0x30
 80083bc:	9b06      	ldr	r3, [sp, #24]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 80083be:	1e71      	subs	r1, r6, #1
 80083c0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80083c4:	eb02 0e04 	add.w	lr, r2, r4
 80083c8:	910a      	str	r1, [sp, #40]	; 0x28
 80083ca:	f102 0904 	add.w	r9, r2, #4
 80083ce:	930d      	str	r3, [sp, #52]	; 0x34
  size_t offset = 0;
 80083d0:	f04f 0800 	mov.w	r8, #0
 80083d4:	46ba      	mov	sl, r7
  if (num_dims == 0) {
 80083d6:	2e00      	cmp	r6, #0
 80083d8:	f000 8456 	beq.w	8008c88 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd5c>
  for (int idx = 0; idx < num_dims; ++idx) {
 80083dc:	f340 85ad 	ble.w	8008f3a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x100e>
 80083e0:	9a06      	ldr	r2, [sp, #24]
 80083e2:	9b08      	ldr	r3, [sp, #32]
 80083e4:	4611      	mov	r1, r2
  size_t offset = 0;
 80083e6:	2000      	movs	r0, #0
      offset = offset * static_cast<size_t>(dims[idx]) +
 80083e8:	f853 7f04 	ldr.w	r7, [r3, #4]!
               static_cast<size_t>(index[idx]);
 80083ec:	f852 4b04 	ldr.w	r4, [r2], #4
  for (int idx = 0; idx < num_dims; ++idx) {
 80083f0:	459e      	cmp	lr, r3
      offset = offset * static_cast<size_t>(dims[idx]) +
 80083f2:	fb07 4000 	mla	r0, r7, r0, r4
  for (int idx = 0; idx < num_dims; ++idx) {
 80083f6:	d1f7      	bne.n	80083e8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x4bc>
 80083f8:	2400      	movs	r4, #0
 80083fa:	4622      	mov	r2, r4
 80083fc:	4684      	mov	ip, r0
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
 80083fe:	2d00      	cmp	r5, #0
 8008400:	f000 834f 	beq.w	8008aa2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb76>
 8008404:	af14      	add	r7, sp, #80	; 0x50
 8008406:	2300      	movs	r3, #0
 8008408:	e003      	b.n	8008412 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x4e6>
 800840a:	3301      	adds	r3, #1
 800840c:	42ab      	cmp	r3, r5
 800840e:	f000 8348 	beq.w	8008aa2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb76>
        if (idx == axis[axis_idx]) {
 8008412:	f857 0b04 	ldr.w	r0, [r7], #4
 8008416:	4282      	cmp	r2, r0
 8008418:	d1f7      	bne.n	800840a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x4de>
  for (int idx = 0; idx < num_dims; ++idx) {
 800841a:	3201      	adds	r2, #1
 800841c:	4296      	cmp	r6, r2
 800841e:	f101 0104 	add.w	r1, r1, #4
 8008422:	d1ec      	bne.n	80083fe <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x4d2>
        reducer(output_data[output_offset], input_data[input_offset]);
 8008424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008426:	4660      	mov	r0, ip
 8008428:	4418      	add	r0, r3
 800842a:	9b07      	ldr	r3, [sp, #28]
 800842c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    const Out actual_in = static_cast<Out>(in);
 8008430:	7802      	ldrb	r2, [r0, #0]
    return current + actual_in;
 8008432:	6823      	ldr	r3, [r4, #0]
 8008434:	4413      	add	r3, r2
    output_data[output_offset] =
 8008436:	6023      	str	r3, [r4, #0]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8008438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800843a:	2b00      	cmp	r3, #0
 800843c:	f2c0 8485 	blt.w	8008d4a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe1e>
 8008440:	e9dd 020c 	ldrd	r0, r2, [sp, #48]	; 0x30
 8008444:	4619      	mov	r1, r3
 8008446:	e005      	b.n	8008454 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x528>
 8008448:	3901      	subs	r1, #1
 800844a:	1c4b      	adds	r3, r1, #1
      current[idx] = 0;
 800844c:	f8c2 8004 	str.w	r8, [r2, #4]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8008450:	f000 847b 	beq.w	8008d4a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe1e>
    int current_val = current[idx] + carry;
 8008454:	4614      	mov	r4, r2
    TFLITE_DCHECK_GE(dims[idx], current_val);
 8008456:	f850 7d04 	ldr.w	r7, [r0, #-4]!
    int current_val = current[idx] + carry;
 800845a:	6823      	ldr	r3, [r4, #0]
 800845c:	3301      	adds	r3, #1
    TFLITE_DCHECK_GE(dims[idx], current_val);
 800845e:	42bb      	cmp	r3, r7
 8008460:	f1a2 0204 	sub.w	r2, r2, #4
 8008464:	f300 8343 	bgt.w	8008aee <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbc2>
    if (dims[idx] == current_val) {
 8008468:	d0ee      	beq.n	8008448 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x51c>
      current[idx] = current_val;
 800846a:	6023      	str	r3, [r4, #0]
  return (carry == 0);
 800846c:	e7b3      	b.n	80083d6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x4aa>
      if (params->keep_dims && special_case_4d_axes_1_and_2) {
 800846e:	9906      	ldr	r1, [sp, #24]
 8008470:	7809      	ldrb	r1, [r1, #0]
 8008472:	b111      	cbz	r1, 800847a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x54e>
 8008474:	2a00      	cmp	r2, #0
 8008476:	f040 84a3 	bne.w	8008dc0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe94>
 800847a:	682a      	ldr	r2, [r5, #0]
 800847c:	9209      	str	r2, [sp, #36]	; 0x24
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800847e:	f1b9 0f00 	cmp.w	r9, #0
 8008482:	f000 84ba 	beq.w	8008dfa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xece>
 8008486:	f8d9 2000 	ldr.w	r2, [r9]
 800848a:	9208      	str	r2, [sp, #32]
        TF_LITE_ENSURE(
 800848c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8008490:	f8d0 c000 	ldr.w	ip, [r0]
  for (int idx = 0; idx < output_num_dims; ++idx) {
 8008494:	f1bc 0f00 	cmp.w	ip, #0
 8008498:	f340 8591 	ble.w	8008fbe <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1092>
    size_t current = static_cast<size_t>(output_dims[idx]);
 800849c:	f850 1f04 	ldr.w	r1, [r0, #4]!
  size_t num_outputs = 1;
 80084a0:	f04f 0801 	mov.w	r8, #1
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80084a4:	2200      	movs	r2, #0
 80084a6:	e006      	b.n	80084b6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x58a>
    size_t current = static_cast<size_t>(output_dims[idx]);
 80084a8:	f850 1f04 	ldr.w	r1, [r0, #4]!
    if (num_outputs > std::numeric_limits<size_t>::max() / current) {
 80084ac:	fba1 e508 	umull	lr, r5, r1, r8
 80084b0:	2d00      	cmp	r5, #0
 80084b2:	f040 8326 	bne.w	8008b02 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbd6>
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80084b6:	3201      	adds	r2, #1
 80084b8:	4594      	cmp	ip, r2
    num_outputs *= current;
 80084ba:	fb01 f808 	mul.w	r8, r1, r8
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80084be:	d1f3      	bne.n	80084a8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x57c>
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 80084c0:	f1b8 0f00 	cmp.w	r8, #0
 80084c4:	d007      	beq.n	80084d6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x5aa>
    output_data[idx] = T();
 80084c6:	9808      	ldr	r0, [sp, #32]
 80084c8:	9306      	str	r3, [sp, #24]
 80084ca:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80084ce:	2100      	movs	r1, #0
 80084d0:	f009 fdce 	bl	8012070 <memset>
 80084d4:	9b06      	ldr	r3, [sp, #24]
  if (num_dims == 0) {
 80084d6:	2f00      	cmp	r7, #0
 80084d8:	f000 84c8 	beq.w	8008e6c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf40>
  if (!ResolveAxis(input_num_dims, axis, num_axis_dimensions, resolved_axis,
 80084dc:	ea4f 79e4 	mov.w	r9, r4, asr #31
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 80084e0:	2c01      	cmp	r4, #1
 80084e2:	f179 0200 	sbcs.w	r2, r9, #0
 80084e6:	f2c0 857f 	blt.w	8008fe8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x10bc>
  int num_resolved_axis = 0;
 80084ea:	2500      	movs	r5, #0
 80084ec:	f1a3 0a04 	sub.w	sl, r3, #4
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 80084f0:	46ac      	mov	ip, r5
 80084f2:	46ae      	mov	lr, r5
    int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];
 80084f4:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80084f8:	2800      	cmp	r0, #0
 80084fa:	f2c0 82f5 	blt.w	8008ae8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbbc>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 80084fe:	4287      	cmp	r7, r0
 8008500:	f340 82f5 	ble.w	8008aee <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbc2>
    for (int j = 0; j < *out_num_axis; ++j) {
 8008504:	2d00      	cmp	r5, #0
 8008506:	f000 82d9 	beq.w	8008abc <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb90>
 800850a:	aa14      	add	r2, sp, #80	; 0x50
 800850c:	2300      	movs	r3, #0
 800850e:	e003      	b.n	8008518 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x5ec>
 8008510:	3301      	adds	r3, #1
 8008512:	42ab      	cmp	r3, r5
 8008514:	f000 82d2 	beq.w	8008abc <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb90>
      if (out_axis[j] == current) {
 8008518:	f852 1b04 	ldr.w	r1, [r2], #4
 800851c:	4281      	cmp	r1, r0
 800851e:	d1f7      	bne.n	8008510 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x5e4>
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 8008520:	f11c 0c01 	adds.w	ip, ip, #1
 8008524:	f14e 0e00 	adc.w	lr, lr, #0
 8008528:	45a4      	cmp	ip, r4
 800852a:	eb7e 0309 	sbcs.w	r3, lr, r9
 800852e:	dbe1      	blt.n	80084f4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x5c8>
  for (int idx = 0; idx < input_num_dims; ++idx) {
 8008530:	2f00      	cmp	r7, #0
 8008532:	f340 85b0 	ble.w	8009096 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x116a>
    input_iter[idx] = 0;
 8008536:	ab1a      	add	r3, sp, #104	; 0x68
 8008538:	ea4f 0a87 	mov.w	sl, r7, lsl #2
 800853c:	4652      	mov	r2, sl
 800853e:	2100      	movs	r1, #0
 8008540:	4618      	mov	r0, r3
 8008542:	9306      	str	r3, [sp, #24]
 8008544:	f009 fd94 	bl	8012070 <memset>
 8008548:	9a07      	ldr	r2, [sp, #28]
 800854a:	1c7b      	adds	r3, r7, #1
 800854c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008550:	930c      	str	r3, [sp, #48]	; 0x30
 8008552:	9b06      	ldr	r3, [sp, #24]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8008554:	1e79      	subs	r1, r7, #1
 8008556:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800855a:	4492      	add	sl, r2
 800855c:	910a      	str	r1, [sp, #40]	; 0x28
 800855e:	f102 0e04 	add.w	lr, r2, #4
 8008562:	930b      	str	r3, [sp, #44]	; 0x2c
  size_t offset = 0;
 8008564:	46b1      	mov	r9, r6
  if (num_dims == 0) {
 8008566:	2f00      	cmp	r7, #0
 8008568:	f000 8321 	beq.w	8008bae <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc82>
  for (int idx = 0; idx < num_dims; ++idx) {
 800856c:	f340 8498 	ble.w	8008ea0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf74>
 8008570:	9a06      	ldr	r2, [sp, #24]
 8008572:	9b07      	ldr	r3, [sp, #28]
 8008574:	4611      	mov	r1, r2
  size_t offset = 0;
 8008576:	2000      	movs	r0, #0
      offset = offset * static_cast<size_t>(dims[idx]) +
 8008578:	f853 6f04 	ldr.w	r6, [r3, #4]!
               static_cast<size_t>(index[idx]);
 800857c:	f852 4b04 	ldr.w	r4, [r2], #4
  for (int idx = 0; idx < num_dims; ++idx) {
 8008580:	4553      	cmp	r3, sl
      offset = offset * static_cast<size_t>(dims[idx]) +
 8008582:	fb06 4000 	mla	r0, r6, r0, r4
  for (int idx = 0; idx < num_dims; ++idx) {
 8008586:	d1f7      	bne.n	8008578 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x64c>
 8008588:	2400      	movs	r4, #0
 800858a:	4622      	mov	r2, r4
 800858c:	4684      	mov	ip, r0
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
 800858e:	2d00      	cmp	r5, #0
 8008590:	f000 8281 	beq.w	8008a96 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb6a>
 8008594:	ae14      	add	r6, sp, #80	; 0x50
 8008596:	2300      	movs	r3, #0
 8008598:	e003      	b.n	80085a2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x676>
 800859a:	3301      	adds	r3, #1
 800859c:	42ab      	cmp	r3, r5
 800859e:	f000 827a 	beq.w	8008a96 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb6a>
        if (idx == axis[axis_idx]) {
 80085a2:	f856 0b04 	ldr.w	r0, [r6], #4
 80085a6:	4290      	cmp	r0, r2
 80085a8:	d1f7      	bne.n	800859a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x66e>
  for (int idx = 0; idx < num_dims; ++idx) {
 80085aa:	3201      	adds	r2, #1
 80085ac:	42ba      	cmp	r2, r7
 80085ae:	f101 0104 	add.w	r1, r1, #4
 80085b2:	d1ec      	bne.n	800858e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x662>
        reducer(output_data[output_offset], input_data[input_offset]);
 80085b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b6:	eb03 008c 	add.w	r0, r3, ip, lsl #2
 80085ba:	9b08      	ldr	r3, [sp, #32]
 80085bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    return current + actual_in;
 80085c0:	ed90 7a00 	vldr	s14, [r0]
 80085c4:	edd4 7a00 	vldr	s15, [r4]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 80085c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80085ce:	2b00      	cmp	r3, #0
    output_data[output_offset] =
 80085d0:	edc4 7a00 	vstr	s15, [r4]
 80085d4:	f2c0 82bc 	blt.w	8008b50 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc24>
 80085d8:	e9dd 200b 	ldrd	r2, r0, [sp, #44]	; 0x2c
 80085dc:	4619      	mov	r1, r3
 80085de:	e005      	b.n	80085ec <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x6c0>
 80085e0:	3901      	subs	r1, #1
      current[idx] = 0;
 80085e2:	2300      	movs	r3, #0
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 80085e4:	1c4c      	adds	r4, r1, #1
      current[idx] = 0;
 80085e6:	6053      	str	r3, [r2, #4]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 80085e8:	f000 82b2 	beq.w	8008b50 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc24>
    int current_val = current[idx] + carry;
 80085ec:	4614      	mov	r4, r2
    TFLITE_DCHECK_GE(dims[idx], current_val);
 80085ee:	f850 6d04 	ldr.w	r6, [r0, #-4]!
    int current_val = current[idx] + carry;
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	3301      	adds	r3, #1
    TFLITE_DCHECK_GE(dims[idx], current_val);
 80085f6:	42b3      	cmp	r3, r6
 80085f8:	f1a2 0204 	sub.w	r2, r2, #4
 80085fc:	f300 8277 	bgt.w	8008aee <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbc2>
    if (dims[idx] == current_val) {
 8008600:	d0ee      	beq.n	80085e0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x6b4>
      current[idx] = current_val;
 8008602:	6023      	str	r3, [r4, #0]
  return (carry == 0);
 8008604:	e7af      	b.n	8008566 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x63a>
      input->dims->size == 4 && op_params.axis_count == 2 &&
 8008606:	686a      	ldr	r2, [r5, #4]
  op_params->axis_count = axis_count;
 8008608:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
      input->dims->size == 4 && op_params.axis_count == 2 &&
 800860c:	6817      	ldr	r7, [r2, #0]
 800860e:	9207      	str	r2, [sp, #28]
 8008610:	2f04      	cmp	r7, #4
 8008612:	f47f acf6 	bne.w	8008002 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd6>
 8008616:	e517      	b.n	8008048 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x11c>
    op_params->axis[i] = 1;
 8008618:	2201      	movs	r2, #1
 800861a:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
 800861e:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
  for (; i < 4; ++i) {
 8008622:	2202      	movs	r2, #2
 8008624:	e4d5      	b.n	8007fd2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa6>
      ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 8008626:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
      input->dims->size == 4 && op_params.axis_count == 2 &&
 800862a:	2a01      	cmp	r2, #1
 800862c:	f43f ae19 	beq.w	8008262 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x336>
      ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 8008630:	2a02      	cmp	r2, #2
 8008632:	f47f ace6 	bne.w	8008002 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd6>
       (op_params.axis[0] == 2 && op_params.axis[1] == 1));
 8008636:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
  switch (input->type) {
 800863a:	7a2e      	ldrb	r6, [r5, #8]
       (op_params.axis[0] == 2 && op_params.axis[1] == 1));
 800863c:	2a01      	cmp	r2, #1
 800863e:	f47f ace1 	bne.w	8008004 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd8>
  switch (input->type) {
 8008642:	2e03      	cmp	r6, #3
 8008644:	f47f ace2 	bne.w	800800c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe0>
      if (params->keep_dims && special_case_4d_axes_1_and_2) {
 8008648:	9b06      	ldr	r3, [sp, #24]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	f43f ae1a 	beq.w	8008286 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x35a>
        reference_ops::Mean(op_params, tflite::micro::GetTensorShape(input),
 8008652:	ac14      	add	r4, sp, #80	; 0x50
 8008654:	4629      	mov	r1, r5
 8008656:	4620      	mov	r0, r4
 8008658:	f7fe fa22 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            op_data->input_zp, op_data->input_scale,
 800865c:	f8da 3010 	ldr.w	r3, [sl, #16]
        reference_ops::Mean(op_params, tflite::micro::GetTensorShape(input),
 8008660:	ed9a 0a05 	vldr	s0, [sl, #20]
                            op_data->input_zp, op_data->input_scale,
 8008664:	9308      	str	r3, [sp, #32]
                            tflite::micro::GetTensorShape(output),
 8008666:	ab1a      	add	r3, sp, #104	; 0x68
  return reinterpret_cast<const T*>(tensor->data.raw);
 8008668:	682a      	ldr	r2, [r5, #0]
 800866a:	9209      	str	r2, [sp, #36]	; 0x24
 800866c:	4618      	mov	r0, r3
 800866e:	4649      	mov	r1, r9
 8008670:	9306      	str	r3, [sp, #24]
        reference_ops::Mean(op_params, tflite::micro::GetTensorShape(input),
 8008672:	ed8d 0a07 	vstr	s0, [sp, #28]
                            tflite::micro::GetTensorShape(output),
 8008676:	f7fe fa13 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800867a:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 800867e:	ed9d 0a07 	vldr	s0, [sp, #28]
 8008682:	f1b9 0f00 	cmp.w	r9, #0
 8008686:	d001      	beq.n	800868c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x760>
 8008688:	f8d9 9000 	ldr.w	r9, [r9]
        reference_ops::Mean(op_params, tflite::micro::GetTensorShape(input),
 800868c:	f8da 0018 	ldr.w	r0, [sl, #24]
 8008690:	edda 0a07 	vldr	s1, [sl, #28]
 8008694:	e9cd 9001 	strd	r9, r0, [sp, #4]
 8008698:	9806      	ldr	r0, [sp, #24]
 800869a:	9000      	str	r0, [sp, #0]
 800869c:	4621      	mov	r1, r4
 800869e:	a811      	add	r0, sp, #68	; 0x44
 80086a0:	f7fe fef4 	bl	800748c <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf>
    if (size_ > kMaxSmallSize) {
 80086a4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80086a6:	2b05      	cmp	r3, #5
 80086a8:	f340 837c 	ble.w	8008da4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe78>
 80086ac:	e376      	b.n	8008d9c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe70>
      } else if (op_data->input_zp == op_data->output_zp &&
 80086ae:	ed9a 7a05 	vldr	s14, [sl, #20]
 80086b2:	edda 7a07 	vldr	s15, [sl, #28]
 80086b6:	eeb4 7a67 	vcmp.f32	s14, s15
 80086ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086be:	f47f ade9 	bne.w	8008294 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x368>
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 80086c2:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
 80086c6:	f8da 1008 	ldr.w	r1, [sl, #8]
 80086ca:	4658      	mov	r0, fp
 80086cc:	4798      	blx	r3
        TF_LITE_ENSURE(
 80086ce:	686b      	ldr	r3, [r5, #4]
  return reinterpret_cast<const T*>(tensor->data.raw);
 80086d0:	682a      	ldr	r2, [r5, #0]
 80086d2:	681e      	ldr	r6, [r3, #0]
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 80086d4:	9007      	str	r0, [sp, #28]
        TF_LITE_ENSURE(
 80086d6:	930a      	str	r3, [sp, #40]	; 0x28
 80086d8:	9209      	str	r2, [sp, #36]	; 0x24
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80086da:	f1b9 0f00 	cmp.w	r9, #0
 80086de:	f000 8491 	beq.w	8009004 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x10d8>
 80086e2:	f8d9 3000 	ldr.w	r3, [r9]
 80086e6:	9308      	str	r3, [sp, #32]
 80086e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
  return reinterpret_cast<const T*>(tensor->data.raw);
 80086ec:	f8d8 5000 	ldr.w	r5, [r8]
 80086f0:	f8d1 c000 	ldr.w	ip, [r1]
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80086f4:	f1bc 0f00 	cmp.w	ip, #0
  size_t num_outputs = 1;
 80086f8:	f04f 0701 	mov.w	r7, #1
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80086fc:	dd10      	ble.n	8008720 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x7f4>
    size_t current = static_cast<size_t>(output_dims[idx]);
 80086fe:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (int idx = 0; idx < output_num_dims; ++idx) {
 8008702:	2300      	movs	r3, #0
 8008704:	e006      	b.n	8008714 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x7e8>
    size_t current = static_cast<size_t>(output_dims[idx]);
 8008706:	f851 2f04 	ldr.w	r2, [r1, #4]!
    if (num_outputs > std::numeric_limits<size_t>::max() / current) {
 800870a:	fba2 e007 	umull	lr, r0, r2, r7
 800870e:	2800      	cmp	r0, #0
 8008710:	f040 83d6 	bne.w	8008ec0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf94>
  for (int idx = 0; idx < output_num_dims; ++idx) {
 8008714:	3301      	adds	r3, #1
 8008716:	459c      	cmp	ip, r3
    num_outputs *= current;
 8008718:	fb02 f707 	mul.w	r7, r2, r7
  for (int idx = 0; idx < output_num_dims; ++idx) {
 800871c:	d1f3      	bne.n	8008706 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x7da>
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 800871e:	b1ff      	cbz	r7, 8008760 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x834>
 8008720:	2f00      	cmp	r7, #0
 8008722:	9907      	ldr	r1, [sp, #28]
 8008724:	9808      	ldr	r0, [sp, #32]
 8008726:	ea4f 0887 	mov.w	r8, r7, lsl #2
 800872a:	bf08      	it	eq
 800872c:	f04f 0804 	moveq.w	r8, #4
 8008730:	eb01 0308 	add.w	r3, r1, r8
 8008734:	bf14      	ite	ne
 8008736:	463a      	movne	r2, r7
 8008738:	2201      	moveq	r2, #1
 800873a:	4298      	cmp	r0, r3
 800873c:	d207      	bcs.n	800874e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x822>
 800873e:	1883      	adds	r3, r0, r2
 8008740:	4299      	cmp	r1, r3
 8008742:	bf34      	ite	cc
 8008744:	2300      	movcc	r3, #0
 8008746:	2301      	movcs	r3, #1
 8008748:	2b00      	cmp	r3, #0
 800874a:	f000 846e 	beq.w	800902a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x10fe>
    output_data[idx] = T();
 800874e:	2100      	movs	r1, #0
 8008750:	9808      	ldr	r0, [sp, #32]
 8008752:	f009 fc8d 	bl	8012070 <memset>
    temp_sum[idx] = U();
 8008756:	9807      	ldr	r0, [sp, #28]
 8008758:	4642      	mov	r2, r8
 800875a:	2100      	movs	r1, #0
 800875c:	f009 fc88 	bl	8012070 <memset>
  if (num_dims == 0) {
 8008760:	2e00      	cmp	r6, #0
 8008762:	f000 8446 	beq.w	8008ff2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x10c6>
  if (!ResolveAxis(input_num_dims, axis, num_axis_dimensions, resolved_axis,
 8008766:	ea4f 79e4 	mov.w	r9, r4, asr #31
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 800876a:	2c01      	cmp	r4, #1
 800876c:	f179 0300 	sbcs.w	r3, r9, #0
 8008770:	f2c0 8480 	blt.w	8009074 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1148>
 8008774:	f1a5 0804 	sub.w	r8, r5, #4
  int num_resolved_axis = 0;
 8008778:	2500      	movs	r5, #0
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 800877a:	46ac      	mov	ip, r5
 800877c:	46ae      	mov	lr, r5
    int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];
 800877e:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8008782:	2800      	cmp	r0, #0
 8008784:	f2c0 836e 	blt.w	8008e64 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf38>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 8008788:	4286      	cmp	r6, r0
 800878a:	f340 81b0 	ble.w	8008aee <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbc2>
    for (int j = 0; j < *out_num_axis; ++j) {
 800878e:	2d00      	cmp	r5, #0
 8008790:	f000 8356 	beq.w	8008e40 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf14>
 8008794:	aa14      	add	r2, sp, #80	; 0x50
 8008796:	2300      	movs	r3, #0
 8008798:	e003      	b.n	80087a2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x876>
 800879a:	3301      	adds	r3, #1
 800879c:	429d      	cmp	r5, r3
 800879e:	f000 834f 	beq.w	8008e40 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf14>
      if (out_axis[j] == current) {
 80087a2:	f852 1b04 	ldr.w	r1, [r2], #4
 80087a6:	4281      	cmp	r1, r0
 80087a8:	d1f7      	bne.n	800879a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x86e>
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 80087aa:	f11c 0c01 	adds.w	ip, ip, #1
 80087ae:	f14e 0e00 	adc.w	lr, lr, #0
 80087b2:	45a4      	cmp	ip, r4
 80087b4:	eb7e 0309 	sbcs.w	r3, lr, r9
 80087b8:	dbe1      	blt.n	800877e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x852>
  for (int idx = 0; idx < input_num_dims; ++idx) {
 80087ba:	2e00      	cmp	r6, #0
 80087bc:	f340 8471 	ble.w	80090a2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1176>
    input_iter[idx] = 0;
 80087c0:	ab1a      	add	r3, sp, #104	; 0x68
 80087c2:	00b4      	lsls	r4, r6, #2
 80087c4:	4622      	mov	r2, r4
 80087c6:	2100      	movs	r1, #0
 80087c8:	4618      	mov	r0, r3
 80087ca:	9306      	str	r3, [sp, #24]
 80087cc:	f009 fc50 	bl	8012070 <memset>
 80087d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087d2:	1c73      	adds	r3, r6, #1
 80087d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80087d8:	930c      	str	r3, [sp, #48]	; 0x30
 80087da:	9b06      	ldr	r3, [sp, #24]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 80087dc:	1e71      	subs	r1, r6, #1
 80087de:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80087e2:	eb02 0e04 	add.w	lr, r2, r4
 80087e6:	910b      	str	r1, [sp, #44]	; 0x2c
 80087e8:	f102 0804 	add.w	r8, r2, #4
 80087ec:	930d      	str	r3, [sp, #52]	; 0x34
  size_t offset = 0;
 80087ee:	f04f 0a00 	mov.w	sl, #0
 80087f2:	46b9      	mov	r9, r7
  if (num_dims == 0) {
 80087f4:	2e00      	cmp	r6, #0
 80087f6:	f000 83d1 	beq.w	8008f9c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1070>
  for (int idx = 0; idx < num_dims; ++idx) {
 80087fa:	f340 8410 	ble.w	800901e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x10f2>
 80087fe:	9a06      	ldr	r2, [sp, #24]
 8008800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008802:	4611      	mov	r1, r2
  size_t offset = 0;
 8008804:	2000      	movs	r0, #0
      offset = offset * static_cast<size_t>(dims[idx]) +
 8008806:	f853 7f04 	ldr.w	r7, [r3, #4]!
               static_cast<size_t>(index[idx]);
 800880a:	f852 4b04 	ldr.w	r4, [r2], #4
  for (int idx = 0; idx < num_dims; ++idx) {
 800880e:	459e      	cmp	lr, r3
      offset = offset * static_cast<size_t>(dims[idx]) +
 8008810:	fb07 4000 	mla	r0, r7, r0, r4
  for (int idx = 0; idx < num_dims; ++idx) {
 8008814:	d1f7      	bne.n	8008806 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8da>
 8008816:	2400      	movs	r4, #0
 8008818:	4622      	mov	r2, r4
 800881a:	4684      	mov	ip, r0
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
 800881c:	2d00      	cmp	r5, #0
 800881e:	f000 82f0 	beq.w	8008e02 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xed6>
 8008822:	af14      	add	r7, sp, #80	; 0x50
 8008824:	2300      	movs	r3, #0
 8008826:	e003      	b.n	8008830 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x904>
 8008828:	3301      	adds	r3, #1
 800882a:	42ab      	cmp	r3, r5
 800882c:	f000 82e9 	beq.w	8008e02 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xed6>
        if (idx == axis[axis_idx]) {
 8008830:	f857 0b04 	ldr.w	r0, [r7], #4
 8008834:	4282      	cmp	r2, r0
 8008836:	d1f7      	bne.n	8008828 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8fc>
  for (int idx = 0; idx < num_dims; ++idx) {
 8008838:	3201      	adds	r2, #1
 800883a:	4296      	cmp	r6, r2
 800883c:	f101 0104 	add.w	r1, r1, #4
 8008840:	d1ec      	bne.n	800881c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8f0>
        reducer(output_data[output_offset], input_data[input_offset]);
 8008842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008844:	4660      	mov	r0, ip
 8008846:	4418      	add	r0, r3
 8008848:	9b07      	ldr	r3, [sp, #28]
 800884a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    const Out actual_in = static_cast<Out>(in);
 800884e:	7802      	ldrb	r2, [r0, #0]
    return current + actual_in;
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	4413      	add	r3, r2
    output_data[output_offset] =
 8008854:	6023      	str	r3, [r4, #0]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8008856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008858:	2b00      	cmp	r3, #0
 800885a:	f2c0 8372 	blt.w	8008f42 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1016>
 800885e:	e9dd 020c 	ldrd	r0, r2, [sp, #48]	; 0x30
 8008862:	4619      	mov	r1, r3
 8008864:	e005      	b.n	8008872 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x946>
 8008866:	3901      	subs	r1, #1
 8008868:	1c4c      	adds	r4, r1, #1
      current[idx] = 0;
 800886a:	f8c2 a004 	str.w	sl, [r2, #4]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 800886e:	f000 8368 	beq.w	8008f42 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1016>
    int current_val = current[idx] + carry;
 8008872:	4614      	mov	r4, r2
    TFLITE_DCHECK_GE(dims[idx], current_val);
 8008874:	f850 7d04 	ldr.w	r7, [r0, #-4]!
    int current_val = current[idx] + carry;
 8008878:	6823      	ldr	r3, [r4, #0]
 800887a:	3301      	adds	r3, #1
    TFLITE_DCHECK_GE(dims[idx], current_val);
 800887c:	42bb      	cmp	r3, r7
 800887e:	f1a2 0204 	sub.w	r2, r2, #4
 8008882:	f300 8134 	bgt.w	8008aee <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbc2>
    if (dims[idx] == current_val) {
 8008886:	d0ee      	beq.n	8008866 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x93a>
      current[idx] = current_val;
 8008888:	6023      	str	r3, [r4, #0]
  return (carry == 0);
 800888a:	e7b3      	b.n	80087f4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8c8>
      } else if (op_data->input_zp == op_data->output_zp &&
 800888c:	ed9a 7a05 	vldr	s14, [sl, #20]
 8008890:	edda 7a07 	vldr	s15, [sl, #28]
 8008894:	eeb4 7a67 	vcmp.f32	s14, s15
 8008898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800889c:	f47f abeb 	bne.w	8008076 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x14a>
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 80088a0:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
 80088a4:	f8da 1008 	ldr.w	r1, [sl, #8]
 80088a8:	4658      	mov	r0, fp
 80088aa:	4798      	blx	r3
        TF_LITE_ENSURE(
 80088ac:	686b      	ldr	r3, [r5, #4]
 80088ae:	682a      	ldr	r2, [r5, #0]
 80088b0:	681e      	ldr	r6, [r3, #0]
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 80088b2:	9007      	str	r0, [sp, #28]
        TF_LITE_ENSURE(
 80088b4:	930a      	str	r3, [sp, #40]	; 0x28
 80088b6:	9209      	str	r2, [sp, #36]	; 0x24
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80088b8:	f1b9 0f00 	cmp.w	r9, #0
 80088bc:	f000 839f 	beq.w	8008ffe <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x10d2>
 80088c0:	f8d9 3000 	ldr.w	r3, [r9]
 80088c4:	9308      	str	r3, [sp, #32]
 80088c6:	f8d9 1004 	ldr.w	r1, [r9, #4]
  return reinterpret_cast<const T*>(tensor->data.raw);
 80088ca:	f8d8 5000 	ldr.w	r5, [r8]
 80088ce:	f8d1 c000 	ldr.w	ip, [r1]
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80088d2:	f1bc 0f00 	cmp.w	ip, #0
  size_t num_outputs = 1;
 80088d6:	f04f 0701 	mov.w	r7, #1
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80088da:	dd10      	ble.n	80088fe <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x9d2>
    size_t current = static_cast<size_t>(output_dims[idx]);
 80088dc:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80088e0:	2300      	movs	r3, #0
 80088e2:	e006      	b.n	80088f2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x9c6>
    size_t current = static_cast<size_t>(output_dims[idx]);
 80088e4:	f851 2f04 	ldr.w	r2, [r1, #4]!
    if (num_outputs > std::numeric_limits<size_t>::max() / current) {
 80088e8:	fba2 e007 	umull	lr, r0, r2, r7
 80088ec:	2800      	cmp	r0, #0
 80088ee:	f040 82db 	bne.w	8008ea8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf7c>
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80088f2:	3301      	adds	r3, #1
 80088f4:	459c      	cmp	ip, r3
    num_outputs *= current;
 80088f6:	fb02 f707 	mul.w	r7, r2, r7
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80088fa:	d1f3      	bne.n	80088e4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x9b8>
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 80088fc:	b1ff      	cbz	r7, 800893e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa12>
 80088fe:	2f00      	cmp	r7, #0
 8008900:	9907      	ldr	r1, [sp, #28]
 8008902:	9808      	ldr	r0, [sp, #32]
 8008904:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8008908:	bf08      	it	eq
 800890a:	f04f 0804 	moveq.w	r8, #4
 800890e:	eb01 0308 	add.w	r3, r1, r8
 8008912:	bf14      	ite	ne
 8008914:	463a      	movne	r2, r7
 8008916:	2201      	moveq	r2, #1
 8008918:	4298      	cmp	r0, r3
 800891a:	d207      	bcs.n	800892c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa00>
 800891c:	1883      	adds	r3, r0, r2
 800891e:	4299      	cmp	r1, r3
 8008920:	bf34      	ite	cc
 8008922:	2300      	movcc	r3, #0
 8008924:	2301      	movcs	r3, #1
 8008926:	2b00      	cmp	r3, #0
 8008928:	f000 838f 	beq.w	800904a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x111e>
    output_data[idx] = T();
 800892c:	2100      	movs	r1, #0
 800892e:	9808      	ldr	r0, [sp, #32]
 8008930:	f009 fb9e 	bl	8012070 <memset>
    temp_sum[idx] = U();
 8008934:	9807      	ldr	r0, [sp, #28]
 8008936:	4642      	mov	r2, r8
 8008938:	2100      	movs	r1, #0
 800893a:	f009 fb99 	bl	8012070 <memset>
  if (num_dims == 0) {
 800893e:	2e00      	cmp	r6, #0
 8008940:	f000 8364 	beq.w	800900c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x10e0>
  if (!ResolveAxis(input_num_dims, axis, num_axis_dimensions, resolved_axis,
 8008944:	ea4f 79e4 	mov.w	r9, r4, asr #31
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 8008948:	2c01      	cmp	r4, #1
 800894a:	f179 0300 	sbcs.w	r3, r9, #0
 800894e:	f2c0 838b 	blt.w	8009068 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x113c>
 8008952:	f1a5 0804 	sub.w	r8, r5, #4
  int num_resolved_axis = 0;
 8008956:	2500      	movs	r5, #0
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 8008958:	46ac      	mov	ip, r5
 800895a:	46ae      	mov	lr, r5
    int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];
 800895c:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8008960:	2800      	cmp	r0, #0
 8008962:	f2c0 827b 	blt.w	8008e5c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf30>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 8008966:	4286      	cmp	r6, r0
 8008968:	f340 80c1 	ble.w	8008aee <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbc2>
    for (int j = 0; j < *out_num_axis; ++j) {
 800896c:	2d00      	cmp	r5, #0
 800896e:	f000 826e 	beq.w	8008e4e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf22>
 8008972:	aa14      	add	r2, sp, #80	; 0x50
 8008974:	2300      	movs	r3, #0
 8008976:	e003      	b.n	8008980 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa54>
 8008978:	3301      	adds	r3, #1
 800897a:	42ab      	cmp	r3, r5
 800897c:	f000 8267 	beq.w	8008e4e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf22>
      if (out_axis[j] == current) {
 8008980:	f852 1b04 	ldr.w	r1, [r2], #4
 8008984:	4281      	cmp	r1, r0
 8008986:	d1f7      	bne.n	8008978 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa4c>
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 8008988:	f11c 0c01 	adds.w	ip, ip, #1
 800898c:	f14e 0e00 	adc.w	lr, lr, #0
 8008990:	45a4      	cmp	ip, r4
 8008992:	eb7e 0309 	sbcs.w	r3, lr, r9
 8008996:	dbe1      	blt.n	800895c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa30>
  for (int idx = 0; idx < input_num_dims; ++idx) {
 8008998:	2e00      	cmp	r6, #0
 800899a:	f340 8378 	ble.w	800908e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1162>
    input_iter[idx] = 0;
 800899e:	ab1a      	add	r3, sp, #104	; 0x68
 80089a0:	00b4      	lsls	r4, r6, #2
 80089a2:	4622      	mov	r2, r4
 80089a4:	2100      	movs	r1, #0
 80089a6:	4618      	mov	r0, r3
 80089a8:	9306      	str	r3, [sp, #24]
 80089aa:	f009 fb61 	bl	8012070 <memset>
 80089ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089b0:	1c73      	adds	r3, r6, #1
 80089b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80089b6:	930c      	str	r3, [sp, #48]	; 0x30
 80089b8:	9b06      	ldr	r3, [sp, #24]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 80089ba:	1e71      	subs	r1, r6, #1
 80089bc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80089c0:	eb02 0e04 	add.w	lr, r2, r4
 80089c4:	910b      	str	r1, [sp, #44]	; 0x2c
 80089c6:	f102 0804 	add.w	r8, r2, #4
 80089ca:	930d      	str	r3, [sp, #52]	; 0x34
  size_t offset = 0;
 80089cc:	f04f 0a00 	mov.w	sl, #0
 80089d0:	46b9      	mov	r9, r7
  if (num_dims == 0) {
 80089d2:	2e00      	cmp	r6, #0
 80089d4:	f000 82ea 	beq.w	8008fac <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1080>
  for (int idx = 0; idx < num_dims; ++idx) {
 80089d8:	f340 8324 	ble.w	8009024 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x10f8>
 80089dc:	9a06      	ldr	r2, [sp, #24]
 80089de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089e0:	4611      	mov	r1, r2
  size_t offset = 0;
 80089e2:	2000      	movs	r0, #0
      offset = offset * static_cast<size_t>(dims[idx]) +
 80089e4:	f853 7f04 	ldr.w	r7, [r3, #4]!
               static_cast<size_t>(index[idx]);
 80089e8:	f852 4b04 	ldr.w	r4, [r2], #4
  for (int idx = 0; idx < num_dims; ++idx) {
 80089ec:	459e      	cmp	lr, r3
      offset = offset * static_cast<size_t>(dims[idx]) +
 80089ee:	fb07 4000 	mla	r0, r7, r0, r4
  for (int idx = 0; idx < num_dims; ++idx) {
 80089f2:	d1f7      	bne.n	80089e4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xab8>
 80089f4:	2400      	movs	r4, #0
 80089f6:	4622      	mov	r2, r4
 80089f8:	4684      	mov	ip, r0
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
 80089fa:	2d00      	cmp	r5, #0
 80089fc:	f000 821a 	beq.w	8008e34 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf08>
 8008a00:	af14      	add	r7, sp, #80	; 0x50
 8008a02:	2300      	movs	r3, #0
 8008a04:	e003      	b.n	8008a0e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xae2>
 8008a06:	3301      	adds	r3, #1
 8008a08:	42ab      	cmp	r3, r5
 8008a0a:	f000 8213 	beq.w	8008e34 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf08>
        if (idx == axis[axis_idx]) {
 8008a0e:	f857 0b04 	ldr.w	r0, [r7], #4
 8008a12:	4282      	cmp	r2, r0
 8008a14:	d1f7      	bne.n	8008a06 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xada>
  for (int idx = 0; idx < num_dims; ++idx) {
 8008a16:	3201      	adds	r2, #1
 8008a18:	4296      	cmp	r6, r2
 8008a1a:	f101 0104 	add.w	r1, r1, #4
 8008a1e:	d1ec      	bne.n	80089fa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xace>
        reducer(output_data[output_offset], input_data[input_offset]);
 8008a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a22:	4660      	mov	r0, ip
 8008a24:	4418      	add	r0, r3
 8008a26:	9b07      	ldr	r3, [sp, #28]
 8008a28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    const Out actual_in = static_cast<Out>(in);
 8008a2c:	f990 2000 	ldrsb.w	r2, [r0]
    return current + actual_in;
 8008a30:	6823      	ldr	r3, [r4, #0]
 8008a32:	4413      	add	r3, r2
    output_data[output_offset] =
 8008a34:	6023      	str	r3, [r4, #0]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8008a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f2c0 8251 	blt.w	8008ee0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xfb4>
 8008a3e:	e9dd 020c 	ldrd	r0, r2, [sp, #48]	; 0x30
 8008a42:	4619      	mov	r1, r3
 8008a44:	e005      	b.n	8008a52 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb26>
 8008a46:	3901      	subs	r1, #1
 8008a48:	1c4b      	adds	r3, r1, #1
      current[idx] = 0;
 8008a4a:	f8c2 a004 	str.w	sl, [r2, #4]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8008a4e:	f000 8247 	beq.w	8008ee0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xfb4>
    int current_val = current[idx] + carry;
 8008a52:	4614      	mov	r4, r2
    TFLITE_DCHECK_GE(dims[idx], current_val);
 8008a54:	f850 7d04 	ldr.w	r7, [r0, #-4]!
    int current_val = current[idx] + carry;
 8008a58:	6823      	ldr	r3, [r4, #0]
 8008a5a:	3301      	adds	r3, #1
    TFLITE_DCHECK_GE(dims[idx], current_val);
 8008a5c:	42bb      	cmp	r3, r7
 8008a5e:	f1a2 0204 	sub.w	r2, r2, #4
 8008a62:	dc44      	bgt.n	8008aee <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbc2>
    if (dims[idx] == current_val) {
 8008a64:	d0ef      	beq.n	8008a46 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb1a>
      current[idx] = current_val;
 8008a66:	6023      	str	r3, [r4, #0]
  return (carry == 0);
 8008a68:	e7b3      	b.n	80089d2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xaa6>
    output_data[idx] = T();
 8008a6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	f009 faff 	bl	8012070 <memset>
    temp_sum[idx] = U();
 8008a72:	9807      	ldr	r0, [sp, #28]
 8008a74:	4642      	mov	r2, r8
 8008a76:	2100      	movs	r1, #0
 8008a78:	f009 fafa 	bl	8012070 <memset>
 8008a7c:	f7ff bb5a 	b.w	8008134 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x208>
    output_data[idx] = T();
 8008a80:	463a      	mov	r2, r7
 8008a82:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008a84:	2100      	movs	r1, #0
 8008a86:	f009 faf3 	bl	8012070 <memset>
    temp_sum[idx] = U();
 8008a8a:	9807      	ldr	r0, [sp, #28]
 8008a8c:	4642      	mov	r2, r8
 8008a8e:	2100      	movs	r1, #0
 8008a90:	f009 faee 	bl	8012070 <memset>
 8008a94:	e455      	b.n	8008342 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x416>
      offset = offset * static_cast<size_t>(dims[idx]) +
 8008a96:	f85e 6022 	ldr.w	r6, [lr, r2, lsl #2]
 8008a9a:	680b      	ldr	r3, [r1, #0]
 8008a9c:	fb06 3404 	mla	r4, r6, r4, r3
 8008aa0:	e583      	b.n	80085aa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x67e>
 8008aa2:	f859 7022 	ldr.w	r7, [r9, r2, lsl #2]
 8008aa6:	680b      	ldr	r3, [r1, #0]
 8008aa8:	fb07 3404 	mla	r4, r7, r4, r3
 8008aac:	e4b5      	b.n	800841a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x4ee>
 8008aae:	f859 7022 	ldr.w	r7, [r9, r2, lsl #2]
 8008ab2:	680b      	ldr	r3, [r1, #0]
 8008ab4:	fb07 3404 	mla	r4, r7, r4, r3
 8008ab8:	f7ff bba8 	b.w	800820c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x2e0>
      out_axis[*out_num_axis] = current;
 8008abc:	ab20      	add	r3, sp, #128	; 0x80
 8008abe:	eb03 0385 	add.w	r3, r3, r5, lsl #2
      *out_num_axis += 1;
 8008ac2:	3501      	adds	r5, #1
      out_axis[*out_num_axis] = current;
 8008ac4:	f843 0c30 	str.w	r0, [r3, #-48]
      *out_num_axis += 1;
 8008ac8:	e52a      	b.n	8008520 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x5f4>
      out_axis[*out_num_axis] = current;
 8008aca:	ab20      	add	r3, sp, #128	; 0x80
 8008acc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
      *out_num_axis += 1;
 8008ad0:	3501      	adds	r5, #1
      out_axis[*out_num_axis] = current;
 8008ad2:	f843 0c30 	str.w	r0, [r3, #-48]
      *out_num_axis += 1;
 8008ad6:	f7ff bb52 	b.w	800817e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x252>
      out_axis[*out_num_axis] = current;
 8008ada:	ab20      	add	r3, sp, #128	; 0x80
 8008adc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
      *out_num_axis += 1;
 8008ae0:	3501      	adds	r5, #1
      out_axis[*out_num_axis] = current;
 8008ae2:	f843 0c30 	str.w	r0, [r3, #-48]
      *out_num_axis += 1;
 8008ae6:	e451      	b.n	800838c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x460>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 8008ae8:	19c0      	adds	r0, r0, r7
 8008aea:	f57f ad08 	bpl.w	80084fe <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x5d2>
  TFLITE_DCHECK(context != nullptr);
 8008aee:	f008 fb49 	bl	8011184 <abort>
 8008af2:	1980      	adds	r0, r0, r6
 8008af4:	f57f ac39 	bpl.w	800836a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x43e>
 8008af8:	e7f9      	b.n	8008aee <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbc2>
 8008afa:	1980      	adds	r0, r0, r6
 8008afc:	f57f ab2e 	bpl.w	800815c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x230>
 8008b00:	e7f5      	b.n	8008aee <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbc2>
        TF_LITE_ENSURE(
 8008b02:	4bc3      	ldr	r3, [pc, #780]	; (8008e10 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xee4>)
 8008b04:	f8db 4014 	ldr.w	r4, [fp, #20]
 8008b08:	4ac2      	ldr	r2, [pc, #776]	; (8008e14 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xee8>)
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	4658      	mov	r0, fp
 8008b0e:	49c2      	ldr	r1, [pc, #776]	; (8008e18 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xeec>)
 8008b10:	23a9      	movs	r3, #169	; 0xa9
 8008b12:	47a0      	blx	r4
}
 8008b14:	4630      	mov	r0, r6
 8008b16:	b021      	add	sp, #132	; 0x84
 8008b18:	ecbd 8b06 	vpop	{d8-d10}
 8008b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TF_LITE_ENSURE(
 8008b20:	4bbe      	ldr	r3, [pc, #760]	; (8008e1c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xef0>)
 8008b22:	f8db 4014 	ldr.w	r4, [fp, #20]
 8008b26:	4abb      	ldr	r2, [pc, #748]	; (8008e14 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xee8>)
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	49bb      	ldr	r1, [pc, #748]	; (8008e18 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xeec>)
 8008b2c:	23f1      	movs	r3, #241	; 0xf1
 8008b2e:	4658      	mov	r0, fp
 8008b30:	47a0      	blx	r4
 8008b32:	2601      	movs	r6, #1
 8008b34:	f7ff ba75 	b.w	8008022 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf6>
        TF_LITE_ENSURE(
 8008b38:	4bb9      	ldr	r3, [pc, #740]	; (8008e20 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xef4>)
 8008b3a:	f8db 4014 	ldr.w	r4, [fp, #20]
 8008b3e:	4ab5      	ldr	r2, [pc, #724]	; (8008e14 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xee8>)
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	49b5      	ldr	r1, [pc, #724]	; (8008e18 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xeec>)
 8008b44:	23cc      	movs	r3, #204	; 0xcc
 8008b46:	4658      	mov	r0, fp
 8008b48:	47a0      	blx	r4
 8008b4a:	2601      	movs	r6, #1
 8008b4c:	f7ff ba69 	b.w	8008022 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf6>
 8008b50:	464e      	mov	r6, r9
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008b52:	2d00      	cmp	r5, #0
 8008b54:	f000 824b 	beq.w	8008fee <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x10c2>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 8008b58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b5a:	a814      	add	r0, sp, #80	; 0x50
 8008b5c:	f85e 1023 	ldr.w	r1, [lr, r3, lsl #2]
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008b60:	2200      	movs	r2, #0
  size_t num_elements_in_axis = 1;
 8008b62:	2301      	movs	r3, #1
 8008b64:	e007      	b.n	8008b76 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc4a>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 8008b66:	f850 1f04 	ldr.w	r1, [r0, #4]!
 8008b6a:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
    if (current > (std::numeric_limits<size_t>::max() / num_elements_in_axis)) {
 8008b6e:	fba3 7401 	umull	r7, r4, r3, r1
 8008b72:	2c00      	cmp	r4, #0
 8008b74:	d1c5      	bne.n	8008b02 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbd6>
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008b76:	3201      	adds	r2, #1
 8008b78:	42aa      	cmp	r2, r5
    num_elements_in_axis *= current;
 8008b7a:	fb01 f303 	mul.w	r3, r1, r3
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008b7e:	d1f2      	bne.n	8008b66 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc3a>
  if (num_elements_in_axis > 0) {
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 8116 	beq.w	8008db2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe86>
    for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008b86:	f1b8 0f00 	cmp.w	r8, #0
 8008b8a:	f000 8112 	beq.w	8008db2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe86>
          static_cast<T>(temp_sum[idx] / static_cast<U>(num_elements_in_axis));
 8008b8e:	ee07 3a90 	vmov	s15, r3
 8008b92:	9a08      	ldr	r2, [sp, #32]
 8008b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b98:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 8008b9c:	edd2 6a00 	vldr	s13, [r2]
 8008ba0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
      output_data[idx] =
 8008ba4:	eca2 7a01 	vstmia	r2!, {s14}
    for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008ba8:	4542      	cmp	r2, r8
 8008baa:	d1f7      	bne.n	8008b9c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc70>
 8008bac:	e101      	b.n	8008db2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe86>
    return current + actual_in;
 8008bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb0:	ed93 7a00 	vldr	s14, [r3]
 8008bb4:	9b08      	ldr	r3, [sp, #32]
 8008bb6:	edd3 7a00 	vldr	s15, [r3]
 8008bba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008bbe:	464e      	mov	r6, r9
    output_data[output_offset] =
 8008bc0:	edc3 7a00 	vstr	s15, [r3]
  if (num_dims == 0) {
 8008bc4:	e7c5      	b.n	8008b52 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc26>
    const Out actual_in = static_cast<Out>(in);
 8008bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    return current + actual_in;
 8008bc8:	9907      	ldr	r1, [sp, #28]
    const Out actual_in = static_cast<Out>(in);
 8008bca:	f993 2000 	ldrsb.w	r2, [r3]
    return current + actual_in;
 8008bce:	680b      	ldr	r3, [r1, #0]
 8008bd0:	4413      	add	r3, r2
    const Out actual_in = static_cast<Out>(in);
 8008bd2:	4657      	mov	r7, sl
    output_data[output_offset] =
 8008bd4:	600b      	str	r3, [r1, #0]
    return false;
  }

  // Calculate mean by dividing output_data by num of aggregated element.
  size_t num_elements_in_axis = 1;
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008bd6:	2d00      	cmp	r5, #0
 8008bd8:	f000 821f 	beq.w	800901a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x10ee>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 8008bdc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008bde:	a814      	add	r0, sp, #80	; 0x50
 8008be0:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008be4:	2200      	movs	r2, #0
  size_t num_elements_in_axis = 1;
 8008be6:	2301      	movs	r3, #1
 8008be8:	e007      	b.n	8008bfa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xcce>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 8008bea:	f850 1f04 	ldr.w	r1, [r0, #4]!
 8008bee:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
    // Overflow prevention.
    if (current > (std::numeric_limits<size_t>::max() / num_elements_in_axis)) {
 8008bf2:	fba3 6401 	umull	r6, r4, r3, r1
 8008bf6:	2c00      	cmp	r4, #0
 8008bf8:	d19e      	bne.n	8008b38 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc0c>
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008bfa:	3201      	adds	r2, #1
 8008bfc:	42aa      	cmp	r2, r5
      return false;
    }
    num_elements_in_axis *= current;
 8008bfe:	fb01 f303 	mul.w	r3, r1, r3
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008c02:	d1f2      	bne.n	8008bea <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xcbe>
  }

  if (num_elements_in_axis > 0) {
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f000 80d4 	beq.w	8008db2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe86>
    const float scale = input_scale / output_scale;
 8008c0a:	ee88 9a28 	vdiv.f32	s18, s16, s17
            static_cast<U>(TfLiteRound(temp_sum[idx] * scale + bias)) +
            output_zero_point;
        output_data[idx] = static_cast<T>(value);
      }
    } else {
      const float bias = -input_zero_point * scale;
 8008c0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c10:	4252      	negs	r2, r2
 8008c12:	ee08 2a90 	vmov	s17, r2
 8008c16:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8008c1a:	ee68 8a89 	vmul.f32	s17, s17, s18
      for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008c1e:	2f00      	cmp	r7, #0
 8008c20:	f000 80c7 	beq.w	8008db2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe86>
        float float_mean = static_cast<float>(temp_sum[idx]) /
                           static_cast<float>(num_elements_in_axis);
 8008c24:	ee07 3a90 	vmov	s15, r3
 8008c28:	9a07      	ldr	r2, [sp, #28]
 8008c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  { return __builtin_fminf(__x, __y); }
 8008c2c:	ed9f aa7d 	vldr	s20, [pc, #500]	; 8008e24 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xef8>
  { return __builtin_fmaxf(__x, __y); }
 8008c30:	eddf 9a7d 	vldr	s19, [pc, #500]	; 8008e28 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xefc>
 8008c34:	eeb8 8a67 	vcvt.f32.u32	s16, s15
        float result = TfLiteMin(
            TfLiteRound(float_mean * scale + bias) + output_zero_point,
 8008c38:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8008c3c:	1f14      	subs	r4, r2, #4
 8008c3e:	eef8 aae7 	vcvt.f32.s32	s21, s15
 8008c42:	1e5d      	subs	r5, r3, #1
 8008c44:	eb04 0787 	add.w	r7, r4, r7, lsl #2
        float float_mean = static_cast<float>(temp_sum[idx]) /
 8008c48:	edd4 7a01 	vldr	s15, [r4, #4]
 8008c4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  { return __builtin_roundf(__x); }
 8008c50:	eeb0 0a68 	vmov.f32	s0, s17
 8008c54:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8008c58:	3404      	adds	r4, #4
 8008c5a:	eea9 0a07 	vfma.f32	s0, s18, s14
 8008c5e:	f008 f99f 	bl	8010fa0 <roundf>
  { return __builtin_fminf(__x, __y); }
 8008c62:	eef0 0a4a 	vmov.f32	s1, s20
 8008c66:	ee30 0a2a 	vadd.f32	s0, s0, s21
 8008c6a:	f008 f875 	bl	8010d58 <fminf>
  { return __builtin_fmaxf(__x, __y); }
 8008c6e:	eef0 0a69 	vmov.f32	s1, s19
 8008c72:	f008 f856 	bl	8010d22 <fmaxf>
            static_cast<float>(std::numeric_limits<T>::max()));
        result = TfLiteMax(result,
                           static_cast<float>(std::numeric_limits<T>::min()));
        output_data[idx] = static_cast<T>(result);
 8008c76:	eefd 7ac0 	vcvt.s32.f32	s15, s0
      for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008c7a:	42a7      	cmp	r7, r4
        output_data[idx] = static_cast<T>(result);
 8008c7c:	ee17 3a90 	vmov	r3, s15
 8008c80:	f805 3f01 	strb.w	r3, [r5, #1]!
      for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008c84:	d1e0      	bne.n	8008c48 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd1c>
 8008c86:	e094      	b.n	8008db2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe86>
    const Out actual_in = static_cast<Out>(in);
 8008c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
    return current + actual_in;
 8008c8a:	9907      	ldr	r1, [sp, #28]
    const Out actual_in = static_cast<Out>(in);
 8008c8c:	781a      	ldrb	r2, [r3, #0]
    return current + actual_in;
 8008c8e:	680b      	ldr	r3, [r1, #0]
 8008c90:	4413      	add	r3, r2
    const Out actual_in = static_cast<Out>(in);
 8008c92:	4657      	mov	r7, sl
    output_data[output_offset] =
 8008c94:	600b      	str	r3, [r1, #0]
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008c96:	2d00      	cmp	r5, #0
 8008c98:	f000 81bd 	beq.w	8009016 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x10ea>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 8008c9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c9e:	a814      	add	r0, sp, #80	; 0x50
 8008ca0:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008ca4:	2200      	movs	r2, #0
  size_t num_elements_in_axis = 1;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e008      	b.n	8008cbc <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd90>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 8008caa:	f850 1f04 	ldr.w	r1, [r0, #4]!
 8008cae:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
    if (current > (std::numeric_limits<size_t>::max() / num_elements_in_axis)) {
 8008cb2:	fba3 6401 	umull	r6, r4, r3, r1
 8008cb6:	2c00      	cmp	r4, #0
 8008cb8:	f47f af32 	bne.w	8008b20 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbf4>
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008cbc:	3201      	adds	r2, #1
 8008cbe:	42aa      	cmp	r2, r5
    num_elements_in_axis *= current;
 8008cc0:	fb01 f303 	mul.w	r3, r1, r3
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008cc4:	d1f1      	bne.n	8008caa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd7e>
  if (num_elements_in_axis > 0) {
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d073      	beq.n	8008db2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe86>
    const float scale = input_scale / output_scale;
 8008cca:	ee88 9a28 	vdiv.f32	s18, s16, s17
      const float bias = -input_zero_point * scale;
 8008cce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cd0:	4252      	negs	r2, r2
 8008cd2:	ee08 2a90 	vmov	s17, r2
 8008cd6:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8008cda:	ee68 8a89 	vmul.f32	s17, s17, s18
      for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008cde:	2f00      	cmp	r7, #0
 8008ce0:	d067      	beq.n	8008db2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe86>
            TfLiteRound(float_mean * scale + bias) + output_zero_point,
 8008ce2:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8008ce6:	9a07      	ldr	r2, [sp, #28]
  { return __builtin_fminf(__x, __y); }
 8008ce8:	ed9f aa50 	vldr	s20, [pc, #320]	; 8008e2c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf00>
  { return __builtin_fmaxf(__x, __y); }
 8008cec:	eddf 9a50 	vldr	s19, [pc, #320]	; 8008e30 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf04>
 8008cf0:	eef8 aae7 	vcvt.f32.s32	s21, s15
                           static_cast<float>(num_elements_in_axis);
 8008cf4:	ee07 3a90 	vmov	s15, r3
 8008cf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cfa:	1f14      	subs	r4, r2, #4
 8008cfc:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8008d00:	1e5d      	subs	r5, r3, #1
 8008d02:	eb04 0787 	add.w	r7, r4, r7, lsl #2
        float float_mean = static_cast<float>(temp_sum[idx]) /
 8008d06:	edd4 7a01 	vldr	s15, [r4, #4]
 8008d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
  { return __builtin_roundf(__x); }
 8008d0e:	eeb0 0a68 	vmov.f32	s0, s17
 8008d12:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8008d16:	3404      	adds	r4, #4
 8008d18:	eea9 0a07 	vfma.f32	s0, s18, s14
 8008d1c:	f008 f940 	bl	8010fa0 <roundf>
  { return __builtin_fminf(__x, __y); }
 8008d20:	eef0 0a4a 	vmov.f32	s1, s20
 8008d24:	ee30 0a2a 	vadd.f32	s0, s0, s21
 8008d28:	f008 f816 	bl	8010d58 <fminf>
  { return __builtin_fmaxf(__x, __y); }
 8008d2c:	eef0 0a69 	vmov.f32	s1, s19
 8008d30:	f007 fff7 	bl	8010d22 <fmaxf>
        output_data[idx] = static_cast<T>(result);
 8008d34:	eefc 7ac0 	vcvt.u32.f32	s15, s0
      for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008d38:	42a7      	cmp	r7, r4
        output_data[idx] = static_cast<T>(result);
 8008d3a:	ee17 3a90 	vmov	r3, s15
 8008d3e:	f805 3f01 	strb.w	r3, [r5, #1]!
      for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008d42:	d1e0      	bne.n	8008d06 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xdda>
 8008d44:	e035      	b.n	8008db2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe86>
 8008d46:	4657      	mov	r7, sl
 8008d48:	e745      	b.n	8008bd6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xcaa>
 8008d4a:	4657      	mov	r7, sl
 8008d4c:	e7a3      	b.n	8008c96 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd6a>
            op_params, op_data->multiplier, op_data->shift,
 8008d4e:	e9da 6200 	ldrd	r6, r2, [sl]
            tflite::micro::GetTensorShape(input),
 8008d52:	ac14      	add	r4, sp, #80	; 0x50
 8008d54:	4629      	mov	r1, r5
 8008d56:	4620      	mov	r0, r4
            op_params, op_data->multiplier, op_data->shift,
 8008d58:	9207      	str	r2, [sp, #28]
            tflite::micro::GetTensorShape(input),
 8008d5a:	f7fd fea1 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
            tflite::micro::GetTensorShape(output),
 8008d5e:	ab1a      	add	r3, sp, #104	; 0x68
 8008d60:	4649      	mov	r1, r9
 8008d62:	4618      	mov	r0, r3
  return reinterpret_cast<const T*>(tensor->data.raw);
 8008d64:	682d      	ldr	r5, [r5, #0]
            tflite::micro::GetTensorData<int8_t>(input), op_data->input_zp,
 8008d66:	f8da 7010 	ldr.w	r7, [sl, #16]
            tflite::micro::GetTensorShape(output),
 8008d6a:	9306      	str	r3, [sp, #24]
 8008d6c:	f7fd fe98 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8008d70:	9a07      	ldr	r2, [sp, #28]
 8008d72:	f1b9 0f00 	cmp.w	r9, #0
 8008d76:	d001      	beq.n	8008d7c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe50>
 8008d78:	f8d9 9000 	ldr.w	r9, [r9]
        reference_integer_ops::Mean(
 8008d7c:	f8da 3018 	ldr.w	r3, [sl, #24]
 8008d80:	9500      	str	r5, [sp, #0]
 8008d82:	e9cd 9303 	strd	r9, r3, [sp, #12]
 8008d86:	9b06      	ldr	r3, [sp, #24]
 8008d88:	4631      	mov	r1, r6
 8008d8a:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8008d8e:	a811      	add	r0, sp, #68	; 0x44
 8008d90:	4623      	mov	r3, r4
 8008d92:	f7fe ff4d 	bl	8007c30 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l>
    if (size_ > kMaxSmallSize) {
 8008d96:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008d98:	2b05      	cmp	r3, #5
 8008d9a:	dd03      	ble.n	8008da4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe78>
      delete[] dims_pointer_;
 8008d9c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008d9e:	b108      	cbz	r0, 8008da4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe78>
 8008da0:	f007 ff16 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 8008da4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008da6:	2b05      	cmp	r3, #5
 8008da8:	dd03      	ble.n	8008db2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe86>
      delete[] dims_pointer_;
 8008daa:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008dac:	b108      	cbz	r0, 8008db2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe86>
 8008dae:	f007 ff0f 	bl	8010bd0 <_ZdaPv>
  return kTfLiteOk;
 8008db2:	2600      	movs	r6, #0
}
 8008db4:	4630      	mov	r0, r6
 8008db6:	b021      	add	sp, #132	; 0x84
 8008db8:	ecbd 8b06 	vpop	{d8-d10}
 8008dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        reference_ops::Mean(op_params, tflite::micro::GetTensorShape(input),
 8008dc0:	ac14      	add	r4, sp, #80	; 0x50
 8008dc2:	4629      	mov	r1, r5
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f7fd fe6b 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8008dca:	682a      	ldr	r2, [r5, #0]
 8008dcc:	9207      	str	r2, [sp, #28]
                            tflite::micro::GetTensorShape(output),
 8008dce:	a81a      	add	r0, sp, #104	; 0x68
 8008dd0:	4649      	mov	r1, r9
 8008dd2:	9006      	str	r0, [sp, #24]
 8008dd4:	f7fd fe64 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8008dd8:	9a07      	ldr	r2, [sp, #28]
 8008dda:	f1b9 0f00 	cmp.w	r9, #0
 8008dde:	d001      	beq.n	8008de4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xeb8>
 8008de0:	f8d9 9000 	ldr.w	r9, [r9]
        reference_ops::Mean(op_params, tflite::micro::GetTensorShape(input),
 8008de4:	9b06      	ldr	r3, [sp, #24]
 8008de6:	f8cd 9000 	str.w	r9, [sp]
 8008dea:	4621      	mov	r1, r4
 8008dec:	a811      	add	r0, sp, #68	; 0x44
 8008dee:	f7fe fe29 	bl	8007a44 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
    if (size_ > kMaxSmallSize) {
 8008df2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008df4:	2b05      	cmp	r3, #5
 8008df6:	ddd5      	ble.n	8008da4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe78>
 8008df8:	e7d0      	b.n	8008d9c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe70>
 8008dfa:	f8cd 9020 	str.w	r9, [sp, #32]
 8008dfe:	f7ff bb45 	b.w	800848c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x560>
      offset = offset * static_cast<size_t>(dims[idx]) +
 8008e02:	f858 7022 	ldr.w	r7, [r8, r2, lsl #2]
 8008e06:	680b      	ldr	r3, [r1, #0]
 8008e08:	fb07 3404 	mla	r4, r7, r4, r3
 8008e0c:	e514      	b.n	8008838 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x90c>
 8008e0e:	bf00      	nop
 8008e10:	08016bf0 	.word	0x08016bf0
 8008e14:	08016604 	.word	0x08016604
 8008e18:	08015618 	.word	0x08015618
 8008e1c:	08016e6c 	.word	0x08016e6c
 8008e20:	08017130 	.word	0x08017130
 8008e24:	42fe0000 	.word	0x42fe0000
 8008e28:	c3000000 	.word	0xc3000000
 8008e2c:	437f0000 	.word	0x437f0000
 8008e30:	00000000 	.word	0x00000000
 8008e34:	f858 7022 	ldr.w	r7, [r8, r2, lsl #2]
 8008e38:	680b      	ldr	r3, [r1, #0]
 8008e3a:	fb07 3404 	mla	r4, r7, r4, r3
 8008e3e:	e5ea      	b.n	8008a16 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xaea>
      out_axis[*out_num_axis] = current;
 8008e40:	ab20      	add	r3, sp, #128	; 0x80
 8008e42:	eb03 0385 	add.w	r3, r3, r5, lsl #2
      *out_num_axis += 1;
 8008e46:	3501      	adds	r5, #1
      out_axis[*out_num_axis] = current;
 8008e48:	f843 0c30 	str.w	r0, [r3, #-48]
      *out_num_axis += 1;
 8008e4c:	e4ad      	b.n	80087aa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x87e>
      out_axis[*out_num_axis] = current;
 8008e4e:	ab20      	add	r3, sp, #128	; 0x80
 8008e50:	eb03 0385 	add.w	r3, r3, r5, lsl #2
      *out_num_axis += 1;
 8008e54:	3501      	adds	r5, #1
      out_axis[*out_num_axis] = current;
 8008e56:	f843 0c30 	str.w	r0, [r3, #-48]
      *out_num_axis += 1;
 8008e5a:	e595      	b.n	8008988 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa5c>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 8008e5c:	1980      	adds	r0, r0, r6
 8008e5e:	f57f ad82 	bpl.w	8008966 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa3a>
 8008e62:	e644      	b.n	8008aee <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbc2>
 8008e64:	1980      	adds	r0, r0, r6
 8008e66:	f57f ac8f 	bpl.w	8008788 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x85c>
 8008e6a:	e640      	b.n	8008aee <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbc2>
 8008e6c:	ab1a      	add	r3, sp, #104	; 0x68
  int num_resolved_axis = 0;
 8008e6e:	463d      	mov	r5, r7
 8008e70:	9306      	str	r3, [sp, #24]
 8008e72:	46ba      	mov	sl, r7
 8008e74:	f7ff bb68 	b.w	8008548 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x61c>
 8008e78:	ab1a      	add	r3, sp, #104	; 0x68
  int num_resolved_axis = 0;
 8008e7a:	4635      	mov	r5, r6
 8008e7c:	9306      	str	r3, [sp, #24]
 8008e7e:	4634      	mov	r4, r6
 8008e80:	f7ff b990 	b.w	80081a4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x278>
 8008e84:	ab1a      	add	r3, sp, #104	; 0x68
 8008e86:	4635      	mov	r5, r6
 8008e88:	9306      	str	r3, [sp, #24]
 8008e8a:	4634      	mov	r4, r6
 8008e8c:	f7ff ba91 	b.w	80083b2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x486>
 8008e90:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8008e94:	f7ff b907 	b.w	80080a6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x17a>
 8008e98:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8008e9c:	f7ff ba12 	b.w	80082c4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x398>
  for (int idx = 0; idx < num_dims; ++idx) {
 8008ea0:	e9dd 4008 	ldrd	r4, r0, [sp, #32]
 8008ea4:	f7ff bb8c 	b.w	80085c0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x694>
        TF_LITE_ENSURE(
 8008ea8:	4b80      	ldr	r3, [pc, #512]	; (80090ac <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1180>)
 8008eaa:	f8db 4014 	ldr.w	r4, [fp, #20]
 8008eae:	4a80      	ldr	r2, [pc, #512]	; (80090b0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1184>)
 8008eb0:	9300      	str	r3, [sp, #0]
 8008eb2:	4980      	ldr	r1, [pc, #512]	; (80090b4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1188>)
 8008eb4:	23c1      	movs	r3, #193	; 0xc1
 8008eb6:	4658      	mov	r0, fp
 8008eb8:	47a0      	blx	r4
 8008eba:	2601      	movs	r6, #1
 8008ebc:	f7ff b8b1 	b.w	8008022 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf6>
        TF_LITE_ENSURE(
 8008ec0:	4b7d      	ldr	r3, [pc, #500]	; (80090b8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x118c>)
 8008ec2:	f8db 4014 	ldr.w	r4, [fp, #20]
 8008ec6:	4a7a      	ldr	r2, [pc, #488]	; (80090b0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1184>)
 8008ec8:	9300      	str	r3, [sp, #0]
 8008eca:	497a      	ldr	r1, [pc, #488]	; (80090b4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1188>)
 8008ecc:	23e5      	movs	r3, #229	; 0xe5
 8008ece:	4658      	mov	r0, fp
 8008ed0:	47a0      	blx	r4
 8008ed2:	2601      	movs	r6, #1
 8008ed4:	f7ff b8a5 	b.w	8008022 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf6>
 8008ed8:	9809      	ldr	r0, [sp, #36]	; 0x24
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 8008eda:	9c07      	ldr	r4, [sp, #28]
 8008edc:	f7ff b9a1 	b.w	8008222 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x2f6>
 8008ee0:	464f      	mov	r7, r9
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008ee2:	2d00      	cmp	r5, #0
 8008ee4:	f000 80c4 	beq.w	8009070 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1144>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 8008ee8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008eea:	a814      	add	r0, sp, #80	; 0x50
 8008eec:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008ef0:	2200      	movs	r2, #0
  size_t num_elements_in_axis = 1;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e007      	b.n	8008f06 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xfda>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 8008ef6:	f850 1f04 	ldr.w	r1, [r0, #4]!
 8008efa:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
    if (current > (std::numeric_limits<size_t>::max() / num_elements_in_axis)) {
 8008efe:	fba3 6401 	umull	r6, r4, r3, r1
 8008f02:	2c00      	cmp	r4, #0
 8008f04:	d1d0      	bne.n	8008ea8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf7c>
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008f06:	3201      	adds	r2, #1
 8008f08:	42aa      	cmp	r2, r5
    num_elements_in_axis *= current;
 8008f0a:	fb01 f303 	mul.w	r3, r1, r3
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008f0e:	d1f2      	bne.n	8008ef6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xfca>
  if (num_elements_in_axis > 0) {
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f43f af4e 	beq.w	8008db2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe86>
    for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008f16:	2f00      	cmp	r7, #0
 8008f18:	f43f af4b 	beq.w	8008db2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe86>
 8008f1c:	9a07      	ldr	r2, [sp, #28]
 8008f1e:	9908      	ldr	r1, [sp, #32]
 8008f20:	3a04      	subs	r2, #4
 8008f22:	1e48      	subs	r0, r1, #1
 8008f24:	eb02 0787 	add.w	r7, r2, r7, lsl #2
          static_cast<T>(temp_sum[idx] / static_cast<U>(num_elements_in_axis));
 8008f28:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8008f2c:	fb91 f1f3 	sdiv	r1, r1, r3
    for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008f30:	4297      	cmp	r7, r2
      output_data[idx] =
 8008f32:	f800 1f01 	strb.w	r1, [r0, #1]!
    for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008f36:	d1f7      	bne.n	8008f28 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xffc>
 8008f38:	e73b      	b.n	8008db2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe86>
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 8008f3a:	9c07      	ldr	r4, [sp, #28]
 8008f3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f3e:	f7ff ba77 	b.w	8008430 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x504>
 8008f42:	464f      	mov	r7, r9
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008f44:	2d00      	cmp	r5, #0
 8008f46:	f000 8091 	beq.w	800906c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1140>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 8008f4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f4c:	a814      	add	r0, sp, #80	; 0x50
 8008f4e:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008f52:	2200      	movs	r2, #0
  size_t num_elements_in_axis = 1;
 8008f54:	2301      	movs	r3, #1
 8008f56:	e007      	b.n	8008f68 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x103c>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 8008f58:	f850 1f04 	ldr.w	r1, [r0, #4]!
 8008f5c:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
    if (current > (std::numeric_limits<size_t>::max() / num_elements_in_axis)) {
 8008f60:	fba3 6401 	umull	r6, r4, r3, r1
 8008f64:	2c00      	cmp	r4, #0
 8008f66:	d1ab      	bne.n	8008ec0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf94>
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008f68:	3201      	adds	r2, #1
 8008f6a:	42aa      	cmp	r2, r5
    num_elements_in_axis *= current;
 8008f6c:	fb01 f303 	mul.w	r3, r1, r3
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008f70:	d1f2      	bne.n	8008f58 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x102c>
  if (num_elements_in_axis > 0) {
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f43f af1d 	beq.w	8008db2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe86>
    for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008f78:	2f00      	cmp	r7, #0
 8008f7a:	f43f af1a 	beq.w	8008db2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe86>
 8008f7e:	9a07      	ldr	r2, [sp, #28]
 8008f80:	9908      	ldr	r1, [sp, #32]
 8008f82:	3a04      	subs	r2, #4
 8008f84:	1e48      	subs	r0, r1, #1
 8008f86:	eb02 0787 	add.w	r7, r2, r7, lsl #2
          static_cast<T>(temp_sum[idx] / static_cast<U>(num_elements_in_axis));
 8008f8a:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8008f8e:	fbb1 f1f3 	udiv	r1, r1, r3
    for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008f92:	42ba      	cmp	r2, r7
      output_data[idx] =
 8008f94:	f800 1f01 	strb.w	r1, [r0, #1]!
    for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008f98:	d1f7      	bne.n	8008f8a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x105e>
 8008f9a:	e70a      	b.n	8008db2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe86>
    const Out actual_in = static_cast<Out>(in);
 8008f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    return current + actual_in;
 8008f9e:	9907      	ldr	r1, [sp, #28]
    const Out actual_in = static_cast<Out>(in);
 8008fa0:	781a      	ldrb	r2, [r3, #0]
    return current + actual_in;
 8008fa2:	680b      	ldr	r3, [r1, #0]
 8008fa4:	4413      	add	r3, r2
    const Out actual_in = static_cast<Out>(in);
 8008fa6:	464f      	mov	r7, r9
    output_data[output_offset] =
 8008fa8:	600b      	str	r3, [r1, #0]
  if (num_dims == 0) {
 8008faa:	e7cb      	b.n	8008f44 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1018>
    const Out actual_in = static_cast<Out>(in);
 8008fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    return current + actual_in;
 8008fae:	9907      	ldr	r1, [sp, #28]
    const Out actual_in = static_cast<Out>(in);
 8008fb0:	f993 2000 	ldrsb.w	r2, [r3]
    return current + actual_in;
 8008fb4:	680b      	ldr	r3, [r1, #0]
 8008fb6:	4413      	add	r3, r2
    const Out actual_in = static_cast<Out>(in);
 8008fb8:	464f      	mov	r7, r9
    output_data[output_offset] =
 8008fba:	600b      	str	r3, [r1, #0]
 8008fbc:	e791      	b.n	8008ee2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xfb6>
    output_data[idx] = T();
 8008fbe:	9908      	ldr	r1, [sp, #32]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	600a      	str	r2, [r1, #0]
  size_t num_outputs = 1;
 8008fc4:	f04f 0801 	mov.w	r8, #1
 8008fc8:	f7ff ba85 	b.w	80084d6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x5aa>
    output_data[idx] = T();
 8008fcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008fce:	2300      	movs	r3, #0
 8008fd0:	7013      	strb	r3, [r2, #0]
    temp_sum[idx] = U();
 8008fd2:	9a07      	ldr	r2, [sp, #28]
 8008fd4:	2701      	movs	r7, #1
 8008fd6:	6013      	str	r3, [r2, #0]
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008fd8:	f7ff b9b3 	b.w	8008342 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x416>
  int num_resolved_axis = 0;
 8008fdc:	2500      	movs	r5, #0
 8008fde:	f7ff b9dd 	b.w	800839c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x470>
 8008fe2:	2500      	movs	r5, #0
 8008fe4:	f7ff b8d3 	b.w	800818e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x262>
  int num_resolved_axis = 0;
 8008fe8:	2500      	movs	r5, #0
 8008fea:	f7ff baa1 	b.w	8008530 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x604>
  size_t num_elements_in_axis = 1;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e5c9      	b.n	8008b86 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc5a>
 8008ff2:	ab1a      	add	r3, sp, #104	; 0x68
  int num_resolved_axis = 0;
 8008ff4:	4635      	mov	r5, r6
 8008ff6:	9306      	str	r3, [sp, #24]
 8008ff8:	4634      	mov	r4, r6
 8008ffa:	f7ff bbe9 	b.w	80087d0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8a4>
 8008ffe:	f8cd 9020 	str.w	r9, [sp, #32]
 8009002:	e460      	b.n	80088c6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x99a>
 8009004:	f8cd 9020 	str.w	r9, [sp, #32]
 8009008:	f7ff bb6e 	b.w	80086e8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x7bc>
 800900c:	ab1a      	add	r3, sp, #104	; 0x68
 800900e:	4635      	mov	r5, r6
 8009010:	9306      	str	r3, [sp, #24]
 8009012:	4634      	mov	r4, r6
 8009014:	e4cb      	b.n	80089ae <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa82>
  size_t num_elements_in_axis = 1;
 8009016:	2301      	movs	r3, #1
 8009018:	e657      	b.n	8008cca <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd9e>
 800901a:	2301      	movs	r3, #1
 800901c:	e5f5      	b.n	8008c0a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xcde>
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 800901e:	9c07      	ldr	r4, [sp, #28]
  for (int idx = 0; idx < num_dims; ++idx) {
 8009020:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009022:	e414      	b.n	800884e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x922>
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 8009024:	9c07      	ldr	r4, [sp, #28]
 8009026:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009028:	e500      	b.n	8008a2c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb00>
 800902a:	9a07      	ldr	r2, [sp, #28]
 800902c:	1e41      	subs	r1, r0, #1
 800902e:	1f10      	subs	r0, r2, #4
 8009030:	4684      	mov	ip, r0
 8009032:	460a      	mov	r2, r1
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8009034:	9808      	ldr	r0, [sp, #32]
    output_data[idx] = T();
 8009036:	f801 3f01 	strb.w	r3, [r1, #1]!
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 800903a:	3202      	adds	r2, #2
 800903c:	1a12      	subs	r2, r2, r0
 800903e:	4297      	cmp	r7, r2
    temp_sum[idx] = U();
 8009040:	f84c 3f04 	str.w	r3, [ip, #4]!
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8009044:	d8f5      	bhi.n	8009032 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1106>
 8009046:	f7ff bb8b 	b.w	8008760 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x834>
 800904a:	9a07      	ldr	r2, [sp, #28]
 800904c:	1e41      	subs	r1, r0, #1
 800904e:	1f10      	subs	r0, r2, #4
 8009050:	4684      	mov	ip, r0
 8009052:	460a      	mov	r2, r1
 8009054:	9808      	ldr	r0, [sp, #32]
    output_data[idx] = T();
 8009056:	f801 3f01 	strb.w	r3, [r1, #1]!
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 800905a:	3202      	adds	r2, #2
 800905c:	1a12      	subs	r2, r2, r0
 800905e:	4297      	cmp	r7, r2
    temp_sum[idx] = U();
 8009060:	f84c 3f04 	str.w	r3, [ip, #4]!
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8009064:	d8f5      	bhi.n	8009052 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1126>
 8009066:	e46a      	b.n	800893e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa12>
  int num_resolved_axis = 0;
 8009068:	2500      	movs	r5, #0
 800906a:	e495      	b.n	8008998 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa6c>
  size_t num_elements_in_axis = 1;
 800906c:	2301      	movs	r3, #1
 800906e:	e783      	b.n	8008f78 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x104c>
 8009070:	2301      	movs	r3, #1
 8009072:	e750      	b.n	8008f16 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xfea>
  int num_resolved_axis = 0;
 8009074:	2500      	movs	r5, #0
 8009076:	f7ff bba0 	b.w	80087ba <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x88e>
 800907a:	ab1a      	add	r3, sp, #104	; 0x68
 800907c:	9306      	str	r3, [sp, #24]
 800907e:	00b4      	lsls	r4, r6, #2
 8009080:	f7ff b997 	b.w	80083b2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x486>
 8009084:	ab1a      	add	r3, sp, #104	; 0x68
 8009086:	9306      	str	r3, [sp, #24]
 8009088:	00b4      	lsls	r4, r6, #2
 800908a:	f7ff b88b 	b.w	80081a4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x278>
 800908e:	ab1a      	add	r3, sp, #104	; 0x68
 8009090:	9306      	str	r3, [sp, #24]
 8009092:	00b4      	lsls	r4, r6, #2
 8009094:	e48b      	b.n	80089ae <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa82>
 8009096:	ab1a      	add	r3, sp, #104	; 0x68
 8009098:	9306      	str	r3, [sp, #24]
 800909a:	ea4f 0a87 	mov.w	sl, r7, lsl #2
 800909e:	f7ff ba53 	b.w	8008548 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x61c>
 80090a2:	ab1a      	add	r3, sp, #104	; 0x68
 80090a4:	9306      	str	r3, [sp, #24]
 80090a6:	00b4      	lsls	r4, r6, #2
 80090a8:	f7ff bb92 	b.w	80087d0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8a4>
 80090ac:	08017004 	.word	0x08017004
 80090b0:	08016604 	.word	0x08016604
 80090b4:	08015618 	.word	0x08015618
 80090b8:	08016d3c 	.word	0x08016d3c

080090bc <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 80090bc:	b570      	push	{r4, r5, r6, lr}
 80090be:	b082      	sub	sp, #8
  TFLITE_DCHECK(context != nullptr);
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d035      	beq.n	8009130 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x74>
  TFLITE_DCHECK(node != nullptr);
 80090c4:	460e      	mov	r6, r1
 80090c6:	2900      	cmp	r1, #0
 80090c8:	d032      	beq.n	8009130 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x74>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 80090ca:	680a      	ldr	r2, [r1, #0]
 80090cc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80090ce:	6851      	ldr	r1, [r2, #4]
 80090d0:	4605      	mov	r5, r0
 80090d2:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
 80090d4:	6873      	ldr	r3, [r6, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
 80090d6:	4604      	mov	r4, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
 80090d8:	6859      	ldr	r1, [r3, #4]
 80090da:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80090dc:	4628      	mov	r0, r5
 80090de:	4798      	blx	r3
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 80090e0:	a901      	add	r1, sp, #4
 80090e2:	4605      	mov	r5, r0
 80090e4:	7a20      	ldrb	r0, [r4, #8]
 80090e6:	f7fb fb01 	bl	80046ec <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 80090ea:	4606      	mov	r6, r0
 80090ec:	b110      	cbz	r0, 80090f4 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x38>
    for (size_t i = 0; i < input_bytes; ++i) {
      output->data.raw[i] = input->data.raw[i];
    }
  }
  return kTfLiteOk;
}
 80090ee:	4630      	mov	r0, r6
 80090f0:	b002      	add	sp, #8
 80090f2:	bd70      	pop	{r4, r5, r6, pc}
  input_bytes *= ElementCount(*input->dims);
 80090f4:	6860      	ldr	r0, [r4, #4]
 80090f6:	f7fd fc0b 	bl	8006910 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 80090fa:	9b01      	ldr	r3, [sp, #4]
  if (input->data.raw != output->data.raw) {
 80090fc:	6822      	ldr	r2, [r4, #0]
  input_bytes *= ElementCount(*input->dims);
 80090fe:	fb03 f000 	mul.w	r0, r3, r0
  if (input->data.raw != output->data.raw) {
 8009102:	682b      	ldr	r3, [r5, #0]
  input_bytes *= ElementCount(*input->dims);
 8009104:	9001      	str	r0, [sp, #4]
  if (input->data.raw != output->data.raw) {
 8009106:	429a      	cmp	r2, r3
 8009108:	d0f1      	beq.n	80090ee <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>
    for (size_t i = 0; i < input_bytes; ++i) {
 800910a:	2800      	cmp	r0, #0
 800910c:	d0ef      	beq.n	80090ee <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>
      output->data.raw[i] = input->data.raw[i];
 800910e:	7812      	ldrb	r2, [r2, #0]
 8009110:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_bytes; ++i) {
 8009112:	9b01      	ldr	r3, [sp, #4]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d9ea      	bls.n	80090ee <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>
 8009118:	2301      	movs	r3, #1
      output->data.raw[i] = input->data.raw[i];
 800911a:	6821      	ldr	r1, [r4, #0]
 800911c:	682a      	ldr	r2, [r5, #0]
 800911e:	5cc9      	ldrb	r1, [r1, r3]
 8009120:	54d1      	strb	r1, [r2, r3]
    for (size_t i = 0; i < input_bytes; ++i) {
 8009122:	9a01      	ldr	r2, [sp, #4]
 8009124:	3301      	adds	r3, #1
 8009126:	429a      	cmp	r2, r3
 8009128:	d8f7      	bhi.n	800911a <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x5e>
}
 800912a:	4630      	mov	r0, r6
 800912c:	b002      	add	sp, #8
 800912e:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(context != nullptr);
 8009130:	f008 f828 	bl	8011184 <abort>

08009134 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 8009134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8009138:	2200      	movs	r2, #0
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 800913a:	b084      	sub	sp, #16
 800913c:	4605      	mov	r5, r0
 800913e:	460f      	mov	r7, r1
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8009140:	f7fa ff8a 	bl	8004058 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 8009144:	2800      	cmp	r0, #0
 8009146:	d05b      	beq.n	8009200 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xcc>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8009148:	4606      	mov	r6, r0
 800914a:	2200      	movs	r2, #0
 800914c:	4639      	mov	r1, r7
 800914e:	4628      	mov	r0, r5
 8009150:	f7fa ff9e 	bl	8004090 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 8009154:	4680      	mov	r8, r0
 8009156:	2800      	cmp	r0, #0
 8009158:	f000 8093 	beq.w	8009282 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x14e>
  return NumElements(t->dims);
 800915c:	68b0      	ldr	r0, [r6, #8]
  for (int i = 0; i < dims->size; ++i) {
 800915e:	6804      	ldr	r4, [r0, #0]
 8009160:	2c00      	cmp	r4, #0
 8009162:	f340 809a 	ble.w	800929a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x166>
  int64_t count = 1;
 8009166:	2201      	movs	r2, #1
  for (int i = 0; i < dims->size; ++i) {
 8009168:	2100      	movs	r1, #0
    count *= dims->data[i];
 800916a:	f850 3f04 	ldr.w	r3, [r0, #4]!
  for (int i = 0; i < dims->size; ++i) {
 800916e:	3101      	adds	r1, #1
 8009170:	42a1      	cmp	r1, r4
    count *= dims->data[i];
 8009172:	fba2 2303 	umull	r2, r3, r2, r3
  for (int i = 0; i < dims->size; ++i) {
 8009176:	d1f8      	bne.n	800916a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x36>
  int num_input_elements = NumElements(input);
 8009178:	4614      	mov	r4, r2
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 800917a:	683b      	ldr	r3, [r7, #0]
  TfLiteIntArray* output_shape = output->dims;
 800917c:	f8d8 e008 	ldr.w	lr, [r8, #8]
      output_shape->size == 1 && output_shape->data[0] == 0) {
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f8de 0000 	ldr.w	r0, [lr]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d046      	beq.n	8009218 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xe4>
  for (int i = 0; i < output_shape->size; ++i) {
 800918a:	2800      	cmp	r0, #0
 800918c:	dd4c      	ble.n	8009228 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf4>
 800918e:	4671      	mov	r1, lr
  for (int i = 0; i < dims->size; ++i) {
 8009190:	2300      	movs	r3, #0
 8009192:	f04f 3cff 	mov.w	ip, #4294967295
 8009196:	2701      	movs	r7, #1
 8009198:	e004      	b.n	80091a4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x70>
 800919a:	3301      	adds	r3, #1
 800919c:	4283      	cmp	r3, r0
      num_output_elements *= value;
 800919e:	fb02 f707 	mul.w	r7, r2, r7
  for (int i = 0; i < output_shape->size; ++i) {
 80091a2:	da0b      	bge.n	80091bc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x88>
    int value = output_shape->data[i];
 80091a4:	f851 2f04 	ldr.w	r2, [r1, #4]!
    if (value == -1) {
 80091a8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80091ac:	d1f5      	bne.n	800919a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x66>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 80091ae:	f1bc 3fff 	cmp.w	ip, #4294967295
 80091b2:	d156      	bne.n	8009262 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x12e>
 80091b4:	469c      	mov	ip, r3
  for (int i = 0; i < output_shape->size; ++i) {
 80091b6:	3301      	adds	r3, #1
 80091b8:	4283      	cmp	r3, r0
 80091ba:	dbf3      	blt.n	80091a4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x70>
  if (stretch_dim != -1) {
 80091bc:	f1bc 3fff 	cmp.w	ip, #4294967295
 80091c0:	d007      	beq.n	80091d2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9e>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 80091c2:	fb94 f3f7 	sdiv	r3, r4, r7
 80091c6:	eb0e 0e8c 	add.w	lr, lr, ip, lsl #2
    num_output_elements *= output_shape->data[stretch_dim];
 80091ca:	fb03 f707 	mul.w	r7, r3, r7
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 80091ce:	f8ce 3004 	str.w	r3, [lr, #4]
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 80091d2:	7830      	ldrb	r0, [r6, #0]
 80091d4:	f898 3000 	ldrb.w	r3, [r8]
 80091d8:	4283      	cmp	r3, r0
 80091da:	d12b      	bne.n	8009234 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x100>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 80091dc:	42a7      	cmp	r7, r4
 80091de:	d025      	beq.n	800922c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf8>
 80091e0:	e9cd 4702 	strd	r4, r7, [sp, #8]
 80091e4:	4a2e      	ldr	r2, [pc, #184]	; (80092a0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>)
 80091e6:	4b2f      	ldr	r3, [pc, #188]	; (80092a4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x170>)
 80091e8:	696c      	ldr	r4, [r5, #20]
 80091ea:	492f      	ldr	r1, [pc, #188]	; (80092a8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x174>)
 80091ec:	e9cd 3200 	strd	r3, r2, [sp]
 80091f0:	4628      	mov	r0, r5
 80091f2:	4a2e      	ldr	r2, [pc, #184]	; (80092ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>)
 80091f4:	2346      	movs	r3, #70	; 0x46
 80091f6:	47a0      	blx	r4
 80091f8:	2001      	movs	r0, #1
}
 80091fa:	b004      	add	sp, #16
 80091fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(context, input != nullptr);
 8009200:	4b2b      	ldr	r3, [pc, #172]	; (80092b0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>)
 8009202:	696c      	ldr	r4, [r5, #20]
 8009204:	4a29      	ldr	r2, [pc, #164]	; (80092ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>)
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	4628      	mov	r0, r5
 800920a:	492a      	ldr	r1, [pc, #168]	; (80092b4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x180>)
 800920c:	2323      	movs	r3, #35	; 0x23
 800920e:	47a0      	blx	r4
 8009210:	2001      	movs	r0, #1
}
 8009212:	b004      	add	sp, #16
 8009214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8009218:	2801      	cmp	r0, #1
 800921a:	d1b6      	bne.n	800918a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x56>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 800921c:	f8de 3004 	ldr.w	r3, [lr, #4]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1b4      	bne.n	800918e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5a>
    output_shape->size = 0;
 8009224:	f8ce 3000 	str.w	r3, [lr]
  int num_output_elements = 1;
 8009228:	2701      	movs	r7, #1
 800922a:	e7d2      	b.n	80091d2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9e>
  return kTfLiteOk;
 800922c:	2000      	movs	r0, #0
}
 800922e:	b004      	add	sp, #16
 8009230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8009234:	696e      	ldr	r6, [r5, #20]
 8009236:	f7fa fb21 	bl	800387c <TfLiteTypeGetName>
 800923a:	4604      	mov	r4, r0
 800923c:	f898 0000 	ldrb.w	r0, [r8]
 8009240:	f7fa fb1c 	bl	800387c <TfLiteTypeGetName>
 8009244:	491c      	ldr	r1, [pc, #112]	; (80092b8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x184>)
 8009246:	4b1d      	ldr	r3, [pc, #116]	; (80092bc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x188>)
 8009248:	4a18      	ldr	r2, [pc, #96]	; (80092ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>)
 800924a:	e9cd 3100 	strd	r3, r1, [sp]
 800924e:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8009252:	491b      	ldr	r1, [pc, #108]	; (80092c0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x18c>)
 8009254:	4628      	mov	r0, r5
 8009256:	2345      	movs	r3, #69	; 0x45
 8009258:	47b0      	blx	r6
 800925a:	2001      	movs	r0, #1
}
 800925c:	b004      	add	sp, #16
 800925e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 8009262:	e9cd c202 	strd	ip, r2, [sp, #8]
 8009266:	4917      	ldr	r1, [pc, #92]	; (80092c4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x190>)
 8009268:	4b17      	ldr	r3, [pc, #92]	; (80092c8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x194>)
 800926a:	696c      	ldr	r4, [r5, #20]
 800926c:	4a0f      	ldr	r2, [pc, #60]	; (80092ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>)
 800926e:	e9cd 3100 	strd	r3, r1, [sp]
 8009272:	4628      	mov	r0, r5
 8009274:	490c      	ldr	r1, [pc, #48]	; (80092a8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x174>)
 8009276:	233a      	movs	r3, #58	; 0x3a
 8009278:	47a0      	blx	r4
 800927a:	2001      	movs	r0, #1
}
 800927c:	b004      	add	sp, #16
 800927e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(context, output != nullptr);
 8009282:	4b12      	ldr	r3, [pc, #72]	; (80092cc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x198>)
 8009284:	696c      	ldr	r4, [r5, #20]
 8009286:	4a09      	ldr	r2, [pc, #36]	; (80092ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>)
 8009288:	9300      	str	r3, [sp, #0]
 800928a:	4628      	mov	r0, r5
 800928c:	4909      	ldr	r1, [pc, #36]	; (80092b4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x180>)
 800928e:	2325      	movs	r3, #37	; 0x25
 8009290:	47a0      	blx	r4
 8009292:	2001      	movs	r0, #1
}
 8009294:	b004      	add	sp, #16
 8009296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800929a:	2401      	movs	r4, #1
 800929c:	e76d      	b.n	800917a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x46>
 800929e:	bf00      	nop
 80092a0:	08017334 	.word	0x08017334
 80092a4:	08017348 	.word	0x08017348
 80092a8:	08015678 	.word	0x08015678
 80092ac:	080172c8 	.word	0x080172c8
 80092b0:	080172fc 	.word	0x080172fc
 80092b4:	08015618 	.word	0x08015618
 80092b8:	08016654 	.word	0x08016654
 80092bc:	08016664 	.word	0x08016664
 80092c0:	08016638 	.word	0x08016638
 80092c4:	08017324 	.word	0x08017324
 80092c8:	08017328 	.word	0x08017328
 80092cc:	08017310 	.word	0x08017310

080092d0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 80092d0:	680b      	ldr	r3, [r1, #0]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 80092d2:	b570      	push	{r4, r5, r6, lr}
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3b01      	subs	r3, #1
 80092d8:	2b01      	cmp	r3, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 80092da:	b084      	sub	sp, #16
 80092dc:	4605      	mov	r5, r0
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 80092de:	d909      	bls.n	80092f4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 80092e0:	4b1a      	ldr	r3, [pc, #104]	; (800934c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
 80092e2:	6944      	ldr	r4, [r0, #20]
 80092e4:	4a1a      	ldr	r2, [pc, #104]	; (8009350 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	491a      	ldr	r1, [pc, #104]	; (8009354 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
 80092ea:	234b      	movs	r3, #75	; 0x4b
 80092ec:	47a0      	blx	r4
 80092ee:	2001      	movs	r0, #1
}
 80092f0:	b004      	add	sp, #16
 80092f2:	bd70      	pop	{r4, r5, r6, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 80092f4:	684b      	ldr	r3, [r1, #4]
 80092f6:	681e      	ldr	r6, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 80092f8:	2e01      	cmp	r6, #1
 80092fa:	460c      	mov	r4, r1
 80092fc:	d00e      	beq.n	800931c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4c>
 80092fe:	4b16      	ldr	r3, [pc, #88]	; (8009358 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x88>)
 8009300:	6945      	ldr	r5, [r0, #20]
 8009302:	9301      	str	r3, [sp, #4]
 8009304:	2401      	movs	r4, #1
 8009306:	4b15      	ldr	r3, [pc, #84]	; (800935c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	e9cd 6402 	strd	r6, r4, [sp, #8]
 800930e:	4a10      	ldr	r2, [pc, #64]	; (8009350 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
 8009310:	4913      	ldr	r1, [pc, #76]	; (8009360 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
 8009312:	234c      	movs	r3, #76	; 0x4c
 8009314:	47a8      	blx	r5
 8009316:	4620      	mov	r0, r4
}
 8009318:	b004      	add	sp, #16
 800931a:	bd70      	pop	{r4, r5, r6, pc}
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 800931c:	f7ff ff0a 	bl	8009134 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 8009320:	2800      	cmp	r0, #0
 8009322:	d0e5      	beq.n	80092f0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
 8009324:	4621      	mov	r1, r4
 8009326:	4628      	mov	r0, r5
 8009328:	696c      	ldr	r4, [r5, #20]
 800932a:	f7ff ff03 	bl	8009134 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 800932e:	2300      	movs	r3, #0
 8009330:	9303      	str	r3, [sp, #12]
 8009332:	4b0c      	ldr	r3, [pc, #48]	; (8009364 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
 8009334:	4a06      	ldr	r2, [pc, #24]	; (8009350 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
 8009336:	490a      	ldr	r1, [pc, #40]	; (8009360 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
 8009338:	e9cd 3001 	strd	r3, r0, [sp, #4]
 800933c:	4b0a      	ldr	r3, [pc, #40]	; (8009368 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x98>)
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	4628      	mov	r0, r5
 8009342:	234d      	movs	r3, #77	; 0x4d
 8009344:	47a0      	blx	r4
 8009346:	4630      	mov	r0, r6
 8009348:	e7d2      	b.n	80092f0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
 800934a:	bf00      	nop
 800934c:	0801735c 	.word	0x0801735c
 8009350:	080172c8 	.word	0x080172c8
 8009354:	08015618 	.word	0x08015618
 8009358:	080176f0 	.word	0x080176f0
 800935c:	0801738c 	.word	0x0801738c
 8009360:	08015678 	.word	0x08015678
 8009364:	080173a0 	.word	0x080173a0
 8009368:	080173ac 	.word	0x080173ac

0800936c <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
 800936c:	b510      	push	{r4, lr}
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800936e:	4c06      	ldr	r4, [pc, #24]	; (8009388 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x1c>)
TfLiteRegistration Register_RESHAPE() {
 8009370:	4686      	mov	lr, r0
          /*version=*/0};
 8009372:	4684      	mov	ip, r0
 8009374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009376:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800937a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800937e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 8009382:	4670      	mov	r0, lr
 8009384:	bd10      	pop	{r4, pc}
 8009386:	bf00      	nop
 8009388:	08014010 	.word	0x08014010

0800938c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 800938c:	b570      	push	{r4, r5, r6, lr}
  return a - b;
 800938e:	f040 457f 	orr.w	r5, r0, #4278190080	; 0xff000000
FixedPoint<tRawType, 0> exp_on_negative_values(
 8009392:	4604      	mov	r4, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 8009394:	0168      	lsls	r0, r5, #5
 8009396:	f7fd fd17 	bl	8006dc8 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
  std::int64_t ab_64 = a_64 * b_64;
 800939a:	4b84      	ldr	r3, [pc, #528]	; (80095ac <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x220>)
 800939c:	fb80 3203 	smull	r3, r2, r0, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 80093a0:	2a00      	cmp	r2, #0
  return a - b;
 80093a2:	eba5 0104 	sub.w	r1, r5, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 80093a6:	4d82      	ldr	r5, [pc, #520]	; (80095b0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x224>)
 80093a8:	bfa6      	itte	ge
 80093aa:	f04f 4580 	movge.w	r5, #1073741824	; 0x40000000
 80093ae:	f04f 0e00 	movge.w	lr, #0
 80093b2:	f04f 3eff 	movlt.w	lr, #4294967295
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 80093b6:	195b      	adds	r3, r3, r5
 80093b8:	eb42 020e 	adc.w	r2, r2, lr
 80093bc:	2a00      	cmp	r2, #0
  return a ? BitNot(zero) : zero;
 80093be:	f3c1 6c00 	ubfx	ip, r1, #24, #1
 80093c2:	f341 6600 	sbfx	r6, r1, #24, #1
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 80093c6:	da04      	bge.n	80093d2 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x46>
 80093c8:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80093cc:	195b      	adds	r3, r3, r5
 80093ce:	f142 0200 	adc.w	r2, r2, #0
 80093d2:	0fdb      	lsrs	r3, r3, #31
 80093d4:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  return a & b;
 80093d8:	401e      	ands	r6, r3
 80093da:	f10c 33ff 	add.w	r3, ip, #4294967295
 80093de:	4018      	ands	r0, r3
  std::int64_t ab_64 = a_64 * b_64;
 80093e0:	4b74      	ldr	r3, [pc, #464]	; (80095b4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x228>)
  return a ^ b;
 80093e2:	4070      	eors	r0, r6
  std::int64_t ab_64 = a_64 * b_64;
 80093e4:	fb80 3203 	smull	r3, r2, r0, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 80093e8:	4e71      	ldr	r6, [pc, #452]	; (80095b0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x224>)
 80093ea:	2a00      	cmp	r2, #0
 80093ec:	bfb3      	iteet	lt
 80093ee:	46b6      	movlt	lr, r6
 80093f0:	f04f 4e80 	movge.w	lr, #1073741824	; 0x40000000
 80093f4:	2600      	movge	r6, #0
 80093f6:	f04f 36ff 	movlt.w	r6, #4294967295
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 80093fa:	eb13 030e 	adds.w	r3, r3, lr
 80093fe:	eb42 0206 	adc.w	r2, r2, r6
 8009402:	2a00      	cmp	r2, #0
  return a ? BitNot(zero) : zero;
 8009404:	f3c1 6c40 	ubfx	ip, r1, #25, #1
 8009408:	f341 6540 	sbfx	r5, r1, #25, #1
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800940c:	da04      	bge.n	8009418 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x8c>
 800940e:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 8009412:	199b      	adds	r3, r3, r6
 8009414:	f142 0200 	adc.w	r2, r2, #0
 8009418:	0fdb      	lsrs	r3, r3, #31
 800941a:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  return a & b;
 800941e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009422:	ea0c 0c00 	and.w	ip, ip, r0
 8009426:	402b      	ands	r3, r5
  std::int64_t ab_64 = a_64 * b_64;
 8009428:	4a63      	ldr	r2, [pc, #396]	; (80095b8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x22c>)
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800942a:	4d61      	ldr	r5, [pc, #388]	; (80095b0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x224>)
  return a ^ b;
 800942c:	ea83 030c 	eor.w	r3, r3, ip
  std::int64_t ab_64 = a_64 * b_64;
 8009430:	fb83 2002 	smull	r2, r0, r3, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8009434:	2800      	cmp	r0, #0
 8009436:	bfa6      	itte	ge
 8009438:	f04f 4580 	movge.w	r5, #1073741824	; 0x40000000
 800943c:	f04f 0e00 	movge.w	lr, #0
 8009440:	f04f 3eff 	movlt.w	lr, #4294967295
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8009444:	1952      	adds	r2, r2, r5
 8009446:	eb40 000e 	adc.w	r0, r0, lr
 800944a:	2800      	cmp	r0, #0
  return a ? BitNot(zero) : zero;
 800944c:	f3c1 6c80 	ubfx	ip, r1, #26, #1
 8009450:	f341 6680 	sbfx	r6, r1, #26, #1
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8009454:	da04      	bge.n	8009460 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0xd4>
 8009456:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800945a:	1952      	adds	r2, r2, r5
 800945c:	f140 0000 	adc.w	r0, r0, #0
 8009460:	0fd2      	lsrs	r2, r2, #31
 8009462:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
  return a & b;
 8009466:	f10c 3cff 	add.w	ip, ip, #4294967295
 800946a:	4032      	ands	r2, r6
 800946c:	ea0c 0c03 	and.w	ip, ip, r3
  return a ^ b;
 8009470:	ea82 030c 	eor.w	r3, r2, ip
  std::int64_t ab_64 = a_64 * b_64;
 8009474:	4a51      	ldr	r2, [pc, #324]	; (80095bc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x230>)
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8009476:	4d4e      	ldr	r5, [pc, #312]	; (80095b0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x224>)
  std::int64_t ab_64 = a_64 * b_64;
 8009478:	fb83 2002 	smull	r2, r0, r3, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800947c:	2800      	cmp	r0, #0
 800947e:	bfa6      	itte	ge
 8009480:	f04f 4580 	movge.w	r5, #1073741824	; 0x40000000
 8009484:	f04f 0e00 	movge.w	lr, #0
 8009488:	f04f 3eff 	movlt.w	lr, #4294967295
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800948c:	1952      	adds	r2, r2, r5
 800948e:	eb40 000e 	adc.w	r0, r0, lr
 8009492:	2800      	cmp	r0, #0
  return a ? BitNot(zero) : zero;
 8009494:	f3c1 6cc0 	ubfx	ip, r1, #27, #1
 8009498:	f341 66c0 	sbfx	r6, r1, #27, #1
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800949c:	da04      	bge.n	80094a8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x11c>
 800949e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80094a2:	1952      	adds	r2, r2, r5
 80094a4:	f140 0000 	adc.w	r0, r0, #0
 80094a8:	0fd2      	lsrs	r2, r2, #31
 80094aa:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
  return a & b;
 80094ae:	f10c 3cff 	add.w	ip, ip, #4294967295
 80094b2:	4032      	ands	r2, r6
 80094b4:	ea0c 0c03 	and.w	ip, ip, r3
  return a ^ b;
 80094b8:	ea82 030c 	eor.w	r3, r2, ip
  std::int64_t ab_64 = a_64 * b_64;
 80094bc:	4a40      	ldr	r2, [pc, #256]	; (80095c0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x234>)
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 80094be:	4d3c      	ldr	r5, [pc, #240]	; (80095b0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x224>)
  std::int64_t ab_64 = a_64 * b_64;
 80094c0:	fb83 2002 	smull	r2, r0, r3, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 80094c4:	2800      	cmp	r0, #0
 80094c6:	bfa6      	itte	ge
 80094c8:	f04f 4580 	movge.w	r5, #1073741824	; 0x40000000
 80094cc:	f04f 0e00 	movge.w	lr, #0
 80094d0:	f04f 3eff 	movlt.w	lr, #4294967295
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 80094d4:	1952      	adds	r2, r2, r5
 80094d6:	eb40 000e 	adc.w	r0, r0, lr
 80094da:	2800      	cmp	r0, #0
  return a ? BitNot(zero) : zero;
 80094dc:	f3c1 7c00 	ubfx	ip, r1, #28, #1
 80094e0:	f341 7600 	sbfx	r6, r1, #28, #1
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 80094e4:	da04      	bge.n	80094f0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x164>
 80094e6:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80094ea:	1952      	adds	r2, r2, r5
 80094ec:	f140 0000 	adc.w	r0, r0, #0
 80094f0:	0fd2      	lsrs	r2, r2, #31
 80094f2:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
  return a & b;
 80094f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80094fa:	4032      	ands	r2, r6
 80094fc:	ea0c 0c03 	and.w	ip, ip, r3
  return a ^ b;
 8009500:	ea82 030c 	eor.w	r3, r2, ip
  std::int64_t ab_64 = a_64 * b_64;
 8009504:	4a2f      	ldr	r2, [pc, #188]	; (80095c4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x238>)
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8009506:	4d2a      	ldr	r5, [pc, #168]	; (80095b0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x224>)
  std::int64_t ab_64 = a_64 * b_64;
 8009508:	fb83 2002 	smull	r2, r0, r3, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800950c:	2800      	cmp	r0, #0
 800950e:	bfa6      	itte	ge
 8009510:	f04f 4580 	movge.w	r5, #1073741824	; 0x40000000
 8009514:	f04f 0e00 	movge.w	lr, #0
 8009518:	f04f 3eff 	movlt.w	lr, #4294967295
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800951c:	1952      	adds	r2, r2, r5
 800951e:	eb40 000e 	adc.w	r0, r0, lr
 8009522:	2800      	cmp	r0, #0
  return a ? BitNot(zero) : zero;
 8009524:	f3c1 7c40 	ubfx	ip, r1, #29, #1
 8009528:	f341 7640 	sbfx	r6, r1, #29, #1
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800952c:	da04      	bge.n	8009538 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x1ac>
 800952e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8009532:	1952      	adds	r2, r2, r5
 8009534:	f140 0000 	adc.w	r0, r0, #0
 8009538:	0fd2      	lsrs	r2, r2, #31
 800953a:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
  return a & b;
 800953e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009542:	4032      	ands	r2, r6
 8009544:	ea0c 0c03 	and.w	ip, ip, r3
  return a ^ b;
 8009548:	ea82 020c 	eor.w	r2, r2, ip
  std::int64_t ab_64 = a_64 * b_64;
 800954c:	23f2      	movs	r3, #242	; 0xf2
 800954e:	fb82 3003 	smull	r3, r0, r2, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8009552:	2800      	cmp	r0, #0
 8009554:	4d16      	ldr	r5, [pc, #88]	; (80095b0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x224>)
 8009556:	bfa6      	itte	ge
 8009558:	f04f 4580 	movge.w	r5, #1073741824	; 0x40000000
 800955c:	2600      	movge	r6, #0
 800955e:	f04f 36ff 	movlt.w	r6, #4294967295
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8009562:	195b      	adds	r3, r3, r5
 8009564:	eb40 0006 	adc.w	r0, r0, r6
  return a ? BitNot(zero) : zero;
 8009568:	fab4 f484 	clz	r4, r4
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800956c:	2800      	cmp	r0, #0
  return a ? BitNot(zero) : zero;
 800956e:	f3c1 7c80 	ubfx	ip, r1, #30, #1
 8009572:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8009576:	f341 7180 	sbfx	r1, r1, #30, #1
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800957a:	da04      	bge.n	8009586 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x1fa>
 800957c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8009580:	195b      	adds	r3, r3, r5
 8009582:	f140 0000 	adc.w	r0, r0, #0
 8009586:	0fdb      	lsrs	r3, r3, #31
 8009588:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  return a & b;
 800958c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009590:	ea0c 0c02 	and.w	ip, ip, r2
 8009594:	400b      	ands	r3, r1
 8009596:	1e62      	subs	r2, r4, #1
  return a ^ b;
 8009598:	ea83 030c 	eor.w	r3, r3, ip
  return a ? BitNot(zero) : zero;
 800959c:	4264      	negs	r4, r4
  return a & b;
 800959e:	ea03 0002 	and.w	r0, r3, r2
 80095a2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
  return a ^ b;
 80095a6:	4060      	eors	r0, r4
}
 80095a8:	bd70      	pop	{r4, r5, r6, pc}
 80095aa:	bf00      	nop
 80095ac:	63afbe7b 	.word	0x63afbe7b
 80095b0:	c0000001 	.word	0xc0000001
 80095b4:	4da2cbf2 	.word	0x4da2cbf2
 80095b8:	2f16ac6c 	.word	0x2f16ac6c
 80095bc:	1152aaa4 	.word	0x1152aaa4
 80095c0:	02582ab7 	.word	0x02582ab7
 80095c4:	000afe11 	.word	0x000afe11

080095c8 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  }
  return kTfLiteOk;
}

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80095c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80095ca:	b10b      	cbz	r3, 80095d0 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 80095cc:	2138      	movs	r1, #56	; 0x38
 80095ce:	4718      	bx	r3
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 80095d0:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80095d2:	f007 fdd7 	bl	8011184 <abort>
 80095d6:	bf00      	nop

080095d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 80095d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095dc:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->user_data != nullptr);
 80095e0:	690e      	ldr	r6, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 80095e2:	b0b3      	sub	sp, #204	; 0xcc
  TFLITE_DCHECK(node->user_data != nullptr);
 80095e4:	2e00      	cmp	r6, #0
 80095e6:	f000 81ea 	beq.w	80099be <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e6>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80095ea:	f8d1 a014 	ldr.w	sl, [r1, #20]
 80095ee:	460d      	mov	r5, r1
 80095f0:	f1ba 0f00 	cmp.w	sl, #0
 80095f4:	f000 81e3 	beq.w	80099be <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e6>

  int32_t buf_size = 0;
  const auto params = static_cast<const TfLiteConvParams*>(node->builtin_data);
  OpData* data = static_cast<OpData*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80095f8:	2200      	movs	r2, #0
 80095fa:	4604      	mov	r4, r0
 80095fc:	f7fa fd2c 	bl	8004058 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 8009600:	2201      	movs	r2, #1
 8009602:	4629      	mov	r1, r5
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8009604:	4607      	mov	r7, r0
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 8009606:	4620      	mov	r0, r4
 8009608:	f7fa fd26 	bl	8004058 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800960c:	2200      	movs	r2, #0
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 800960e:	900a      	str	r0, [sp, #40]	; 0x28
  const TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8009610:	4629      	mov	r1, r5
 8009612:	4620      	mov	r0, r4
 8009614:	f7fa fd3c 	bl	8004090 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8009618:	4683      	mov	fp, r0
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
  if (tensor == nullptr) {
 800961a:	2f00      	cmp	r7, #0
 800961c:	f000 80d1 	beq.w	80097c2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ea>
    return RuntimeShape();
  }

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
 8009620:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8009624:	f858 2b04 	ldr.w	r2, [r8], #4
    size_ = dimensions_count;
 8009628:	921c      	str	r2, [sp, #112]	; 0x70
    if (dimensions_count > kMaxSmallSize) {
 800962a:	2a05      	cmp	r2, #5
 800962c:	f300 8091 	bgt.w	8009752 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x17a>
      dims_pointer_ = new int32_t[dimensions_count];
 8009630:	0092      	lsls	r2, r2, #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8009632:	a81d      	add	r0, sp, #116	; 0x74
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8009634:	4641      	mov	r1, r8
 8009636:	f008 fe00 	bl	801223a <memcpy>
    TFLITE_DCHECK_LT(i, size_);
 800963a:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
  if (tensor == nullptr) {
 800963e:	f1bb 0f00 	cmp.w	fp, #0
 8009642:	f000 809d 	beq.w	8009780 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a8>
  const int dims_size = dims->size;
 8009646:	f8db 8008 	ldr.w	r8, [fp, #8]
 800964a:	f858 2b04 	ldr.w	r2, [r8], #4
    size_ = dimensions_count;
 800964e:	9222      	str	r2, [sp, #136]	; 0x88
    if (dimensions_count > kMaxSmallSize) {
 8009650:	2a05      	cmp	r2, #5
 8009652:	f300 80c3 	bgt.w	80097dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>
      dims_pointer_ = new int32_t[dimensions_count];
 8009656:	0092      	lsls	r2, r2, #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8009658:	a823      	add	r0, sp, #140	; 0x8c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 800965a:	4641      	mov	r1, r8
 800965c:	f008 fded 	bl	801223a <memcpy>
    TFLITE_DCHECK_LT(i, size_);
 8009660:	f1b9 0f00 	cmp.w	r9, #0
 8009664:	f340 81ab 	ble.w	80099be <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8009668:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    TFLITE_DCHECK_LT(i, size_);
 800966a:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800966e:	f1b9 0f05 	cmp.w	r9, #5
 8009672:	bfc8      	it	gt
 8009674:	681b      	ldrgt	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
 8009676:	f1b8 0f00 	cmp.w	r8, #0
 800967a:	f340 81a0 	ble.w	80099be <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800967e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009680:	f1b8 0f05 	cmp.w	r8, #5
 8009684:	bfc8      	it	gt
 8009686:	6812      	ldrgt	r2, [r2, #0]
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8009688:	429a      	cmp	r2, r3
 800968a:	f040 8198 	bne.w	80099be <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e6>
  RuntimeShape output_shape = GetTensorShape(output);

  // Initialize cmsis-nn input dimensions
  cmsis_nn_dims input_dims;
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
  input_dims.h = input->dims->data[1];
 800968e:	68ba      	ldr	r2, [r7, #8]
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
 8009690:	9310      	str	r3, [sp, #64]	; 0x40
  input_dims.h = input->dims->data[1];
 8009692:	6891      	ldr	r1, [r2, #8]
  input_dims.w = input->dims->data[2];
 8009694:	68d2      	ldr	r2, [r2, #12]
  input_dims.h = input->dims->data[1];
 8009696:	9111      	str	r1, [sp, #68]	; 0x44
    TFLITE_DCHECK_LT(i, size_);
 8009698:	f1b9 0f03 	cmp.w	r9, #3
  input_dims.w = input->dims->data[2];
 800969c:	9212      	str	r2, [sp, #72]	; 0x48
 800969e:	f340 818e 	ble.w	80099be <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 80096a2:	f1b9 0f05 	cmp.w	r9, #5
 80096a6:	bfca      	itet	gt
 80096a8:	9a1d      	ldrgt	r2, [sp, #116]	; 0x74
 80096aa:	9a20      	ldrle	r2, [sp, #128]	; 0x80
 80096ac:	68d2      	ldrgt	r2, [r2, #12]
  input_dims.c = input_shape.Dims(3);
 80096ae:	9213      	str	r2, [sp, #76]	; 0x4c
    TFLITE_DCHECK_LT(i, size_);
 80096b0:	f1b8 0f03 	cmp.w	r8, #3
 80096b4:	f340 8183 	ble.w	80099be <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e6>
  filter_dims.w = filter->dims->data[2];
  filter_dims.c = input_dims.c;

  // Initialize cmsis-nn output dimensions
  cmsis_nn_dims output_dims;
  output_dims.n = input_dims.n;
 80096b8:	9318      	str	r3, [sp, #96]	; 0x60
  filter_dims.h = filter->dims->data[1];
 80096ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  output_dims.h = output->dims->data[1];
 80096bc:	f8db 1008 	ldr.w	r1, [fp, #8]
  filter_dims.h = filter->dims->data[1];
 80096c0:	689b      	ldr	r3, [r3, #8]
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 80096c2:	f1b8 0f05 	cmp.w	r8, #5
 80096c6:	dd70      	ble.n	80097aa <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1d2>
 80096c8:	f8dd c08c 	ldr.w	ip, [sp, #140]	; 0x8c
 80096cc:	6898      	ldr	r0, [r3, #8]
 80096ce:	9015      	str	r0, [sp, #84]	; 0x54
  filter_dims.n = output_shape.Dims(3);
 80096d0:	f8dc 000c 	ldr.w	r0, [ip, #12]
 80096d4:	9014      	str	r0, [sp, #80]	; 0x50
  filter_dims.w = filter->dims->data[2];
 80096d6:	68d8      	ldr	r0, [r3, #12]
  filter_dims.c = input_dims.c;
 80096d8:	e9cd 0216 	strd	r0, r2, [sp, #88]	; 0x58
  output_dims.h = output->dims->data[1];
 80096dc:	6888      	ldr	r0, [r1, #8]
 80096de:	f8dc 200c 	ldr.w	r2, [ip, #12]
  output_dims.w = output->dims->data[2];
 80096e2:	68c9      	ldr	r1, [r1, #12]
  output_dims.h = output->dims->data[1];
 80096e4:	9019      	str	r0, [sp, #100]	; 0x64
  output_dims.w = output->dims->data[2];
 80096e6:	911a      	str	r1, [sp, #104]	; 0x68
  // a bug in kernel_utils.cc which incorrectly uses per_channel_output_shift in
  // non-int8 cases. Protect this section with a if (input->type == kTfLiteInt8)
  // when the issue is fixed.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
  data->per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 80096e8:	6859      	ldr	r1, [r3, #4]
  output_dims.c = output_shape.Dims(3);
 80096ea:	921b      	str	r2, [sp, #108]	; 0x6c
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 80096ec:	0089      	lsls	r1, r1, #2
 80096ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80096f0:	910b      	str	r1, [sp, #44]	; 0x2c
 80096f2:	4620      	mov	r0, r4
 80096f4:	4798      	blx	r3
          context, num_channels * sizeof(int32_t)));
  data->per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 80096f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  data->per_channel_output_multiplier =
 80096fa:	6270      	str	r0, [r6, #36]	; 0x24
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 80096fc:	4620      	mov	r0, r4
 80096fe:	4798      	blx	r3
  bool has_bias = node->inputs->size == 3;
 8009700:	682b      	ldr	r3, [r5, #0]
  data->per_channel_output_shift =
 8009702:	62b0      	str	r0, [r6, #40]	; 0x28
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 8009704:	681b      	ldr	r3, [r3, #0]
          context, num_channels * sizeof(int32_t)));

  TF_LITE_ENSURE_STATUS(CalculateOpData(
 8009706:	f897 e000 	ldrb.w	lr, [r7]
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 800970a:	3b02      	subs	r3, #2
 800970c:	2b01      	cmp	r3, #1
  TF_LITE_ENSURE_STATUS(CalculateOpData(
 800970e:	e9dd c011 	ldrd	ip, r0, [sp, #68]	; 0x44
 8009712:	e9dd 1215 	ldrd	r1, r2, [sp, #84]	; 0x54
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 8009716:	d936      	bls.n	8009786 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ae>
 8009718:	4baa      	ldr	r3, [pc, #680]	; (80099c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3ec>)
 800971a:	6965      	ldr	r5, [r4, #20]
 800971c:	4aaa      	ldr	r2, [pc, #680]	; (80099c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3f0>)
 800971e:	9300      	str	r3, [sp, #0]
 8009720:	49aa      	ldr	r1, [pc, #680]	; (80099cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3f4>)
 8009722:	4620      	mov	r0, r4
 8009724:	2357      	movs	r3, #87	; 0x57
 8009726:	47a8      	blx	r5
 8009728:	2501      	movs	r5, #1
    if (size_ > kMaxSmallSize) {
 800972a:	f1b8 0f05 	cmp.w	r8, #5
 800972e:	dd03      	ble.n	8009738 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x160>
      delete[] dims_pointer_;
 8009730:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8009732:	b108      	cbz	r0, 8009738 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x160>
 8009734:	f007 fa4c 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 8009738:	f1b9 0f05 	cmp.w	r9, #5
 800973c:	dd03      	ble.n	8009746 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16e>
      delete[] dims_pointer_;
 800973e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009740:	b108      	cbz	r0, 8009746 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16e>
 8009742:	f007 fa45 	bl	8010bd0 <_ZdaPv>
        context, buf_size, &data->buffer_idx));
  } else {
    data->buffer_idx = -1;
  }
  return kTfLiteOk;
}
 8009746:	4628      	mov	r0, r5
 8009748:	b033      	add	sp, #204	; 0xcc
 800974a:	ecbd 8b02 	vpop	{d8}
 800974e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      dims_pointer_ = new int32_t[dimensions_count];
 8009752:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009756:	429a      	cmp	r2, r3
 8009758:	bfb5      	itete	lt
 800975a:	0090      	lsllt	r0, r2, #2
 800975c:	0092      	lslge	r2, r2, #2
 800975e:	4602      	movlt	r2, r0
 8009760:	f04f 30ff 	movge.w	r0, #4294967295
 8009764:	920b      	str	r2, [sp, #44]	; 0x2c
 8009766:	f007 fa55 	bl	8010c14 <_Znaj>
 800976a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800976c:	901d      	str	r0, [sp, #116]	; 0x74
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 800976e:	4641      	mov	r1, r8
 8009770:	f008 fd63 	bl	801223a <memcpy>
    TFLITE_DCHECK_LT(i, size_);
 8009774:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
  if (tensor == nullptr) {
 8009778:	f1bb 0f00 	cmp.w	fp, #0
 800977c:	f47f af63 	bne.w	8009646 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  RuntimeShape() : size_(0) {}
 8009780:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
 8009784:	e76c      	b.n	8009660 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x88>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 8009786:	686b      	ldr	r3, [r5, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2b01      	cmp	r3, #1
 800978c:	d035      	beq.n	80097fa <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x222>
 800978e:	2501      	movs	r5, #1
 8009790:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8009794:	4b8e      	ldr	r3, [pc, #568]	; (80099d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3f8>)
 8009796:	9301      	str	r3, [sp, #4]
 8009798:	4b8e      	ldr	r3, [pc, #568]	; (80099d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3fc>)
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	6966      	ldr	r6, [r4, #20]
 800979e:	4a8a      	ldr	r2, [pc, #552]	; (80099c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3f0>)
 80097a0:	498d      	ldr	r1, [pc, #564]	; (80099d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x400>)
 80097a2:	4620      	mov	r0, r4
 80097a4:	2358      	movs	r3, #88	; 0x58
 80097a6:	47b0      	blx	r6
  TF_LITE_ENSURE_STATUS(CalculateOpData(
 80097a8:	e7bf      	b.n	800972a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x152>
  filter_dims.h = filter->dims->data[1];
 80097aa:	6898      	ldr	r0, [r3, #8]
 80097ac:	9015      	str	r0, [sp, #84]	; 0x54
  filter_dims.w = filter->dims->data[2];
 80097ae:	68d8      	ldr	r0, [r3, #12]
  filter_dims.c = input_dims.c;
 80097b0:	e9cd 0216 	strd	r0, r2, [sp, #88]	; 0x58
  output_dims.h = output->dims->data[1];
 80097b4:	688a      	ldr	r2, [r1, #8]
 80097b6:	9219      	str	r2, [sp, #100]	; 0x64
  output_dims.w = output->dims->data[2];
 80097b8:	68ca      	ldr	r2, [r1, #12]
 80097ba:	921a      	str	r2, [sp, #104]	; 0x68
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 80097bc:	9a26      	ldr	r2, [sp, #152]	; 0x98
  filter_dims.n = output_shape.Dims(3);
 80097be:	9214      	str	r2, [sp, #80]	; 0x50
 80097c0:	e792      	b.n	80096e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>
  RuntimeShape() : size_(0) {}
 80097c2:	971c      	str	r7, [sp, #112]	; 0x70
 80097c4:	2800      	cmp	r0, #0
 80097c6:	f000 80fa 	beq.w	80099be <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e6>
  const int dims_size = dims->size;
 80097ca:	f8db 8008 	ldr.w	r8, [fp, #8]
 80097ce:	f858 2b04 	ldr.w	r2, [r8], #4
    size_ = dimensions_count;
 80097d2:	9222      	str	r2, [sp, #136]	; 0x88
    if (dimensions_count > kMaxSmallSize) {
 80097d4:	2a05      	cmp	r2, #5
  if (tensor == nullptr) {
 80097d6:	46b9      	mov	r9, r7
 80097d8:	f77f af3d 	ble.w	8009656 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x7e>
      dims_pointer_ = new int32_t[dimensions_count];
 80097dc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80097e0:	429a      	cmp	r2, r3
 80097e2:	bfb5      	itete	lt
 80097e4:	0090      	lsllt	r0, r2, #2
 80097e6:	0092      	lslge	r2, r2, #2
 80097e8:	4602      	movlt	r2, r0
 80097ea:	f04f 30ff 	movge.w	r0, #4294967295
 80097ee:	920b      	str	r2, [sp, #44]	; 0x2c
 80097f0:	f007 fa10 	bl	8010c14 <_Znaj>
 80097f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097f6:	9023      	str	r0, [sp, #140]	; 0x8c
 80097f8:	e72f      	b.n	800965a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x82>
}

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 80097fa:	f8da 3010 	ldr.w	r3, [sl, #16]
 80097fe:	3a01      	subs	r2, #1
 8009800:	fb03 f202 	mul.w	r2, r3, r2
 8009804:	1c53      	adds	r3, r2, #1
 8009806:	930d      	str	r3, [sp, #52]	; 0x34
  auto padding = params->padding;
 8009808:	f89a 3000 	ldrb.w	r3, [sl]
      params->stride_height, params->stride_width,
 800980c:	f8da 2008 	ldr.w	r2, [sl, #8]
 8009810:	920c      	str	r2, [sp, #48]	; 0x30
  switch (padding) {
 8009812:	2b01      	cmp	r3, #1
 8009814:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009818:	920b      	str	r2, [sp, #44]	; 0x2c
      params->dilation_height_factor, params->dilation_width_factor, height,
 800981a:	f8da 2014 	ldr.w	r2, [sl, #20]
 800981e:	f000 808b 	beq.w	8009938 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x360>
 8009822:	2b02      	cmp	r3, #2
 8009824:	d17f      	bne.n	8009926 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x34e>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 8009826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8009828:	3901      	subs	r1, #1
 800982a:	fb02 f101 	mul.w	r1, r2, r1
 800982e:	3101      	adds	r1, #1
      return (image_size + stride - effective_filter_size) / stride;
 8009830:	eb0c 0203 	add.w	r2, ip, r3
 8009834:	1a52      	subs	r2, r2, r1
 8009836:	fb92 f2f3 	sdiv	r2, r2, r3
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800983a:	1e53      	subs	r3, r2, #1
      return (image_size + stride - effective_filter_size) / stride;
 800983c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800983e:	930e      	str	r3, [sp, #56]	; 0x38
      return (image_size + stride - effective_filter_size) / stride;
 8009840:	1883      	adds	r3, r0, r2
 8009842:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009844:	1a9b      	subs	r3, r3, r2
 8009846:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009848:	fb93 f3f2 	sdiv	r3, r3, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800984c:	3b01      	subs	r3, #1
 800984e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009852:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009854:	fb02 1303 	mla	r3, r2, r3, r1
 8009858:	930c      	str	r3, [sp, #48]	; 0x30
 800985a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800985c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800985e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009860:	fb02 3301 	mla	r3, r2, r1, r3
  int total_padding =
 8009864:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009866:	1a1b      	subs	r3, r3, r0
  total_padding = total_padding > 0 ? total_padding : 0;
 8009868:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  int total_padding =
 800986c:	eba2 020c 	sub.w	r2, r2, ip
  total_padding = total_padding > 0 ? total_padding : 0;
 8009870:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  return total_padding / 2;
 8009874:	1059      	asrs	r1, r3, #1
  *offset = total_padding % 2;
 8009876:	f003 0301 	and.w	r3, r3, #1
  data->padding = ComputePaddingHeightWidth(
 800987a:	60b3      	str	r3, [r6, #8]
  if (data_type != kTfLiteFloat32) {
 800987c:	f1be 0f01 	cmp.w	lr, #1
  return total_padding / 2;
 8009880:	ea4f 0362 	mov.w	r3, r2, asr #1
  *offset = total_padding % 2;
 8009884:	f002 0201 	and.w	r2, r2, #1
  data->padding = ComputePaddingHeightWidth(
 8009888:	6031      	str	r1, [r6, #0]
 800988a:	6073      	str	r3, [r6, #4]
 800988c:	60f2      	str	r2, [r6, #12]
  if (data_type != kTfLiteFloat32) {
 800988e:	f000 808d 	beq.w	80099ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3d4>
    const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8009892:	4629      	mov	r1, r5
 8009894:	2200      	movs	r2, #0
 8009896:	4620      	mov	r0, r4
 8009898:	f7fa fbde 	bl	8004058 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
    const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 800989c:	4629      	mov	r1, r5
    const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800989e:	ee08 0a10 	vmov	s16, r0
    const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 80098a2:	2201      	movs	r2, #1
 80098a4:	4620      	mov	r0, r4
 80098a6:	f7fa fbd7 	bl	8004058 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
        GetOptionalInputTensor(context, node, kBiasTensor);
 80098aa:	4629      	mov	r1, r5
    const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 80098ac:	900b      	str	r0, [sp, #44]	; 0x2c
        GetOptionalInputTensor(context, node, kBiasTensor);
 80098ae:	2202      	movs	r2, #2
 80098b0:	4620      	mov	r0, r4
 80098b2:	f7fa fc09 	bl	80040c8 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
    TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 80098b6:	4629      	mov	r1, r5
        GetOptionalInputTensor(context, node, kBiasTensor);
 80098b8:	900c      	str	r0, [sp, #48]	; 0x30
    TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 80098ba:	2200      	movs	r2, #0
 80098bc:	4620      	mov	r0, r4
 80098be:	f7fa fbe7 	bl	8004090 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
    int num_channels = filter->dims->data[kConvQuantizedDimension];
 80098c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 80098c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    int num_channels = filter->dims->data[kConvQuantizedDimension];
 80098c6:	6895      	ldr	r5, [r2, #8]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 80098c8:	686d      	ldr	r5, [r5, #4]
 80098ca:	9508      	str	r5, [sp, #32]
 80098cc:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 80098ce:	9507      	str	r5, [sp, #28]
 80098d0:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80098d2:	9000      	str	r0, [sp, #0]
 80098d4:	f106 0030 	add.w	r0, r6, #48	; 0x30
 80098d8:	9005      	str	r0, [sp, #20]
 80098da:	f106 002c 	add.w	r0, r6, #44	; 0x2c
 80098de:	9004      	str	r0, [sp, #16]
 80098e0:	f106 0020 	add.w	r0, r6, #32
 80098e4:	9003      	str	r0, [sp, #12]
 80098e6:	f106 001c 	add.w	r0, r6, #28
 80098ea:	9002      	str	r0, [sp, #8]
 80098ec:	f10a 000c 	add.w	r0, sl, #12
 80098f0:	9506      	str	r5, [sp, #24]
 80098f2:	9001      	str	r0, [sp, #4]
 80098f4:	ee18 1a10 	vmov	r1, s16
 80098f8:	4620      	mov	r0, r4
 80098fa:	f7fa fd0d 	bl	8004318 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
  TF_LITE_ENSURE_STATUS(CalculateOpData(
 80098fe:	4605      	mov	r5, r0
 8009900:	2800      	cmp	r0, #0
 8009902:	f47f af12 	bne.w	800972a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x152>
  data->filter_zero_point = filter->params.zero_point;
 8009906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  if (input->type == kTfLiteInt8) {
 8009908:	7839      	ldrb	r1, [r7, #0]
  data->filter_zero_point = filter->params.zero_point;
 800990a:	6918      	ldr	r0, [r3, #16]
  data->input_zero_point = input->params.zero_point;
 800990c:	693b      	ldr	r3, [r7, #16]
  data->output_zero_point = output->params.zero_point;
 800990e:	f8db 2010 	ldr.w	r2, [fp, #16]
 8009912:	61b2      	str	r2, [r6, #24]
  if (input->type == kTfLiteInt8) {
 8009914:	2909      	cmp	r1, #9
  data->input_zero_point = input->params.zero_point;
 8009916:	e9c6 3004 	strd	r3, r0, [r6, #16]
  if (input->type == kTfLiteInt8) {
 800991a:	d021      	beq.n	8009960 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x388>
    data->buffer_idx = -1;
 800991c:	f04f 33ff 	mov.w	r3, #4294967295
 8009920:	6373      	str	r3, [r6, #52]	; 0x34
  return kTfLiteOk;
 8009922:	2500      	movs	r5, #0
 8009924:	e701      	b.n	800972a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x152>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8009926:	3901      	subs	r1, #1
 8009928:	fb02 f101 	mul.w	r1, r2, r1
 800992c:	f04f 33ff 	mov.w	r3, #4294967295
 8009930:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8009934:	3101      	adds	r1, #1
  switch (padding) {
 8009936:	e78b      	b.n	8009850 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x278>
      return (image_size + stride - 1) / stride;
 8009938:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800993a:	3901      	subs	r1, #1
 800993c:	fb02 f101 	mul.w	r1, r2, r1
      return (image_size + stride - 1) / stride;
 8009940:	eb0c 0203 	add.w	r2, ip, r3
 8009944:	3a01      	subs	r2, #1
 8009946:	fb92 f2f3 	sdiv	r2, r2, r3
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800994a:	1e53      	subs	r3, r2, #1
      return (image_size + stride - 1) / stride;
 800994c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800994e:	930e      	str	r3, [sp, #56]	; 0x38
      return (image_size + stride - 1) / stride;
 8009950:	1883      	adds	r3, r0, r2
 8009952:	3b01      	subs	r3, #1
 8009954:	fb93 f3f2 	sdiv	r3, r3, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
 8009958:	3b01      	subs	r3, #1
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800995a:	3101      	adds	r1, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800995c:	930f      	str	r3, [sp, #60]	; 0x3c
      return (image_size + stride - 1) / stride;
 800995e:	e777      	b.n	8009850 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x278>
    conv_params.input_offset = -input->params.zero_point;
 8009960:	425b      	negs	r3, r3
 8009962:	9328      	str	r3, [sp, #160]	; 0xa0
    conv_params.stride.h = params->stride_height;
 8009964:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009968:	932b      	str	r3, [sp, #172]	; 0xac
    conv_params.stride.w = params->stride_width;
 800996a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800996e:	932a      	str	r3, [sp, #168]	; 0xa8
    conv_params.dilation.h = params->dilation_height_factor;
 8009970:	f8da 3014 	ldr.w	r3, [sl, #20]
 8009974:	932f      	str	r3, [sp, #188]	; 0xbc
    conv_params.dilation.w = params->dilation_width_factor;
 8009976:	f8da 3010 	ldr.w	r3, [sl, #16]
 800997a:	932e      	str	r3, [sp, #184]	; 0xb8
    conv_params.padding.h = data->padding.height;
 800997c:	6873      	ldr	r3, [r6, #4]
 800997e:	932d      	str	r3, [sp, #180]	; 0xb4
    conv_params.padding.w = data->padding.width;
 8009980:	6833      	ldr	r3, [r6, #0]
 8009982:	932c      	str	r3, [sp, #176]	; 0xb0
    conv_params.activation.min = data->output_activation_min;
 8009984:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8009986:	9330      	str	r3, [sp, #192]	; 0xc0
    conv_params.activation.max = data->output_activation_max;
 8009988:	6b33      	ldr	r3, [r6, #48]	; 0x30
    conv_params.output_offset = output->params.zero_point;
 800998a:	9229      	str	r2, [sp, #164]	; 0xa4
    conv_params.activation.max = data->output_activation_max;
 800998c:	9331      	str	r3, [sp, #196]	; 0xc4
    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 800998e:	a910      	add	r1, sp, #64	; 0x40
 8009990:	ab18      	add	r3, sp, #96	; 0x60
 8009992:	aa14      	add	r2, sp, #80	; 0x50
 8009994:	a828      	add	r0, sp, #160	; 0xa0
 8009996:	f004 fcbb 	bl	800e310 <arm_convolve_wrapper_s8_get_buffer_size>
  if (buf_size > 0) {
 800999a:	1e01      	subs	r1, r0, #0
 800999c:	ddbe      	ble.n	800991c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x344>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 800999e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099a0:	f106 0234 	add.w	r2, r6, #52	; 0x34
 80099a4:	4620      	mov	r0, r4
 80099a6:	4798      	blx	r3
 80099a8:	4605      	mov	r5, r0
 80099aa:	e6be      	b.n	800972a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x152>
  data->input_zero_point = input->params.zero_point;
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	6133      	str	r3, [r6, #16]
  data->filter_zero_point = filter->params.zero_point;
 80099b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099b2:	691a      	ldr	r2, [r3, #16]
  data->output_zero_point = output->params.zero_point;
 80099b4:	f8db 3010 	ldr.w	r3, [fp, #16]
 80099b8:	e9c6 2305 	strd	r2, r3, [r6, #20]
  if (input->type == kTfLiteInt8) {
 80099bc:	e7ae      	b.n	800991c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x344>
  TFLITE_DCHECK(node->user_data != nullptr);
 80099be:	f007 fbe1 	bl	8011184 <abort>
 80099c2:	bf00      	nop
 80099c4:	08017408 	.word	0x08017408
 80099c8:	080173cc 	.word	0x080173cc
 80099cc:	08015618 	.word	0x08015618
 80099d0:	080176f0 	.word	0x080176f0
 80099d4:	08016b3c 	.word	0x08016b3c
 80099d8:	08015678 	.word	0x08015678

080099dc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 80099dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e0:	b09d      	sub	sp, #116	; 0x74
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
 80099e2:	6944      	ldr	r4, [r0, #20]
 80099e4:	9402      	str	r4, [sp, #8]
  const int stride_width = params.stride_width;
 80099e6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80099ea:	9416      	str	r4, [sp, #88]	; 0x58
  const int stride_height = params.stride_height;
 80099ec:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 80099f0:	9417      	str	r4, [sp, #92]	; 0x5c
  const int dilation_width_factor = params.dilation_width_factor;
 80099f2:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 80099f6:	9404      	str	r4, [sp, #16]
    int8_t* output_data) {
 80099f8:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 80099fc:	f9b0 4010 	ldrsh.w	r4, [r0, #16]
  const int pad_width = params.padding_values.width;
  const int pad_height = params.padding_values.height;
  const int32_t output_offset = params.output_offset;

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
 8009a00:	6a82      	ldr	r2, [r0, #40]	; 0x28
  const int32_t output_activation_max = params.quantized_activation_max;
 8009a02:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  const int dilation_height_factor = params.dilation_height_factor;
 8009a04:	9408      	str	r4, [sp, #32]
  const int pad_width = params.padding_values.width;
 8009a06:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8009a0a:	9418      	str	r4, [sp, #96]	; 0x60

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8009a0c:	428a      	cmp	r2, r1
  const int pad_height = params.padding_values.height;
 8009a0e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
  const int32_t output_offset = params.output_offset;
 8009a12:	69c0      	ldr	r0, [r0, #28]
    int8_t* output_data) {
 8009a14:	9f27      	ldr	r7, [sp, #156]	; 0x9c
  const int32_t output_activation_min = params.quantized_activation_min;
 8009a16:	920c      	str	r2, [sp, #48]	; 0x30
    int8_t* output_data) {
 8009a18:	461d      	mov	r5, r3
  const int32_t output_activation_max = params.quantized_activation_max;
 8009a1a:	9112      	str	r1, [sp, #72]	; 0x48
    int8_t* output_data) {
 8009a1c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  const int pad_height = params.padding_values.height;
 8009a1e:	9419      	str	r4, [sp, #100]	; 0x64
  const int32_t output_offset = params.output_offset;
 8009a20:	9011      	str	r0, [sp, #68]	; 0x44
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8009a22:	f300 8193 	bgt.w	8009d4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8009a26:	682a      	ldr	r2, [r5, #0]
 8009a28:	2a04      	cmp	r2, #4
 8009a2a:	f040 818f 	bne.w	8009d4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8009a2e:	683a      	ldr	r2, [r7, #0]
 8009a30:	2a04      	cmp	r2, #4
 8009a32:	f040 818b 	bne.w	8009d4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8009a36:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8009a38:	6812      	ldr	r2, [r2, #0]
 8009a3a:	2a04      	cmp	r2, #4
 8009a3c:	f040 8186 	bne.w	8009d4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8009a40:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8009a42:	6869      	ldr	r1, [r5, #4]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8009a44:	6852      	ldr	r2, [r2, #4]
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8009a46:	9113      	str	r1, [sp, #76]	; 0x4c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8009a48:	428a      	cmp	r2, r1
 8009a4a:	f040 817f 	bne.w	8009d4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8009a4e:	692a      	ldr	r2, [r5, #16]
 8009a50:	9201      	str	r2, [sp, #4]
 8009a52:	4611      	mov	r1, r2
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8009a54:	693a      	ldr	r2, [r7, #16]
 8009a56:	428a      	cmp	r2, r1
 8009a58:	f040 8178 	bne.w	8009d4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
 8009a5c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8009a5e:	6879      	ldr	r1, [r7, #4]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8009a60:	6912      	ldr	r2, [r2, #16]
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8009a62:	910f      	str	r1, [sp, #60]	; 0x3c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8009a64:	428a      	cmp	r2, r1
 8009a66:	f040 8171 	bne.w	8009d4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (bias_data) {
 8009a6a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8009a6c:	b192      	cbz	r2, 8009a94 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xb8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8009a6e:	6818      	ldr	r0, [r3, #0]
 8009a70:	2805      	cmp	r0, #5
 8009a72:	f340 8164 	ble.w	8009d3e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x362>
 8009a76:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
 8009a78:	3b04      	subs	r3, #4
    int8_t* output_data) {
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	2201      	movs	r2, #1
      buffer_size *= dims_data[i];
 8009a7e:	f853 4f04 	ldr.w	r4, [r3, #4]!
    for (int i = 0; i < size_; i++) {
 8009a82:	3101      	adds	r1, #1
 8009a84:	4281      	cmp	r1, r0
      buffer_size *= dims_data[i];
 8009a86:	fb04 f202 	mul.w	r2, r4, r2
    for (int i = 0; i < size_; i++) {
 8009a8a:	dbf8      	blt.n	8009a7e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa2>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8009a8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	f040 815c 	bne.w	8009d4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8009a94:	68ab      	ldr	r3, [r5, #8]
 8009a96:	9306      	str	r3, [sp, #24]
 8009a98:	68eb      	ldr	r3, [r5, #12]
 8009a9a:	9305      	str	r3, [sp, #20]
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	9307      	str	r3, [sp, #28]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	9303      	str	r3, [sp, #12]
 8009aa4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	9315      	str	r3, [sp, #84]	; 0x54
 8009aaa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	9314      	str	r3, [sp, #80]	; 0x50
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  for (int batch = 0; batch < batches; ++batch) {
 8009ab0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	f340 8115 	ble.w	8009ce2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x306>
 8009ab8:	2600      	movs	r6, #0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 8009aba:	46b6      	mov	lr, r6
 8009abc:	46ac      	mov	ip, r5
 8009abe:	46b8      	mov	r8, r7
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8009ac0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f340 8107 	ble.w	8009cd6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2fa>
 8009ac8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009aca:	425b      	negs	r3, r3
 8009acc:	9310      	str	r3, [sp, #64]	; 0x40
 8009ace:	2300      	movs	r3, #0
 8009ad0:	930d      	str	r3, [sp, #52]	; 0x34
 8009ad2:	4663      	mov	r3, ip
 8009ad4:	46f4      	mov	ip, lr
 8009ad6:	469e      	mov	lr, r3
      const int in_y_origin = (out_y * stride_height) - pad_height;
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8009ad8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	f340 80ed 	ble.w	8009cba <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2de>
 8009ae0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009ae2:	425b      	negs	r3, r3
 8009ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	930e      	str	r3, [sp, #56]	; 0x38
        const int in_x_origin = (out_x * stride_width) - pad_width;
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8009aea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f340 80d9 	ble.w	8009ca4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c8>
 8009af2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009af4:	3b04      	subs	r3, #4
 8009af6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009af8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009afa:	3b04      	subs	r3, #4
 8009afc:	930a      	str	r3, [sp, #40]	; 0x28
 8009afe:	2700      	movs	r7, #0
          int32_t acc = 0;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8009b00:	9b07      	ldr	r3, [sp, #28]
 8009b02:	2b00      	cmp	r3, #0
          int32_t acc = 0;
 8009b04:	f04f 0600 	mov.w	r6, #0
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8009b08:	dd71      	ble.n	8009bee <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x212>
 8009b0a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009b0c:	4634      	mov	r4, r6
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8009b0e:	9b03      	ldr	r3, [sp, #12]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	dd66      	ble.n	8009be2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x206>
 8009b14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b16:	2100      	movs	r1, #0
 8009b18:	e005      	b.n	8009b26 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x14a>
 8009b1a:	9b04      	ldr	r3, [sp, #16]
 8009b1c:	441a      	add	r2, r3
 8009b1e:	9b03      	ldr	r3, [sp, #12]
 8009b20:	3101      	adds	r1, #1
 8009b22:	4299      	cmp	r1, r3
 8009b24:	d05d      	beq.n	8009be2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x206>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8009b26:	ea52 0300 	orrs.w	r3, r2, r0
 8009b2a:	d4f6      	bmi.n	8009b1a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13e>
 8009b2c:	9b05      	ldr	r3, [sp, #20]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	daf3      	bge.n	8009b1a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13e>
 8009b32:	9b06      	ldr	r3, [sp, #24]
 8009b34:	4298      	cmp	r0, r3
 8009b36:	daf0      	bge.n	8009b1a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13e>

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8009b38:	9b01      	ldr	r3, [sp, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	dded      	ble.n	8009b1a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13e>
  inline int32_t DimensionsCount() const { return size_; }
 8009b3e:	f8de 5000 	ldr.w	r5, [lr]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 8009b42:	2d04      	cmp	r5, #4
  inline int32_t DimensionsCount() const { return size_; }
 8009b44:	f04f 0300 	mov.w	r3, #0
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 8009b48:	f040 8100 	bne.w	8009d4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
 8009b4c:	9600      	str	r6, [sp, #0]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 8009b4e:	f8de 5004 	ldr.w	r5, [lr, #4]
 8009b52:	4565      	cmp	r5, ip
 8009b54:	f340 80fa 	ble.w	8009d4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8009b58:	f8de 5008 	ldr.w	r5, [lr, #8]
 8009b5c:	42a8      	cmp	r0, r5
 8009b5e:	f280 80f5 	bge.w	8009d4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8009b62:	f8de a00c 	ldr.w	sl, [lr, #12]
 8009b66:	4552      	cmp	r2, sl
 8009b68:	f280 80f0 	bge.w	8009d4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8009b6c:	f8de 9010 	ldr.w	r9, [lr, #16]
 8009b70:	4599      	cmp	r9, r3
 8009b72:	f340 80eb 	ble.w	8009d4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
                                                      in_x, in_channel)];
 8009b76:	9e26      	ldr	r6, [sp, #152]	; 0x98
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 8009b78:	fb0c 0505 	mla	r5, ip, r5, r0
 8009b7c:	fb0a 2505 	mla	r5, sl, r5, r2
 8009b80:	fb09 6505 	mla	r5, r9, r5, r6
 8009b84:	f915 9003 	ldrsb.w	r9, [r5, r3]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 8009b88:	f8d8 5000 	ldr.w	r5, [r8]
 8009b8c:	2d04      	cmp	r5, #4
 8009b8e:	f040 80dd 	bne.w	8009d4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 8009b92:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009b96:	42bd      	cmp	r5, r7
 8009b98:	f340 80d8 	ble.w	8009d4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8009b9c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8009ba0:	42a5      	cmp	r5, r4
 8009ba2:	f340 80d3 	ble.w	8009d4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8009ba6:	f8d8 b00c 	ldr.w	fp, [r8, #12]
 8009baa:	458b      	cmp	fp, r1
 8009bac:	f340 80ce 	ble.w	8009d4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8009bb0:	f8d8 a010 	ldr.w	sl, [r8, #16]
 8009bb4:	459a      	cmp	sl, r3
 8009bb6:	f340 80c9 	ble.w	8009d4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
                int32_t filter_val = filter_data[Offset(
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 8009bba:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 8009bbc:	fb07 4505 	mla	r5, r7, r5, r4
 8009bc0:	fb0b 1505 	mla	r5, fp, r5, r1
 8009bc4:	fb0a 6505 	mla	r5, sl, r5, r6
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(jianlijianli): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
 8009bc8:	9e02      	ldr	r6, [sp, #8]
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 8009bca:	56ed      	ldrsb	r5, [r5, r3]
                acc += filter_val * (input_val + input_offset);
 8009bcc:	44b1      	add	r9, r6
 8009bce:	9e00      	ldr	r6, [sp, #0]
 8009bd0:	fb09 6505 	mla	r5, r9, r5, r6
 8009bd4:	9500      	str	r5, [sp, #0]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8009bd6:	9d01      	ldr	r5, [sp, #4]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	42ab      	cmp	r3, r5
 8009bdc:	d1b7      	bne.n	8009b4e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x172>
 8009bde:	9e00      	ldr	r6, [sp, #0]
 8009be0:	e79b      	b.n	8009b1a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13e>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8009be2:	9b08      	ldr	r3, [sp, #32]
 8009be4:	4418      	add	r0, r3
 8009be6:	9b07      	ldr	r3, [sp, #28]
 8009be8:	3401      	adds	r4, #1
 8009bea:	429c      	cmp	r4, r3
 8009bec:	d18f      	bne.n	8009b0e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x132>
              }
            }
          }

          if (bias_data) {
 8009bee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009bf0:	b113      	cbz	r3, 8009bf8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21c>
            acc += bias_data[out_channel];
 8009bf2:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8009bf6:	441e      	add	r6, r3
          }
          acc = MultiplyByQuantizedMultiplier(
 8009bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bfa:	f853 5f04 	ldr.w	r5, [r3, #4]!
 8009bfe:	930a      	str	r3, [sp, #40]	; 0x28
 8009c00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  int left_shift = shift > 0 ? shift : 0;
 8009c02:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
 8009c06:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8009c0a:	930b      	str	r3, [sp, #44]	; 0x2c
  int right_shift = shift > 0 ? 0 : -shift;
 8009c0c:	2d00      	cmp	r5, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8009c0e:	fa06 f302 	lsl.w	r3, r6, r2
  int right_shift = shift > 0 ? 0 : -shift;
 8009c12:	bfd4      	ite	le
 8009c14:	426d      	negle	r5, r5
 8009c16:	2500      	movgt	r5, #0
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8009c18:	4299      	cmp	r1, r3
 8009c1a:	d067      	beq.n	8009cec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x310>
  std::int64_t ab_64 = a_64 * b_64;
 8009c1c:	fb83 3001 	smull	r3, r0, r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8009c20:	2800      	cmp	r0, #0
 8009c22:	db7b      	blt.n	8009d1c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x340>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8009c24:	f113 4380 	adds.w	r3, r3, #1073741824	; 0x40000000
 8009c28:	f140 0200 	adc.w	r2, r0, #0
 8009c2c:	0fdb      	lsrs	r3, r3, #31
 8009c2e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  assert(exponent <= 31);
 8009c32:	2d1f      	cmp	r5, #31
 8009c34:	dc6b      	bgt.n	8009d0e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x332>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 8009c36:	2201      	movs	r2, #1
 8009c38:	40aa      	lsls	r2, r5
 8009c3a:	3a01      	subs	r2, #1
  return a >> offset;
 8009c3c:	1050      	asrs	r0, r2, #1
 8009c3e:	fa43 f105 	asr.w	r1, r3, r5
  return a & b;
 8009c42:	401a      	ands	r2, r3
  return a + b;
 8009c44:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          acc += output_offset;
 8009c48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c4a:	4282      	cmp	r2, r0
 8009c4c:	bfc8      	it	gt
 8009c4e:	3101      	addgt	r1, #1
 8009c50:	4419      	add	r1, r3
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8009c52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c54:	428b      	cmp	r3, r1
 8009c56:	dc47      	bgt.n	8009ce8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x30c>
    min(const _Tp& __a, const _Tp& __b)
 8009c58:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009c5a:	4288      	cmp	r0, r1
 8009c5c:	bfa8      	it	ge
 8009c5e:	4608      	movge	r0, r1
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 8009c60:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b04      	cmp	r3, #4
 8009c66:	d171      	bne.n	8009d4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 8009c68:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	4563      	cmp	r3, ip
 8009c6e:	dd6d      	ble.n	8009d4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8009c70:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8009c72:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	42a3      	cmp	r3, r4
 8009c78:	dd68      	ble.n	8009d4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8009c7a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8009c7c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009c7e:	68d1      	ldr	r1, [r2, #12]
 8009c80:	42a9      	cmp	r1, r5
 8009c82:	dd63      	ble.n	8009d4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8009c84:	6912      	ldr	r2, [r2, #16]
 8009c86:	42ba      	cmp	r2, r7
 8009c88:	dd60      	ble.n	8009d4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 8009c8a:	fb0c 4303 	mla	r3, ip, r3, r4
 8009c8e:	fb01 5303 	mla	r3, r1, r3, r5
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8009c92:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8009c94:	fb02 1303 	mla	r3, r2, r3, r1
 8009c98:	55d8      	strb	r0, [r3, r7]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8009c9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c9c:	3701      	adds	r7, #1
 8009c9e:	429f      	cmp	r7, r3
 8009ca0:	f47f af2e 	bne.w	8009b00 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x124>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8009ca4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ca6:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009ca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009caa:	440a      	add	r2, r1
 8009cac:	9209      	str	r2, [sp, #36]	; 0x24
 8009cae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	930e      	str	r3, [sp, #56]	; 0x38
 8009cb6:	f47f af18 	bne.w	8009aea <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8009cba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009cbc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8009cbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cc0:	440a      	add	r2, r1
 8009cc2:	9210      	str	r2, [sp, #64]	; 0x40
 8009cc4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	930d      	str	r3, [sp, #52]	; 0x34
 8009ccc:	f47f af04 	bne.w	8009ad8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xfc>
 8009cd0:	4673      	mov	r3, lr
 8009cd2:	46e6      	mov	lr, ip
 8009cd4:	469c      	mov	ip, r3
  for (int batch = 0; batch < batches; ++batch) {
 8009cd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009cd8:	f10e 0e01 	add.w	lr, lr, #1
 8009cdc:	459e      	cmp	lr, r3
 8009cde:	f47f aeef 	bne.w	8009ac0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
 8009ce2:	b01d      	add	sp, #116	; 0x74
 8009ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	e7b9      	b.n	8009c60 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x284>
  std::int64_t ab_64 = a_64 * b_64;
 8009cec:	fb81 3001 	smull	r3, r0, r1, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	4a17      	ldr	r2, [pc, #92]	; (8009d50 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x374>)
 8009cf4:	bfa6      	itte	ge
 8009cf6:	2400      	movge	r4, #0
 8009cf8:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
 8009cfc:	f04f 34ff 	movlt.w	r4, #4294967295
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8009d00:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8009d04:	d10d      	bne.n	8009d22 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x346>
  assert(exponent <= 31);
 8009d06:	2d1f      	cmp	r5, #31
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8009d08:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  assert(exponent <= 31);
 8009d0c:	dd93      	ble.n	8009c36 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x25a>
 8009d0e:	4b11      	ldr	r3, [pc, #68]	; (8009d54 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x378>)
 8009d10:	4a11      	ldr	r2, [pc, #68]	; (8009d58 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x37c>)
 8009d12:	4812      	ldr	r0, [pc, #72]	; (8009d5c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x380>)
 8009d14:	f240 1167 	movw	r1, #359	; 0x167
 8009d18:	f007 fa3c 	bl	8011194 <__assert_func>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8009d1c:	4a0c      	ldr	r2, [pc, #48]	; (8009d50 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x374>)
 8009d1e:	f04f 34ff 	mov.w	r4, #4294967295
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8009d22:	189a      	adds	r2, r3, r2
 8009d24:	eb40 0304 	adc.w	r3, r0, r4
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	da04      	bge.n	8009d36 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x35a>
 8009d2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d30:	1852      	adds	r2, r2, r1
 8009d32:	f143 0300 	adc.w	r3, r3, #0
 8009d36:	0fd2      	lsrs	r2, r2, #31
 8009d38:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 8009d3c:	e779      	b.n	8009c32 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x256>
    for (int i = 0; i < size_; i++) {
 8009d3e:	2800      	cmp	r0, #0
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8009d40:	f103 0304 	add.w	r3, r3, #4
    for (int i = 0; i < size_; i++) {
 8009d44:	f73f ae98 	bgt.w	8009a78 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x9c>
    int buffer_size = 1;
 8009d48:	2201      	movs	r2, #1
 8009d4a:	e69f      	b.n	8009a8c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xb0>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8009d4c:	f007 fa1a 	bl	8011184 <abort>
 8009d50:	c0000001 	.word	0xc0000001
 8009d54:	08016a84 	.word	0x08016a84
 8009d58:	08016a94 	.word	0x08016a94
 8009d5c:	08016af0 	.word	0x08016af0

08009d60 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0>:
                      tflite::micro::GetTensorShape(im2col),
                      tflite::micro::GetTensorData<uint8_t>(im2col), nullptr);
  return kTfLiteOk;
}

TfLiteStatus EvalQuantizedPerChannel(
 8009d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d64:	461c      	mov	r4, r3
    TfLiteContext* context, TfLiteNode* node, TfLiteConvParams* params,
    const OpData& data, const TfLiteEvalTensor* input,
    const TfLiteEvalTensor* filter, const TfLiteEvalTensor* bias,
    TfLiteEvalTensor* output, TfLiteEvalTensor* im2col) {
  cmsis_nn_conv_params conv_params;
  conv_params.dilation.h = params->dilation_height_factor;
 8009d66:	694b      	ldr	r3, [r1, #20]
  conv_params.dilation.w = params->dilation_width_factor;
 8009d68:	690e      	ldr	r6, [r1, #16]
TfLiteStatus EvalQuantizedPerChannel(
 8009d6a:	b0e1      	sub	sp, #388	; 0x184
  // TODO(#43557) Remove checks for dilation and call to reference
  // implementation when dilation is supported in the optimized implementation
  // by CMSIS-NN.
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
 8009d6c:	2b01      	cmp	r3, #1
TfLiteStatus EvalQuantizedPerChannel(
 8009d6e:	e9dd 756b 	ldrd	r7, r5, [sp, #428]	; 0x1ac
 8009d72:	f8dd 81a8 	ldr.w	r8, [sp, #424]	; 0x1a8
  conv_params.dilation.h = params->dilation_height_factor;
 8009d76:	934f      	str	r3, [sp, #316]	; 0x13c
  conv_params.dilation.w = params->dilation_width_factor;
 8009d78:	964e      	str	r6, [sp, #312]	; 0x138
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
 8009d7a:	d101      	bne.n	8009d80 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x20>
 8009d7c:	2e01      	cmp	r6, #1
 8009d7e:	d06e      	beq.n	8009e5e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0xfe>
    ConvParams op_params;
    op_params.input_offset = -data.input_zero_point;
    op_params.output_offset = data.output_zero_point;
    op_params.stride_height = params->stride_height;
    op_params.stride_width = params->stride_width;
    op_params.dilation_height_factor = params->dilation_height_factor;
 8009d80:	f8ad 3158 	strh.w	r3, [sp, #344]	; 0x158
    op_params.input_offset = -data.input_zero_point;
 8009d84:	6913      	ldr	r3, [r2, #16]
    op_params.dilation_width_factor = params->dilation_width_factor;
 8009d86:	f8ad 6156 	strh.w	r6, [sp, #342]	; 0x156
    op_params.input_offset = -data.input_zero_point;
 8009d8a:	425b      	negs	r3, r3
 8009d8c:	9357      	str	r3, [sp, #348]	; 0x15c
    op_params.output_offset = data.output_zero_point;
 8009d8e:	6993      	ldr	r3, [r2, #24]
 8009d90:	9359      	str	r3, [sp, #356]	; 0x164
    op_params.stride_height = params->stride_height;
 8009d92:	688b      	ldr	r3, [r1, #8]
 8009d94:	f8ad 3154 	strh.w	r3, [sp, #340]	; 0x154
    op_params.stride_width = params->stride_width;
 8009d98:	684b      	ldr	r3, [r1, #4]
 8009d9a:	f8ad 3152 	strh.w	r3, [sp, #338]	; 0x152
    op_params.padding_values.height = data.padding.height;
 8009d9e:	6853      	ldr	r3, [r2, #4]
 8009da0:	f8ad 314c 	strh.w	r3, [sp, #332]	; 0x14c
    op_params.padding_values.width = data.padding.width;
 8009da4:	6813      	ldr	r3, [r2, #0]
 8009da6:	f8ad 314a 	strh.w	r3, [sp, #330]	; 0x14a
    op_params.quantized_activation_min = data.output_activation_min;
 8009daa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009dac:	935d      	str	r3, [sp, #372]	; 0x174
    op_params.quantized_activation_max = data.output_activation_max;

    reference_integer_ops::ConvPerChannel(
        op_params, data.per_channel_output_multiplier,
        data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
 8009dae:	4621      	mov	r1, r4
    op_params.quantized_activation_min = data.output_activation_min;
 8009db0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009db2:	935c      	str	r3, [sp, #368]	; 0x170
        data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
 8009db4:	a842      	add	r0, sp, #264	; 0x108
 8009db6:	e9d2 9a09 	ldrd	r9, sl, [r2, #36]	; 0x24
 8009dba:	f7fc fe71 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8009dbe:	2c00      	cmp	r4, #0
 8009dc0:	f000 8115 	beq.w	8009fee <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x28e>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8009dc4:	f8d4 b000 	ldr.w	fp, [r4]
        tflite::micro::GetTensorData<int8_t>(input),
        tflite::micro::GetTensorShape(filter),
 8009dc8:	ac3c      	add	r4, sp, #240	; 0xf0
 8009dca:	4641      	mov	r1, r8
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f7fc fe67 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8009dd2:	f1b8 0f00 	cmp.w	r8, #0
 8009dd6:	f000 810a 	beq.w	8009fee <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x28e>
        tflite::micro::GetTensorData<int8_t>(filter),
        tflite::micro::GetTensorShape(bias),
 8009dda:	ae36      	add	r6, sp, #216	; 0xd8
 8009ddc:	4639      	mov	r1, r7
 8009dde:	4630      	mov	r0, r6
  return reinterpret_cast<const T*>(tensor->data.raw);
 8009de0:	f8d8 8000 	ldr.w	r8, [r8]
 8009de4:	f7fc fe5c 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8009de8:	2f00      	cmp	r7, #0
 8009dea:	f000 8100 	beq.w	8009fee <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x28e>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	9309      	str	r3, [sp, #36]	; 0x24
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
 8009df2:	af30      	add	r7, sp, #192	; 0xc0
 8009df4:	4629      	mov	r1, r5
 8009df6:	4638      	mov	r0, r7
 8009df8:	f7fc fe52 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8009dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dfe:	b105      	cbz	r5, 8009e02 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0xa2>
 8009e00:	682d      	ldr	r5, [r5, #0]
    reference_integer_ops::ConvPerChannel(
 8009e02:	f8cd b000 	str.w	fp, [sp]
 8009e06:	e9cd 6303 	strd	r6, r3, [sp, #12]
 8009e0a:	e9cd 7505 	strd	r7, r5, [sp, #20]
 8009e0e:	ab42      	add	r3, sp, #264	; 0x108
 8009e10:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8009e14:	4652      	mov	r2, sl
 8009e16:	4649      	mov	r1, r9
 8009e18:	a852      	add	r0, sp, #328	; 0x148
 8009e1a:	f7ff fddf 	bl	80099dc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
    if (size_ > kMaxSmallSize) {
 8009e1e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8009e20:	2b05      	cmp	r3, #5
 8009e22:	dd03      	ble.n	8009e2c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0xcc>
      delete[] dims_pointer_;
 8009e24:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8009e26:	b108      	cbz	r0, 8009e2c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0xcc>
 8009e28:	f006 fed2 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 8009e2c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8009e2e:	2b05      	cmp	r3, #5
 8009e30:	dd03      	ble.n	8009e3a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0xda>
      delete[] dims_pointer_;
 8009e32:	9837      	ldr	r0, [sp, #220]	; 0xdc
 8009e34:	b108      	cbz	r0, 8009e3a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0xda>
 8009e36:	f006 fecb 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 8009e3a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8009e3c:	2b05      	cmp	r3, #5
 8009e3e:	dd03      	ble.n	8009e48 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0xe8>
      delete[] dims_pointer_;
 8009e40:	983d      	ldr	r0, [sp, #244]	; 0xf4
 8009e42:	b108      	cbz	r0, 8009e48 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0xe8>
 8009e44:	f006 fec4 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 8009e48:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8009e4a:	2b05      	cmp	r3, #5
 8009e4c:	dd03      	ble.n	8009e56 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0xf6>
      delete[] dims_pointer_;
 8009e4e:	9843      	ldr	r0, [sp, #268]	; 0x10c
 8009e50:	b108      	cbz	r0, 8009e56 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0xf6>
 8009e52:	f006 febd 	bl	8010bd0 <_ZdaPv>
        tflite::micro::GetTensorData<int8_t>(output));
  }
  return kTfLiteOk;
}
 8009e56:	2000      	movs	r0, #0
 8009e58:	b061      	add	sp, #388	; 0x184
 8009e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    conv_params.input_offset = -data.input_zero_point;
 8009e5e:	6913      	ldr	r3, [r2, #16]
 8009e60:	425b      	negs	r3, r3
 8009e62:	9348      	str	r3, [sp, #288]	; 0x120
    conv_params.output_offset = data.output_zero_point;
 8009e64:	6993      	ldr	r3, [r2, #24]
 8009e66:	9349      	str	r3, [sp, #292]	; 0x124
    conv_params.stride.h = params->stride_height;
 8009e68:	688b      	ldr	r3, [r1, #8]
 8009e6a:	934b      	str	r3, [sp, #300]	; 0x12c
    conv_params.stride.w = params->stride_width;
 8009e6c:	684b      	ldr	r3, [r1, #4]
 8009e6e:	934a      	str	r3, [sp, #296]	; 0x128
    conv_params.padding.h = data.padding.height;
 8009e70:	6853      	ldr	r3, [r2, #4]
 8009e72:	934d      	str	r3, [sp, #308]	; 0x134
    conv_params.padding.w = data.padding.width;
 8009e74:	6813      	ldr	r3, [r2, #0]
 8009e76:	934c      	str	r3, [sp, #304]	; 0x130
    conv_params.activation.min = data.output_activation_min;
 8009e78:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009e7a:	9351      	str	r3, [sp, #324]	; 0x144
 8009e7c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009e7e:	9350      	str	r3, [sp, #320]	; 0x140
        const_cast<int32_t*>(data.per_channel_output_multiplier);
 8009e80:	6a93      	ldr	r3, [r2, #40]	; 0x28
    quant_params.multiplier =
 8009e82:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e84:	6a53      	ldr	r3, [r2, #36]	; 0x24
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8009e86:	4641      	mov	r1, r8
 8009e88:	4681      	mov	r9, r0
 8009e8a:	a81e      	add	r0, sp, #120	; 0x78
    quant_params.multiplier =
 8009e8c:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8009e90:	f7fc fe06 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8009e94:	4621      	mov	r1, r4
 8009e96:	a824      	add	r0, sp, #144	; 0x90
 8009e98:	f7fc fe02 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8009e9c:	4629      	mov	r1, r5
 8009e9e:	a82a      	add	r0, sp, #168	; 0xa8
 8009ea0:	f7fc fdfe 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 8009ea4:	4639      	mov	r1, r7
 8009ea6:	a830      	add	r0, sp, #192	; 0xc0
 8009ea8:	f7fc fdfa 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
 8009eac:	e9dd 1350 	ldrd	r1, r3, [sp, #320]	; 0x140
 8009eb0:	4299      	cmp	r1, r3
 8009eb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009eb4:	f300 809b 	bgt.w	8009fee <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x28e>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8009eb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009eba:	2b04      	cmp	r3, #4
 8009ebc:	f040 8097 	bne.w	8009fee <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x28e>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8009ec0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009ec2:	2b04      	cmp	r3, #4
 8009ec4:	f040 8093 	bne.w	8009fee <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x28e>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8009ec8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009eca:	2b04      	cmp	r3, #4
 8009ecc:	f040 808f 	bne.w	8009fee <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x28e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8009ed0:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8009ed4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8009ed6:	4563      	cmp	r3, ip
 8009ed8:	f040 8089 	bne.w	8009fee <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x28e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8009edc:	9828      	ldr	r0, [sp, #160]	; 0xa0
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8009ede:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ee0:	4283      	cmp	r3, r0
 8009ee2:	f040 8084 	bne.w	8009fee <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x28e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8009ee6:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8009eea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009eec:	4573      	cmp	r3, lr
 8009eee:	d17e      	bne.n	8009fee <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x28e>
  TFLITE_DCHECK(tensor != nullptr);
 8009ef0:	2f00      	cmp	r7, #0
 8009ef2:	d07c      	beq.n	8009fee <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x28e>
    if (tflite::micro::GetTensorData<int8_t>(bias)) {
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	b19b      	cbz	r3, 8009f20 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x1c0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8009ef8:	f8dd a0c0 	ldr.w	sl, [sp, #192]	; 0xc0
 8009efc:	f1ba 0f05 	cmp.w	sl, #5
 8009f00:	dc73      	bgt.n	8009fea <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x28a>
    for (int i = 0; i < size_; i++) {
 8009f02:	f1ba 0f00 	cmp.w	sl, #0
 8009f06:	dd09      	ble.n	8009f1c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x1bc>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8009f08:	a931      	add	r1, sp, #196	; 0xc4
 8009f0a:	3904      	subs	r1, #4
 8009f0c:	2300      	movs	r3, #0
      buffer_size *= dims_data[i];
 8009f0e:	f851 bf04 	ldr.w	fp, [r1, #4]!
    for (int i = 0; i < size_; i++) {
 8009f12:	3301      	adds	r3, #1
 8009f14:	459a      	cmp	sl, r3
      buffer_size *= dims_data[i];
 8009f16:	fb0b f606 	mul.w	r6, fp, r6
    for (int i = 0; i < size_; i++) {
 8009f1a:	dcf8      	bgt.n	8009f0e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x1ae>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8009f1c:	45b6      	cmp	lr, r6
 8009f1e:	d166      	bne.n	8009fee <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x28e>
    bias_dims.n = 1;
 8009f20:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
 8009f24:	2301      	movs	r3, #1
    bias_dims.h = 1;
 8009f26:	e9ca 3300 	strd	r3, r3, [sl]
    bias_dims.w = 1;
 8009f2a:	f8ca 3008 	str.w	r3, [sl, #8]
    ctx.buf = nullptr;
 8009f2e:	2300      	movs	r3, #0
    ctx.size = 0;
 8009f30:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    input_dims.h = input_shape.Dims(1);
 8009f34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f36:	930f      	str	r3, [sp, #60]	; 0x3c
    input_dims.w = input_shape.Dims(2);
 8009f38:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009f3a:	9310      	str	r3, [sp, #64]	; 0x40
    filter_dims.h = filter_shape.Dims(1);
 8009f3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    if (data.buffer_idx > -1) {
 8009f3e:	6b51      	ldr	r1, [r2, #52]	; 0x34
    filter_dims.h = filter_shape.Dims(1);
 8009f40:	9313      	str	r3, [sp, #76]	; 0x4c
    filter_dims.w = filter_shape.Dims(2);
 8009f42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f44:	9314      	str	r3, [sp, #80]	; 0x50
    output_dims.h = output_shape.Dims(1);
 8009f46:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8009f48:	931b      	str	r3, [sp, #108]	; 0x6c
    if (data.buffer_idx > -1) {
 8009f4a:	2900      	cmp	r1, #0
    output_dims.w = output_shape.Dims(2);
 8009f4c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    input_dims.n = batch_size;
 8009f4e:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    filter_dims.n = output_depth;
 8009f52:	ae12      	add	r6, sp, #72	; 0x48
    output_dims.n = batch_size;
 8009f54:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
    input_dims.c = input_depth;
 8009f58:	9011      	str	r0, [sp, #68]	; 0x44
    filter_dims.c = input_depth;
 8009f5a:	60f0      	str	r0, [r6, #12]
    filter_dims.n = output_depth;
 8009f5c:	f8c6 e000 	str.w	lr, [r6]
    bias_dims.c = output_depth;
 8009f60:	f8ca e00c 	str.w	lr, [sl, #12]
    output_dims.n = batch_size;
 8009f64:	f8cb c000 	str.w	ip, [fp]
    output_dims.c = output_depth;
 8009f68:	f8cb e00c 	str.w	lr, [fp, #12]
    output_dims.w = output_shape.Dims(2);
 8009f6c:	f8cb 3008 	str.w	r3, [fp, #8]
    if (data.buffer_idx > -1) {
 8009f70:	db04      	blt.n	8009f7c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x21c>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8009f72:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 8009f76:	4648      	mov	r0, r9
 8009f78:	4798      	blx	r3
 8009f7a:	900c      	str	r0, [sp, #48]	; 0x30
 8009f7c:	2c00      	cmp	r4, #0
 8009f7e:	d036      	beq.n	8009fee <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x28e>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8009f80:	6823      	ldr	r3, [r4, #0]
  TFLITE_DCHECK(tensor != nullptr);
 8009f82:	f1b8 0f00 	cmp.w	r8, #0
 8009f86:	d032      	beq.n	8009fee <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x28e>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8009f88:	f8d8 2000 	ldr.w	r2, [r8]
 8009f8c:	6839      	ldr	r1, [r7, #0]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8009f8e:	b105      	cbz	r5, 8009f92 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x232>
 8009f90:	682d      	ldr	r5, [r5, #0]
    TFLITE_DCHECK_EQ(
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	e9cd a103 	strd	sl, r1, [sp, #12]
 8009f98:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8009f9c:	e9cd b505 	strd	fp, r5, [sp, #20]
 8009fa0:	ab0e      	add	r3, sp, #56	; 0x38
 8009fa2:	aa0a      	add	r2, sp, #40	; 0x28
 8009fa4:	a948      	add	r1, sp, #288	; 0x120
 8009fa6:	a80c      	add	r0, sp, #48	; 0x30
 8009fa8:	f004 f958 	bl	800e25c <arm_convolve_wrapper_s8>
 8009fac:	b9f8      	cbnz	r0, 8009fee <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x28e>
    if (size_ > kMaxSmallSize) {
 8009fae:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8009fb0:	2b05      	cmp	r3, #5
 8009fb2:	dd03      	ble.n	8009fbc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x25c>
      delete[] dims_pointer_;
 8009fb4:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8009fb6:	b108      	cbz	r0, 8009fbc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x25c>
 8009fb8:	f006 fe0a 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 8009fbc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009fbe:	2b05      	cmp	r3, #5
 8009fc0:	dd03      	ble.n	8009fca <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x26a>
      delete[] dims_pointer_;
 8009fc2:	982b      	ldr	r0, [sp, #172]	; 0xac
 8009fc4:	b108      	cbz	r0, 8009fca <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x26a>
 8009fc6:	f006 fe03 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 8009fca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009fcc:	2b05      	cmp	r3, #5
 8009fce:	dd03      	ble.n	8009fd8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x278>
      delete[] dims_pointer_;
 8009fd0:	9825      	ldr	r0, [sp, #148]	; 0x94
 8009fd2:	b108      	cbz	r0, 8009fd8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x278>
 8009fd4:	f006 fdfc 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 8009fd8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009fda:	2b05      	cmp	r3, #5
 8009fdc:	f77f af3b 	ble.w	8009e56 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0xf6>
      delete[] dims_pointer_;
 8009fe0:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8009fe2:	2800      	cmp	r0, #0
 8009fe4:	f47f af35 	bne.w	8009e52 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0xf2>
 8009fe8:	e735      	b.n	8009e56 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0xf6>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8009fea:	9931      	ldr	r1, [sp, #196]	; 0xc4
    for (int i = 0; i < size_; i++) {
 8009fec:	e78d      	b.n	8009f0a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x1aa>
    TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
 8009fee:	f007 f8c9 	bl	8011184 <abort>
 8009ff2:	bf00      	nop

08009ff4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
                      tflite::micro::GetTensorShape(im2col),
                      tflite::micro::GetTensorData<float>(im2col));
  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8009ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff8:	ed2d 8b02 	vpush	{d8}
  auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);
 8009ffc:	694e      	ldr	r6, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8009ffe:	b0f3      	sub	sp, #460	; 0x1cc
  TFLITE_DCHECK(context != nullptr);
 800a000:	2800      	cmp	r0, #0
 800a002:	f000 84a3 	beq.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800a006:	680b      	ldr	r3, [r1, #0]
 800a008:	4689      	mov	r9, r1
 800a00a:	6859      	ldr	r1, [r3, #4]
 800a00c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a00e:	4607      	mov	r7, r0
 800a010:	4798      	blx	r3
 800a012:	f8d9 3000 	ldr.w	r3, [r9]
 800a016:	4604      	mov	r4, r0
 800a018:	6899      	ldr	r1, [r3, #8]
 800a01a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a01c:	4638      	mov	r0, r7
 800a01e:	4798      	blx	r3
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 800a020:	f8d9 3000 	ldr.w	r3, [r9]
      tflite::micro::GetEvalInput(context, node, kInputTensor);
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFilterTensor);
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
          ? tflite::micro::GetEvalInput(context, node, kBiasTensor)
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	2a03      	cmp	r2, #3
 800a028:	4605      	mov	r5, r0
 800a02a:	d022      	beq.n	800a072 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7e>
 800a02c:	f04f 0800 	mov.w	r8, #0
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800a030:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a034:	4638      	mov	r0, r7
 800a036:	6859      	ldr	r1, [r3, #4]
 800a038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a03a:	4798      	blx	r3
          : nullptr;
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
 800a03c:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800a040:	4682      	mov	sl, r0
 800a042:	2a00      	cmp	r2, #0
 800a044:	f000 8482 	beq.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  switch (input->type) {  // Already know in/out types are same.
 800a048:	7a20      	ldrb	r0, [r4, #8]
 800a04a:	2803      	cmp	r0, #3
 800a04c:	d03b      	beq.n	800a0c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
 800a04e:	2809      	cmp	r0, #9
 800a050:	d02c      	beq.n	800a0ac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
 800a052:	2801      	cmp	r0, #1
 800a054:	d013      	beq.n	800a07e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8a>
    case kTfLiteUInt8:
      return EvalQuantized(context, node, params, data, input, filter, bias,
                           nullptr, nullptr, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800a056:	697d      	ldr	r5, [r7, #20]
 800a058:	f7f9 fc10 	bl	800387c <TfLiteTypeGetName>
 800a05c:	7a23      	ldrb	r3, [r4, #8]
 800a05e:	499e      	ldr	r1, [pc, #632]	; (800a2d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
 800a060:	4602      	mov	r2, r0
 800a062:	4638      	mov	r0, r7
 800a064:	47a8      	blx	r5
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800a066:	2001      	movs	r0, #1
  }
  return kTfLiteOk;
}
 800a068:	b073      	add	sp, #460	; 0x1cc
 800a06a:	ecbd 8b02 	vpop	{d8}
 800a06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800a072:	68d9      	ldr	r1, [r3, #12]
 800a074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a076:	4638      	mov	r0, r7
 800a078:	4798      	blx	r3
 800a07a:	4680      	mov	r8, r0
 800a07c:	e7d8      	b.n	800a030 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
  CalculateActivationRange(params->activation, &output_activation_min,
 800a07e:	7b33      	ldrb	r3, [r6, #12]
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 800a080:	2b01      	cmp	r3, #1
 800a082:	f000 8257 	beq.w	800a534 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x540>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
 800a086:	2b03      	cmp	r3, #3
 800a088:	f000 8457 	beq.w	800a93a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x946>
  } else if (activation == kTfLiteActReluN1To1) {
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
 800a08c:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800a2dc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e8>
 800a090:	eddf 7a93 	vldr	s15, [pc, #588]	; 800a2e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ec>
 800a094:	2b02      	cmp	r3, #2
 800a096:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800a09a:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
 800a09e:	bf18      	it	ne
 800a0a0:	eef0 8a47 	vmovne.f32	s17, s14
 800a0a4:	bf18      	it	ne
 800a0a6:	eeb0 8a67 	vmovne.f32	s16, s15
 800a0aa:	e247      	b.n	800a53c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x548>
      return EvalQuantizedPerChannel(context, node, params, data, input, filter,
 800a0ac:	e9cd 8a01 	strd	r8, sl, [sp, #4]
 800a0b0:	9500      	str	r5, [sp, #0]
 800a0b2:	4623      	mov	r3, r4
 800a0b4:	4631      	mov	r1, r6
 800a0b6:	4638      	mov	r0, r7
 800a0b8:	f7ff fe52 	bl	8009d60 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0>
}
 800a0bc:	b073      	add	sp, #460	; 0x1cc
 800a0be:	ecbd 8b02 	vpop	{d8}
 800a0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const int32_t input_offset = -data.input_zero_point;
 800a0c6:	6913      	ldr	r3, [r2, #16]
 800a0c8:	931a      	str	r3, [sp, #104]	; 0x68
  const int32_t filter_offset = -data.filter_zero_point;
 800a0ca:	6953      	ldr	r3, [r2, #20]
 800a0cc:	931b      	str	r3, [sp, #108]	; 0x6c
  const int32_t output_offset = data.output_zero_point;
 800a0ce:	6993      	ldr	r3, [r2, #24]
 800a0d0:	931c      	str	r3, [sp, #112]	; 0x70
  op_params.padding_values.width = data.padding.width;
 800a0d2:	f9b2 3000 	ldrsh.w	r3, [r2]
 800a0d6:	931d      	str	r3, [sp, #116]	; 0x74
  op_params.padding_values.height = data.padding.height;
 800a0d8:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800a0dc:	931e      	str	r3, [sp, #120]	; 0x78
  op_params.stride_width = params->stride_width;
 800a0de:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800a0e2:	931f      	str	r3, [sp, #124]	; 0x7c
  op_params.stride_height = params->stride_height;
 800a0e4:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 800a0e8:	9320      	str	r3, [sp, #128]	; 0x80
  op_params.dilation_width_factor = params->dilation_width_factor;
 800a0ea:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 800a0ee:	930b      	str	r3, [sp, #44]	; 0x2c
  op_params.dilation_height_factor = params->dilation_height_factor;
 800a0f0:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
 800a0f4:	930c      	str	r3, [sp, #48]	; 0x30
  op_params.quantized_activation_min = data.output_activation_min;
 800a0f6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  op_params.output_shift = -data.output_shift;
 800a0f8:	6a17      	ldr	r7, [r2, #32]
  op_params.quantized_activation_min = data.output_activation_min;
 800a0fa:	9307      	str	r3, [sp, #28]
  reference_ops::Conv(op_params, tflite::micro::GetTensorShape(input),
 800a0fc:	4621      	mov	r1, r4
  op_params.quantized_activation_max = data.output_activation_max;
 800a0fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a100:	930e      	str	r3, [sp, #56]	; 0x38
  reference_ops::Conv(op_params, tflite::micro::GetTensorShape(input),
 800a102:	a854      	add	r0, sp, #336	; 0x150
  op_params.output_multiplier = data.output_multiplier;
 800a104:	f8d2 901c 	ldr.w	r9, [r2, #28]
  op_params.output_shift = -data.output_shift;
 800a108:	970d      	str	r7, [sp, #52]	; 0x34
  reference_ops::Conv(op_params, tflite::micro::GetTensorShape(input),
 800a10a:	f7fc fcc9 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800a10e:	6823      	ldr	r3, [r4, #0]
 800a110:	9321      	str	r3, [sp, #132]	; 0x84
                      tflite::micro::GetTensorShape(filter),
 800a112:	4629      	mov	r1, r5
 800a114:	a85a      	add	r0, sp, #360	; 0x168
  op_params.output_shift = -data.output_shift;
 800a116:	427e      	negs	r6, r7
                      tflite::micro::GetTensorShape(filter),
 800a118:	f7fc fcc2 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800a11c:	2d00      	cmp	r5, #0
 800a11e:	f000 8415 	beq.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800a122:	682b      	ldr	r3, [r5, #0]
 800a124:	9322      	str	r3, [sp, #136]	; 0x88
                      tflite::micro::GetTensorShape(bias),
 800a126:	4641      	mov	r1, r8
 800a128:	a860      	add	r0, sp, #384	; 0x180
 800a12a:	f7fc fcb9 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800a12e:	f1b8 0f00 	cmp.w	r8, #0
 800a132:	f000 840b 	beq.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800a136:	f8d8 3000 	ldr.w	r3, [r8]
 800a13a:	930f      	str	r3, [sp, #60]	; 0x3c
                      tflite::micro::GetTensorShape(output),
 800a13c:	4651      	mov	r1, sl
 800a13e:	a866      	add	r0, sp, #408	; 0x198
 800a140:	f7fc fcae 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800a144:	f1ba 0f00 	cmp.w	sl, #0
 800a148:	d001      	beq.n	800a14e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15a>
 800a14a:	f8da a000 	ldr.w	sl, [sl]
                      tflite::micro::GetTensorShape(im2col),
 800a14e:	2100      	movs	r1, #0
 800a150:	a86c      	add	r0, sp, #432	; 0x1b0
 800a152:	f7fc fca5 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int32_t output_offset = params.output_offset;
  const int32_t output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32_t output_activation_min = params.quantized_activation_min;
  const int32_t output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800a156:	9b07      	ldr	r3, [sp, #28]
 800a158:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a15a:	4293      	cmp	r3, r2
 800a15c:	f300 83f6 	bgt.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>

  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800a160:	9b54      	ldr	r3, [sp, #336]	; 0x150
 800a162:	2b04      	cmp	r3, #4
 800a164:	f040 83f2 	bne.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800a168:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 800a16a:	2b04      	cmp	r3, #4
 800a16c:	f040 83ee 	bne.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800a170:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800a172:	2b04      	cmp	r3, #4
 800a174:	f040 83ea 	bne.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800a178:	9b55      	ldr	r3, [sp, #340]	; 0x154
 800a17a:	9310      	str	r3, [sp, #64]	; 0x40
 800a17c:	461a      	mov	r2, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800a17e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800a180:	4293      	cmp	r3, r2
 800a182:	f040 83e3 	bne.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800a186:	9b58      	ldr	r3, [sp, #352]	; 0x160
 800a188:	9311      	str	r3, [sp, #68]	; 0x44
 800a18a:	461a      	mov	r2, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800a18c:	9b5e      	ldr	r3, [sp, #376]	; 0x178
 800a18e:	4293      	cmp	r3, r2
 800a190:	f040 83dc 	bne.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800a194:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 800a196:	9308      	str	r3, [sp, #32]
 800a198:	461a      	mov	r2, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800a19a:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
 800a19c:	4293      	cmp	r3, r2
 800a19e:	f040 83d5 	bne.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (bias_data) {
 800a1a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1a4:	b1ab      	cbz	r3, 800a1d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1de>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800a1a6:	9860      	ldr	r0, [sp, #384]	; 0x180
 800a1a8:	2805      	cmp	r0, #5
 800a1aa:	f300 83c4 	bgt.w	800a936 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
    for (int i = 0; i < size_; i++) {
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	f340 83ca 	ble.w	800a948 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x954>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800a1b4:	ab61      	add	r3, sp, #388	; 0x184
 800a1b6:	3b04      	subs	r3, #4
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	2100      	movs	r1, #0
      buffer_size *= dims_data[i];
 800a1bc:	f853 4f04 	ldr.w	r4, [r3, #4]!
    for (int i = 0; i < size_; i++) {
 800a1c0:	3101      	adds	r1, #1
 800a1c2:	4288      	cmp	r0, r1
      buffer_size *= dims_data[i];
 800a1c4:	fb04 f202 	mul.w	r2, r4, r2
    for (int i = 0; i < size_; i++) {
 800a1c8:	dcf8      	bgt.n	800a1bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c8>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800a1ca:	9b08      	ldr	r3, [sp, #32]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	f040 83bd 	bne.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800a1d2:	9b56      	ldr	r3, [sp, #344]	; 0x158
 800a1d4:	9325      	str	r3, [sp, #148]	; 0x94
 800a1d6:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 800a1d8:	9324      	str	r3, [sp, #144]	; 0x90
 800a1da:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 800a1dc:	9315      	str	r3, [sp, #84]	; 0x54
 800a1de:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 800a1e0:	9314      	str	r3, [sp, #80]	; 0x50
 800a1e2:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 800a1e4:	9313      	str	r3, [sp, #76]	; 0x4c
 800a1e6:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 800a1e8:	9312      	str	r3, [sp, #72]	; 0x48
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  for (int batch = 0; batch < batches; ++batch) {
 800a1ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	f340 8159 	ble.w	800a4a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4b0>
  int left_shift = shift > 0 ? shift : 0;
 800a1f2:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 800a1f6:	9331      	str	r3, [sp, #196]	; 0xc4
 800a1f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1fa:	f8cd a0c8 	str.w	sl, [sp, #200]	; 0xc8
 800a1fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a202:	461a      	mov	r2, r3
 800a204:	9323      	str	r3, [sp, #140]	; 0x8c
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800a206:	2301      	movs	r3, #1
 800a208:	4093      	lsls	r3, r2
 800a20a:	3b01      	subs	r3, #1
 800a20c:	932e      	str	r3, [sp, #184]	; 0xb8
 800a20e:	f04f 0800 	mov.w	r8, #0
  return a >> offset;
 800a212:	105b      	asrs	r3, r3, #1
 800a214:	46ca      	mov	sl, r9
 800a216:	932f      	str	r3, [sp, #188]	; 0xbc
 800a218:	46c1      	mov	r9, r8
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800a21a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f340 813b 	ble.w	800a498 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4a4>
 800a222:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a224:	f04f 0e00 	mov.w	lr, #0
 800a228:	425b      	negs	r3, r3
 800a22a:	9309      	str	r3, [sp, #36]	; 0x24
 800a22c:	46f0      	mov	r8, lr
      const int in_y_origin = (out_y * stride_height) - pad_height;
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800a22e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a230:	2b00      	cmp	r3, #0
 800a232:	f340 8127 	ble.w	800a484 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x490>
 800a236:	9b1d      	ldr	r3, [sp, #116]	; 0x74
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800a238:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a23c:	425b      	negs	r3, r3
 800a23e:	f04f 0c00 	mov.w	ip, #0
 800a242:	46c8      	mov	r8, r9
 800a244:	9304      	str	r3, [sp, #16]
 800a246:	46d1      	mov	r9, sl
 800a248:	46e2      	mov	sl, ip
        const int in_x_origin = (out_x * stride_width) - pad_width;
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800a24a:	9b08      	ldr	r3, [sp, #32]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	bfc8      	it	gt
 800a250:	f04f 0e00 	movgt.w	lr, #0
 800a254:	f340 8108 	ble.w	800a468 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x474>
          int32_t acc = 0;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800a258:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f340 8159 	ble.w	800a512 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x51e>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800a260:	e9dd 1557 	ldrd	r1, r5, [sp, #348]	; 0x15c
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800a264:	9b56      	ldr	r3, [sp, #344]	; 0x158
 800a266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a268:	9f04      	ldr	r7, [sp, #16]
 800a26a:	932c      	str	r3, [sp, #176]	; 0xb0
 800a26c:	fb08 2303 	mla	r3, r8, r3, r2
 800a270:	fb01 7303 	mla	r3, r1, r3, r7
 800a274:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800a276:	985c      	ldr	r0, [sp, #368]	; 0x170
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800a278:	9c5d      	ldr	r4, [sp, #372]	; 0x174
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800a27a:	9e5e      	ldr	r6, [sp, #376]	; 0x178
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800a27c:	9028      	str	r0, [sp, #160]	; 0xa0
 800a27e:	fb05 7303 	mla	r3, r5, r3, r7
 800a282:	9305      	str	r3, [sp, #20]
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 800a284:	fb0e f300 	mul.w	r3, lr, r0
 800a288:	9822      	ldr	r0, [sp, #136]	; 0x88
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800a28a:	9429      	str	r4, [sp, #164]	; 0xa4
 800a28c:	fb06 f404 	mul.w	r4, r6, r4
 800a290:	fb04 0303 	mla	r3, r4, r3, r0
 800a294:	912d      	str	r1, [sp, #180]	; 0xb4
 800a296:	9306      	str	r3, [sp, #24]
 800a298:	fb01 f305 	mul.w	r3, r1, r5
 800a29c:	990c      	ldr	r1, [sp, #48]	; 0x30
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800a29e:	9616      	str	r6, [sp, #88]	; 0x58
 800a2a0:	fb01 f303 	mul.w	r3, r1, r3
  inline int32_t DimensionsCount() const { return size_; }
 800a2a4:	9954      	ldr	r1, [sp, #336]	; 0x150
 800a2a6:	912a      	str	r1, [sp, #168]	; 0xa8
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800a2a8:	9955      	ldr	r1, [sp, #340]	; 0x154
 800a2aa:	912b      	str	r1, [sp, #172]	; 0xac
  inline int32_t DimensionsCount() const { return size_; }
 800a2ac:	995a      	ldr	r1, [sp, #360]	; 0x168
 800a2ae:	9126      	str	r1, [sp, #152]	; 0x98
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800a2b0:	995b      	ldr	r1, [sp, #364]	; 0x16c
 800a2b2:	9127      	str	r1, [sp, #156]	; 0x9c
 800a2b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2b6:	9318      	str	r3, [sp, #96]	; 0x60
 800a2b8:	e9cd 9a33 	strd	r9, sl, [sp, #204]	; 0xcc
          int32_t acc = 0;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	fb01 f105 	mul.w	r1, r1, r5
 800a2c2:	9419      	str	r4, [sp, #100]	; 0x64
 800a2c4:	9130      	str	r1, [sp, #192]	; 0xc0
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800a2c6:	469b      	mov	fp, r3
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800a2c8:	9914      	ldr	r1, [sp, #80]	; 0x50
 800a2ca:	2900      	cmp	r1, #0
 800a2cc:	dd60      	ble.n	800a390 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x39c>
 800a2ce:	e9dd 6905 	ldrd	r6, r9, [sp, #20]
 800a2d2:	9904      	ldr	r1, [sp, #16]
 800a2d4:	2400      	movs	r4, #0
 800a2d6:	e00f      	b.n	800a2f8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x304>
 800a2d8:	0801742c 	.word	0x0801742c
 800a2dc:	7f7fffff 	.word	0x7f7fffff
 800a2e0:	ff7fffff 	.word	0xff7fffff
 800a2e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a2e6:	4401      	add	r1, r0
 800a2e8:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a2ea:	4481      	add	r9, r0
 800a2ec:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800a2ee:	4406      	add	r6, r0
 800a2f0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a2f2:	3401      	adds	r4, #1
 800a2f4:	4284      	cmp	r4, r0
 800a2f6:	d04b      	beq.n	800a390 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x39c>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800a2f8:	ea52 0001 	orrs.w	r0, r2, r1
 800a2fc:	d4f2      	bmi.n	800a2e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f0>
 800a2fe:	9824      	ldr	r0, [sp, #144]	; 0x90
 800a300:	4288      	cmp	r0, r1
 800a302:	ddef      	ble.n	800a2e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f0>
 800a304:	9825      	ldr	r0, [sp, #148]	; 0x94
 800a306:	4290      	cmp	r0, r2
 800a308:	ddec      	ble.n	800a2e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f0>

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800a30a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a30c:	2800      	cmp	r0, #0
 800a30e:	dde9      	ble.n	800a2e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f0>
 800a310:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800a312:	2804      	cmp	r0, #4
 800a314:	f040 831a 	bne.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
 800a318:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800a31a:	42a0      	cmp	r0, r4
 800a31c:	f340 8316 	ble.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
 800a320:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800a322:	4583      	cmp	fp, r0
 800a324:	f280 8312 	bge.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
 800a328:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800a32a:	4586      	cmp	lr, r0
 800a32c:	f280 830e 	bge.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
 800a330:	1e70      	subs	r0, r6, #1
 800a332:	900a      	str	r0, [sp, #40]	; 0x28
 800a334:	f109 3aff 	add.w	sl, r9, #4294967295
 800a338:	2000      	movs	r0, #0
 800a33a:	9435      	str	r4, [sp, #212]	; 0xd4
 800a33c:	9f2b      	ldr	r7, [sp, #172]	; 0xac
 800a33e:	45b8      	cmp	r8, r7
 800a340:	f280 8304 	bge.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800a344:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 800a346:	4297      	cmp	r7, r2
 800a348:	f340 8300 	ble.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800a34c:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 800a34e:	428f      	cmp	r7, r1
 800a350:	f340 82fc 	ble.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800a354:	42a8      	cmp	r0, r5
 800a356:	f280 82f9 	bge.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
                                                      in_x, in_channel)];
 800a35a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a35c:	f817 cf01 	ldrb.w	ip, [r7, #1]!
 800a360:	970a      	str	r7, [sp, #40]	; 0x28
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 800a362:	9f26      	ldr	r7, [sp, #152]	; 0x98
 800a364:	2f04      	cmp	r7, #4
 800a366:	f040 82f1 	bne.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800a36a:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800a36c:	42b8      	cmp	r0, r7
 800a36e:	f280 82ed 	bge.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
                int32_t filter_val = filter_data[Offset(
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
                acc +=
                    (filter_val + filter_offset) * (input_val + input_offset);
 800a372:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a374:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800a376:	ebac 0c07 	sub.w	ip, ip, r7
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 800a37a:	f81a 7f01 	ldrb.w	r7, [sl, #1]!
                    (filter_val + filter_offset) * (input_val + input_offset);
 800a37e:	1b3f      	subs	r7, r7, r4
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800a380:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800a382:	3001      	adds	r0, #1
 800a384:	42a0      	cmp	r0, r4
                acc +=
 800a386:	fb0c 3307 	mla	r3, ip, r7, r3
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800a38a:	d1d7      	bne.n	800a33c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x348>
 800a38c:	9c35      	ldr	r4, [sp, #212]	; 0xd4
 800a38e:	e7a9      	b.n	800a2e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f0>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800a390:	9906      	ldr	r1, [sp, #24]
 800a392:	9819      	ldr	r0, [sp, #100]	; 0x64
 800a394:	4401      	add	r1, r0
 800a396:	9106      	str	r1, [sp, #24]
 800a398:	9818      	ldr	r0, [sp, #96]	; 0x60
 800a39a:	9905      	ldr	r1, [sp, #20]
 800a39c:	4401      	add	r1, r0
 800a39e:	9105      	str	r1, [sp, #20]
 800a3a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a3a2:	440a      	add	r2, r1
 800a3a4:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a3a6:	f10b 0b01 	add.w	fp, fp, #1
 800a3aa:	458b      	cmp	fp, r1
 800a3ac:	d18c      	bne.n	800a2c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d4>
 800a3ae:	e9dd 9a33 	ldrd	r9, sl, [sp, #204]	; 0xcc
              }
            }
          }
          if (bias_data) {
 800a3b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a3b4:	b112      	cbz	r2, 800a3bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c8>
            acc += bias_data[out_channel];
 800a3b6:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 800a3ba:	4413      	add	r3, r2
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 800a3bc:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800a3be:	4093      	lsls	r3, r2
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800a3c0:	4599      	cmp	r9, r3
 800a3c2:	f000 8094 	beq.w	800a4ee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4fa>
  std::int64_t ab_64 = a_64 * b_64;
 800a3c6:	fb83 0209 	smull	r0, r2, r3, r9
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800a3ca:	2a00      	cmp	r2, #0
 800a3cc:	f280 80a3 	bge.w	800a516 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x522>
 800a3d0:	4b55      	ldr	r3, [pc, #340]	; (800a528 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x534>)
 800a3d2:	f04f 31ff 	mov.w	r1, #4294967295
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800a3d6:	181b      	adds	r3, r3, r0
 800a3d8:	eb41 0102 	adc.w	r1, r1, r2
 800a3dc:	2900      	cmp	r1, #0
 800a3de:	da04      	bge.n	800a3ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3f6>
 800a3e0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800a3e4:	189b      	adds	r3, r3, r2
 800a3e6:	f141 0100 	adc.w	r1, r1, #0
 800a3ea:	0fdb      	lsrs	r3, r3, #31
 800a3ec:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  assert(exponent <= 31);
 800a3f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3f2:	2a1f      	cmp	r2, #31
 800a3f4:	f300 81e2 	bgt.w	800a7bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7c8>
  return a & b;
 800a3f8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
  return a >> offset;
 800a3fa:	9823      	ldr	r0, [sp, #140]	; 0x8c
  return a & b;
 800a3fc:	ea02 0103 	and.w	r1, r2, r3
  return a + b;
 800a400:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800a402:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
  return a >> offset;
 800a406:	4103      	asrs	r3, r0
  return a + b;
 800a408:	4291      	cmp	r1, r2
 800a40a:	bfc8      	it	gt
 800a40c:	3301      	addgt	r3, #1
          }
          acc = MultiplyByQuantizedMultiplier(acc, output_multiplier,
                                              output_shift);
          acc += output_offset;
 800a40e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a410:	4413      	add	r3, r2
      if (__a < __b)
 800a412:	9a07      	ldr	r2, [sp, #28]
 800a414:	429a      	cmp	r2, r3
 800a416:	dc03      	bgt.n	800a420 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x42c>
    min(const _Tp& __a, const _Tp& __b)
 800a418:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a41a:	429a      	cmp	r2, r3
 800a41c:	bfa8      	it	ge
 800a41e:	461a      	movge	r2, r3
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 800a420:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800a422:	2b04      	cmp	r3, #4
 800a424:	f040 8292 	bne.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800a428:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800a42a:	4598      	cmp	r8, r3
 800a42c:	f280 828e 	bge.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800a430:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 800a432:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800a434:	429c      	cmp	r4, r3
 800a436:	f280 8289 	bge.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800a43a:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 800a43c:	4550      	cmp	r0, sl
 800a43e:	f340 8285 	ble.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800a442:	996a      	ldr	r1, [sp, #424]	; 0x1a8
 800a444:	458e      	cmp	lr, r1
 800a446:	f280 8281 	bge.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 800a44a:	fb03 4308 	mla	r3, r3, r8, r4
 800a44e:	fb00 a303 	mla	r3, r0, r3, sl
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800a452:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800a454:	fb01 0303 	mla	r3, r1, r3, r0
 800a458:	f803 200e 	strb.w	r2, [r3, lr]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800a45c:	9b08      	ldr	r3, [sp, #32]
 800a45e:	f10e 0e01 	add.w	lr, lr, #1
 800a462:	459e      	cmp	lr, r3
 800a464:	f47f aef8 	bne.w	800a258 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x264>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800a468:	9b04      	ldr	r3, [sp, #16]
 800a46a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a46c:	4413      	add	r3, r2
 800a46e:	9304      	str	r3, [sp, #16]
 800a470:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a472:	f10a 0a01 	add.w	sl, sl, #1
 800a476:	459a      	cmp	sl, r3
 800a478:	f47f aee7 	bne.w	800a24a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x256>
 800a47c:	46ca      	mov	sl, r9
 800a47e:	46c1      	mov	r9, r8
 800a480:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800a484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a486:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a488:	4413      	add	r3, r2
 800a48a:	9309      	str	r3, [sp, #36]	; 0x24
 800a48c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a48e:	f108 0801 	add.w	r8, r8, #1
 800a492:	4598      	cmp	r8, r3
 800a494:	f47f aecb 	bne.w	800a22e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x23a>
  for (int batch = 0; batch < batches; ++batch) {
 800a498:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a49a:	f109 0901 	add.w	r9, r9, #1
 800a49e:	4599      	cmp	r9, r3
 800a4a0:	f47f aebb 	bne.w	800a21a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x226>
    if (size_ > kMaxSmallSize) {
 800a4a4:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 800a4a6:	2b05      	cmp	r3, #5
 800a4a8:	dd03      	ble.n	800a4b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4be>
      delete[] dims_pointer_;
 800a4aa:	986d      	ldr	r0, [sp, #436]	; 0x1b4
 800a4ac:	b108      	cbz	r0, 800a4b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4be>
 800a4ae:	f006 fb8f 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800a4b2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800a4b4:	2b05      	cmp	r3, #5
 800a4b6:	dd03      	ble.n	800a4c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4cc>
      delete[] dims_pointer_;
 800a4b8:	9867      	ldr	r0, [sp, #412]	; 0x19c
 800a4ba:	b108      	cbz	r0, 800a4c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4cc>
 800a4bc:	f006 fb88 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800a4c0:	9b60      	ldr	r3, [sp, #384]	; 0x180
 800a4c2:	2b05      	cmp	r3, #5
 800a4c4:	dd03      	ble.n	800a4ce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4da>
      delete[] dims_pointer_;
 800a4c6:	9861      	ldr	r0, [sp, #388]	; 0x184
 800a4c8:	b108      	cbz	r0, 800a4ce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4da>
 800a4ca:	f006 fb81 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800a4ce:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 800a4d0:	2b05      	cmp	r3, #5
 800a4d2:	dd03      	ble.n	800a4dc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4e8>
      delete[] dims_pointer_;
 800a4d4:	985b      	ldr	r0, [sp, #364]	; 0x16c
 800a4d6:	b108      	cbz	r0, 800a4dc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4e8>
 800a4d8:	f006 fb7a 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800a4dc:	9b54      	ldr	r3, [sp, #336]	; 0x150
 800a4de:	2b05      	cmp	r3, #5
 800a4e0:	f340 821c 	ble.w	800a91c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x928>
      delete[] dims_pointer_;
 800a4e4:	9855      	ldr	r0, [sp, #340]	; 0x154
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	f040 8216 	bne.w	800a918 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x924>
 800a4ec:	e216      	b.n	800a91c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x928>
  std::int64_t ab_64 = a_64 * b_64;
 800a4ee:	fb89 0209 	smull	r0, r2, r9, r9
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800a4f2:	2a00      	cmp	r2, #0
 800a4f4:	4b0c      	ldr	r3, [pc, #48]	; (800a528 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x534>)
 800a4f6:	bfa6      	itte	ge
 800a4f8:	2100      	movge	r1, #0
 800a4fa:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 800a4fe:	f04f 31ff 	movlt.w	r1, #4294967295
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800a502:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
 800a506:	bf08      	it	eq
 800a508:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
 800a50c:	f43f af70 	beq.w	800a3f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3fc>
 800a510:	e761      	b.n	800a3d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e2>
          int32_t acc = 0;
 800a512:	2300      	movs	r3, #0
 800a514:	e74d      	b.n	800a3b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3be>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800a516:	f110 4380 	adds.w	r3, r0, #1073741824	; 0x40000000
 800a51a:	f142 0200 	adc.w	r2, r2, #0
 800a51e:	0fdb      	lsrs	r3, r3, #31
 800a520:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800a524:	e764      	b.n	800a3f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3fc>
 800a526:	bf00      	nop
 800a528:	c0000001 	.word	0xc0000001
 800a52c:	7f7fffff 	.word	0x7f7fffff
 800a530:	00000000 	.word	0x00000000
    *activation_max = std::numeric_limits<T>::max();
 800a534:	ed5f 8a03 	vldr	s17, [pc, #-12]	; 800a52c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x538>
    *activation_min = 0;
 800a538:	ed1f 8a03 	vldr	s16, [pc, #-12]	; 800a530 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x53c>
  op_params.padding_values.width = data.padding.width;
 800a53c:	f9b2 3000 	ldrsh.w	r3, [r2]
 800a540:	9310      	str	r3, [sp, #64]	; 0x40
  op_params.padding_values.height = data.padding.height;
 800a542:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800a546:	9311      	str	r3, [sp, #68]	; 0x44
  op_params.stride_width = params->stride_width;
 800a548:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800a54c:	9312      	str	r3, [sp, #72]	; 0x48
  op_params.stride_height = params->stride_height;
 800a54e:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 800a552:	9313      	str	r3, [sp, #76]	; 0x4c
  op_params.dilation_width_factor = params->dilation_width_factor;
 800a554:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 800a558:	9314      	str	r3, [sp, #80]	; 0x50
  reference_ops::Conv(op_params, tflite::micro::GetTensorShape(input),
 800a55a:	4621      	mov	r1, r4
  op_params.dilation_height_factor = params->dilation_height_factor;
 800a55c:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
 800a560:	9315      	str	r3, [sp, #84]	; 0x54
  reference_ops::Conv(op_params, tflite::micro::GetTensorShape(input),
 800a562:	a84e      	add	r0, sp, #312	; 0x138
 800a564:	f7fc fa9c 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800a568:	6823      	ldr	r3, [r4, #0]
 800a56a:	931d      	str	r3, [sp, #116]	; 0x74
                      tflite::micro::GetTensorShape(filter),
 800a56c:	4629      	mov	r1, r5
 800a56e:	a848      	add	r0, sp, #288	; 0x120
 800a570:	f7fc fa96 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800a574:	2d00      	cmp	r5, #0
 800a576:	f000 81e9 	beq.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800a57a:	682b      	ldr	r3, [r5, #0]
 800a57c:	931e      	str	r3, [sp, #120]	; 0x78
                      tflite::micro::GetTensorShape(bias),
 800a57e:	4641      	mov	r1, r8
 800a580:	a842      	add	r0, sp, #264	; 0x108
 800a582:	f7fc fa8d 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800a586:	f1b8 0f00 	cmp.w	r8, #0
 800a58a:	f000 81df 	beq.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800a58e:	f8d8 3000 	ldr.w	r3, [r8]
 800a592:	9316      	str	r3, [sp, #88]	; 0x58
                      tflite::micro::GetTensorShape(output),
 800a594:	4651      	mov	r1, sl
 800a596:	a83c      	add	r0, sp, #240	; 0xf0
 800a598:	f7fc fa82 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800a59c:	f1ba 0f00 	cmp.w	sl, #0
 800a5a0:	d001      	beq.n	800a5a6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5b2>
 800a5a2:	f8da a000 	ldr.w	sl, [sl]
                      tflite::micro::GetTensorShape(im2col),
 800a5a6:	2100      	movs	r1, #0
 800a5a8:	a836      	add	r0, sp, #216	; 0xd8
 800a5aa:	f7fc fa79 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800a5ae:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 800a5b0:	2b04      	cmp	r3, #4
 800a5b2:	f040 81cb 	bne.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800a5b6:	9b48      	ldr	r3, [sp, #288]	; 0x120
 800a5b8:	2b04      	cmp	r3, #4
 800a5ba:	f040 81c7 	bne.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800a5be:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800a5c0:	2b04      	cmp	r3, #4
 800a5c2:	f040 81c3 	bne.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800a5c6:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800a5c8:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800a5ca:	9305      	str	r3, [sp, #20]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800a5cc:	429a      	cmp	r2, r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800a5ce:	921f      	str	r2, [sp, #124]	; 0x7c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800a5d0:	f040 81bc 	bne.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800a5d4:	f8dd b148 	ldr.w	fp, [sp, #328]	; 0x148
 800a5d8:	f8dd e130 	ldr.w	lr, [sp, #304]	; 0x130
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800a5dc:	45de      	cmp	lr, fp
 800a5de:	f040 81b5 	bne.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800a5e2:	f8dd 9124 	ldr.w	r9, [sp, #292]	; 0x124
 800a5e6:	9d40      	ldr	r5, [sp, #256]	; 0x100
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800a5e8:	454d      	cmp	r5, r9
 800a5ea:	f040 81af 	bne.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  if (bias_data) {
 800a5ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a5f0:	b18b      	cbz	r3, 800a616 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x622>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800a5f2:	9842      	ldr	r0, [sp, #264]	; 0x108
 800a5f4:	2805      	cmp	r0, #5
 800a5f6:	f340 819a 	ble.w	800a92e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x93a>
 800a5fa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    for (int i = 0; i < size_; i++) {
 800a5fc:	3b04      	subs	r3, #4
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800a5fe:	2201      	movs	r2, #1
 800a600:	2100      	movs	r1, #0
      buffer_size *= dims_data[i];
 800a602:	f853 4f04 	ldr.w	r4, [r3, #4]!
    for (int i = 0; i < size_; i++) {
 800a606:	3101      	adds	r1, #1
 800a608:	4288      	cmp	r0, r1
      buffer_size *= dims_data[i];
 800a60a:	fb04 f202 	mul.w	r2, r4, r2
    for (int i = 0; i < size_; i++) {
 800a60e:	dcf8      	bgt.n	800a602 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x60e>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800a610:	454a      	cmp	r2, r9
 800a612:	f040 819b 	bne.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  for (int batch = 0; batch < batches; ++batch) {
 800a616:	9b05      	ldr	r3, [sp, #20]
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800a618:	9e50      	ldr	r6, [sp, #320]	; 0x140
 800a61a:	9c51      	ldr	r4, [sp, #324]	; 0x144
 800a61c:	9f4a      	ldr	r7, [sp, #296]	; 0x128
 800a61e:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800a620:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800a622:	983f      	ldr	r0, [sp, #252]	; 0xfc
 800a624:	9623      	str	r6, [sp, #140]	; 0x8c
 800a626:	2b00      	cmp	r3, #0
 800a628:	9422      	str	r4, [sp, #136]	; 0x88
 800a62a:	9707      	str	r7, [sp, #28]
 800a62c:	9204      	str	r2, [sp, #16]
 800a62e:	f340 8152 	ble.w	800a8d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8e2>
 800a632:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a634:	9a10      	ldr	r2, [sp, #64]	; 0x40
          float bias_value = 0.0f;
 800a636:	ed5f 6a42 	vldr	s13, [pc, #-264]	; 800a530 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x53c>
 800a63a:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
 800a63e:	fb04 f303 	mul.w	r3, r4, r3
 800a642:	425b      	negs	r3, r3
 800a644:	1a9b      	subs	r3, r3, r2
 800a646:	9a04      	ldr	r2, [sp, #16]
 800a648:	f8cd b060 	str.w	fp, [sp, #96]	; 0x60
 800a64c:	fb00 f202 	mul.w	r2, r0, r2
 800a650:	fb0b f303 	mul.w	r3, fp, r3
 800a654:	fb05 f202 	mul.w	r2, r5, r2
 800a658:	930e      	str	r3, [sp, #56]	; 0x38
 800a65a:	9226      	str	r2, [sp, #152]	; 0x98
 800a65c:	fb04 f30b 	mul.w	r3, r4, fp
 800a660:	fb04 f206 	mul.w	r2, r4, r6
 800a664:	fb00 f405 	mul.w	r4, r0, r5
 800a668:	9424      	str	r4, [sp, #144]	; 0x90
 800a66a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a66c:	9519      	str	r5, [sp, #100]	; 0x64
 800a66e:	fb04 f403 	mul.w	r4, r4, r3
 800a672:	9425      	str	r4, [sp, #148]	; 0x94
 800a674:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800a676:	fb04 f303 	mul.w	r3, r4, r3
 800a67a:	9321      	str	r3, [sp, #132]	; 0x84
 800a67c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a67e:	fb03 f30b 	mul.w	r3, r3, fp
 800a682:	fb0b f202 	mul.w	r2, fp, r2
 800a686:	9328      	str	r3, [sp, #160]	; 0xa0
 800a688:	fb0e f301 	mul.w	r3, lr, r1
 800a68c:	9227      	str	r2, [sp, #156]	; 0x9c
 800a68e:	9329      	str	r3, [sp, #164]	; 0xa4
 800a690:	fb01 f207 	mul.w	r2, r1, r7
 800a694:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a696:	fb0e f202 	mul.w	r2, lr, r2
 800a69a:	fb0b f303 	mul.w	r3, fp, r3
 800a69e:	922a      	str	r2, [sp, #168]	; 0xa8
  for (int batch = 0; batch < batches; ++batch) {
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	46c8      	mov	r8, r9
 800a6a4:	920b      	str	r2, [sp, #44]	; 0x2c
 800a6a6:	9320      	str	r3, [sp, #128]	; 0x80
 800a6a8:	46f2      	mov	sl, lr
 800a6aa:	4693      	mov	fp, r2
 800a6ac:	4681      	mov	r9, r0
 800a6ae:	468c      	mov	ip, r1
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800a6b0:	9b04      	ldr	r3, [sp, #16]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f340 8101 	ble.w	800a8ba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8c6>
 800a6b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6ba:	425b      	negs	r3, r3
 800a6bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a6be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6c0:	9308      	str	r3, [sp, #32]
 800a6c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6c4:	930a      	str	r3, [sp, #40]	; 0x28
 800a6c6:	f04f 0e00 	mov.w	lr, #0
 800a6ca:	4652      	mov	r2, sl
 800a6cc:	4663      	mov	r3, ip
 800a6ce:	46da      	mov	sl, fp
 800a6d0:	46cc      	mov	ip, r9
 800a6d2:	4647      	mov	r7, r8
 800a6d4:	46f1      	mov	r9, lr
 800a6d6:	4693      	mov	fp, r2
 800a6d8:	469e      	mov	lr, r3
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800a6da:	f1bc 0f00 	cmp.w	ip, #0
 800a6de:	f340 80d4 	ble.w	800a88a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x896>
 800a6e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6e4:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
 800a6e8:	425b      	negs	r3, r3
 800a6ea:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6ec:	9b08      	ldr	r3, [sp, #32]
 800a6ee:	930c      	str	r3, [sp, #48]	; 0x30
 800a6f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6f2:	930d      	str	r3, [sp, #52]	; 0x34
 800a6f4:	465b      	mov	r3, fp
 800a6f6:	463e      	mov	r6, r7
 800a6f8:	46d3      	mov	fp, sl
 800a6fa:	f04f 0800 	mov.w	r8, #0
 800a6fe:	4667      	mov	r7, ip
 800a700:	469a      	mov	sl, r3
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800a702:	2e00      	cmp	r6, #0
 800a704:	f340 80a9 	ble.w	800a85a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x866>
 800a708:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800a70a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a70c:	e9cd 871b 	strd	r8, r7, [sp, #108]	; 0x6c
 800a710:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a714:	f04f 0c00 	mov.w	ip, #0
 800a718:	9317      	str	r3, [sp, #92]	; 0x5c
 800a71a:	4663      	mov	r3, ip
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800a71c:	9a07      	ldr	r2, [sp, #28]
          float total = 0.f;
 800a71e:	ed1f 7a7c 	vldr	s14, [pc, #-496]	; 800a530 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x53c>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800a722:	2a00      	cmp	r2, #0
 800a724:	dd62      	ble.n	800a7ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7f8>
 800a726:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a728:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a72a:	9106      	str	r1, [sp, #24]
 800a72c:	46e1      	mov	r9, ip
 800a72e:	f04f 0800 	mov.w	r8, #0
 800a732:	f8cd c0b0 	str.w	ip, [sp, #176]	; 0xb0
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800a736:	f1be 0f00 	cmp.w	lr, #0
 800a73a:	dd48      	ble.n	800a7ce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7da>
 800a73c:	9d06      	ldr	r5, [sp, #24]
 800a73e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a740:	f8cd 90b4 	str.w	r9, [sp, #180]	; 0xb4
 800a744:	464f      	mov	r7, r9
 800a746:	2100      	movs	r1, #0
 800a748:	e007      	b.n	800a75a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x766>
 800a74a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800a74c:	3101      	adds	r1, #1
 800a74e:	4420      	add	r0, r4
 800a750:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800a752:	4571      	cmp	r1, lr
 800a754:	4457      	add	r7, sl
 800a756:	4425      	add	r5, r4
 800a758:	d037      	beq.n	800a7ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7d6>
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800a75a:	ea50 0402 	orrs.w	r4, r0, r2
 800a75e:	d4f4      	bmi.n	800a74a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x756>
 800a760:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800a762:	42a0      	cmp	r0, r4
 800a764:	daf1      	bge.n	800a74a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x756>
 800a766:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800a768:	4294      	cmp	r4, r2
 800a76a:	ddee      	ble.n	800a74a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x756>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800a76c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800a76e:	2c00      	cmp	r4, #0
 800a770:	ddeb      	ble.n	800a74a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x756>
 800a772:	9c05      	ldr	r4, [sp, #20]
 800a774:	455c      	cmp	r4, fp
 800a776:	f340 80e9 	ble.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
 800a77a:	458e      	cmp	lr, r1
 800a77c:	f340 80e6 	ble.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
 800a780:	9c07      	ldr	r4, [sp, #28]
 800a782:	4544      	cmp	r4, r8
 800a784:	f340 80e2 	ble.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
 800a788:	42b3      	cmp	r3, r6
 800a78a:	f280 80df 	bge.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
 800a78e:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800a790:	932e      	str	r3, [sp, #184]	; 0xb8
 800a792:	eb04 0987 	add.w	r9, r4, r7, lsl #2
 800a796:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800a798:	eb04 0c85 	add.w	ip, r4, r5, lsl #2
 800a79c:	2400      	movs	r4, #0
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800a79e:	4554      	cmp	r4, sl
                                                      in_x, in_channel)];
 800a7a0:	ecbc 6a01 	vldmia	ip!, {s12}
 800a7a4:	f280 80d2 	bge.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800a7a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 800a7aa:	ecf9 7a01 	vldmia	r9!, {s15}
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800a7ae:	3401      	adds	r4, #1
 800a7b0:	429c      	cmp	r4, r3
                total += (input_value * filter_value);
 800a7b2:	eea6 7a27 	vfma.f32	s14, s12, s15
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800a7b6:	d1f2      	bne.n	800a79e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7aa>
 800a7b8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a7ba:	e7c6      	b.n	800a74a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x756>
  assert(exponent <= 31);
 800a7bc:	4b64      	ldr	r3, [pc, #400]	; (800a950 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x95c>)
 800a7be:	4a65      	ldr	r2, [pc, #404]	; (800a954 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x960>)
 800a7c0:	4865      	ldr	r0, [pc, #404]	; (800a958 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x964>)
 800a7c2:	f240 1167 	movw	r1, #359	; 0x167
 800a7c6:	f006 fce5 	bl	8011194 <__assert_func>
 800a7ca:	f8dd 90b4 	ldr.w	r9, [sp, #180]	; 0xb4
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800a7ce:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800a7d0:	9821      	ldr	r0, [sp, #132]	; 0x84
 800a7d2:	4489      	add	r9, r1
 800a7d4:	9906      	ldr	r1, [sp, #24]
 800a7d6:	4401      	add	r1, r0
 800a7d8:	9106      	str	r1, [sp, #24]
 800a7da:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a7dc:	440a      	add	r2, r1
 800a7de:	9907      	ldr	r1, [sp, #28]
 800a7e0:	f108 0801 	add.w	r8, r8, #1
 800a7e4:	4588      	cmp	r8, r1
 800a7e6:	d1a6      	bne.n	800a736 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x742>
 800a7e8:	f8dd c0b0 	ldr.w	ip, [sp, #176]	; 0xb0
          if (bias_data) {
 800a7ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a7ee:	2a00      	cmp	r2, #0
 800a7f0:	f000 809a 	beq.w	800a928 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x934>
            bias_value = bias_data[out_channel];
 800a7f4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a7f8:	edd2 7a00 	vldr	s15, [r2]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800a7fc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a7fe:	455a      	cmp	r2, fp
              ActivationFunctionWithMinMax(total + bias_value,
 800a800:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a804:	f340 80a2 	ble.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800a808:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a80a:	9904      	ldr	r1, [sp, #16]
 800a80c:	428a      	cmp	r2, r1
 800a80e:	f280 809d 	bge.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800a812:	e9dd 211b 	ldrd	r2, r1, [sp, #108]	; 0x6c
 800a816:	428a      	cmp	r2, r1
 800a818:	f280 8098 	bge.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800a81c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a81e:	4293      	cmp	r3, r2
 800a820:	f280 8094 	bge.w	800a94c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
	return __b;
 800a824:	eef4 7a48 	vcmp.f32	s15, s16
 800a828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a82c:	bf48      	it	mi
 800a82e:	eef0 7a48 	vmovmi.f32	s15, s16
	return __b;
 800a832:	eef4 7a68 	vcmp.f32	s15, s17
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800a836:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a83c:	bfc8      	it	gt
 800a83e:	eef0 7a68 	vmovgt.f32	s15, s17
 800a842:	ece2 7a01 	vstmia	r2!, {s15}
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800a846:	3301      	adds	r3, #1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800a848:	9217      	str	r2, [sp, #92]	; 0x5c
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800a84a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800a84c:	42b3      	cmp	r3, r6
 800a84e:	4494      	add	ip, r2
 800a850:	f47f af64 	bne.w	800a71c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x728>
 800a854:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 800a858:	460f      	mov	r7, r1
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800a85a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a85c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a85e:	4413      	add	r3, r2
 800a860:	930d      	str	r3, [sp, #52]	; 0x34
 800a862:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800a864:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a866:	4413      	add	r3, r2
 800a868:	930c      	str	r3, [sp, #48]	; 0x30
 800a86a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a86c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a86e:	f108 0801 	add.w	r8, r8, #1
 800a872:	4413      	add	r3, r2
 800a874:	45b8      	cmp	r8, r7
 800a876:	930f      	str	r3, [sp, #60]	; 0x3c
 800a878:	f47f af43 	bne.w	800a702 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70e>
 800a87c:	4653      	mov	r3, sl
 800a87e:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800a882:	46da      	mov	sl, fp
 800a884:	46bc      	mov	ip, r7
 800a886:	469b      	mov	fp, r3
 800a888:	4637      	mov	r7, r6
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800a88a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a88c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a88e:	4413      	add	r3, r2
 800a890:	930a      	str	r3, [sp, #40]	; 0x28
 800a892:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a894:	9b08      	ldr	r3, [sp, #32]
 800a896:	4413      	add	r3, r2
 800a898:	9308      	str	r3, [sp, #32]
 800a89a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a89c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a89e:	4413      	add	r3, r2
 800a8a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a8a2:	9b04      	ldr	r3, [sp, #16]
 800a8a4:	f109 0901 	add.w	r9, r9, #1
 800a8a8:	4599      	cmp	r9, r3
 800a8aa:	f47f af16 	bne.w	800a6da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6e6>
 800a8ae:	465b      	mov	r3, fp
 800a8b0:	46e1      	mov	r9, ip
 800a8b2:	46d3      	mov	fp, sl
 800a8b4:	46b8      	mov	r8, r7
 800a8b6:	46f4      	mov	ip, lr
 800a8b8:	469a      	mov	sl, r3
  for (int batch = 0; batch < batches; ++batch) {
 800a8ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8bc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a8be:	4413      	add	r3, r2
 800a8c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8c2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800a8c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8c6:	4413      	add	r3, r2
 800a8c8:	930e      	str	r3, [sp, #56]	; 0x38
 800a8ca:	9b05      	ldr	r3, [sp, #20]
 800a8cc:	f10b 0b01 	add.w	fp, fp, #1
 800a8d0:	459b      	cmp	fp, r3
 800a8d2:	f47f aeed 	bne.w	800a6b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6bc>
    if (size_ > kMaxSmallSize) {
 800a8d6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800a8d8:	2b05      	cmp	r3, #5
 800a8da:	dd0a      	ble.n	800a8f2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8fe>
      delete[] dims_pointer_;
 800a8dc:	9837      	ldr	r0, [sp, #220]	; 0xdc
 800a8de:	b140      	cbz	r0, 800a8f2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8fe>
 800a8e0:	f006 f976 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800a8e4:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800a8e6:	2b05      	cmp	r3, #5
 800a8e8:	dd03      	ble.n	800a8f2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8fe>
      delete[] dims_pointer_;
 800a8ea:	983d      	ldr	r0, [sp, #244]	; 0xf4
 800a8ec:	b108      	cbz	r0, 800a8f2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8fe>
 800a8ee:	f006 f96f 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800a8f2:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800a8f4:	2b05      	cmp	r3, #5
 800a8f6:	dd03      	ble.n	800a900 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x90c>
      delete[] dims_pointer_;
 800a8f8:	9843      	ldr	r0, [sp, #268]	; 0x10c
 800a8fa:	b108      	cbz	r0, 800a900 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x90c>
 800a8fc:	f006 f968 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800a900:	9b48      	ldr	r3, [sp, #288]	; 0x120
 800a902:	2b05      	cmp	r3, #5
 800a904:	dd03      	ble.n	800a90e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x91a>
      delete[] dims_pointer_;
 800a906:	9849      	ldr	r0, [sp, #292]	; 0x124
 800a908:	b108      	cbz	r0, 800a90e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x91a>
 800a90a:	f006 f961 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800a90e:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 800a910:	2b05      	cmp	r3, #5
 800a912:	dd03      	ble.n	800a91c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x928>
      delete[] dims_pointer_;
 800a914:	984f      	ldr	r0, [sp, #316]	; 0x13c
 800a916:	b108      	cbz	r0, 800a91c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x928>
 800a918:	f006 f95a 	bl	8010bd0 <_ZdaPv>
      return EvalQuantized(context, node, params, data, input, filter, bias,
 800a91c:	2000      	movs	r0, #0
}
 800a91e:	b073      	add	sp, #460	; 0x1cc
 800a920:	ecbd 8b02 	vpop	{d8}
 800a924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          float bias_value = 0.0f;
 800a928:	eef0 7a66 	vmov.f32	s15, s13
 800a92c:	e766      	b.n	800a7fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x808>
    for (int i = 0; i < size_; i++) {
 800a92e:	2800      	cmp	r0, #0
 800a930:	dd08      	ble.n	800a944 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x950>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800a932:	ab43      	add	r3, sp, #268	; 0x10c
 800a934:	e662      	b.n	800a5fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x608>
 800a936:	9b61      	ldr	r3, [sp, #388]	; 0x184
    for (int i = 0; i < size_; i++) {
 800a938:	e43d      	b.n	800a1b6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c2>
    *activation_min = 0;
 800a93a:	ed9f 8a08 	vldr	s16, [pc, #32]	; 800a95c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x968>
    *activation_max = 6;
 800a93e:	eef1 8a08 	vmov.f32	s17, #24	; 0x40c00000  6.0
 800a942:	e5fb      	b.n	800a53c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x548>
    int buffer_size = 1;
 800a944:	2201      	movs	r2, #1
 800a946:	e663      	b.n	800a610 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x61c>
 800a948:	2201      	movs	r2, #1
 800a94a:	e43e      	b.n	800a1ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d6>
  TFLITE_DCHECK(context != nullptr);
 800a94c:	f006 fc1a 	bl	8011184 <abort>
 800a950:	08016a84 	.word	0x08016a84
 800a954:	08016a94 	.word	0x08016a94
 800a958:	08016af0 	.word	0x08016af0
 800a95c:	00000000 	.word	0x00000000

0800a960 <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
 800a960:	b510      	push	{r4, lr}
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800a962:	4c06      	ldr	r4, [pc, #24]	; (800a97c <_ZN6tflite16Register_CONV_2DEv+0x1c>)
TfLiteRegistration Register_CONV_2D() {
 800a964:	4686      	mov	lr, r0
          /*version=*/0};
 800a966:	4684      	mov	ip, r0
 800a968:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a96a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a96e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a972:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 800a976:	4670      	mov	r0, lr
 800a978:	bd10      	pop	{r4, pc}
 800a97a:	bf00      	nop
 800a97c:	08014030 	.word	0x08014030

0800a980 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  }
  return status;
}

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800a980:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a982:	b10b      	cbz	r3, 800a988 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 800a984:	2124      	movs	r1, #36	; 0x24
 800a986:	4718      	bx	r3
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800a988:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800a98a:	f006 fbfb 	bl	8011184 <abort>
 800a98e:	bf00      	nop

0800a990 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>:
    }
  }
  return kTfLiteOk;
}

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
 800a990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a994:	b0dd      	sub	sp, #372	; 0x174
 800a996:	f8dd 8198 	ldr.w	r8, [sp, #408]	; 0x198
  TFLITE_DCHECK(tensor != nullptr);
 800a99a:	f1b8 0f00 	cmp.w	r8, #0
 800a99e:	f000 8230 	beq.w	800ae02 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x472>
 800a9a2:	461e      	mov	r6, r3
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
  // The 'if' condition can be removed when null handling of bias is added to
  // arm_fully_connected_s8
  if (nullptr != tflite::micro::GetTensorData<int32_t>(bias)) {
 800a9a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a9a8:	4689      	mov	r9, r1
 800a9aa:	4615      	mov	r5, r2
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f000 809c 	beq.w	800aaea <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x15a>
    const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 800a9b2:	9967      	ldr	r1, [sp, #412]	; 0x19c
 800a9b4:	4604      	mov	r4, r0
 800a9b6:	a832      	add	r0, sp, #200	; 0xc8
 800a9b8:	f7fc f872 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 800a9bc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800a9be:	2b02      	cmp	r3, #2
 800a9c0:	f040 821f 	bne.w	800ae02 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x472>
    const int batches = output_shape.Dims(0);
    const int output_depth = output_shape.Dims(1);
    const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 800a9c4:	4631      	mov	r1, r6
 800a9c6:	a838      	add	r0, sp, #224	; 0xe0
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800a9c8:	e9dd a733 	ldrd	sl, r7, [sp, #204]	; 0xcc
 800a9cc:	f7fc f868 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  inline int32_t DimensionsCount() const { return size_; }
 800a9d0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    TFLITE_DCHECK_GE(i, 0);
 800a9d2:	1e5a      	subs	r2, r3, #1
 800a9d4:	f100 8215 	bmi.w	800ae02 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x472>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800a9d8:	2b05      	cmp	r3, #5
 800a9da:	f300 8082 	bgt.w	800aae2 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x152>
 800a9de:	ab5c      	add	r3, sp, #368	; 0x170
 800a9e0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a9e4:	f852 bc8c 	ldr.w	fp, [r2, #-140]
    const int filter_dim_count = filter_shape.DimensionsCount();
    const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
    const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 800a9e8:	4629      	mov	r1, r5
 800a9ea:	a83e      	add	r0, sp, #248	; 0xf8
 800a9ec:	f7fc f858 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

    cmsis_nn_fc_params fc_params;
    fc_params.input_offset = -data.input_zero_point;
 800a9f0:	f8d9 3018 	ldr.w	r3, [r9, #24]
    fc_params.output_offset = data.output_zero_point;
    fc_params.filter_offset = -data.filter_zero_point;
 800a9f4:	f8d9 201c 	ldr.w	r2, [r9, #28]
    fc_params.output_offset = data.output_zero_point;
 800a9f8:	f8d9 1014 	ldr.w	r1, [r9, #20]
    quant_params.multiplier = data.output_multiplier;
    // TODO(b/138810107): Figure out whether output shift should be inverted
    quant_params.shift = -data.output_shift;

    cmsis_nn_dims input_dims;
    input_dims.n = batches;
 800a9fc:	f8cd a074 	str.w	sl, [sp, #116]	; 0x74
    fc_params.input_offset = -data.input_zero_point;
 800aa00:	425b      	negs	r3, r3
 800aa02:	932d      	str	r3, [sp, #180]	; 0xb4
    fc_params.output_offset = data.output_zero_point;
 800aa04:	f8d9 3004 	ldr.w	r3, [r9, #4]
    bias_dims.h = 1;
    bias_dims.w = 1;
    bias_dims.c = output_depth;

    cmsis_nn_dims output_dims;
    output_dims.n = batches;
 800aa08:	f8cd a0a4 	str.w	sl, [sp, #164]	; 0xa4
    quant_params.shift = -data.output_shift;
 800aa0c:	425b      	negs	r3, r3
 800aa0e:	931a      	str	r3, [sp, #104]	; 0x68
    input_dims.h = 1;
 800aa10:	2301      	movs	r3, #1
    input_dims.w = 1;
 800aa12:	e9cd 331e 	strd	r3, r3, [sp, #120]	; 0x78
    filter_dims.w = 1;
 800aa16:	e9cd 3322 	strd	r3, r3, [sp, #136]	; 0x88
    bias_dims.h = 1;
 800aa1a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    output_dims.h = 1;
    output_dims.w = 1;
 800aa1e:	e9cd 332a 	strd	r3, r3, [sp, #168]	; 0xa8
    bias_dims.w = 1;
 800aa22:	9327      	str	r3, [sp, #156]	; 0x9c
    fc_params.output_offset = data.output_zero_point;
 800aa24:	f8d9 3000 	ldr.w	r3, [r9]
    quant_params.multiplier = data.output_multiplier;
 800aa28:	9319      	str	r3, [sp, #100]	; 0x64
    fc_params.output_offset = data.output_zero_point;
 800aa2a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800aa2e:	9330      	str	r3, [sp, #192]	; 0xc0
 800aa30:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800aa34:	9331      	str	r3, [sp, #196]	; 0xc4
 800aa36:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800aa3a:	932f      	str	r3, [sp, #188]	; 0xbc
    output_dims.c = output_depth;

    cmsis_nn_context ctx;
    ctx.buf = nullptr;
 800aa3c:	2300      	movs	r3, #0
    fc_params.filter_offset = -data.filter_zero_point;
 800aa3e:	4252      	negs	r2, r2
    ctx.size = 0;

    if (data.buffer_idx > -1) {
 800aa40:	4299      	cmp	r1, r3
    filter_dims.n = accum_depth;
 800aa42:	e9cd bb20 	strd	fp, fp, [sp, #128]	; 0x80
    filter_dims.c = output_depth;
 800aa46:	9724      	str	r7, [sp, #144]	; 0x90
    bias_dims.c = output_depth;
 800aa48:	9728      	str	r7, [sp, #160]	; 0xa0
    output_dims.c = output_depth;
 800aa4a:	972c      	str	r7, [sp, #176]	; 0xb0
    fc_params.filter_offset = -data.filter_zero_point;
 800aa4c:	922e      	str	r2, [sp, #184]	; 0xb8
    ctx.size = 0;
 800aa4e:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
    if (data.buffer_idx > -1) {
 800aa52:	db03      	blt.n	800aa5c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xcc>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 800aa54:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800aa56:	4620      	mov	r0, r4
 800aa58:	4798      	blx	r3
 800aa5a:	901b      	str	r0, [sp, #108]	; 0x6c
 800aa5c:	2d00      	cmp	r5, #0
 800aa5e:	f000 81d0 	beq.w	800ae02 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x472>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800aa62:	682b      	ldr	r3, [r5, #0]
  TFLITE_DCHECK(tensor != nullptr);
 800aa64:	2e00      	cmp	r6, #0
 800aa66:	f000 81cc 	beq.w	800ae02 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x472>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800aa6a:	9867      	ldr	r0, [sp, #412]	; 0x19c
  return reinterpret_cast<const T*>(tensor->data.raw);
 800aa6c:	6832      	ldr	r2, [r6, #0]
 800aa6e:	f8d8 1000 	ldr.w	r1, [r8]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800aa72:	2800      	cmp	r0, #0
 800aa74:	f000 819b 	beq.w	800adae <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x41e>
    }

    TF_LITE_ENSURE_EQ(
 800aa78:	6800      	ldr	r0, [r0, #0]
 800aa7a:	9006      	str	r0, [sp, #24]
 800aa7c:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
 800aa80:	af25      	add	r7, sp, #148	; 0x94
 800aa82:	f10d 0a84 	add.w	sl, sp, #132	; 0x84
 800aa86:	9104      	str	r1, [sp, #16]
 800aa88:	9202      	str	r2, [sp, #8]
 800aa8a:	a92d      	add	r1, sp, #180	; 0xb4
 800aa8c:	9300      	str	r3, [sp, #0]
 800aa8e:	f8cd 9014 	str.w	r9, [sp, #20]
 800aa92:	ab1d      	add	r3, sp, #116	; 0x74
 800aa94:	9703      	str	r7, [sp, #12]
 800aa96:	f8cd a004 	str.w	sl, [sp, #4]
 800aa9a:	aa19      	add	r2, sp, #100	; 0x64
 800aa9c:	a81b      	add	r0, sp, #108	; 0x6c
 800aa9e:	9309      	str	r3, [sp, #36]	; 0x24
 800aaa0:	9108      	str	r1, [sp, #32]
 800aaa2:	f003 fef5 	bl	800e890 <arm_fully_connected_s8>
 800aaa6:	e9dd 1308 	ldrd	r1, r3, [sp, #32]
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	f040 810d 	bne.w	800acca <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x33a>
    if (size_ > kMaxSmallSize) {
 800aab0:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800aab2:	2b05      	cmp	r3, #5
 800aab4:	dd03      	ble.n	800aabe <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x12e>
      delete[] dims_pointer_;
 800aab6:	983f      	ldr	r0, [sp, #252]	; 0xfc
 800aab8:	b108      	cbz	r0, 800aabe <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x12e>
 800aaba:	f006 f889 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800aabe:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800aac0:	2b05      	cmp	r3, #5
 800aac2:	dd03      	ble.n	800aacc <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x13c>
      delete[] dims_pointer_;
 800aac4:	9839      	ldr	r0, [sp, #228]	; 0xe4
 800aac6:	b108      	cbz	r0, 800aacc <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x13c>
 800aac8:	f006 f882 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800aacc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800aace:	2b05      	cmp	r3, #5
 800aad0:	dd03      	ble.n	800aada <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x14a>
      delete[] dims_pointer_;
 800aad2:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800aad4:	2800      	cmp	r0, #0
 800aad6:	f040 80f5 	bne.w	800acc4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x334>
        tflite::micro::GetTensorShape(bias),
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int8_t>(output));
  }
  return kTfLiteOk;
 800aada:	2000      	movs	r0, #0
}
 800aadc:	b05d      	add	sp, #372	; 0x174
 800aade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800aae2:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800aae4:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 800aae8:	e77e      	b.n	800a9e8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x58>
    op_params.output_shift = -data.output_shift;
 800aaea:	684b      	ldr	r3, [r1, #4]
    op_params.output_multiplier = data.output_multiplier;
 800aaec:	f8d9 4000 	ldr.w	r4, [r9]
    op_params.output_shift = -data.output_shift;
 800aaf0:	930c      	str	r3, [sp, #48]	; 0x30
        op_params, tflite::micro::GetTensorShape(input),
 800aaf2:	4611      	mov	r1, r2
    op_params.weights_offset = -data.filter_zero_point;
 800aaf4:	e9d9 a206 	ldrd	sl, r2, [r9, #24]
 800aaf8:	9209      	str	r2, [sp, #36]	; 0x24
    op_params.output_offset = data.output_zero_point;
 800aafa:	f8d9 2020 	ldr.w	r2, [r9, #32]
 800aafe:	920e      	str	r2, [sp, #56]	; 0x38
    op_params.quantized_activation_max = data.output_activation_max;
 800ab00:	e9d9 7202 	ldrd	r7, r2, [r9, #8]
        op_params, tflite::micro::GetTensorShape(input),
 800ab04:	a856      	add	r0, sp, #344	; 0x158
    op_params.quantized_activation_max = data.output_activation_max;
 800ab06:	9212      	str	r2, [sp, #72]	; 0x48
    op_params.output_shift = -data.output_shift;
 800ab08:	f1c3 0900 	rsb	r9, r3, #0
        op_params, tflite::micro::GetTensorShape(input),
 800ab0c:	f7fb ffc8 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800ab10:	2d00      	cmp	r5, #0
 800ab12:	f000 8176 	beq.w	800ae02 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x472>
        tflite::micro::GetTensorShape(filter),
 800ab16:	4631      	mov	r1, r6
 800ab18:	a850      	add	r0, sp, #320	; 0x140
  return reinterpret_cast<const T*>(tensor->data.raw);
 800ab1a:	682d      	ldr	r5, [r5, #0]
 800ab1c:	f7fb ffc0 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800ab20:	2e00      	cmp	r6, #0
 800ab22:	f000 816e 	beq.w	800ae02 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x472>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800ab26:	6833      	ldr	r3, [r6, #0]
 800ab28:	9317      	str	r3, [sp, #92]	; 0x5c
        tflite::micro::GetTensorShape(bias),
 800ab2a:	4641      	mov	r1, r8
 800ab2c:	a84a      	add	r0, sp, #296	; 0x128
 800ab2e:	f7fb ffb7 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800ab32:	f8d8 3000 	ldr.w	r3, [r8]
        tflite::micro::GetTensorShape(output),
 800ab36:	9967      	ldr	r1, [sp, #412]	; 0x19c
 800ab38:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab3a:	a844      	add	r0, sp, #272	; 0x110
 800ab3c:	f7fb ffb0 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800ab40:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800ab42:	b10b      	cbz	r3, 800ab48 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x1b8>
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	9367      	str	r3, [sp, #412]	; 0x19c
  inline int32_t DimensionsCount() const { return size_; }
 800ab48:	9a50      	ldr	r2, [sp, #320]	; 0x140
  const int32_t output_offset = params.output_offset;
  const int32_t output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32_t output_activation_min = params.quantized_activation_min;
  const int32_t output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800ab4a:	2a01      	cmp	r2, #1
 800ab4c:	f340 8159 	ble.w	800ae02 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x472>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 800ab50:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800ab52:	2b02      	cmp	r3, #2
 800ab54:	f040 8155 	bne.w	800ae02 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x472>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800ab58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab5a:	429f      	cmp	r7, r3
 800ab5c:	f300 8151 	bgt.w	800ae02 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x472>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800ab60:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ab62:	9846      	ldr	r0, [sp, #280]	; 0x118
 800ab64:	9316      	str	r3, [sp, #88]	; 0x58
 800ab66:	2a05      	cmp	r2, #5
 800ab68:	9014      	str	r0, [sp, #80]	; 0x50
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = output_shape.Dims(0);
  const int output_depth = output_shape.Dims(1);
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 800ab6a:	f1a2 0302 	sub.w	r3, r2, #2
 800ab6e:	f300 80e7 	bgt.w	800ad40 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x3b0>
 800ab72:	a95c      	add	r1, sp, #368	; 0x170
 800ab74:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ab78:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ab7a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800ab7e:	428b      	cmp	r3, r1
 800ab80:	f2c0 813f 	blt.w	800ae02 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x472>
 800ab84:	ab5c      	add	r3, sp, #368	; 0x170
 800ab86:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800ab8a:	f852 6c30 	ldr.w	r6, [r2, #-48]
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
  for (int b = 0; b < batches; ++b) {
 800ab8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f340 8081 	ble.w	800ac98 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x308>
  int left_shift = shift > 0 ? shift : 0;
 800ab96:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 800ab9a:	930d      	str	r3, [sp, #52]	; 0x34
 800ab9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab9e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800aba0:	950a      	str	r5, [sp, #40]	; 0x28
 800aba2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aba6:	461a      	mov	r2, r3
 800aba8:	930f      	str	r3, [sp, #60]	; 0x3c
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800abaa:	2301      	movs	r3, #1
 800abac:	4093      	lsls	r3, r2
 800abae:	3b01      	subs	r3, #1
 800abb0:	9310      	str	r3, [sp, #64]	; 0x40
  return a >> offset;
 800abb2:	105b      	asrs	r3, r3, #1
 800abb4:	9311      	str	r3, [sp, #68]	; 0x44
 800abb6:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800abb8:	2200      	movs	r2, #0
 800abba:	9213      	str	r2, [sp, #76]	; 0x4c
 800abbc:	eb03 0901 	add.w	r9, r3, r1
 800abc0:	eb05 0806 	add.w	r8, r5, r6
 800abc4:	9215      	str	r2, [sp, #84]	; 0x54
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800abc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800abc8:	2b00      	cmp	r3, #0
 800abca:	dd4f      	ble.n	800ac6c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x2dc>
 800abcc:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800abce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800abd0:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 800abd4:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 800abd8:	189d      	adds	r5, r3, r2
      int32_t acc = 0;
      for (int d = 0; d < accum_depth; ++d) {
 800abda:	2e00      	cmp	r6, #0
 800abdc:	f340 80c3 	ble.w	800ad66 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x3d6>
 800abe0:	980a      	ldr	r0, [sp, #40]	; 0x28
      int32_t acc = 0;
 800abe2:	9408      	str	r4, [sp, #32]
 800abe4:	f10c 3bff 	add.w	fp, ip, #4294967295
 800abe8:	2300      	movs	r3, #0
        int32_t input_val = input_data[b * accum_depth + d];
 800abea:	f910 1b01 	ldrsb.w	r1, [r0], #1
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 800abee:	f91b 2f01 	ldrsb.w	r2, [fp, #1]!
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800abf2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800abf4:	eba1 010a 	sub.w	r1, r1, sl
 800abf8:	1b12      	subs	r2, r2, r4
      for (int d = 0; d < accum_depth; ++d) {
 800abfa:	4580      	cmp	r8, r0
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800abfc:	fb01 3302 	mla	r3, r1, r2, r3
      for (int d = 0; d < accum_depth; ++d) {
 800ac00:	d1f3      	bne.n	800abea <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x25a>
 800ac02:	9c08      	ldr	r4, [sp, #32]
      }
      if (bias_data) {
 800ac04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac06:	b112      	cbz	r2, 800ac0e <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x27e>
        acc += bias_data[out_c];
 800ac08:	f8de 2000 	ldr.w	r2, [lr]
 800ac0c:	4413      	add	r3, r2
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 800ac0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac10:	4093      	lsls	r3, r2
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800ac12:	429c      	cmp	r4, r3
 800ac14:	f000 80a9 	beq.w	800ad6a <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x3da>
  std::int64_t ab_64 = a_64 * b_64;
 800ac18:	fb83 3104 	smull	r3, r1, r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800ac1c:	2900      	cmp	r1, #0
 800ac1e:	f2c0 80b5 	blt.w	800ad8c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x3fc>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800ac22:	f113 4380 	adds.w	r3, r3, #1073741824	; 0x40000000
 800ac26:	f141 0100 	adc.w	r1, r1, #0
 800ac2a:	0fdb      	lsrs	r3, r3, #31
 800ac2c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  assert(exponent <= 31);
 800ac30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac32:	2a1f      	cmp	r2, #31
 800ac34:	f300 80de 	bgt.w	800adf4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x464>
  return a & b;
 800ac38:	9a10      	ldr	r2, [sp, #64]	; 0x40
  return a >> offset;
 800ac3a:	980f      	ldr	r0, [sp, #60]	; 0x3c
  return a & b;
 800ac3c:	ea02 0103 	and.w	r1, r2, r3
  return a + b;
 800ac40:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ac42:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
  return a >> offset;
 800ac46:	4103      	asrs	r3, r0
  return a + b;
 800ac48:	4291      	cmp	r1, r2
 800ac4a:	bfc8      	it	gt
 800ac4c:	3301      	addgt	r3, #1
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
      acc += output_offset;
 800ac4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac50:	4413      	add	r3, r2
      if (__a < __b)
 800ac52:	429f      	cmp	r7, r3
 800ac54:	dc7d      	bgt.n	800ad52 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x3c2>
      acc = std::max(acc, output_activation_min);
      acc = std::min(acc, output_activation_max);
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 800ac56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	bfa8      	it	ge
 800ac5c:	4613      	movge	r3, r2
 800ac5e:	f805 3b01 	strb.w	r3, [r5], #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800ac62:	454d      	cmp	r5, r9
 800ac64:	f10e 0e04 	add.w	lr, lr, #4
 800ac68:	44b4      	add	ip, r6
 800ac6a:	d1b6      	bne.n	800abda <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x24a>
  for (int b = 0; b < batches; ++b) {
 800ac6c:	e9dd 2113 	ldrd	r2, r1, [sp, #76]	; 0x4c
 800ac70:	440a      	add	r2, r1
 800ac72:	9213      	str	r2, [sp, #76]	; 0x4c
 800ac74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac78:	4432      	add	r2, r6
 800ac7a:	920a      	str	r2, [sp, #40]	; 0x28
 800ac7c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ac7e:	3301      	adds	r3, #1
 800ac80:	4293      	cmp	r3, r2
 800ac82:	9315      	str	r3, [sp, #84]	; 0x54
 800ac84:	4489      	add	r9, r1
 800ac86:	44b0      	add	r8, r6
 800ac88:	d19d      	bne.n	800abc6 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x236>
    if (size_ > kMaxSmallSize) {
 800ac8a:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800ac8c:	2b05      	cmp	r3, #5
 800ac8e:	dd03      	ble.n	800ac98 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x308>
      delete[] dims_pointer_;
 800ac90:	9845      	ldr	r0, [sp, #276]	; 0x114
 800ac92:	b108      	cbz	r0, 800ac98 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x308>
 800ac94:	f005 ff9c 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800ac98:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800ac9a:	2b05      	cmp	r3, #5
 800ac9c:	dd03      	ble.n	800aca6 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x316>
      delete[] dims_pointer_;
 800ac9e:	984b      	ldr	r0, [sp, #300]	; 0x12c
 800aca0:	b108      	cbz	r0, 800aca6 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x316>
 800aca2:	f005 ff95 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800aca6:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800aca8:	2b05      	cmp	r3, #5
 800acaa:	dd03      	ble.n	800acb4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x324>
      delete[] dims_pointer_;
 800acac:	9851      	ldr	r0, [sp, #324]	; 0x144
 800acae:	b108      	cbz	r0, 800acb4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x324>
 800acb0:	f005 ff8e 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800acb4:	9b56      	ldr	r3, [sp, #344]	; 0x158
 800acb6:	2b05      	cmp	r3, #5
 800acb8:	f77f af0f 	ble.w	800aada <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x14a>
      delete[] dims_pointer_;
 800acbc:	9857      	ldr	r0, [sp, #348]	; 0x15c
 800acbe:	2800      	cmp	r0, #0
 800acc0:	f43f af0b 	beq.w	800aada <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x14a>
 800acc4:	f005 ff84 	bl	8010bd0 <_ZdaPv>
 800acc8:	e707      	b.n	800aada <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x14a>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800acca:	f8d5 c000 	ldr.w	ip, [r5]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800acce:	9d67      	ldr	r5, [sp, #412]	; 0x19c
  return reinterpret_cast<const T*>(tensor->data.raw);
 800acd0:	6830      	ldr	r0, [r6, #0]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800acd2:	682d      	ldr	r5, [r5, #0]
 800acd4:	9567      	str	r5, [sp, #412]	; 0x19c
  return reinterpret_cast<const T*>(tensor->data.raw);
 800acd6:	f8d8 2000 	ldr.w	r2, [r8]
    TF_LITE_ENSURE_EQ(
 800acda:	6965      	ldr	r5, [r4, #20]
 800acdc:	9e67      	ldr	r6, [sp, #412]	; 0x19c
 800acde:	f8cd c000 	str.w	ip, [sp]
 800ace2:	e9cd 7203 	strd	r7, r2, [sp, #12]
 800ace6:	e9cd a001 	strd	sl, r0, [sp, #4]
 800acea:	aa19      	add	r2, sp, #100	; 0x64
 800acec:	e9cd 9605 	strd	r9, r6, [sp, #20]
 800acf0:	a81b      	add	r0, sp, #108	; 0x6c
 800acf2:	f003 fdcd 	bl	800e890 <arm_fully_connected_s8>
 800acf6:	4944      	ldr	r1, [pc, #272]	; (800ae08 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x478>)
 800acf8:	4b44      	ldr	r3, [pc, #272]	; (800ae0c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x47c>)
 800acfa:	2200      	movs	r2, #0
 800acfc:	e9cd 0202 	strd	r0, r2, [sp, #8]
 800ad00:	e9cd 3100 	strd	r3, r1, [sp]
 800ad04:	4a42      	ldr	r2, [pc, #264]	; (800ae10 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x480>)
 800ad06:	4943      	ldr	r1, [pc, #268]	; (800ae14 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x484>)
 800ad08:	23c7      	movs	r3, #199	; 0xc7
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	47a8      	blx	r5
    if (size_ > kMaxSmallSize) {
 800ad0e:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800ad10:	2b05      	cmp	r3, #5
 800ad12:	dd03      	ble.n	800ad1c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x38c>
      delete[] dims_pointer_;
 800ad14:	983f      	ldr	r0, [sp, #252]	; 0xfc
 800ad16:	b108      	cbz	r0, 800ad1c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x38c>
 800ad18:	f005 ff5a 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800ad1c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800ad1e:	2b05      	cmp	r3, #5
 800ad20:	dd03      	ble.n	800ad2a <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x39a>
      delete[] dims_pointer_;
 800ad22:	9839      	ldr	r0, [sp, #228]	; 0xe4
 800ad24:	b108      	cbz	r0, 800ad2a <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x39a>
 800ad26:	f005 ff53 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800ad2a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800ad2c:	2b05      	cmp	r3, #5
 800ad2e:	dd03      	ble.n	800ad38 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x3a8>
      delete[] dims_pointer_;
 800ad30:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800ad32:	b108      	cbz	r0, 800ad38 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x3a8>
 800ad34:	f005 ff4c 	bl	8010bd0 <_ZdaPv>
 800ad38:	2001      	movs	r0, #1
}
 800ad3a:	b05d      	add	sp, #372	; 0x174
 800ad3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800ad40:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800ad42:	0099      	lsls	r1, r3, #2
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 800ad44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad48:	4283      	cmp	r3, r0
 800ad4a:	db5a      	blt.n	800ae02 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x472>
 800ad4c:	440a      	add	r2, r1
 800ad4e:	6856      	ldr	r6, [r2, #4]
 800ad50:	e71d      	b.n	800ab8e <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x1fe>
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 800ad52:	f805 7b01 	strb.w	r7, [r5], #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800ad56:	454d      	cmp	r5, r9
 800ad58:	f10e 0e04 	add.w	lr, lr, #4
 800ad5c:	44b4      	add	ip, r6
 800ad5e:	d085      	beq.n	800ac6c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x2dc>
      for (int d = 0; d < accum_depth; ++d) {
 800ad60:	2e00      	cmp	r6, #0
 800ad62:	f73f af3d 	bgt.w	800abe0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x250>
      int32_t acc = 0;
 800ad66:	2300      	movs	r3, #0
 800ad68:	e74c      	b.n	800ac04 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x274>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800ad6a:	4a2b      	ldr	r2, [pc, #172]	; (800ae18 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x488>)
  std::int64_t ab_64 = a_64 * b_64;
 800ad6c:	fb84 3104 	smull	r3, r1, r4, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800ad70:	2900      	cmp	r1, #0
 800ad72:	bfb3      	iteet	lt
 800ad74:	4610      	movlt	r0, r2
 800ad76:	f04f 4080 	movge.w	r0, #1073741824	; 0x40000000
 800ad7a:	2200      	movge	r2, #0
 800ad7c:	f04f 32ff 	movlt.w	r2, #4294967295
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800ad80:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800ad84:	d105      	bne.n	800ad92 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x402>
 800ad86:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ad8a:	e751      	b.n	800ac30 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x2a0>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800ad8c:	4822      	ldr	r0, [pc, #136]	; (800ae18 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x488>)
 800ad8e:	f04f 32ff 	mov.w	r2, #4294967295
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800ad92:	18c3      	adds	r3, r0, r3
 800ad94:	eb42 0201 	adc.w	r2, r2, r1
 800ad98:	2a00      	cmp	r2, #0
 800ad9a:	da04      	bge.n	800ada6 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x416>
 800ad9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ada0:	185b      	adds	r3, r3, r1
 800ada2:	f142 0200 	adc.w	r2, r2, #0
 800ada6:	0fdb      	lsrs	r3, r3, #31
 800ada8:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800adac:	e740      	b.n	800ac30 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x2a0>
    TF_LITE_ENSURE_EQ(
 800adae:	9300      	str	r3, [sp, #0]
 800adb0:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
 800adb4:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800adb6:	9104      	str	r1, [sp, #16]
 800adb8:	af25      	add	r7, sp, #148	; 0x94
 800adba:	f10d 0a84 	add.w	sl, sp, #132	; 0x84
 800adbe:	a92d      	add	r1, sp, #180	; 0xb4
 800adc0:	9202      	str	r2, [sp, #8]
 800adc2:	9306      	str	r3, [sp, #24]
 800adc4:	f8cd 9014 	str.w	r9, [sp, #20]
 800adc8:	ab1d      	add	r3, sp, #116	; 0x74
 800adca:	9703      	str	r7, [sp, #12]
 800adcc:	f8cd a004 	str.w	sl, [sp, #4]
 800add0:	aa19      	add	r2, sp, #100	; 0x64
 800add2:	a81b      	add	r0, sp, #108	; 0x6c
 800add4:	9309      	str	r3, [sp, #36]	; 0x24
 800add6:	9108      	str	r1, [sp, #32]
 800add8:	f003 fd5a 	bl	800e890 <arm_fully_connected_s8>
 800addc:	e9dd 1308 	ldrd	r1, r3, [sp, #32]
 800ade0:	2800      	cmp	r0, #0
 800ade2:	f43f ae65 	beq.w	800aab0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x120>
 800ade6:	f8d5 c000 	ldr.w	ip, [r5]
 800adea:	6830      	ldr	r0, [r6, #0]
 800adec:	f8d8 2000 	ldr.w	r2, [r8]
 800adf0:	6965      	ldr	r5, [r4, #20]
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800adf2:	e773      	b.n	800acdc <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x34c>
  assert(exponent <= 31);
 800adf4:	4b09      	ldr	r3, [pc, #36]	; (800ae1c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x48c>)
 800adf6:	4a0a      	ldr	r2, [pc, #40]	; (800ae20 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x490>)
 800adf8:	480a      	ldr	r0, [pc, #40]	; (800ae24 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x494>)
 800adfa:	f240 1167 	movw	r1, #359	; 0x167
 800adfe:	f006 f9c9 	bl	8011194 <__assert_func>
  TFLITE_DCHECK(tensor != nullptr);
 800ae02:	f006 f9bf 	bl	8011184 <abort>
 800ae06:	bf00      	nop
 800ae08:	0801748c 	.word	0x0801748c
 800ae0c:	080174a0 	.word	0x080174a0
 800ae10:	08017448 	.word	0x08017448
 800ae14:	08015678 	.word	0x08015678
 800ae18:	c0000001 	.word	0xc0000001
 800ae1c:	08016a84 	.word	0x08016a84
 800ae20:	08016a94 	.word	0x08016a94
 800ae24:	08016af0 	.word	0x08016af0

0800ae28 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
      tflite::micro::GetTensorShape(output),
      tflite::micro::GetTensorData<float>(output));
  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800ae28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae2c:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800ae30:	694e      	ldr	r6, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800ae32:	b0dd      	sub	sp, #372	; 0x174
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800ae34:	2e00      	cmp	r6, #0
 800ae36:	f000 8404 	beq.w	800b642 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x81a>
  TFLITE_DCHECK(context != nullptr);
 800ae3a:	4680      	mov	r8, r0
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	f000 8400 	beq.w	800b642 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x81a>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800ae42:	680b      	ldr	r3, [r1, #0]
 800ae44:	460d      	mov	r5, r1
 800ae46:	6859      	ldr	r1, [r3, #4]
 800ae48:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800ae4a:	4798      	blx	r3
 800ae4c:	682b      	ldr	r3, [r5, #0]
 800ae4e:	4681      	mov	r9, r0
 800ae50:	6899      	ldr	r1, [r3, #8]
 800ae52:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800ae56:	4640      	mov	r0, r8
 800ae58:	4798      	blx	r3
 800ae5a:	682b      	ldr	r3, [r5, #0]
 800ae5c:	4607      	mov	r7, r0
 800ae5e:	68d9      	ldr	r1, [r3, #12]
 800ae60:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800ae64:	4640      	mov	r0, r8
 800ae66:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800ae68:	686b      	ldr	r3, [r5, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800ae6a:	4604      	mov	r4, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800ae6c:	6859      	ldr	r1, [r3, #4]
 800ae6e:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800ae72:	4640      	mov	r0, r8
 800ae74:	4798      	blx	r3
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kBiasTensor);
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
 800ae76:	6929      	ldr	r1, [r5, #16]
 800ae78:	9007      	str	r0, [sp, #28]
 800ae7a:	2900      	cmp	r1, #0
 800ae7c:	f000 83e1 	beq.w	800b642 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x81a>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 800ae80:	f899 0008 	ldrb.w	r0, [r9, #8]
 800ae84:	2803      	cmp	r0, #3
 800ae86:	d015      	beq.n	800aeb4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8c>
 800ae88:	2809      	cmp	r0, #9
 800ae8a:	f000 820d 	beq.w	800b2a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x480>
 800ae8e:	2801      	cmp	r0, #1
 800ae90:	f000 8128 	beq.w	800b0e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2bc>

    case kTfLiteUInt8:
      return EvalQuantized(context, node, data, input, filter, bias, output);

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800ae94:	f8d8 4014 	ldr.w	r4, [r8, #20]
 800ae98:	f7f8 fcf0 	bl	800387c <TfLiteTypeGetName>
 800ae9c:	f899 3008 	ldrb.w	r3, [r9, #8]
 800aea0:	498c      	ldr	r1, [pc, #560]	; (800b0d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
 800aea2:	4602      	mov	r2, r0
 800aea4:	4640      	mov	r0, r8
 800aea6:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800aea8:	2001      	movs	r0, #1
  }
  return kTfLiteOk;
}
 800aeaa:	b05d      	add	sp, #372	; 0x174
 800aeac:	ecbd 8b02 	vpop	{d8}
 800aeb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (output->type) {
 800aeb4:	9a07      	ldr	r2, [sp, #28]
  op_params.output_shift = -data.output_shift;
 800aeb6:	684b      	ldr	r3, [r1, #4]
  switch (output->type) {
 800aeb8:	7a10      	ldrb	r0, [r2, #8]
  const int32_t output_offset = data.output_zero_point;
 800aeba:	6a0a      	ldr	r2, [r1, #32]
 800aebc:	9206      	str	r2, [sp, #24]
  op_params.quantized_activation_min = data.output_activation_min;
 800aebe:	688a      	ldr	r2, [r1, #8]
 800aec0:	9204      	str	r2, [sp, #16]
  switch (output->type) {
 800aec2:	2803      	cmp	r0, #3
  op_params.quantized_activation_max = data.output_activation_max;
 800aec4:	68ca      	ldr	r2, [r1, #12]
  op_params.output_multiplier = data.output_multiplier;
 800aec6:	f8d1 b000 	ldr.w	fp, [r1]
  op_params.output_shift = -data.output_shift;
 800aeca:	9303      	str	r3, [sp, #12]
  const int32_t filter_offset = -data.filter_zero_point;
 800aecc:	e9d1 5606 	ldrd	r5, r6, [r1, #24]
  op_params.quantized_activation_max = data.output_activation_max;
 800aed0:	9205      	str	r2, [sp, #20]
  op_params.output_shift = -data.output_shift;
 800aed2:	f1c3 0a00 	rsb	sl, r3, #0
  switch (output->type) {
 800aed6:	f000 8200 	beq.w	800b2da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4b2>
 800aeda:	2807      	cmp	r0, #7
 800aedc:	f040 81f1 	bne.w	800b2c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x49a>
      TF_LITE_FULLY_CONNECTED(int16_t);
 800aee0:	4649      	mov	r1, r9
 800aee2:	a844      	add	r0, sp, #272	; 0x110
 800aee4:	f7fb fddc 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800aee8:	4639      	mov	r1, r7
 800aeea:	a84a      	add	r0, sp, #296	; 0x128
  return reinterpret_cast<const T*>(tensor->data.raw);
 800aeec:	f8d9 9000 	ldr.w	r9, [r9]
 800aef0:	f7fb fdd6 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800aef4:	2f00      	cmp	r7, #0
 800aef6:	f000 83a4 	beq.w	800b642 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x81a>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	9311      	str	r3, [sp, #68]	; 0x44
 800aefe:	4621      	mov	r1, r4
 800af00:	a850      	add	r0, sp, #320	; 0x140
 800af02:	f7fb fdcd 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800af06:	2c00      	cmp	r4, #0
 800af08:	f000 839b 	beq.w	800b642 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x81a>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800af0c:	6823      	ldr	r3, [r4, #0]
 800af0e:	9c07      	ldr	r4, [sp, #28]
 800af10:	9312      	str	r3, [sp, #72]	; 0x48
 800af12:	4621      	mov	r1, r4
 800af14:	a856      	add	r0, sp, #344	; 0x158
 800af16:	f7fb fdc3 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800af1a:	6823      	ldr	r3, [r4, #0]
 800af1c:	9313      	str	r3, [sp, #76]	; 0x4c
  const int32_t output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32_t output_activation_min = params.quantized_activation_min;
  const int32_t output_activation_max = params.quantized_activation_max;

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800af1e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800af22:	4293      	cmp	r3, r2
 800af24:	f300 838d 	bgt.w	800b642 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x81a>
  TFLITE_DCHECK_EQ(output_offset, 0);
 800af28:	9b06      	ldr	r3, [sp, #24]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	f040 8389 	bne.w	800b642 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x81a>
  inline int32_t DimensionsCount() const { return size_; }
 800af30:	9b56      	ldr	r3, [sp, #344]	; 0x158
 800af32:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800af34:	930d      	str	r3, [sp, #52]	; 0x34
// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
  const int dims_count = shape.DimensionsCount();
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800af36:	1e5a      	subs	r2, r3, #1
 800af38:	f100 8383 	bmi.w	800b642 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x81a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800af3c:	2b05      	cmp	r3, #5
 800af3e:	f300 82f4 	bgt.w	800b52a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x702>
  const auto* dims_data = shape.DimsData();
  int flat_size = 1;
  for (int i = 0; i < dims_count; ++i) {
 800af42:	2b00      	cmp	r3, #0
 800af44:	f340 8374 	ble.w	800b630 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x808>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800af48:	a857      	add	r0, sp, #348	; 0x15c
 800af4a:	2100      	movs	r1, #0
 800af4c:	2301      	movs	r3, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800af4e:	4291      	cmp	r1, r2
 800af50:	f000 8346 	beq.w	800b5e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7b8>
 800af54:	f850 7021 	ldr.w	r7, [r0, r1, lsl #2]
 800af58:	fb07 f303 	mul.w	r3, r7, r3
  for (int i = 0; i < dims_count; ++i) {
 800af5c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800af5e:	3101      	adds	r1, #1
 800af60:	428f      	cmp	r7, r1
 800af62:	d1f4      	bne.n	800af4e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x126>
    TFLITE_DCHECK_GE(i, 0);
 800af64:	1ea1      	subs	r1, r4, #2
  int flat_size = 1;
 800af66:	930e      	str	r3, [sp, #56]	; 0x38
    TFLITE_DCHECK_GE(i, 0);
 800af68:	f100 836b 	bmi.w	800b642 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x81a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800af6c:	2c05      	cmp	r4, #5
 800af6e:	f340 8355 	ble.w	800b61c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7f4>
 800af72:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 800af74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800af78:	930c      	str	r3, [sp, #48]	; 0x30
 800af7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af7c:	2b05      	cmp	r3, #5
 800af7e:	f340 8347 	ble.w	800b610 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7e8>
 800af82:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 800af84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800af88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af8a:	4293      	cmp	r3, r2
 800af8c:	f040 8359 	bne.w	800b642 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x81a>
    TFLITE_DCHECK_GE(i, 0);
 800af90:	1e62      	subs	r2, r4, #1
 800af92:	f100 8356 	bmi.w	800b642 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x81a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800af96:	2c05      	cmp	r4, #5
 800af98:	f340 8334 	ble.w	800b604 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7dc>
 800af9c:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 800af9e:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
  for (int b = 0; b < batches; ++b) {
 800afa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	dd76      	ble.n	800b096 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x26e>
  const int32_t filter_offset = -data.filter_zero_point;
 800afa8:	4273      	negs	r3, r6
 800afaa:	9310      	str	r3, [sp, #64]	; 0x40
  int left_shift = shift > 0 ? shift : 0;
 800afac:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800afb0:	930b      	str	r3, [sp, #44]	; 0x2c
 800afb2:	9b03      	ldr	r3, [sp, #12]
 800afb4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800afb8:	f8cd 901c 	str.w	r9, [sp, #28]
 800afbc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800afc0:	461a      	mov	r2, r3
 800afc2:	930a      	str	r3, [sp, #40]	; 0x28
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800afc4:	2301      	movs	r3, #1
 800afc6:	4093      	lsls	r3, r2
 800afc8:	3b01      	subs	r3, #1
  const int32_t input_offset = -data.input_zero_point;
 800afca:	426d      	negs	r5, r5
 800afcc:	9308      	str	r3, [sp, #32]
  return a >> offset;
 800afce:	105b      	asrs	r3, r3, #1
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32_t accum = bias_data[out_c];
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
        int16_t input_val = input_data[b * accum_depth + d] + input_offset;
 800afd0:	b2ad      	uxth	r5, r5
 800afd2:	9309      	str	r3, [sp, #36]	; 0x24
 800afd4:	eb09 0608 	add.w	r6, r9, r8
 800afd8:	f04f 0c00 	mov.w	ip, #0
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800afdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afde:	2b00      	cmp	r3, #0
 800afe0:	4463      	add	r3, ip
 800afe2:	930f      	str	r3, [sp, #60]	; 0x3c
 800afe4:	dd4b      	ble.n	800b07e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x256>
 800afe6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800afe8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800afea:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
        int16_t filter_val =
            filter_data[out_c * accum_depth + d] + filter_offset;
 800afee:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
 800aff2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800aff6:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 800affa:	f1a1 0904 	sub.w	r9, r1, #4
 800affe:	9304      	str	r3, [sp, #16]
      for (int d = 0; d < accum_depth; ++d) {
 800b000:	f1b8 0f00 	cmp.w	r8, #0
      int32_t accum = bias_data[out_c];
 800b004:	f859 3f04 	ldr.w	r3, [r9, #4]!
      for (int d = 0; d < accum_depth; ++d) {
 800b008:	dd0c      	ble.n	800b024 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fc>
            filter_data[out_c * accum_depth + d] + filter_offset;
 800b00a:	9807      	ldr	r0, [sp, #28]
 800b00c:	f10e 34ff 	add.w	r4, lr, #4294967295
        int16_t input_val = input_data[b * accum_depth + d] + input_offset;
 800b010:	f810 2b01 	ldrb.w	r2, [r0], #1
            filter_data[out_c * accum_depth + d] + filter_offset;
 800b014:	f814 1f01 	ldrb.w	r1, [r4, #1]!
        int16_t input_val = input_data[b * accum_depth + d] + input_offset;
 800b018:	442a      	add	r2, r5
            filter_data[out_c * accum_depth + d] + filter_offset;
 800b01a:	4439      	add	r1, r7
      for (int d = 0; d < accum_depth; ++d) {
 800b01c:	4286      	cmp	r6, r0
        accum += filter_val * input_val;
 800b01e:	fb11 3302 	smlabb	r3, r1, r2, r3
      for (int d = 0; d < accum_depth; ++d) {
 800b022:	d1f5      	bne.n	800b010 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e8>
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 800b024:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b026:	4093      	lsls	r3, r2
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800b028:	459b      	cmp	fp, r3
 800b02a:	f000 8288 	beq.w	800b53e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x716>
  std::int64_t ab_64 = a_64 * b_64;
 800b02e:	fb83 320b 	smull	r3, r2, r3, fp
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800b032:	2a00      	cmp	r2, #0
 800b034:	f2c0 82b0 	blt.w	800b598 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x770>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800b038:	f113 4380 	adds.w	r3, r3, #1073741824	; 0x40000000
 800b03c:	f142 0200 	adc.w	r2, r2, #0
 800b040:	0fdb      	lsrs	r3, r3, #31
 800b042:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  assert(exponent <= 31);
 800b046:	9a03      	ldr	r2, [sp, #12]
 800b048:	2a1f      	cmp	r2, #31
 800b04a:	f300 82f3 	bgt.w	800b634 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x80c>
  return a & b;
 800b04e:	9a08      	ldr	r2, [sp, #32]
  return a >> offset;
 800b050:	980a      	ldr	r0, [sp, #40]	; 0x28
  return a & b;
 800b052:	ea02 0103 	and.w	r1, r2, r3
  return a + b;
 800b056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b058:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
  return a >> offset;
 800b05c:	4103      	asrs	r3, r0
  return a + b;
 800b05e:	4291      	cmp	r1, r2
 800b060:	bfc8      	it	gt
 800b062:	3301      	addgt	r3, #1
 800b064:	459a      	cmp	sl, r3
 800b066:	f300 8262 	bgt.w	800b52e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x706>
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
      // Saturate, cast to int16_t, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
      accum = std::min(accum, output_activation_max - output_offset);
      accum += output_offset;
      output_data[out_c + output_depth * b] = accum;
 800b06a:	9a05      	ldr	r2, [sp, #20]
 800b06c:	4293      	cmp	r3, r2
 800b06e:	bfa8      	it	ge
 800b070:	4613      	movge	r3, r2
 800b072:	f82c 3b02 	strh.w	r3, [ip], #2
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800b076:	9b04      	ldr	r3, [sp, #16]
 800b078:	459c      	cmp	ip, r3
 800b07a:	44c6      	add	lr, r8
 800b07c:	d1c0      	bne.n	800b000 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d8>
  for (int b = 0; b < batches; ++b) {
 800b07e:	9a07      	ldr	r2, [sp, #28]
 800b080:	9b06      	ldr	r3, [sp, #24]
 800b082:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800b086:	4442      	add	r2, r8
 800b088:	9207      	str	r2, [sp, #28]
 800b08a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b08c:	3301      	adds	r3, #1
 800b08e:	4293      	cmp	r3, r2
 800b090:	9306      	str	r3, [sp, #24]
 800b092:	4446      	add	r6, r8
 800b094:	d1a2      	bne.n	800afdc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b4>
    if (size_ > kMaxSmallSize) {
 800b096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b098:	2b05      	cmp	r3, #5
 800b09a:	dd03      	ble.n	800b0a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x27c>
      delete[] dims_pointer_;
 800b09c:	9857      	ldr	r0, [sp, #348]	; 0x15c
 800b09e:	b108      	cbz	r0, 800b0a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x27c>
 800b0a0:	f005 fd96 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800b0a4:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800b0a6:	2b05      	cmp	r3, #5
 800b0a8:	dd03      	ble.n	800b0b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x28a>
      delete[] dims_pointer_;
 800b0aa:	9851      	ldr	r0, [sp, #324]	; 0x144
 800b0ac:	b108      	cbz	r0, 800b0b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x28a>
 800b0ae:	f005 fd8f 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800b0b2:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800b0b4:	2b05      	cmp	r3, #5
 800b0b6:	dd03      	ble.n	800b0c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x298>
      delete[] dims_pointer_;
 800b0b8:	984b      	ldr	r0, [sp, #300]	; 0x12c
 800b0ba:	b108      	cbz	r0, 800b0c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x298>
 800b0bc:	f005 fd88 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800b0c0:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800b0c2:	2b05      	cmp	r3, #5
 800b0c4:	f340 80ea 	ble.w	800b29c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x474>
      delete[] dims_pointer_;
 800b0c8:	9845      	ldr	r0, [sp, #276]	; 0x114
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	f040 80e4 	bne.w	800b298 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x470>
 800b0d0:	e0e4      	b.n	800b29c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x474>
 800b0d2:	bf00      	nop
 800b0d4:	0801742c 	.word	0x0801742c
 800b0d8:	7f7fffff 	.word	0x7f7fffff
 800b0dc:	ff7fffff 	.word	0xff7fffff
 800b0e0:	00000000 	.word	0x00000000
      return EvalFloat(context, node, params->activation, input, filter, bias,
 800b0e4:	7833      	ldrb	r3, [r6, #0]
  if (activation == kTfLiteActRelu) {
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	f000 81ec 	beq.w	800b4c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x69c>
  } else if (activation == kTfLiteActRelu6) {
 800b0ec:	2b03      	cmp	r3, #3
 800b0ee:	f000 8212 	beq.w	800b516 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6ee>
    *activation_max = std::numeric_limits<T>::max();
 800b0f2:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800b0d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b0>
 800b0f6:	ed5f 7a07 	vldr	s15, [pc, #-28]	; 800b0dc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b4>
 800b0fa:	2b02      	cmp	r3, #2
 800b0fc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800b100:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
 800b104:	bf18      	it	ne
 800b106:	eef0 8a47 	vmovne.f32	s17, s14
 800b10a:	bf18      	it	ne
 800b10c:	eeb0 8a67 	vmovne.f32	s16, s15
      op_params, tflite::micro::GetTensorShape(input),
 800b110:	4649      	mov	r1, r9
 800b112:	a814      	add	r0, sp, #80	; 0x50
 800b114:	f7fb fcc4 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b118:	f8d9 3000 	ldr.w	r3, [r9]
 800b11c:	9308      	str	r3, [sp, #32]
      tflite::micro::GetTensorShape(filter),
 800b11e:	4639      	mov	r1, r7
 800b120:	a81a      	add	r0, sp, #104	; 0x68
 800b122:	f7fb fcbd 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800b126:	2f00      	cmp	r7, #0
 800b128:	f000 828b 	beq.w	800b642 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x81a>
      tflite::micro::GetTensorShape(bias),
 800b12c:	4621      	mov	r1, r4
 800b12e:	a820      	add	r0, sp, #128	; 0x80
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b130:	683f      	ldr	r7, [r7, #0]
 800b132:	f7fb fcb5 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800b136:	2c00      	cmp	r4, #0
 800b138:	f000 8283 	beq.w	800b642 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x81a>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b13c:	6825      	ldr	r5, [r4, #0]
      tflite::micro::GetTensorShape(output),
 800b13e:	9c07      	ldr	r4, [sp, #28]
 800b140:	a826      	add	r0, sp, #152	; 0x98
 800b142:	4621      	mov	r1, r4
 800b144:	f7fb fcac 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800b148:	b10c      	cbz	r4, 800b14e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x326>
 800b14a:	6823      	ldr	r3, [r4, #0]
 800b14c:	9307      	str	r3, [sp, #28]
  inline int32_t DimensionsCount() const { return size_; }
 800b14e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b150:	981a      	ldr	r0, [sp, #104]	; 0x68
 800b152:	9304      	str	r3, [sp, #16]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800b154:	1e59      	subs	r1, r3, #1
 800b156:	f100 8274 	bmi.w	800b642 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x81a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800b15a:	2b05      	cmp	r3, #5
 800b15c:	f340 81c5 	ble.w	800b4ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6c2>
 800b160:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800b162:	2201      	movs	r2, #1
 800b164:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800b166:	4299      	cmp	r1, r3
 800b168:	f000 81b4 	beq.w	800b4d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6ac>
 800b16c:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
 800b170:	fb06 f202 	mul.w	r2, r6, r2
  for (int i = 0; i < dims_count; ++i) {
 800b174:	9e04      	ldr	r6, [sp, #16]
 800b176:	3301      	adds	r3, #1
 800b178:	429e      	cmp	r6, r3
 800b17a:	d1f4      	bne.n	800b166 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x33e>
 800b17c:	9206      	str	r2, [sp, #24]
    TFLITE_DCHECK_GE(i, 0);
 800b17e:	1e82      	subs	r2, r0, #2
 800b180:	f100 825f 	bmi.w	800b642 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x81a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800b184:	2805      	cmp	r0, #5
 800b186:	f340 81c0 	ble.w	800b50a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6e2>
 800b18a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b18c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b190:	9305      	str	r3, [sp, #20]
 800b192:	9b04      	ldr	r3, [sp, #16]
 800b194:	2b05      	cmp	r3, #5
 800b196:	f340 81b2 	ble.w	800b4fe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6d6>
 800b19a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b19c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800b1a0:	9a05      	ldr	r2, [sp, #20]
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	f040 824d 	bne.w	800b642 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x81a>
    TFLITE_DCHECK_GE(i, 0);
 800b1a8:	1e42      	subs	r2, r0, #1
 800b1aa:	f100 824a 	bmi.w	800b642 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x81a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800b1ae:	2805      	cmp	r0, #5
 800b1b0:	f340 81a0 	ble.w	800b4f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6cc>
 800b1b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1b6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  for (int b = 0; b < batches; ++b) {
 800b1ba:	9b06      	ldr	r3, [sp, #24]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	dd51      	ble.n	800b264 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x43c>
 800b1c0:	9b05      	ldr	r3, [sp, #20]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	dd4e      	ble.n	800b264 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x43c>
 800b1c6:	009a      	lsls	r2, r3, #2
 800b1c8:	9209      	str	r2, [sp, #36]	; 0x24
 800b1ca:	9a07      	ldr	r2, [sp, #28]
      float bias_value = 0.0f;
 800b1cc:	ed1f 6a3c 	vldr	s12, [pc, #-240]	; 800b0e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b8>
  for (int b = 0; b < batches; ++b) {
 800b1d0:	f04f 0800 	mov.w	r8, #0
 800b1d4:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 800b1d8:	46c3      	mov	fp, r8
 800b1da:	46c2      	mov	sl, r8
 800b1dc:	f8cd 800c 	str.w	r8, [sp, #12]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800b1e0:	9a08      	ldr	r2, [sp, #32]
 800b1e2:	9b03      	ldr	r3, [sp, #12]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	4480      	add	r8, r0
 800b1e8:	469e      	mov	lr, r3
 800b1ea:	9b07      	ldr	r3, [sp, #28]
 800b1ec:	ea4f 0688 	mov.w	r6, r8, lsl #2
 800b1f0:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 800b1f4:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 800b1f8:	4629      	mov	r1, r5
 800b1fa:	9603      	str	r6, [sp, #12]
      if (__b < __a)
 800b1fc:	2200      	movs	r2, #0
      for (int d = 0; d < accum_depth; ++d) {
 800b1fe:	2800      	cmp	r0, #0
      float total = 0.f;
 800b200:	ed1f 7a49 	vldr	s14, [pc, #-292]	; 800b0e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b8>
      for (int d = 0; d < accum_depth; ++d) {
 800b204:	dd0a      	ble.n	800b21c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3f4>
 800b206:	eb07 0c82 	add.w	ip, r7, r2, lsl #2
 800b20a:	4676      	mov	r6, lr
        total += input_data[b * accum_depth + d] *
 800b20c:	ecf6 6a01 	vldmia	r6!, {s13}
                 weights_data[out_c * accum_depth + d];
 800b210:	ecfc 7a01 	vldmia	ip!, {s15}
      for (int d = 0; d < accum_depth; ++d) {
 800b214:	454e      	cmp	r6, r9
        total += input_data[b * accum_depth + d] *
 800b216:	eea6 7aa7 	vfma.f32	s14, s13, s15
      for (int d = 0; d < accum_depth; ++d) {
 800b21a:	d1f7      	bne.n	800b20c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e4>
      if (bias_data) {
 800b21c:	2d00      	cmp	r5, #0
 800b21e:	f000 8156 	beq.w	800b4ce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6a6>
        bias_value = bias_data[out_c];
 800b222:	edd1 7a00 	vldr	s15, [r1]
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 800b226:	ee77 7a87 	vadd.f32	s15, s15, s14
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800b22a:	3104      	adds	r1, #4
 800b22c:	eef4 7a48 	vcmp.f32	s15, s16
 800b230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b234:	bf48      	it	mi
 800b236:	eef0 7a48 	vmovmi.f32	s15, s16
 800b23a:	eef4 7a68 	vcmp.f32	s15, s17
 800b23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b242:	bfc8      	it	gt
 800b244:	eef0 7a68 	vmovgt.f32	s15, s17
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 800b248:	ece3 7a01 	vstmia	r3!, {s15}
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800b24c:	429c      	cmp	r4, r3
 800b24e:	4402      	add	r2, r0
 800b250:	d1d5      	bne.n	800b1fe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d6>
  for (int b = 0; b < batches; ++b) {
 800b252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b254:	441c      	add	r4, r3
 800b256:	9b05      	ldr	r3, [sp, #20]
 800b258:	449b      	add	fp, r3
 800b25a:	9b06      	ldr	r3, [sp, #24]
 800b25c:	f10a 0a01 	add.w	sl, sl, #1
 800b260:	4553      	cmp	r3, sl
 800b262:	d1bd      	bne.n	800b1e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3b8>
    if (size_ > kMaxSmallSize) {
 800b264:	9b04      	ldr	r3, [sp, #16]
 800b266:	2b05      	cmp	r3, #5
 800b268:	dd03      	ble.n	800b272 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x44a>
      delete[] dims_pointer_;
 800b26a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800b26c:	b108      	cbz	r0, 800b272 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x44a>
 800b26e:	f005 fcaf 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800b272:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b274:	2b05      	cmp	r3, #5
 800b276:	dd03      	ble.n	800b280 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x458>
      delete[] dims_pointer_;
 800b278:	9821      	ldr	r0, [sp, #132]	; 0x84
 800b27a:	b108      	cbz	r0, 800b280 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x458>
 800b27c:	f005 fca8 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800b280:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b282:	2b05      	cmp	r3, #5
 800b284:	dd03      	ble.n	800b28e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x466>
      delete[] dims_pointer_;
 800b286:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b288:	b108      	cbz	r0, 800b28e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x466>
 800b28a:	f005 fca1 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800b28e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b290:	2b05      	cmp	r3, #5
 800b292:	dd03      	ble.n	800b29c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x474>
      delete[] dims_pointer_;
 800b294:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b296:	b108      	cbz	r0, 800b29c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x474>
 800b298:	f005 fc9a 	bl	8010bd0 <_ZdaPv>
  return kTfLiteOk;
 800b29c:	2000      	movs	r0, #0
}
 800b29e:	b05d      	add	sp, #372	; 0x174
 800b2a0:	ecbd 8b02 	vpop	{d8}
 800b2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 800b2a8:	9b07      	ldr	r3, [sp, #28]
 800b2aa:	464a      	mov	r2, r9
 800b2ac:	e9cd 4300 	strd	r4, r3, [sp]
 800b2b0:	4640      	mov	r0, r8
 800b2b2:	463b      	mov	r3, r7
 800b2b4:	f7ff fb6c 	bl	800a990 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>
}
 800b2b8:	b05d      	add	sp, #372	; 0x174
 800b2ba:	ecbd 8b02 	vpop	{d8}
 800b2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800b2c2:	f8d8 4014 	ldr.w	r4, [r8, #20]
 800b2c6:	f7f8 fad9 	bl	800387c <TfLiteTypeGetName>
 800b2ca:	9b07      	ldr	r3, [sp, #28]
 800b2cc:	49ae      	ldr	r1, [pc, #696]	; (800b588 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x760>)
 800b2ce:	7a1b      	ldrb	r3, [r3, #8]
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	4640      	mov	r0, r8
 800b2d4:	47a0      	blx	r4
      return kTfLiteError;
 800b2d6:	2001      	movs	r0, #1
      return EvalQuantized(context, node, data, input, filter, bias, output);
 800b2d8:	e5e7      	b.n	800aeaa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x82>
      TF_LITE_FULLY_CONNECTED(uint8_t);
 800b2da:	4649      	mov	r1, r9
 800b2dc:	a82c      	add	r0, sp, #176	; 0xb0
 800b2de:	f7fb fbdf 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800b2e2:	4639      	mov	r1, r7
 800b2e4:	a832      	add	r0, sp, #200	; 0xc8
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b2e6:	f8d9 9000 	ldr.w	r9, [r9]
 800b2ea:	f7fb fbd9 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800b2ee:	2f00      	cmp	r7, #0
 800b2f0:	f000 81a7 	beq.w	800b642 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x81a>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	9310      	str	r3, [sp, #64]	; 0x40
 800b2f8:	4621      	mov	r1, r4
 800b2fa:	a838      	add	r0, sp, #224	; 0xe0
 800b2fc:	f7fb fbd0 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800b300:	2c00      	cmp	r4, #0
 800b302:	f000 819e 	beq.w	800b642 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x81a>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b306:	6823      	ldr	r3, [r4, #0]
 800b308:	9c07      	ldr	r4, [sp, #28]
 800b30a:	9308      	str	r3, [sp, #32]
 800b30c:	4621      	mov	r1, r4
 800b30e:	a83e      	add	r0, sp, #248	; 0xf8
 800b310:	f7fb fbc6 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  inline int32_t DimensionsCount() const { return size_; }
 800b314:	9f32      	ldr	r7, [sp, #200]	; 0xc8
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800b316:	f8d4 c000 	ldr.w	ip, [r4]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800b31a:	2f01      	cmp	r7, #1
 800b31c:	f340 8191 	ble.w	800b642 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x81a>
 800b320:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 800b322:	2b00      	cmp	r3, #0
 800b324:	f340 818d 	ble.w	800b642 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x81a>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800b328:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b32c:	428a      	cmp	r2, r1
 800b32e:	f300 8188 	bgt.w	800b642 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x81a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800b332:	2b05      	cmp	r3, #5
 800b334:	bfc8      	it	gt
 800b336:	9c3f      	ldrgt	r4, [sp, #252]	; 0xfc
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800b338:	f103 31ff 	add.w	r1, r3, #4294967295
 800b33c:	bfd8      	it	le
 800b33e:	ac3f      	addle	r4, sp, #252	; 0xfc
  int flat_size = 1;
 800b340:	2201      	movs	r2, #1
  for (int i = 0; i < dims_count; ++i) {
 800b342:	2000      	movs	r0, #0
 800b344:	46ae      	mov	lr, r5
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800b346:	4281      	cmp	r1, r0
 800b348:	f000 80ca 	beq.w	800b4e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6b8>
 800b34c:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
 800b350:	3001      	adds	r0, #1
 800b352:	4283      	cmp	r3, r0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800b354:	fb05 f202 	mul.w	r2, r5, r2
  for (int i = 0; i < dims_count; ++i) {
 800b358:	d1f5      	bne.n	800b346 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x51e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800b35a:	2f05      	cmp	r7, #5
 800b35c:	4675      	mov	r5, lr
 800b35e:	920f      	str	r2, [sp, #60]	; 0x3c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 800b360:	f1a7 0002 	sub.w	r0, r7, #2
 800b364:	f300 80dc 	bgt.w	800b520 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6f8>
 800b368:	aa5c      	add	r2, sp, #368	; 0x170
 800b36a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800b36e:	f850 2ca4 	ldr.w	r2, [r0, #-164]
 800b372:	920d      	str	r2, [sp, #52]	; 0x34
 800b374:	2b05      	cmp	r3, #5
 800b376:	f340 813f 	ble.w	800b5f8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7d0>
 800b37a:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800b37c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800b380:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b382:	428a      	cmp	r2, r1
 800b384:	f040 815d 	bne.w	800b642 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x81a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800b388:	2f05      	cmp	r7, #5
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800b38a:	f107 31ff 	add.w	r1, r7, #4294967295
 800b38e:	f340 812d 	ble.w	800b5ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7c4>
 800b392:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 800b394:	f852 8021 	ldr.w	r8, [r2, r1, lsl #2]
  for (int b = 0; b < batches; ++b) {
 800b398:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b39a:	2a00      	cmp	r2, #0
 800b39c:	dd75      	ble.n	800b48a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x662>
  int left_shift = shift > 0 ? shift : 0;
 800b39e:	ea2a 72ea 	bic.w	r2, sl, sl, asr #31
 800b3a2:	920c      	str	r2, [sp, #48]	; 0x30
 800b3a4:	9a03      	ldr	r2, [sp, #12]
 800b3a6:	f8cd 901c 	str.w	r9, [sp, #28]
 800b3aa:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800b3ae:	4611      	mov	r1, r2
 800b3b0:	9209      	str	r2, [sp, #36]	; 0x24
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	408a      	lsls	r2, r1
 800b3b6:	3a01      	subs	r2, #1
 800b3b8:	920a      	str	r2, [sp, #40]	; 0x28
  return a >> offset;
 800b3ba:	1052      	asrs	r2, r2, #1
 800b3bc:	920b      	str	r2, [sp, #44]	; 0x2c
 800b3be:	2200      	movs	r2, #0
 800b3c0:	4663      	mov	r3, ip
 800b3c2:	eb09 0408 	add.w	r4, r9, r8
 800b3c6:	920e      	str	r2, [sp, #56]	; 0x38
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800b3c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3ca:	2a00      	cmp	r2, #0
 800b3cc:	bfd8      	it	le
 800b3ce:	189b      	addle	r3, r3, r2
 800b3d0:	dd50      	ble.n	800b474 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x64c>
 800b3d2:	461f      	mov	r7, r3
 800b3d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3d6:	f8dd e020 	ldr.w	lr, [sp, #32]
 800b3da:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 800b3de:	eb03 0907 	add.w	r9, r3, r7
      for (int d = 0; d < accum_depth; ++d) {
 800b3e2:	f1b8 0f00 	cmp.w	r8, #0
 800b3e6:	f340 80f9 	ble.w	800b5dc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7b4>
 800b3ea:	9807      	ldr	r0, [sp, #28]
 800b3ec:	f10c 3aff 	add.w	sl, ip, #4294967295
      int32_t acc = 0;
 800b3f0:	2300      	movs	r3, #0
        int32_t input_val = input_data[b * accum_depth + d];
 800b3f2:	f810 1b01 	ldrb.w	r1, [r0], #1
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 800b3f6:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800b3fa:	1b49      	subs	r1, r1, r5
 800b3fc:	1b92      	subs	r2, r2, r6
      for (int d = 0; d < accum_depth; ++d) {
 800b3fe:	4284      	cmp	r4, r0
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800b400:	fb01 3302 	mla	r3, r1, r2, r3
      for (int d = 0; d < accum_depth; ++d) {
 800b404:	d1f5      	bne.n	800b3f2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5ca>
      if (bias_data) {
 800b406:	9a08      	ldr	r2, [sp, #32]
 800b408:	b112      	cbz	r2, 800b410 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5e8>
        acc += bias_data[out_c];
 800b40a:	f8de 2000 	ldr.w	r2, [lr]
 800b40e:	4413      	add	r3, r2
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 800b410:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b412:	4093      	lsls	r3, r2
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800b414:	459b      	cmp	fp, r3
 800b416:	f000 80a5 	beq.w	800b564 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x73c>
  std::int64_t ab_64 = a_64 * b_64;
 800b41a:	fb83 320b 	smull	r3, r2, r3, fp
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800b41e:	2a00      	cmp	r2, #0
 800b420:	f2c0 80cb 	blt.w	800b5ba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x792>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800b424:	f113 4380 	adds.w	r3, r3, #1073741824	; 0x40000000
 800b428:	f142 0200 	adc.w	r2, r2, #0
 800b42c:	0fdb      	lsrs	r3, r3, #31
 800b42e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  assert(exponent <= 31);
 800b432:	9a03      	ldr	r2, [sp, #12]
 800b434:	2a1f      	cmp	r2, #31
 800b436:	f300 80fd 	bgt.w	800b634 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x80c>
  return a & b;
 800b43a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  return a >> offset;
 800b43c:	9809      	ldr	r0, [sp, #36]	; 0x24
  return a & b;
 800b43e:	ea03 0102 	and.w	r1, r3, r2
  return a + b;
 800b442:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b444:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
  return a >> offset;
 800b448:	4103      	asrs	r3, r0
  return a + b;
 800b44a:	4291      	cmp	r1, r2
 800b44c:	bfc8      	it	gt
 800b44e:	3301      	addgt	r3, #1
      acc += output_offset;
 800b450:	9a06      	ldr	r2, [sp, #24]
 800b452:	4413      	add	r3, r2
      if (__a < __b)
 800b454:	9a04      	ldr	r2, [sp, #16]
 800b456:	429a      	cmp	r2, r3
 800b458:	f300 8082 	bgt.w	800b560 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x738>
      output_data[out_c + output_depth * b] = static_cast<uint8_t>(acc);
 800b45c:	9a05      	ldr	r2, [sp, #20]
 800b45e:	4293      	cmp	r3, r2
 800b460:	bfa8      	it	ge
 800b462:	4613      	movge	r3, r2
 800b464:	f807 3b01 	strb.w	r3, [r7], #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800b468:	45b9      	cmp	r9, r7
 800b46a:	f10e 0e04 	add.w	lr, lr, #4
 800b46e:	44c4      	add	ip, r8
 800b470:	464b      	mov	r3, r9
 800b472:	d1b6      	bne.n	800b3e2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5ba>
  for (int b = 0; b < batches; ++b) {
 800b474:	9907      	ldr	r1, [sp, #28]
 800b476:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b478:	4441      	add	r1, r8
 800b47a:	9107      	str	r1, [sp, #28]
 800b47c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b47e:	3201      	adds	r2, #1
 800b480:	428a      	cmp	r2, r1
 800b482:	920e      	str	r2, [sp, #56]	; 0x38
 800b484:	4444      	add	r4, r8
 800b486:	d19f      	bne.n	800b3c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a0>
    if (size_ > kMaxSmallSize) {
 800b488:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800b48a:	2b05      	cmp	r3, #5
 800b48c:	dd03      	ble.n	800b496 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x66e>
      delete[] dims_pointer_;
 800b48e:	983f      	ldr	r0, [sp, #252]	; 0xfc
 800b490:	b108      	cbz	r0, 800b496 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x66e>
 800b492:	f005 fb9d 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800b496:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800b498:	2b05      	cmp	r3, #5
 800b49a:	dd03      	ble.n	800b4a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x67c>
      delete[] dims_pointer_;
 800b49c:	9839      	ldr	r0, [sp, #228]	; 0xe4
 800b49e:	b108      	cbz	r0, 800b4a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x67c>
 800b4a0:	f005 fb96 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800b4a4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800b4a6:	2b05      	cmp	r3, #5
 800b4a8:	dd03      	ble.n	800b4b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x68a>
      delete[] dims_pointer_;
 800b4aa:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800b4ac:	b108      	cbz	r0, 800b4b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x68a>
 800b4ae:	f005 fb8f 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800b4b2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800b4b4:	2b05      	cmp	r3, #5
 800b4b6:	f77f aef1 	ble.w	800b29c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x474>
      delete[] dims_pointer_;
 800b4ba:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	f47f aeeb 	bne.w	800b298 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x470>
 800b4c2:	e6eb      	b.n	800b29c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x474>
    *activation_max = std::numeric_limits<T>::max();
 800b4c4:	eddf 8a31 	vldr	s17, [pc, #196]	; 800b58c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x764>
    *activation_min = 0;
 800b4c8:	ed9f 8a31 	vldr	s16, [pc, #196]	; 800b590 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x768>
 800b4cc:	e620      	b.n	800b110 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e8>
      float bias_value = 0.0f;
 800b4ce:	eef0 7a46 	vmov.f32	s15, s12
 800b4d2:	e6a8      	b.n	800b226 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3fe>
  for (int i = 0; i < dims_count; ++i) {
 800b4d4:	9e04      	ldr	r6, [sp, #16]
 800b4d6:	1c4b      	adds	r3, r1, #1
 800b4d8:	429e      	cmp	r6, r3
 800b4da:	f47f ae44 	bne.w	800b166 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x33e>
 800b4de:	e64d      	b.n	800b17c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x354>
 800b4e0:	1c48      	adds	r0, r1, #1
 800b4e2:	4283      	cmp	r3, r0
 800b4e4:	f47f af2f 	bne.w	800b346 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x51e>
 800b4e8:	e737      	b.n	800b35a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x532>
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	f340 809d 	ble.w	800b62a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x802>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800b4f0:	ac27      	add	r4, sp, #156	; 0x9c
 800b4f2:	e636      	b.n	800b162 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x33a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800b4f4:	ab1a      	add	r3, sp, #104	; 0x68
 800b4f6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b4fa:	6850      	ldr	r0, [r2, #4]
 800b4fc:	e65d      	b.n	800b1ba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x392>
 800b4fe:	ab5c      	add	r3, sp, #368	; 0x170
 800b500:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b504:	f851 3cd4 	ldr.w	r3, [r1, #-212]
 800b508:	e64a      	b.n	800b1a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x378>
 800b50a:	ab1a      	add	r3, sp, #104	; 0x68
 800b50c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b510:	6853      	ldr	r3, [r2, #4]
 800b512:	9305      	str	r3, [sp, #20]
 800b514:	e63d      	b.n	800b192 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x36a>
    *activation_min = 0;
 800b516:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 800b590 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x768>
    *activation_max = 6;
 800b51a:	eef1 8a08 	vmov.f32	s17, #24	; 0x40c00000  6.0
 800b51e:	e5f7      	b.n	800b110 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e8>
 800b520:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 800b522:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800b526:	920d      	str	r2, [sp, #52]	; 0x34
 800b528:	e724      	b.n	800b374 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x54c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800b52a:	9857      	ldr	r0, [sp, #348]	; 0x15c
  for (int i = 0; i < dims_count; ++i) {
 800b52c:	e50d      	b.n	800af4a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x122>
      output_data[out_c + output_depth * b] = accum;
 800b52e:	f82c ab02 	strh.w	sl, [ip], #2
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800b532:	9b04      	ldr	r3, [sp, #16]
 800b534:	4563      	cmp	r3, ip
 800b536:	44c6      	add	lr, r8
 800b538:	f47f ad62 	bne.w	800b000 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d8>
 800b53c:	e59f      	b.n	800b07e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x256>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800b53e:	4915      	ldr	r1, [pc, #84]	; (800b594 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x76c>)
  std::int64_t ab_64 = a_64 * b_64;
 800b540:	fb8b 320b 	smull	r3, r2, fp, fp
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800b544:	2a00      	cmp	r2, #0
 800b546:	bfb3      	iteet	lt
 800b548:	4608      	movlt	r0, r1
 800b54a:	f04f 4080 	movge.w	r0, #1073741824	; 0x40000000
 800b54e:	2100      	movge	r1, #0
 800b550:	f04f 31ff 	movlt.w	r1, #4294967295
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800b554:	f1bb 4f00 	cmp.w	fp, #2147483648	; 0x80000000
 800b558:	d121      	bne.n	800b59e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x776>
 800b55a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b55e:	e572      	b.n	800b046 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21e>
 800b560:	4613      	mov	r3, r2
 800b562:	e77f      	b.n	800b464 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x63c>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800b564:	490b      	ldr	r1, [pc, #44]	; (800b594 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x76c>)
  std::int64_t ab_64 = a_64 * b_64;
 800b566:	fb8b 320b 	smull	r3, r2, fp, fp
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800b56a:	2a00      	cmp	r2, #0
 800b56c:	bfb3      	iteet	lt
 800b56e:	4608      	movlt	r0, r1
 800b570:	f04f 4080 	movge.w	r0, #1073741824	; 0x40000000
 800b574:	2100      	movge	r1, #0
 800b576:	f04f 31ff 	movlt.w	r1, #4294967295
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800b57a:	f1bb 4f00 	cmp.w	fp, #2147483648	; 0x80000000
 800b57e:	d11f      	bne.n	800b5c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x798>
 800b580:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b584:	e755      	b.n	800b432 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x60a>
 800b586:	bf00      	nop
 800b588:	0801742c 	.word	0x0801742c
 800b58c:	7f7fffff 	.word	0x7f7fffff
 800b590:	00000000 	.word	0x00000000
 800b594:	c0000001 	.word	0xc0000001
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800b598:	482b      	ldr	r0, [pc, #172]	; (800b648 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x820>)
 800b59a:	f04f 31ff 	mov.w	r1, #4294967295
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800b59e:	181b      	adds	r3, r3, r0
 800b5a0:	eb42 0201 	adc.w	r2, r2, r1
 800b5a4:	2a00      	cmp	r2, #0
 800b5a6:	da04      	bge.n	800b5b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x78a>
 800b5a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b5ac:	185b      	adds	r3, r3, r1
 800b5ae:	f142 0200 	adc.w	r2, r2, #0
 800b5b2:	0fdb      	lsrs	r3, r3, #31
 800b5b4:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800b5b8:	e545      	b.n	800b046 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21e>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800b5ba:	4823      	ldr	r0, [pc, #140]	; (800b648 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x820>)
 800b5bc:	f04f 31ff 	mov.w	r1, #4294967295
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800b5c0:	181b      	adds	r3, r3, r0
 800b5c2:	eb42 0201 	adc.w	r2, r2, r1
 800b5c6:	2a00      	cmp	r2, #0
 800b5c8:	da04      	bge.n	800b5d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7ac>
 800b5ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b5ce:	185b      	adds	r3, r3, r1
 800b5d0:	f142 0200 	adc.w	r2, r2, #0
 800b5d4:	0fdb      	lsrs	r3, r3, #31
 800b5d6:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800b5da:	e72a      	b.n	800b432 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x60a>
      int32_t acc = 0;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	e712      	b.n	800b406 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5de>
 800b5e0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b5e2:	3101      	adds	r1, #1
 800b5e4:	428f      	cmp	r7, r1
 800b5e6:	f47f acb2 	bne.w	800af4e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x126>
 800b5ea:	e4bb      	b.n	800af64 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800b5ec:	aa5c      	add	r2, sp, #368	; 0x170
 800b5ee:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800b5f2:	f851 8ca4 	ldr.w	r8, [r1, #-164]
 800b5f6:	e6cf      	b.n	800b398 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x570>
 800b5f8:	aa5c      	add	r2, sp, #368	; 0x170
 800b5fa:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800b5fe:	f851 2c74 	ldr.w	r2, [r1, #-116]
 800b602:	e6bd      	b.n	800b380 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x558>
 800b604:	ab5c      	add	r3, sp, #368	; 0x170
 800b606:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b60a:	f852 8c44 	ldr.w	r8, [r2, #-68]
 800b60e:	e4c8      	b.n	800afa2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x17a>
 800b610:	ab5c      	add	r3, sp, #368	; 0x170
 800b612:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800b616:	f852 3c14 	ldr.w	r3, [r2, #-20]
 800b61a:	e4b5      	b.n	800af88 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x160>
 800b61c:	ab5c      	add	r3, sp, #368	; 0x170
 800b61e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b622:	f851 3c44 	ldr.w	r3, [r1, #-68]
 800b626:	930c      	str	r3, [sp, #48]	; 0x30
 800b628:	e4a7      	b.n	800af7a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x152>
  int flat_size = 1;
 800b62a:	2301      	movs	r3, #1
 800b62c:	9306      	str	r3, [sp, #24]
 800b62e:	e5a6      	b.n	800b17e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x356>
 800b630:	2301      	movs	r3, #1
 800b632:	e497      	b.n	800af64 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13c>
  assert(exponent <= 31);
 800b634:	4b05      	ldr	r3, [pc, #20]	; (800b64c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x824>)
 800b636:	4a06      	ldr	r2, [pc, #24]	; (800b650 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x828>)
 800b638:	4806      	ldr	r0, [pc, #24]	; (800b654 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x82c>)
 800b63a:	f240 1167 	movw	r1, #359	; 0x167
 800b63e:	f005 fda9 	bl	8011194 <__assert_func>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800b642:	f005 fd9f 	bl	8011184 <abort>
 800b646:	bf00      	nop
 800b648:	c0000001 	.word	0xc0000001
 800b64c:	08016a84 	.word	0x08016a84
 800b650:	08016a94 	.word	0x08016a94
 800b654:	08016af0 	.word	0x08016af0

0800b658 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800b658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 800b65c:	f8d1 9010 	ldr.w	r9, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800b660:	b097      	sub	sp, #92	; 0x5c
  TFLITE_DCHECK(node->user_data != nullptr);
 800b662:	f1b9 0f00 	cmp.w	r9, #0
 800b666:	f000 80ff 	beq.w	800b868 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x210>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800b66a:	f8d1 a014 	ldr.w	sl, [r1, #20]
 800b66e:	460c      	mov	r4, r1
 800b670:	f1ba 0f00 	cmp.w	sl, #0
 800b674:	f000 80f8 	beq.w	800b868 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x210>
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800b678:	2200      	movs	r2, #0
 800b67a:	4605      	mov	r5, r0
 800b67c:	f7f8 fcec 	bl	8004058 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 800b680:	4621      	mov	r1, r4
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800b682:	4606      	mov	r6, r0
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 800b684:	2201      	movs	r2, #1
 800b686:	4628      	mov	r0, r5
 800b688:	f7f8 fce6 	bl	8004058 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 800b68c:	4621      	mov	r1, r4
 800b68e:	2202      	movs	r2, #2
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 800b690:	4607      	mov	r7, r0
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 800b692:	4628      	mov	r0, r5
 800b694:	f7f8 fd18 	bl	80040c8 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800b698:	4621      	mov	r1, r4
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 800b69a:	4680      	mov	r8, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800b69c:	2200      	movs	r2, #0
 800b69e:	4628      	mov	r0, r5
 800b6a0:	f7f8 fcf6 	bl	8004090 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800b6a4:	4604      	mov	r4, r0
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800b6a6:	7830      	ldrb	r0, [r6, #0]
 800b6a8:	7823      	ldrb	r3, [r4, #0]
 800b6aa:	4283      	cmp	r3, r0
 800b6ac:	d11a      	bne.n	800b6e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 800b6ae:	783a      	ldrb	r2, [r7, #0]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d009      	beq.n	800b6c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x70>
 800b6b4:	696b      	ldr	r3, [r5, #20]
 800b6b6:	4970      	ldr	r1, [pc, #448]	; (800b878 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	4798      	blx	r3
 800b6bc:	f04f 0a01 	mov.w	sl, #1
}
 800b6c0:	4650      	mov	r0, sl
 800b6c2:	b017      	add	sp, #92	; 0x5c
 800b6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  data->buffer_idx = -1;
 800b6c8:	f04f 33ff 	mov.w	r3, #4294967295
  if (data_type != kTfLiteFloat32) {
 800b6cc:	2a01      	cmp	r2, #1
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params->activation,
 800b6ce:	f89a b000 	ldrb.w	fp, [sl]
  data->buffer_idx = -1;
 800b6d2:	f8c9 3014 	str.w	r3, [r9, #20]
  if (data_type != kTfLiteFloat32) {
 800b6d6:	d11e      	bne.n	800b716 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xbe>
  return kTfLiteOk;
 800b6d8:	f04f 0a00 	mov.w	sl, #0
}
 800b6dc:	4650      	mov	r0, sl
 800b6de:	b017      	add	sp, #92	; 0x5c
 800b6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800b6e4:	696e      	ldr	r6, [r5, #20]
 800b6e6:	f7f8 f8c9 	bl	800387c <TfLiteTypeGetName>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	7820      	ldrb	r0, [r4, #0]
 800b6ee:	461c      	mov	r4, r3
 800b6f0:	f7f8 f8c4 	bl	800387c <TfLiteTypeGetName>
 800b6f4:	4961      	ldr	r1, [pc, #388]	; (800b87c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 800b6f6:	4b62      	ldr	r3, [pc, #392]	; (800b880 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 800b6f8:	4a62      	ldr	r2, [pc, #392]	; (800b884 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 800b6fa:	e9cd 3100 	strd	r3, r1, [sp]
 800b6fe:	e9cd 4002 	strd	r4, r0, [sp, #8]
 800b702:	4961      	ldr	r1, [pc, #388]	; (800b888 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 800b704:	4628      	mov	r0, r5
 800b706:	2369      	movs	r3, #105	; 0x69
 800b708:	47b0      	blx	r6
 800b70a:	f04f 0a01 	mov.w	sl, #1
}
 800b70e:	4650      	mov	r0, sl
 800b710:	b017      	add	sp, #92	; 0x5c
 800b712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    double real_multiplier = 0.0;
 800b716:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800b870 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x218>
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800b71a:	ab10      	add	r3, sp, #64	; 0x40
 800b71c:	9301      	str	r3, [sp, #4]
 800b71e:	9400      	str	r4, [sp, #0]
 800b720:	4643      	mov	r3, r8
 800b722:	463a      	mov	r2, r7
 800b724:	4631      	mov	r1, r6
 800b726:	4628      	mov	r0, r5
    double real_multiplier = 0.0;
 800b728:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800b72c:	f7f8 fce8 	bl	8004100 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800b730:	4682      	mov	sl, r0
 800b732:	2800      	cmp	r0, #0
 800b734:	d1c4      	bne.n	800b6c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x68>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
 800b736:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 800b73a:	a90a      	add	r1, sp, #40	; 0x28
 800b73c:	4648      	mov	r0, r9
 800b73e:	f7f8 fb8d 	bl	8003e5c <_ZN6tflite18QuantizeMultiplierEdPlPi>
    data->output_shift = -exponent;
 800b742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b744:	425b      	negs	r3, r3
 800b746:	f8c9 3004 	str.w	r3, [r9, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800b74a:	f109 030c 	add.w	r3, r9, #12
 800b74e:	9300      	str	r3, [sp, #0]
 800b750:	4659      	mov	r1, fp
 800b752:	f109 0308 	add.w	r3, r9, #8
 800b756:	4622      	mov	r2, r4
 800b758:	4628      	mov	r0, r5
 800b75a:	f7f8 fd59 	bl	8004210 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800b75e:	4682      	mov	sl, r0
 800b760:	2800      	cmp	r0, #0
 800b762:	d1ad      	bne.n	800b6c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x68>
  if (input->type == kTfLiteInt8 && nullptr != GetTensorData<int32_t>(bias)) {
 800b764:	7833      	ldrb	r3, [r6, #0]
    data->input_zero_point = input->params.zero_point;
 800b766:	6932      	ldr	r2, [r6, #16]
 800b768:	f8c9 2018 	str.w	r2, [r9, #24]
    data->filter_zero_point = filter->params.zero_point;
 800b76c:	693a      	ldr	r2, [r7, #16]
 800b76e:	f8c9 201c 	str.w	r2, [r9, #28]
  if (input->type == kTfLiteInt8 && nullptr != GetTensorData<int32_t>(bias)) {
 800b772:	2b09      	cmp	r3, #9
    data->output_zero_point = output->params.zero_point;
 800b774:	6922      	ldr	r2, [r4, #16]
 800b776:	f8c9 2020 	str.w	r2, [r9, #32]
  if (input->type == kTfLiteInt8 && nullptr != GetTensorData<int32_t>(bias)) {
 800b77a:	d1ad      	bne.n	800b6d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x80>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800b77c:	f1b8 0f00 	cmp.w	r8, #0
 800b780:	d0aa      	beq.n	800b6d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x80>
 800b782:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d0a6      	beq.n	800b6d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x80>
  const int dims_size = dims->size;
 800b78a:	68be      	ldr	r6, [r7, #8]
 800b78c:	f856 2b04 	ldr.w	r2, [r6], #4
    size_ = dimensions_count;
 800b790:	920a      	str	r2, [sp, #40]	; 0x28
    if (dimensions_count > kMaxSmallSize) {
 800b792:	2a05      	cmp	r2, #5
 800b794:	dc37      	bgt.n	800b806 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ae>
      dims_pointer_ = new int32_t[dimensions_count];
 800b796:	0092      	lsls	r2, r2, #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800b798:	a80b      	add	r0, sp, #44	; 0x2c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 800b79a:	4631      	mov	r1, r6
 800b79c:	f006 fd4d 	bl	801223a <memcpy>
 800b7a0:	68a4      	ldr	r4, [r4, #8]
 800b7a2:	f854 2b04 	ldr.w	r2, [r4], #4
    size_ = dimensions_count;
 800b7a6:	9210      	str	r2, [sp, #64]	; 0x40
    if (dimensions_count > kMaxSmallSize) {
 800b7a8:	2a05      	cmp	r2, #5
 800b7aa:	dc41      	bgt.n	800b830 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1d8>
      dims_pointer_ = new int32_t[dimensions_count];
 800b7ac:	0092      	lsls	r2, r2, #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800b7ae:	a811      	add	r0, sp, #68	; 0x44
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 800b7b0:	4621      	mov	r1, r4
 800b7b2:	f006 fd42 	bl	801223a <memcpy>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 800b7b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b7b8:	2b02      	cmp	r3, #2
 800b7ba:	d155      	bne.n	800b868 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x210>
  inline int32_t DimensionsCount() const { return size_; }
 800b7bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    TFLITE_DCHECK_GE(i, 0);
 800b7be:	1e63      	subs	r3, r4, #1
 800b7c0:	d452      	bmi.n	800b868 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x210>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800b7c2:	2c05      	cmp	r4, #5
 800b7c4:	dd2e      	ble.n	800b824 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1cc>
 800b7c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b7c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 800b7cc:	9306      	str	r3, [sp, #24]
    filter_dims.h = 1;
 800b7ce:	2301      	movs	r3, #1
    filter_dims.w = 1;
 800b7d0:	e9cd 3307 	strd	r3, r3, [sp, #28]
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 800b7d4:	a806      	add	r0, sp, #24
    filter_dims.c = output_shape.Dims(1);
 800b7d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b7d8:	9309      	str	r3, [sp, #36]	; 0x24
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 800b7da:	f003 f895 	bl	800e908 <arm_fully_connected_s8_get_buffer_size>
    if (buf_size > 0) {
 800b7de:	1e01      	subs	r1, r0, #0
 800b7e0:	dd35      	ble.n	800b84e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f6>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 800b7e2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800b7e4:	4628      	mov	r0, r5
 800b7e6:	f109 0214 	add.w	r2, r9, #20
 800b7ea:	4798      	blx	r3
 800b7ec:	4605      	mov	r5, r0
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	d132      	bne.n	800b858 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x200>
    if (size_ > kMaxSmallSize) {
 800b7f2:	2c05      	cmp	r4, #5
 800b7f4:	f77f af64 	ble.w	800b6c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x68>
      delete[] dims_pointer_;
 800b7f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	f43f af60 	beq.w	800b6c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x68>
 800b800:	f005 f9e6 	bl	8010bd0 <_ZdaPv>
 800b804:	e75c      	b.n	800b6c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x68>
      dims_pointer_ = new int32_t[dimensions_count];
 800b806:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800b80a:	429a      	cmp	r2, r3
 800b80c:	bfb5      	itete	lt
 800b80e:	0090      	lsllt	r0, r2, #2
 800b810:	0092      	lslge	r2, r2, #2
 800b812:	4602      	movlt	r2, r0
 800b814:	f04f 30ff 	movge.w	r0, #4294967295
 800b818:	9205      	str	r2, [sp, #20]
 800b81a:	f005 f9fb 	bl	8010c14 <_Znaj>
 800b81e:	9a05      	ldr	r2, [sp, #20]
 800b820:	900b      	str	r0, [sp, #44]	; 0x2c
 800b822:	e7ba      	b.n	800b79a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x142>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800b824:	aa16      	add	r2, sp, #88	; 0x58
 800b826:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b82a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800b82e:	e7cd      	b.n	800b7cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x174>
      dims_pointer_ = new int32_t[dimensions_count];
 800b830:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800b834:	429a      	cmp	r2, r3
 800b836:	bfb5      	itete	lt
 800b838:	0090      	lsllt	r0, r2, #2
 800b83a:	0092      	lslge	r2, r2, #2
 800b83c:	4602      	movlt	r2, r0
 800b83e:	f04f 30ff 	movge.w	r0, #4294967295
 800b842:	9205      	str	r2, [sp, #20]
 800b844:	f005 f9e6 	bl	8010c14 <_Znaj>
 800b848:	9a05      	ldr	r2, [sp, #20]
 800b84a:	9011      	str	r0, [sp, #68]	; 0x44
 800b84c:	e7b0      	b.n	800b7b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>
      data->buffer_idx = -1;
 800b84e:	f04f 33ff 	mov.w	r3, #4294967295
 800b852:	f8c9 3014 	str.w	r3, [r9, #20]
 800b856:	e7cc      	b.n	800b7f2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x19a>
    if (size_ > kMaxSmallSize) {
 800b858:	2c05      	cmp	r4, #5
 800b85a:	dd03      	ble.n	800b864 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20c>
      delete[] dims_pointer_;
 800b85c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b85e:	b108      	cbz	r0, 800b864 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20c>
 800b860:	f005 f9b6 	bl	8010bd0 <_ZdaPv>
 800b864:	46aa      	mov	sl, r5
 800b866:	e72b      	b.n	800b6c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x68>
  TFLITE_DCHECK(node->user_data != nullptr);
 800b868:	f005 fc8c 	bl	8011184 <abort>
 800b86c:	f3af 8000 	nop.w
	...
 800b878:	080175c4 	.word	0x080175c4
 800b87c:	08016654 	.word	0x08016654
 800b880:	08016664 	.word	0x08016664
 800b884:	08017448 	.word	0x08017448
 800b888:	08016638 	.word	0x08016638

0800b88c <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 800b88c:	b510      	push	{r4, lr}
  fully_connected_registration.init = Init;
 800b88e:	4b0d      	ldr	r3, [pc, #52]	; (800b8c4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x38>)
 800b890:	4c0d      	ldr	r4, [pc, #52]	; (800b8c8 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x3c>)
  fully_connected_registration.free = nullptr;
  fully_connected_registration.prepare = Prepare;
 800b892:	490e      	ldr	r1, [pc, #56]	; (800b8cc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x40>)
 800b894:	6099      	str	r1, [r3, #8]
  fully_connected_registration.free = nullptr;
 800b896:	2200      	movs	r2, #0
 800b898:	e9c3 4200 	strd	r4, r2, [r3]
  fully_connected_registration.invoke = Eval;
 800b89c:	490c      	ldr	r1, [pc, #48]	; (800b8d0 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x44>)
 800b89e:	60d9      	str	r1, [r3, #12]
  fully_connected_registration.profiling_string = nullptr;
  fully_connected_registration.builtin_code = 0;
  fully_connected_registration.custom_name = nullptr;
  fully_connected_registration.version = 0;
  return fully_connected_registration;
 800b8a0:	469e      	mov	lr, r3
  fully_connected_registration.builtin_code = 0;
 800b8a2:	e9c3 2204 	strd	r2, r2, [r3, #16]
  fully_connected_registration.version = 0;
 800b8a6:	e9c3 2206 	strd	r2, r2, [r3, #24]
TfLiteRegistration Register_FULLY_CONNECTED() {
 800b8aa:	4604      	mov	r4, r0
  return fully_connected_registration;
 800b8ac:	4684      	mov	ip, r0
 800b8ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b8b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b8b6:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 800b8ba:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 800b8be:	4620      	mov	r0, r4
 800b8c0:	bd10      	pop	{r4, pc}
 800b8c2:	bf00      	nop
 800b8c4:	2000e9b4 	.word	0x2000e9b4
 800b8c8:	0800a981 	.word	0x0800a981
 800b8cc:	0800b659 	.word	0x0800b659
 800b8d0:	0800ae29 	.word	0x0800ae29

0800b8d4 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj>:
}

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800b8d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b8d6:	b10b      	cbz	r3, 800b8dc <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 800b8d8:	211c      	movs	r1, #28
 800b8da:	4718      	bx	r3
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800b8dc:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800b8de:	f005 fc51 	bl	8011184 <abort>
 800b8e2:	bf00      	nop

0800b8e4 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 800b8e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 800b8e8:	690c      	ldr	r4, [r1, #16]
TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 800b8ea:	b082      	sub	sp, #8
  TFLITE_DCHECK(node->user_data != nullptr);
 800b8ec:	2c00      	cmp	r4, #0
 800b8ee:	d062      	beq.n	800b9b6 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xd2>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800b8f0:	694e      	ldr	r6, [r1, #20]
 800b8f2:	460f      	mov	r7, r1
 800b8f4:	2e00      	cmp	r6, #0
 800b8f6:	d05e      	beq.n	800b9b6 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xd2>

  OpData* data = static_cast<OpData*>(node->user_data);
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	4605      	mov	r5, r0
 800b8fc:	f7f8 fbac 	bl	8004058 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800b900:	4639      	mov	r1, r7
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800b902:	4680      	mov	r8, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800b904:	2200      	movs	r2, #0
 800b906:	4628      	mov	r0, r5
 800b908:	f7f8 fbc2 	bl	8004090 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
      params->filter_width, params->padding, &out_height, &out_width);
 800b90c:	f896 c000 	ldrb.w	ip, [r6]
 800b910:	f8d8 3008 	ldr.w	r3, [r8, #8]
  switch (padding) {
 800b914:	f1bc 0f01 	cmp.w	ip, #1
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800b918:	4602      	mov	r2, r0
      params->stride_height, params->stride_width,
 800b91a:	e9d6 9a01 	ldrd	r9, sl, [r6, #4]
 800b91e:	f898 0000 	ldrb.w	r0, [r8]
  return t->dims->data[dim];
 800b922:	e9d3 8702 	ldrd	r8, r7, [r3, #8]
      params->filter_width, params->padding, &out_height, &out_width);
 800b926:	e9d6 1303 	ldrd	r1, r3, [r6, #12]
 800b92a:	d046      	beq.n	800b9ba <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xd6>
 800b92c:	f1bc 0f02 	cmp.w	ip, #2
 800b930:	d12e      	bne.n	800b990 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xac>
      return (image_size + stride - effective_filter_size) / stride;
 800b932:	eb08 0e0a 	add.w	lr, r8, sl
 800b936:	eb07 0c09 	add.w	ip, r7, r9
 800b93a:	ebae 0e03 	sub.w	lr, lr, r3
 800b93e:	ebac 0c01 	sub.w	ip, ip, r1
 800b942:	fb9e fefa 	sdiv	lr, lr, sl
 800b946:	fb9c fcf9 	sdiv	ip, ip, r9
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800b94a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b94e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b952:	fb0c 1109 	mla	r1, ip, r9, r1
  int total_padding =
 800b956:	1bc9      	subs	r1, r1, r7
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800b958:	fb0e 330a 	mla	r3, lr, sl, r3
  total_padding = total_padding > 0 ? total_padding : 0;
 800b95c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  int total_padding =
 800b960:	eba3 0308 	sub.w	r3, r3, r8
  total_padding = total_padding > 0 ? total_padding : 0;
 800b964:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  return total_padding / 2;
 800b968:	104f      	asrs	r7, r1, #1
  *offset = total_padding % 2;
 800b96a:	f001 0101 	and.w	r1, r1, #1
  data->padding = ComputePaddingHeightWidth(
 800b96e:	60a1      	str	r1, [r4, #8]
  if (input->type != kTfLiteFloat32) {
 800b970:	2801      	cmp	r0, #1
  return total_padding / 2;
 800b972:	ea4f 0163 	mov.w	r1, r3, asr #1
  *offset = total_padding % 2;
 800b976:	f003 0301 	and.w	r3, r3, #1
  data->padding = ComputePaddingHeightWidth(
 800b97a:	6027      	str	r7, [r4, #0]
 800b97c:	6061      	str	r1, [r4, #4]
 800b97e:	60e3      	str	r3, [r4, #12]
  if (input->type != kTfLiteFloat32) {
 800b980:	d10a      	bne.n	800b998 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb4>
  data->buffer_idx = -1;
 800b982:	f04f 33ff 	mov.w	r3, #4294967295
 800b986:	6123      	str	r3, [r4, #16]
  return kTfLiteOk;
 800b988:	2000      	movs	r0, #0

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));

  return kTfLiteOk;
}
 800b98a:	b002      	add	sp, #8
 800b98c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (padding) {
 800b990:	f04f 3cff 	mov.w	ip, #4294967295
 800b994:	46e6      	mov	lr, ip
 800b996:	e7dc      	b.n	800b952 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800b998:	f104 0318 	add.w	r3, r4, #24
 800b99c:	7d31      	ldrb	r1, [r6, #20]
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	f104 0314 	add.w	r3, r4, #20
 800b9a6:	f7f8 fc33 	bl	8004210 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	d1ed      	bne.n	800b98a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa6>
    TFLITE_DCHECK_LE(data->activation_min, data->activation_max);
 800b9ae:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	dde5      	ble.n	800b982 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x9e>
  TFLITE_DCHECK(node->user_data != nullptr);
 800b9b6:	f005 fbe5 	bl	8011184 <abort>
      return (image_size + stride - 1) / stride;
 800b9ba:	eb08 0e0a 	add.w	lr, r8, sl
 800b9be:	eb07 0c09 	add.w	ip, r7, r9
 800b9c2:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b9c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b9ca:	fb9e fefa 	sdiv	lr, lr, sl
 800b9ce:	fb9c fcf9 	sdiv	ip, ip, r9
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800b9d2:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b9d6:	f10c 3cff 	add.w	ip, ip, #4294967295
      return (image_size + stride - 1) / stride;
 800b9da:	e7ba      	b.n	800b952 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>

0800b9dc <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
 800b9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 800b9e0:	690c      	ldr	r4, [r1, #16]
TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
 800b9e2:	b091      	sub	sp, #68	; 0x44
  TFLITE_DCHECK(node->user_data != nullptr);
 800b9e4:	2c00      	cmp	r4, #0
 800b9e6:	f000 80cb 	beq.w	800bb80 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x1a4>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800b9ea:	f8d1 8014 	ldr.w	r8, [r1, #20]
 800b9ee:	460f      	mov	r7, r1
 800b9f0:	f1b8 0f00 	cmp.w	r8, #0
 800b9f4:	f000 80c4 	beq.w	800bb80 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x1a4>

  OpData* data = static_cast<OpData*>(node->user_data);
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	4606      	mov	r6, r0
 800b9fc:	f7f8 fb2c 	bl	8004058 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800ba00:	4639      	mov	r1, r7
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800ba02:	4605      	mov	r5, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800ba04:	2200      	movs	r2, #0
 800ba06:	4630      	mov	r0, r6
 800ba08:	f7f8 fb42 	bl	8004090 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800ba0c:	4607      	mov	r7, r0
      params->filter_width, params->padding, &out_height, &out_width);
 800ba0e:	f898 0000 	ldrb.w	r0, [r8]
 800ba12:	68ab      	ldr	r3, [r5, #8]
 800ba14:	7829      	ldrb	r1, [r5, #0]
  switch (padding) {
 800ba16:	2801      	cmp	r0, #1
 800ba18:	e9d3 9e02 	ldrd	r9, lr, [r3, #8]
      params->stride_height, params->stride_width,
 800ba1c:	e9d8 ab01 	ldrd	sl, fp, [r8, #4]
      params->filter_width, params->padding, &out_height, &out_width);
 800ba20:	e9d8 2303 	ldrd	r2, r3, [r8, #12]
 800ba24:	d07d      	beq.n	800bb22 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x146>
 800ba26:	2802      	cmp	r0, #2
 800ba28:	d12f      	bne.n	800ba8a <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xae>
      return (image_size + stride - effective_filter_size) / stride;
 800ba2a:	eb09 0c0b 	add.w	ip, r9, fp
 800ba2e:	eb0e 000a 	add.w	r0, lr, sl
 800ba32:	ebac 0c03 	sub.w	ip, ip, r3
 800ba36:	1a80      	subs	r0, r0, r2
 800ba38:	fb9c fcfb 	sdiv	ip, ip, fp
 800ba3c:	fb90 f0fa 	sdiv	r0, r0, sl
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800ba40:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ba44:	3801      	subs	r0, #1
 800ba46:	fb00 220a 	mla	r2, r0, sl, r2
 800ba4a:	fb0c 330b 	mla	r3, ip, fp, r3
  int total_padding =
 800ba4e:	eba2 020e 	sub.w	r2, r2, lr
  total_padding = total_padding > 0 ? total_padding : 0;
 800ba52:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  int total_padding =
 800ba56:	eba3 0309 	sub.w	r3, r3, r9
  total_padding = total_padding > 0 ? total_padding : 0;
 800ba5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  return total_padding / 2;
 800ba5e:	1050      	asrs	r0, r2, #1
  *offset = total_padding % 2;
 800ba60:	f002 0201 	and.w	r2, r2, #1
  data->padding = ComputePaddingHeightWidth(
 800ba64:	60a2      	str	r2, [r4, #8]
  if (input->type != kTfLiteFloat32) {
 800ba66:	2901      	cmp	r1, #1
  return total_padding / 2;
 800ba68:	ea4f 0263 	mov.w	r2, r3, asr #1
  *offset = total_padding % 2;
 800ba6c:	f003 0301 	and.w	r3, r3, #1
  data->padding = ComputePaddingHeightWidth(
 800ba70:	6020      	str	r0, [r4, #0]
 800ba72:	6062      	str	r2, [r4, #4]
 800ba74:	60e3      	str	r3, [r4, #12]
  if (input->type != kTfLiteFloat32) {
 800ba76:	d10c      	bne.n	800ba92 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xb6>
  data->buffer_idx = -1;
 800ba78:	f04f 33ff 	mov.w	r3, #4294967295
 800ba7c:	6123      	str	r3, [r4, #16]
          context, buffer_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
    }
  }
  return kTfLiteOk;
 800ba7e:	f04f 0800 	mov.w	r8, #0
}
 800ba82:	4640      	mov	r0, r8
 800ba84:	b011      	add	sp, #68	; 0x44
 800ba86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (padding) {
 800ba8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba8e:	4684      	mov	ip, r0
 800ba90:	e7d9      	b.n	800ba46 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x6a>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800ba92:	f104 0318 	add.w	r3, r4, #24
 800ba96:	f898 1014 	ldrb.w	r1, [r8, #20]
 800ba9a:	9300      	str	r3, [sp, #0]
 800ba9c:	463a      	mov	r2, r7
 800ba9e:	f104 0314 	add.w	r3, r4, #20
 800baa2:	4630      	mov	r0, r6
 800baa4:	f7f8 fbb4 	bl	8004210 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800baa8:	4680      	mov	r8, r0
 800baaa:	2800      	cmp	r0, #0
 800baac:	d1e9      	bne.n	800ba82 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa6>
    TFLITE_DCHECK_LE(data->activation_min, data->activation_max);
 800baae:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	dc64      	bgt.n	800bb80 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x1a4>
  if (input->type == kTfLiteInt8) {
 800bab6:	782b      	ldrb	r3, [r5, #0]
  data->buffer_idx = -1;
 800bab8:	f04f 30ff 	mov.w	r0, #4294967295
  if (input->type == kTfLiteInt8) {
 800babc:	2b09      	cmp	r3, #9
  data->buffer_idx = -1;
 800babe:	6120      	str	r0, [r4, #16]
  if (input->type == kTfLiteInt8) {
 800bac0:	d1df      	bne.n	800ba82 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa6>
 800bac2:	68ad      	ldr	r5, [r5, #8]
 800bac4:	f855 2b04 	ldr.w	r2, [r5], #4
    size_ = dimensions_count;
 800bac8:	9204      	str	r2, [sp, #16]
    if (dimensions_count > kMaxSmallSize) {
 800baca:	2a05      	cmp	r2, #5
 800bacc:	dc38      	bgt.n	800bb40 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x164>
      dims_pointer_ = new int32_t[dimensions_count];
 800bace:	0092      	lsls	r2, r2, #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800bad0:	a805      	add	r0, sp, #20
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 800bad2:	4629      	mov	r1, r5
 800bad4:	f006 fbb1 	bl	801223a <memcpy>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800bad8:	9b04      	ldr	r3, [sp, #16]
 800bada:	2b04      	cmp	r3, #4
 800badc:	d150      	bne.n	800bb80 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x1a4>
  if (tensor == nullptr) {
 800bade:	2f00      	cmp	r7, #0
 800bae0:	d04e      	beq.n	800bb80 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x1a4>
  const int dims_size = dims->size;
 800bae2:	68bd      	ldr	r5, [r7, #8]
 800bae4:	f855 2b04 	ldr.w	r2, [r5], #4
    size_ = dimensions_count;
 800bae8:	920a      	str	r2, [sp, #40]	; 0x28
    if (dimensions_count > kMaxSmallSize) {
 800baea:	2a05      	cmp	r2, #5
 800baec:	dc35      	bgt.n	800bb5a <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x17e>
      dims_pointer_ = new int32_t[dimensions_count];
 800baee:	0092      	lsls	r2, r2, #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800baf0:	a80b      	add	r0, sp, #44	; 0x2c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 800baf2:	4629      	mov	r1, r5
 800baf4:	f006 fba1 	bl	801223a <memcpy>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800baf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bafa:	2b04      	cmp	r3, #4
 800bafc:	d140      	bne.n	800bb80 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x1a4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800bafe:	9b08      	ldr	r3, [sp, #32]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800bb00:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bb02:	4299      	cmp	r1, r3
 800bb04:	d13c      	bne.n	800bb80 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x1a4>
        arm_avgpool_s8_get_buffer_size(output_width, depth);
 800bb06:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bb08:	f004 f936 	bl	800fd78 <arm_avgpool_s8_get_buffer_size>
    if (buffer_size > 0) {
 800bb0c:	1e01      	subs	r1, r0, #0
 800bb0e:	dd33      	ble.n	800bb78 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x19c>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 800bb10:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800bb12:	f104 0210 	add.w	r2, r4, #16
 800bb16:	4630      	mov	r0, r6
 800bb18:	4798      	blx	r3
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	bf18      	it	ne
 800bb1e:	4680      	movne	r8, r0
 800bb20:	e7af      	b.n	800ba82 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa6>
      return (image_size + stride - 1) / stride;
 800bb22:	eb09 0c0b 	add.w	ip, r9, fp
 800bb26:	eb0e 000a 	add.w	r0, lr, sl
 800bb2a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bb2e:	3801      	subs	r0, #1
 800bb30:	fb9c fcfb 	sdiv	ip, ip, fp
 800bb34:	fb90 f0fa 	sdiv	r0, r0, sl
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800bb38:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bb3c:	3801      	subs	r0, #1
      return (image_size + stride - 1) / stride;
 800bb3e:	e782      	b.n	800ba46 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x6a>
      dims_pointer_ = new int32_t[dimensions_count];
 800bb40:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800bb44:	429a      	cmp	r2, r3
 800bb46:	bfb6      	itet	lt
 800bb48:	0090      	lsllt	r0, r2, #2
 800bb4a:	0092      	lslge	r2, r2, #2
 800bb4c:	4602      	movlt	r2, r0
 800bb4e:	9203      	str	r2, [sp, #12]
 800bb50:	f005 f860 	bl	8010c14 <_Znaj>
 800bb54:	9a03      	ldr	r2, [sp, #12]
 800bb56:	9005      	str	r0, [sp, #20]
 800bb58:	e7bb      	b.n	800bad2 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xf6>
 800bb5a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	bfb5      	itete	lt
 800bb62:	0090      	lsllt	r0, r2, #2
 800bb64:	0092      	lslge	r2, r2, #2
 800bb66:	4602      	movlt	r2, r0
 800bb68:	f04f 30ff 	movge.w	r0, #4294967295
 800bb6c:	9203      	str	r2, [sp, #12]
 800bb6e:	f005 f851 	bl	8010c14 <_Znaj>
 800bb72:	9a03      	ldr	r2, [sp, #12]
 800bb74:	900b      	str	r0, [sp, #44]	; 0x2c
 800bb76:	e7bc      	b.n	800baf2 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x116>
      data->buffer_idx = -1;
 800bb78:	f04f 33ff 	mov.w	r3, #4294967295
 800bb7c:	6123      	str	r3, [r4, #16]
 800bb7e:	e780      	b.n	800ba82 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa6>
  TFLITE_DCHECK(node->user_data != nullptr);
 800bb80:	f005 fb00 	bl	8011184 <abort>

0800bb84 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:
      return kTfLiteError;
  }
  return kTfLiteOk;
}

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 800bb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb88:	ed2d 8b02 	vpush	{d8}
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 800bb8c:	e9d1 6504 	ldrd	r6, r5, [r1, #16]
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 800bb90:	b0df      	sub	sp, #380	; 0x17c
  TFLITE_DCHECK(context != nullptr);
 800bb92:	2800      	cmp	r0, #0
 800bb94:	f000 833b 	beq.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800bb98:	680b      	ldr	r3, [r1, #0]
 800bb9a:	4688      	mov	r8, r1
 800bb9c:	6859      	ldr	r1, [r3, #4]
 800bb9e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800bba0:	4607      	mov	r7, r0
 800bba2:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800bba4:	f8d8 3004 	ldr.w	r3, [r8, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800bba8:	4604      	mov	r4, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800bbaa:	6859      	ldr	r1, [r3, #4]
 800bbac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbae:	4638      	mov	r0, r7
 800bbb0:	4798      	blx	r3
 800bbb2:	4683      	mov	fp, r0
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);

  switch (input->type) {
 800bbb4:	7a20      	ldrb	r0, [r4, #8]
 800bbb6:	2803      	cmp	r0, #3
 800bbb8:	d012      	beq.n	800bbe0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>
 800bbba:	2809      	cmp	r0, #9
 800bbbc:	f000 816a 	beq.w	800be94 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x310>
 800bbc0:	2801      	cmp	r0, #1
 800bbc2:	f000 8148 	beq.w	800be56 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2d2>
      break;
    case kTfLiteInt8:
      MaxEvalInt8(context, node, params, data, input, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
 800bbc6:	697c      	ldr	r4, [r7, #20]
 800bbc8:	f7f7 fe58 	bl	800387c <TfLiteTypeGetName>
 800bbcc:	49ad      	ldr	r1, [pc, #692]	; (800be84 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x300>)
 800bbce:	4602      	mov	r2, r0
 800bbd0:	4638      	mov	r0, r7
 800bbd2:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 800bbd4:	2001      	movs	r0, #1
  }
  return kTfLiteOk;
}
 800bbd6:	b05f      	add	sp, #380	; 0x17c
 800bbd8:	ecbd 8b02 	vpop	{d8}
 800bbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  op_params.stride_height = params->stride_height;
 800bbe0:	68ab      	ldr	r3, [r5, #8]
 800bbe2:	930b      	str	r3, [sp, #44]	; 0x2c
  op_params.stride_width = params->stride_width;
 800bbe4:	686b      	ldr	r3, [r5, #4]
 800bbe6:	930c      	str	r3, [sp, #48]	; 0x30
  op_params.filter_height = params->filter_height;
 800bbe8:	692b      	ldr	r3, [r5, #16]
 800bbea:	930d      	str	r3, [sp, #52]	; 0x34
  op_params.filter_width = params->filter_width;
 800bbec:	68eb      	ldr	r3, [r5, #12]
 800bbee:	930e      	str	r3, [sp, #56]	; 0x38
  op_params.padding_values.height = data.padding.height;
 800bbf0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800bbf4:	930f      	str	r3, [sp, #60]	; 0x3c
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 800bbf6:	4621      	mov	r1, r4
  op_params.padding_values.width = data.padding.width;
 800bbf8:	f9b6 3000 	ldrsh.w	r3, [r6]
 800bbfc:	9310      	str	r3, [sp, #64]	; 0x40
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 800bbfe:	a840      	add	r0, sp, #256	; 0x100
  op_params.quantized_activation_max = data.activation_max;
 800bc00:	e9d6 5605 	ldrd	r5, r6, [r6, #20]
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 800bc04:	f7fa ff4c 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800bc08:	6823      	ldr	r3, [r4, #0]
 800bc0a:	9311      	str	r3, [sp, #68]	; 0x44
                         tflite::micro::GetTensorShape(output),
 800bc0c:	4659      	mov	r1, fp
 800bc0e:	a846      	add	r0, sp, #280	; 0x118
 800bc10:	f7fa ff46 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800bc14:	f1bb 0f00 	cmp.w	fp, #0
 800bc18:	d001      	beq.n	800bc1e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x9a>
 800bc1a:	f8db b000 	ldr.w	fp, [fp]
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const uint8_t* input_data, const RuntimeShape& output_shape,
                    uint8_t* output_data) {
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 800bc1e:	42b5      	cmp	r5, r6
 800bc20:	f300 82f5 	bgt.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
 800bc24:	2d00      	cmp	r5, #0
 800bc26:	f2c0 82f2 	blt.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
 800bc2a:	2eff      	cmp	r6, #255	; 0xff
 800bc2c:	f300 82ef 	bgt.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800bc30:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800bc32:	2b04      	cmp	r3, #4
 800bc34:	f040 82eb 	bne.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800bc38:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800bc3a:	2b04      	cmp	r3, #4
 800bc3c:	f040 82e7 	bne.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800bc40:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bc42:	9309      	str	r3, [sp, #36]	; 0x24
 800bc44:	461a      	mov	r2, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800bc46:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	f040 82e0 	bne.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800bc4e:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800bc50:	930a      	str	r3, [sp, #40]	; 0x28
 800bc52:	461a      	mov	r2, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800bc54:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800bc56:	4293      	cmp	r3, r2
 800bc58:	f040 82d9 	bne.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800bc5c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800bc5e:	9313      	str	r3, [sp, #76]	; 0x4c
 800bc60:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bc62:	9312      	str	r3, [sp, #72]	; 0x48
 800bc64:	9b48      	ldr	r3, [sp, #288]	; 0x120
 800bc66:	9308      	str	r3, [sp, #32]
 800bc68:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800bc6a:	9307      	str	r3, [sp, #28]
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
 800bc6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f340 80eb 	ble.w	800be4a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2c6>
 800bc74:	b2eb      	uxtb	r3, r5
 800bc76:	931d      	str	r3, [sp, #116]	; 0x74
 800bc78:	f04f 0900 	mov.w	r9, #0
 800bc7c:	b2f3      	uxtb	r3, r6
 800bc7e:	f8cd b07c 	str.w	fp, [sp, #124]	; 0x7c
 800bc82:	931e      	str	r3, [sp, #120]	; 0x78
 800bc84:	46cb      	mov	fp, r9
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800bc86:	9b08      	ldr	r3, [sp, #32]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	f340 80ca 	ble.w	800be22 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x29e>
 800bc8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc90:	f04f 0900 	mov.w	r9, #0
 800bc94:	f1c3 0c00 	rsb	ip, r3, #0
 800bc98:	46ca      	mov	sl, r9
 800bc9a:	469e      	mov	lr, r3
 800bc9c:	46d9      	mov	r9, fp
 800bc9e:	4698      	mov	r8, r3
 800bca0:	46e3      	mov	fp, ip
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800bca2:	9b07      	ldr	r3, [sp, #28]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	f340 80b1 	ble.w	800be0c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x288>
 800bcaa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bcac:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bcae:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
 800bcb2:	4443      	add	r3, r8
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	428b      	cmp	r3, r1
 800bcb8:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
 800bcbc:	bfa8      	it	ge
 800bcbe:	460a      	movge	r2, r1
 800bcc0:	9317      	str	r3, [sp, #92]	; 0x5c
 800bcc2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bcc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bcc6:	9306      	str	r3, [sp, #24]
 800bcc8:	4419      	add	r1, r3
 800bcca:	425e      	negs	r6, r3
 800bccc:	eb02 030b 	add.w	r3, r2, fp
 800bcd0:	9219      	str	r2, [sp, #100]	; 0x64
 800bcd2:	9105      	str	r1, [sp, #20]
 800bcd4:	f04f 0e00 	mov.w	lr, #0
 800bcd8:	931c      	str	r3, [sp, #112]	; 0x70
 800bcda:	46d8      	mov	r8, fp
        for (int channel = 0; channel < depth; ++channel) {
 800bcdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	f340 8083 	ble.w	800bdea <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x266>
 800bce4:	9b05      	ldr	r3, [sp, #20]
 800bce6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bce8:	4293      	cmp	r3, r2
 800bcea:	bfa8      	it	ge
 800bcec:	4613      	movge	r3, r2
 800bcee:	9a06      	ldr	r2, [sp, #24]
 800bcf0:	9318      	str	r3, [sp, #96]	; 0x60
 800bcf2:	4433      	add	r3, r6
 800bcf4:	ea22 7be2 	bic.w	fp, r2, r2, asr #31
 800bcf8:	f04f 0c00 	mov.w	ip, #0
 800bcfc:	931b      	str	r3, [sp, #108]	; 0x6c
              std::min(params.filter_width, input_width - in_x_origin);
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          uint8_t max = 0;
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800bcfe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bd00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bd02:	429a      	cmp	r2, r3
 800bd04:	f280 813a 	bge.w	800bf7c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3f8>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800bd08:	9b42      	ldr	r3, [sp, #264]	; 0x108
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800bd0a:	9f43      	ldr	r7, [sp, #268]	; 0x10c
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800bd0c:	9316      	str	r3, [sp, #88]	; 0x58
 800bd0e:	fb03 8309 	mla	r3, r3, r9, r8
 800bd12:	4413      	add	r3, r2
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800bd14:	9c44      	ldr	r4, [sp, #272]	; 0x110
 800bd16:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bd18:	fb07 6303 	mla	r3, r7, r3, r6
 800bd1c:	445b      	add	r3, fp
 800bd1e:	fb04 c303 	mla	r3, r4, r3, ip
 800bd22:	440b      	add	r3, r1
  inline int32_t DimensionsCount() const { return size_; }
 800bd24:	9940      	ldr	r1, [sp, #256]	; 0x100
 800bd26:	9114      	str	r1, [sp, #80]	; 0x50
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800bd28:	9941      	ldr	r1, [sp, #260]	; 0x104
 800bd2a:	9115      	str	r1, [sp, #84]	; 0x54
 800bd2c:	fb04 f107 	mul.w	r1, r4, r7
 800bd30:	911a      	str	r1, [sp, #104]	; 0x68
 800bd32:	eb08 0102 	add.w	r1, r8, r2
          uint8_t max = 0;
 800bd36:	2200      	movs	r2, #0
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 800bd38:	9818      	ldr	r0, [sp, #96]	; 0x60
 800bd3a:	4583      	cmp	fp, r0
 800bd3c:	da25      	bge.n	800bd8a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x206>
 800bd3e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800bd40:	2804      	cmp	r0, #4
 800bd42:	f040 8264 	bne.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
 800bd46:	4564      	cmp	r4, ip
 800bd48:	f340 8261 	ble.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
 800bd4c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800bd4e:	4288      	cmp	r0, r1
 800bd50:	f340 825d 	ble.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
 800bd54:	2900      	cmp	r1, #0
 800bd56:	f2c0 825a 	blt.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
 800bd5a:	eb0b 0006 	add.w	r0, fp, r6
 800bd5e:	461d      	mov	r5, r3
 800bd60:	9321      	str	r3, [sp, #132]	; 0x84
 800bd62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd64:	4599      	cmp	r9, r3
 800bd66:	f280 8252 	bge.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800bd6a:	2800      	cmp	r0, #0
 800bd6c:	f2c0 824f 	blt.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
 800bd70:	42b8      	cmp	r0, r7
 800bd72:	f280 824c 	bge.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
    max(const _Tp& __a, const _Tp& __b)
 800bd76:	782b      	ldrb	r3, [r5, #0]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	bf38      	it	cc
 800bd7c:	461a      	movcc	r2, r3
 800bd7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd80:	3001      	adds	r0, #1
 800bd82:	4298      	cmp	r0, r3
 800bd84:	4425      	add	r5, r4
 800bd86:	d1ec      	bne.n	800bd62 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x1de>
 800bd88:	9b21      	ldr	r3, [sp, #132]	; 0x84
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800bd8a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800bd8c:	4403      	add	r3, r0
 800bd8e:	981c      	ldr	r0, [sp, #112]	; 0x70
 800bd90:	3101      	adds	r1, #1
 800bd92:	4281      	cmp	r1, r0
 800bd94:	d1d0      	bne.n	800bd38 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x1b4>
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
            }
          }
          max = std::max<uint8_t>(max, params.quantized_activation_min);
          max = std::min<uint8_t>(max, params.quantized_activation_max);
 800bd96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	bf38      	it	cc
 800bd9c:	461a      	movcc	r2, r3
 800bd9e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bda0:	429a      	cmp	r2, r3
 800bda2:	bf28      	it	cs
 800bda4:	461a      	movcs	r2, r3
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 800bda6:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800bda8:	2b04      	cmp	r3, #4
 800bdaa:	f040 8230 	bne.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800bdae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bdb0:	4599      	cmp	r9, r3
 800bdb2:	f280 822c 	bge.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800bdb6:	9b48      	ldr	r3, [sp, #288]	; 0x120
 800bdb8:	4553      	cmp	r3, sl
 800bdba:	f340 8228 	ble.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800bdbe:	9849      	ldr	r0, [sp, #292]	; 0x124
 800bdc0:	4570      	cmp	r0, lr
 800bdc2:	f340 8224 	ble.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800bdc6:	994a      	ldr	r1, [sp, #296]	; 0x128
 800bdc8:	4561      	cmp	r1, ip
 800bdca:	f340 8220 	ble.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 800bdce:	fb03 a309 	mla	r3, r3, r9, sl
 800bdd2:	fb00 e303 	mla	r3, r0, r3, lr
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 800bdd6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800bdd8:	fb01 0303 	mla	r3, r1, r3, r0
 800bddc:	f803 200c 	strb.w	r2, [r3, ip]
        for (int channel = 0; channel < depth; ++channel) {
 800bde0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bde2:	f10c 0c01 	add.w	ip, ip, #1
 800bde6:	459c      	cmp	ip, r3
 800bde8:	d189      	bne.n	800bcfe <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x17a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800bdea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bdec:	9a06      	ldr	r2, [sp, #24]
 800bdee:	1ad2      	subs	r2, r2, r3
 800bdf0:	9206      	str	r2, [sp, #24]
 800bdf2:	9a05      	ldr	r2, [sp, #20]
 800bdf4:	441e      	add	r6, r3
 800bdf6:	1ad2      	subs	r2, r2, r3
 800bdf8:	9b07      	ldr	r3, [sp, #28]
 800bdfa:	9205      	str	r2, [sp, #20]
 800bdfc:	f10e 0e01 	add.w	lr, lr, #1
 800be00:	459e      	cmp	lr, r3
 800be02:	f47f af6b 	bne.w	800bcdc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x158>
 800be06:	46c3      	mov	fp, r8
 800be08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800be0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be0e:	eba8 0803 	sub.w	r8, r8, r3
 800be12:	449b      	add	fp, r3
 800be14:	9b08      	ldr	r3, [sp, #32]
 800be16:	f10a 0a01 	add.w	sl, sl, #1
 800be1a:	459a      	cmp	sl, r3
 800be1c:	f47f af41 	bne.w	800bca2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x11e>
 800be20:	46cb      	mov	fp, r9
  for (int batch = 0; batch < batches; ++batch) {
 800be22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be24:	f10b 0b01 	add.w	fp, fp, #1
 800be28:	459b      	cmp	fp, r3
 800be2a:	f47f af2c 	bne.w	800bc86 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x102>
    if (size_ > kMaxSmallSize) {
 800be2e:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800be30:	2b05      	cmp	r3, #5
 800be32:	dd03      	ble.n	800be3c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2b8>
      delete[] dims_pointer_;
 800be34:	9847      	ldr	r0, [sp, #284]	; 0x11c
 800be36:	b108      	cbz	r0, 800be3c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2b8>
 800be38:	f004 feca 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800be3c:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800be3e:	2b05      	cmp	r3, #5
 800be40:	dd03      	ble.n	800be4a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2c6>
      delete[] dims_pointer_;
 800be42:	9841      	ldr	r0, [sp, #260]	; 0x104
 800be44:	b108      	cbz	r0, 800be4a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2c6>
 800be46:	f004 fec3 	bl	8010bd0 <_ZdaPv>
  return kTfLiteOk;
 800be4a:	2000      	movs	r0, #0
}
 800be4c:	b05f      	add	sp, #380	; 0x17c
 800be4e:	ecbd 8b02 	vpop	{d8}
 800be52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  CalculateActivationRange(params->activation, &activation_min,
 800be56:	7d2b      	ldrb	r3, [r5, #20]
  if (activation == kTfLiteActRelu) {
 800be58:	2b01      	cmp	r3, #1
 800be5a:	f000 8091 	beq.w	800bf80 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3fc>
  } else if (activation == kTfLiteActRelu6) {
 800be5e:	2b03      	cmp	r3, #3
 800be60:	f000 81d0 	beq.w	800c204 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x680>
    *activation_max = std::numeric_limits<T>::max();
 800be64:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800be88 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x304>
 800be68:	eddf 7a09 	vldr	s15, [pc, #36]	; 800be90 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x30c>
 800be6c:	2b02      	cmp	r3, #2
 800be6e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800be72:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
 800be76:	bf18      	it	ne
 800be78:	eef0 8a47 	vmovne.f32	s17, s14
 800be7c:	bf18      	it	ne
 800be7e:	eeb0 8a67 	vmovne.f32	s16, s15
 800be82:	e081      	b.n	800bf88 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x404>
 800be84:	0801763c 	.word	0x0801763c
 800be88:	7f7fffff 	.word	0x7f7fffff
 800be8c:	00000000 	.word	0x00000000
 800be90:	ff7fffff 	.word	0xff7fffff
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 800be94:	a84c      	add	r0, sp, #304	; 0x130
 800be96:	4621      	mov	r1, r4
 800be98:	f7fa fe02 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 800be9c:	a852      	add	r0, sp, #328	; 0x148
 800be9e:	4659      	mov	r1, fp
 800bea0:	f7fa fdfe 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_LT(i, size_);
 800bea4:	984c      	ldr	r0, [sp, #304]	; 0x130
 800bea6:	2803      	cmp	r0, #3
 800bea8:	f340 81b1 	ble.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800beac:	2805      	cmp	r0, #5
 800beae:	bfc8      	it	gt
 800beb0:	9b4d      	ldrgt	r3, [sp, #308]	; 0x134
    TFLITE_DCHECK_LT(i, size_);
 800beb2:	9a52      	ldr	r2, [sp, #328]	; 0x148
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800beb4:	bfcc      	ite	gt
 800beb6:	68db      	ldrgt	r3, [r3, #12]
 800beb8:	9b50      	ldrle	r3, [sp, #320]	; 0x140
    TFLITE_DCHECK_LT(i, size_);
 800beba:	2a03      	cmp	r2, #3
 800bebc:	f340 81a7 	ble.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800bec0:	2a05      	cmp	r2, #5
 800bec2:	bfca      	itet	gt
 800bec4:	9953      	ldrgt	r1, [sp, #332]	; 0x14c
 800bec6:	9956      	ldrle	r1, [sp, #344]	; 0x158
 800bec8:	68c9      	ldrgt	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800beca:	4299      	cmp	r1, r3
 800becc:	f040 819f 	bne.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
  input_dims.n = 1;
 800bed0:	2101      	movs	r1, #1
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800bed2:	2805      	cmp	r0, #5
 800bed4:	9128      	str	r1, [sp, #160]	; 0xa0
 800bed6:	f300 8190 	bgt.w	800c1fa <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x676>
  input_dims.h = input_shape.Dims(1);
 800beda:	994e      	ldr	r1, [sp, #312]	; 0x138
 800bedc:	9129      	str	r1, [sp, #164]	; 0xa4
 800bede:	994f      	ldr	r1, [sp, #316]	; 0x13c
  input_dims.c = depth;
 800bee0:	e9cd 132a 	strd	r1, r3, [sp, #168]	; 0xa8
 800bee4:	2a05      	cmp	r2, #5
  output_dims.n = 1;
 800bee6:	f04f 0101 	mov.w	r1, #1
 800beea:	912c      	str	r1, [sp, #176]	; 0xb0
 800beec:	f340 8181 	ble.w	800c1f2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x66e>
 800bef0:	9a53      	ldr	r2, [sp, #332]	; 0x14c
 800bef2:	6851      	ldr	r1, [r2, #4]
 800bef4:	6892      	ldr	r2, [r2, #8]
  output_dims.h = output_shape.Dims(1);
 800bef6:	912d      	str	r1, [sp, #180]	; 0xb4
  output_dims.c = depth;
 800bef8:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
  pool_params.stride.w = params->stride_width;
 800befc:	686b      	ldr	r3, [r5, #4]
 800befe:	9358      	str	r3, [sp, #352]	; 0x160
 800bf00:	68ab      	ldr	r3, [r5, #8]
 800bf02:	9359      	str	r3, [sp, #356]	; 0x164
  pool_params.padding.w = data.padding.width;
 800bf04:	e9d6 3200 	ldrd	r3, r2, [r6]
 800bf08:	e9cd 325a 	strd	r3, r2, [sp, #360]	; 0x168
 800bf0c:	6973      	ldr	r3, [r6, #20]
 800bf0e:	6931      	ldr	r1, [r6, #16]
 800bf10:	935c      	str	r3, [sp, #368]	; 0x170
 800bf12:	69b3      	ldr	r3, [r6, #24]
 800bf14:	935d      	str	r3, [sp, #372]	; 0x174
  filter_dims.w = params->filter_width;
 800bf16:	68eb      	ldr	r3, [r5, #12]
 800bf18:	9332      	str	r3, [sp, #200]	; 0xc8
  filter_dims.h = params->filter_height;
 800bf1a:	692b      	ldr	r3, [r5, #16]
 800bf1c:	9331      	str	r3, [sp, #196]	; 0xc4
  filter_dims.n = 1;
 800bf1e:	2301      	movs	r3, #1
 800bf20:	9330      	str	r3, [sp, #192]	; 0xc0
  filter_dims.c = 1;
 800bf22:	9333      	str	r3, [sp, #204]	; 0xcc
  ctx.buf = nullptr;
 800bf24:	2300      	movs	r3, #0
  if (data.buffer_idx > -1) {
 800bf26:	4299      	cmp	r1, r3
  ctx.size = 0;
 800bf28:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
  if (data.buffer_idx > -1) {
 800bf2c:	db03      	blt.n	800bf36 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3b2>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 800bf2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf30:	4638      	mov	r0, r7
 800bf32:	4798      	blx	r3
 800bf34:	9026      	str	r0, [sp, #152]	; 0x98
  return reinterpret_cast<const T*>(tensor->data.raw);
 800bf36:	6823      	ldr	r3, [r4, #0]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800bf38:	f1bb 0f00 	cmp.w	fp, #0
 800bf3c:	d001      	beq.n	800bf42 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3be>
 800bf3e:	f8db b000 	ldr.w	fp, [fp]
  TFLITE_DCHECK_EQ(
 800bf42:	a92c      	add	r1, sp, #176	; 0xb0
 800bf44:	aa30      	add	r2, sp, #192	; 0xc0
 800bf46:	e9cd 1b01 	strd	r1, fp, [sp, #4]
 800bf4a:	9200      	str	r2, [sp, #0]
 800bf4c:	a958      	add	r1, sp, #352	; 0x160
 800bf4e:	aa28      	add	r2, sp, #160	; 0xa0
 800bf50:	a826      	add	r0, sp, #152	; 0x98
 800bf52:	f003 ff13 	bl	800fd7c <arm_max_pool_s8>
 800bf56:	2800      	cmp	r0, #0
 800bf58:	f040 8159 	bne.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
    if (size_ > kMaxSmallSize) {
 800bf5c:	9b52      	ldr	r3, [sp, #328]	; 0x148
 800bf5e:	2b05      	cmp	r3, #5
 800bf60:	dd03      	ble.n	800bf6a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3e6>
      delete[] dims_pointer_;
 800bf62:	9853      	ldr	r0, [sp, #332]	; 0x14c
 800bf64:	b108      	cbz	r0, 800bf6a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3e6>
 800bf66:	f004 fe33 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800bf6a:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 800bf6c:	2b05      	cmp	r3, #5
 800bf6e:	f77f af6c 	ble.w	800be4a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2c6>
      delete[] dims_pointer_;
 800bf72:	984d      	ldr	r0, [sp, #308]	; 0x134
 800bf74:	2800      	cmp	r0, #0
 800bf76:	f47f af66 	bne.w	800be46 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2c2>
 800bf7a:	e766      	b.n	800be4a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2c6>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	e70a      	b.n	800bd96 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x212>
    *activation_max = std::numeric_limits<T>::max();
 800bf80:	ed5f 8a3f 	vldr	s17, [pc, #-252]	; 800be88 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x304>
    *activation_min = 0;
 800bf84:	ed1f 8a3f 	vldr	s16, [pc, #-252]	; 800be8c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x308>
  op_params.stride_height = params->stride_height;
 800bf88:	68ab      	ldr	r3, [r5, #8]
 800bf8a:	9314      	str	r3, [sp, #80]	; 0x50
  op_params.stride_width = params->stride_width;
 800bf8c:	686b      	ldr	r3, [r5, #4]
 800bf8e:	9315      	str	r3, [sp, #84]	; 0x54
  op_params.filter_height = params->filter_height;
 800bf90:	692b      	ldr	r3, [r5, #16]
 800bf92:	9316      	str	r3, [sp, #88]	; 0x58
  op_params.filter_width = params->filter_width;
 800bf94:	68eb      	ldr	r3, [r5, #12]
 800bf96:	9317      	str	r3, [sp, #92]	; 0x5c
  op_params.padding_values.height = data.padding.height;
 800bf98:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800bf9c:	9318      	str	r3, [sp, #96]	; 0x60
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 800bf9e:	4621      	mov	r1, r4
  op_params.padding_values.width = data.padding.width;
 800bfa0:	f9b6 3000 	ldrsh.w	r3, [r6]
 800bfa4:	9319      	str	r3, [sp, #100]	; 0x64
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 800bfa6:	a834      	add	r0, sp, #208	; 0xd0
 800bfa8:	f7fa fd7a 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800bfac:	6823      	ldr	r3, [r4, #0]
 800bfae:	931a      	str	r3, [sp, #104]	; 0x68
                         tflite::micro::GetTensorShape(output),
 800bfb0:	4659      	mov	r1, fp
 800bfb2:	a83a      	add	r0, sp, #232	; 0xe8
 800bfb4:	f7fa fd74 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800bfb8:	f1bb 0f00 	cmp.w	fp, #0
 800bfbc:	d001      	beq.n	800bfc2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x43e>
 800bfbe:	f8db b000 	ldr.w	fp, [fp]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800bfc2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800bfc4:	2b04      	cmp	r3, #4
 800bfc6:	f040 8122 	bne.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800bfca:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800bfcc:	2b04      	cmp	r3, #4
 800bfce:	f040 811e 	bne.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800bfd2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800bfd4:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 800bfd6:	9310      	str	r3, [sp, #64]	; 0x40
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800bfd8:	429a      	cmp	r2, r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800bfda:	920f      	str	r2, [sp, #60]	; 0x3c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800bfdc:	f040 8117 	bne.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800bfe0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800bfe2:	f8dd 80f8 	ldr.w	r8, [sp, #248]	; 0xf8
 800bfe6:	9308      	str	r3, [sp, #32]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800bfe8:	4598      	cmp	r8, r3
 800bfea:	f040 8110 	bne.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800bfee:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800bff0:	9306      	str	r3, [sp, #24]
 800bff2:	4611      	mov	r1, r2
 800bff4:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800bff6:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 800bff8:	9e3d      	ldr	r6, [sp, #244]	; 0xf4
 800bffa:	920e      	str	r2, [sp, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
 800bffc:	2900      	cmp	r1, #0
 800bffe:	9305      	str	r3, [sp, #20]
 800c000:	f77f af23 	ble.w	800be4a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2c6>
 800c004:	fb06 f303 	mul.w	r3, r6, r3
 800c008:	fb08 f303 	mul.w	r3, r8, r3
 800c00c:	931b      	str	r3, [sp, #108]	; 0x6c
 800c00e:	fb02 f308 	mul.w	r3, r2, r8
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	931c      	str	r3, [sp, #112]	; 0x70
 800c016:	fb06 f308 	mul.w	r3, r6, r8
 800c01a:	f04f 0a00 	mov.w	sl, #0
 800c01e:	931e      	str	r3, [sp, #120]	; 0x78
 800c020:	ea4f 0388 	mov.w	r3, r8, lsl #2
 800c024:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
 800c028:	930c      	str	r3, [sp, #48]	; 0x30
 800c02a:	f8cd a01c 	str.w	sl, [sp, #28]
 800c02e:	46d3      	mov	fp, sl
 800c030:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
 800c034:	4657      	mov	r7, sl
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800c036:	9b05      	ldr	r3, [sp, #20]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	f340 80c9 	ble.w	800c1d0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x64c>
 800c03e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c040:	9713      	str	r7, [sp, #76]	; 0x4c
 800c042:	4698      	mov	r8, r3
 800c044:	f1c3 0e00 	rsb	lr, r3, #0
 800c048:	9b07      	ldr	r3, [sp, #28]
 800c04a:	930d      	str	r3, [sp, #52]	; 0x34
 800c04c:	f04f 0c00 	mov.w	ip, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800c050:	2e00      	cmp	r6, #0
 800c052:	f340 80ae 	ble.w	800c1b2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x62e>
 800c056:	9b06      	ldr	r3, [sp, #24]
 800c058:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c05a:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
 800c05e:	4443      	add	r3, r8
 800c060:	4619      	mov	r1, r3
 800c062:	4283      	cmp	r3, r0
 800c064:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c066:	ea28 72e8 	bic.w	r2, r8, r8, asr #31
 800c06a:	4473      	add	r3, lr
 800c06c:	4413      	add	r3, r2
 800c06e:	9212      	str	r2, [sp, #72]	; 0x48
 800c070:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c072:	fb02 f303 	mul.w	r3, r2, r3
 800c076:	bfa8      	it	ge
 800c078:	4601      	movge	r1, r0
 800c07a:	931f      	str	r3, [sp, #124]	; 0x7c
 800c07c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c07e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c080:	911d      	str	r1, [sp, #116]	; 0x74
 800c082:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800c086:	930a      	str	r3, [sp, #40]	; 0x28
 800c088:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c08a:	9309      	str	r3, [sp, #36]	; 0x24
 800c08c:	189a      	adds	r2, r3, r2
 800c08e:	f1c3 0900 	rsb	r9, r3, #0
 800c092:	eb01 030e 	add.w	r3, r1, lr
 800c096:	920b      	str	r2, [sp, #44]	; 0x2c
 800c098:	f04f 0a00 	mov.w	sl, #0
 800c09c:	9321      	str	r3, [sp, #132]	; 0x84
        for (int channel = 0; channel < depth; ++channel) {
 800c09e:	9b08      	ldr	r3, [sp, #32]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	dd73      	ble.n	800c18c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x608>
 800c0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c0a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c0aa:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 800c0ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c0b0:	444b      	add	r3, r9
 800c0b2:	4423      	add	r3, r4
 800c0b4:	fb01 2303 	mla	r3, r1, r3, r2
 800c0b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c0ba:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800c0bc:	428a      	cmp	r2, r1
 800c0be:	bfa8      	it	ge
 800c0c0:	460a      	movge	r2, r1
 800c0c2:	4690      	mov	r8, r2
 800c0c4:	eb08 0109 	add.w	r1, r8, r9
              std::min(params.filter_width, input_width - in_x_origin);
 800c0c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0ca:	9211      	str	r2, [sp, #68]	; 0x44
 800c0cc:	9120      	str	r1, [sp, #128]	; 0x80
        for (int channel = 0; channel < depth; ++channel) {
 800c0ce:	2200      	movs	r2, #0
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800c0d0:	991d      	ldr	r1, [sp, #116]	; 0x74
 800c0d2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c0d4:	4281      	cmp	r1, r0
 800c0d6:	f340 8089 	ble.w	800c1ec <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x668>
          float max = std::numeric_limits<float>::lowest();
 800c0da:	ed5f 7a93 	vldr	s15, [pc, #-588]	; 800be90 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x30c>
 800c0de:	eb0e 0100 	add.w	r1, lr, r0
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800c0e2:	461d      	mov	r5, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 800c0e4:	4544      	cmp	r4, r8
 800c0e6:	da28      	bge.n	800c13a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5b6>
 800c0e8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c0ea:	4583      	cmp	fp, r0
 800c0ec:	f280 808f 	bge.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
 800c0f0:	9808      	ldr	r0, [sp, #32]
 800c0f2:	4282      	cmp	r2, r0
 800c0f4:	f280 808b 	bge.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
 800c0f8:	9806      	ldr	r0, [sp, #24]
 800c0fa:	4288      	cmp	r0, r1
 800c0fc:	f340 8087 	ble.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
 800c100:	2900      	cmp	r1, #0
 800c102:	f2c0 8084 	blt.w	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
 800c106:	eb09 0004 	add.w	r0, r9, r4
 800c10a:	462f      	mov	r7, r5
 800c10c:	9325      	str	r3, [sp, #148]	; 0x94
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800c10e:	2800      	cmp	r0, #0
 800c110:	db7d      	blt.n	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
 800c112:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c114:	4283      	cmp	r3, r0
 800c116:	dd7a      	ble.n	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
      if (__a < __b)
 800c118:	ed97 7a00 	vldr	s14, [r7]
 800c11c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c11e:	eeb4 7a67 	vcmp.f32	s14, s15
 800c122:	441f      	add	r7, r3
 800c124:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c12a:	f100 0001 	add.w	r0, r0, #1
 800c12e:	bfc8      	it	gt
 800c130:	eef0 7a47 	vmovgt.f32	s15, s14
 800c134:	4298      	cmp	r0, r3
 800c136:	d1ea      	bne.n	800c10e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x58a>
 800c138:	9b25      	ldr	r3, [sp, #148]	; 0x94
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800c13a:	981c      	ldr	r0, [sp, #112]	; 0x70
 800c13c:	4405      	add	r5, r0
 800c13e:	9821      	ldr	r0, [sp, #132]	; 0x84
 800c140:	3101      	adds	r1, #1
 800c142:	4288      	cmp	r0, r1
 800c144:	d1ce      	bne.n	800c0e4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x560>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800c146:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c148:	4559      	cmp	r1, fp
 800c14a:	dd60      	ble.n	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800c14c:	9905      	ldr	r1, [sp, #20]
 800c14e:	4561      	cmp	r1, ip
 800c150:	dd5d      	ble.n	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800c152:	4556      	cmp	r6, sl
 800c154:	dd5b      	ble.n	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800c156:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800c158:	428a      	cmp	r2, r1
 800c15a:	da58      	bge.n	800c20e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68a>
	return __b;
 800c15c:	eef4 7a48 	vcmp.f32	s15, s16
 800c160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c164:	bf48      	it	mi
 800c166:	eef0 7a48 	vmovmi.f32	s15, s16
	return __b;
 800c16a:	eef4 7a68 	vcmp.f32	s15, s17
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 800c16e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c174:	bfc8      	it	gt
 800c176:	eef0 7a68 	vmovgt.f32	s15, s17
 800c17a:	ece1 7a01 	vstmia	r1!, {s15}
 800c17e:	9111      	str	r1, [sp, #68]	; 0x44
        for (int channel = 0; channel < depth; ++channel) {
 800c180:	9908      	ldr	r1, [sp, #32]
 800c182:	3201      	adds	r2, #1
 800c184:	428a      	cmp	r2, r1
 800c186:	f103 0304 	add.w	r3, r3, #4
 800c18a:	d1a1      	bne.n	800c0d0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x54c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800c18c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c18e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c190:	4413      	add	r3, r2
 800c192:	930a      	str	r3, [sp, #40]	; 0x28
 800c194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c196:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c198:	1ad2      	subs	r2, r2, r3
 800c19a:	9209      	str	r2, [sp, #36]	; 0x24
 800c19c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c19e:	f10a 0a01 	add.w	sl, sl, #1
 800c1a2:	1ad2      	subs	r2, r2, r3
 800c1a4:	45b2      	cmp	sl, r6
 800c1a6:	920b      	str	r2, [sp, #44]	; 0x2c
 800c1a8:	4499      	add	r9, r3
 800c1aa:	f47f af78 	bne.w	800c09e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x51a>
 800c1ae:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800c1b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1b4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c1b6:	4413      	add	r3, r2
 800c1b8:	930d      	str	r3, [sp, #52]	; 0x34
 800c1ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c1bc:	eba8 0803 	sub.w	r8, r8, r3
 800c1c0:	449e      	add	lr, r3
 800c1c2:	9b05      	ldr	r3, [sp, #20]
 800c1c4:	f10c 0c01 	add.w	ip, ip, #1
 800c1c8:	459c      	cmp	ip, r3
 800c1ca:	f47f af41 	bne.w	800c050 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x4cc>
 800c1ce:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  for (int batch = 0; batch < batches; ++batch) {
 800c1d0:	9b07      	ldr	r3, [sp, #28]
 800c1d2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c1d4:	4413      	add	r3, r2
 800c1d6:	9307      	str	r3, [sp, #28]
 800c1d8:	9b06      	ldr	r3, [sp, #24]
 800c1da:	441f      	add	r7, r3
 800c1dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c1de:	f10b 0b01 	add.w	fp, fp, #1
 800c1e2:	459b      	cmp	fp, r3
 800c1e4:	f47f af27 	bne.w	800c036 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x4b2>
  return kTfLiteOk;
 800c1e8:	2000      	movs	r0, #0
 800c1ea:	e62f      	b.n	800be4c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2c8>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800c1ec:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c214 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x690>
 800c1f0:	e7a9      	b.n	800c146 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5c2>
  output_dims.h = output_shape.Dims(1);
 800c1f2:	9a54      	ldr	r2, [sp, #336]	; 0x150
 800c1f4:	922d      	str	r2, [sp, #180]	; 0xb4
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c1f6:	9a55      	ldr	r2, [sp, #340]	; 0x154
 800c1f8:	e67e      	b.n	800bef8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x374>
 800c1fa:	984d      	ldr	r0, [sp, #308]	; 0x134
 800c1fc:	6841      	ldr	r1, [r0, #4]
  input_dims.h = input_shape.Dims(1);
 800c1fe:	9129      	str	r1, [sp, #164]	; 0xa4
 800c200:	6881      	ldr	r1, [r0, #8]
 800c202:	e66d      	b.n	800bee0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x35c>
    *activation_min = 0;
 800c204:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800c218 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x694>
    *activation_max = 6;
 800c208:	eef1 8a08 	vmov.f32	s17, #24	; 0x40c00000  6.0
 800c20c:	e6bc      	b.n	800bf88 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x404>
  TFLITE_DCHECK(context != nullptr);
 800c20e:	f004 ffb9 	bl	8011184 <abort>
 800c212:	bf00      	nop
 800c214:	ff7fffff 	.word	0xff7fffff
 800c218:	00000000 	.word	0x00000000

0800c21c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
 800c21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c220:	ed2d 8b02 	vpush	{d8}
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 800c224:	e9d1 7504 	ldrd	r7, r5, [r1, #16]
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
 800c228:	b0dd      	sub	sp, #372	; 0x174
 800c22a:	2800      	cmp	r0, #0
 800c22c:	f000 8334 	beq.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800c230:	680b      	ldr	r3, [r1, #0]
 800c232:	4688      	mov	r8, r1
 800c234:	6859      	ldr	r1, [r3, #4]
 800c236:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800c238:	4606      	mov	r6, r0
 800c23a:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800c23c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800c240:	4604      	mov	r4, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800c242:	6859      	ldr	r1, [r3, #4]
 800c244:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800c246:	4630      	mov	r0, r6
 800c248:	4798      	blx	r3
 800c24a:	4682      	mov	sl, r0
  switch (input->type) {
 800c24c:	7a20      	ldrb	r0, [r4, #8]
 800c24e:	2803      	cmp	r0, #3
 800c250:	f000 81cf 	beq.w	800c5f2 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x3d6>
 800c254:	2809      	cmp	r0, #9
 800c256:	f000 8163 	beq.w	800c520 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x304>
 800c25a:	2801      	cmp	r0, #1
 800c25c:	d00c      	beq.n	800c278 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x5c>
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
 800c25e:	6974      	ldr	r4, [r6, #20]
 800c260:	f7f7 fb0c 	bl	800387c <TfLiteTypeGetName>
 800c264:	49aa      	ldr	r1, [pc, #680]	; (800c510 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2f4>)
 800c266:	4602      	mov	r2, r0
 800c268:	4630      	mov	r0, r6
 800c26a:	47a0      	blx	r4
      return kTfLiteError;
 800c26c:	2001      	movs	r0, #1
}
 800c26e:	b05d      	add	sp, #372	; 0x174
 800c270:	ecbd 8b02 	vpop	{d8}
 800c274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  CalculateActivationRange(params->activation, &activation_min,
 800c278:	7d2b      	ldrb	r3, [r5, #20]
  if (activation == kTfLiteActRelu) {
 800c27a:	2b01      	cmp	r3, #1
 800c27c:	f000 8306 	beq.w	800c88c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x670>
  } else if (activation == kTfLiteActRelu6) {
 800c280:	2b03      	cmp	r3, #3
 800c282:	f000 82fe 	beq.w	800c882 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x666>
    *activation_max = std::numeric_limits<T>::max();
 800c286:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800c514 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2f8>
 800c28a:	eddf 7aa3 	vldr	s15, [pc, #652]	; 800c518 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2fc>
 800c28e:	2b02      	cmp	r3, #2
 800c290:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800c294:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
 800c298:	bf18      	it	ne
 800c29a:	eef0 8a47 	vmovne.f32	s17, s14
 800c29e:	bf18      	it	ne
 800c2a0:	eeb0 8a67 	vmovne.f32	s16, s15
  op_params.stride_height = params->stride_height;
 800c2a4:	68ab      	ldr	r3, [r5, #8]
 800c2a6:	9312      	str	r3, [sp, #72]	; 0x48
  op_params.stride_width = params->stride_width;
 800c2a8:	686b      	ldr	r3, [r5, #4]
 800c2aa:	9313      	str	r3, [sp, #76]	; 0x4c
  op_params.filter_height = params->filter_height;
 800c2ac:	692b      	ldr	r3, [r5, #16]
 800c2ae:	9314      	str	r3, [sp, #80]	; 0x50
  op_params.filter_width = params->filter_width;
 800c2b0:	68eb      	ldr	r3, [r5, #12]
 800c2b2:	9315      	str	r3, [sp, #84]	; 0x54
  op_params.padding_values.height = data.padding.height;
 800c2b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c2b8:	9316      	str	r3, [sp, #88]	; 0x58
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 800c2ba:	4621      	mov	r1, r4
  op_params.padding_values.width = data.padding.width;
 800c2bc:	f9b7 3000 	ldrsh.w	r3, [r7]
 800c2c0:	9317      	str	r3, [sp, #92]	; 0x5c
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 800c2c2:	a832      	add	r0, sp, #200	; 0xc8
 800c2c4:	f7fa fbec 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800c2c8:	6823      	ldr	r3, [r4, #0]
 800c2ca:	9318      	str	r3, [sp, #96]	; 0x60
                             tflite::micro::GetTensorShape(output),
 800c2cc:	4651      	mov	r1, sl
 800c2ce:	a838      	add	r0, sp, #224	; 0xe0
 800c2d0:	f7fa fbe6 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800c2d4:	f1ba 0f00 	cmp.w	sl, #0
 800c2d8:	d001      	beq.n	800c2de <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xc2>
 800c2da:	f8da a000 	ldr.w	sl, [sl]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800c2de:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800c2e0:	2b04      	cmp	r3, #4
 800c2e2:	f040 82d9 	bne.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800c2e6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800c2e8:	2b04      	cmp	r3, #4
 800c2ea:	f040 82d5 	bne.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
 800c2ee:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800c2f0:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800c2f2:	930d      	str	r3, [sp, #52]	; 0x34
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800c2f4:	429a      	cmp	r2, r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c2f6:	920c      	str	r2, [sp, #48]	; 0x30
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800c2f8:	f040 82ce 	bne.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c2fc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800c2fe:	f8dd 90f0 	ldr.w	r9, [sp, #240]	; 0xf0
 800c302:	9309      	str	r3, [sp, #36]	; 0x24
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800c304:	4599      	cmp	r9, r3
 800c306:	f040 82c7 	bne.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c30a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800c30c:	9307      	str	r3, [sp, #28]
 800c30e:	4611      	mov	r1, r2
 800c310:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800c312:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800c314:	9f3b      	ldr	r7, [sp, #236]	; 0xec
 800c316:	9206      	str	r2, [sp, #24]
  for (int batch = 0; batch < batches; ++batch) {
 800c318:	2900      	cmp	r1, #0
 800c31a:	9305      	str	r3, [sp, #20]
 800c31c:	f340 80f1 	ble.w	800c502 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2e6>
 800c320:	fb07 f303 	mul.w	r3, r7, r3
 800c324:	fb09 f303 	mul.w	r3, r9, r3
 800c328:	931b      	str	r3, [sp, #108]	; 0x6c
 800c32a:	fb02 f309 	mul.w	r3, r2, r9
 800c32e:	009b      	lsls	r3, r3, #2
 800c330:	9319      	str	r3, [sp, #100]	; 0x64
 800c332:	fb07 f309 	mul.w	r3, r7, r9
 800c336:	2600      	movs	r6, #0
 800c338:	931f      	str	r3, [sp, #124]	; 0x7c
 800c33a:	ea4f 0389 	mov.w	r3, r9, lsl #2
              filter_count++;
 800c33e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c342:	930e      	str	r3, [sp, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
 800c344:	9608      	str	r6, [sp, #32]
 800c346:	46b0      	mov	r8, r6
 800c348:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 800c34c:	46b3      	mov	fp, r6
 800c34e:	46bc      	mov	ip, r7
 800c350:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800c354:	9b05      	ldr	r3, [sp, #20]
 800c356:	2b00      	cmp	r3, #0
 800c358:	f340 80c7 	ble.w	800c4ea <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2ce>
 800c35c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c35e:	9304      	str	r3, [sp, #16]
 800c360:	f1c3 0e00 	rsb	lr, r3, #0
 800c364:	9b08      	ldr	r3, [sp, #32]
 800c366:	930b      	str	r3, [sp, #44]	; 0x2c
 800c368:	f04f 0900 	mov.w	r9, #0
 800c36c:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800c370:	f1bc 0f00 	cmp.w	ip, #0
 800c374:	f340 80a8 	ble.w	800c4c8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2ac>
 800c378:	9b04      	ldr	r3, [sp, #16]
 800c37a:	9907      	ldr	r1, [sp, #28]
 800c37c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c37e:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800c382:	440b      	add	r3, r1
 800c384:	4619      	mov	r1, r3
 800c386:	4283      	cmp	r3, r0
 800c388:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c38a:	921d      	str	r2, [sp, #116]	; 0x74
 800c38c:	4473      	add	r3, lr
 800c38e:	4413      	add	r3, r2
 800c390:	9a06      	ldr	r2, [sp, #24]
 800c392:	fb02 f303 	mul.w	r3, r2, r3
 800c396:	931a      	str	r3, [sp, #104]	; 0x68
 800c398:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c39a:	bfa8      	it	ge
 800c39c:	4601      	movge	r1, r0
 800c39e:	461e      	mov	r6, r3
 800c3a0:	425a      	negs	r2, r3
 800c3a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3a4:	930a      	str	r3, [sp, #40]	; 0x28
 800c3a6:	eb01 030e 	add.w	r3, r1, lr
 800c3aa:	911e      	str	r1, [sp, #120]	; 0x78
 800c3ac:	f04f 0a00 	mov.w	sl, #0
 800c3b0:	9321      	str	r3, [sp, #132]	; 0x84
        for (int channel = 0; channel < depth; ++channel) {
 800c3b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	dd7a      	ble.n	800c4ae <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x292>
 800c3b8:	9b06      	ldr	r3, [sp, #24]
 800c3ba:	9915      	ldr	r1, [sp, #84]	; 0x54
 800c3bc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800c3be:	18f3      	adds	r3, r6, r3
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	428b      	cmp	r3, r1
 800c3c4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c3c6:	bfa8      	it	ge
 800c3c8:	4608      	movge	r0, r1
 800c3ca:	ea26 75e6 	bic.w	r5, r6, r6, asr #31
 800c3ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c3d0:	901c      	str	r0, [sp, #112]	; 0x70
 800c3d2:	4413      	add	r3, r2
 800c3d4:	442b      	add	r3, r5
 800c3d6:	fb04 1303 	mla	r3, r4, r3, r1
 800c3da:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c3dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c3de:	4410      	add	r0, r2
 800c3e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c3e4:	910f      	str	r1, [sp, #60]	; 0x3c
 800c3e6:	9020      	str	r0, [sp, #128]	; 0x80
 800c3e8:	2100      	movs	r1, #0
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800c3ea:	e9dd 041d 	ldrd	r0, r4, [sp, #116]	; 0x74
          float filter_count = 0;
 800c3ee:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800c51c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x300>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800c3f2:	42a0      	cmp	r0, r4
          float total = 0.f;
 800c3f4:	eef0 6a47 	vmov.f32	s13, s14
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800c3f8:	da30      	bge.n	800c45c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x240>
 800c3fa:	4470      	add	r0, lr
 800c3fc:	461f      	mov	r7, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 800c3fe:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c400:	42ac      	cmp	r4, r5
 800c402:	dd25      	ble.n	800c450 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x234>
 800c404:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800c406:	455c      	cmp	r4, fp
 800c408:	f340 8246 	ble.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
 800c40c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c40e:	42a1      	cmp	r1, r4
 800c410:	f280 8242 	bge.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
 800c414:	9c07      	ldr	r4, [sp, #28]
 800c416:	4284      	cmp	r4, r0
 800c418:	f340 823e 	ble.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
 800c41c:	2800      	cmp	r0, #0
 800c41e:	f2c0 823b 	blt.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
 800c422:	1954      	adds	r4, r2, r5
 800c424:	46b8      	mov	r8, r7
 800c426:	9323      	str	r3, [sp, #140]	; 0x8c
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800c428:	2c00      	cmp	r4, #0
 800c42a:	f2c0 8235 	blt.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
 800c42e:	9b06      	ldr	r3, [sp, #24]
 800c430:	42a3      	cmp	r3, r4
 800c432:	f340 8231 	ble.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
 800c436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
              total +=
 800c438:	edd8 7a00 	vldr	s15, [r8]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 800c43c:	4498      	add	r8, r3
 800c43e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c440:	3401      	adds	r4, #1
 800c442:	42a3      	cmp	r3, r4
              total +=
 800c444:	ee76 6aa7 	vadd.f32	s13, s13, s15
              filter_count++;
 800c448:	ee37 7a06 	vadd.f32	s14, s14, s12
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 800c44c:	d1ec      	bne.n	800c428 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x20c>
 800c44e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800c450:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800c452:	4427      	add	r7, r4
 800c454:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800c456:	3001      	adds	r0, #1
 800c458:	42a0      	cmp	r0, r4
 800c45a:	d1d0      	bne.n	800c3fe <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x1e2>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800c45c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c45e:	4558      	cmp	r0, fp
          const float average = total / filter_count;
 800c460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c464:	f340 8218 	ble.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800c468:	9805      	ldr	r0, [sp, #20]
 800c46a:	4581      	cmp	r9, r0
 800c46c:	f280 8214 	bge.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800c470:	45e2      	cmp	sl, ip
 800c472:	f280 8211 	bge.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800c476:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c478:	4281      	cmp	r1, r0
 800c47a:	f280 820d 	bge.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
	return __b;
 800c47e:	eef4 7a48 	vcmp.f32	s15, s16
 800c482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c486:	bf48      	it	mi
 800c488:	eef0 7a48 	vmovmi.f32	s15, s16
	return __b;
 800c48c:	eef4 7a68 	vcmp.f32	s15, s17
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 800c490:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c496:	bfc8      	it	gt
 800c498:	eef0 7a68 	vmovgt.f32	s15, s17
 800c49c:	ece0 7a01 	vstmia	r0!, {s15}
 800c4a0:	900f      	str	r0, [sp, #60]	; 0x3c
        for (int channel = 0; channel < depth; ++channel) {
 800c4a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4a4:	3101      	adds	r1, #1
 800c4a6:	4281      	cmp	r1, r0
 800c4a8:	f103 0304 	add.w	r3, r3, #4
 800c4ac:	d19d      	bne.n	800c3ea <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x1ce>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800c4ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4b0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c4b2:	440b      	add	r3, r1
 800c4b4:	f10a 0a01 	add.w	sl, sl, #1
 800c4b8:	930a      	str	r3, [sp, #40]	; 0x28
 800c4ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c4bc:	45e2      	cmp	sl, ip
 800c4be:	eba6 0603 	sub.w	r6, r6, r3
 800c4c2:	441a      	add	r2, r3
 800c4c4:	f47f af75 	bne.w	800c3b2 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x196>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800c4c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4ca:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c4cc:	4413      	add	r3, r2
 800c4ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4d0:	9a04      	ldr	r2, [sp, #16]
 800c4d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c4d4:	1ad2      	subs	r2, r2, r3
 800c4d6:	449e      	add	lr, r3
 800c4d8:	9b05      	ldr	r3, [sp, #20]
 800c4da:	9204      	str	r2, [sp, #16]
 800c4dc:	f109 0901 	add.w	r9, r9, #1
 800c4e0:	4599      	cmp	r9, r3
 800c4e2:	f47f af45 	bne.w	800c370 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x154>
 800c4e6:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
  for (int batch = 0; batch < batches; ++batch) {
 800c4ea:	9b08      	ldr	r3, [sp, #32]
 800c4ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c4ee:	4413      	add	r3, r2
 800c4f0:	9308      	str	r3, [sp, #32]
 800c4f2:	9b07      	ldr	r3, [sp, #28]
 800c4f4:	4498      	add	r8, r3
 800c4f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4f8:	f10b 0b01 	add.w	fp, fp, #1
 800c4fc:	459b      	cmp	fp, r3
 800c4fe:	f47f af29 	bne.w	800c354 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x138>
  return kTfLiteOk;
 800c502:	2000      	movs	r0, #0
}
 800c504:	b05d      	add	sp, #372	; 0x174
 800c506:	ecbd 8b02 	vpop	{d8}
 800c50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c50e:	bf00      	nop
 800c510:	08017660 	.word	0x08017660
 800c514:	7f7fffff 	.word	0x7f7fffff
 800c518:	ff7fffff 	.word	0xff7fffff
 800c51c:	00000000 	.word	0x00000000
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 800c520:	4621      	mov	r1, r4
 800c522:	a83e      	add	r0, sp, #248	; 0xf8
 800c524:	f7fa fabc 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800c528:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800c52a:	2b04      	cmp	r3, #4
 800c52c:	f040 81b4 	bne.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 800c530:	4651      	mov	r1, sl
 800c532:	a844      	add	r0, sp, #272	; 0x110
 800c534:	f7fa fab4 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800c538:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800c53a:	2b04      	cmp	r3, #4
 800c53c:	f040 81ac 	bne.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
    TFLITE_DCHECK_LT(i, size_);
 800c540:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800c542:	2b03      	cmp	r3, #3
 800c544:	f340 81a8 	ble.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c548:	2b05      	cmp	r3, #5
 800c54a:	f300 818f 	bgt.w	800c86c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x650>
 800c54e:	9b48      	ldr	r3, [sp, #288]	; 0x120
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800c550:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800c552:	429a      	cmp	r2, r3
 800c554:	f040 81a0 	bne.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
    input_dims.h = input_shape.Dims(1);
 800c558:	9a40      	ldr	r2, [sp, #256]	; 0x100
 800c55a:	9227      	str	r2, [sp, #156]	; 0x9c
    input_dims.n = 1;
 800c55c:	2201      	movs	r2, #1
 800c55e:	9226      	str	r2, [sp, #152]	; 0x98
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c560:	9a41      	ldr	r2, [sp, #260]	; 0x104
    output_dims.c = depth;
 800c562:	932d      	str	r3, [sp, #180]	; 0xb4
    input_dims.c = depth;
 800c564:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
    pool_params.stride.w = params->stride_width;
 800c568:	686b      	ldr	r3, [r5, #4]
    output_dims.h = output_shape.Dims(1);
 800c56a:	9a46      	ldr	r2, [sp, #280]	; 0x118
    pool_params.stride.w = params->stride_width;
 800c56c:	934a      	str	r3, [sp, #296]	; 0x128
 800c56e:	68ab      	ldr	r3, [r5, #8]
 800c570:	934b      	str	r3, [sp, #300]	; 0x12c
    output_dims.h = output_shape.Dims(1);
 800c572:	922b      	str	r2, [sp, #172]	; 0xac
    output_dims.n = 1;
 800c574:	2301      	movs	r3, #1
    output_dims.w = output_shape.Dims(2);
 800c576:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    output_dims.n = 1;
 800c578:	932a      	str	r3, [sp, #168]	; 0xa8
    output_dims.w = output_shape.Dims(2);
 800c57a:	922c      	str	r2, [sp, #176]	; 0xb0
    pool_params.padding.w = data.padding.width;
 800c57c:	6838      	ldr	r0, [r7, #0]
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	6939      	ldr	r1, [r7, #16]
    filter_dims.n = 1;
 800c582:	932e      	str	r3, [sp, #184]	; 0xb8
    pool_params.padding.w = data.padding.width;
 800c584:	e9cd 024c 	strd	r0, r2, [sp, #304]	; 0x130
 800c588:	697a      	ldr	r2, [r7, #20]
 800c58a:	924e      	str	r2, [sp, #312]	; 0x138
 800c58c:	69ba      	ldr	r2, [r7, #24]
 800c58e:	924f      	str	r2, [sp, #316]	; 0x13c
    filter_dims.w = params->filter_width;
 800c590:	68ea      	ldr	r2, [r5, #12]
    filter_dims.c = 1;
 800c592:	e9cd 2330 	strd	r2, r3, [sp, #192]	; 0xc0
    filter_dims.h = params->filter_height;
 800c596:	692b      	ldr	r3, [r5, #16]
 800c598:	932f      	str	r3, [sp, #188]	; 0xbc
    ctx.buf = nullptr;
 800c59a:	2300      	movs	r3, #0
    if (data.buffer_idx > -1) {
 800c59c:	4299      	cmp	r1, r3
    ctx.size = 0;
 800c59e:	e9cd 3324 	strd	r3, r3, [sp, #144]	; 0x90
    if (data.buffer_idx > -1) {
 800c5a2:	db03      	blt.n	800c5ac <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x390>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 800c5a4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	4798      	blx	r3
 800c5aa:	9024      	str	r0, [sp, #144]	; 0x90
  return reinterpret_cast<const T*>(tensor->data.raw);
 800c5ac:	6823      	ldr	r3, [r4, #0]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800c5ae:	f1ba 0f00 	cmp.w	sl, #0
 800c5b2:	d001      	beq.n	800c5b8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x39c>
 800c5b4:	f8da a000 	ldr.w	sl, [sl]
    TFLITE_DCHECK_EQ(
 800c5b8:	a92a      	add	r1, sp, #168	; 0xa8
 800c5ba:	aa2e      	add	r2, sp, #184	; 0xb8
 800c5bc:	e9cd 1a01 	strd	r1, sl, [sp, #4]
 800c5c0:	9200      	str	r2, [sp, #0]
 800c5c2:	a94a      	add	r1, sp, #296	; 0x128
 800c5c4:	aa26      	add	r2, sp, #152	; 0x98
 800c5c6:	a824      	add	r0, sp, #144	; 0x90
 800c5c8:	f003 fadc 	bl	800fb84 <arm_avgpool_s8>
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	f040 8163 	bne.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
    if (size_ > kMaxSmallSize) {
 800c5d2:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800c5d4:	2b05      	cmp	r3, #5
 800c5d6:	dd03      	ble.n	800c5e0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x3c4>
      delete[] dims_pointer_;
 800c5d8:	9845      	ldr	r0, [sp, #276]	; 0x114
 800c5da:	b108      	cbz	r0, 800c5e0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x3c4>
 800c5dc:	f004 faf8 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800c5e0:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800c5e2:	2b05      	cmp	r3, #5
 800c5e4:	dd8d      	ble.n	800c502 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2e6>
      delete[] dims_pointer_;
 800c5e6:	983f      	ldr	r0, [sp, #252]	; 0xfc
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	d08a      	beq.n	800c502 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2e6>
 800c5ec:	f004 faf0 	bl	8010bd0 <_ZdaPv>
 800c5f0:	e787      	b.n	800c502 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2e6>
  op_params.stride_height = params->stride_height;
 800c5f2:	68ab      	ldr	r3, [r5, #8]
 800c5f4:	9314      	str	r3, [sp, #80]	; 0x50
  op_params.stride_width = params->stride_width;
 800c5f6:	686b      	ldr	r3, [r5, #4]
 800c5f8:	9312      	str	r3, [sp, #72]	; 0x48
  op_params.filter_height = params->filter_height;
 800c5fa:	692b      	ldr	r3, [r5, #16]
 800c5fc:	930c      	str	r3, [sp, #48]	; 0x30
  op_params.filter_width = params->filter_width;
 800c5fe:	68eb      	ldr	r3, [r5, #12]
 800c600:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.quantized_activation_min = data.activation_min;
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	9305      	str	r3, [sp, #20]
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 800c606:	4621      	mov	r1, r4
  op_params.quantized_activation_max = data.activation_max;
 800c608:	69bb      	ldr	r3, [r7, #24]
 800c60a:	9307      	str	r3, [sp, #28]
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 800c60c:	a850      	add	r0, sp, #320	; 0x140
  op_params.padding_values.width = data.padding.width;
 800c60e:	e9d7 5600 	ldrd	r5, r6, [r7]
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 800c612:	f7fa fa45 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800c616:	6823      	ldr	r3, [r4, #0]
 800c618:	9311      	str	r3, [sp, #68]	; 0x44
                               tflite::micro::GetTensorShape(output),
 800c61a:	4651      	mov	r1, sl
 800c61c:	a856      	add	r0, sp, #344	; 0x158
 800c61e:	f7fa fa3f 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800c622:	f1ba 0f00 	cmp.w	sl, #0
 800c626:	d001      	beq.n	800c62c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x410>
 800c628:	f8da a000 	ldr.w	sl, [sl]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 800c62c:	9b07      	ldr	r3, [sp, #28]
 800c62e:	9a05      	ldr	r2, [sp, #20]
 800c630:	4293      	cmp	r3, r2
 800c632:	f2c0 8131 	blt.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800c636:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800c638:	2b04      	cmp	r3, #4
 800c63a:	f040 812d 	bne.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800c63e:	9b56      	ldr	r3, [sp, #344]	; 0x158
 800c640:	2b04      	cmp	r3, #4
 800c642:	f040 8129 	bne.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c646:	9b51      	ldr	r3, [sp, #324]	; 0x144
 800c648:	930a      	str	r3, [sp, #40]	; 0x28
 800c64a:	461a      	mov	r2, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800c64c:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 800c64e:	4293      	cmp	r3, r2
 800c650:	f040 8122 	bne.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c654:	9b54      	ldr	r3, [sp, #336]	; 0x150
 800c656:	930b      	str	r3, [sp, #44]	; 0x2c
 800c658:	461a      	mov	r2, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800c65a:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 800c65c:	4293      	cmp	r3, r2
 800c65e:	f040 811b 	bne.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c662:	9b52      	ldr	r3, [sp, #328]	; 0x148
 800c664:	9316      	str	r3, [sp, #88]	; 0x58
 800c666:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 800c668:	9315      	str	r3, [sp, #84]	; 0x54
 800c66a:	9b58      	ldr	r3, [sp, #352]	; 0x160
 800c66c:	9309      	str	r3, [sp, #36]	; 0x24
 800c66e:	9b59      	ldr	r3, [sp, #356]	; 0x164
 800c670:	9308      	str	r3, [sp, #32]
  for (int batch = 0; batch < batches; ++batch) {
 800c672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c674:	2b00      	cmp	r3, #0
 800c676:	f77f af44 	ble.w	800c502 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2e6>
  op_params.padding_values.height = data.padding.height;
 800c67a:	b233      	sxth	r3, r6
 800c67c:	930f      	str	r3, [sp, #60]	; 0x3c
  op_params.padding_values.width = data.padding.width;
 800c67e:	b22b      	sxth	r3, r5
 800c680:	9310      	str	r3, [sp, #64]	; 0x40
 800c682:	f04f 0b00 	mov.w	fp, #0
 800c686:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800c68a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	f340 80d5 	ble.w	800c83c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x620>
 800c692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c694:	f04f 0a00 	mov.w	sl, #0
 800c698:	469e      	mov	lr, r3
 800c69a:	f1c3 0900 	rsb	r9, r3, #0
 800c69e:	4653      	mov	r3, sl
 800c6a0:	46da      	mov	sl, fp
 800c6a2:	469b      	mov	fp, r3
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800c6a4:	9b08      	ldr	r3, [sp, #32]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	f340 80bd 	ble.w	800c826 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x60a>
 800c6ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c6ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6b0:	f8cd e080 	str.w	lr, [sp, #128]	; 0x80
 800c6b4:	4473      	add	r3, lr
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	bfa8      	it	ge
 800c6ba:	4613      	movge	r3, r2
 800c6bc:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
 800c6c0:	920d      	str	r2, [sp, #52]	; 0x34
 800c6c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c6c4:	930e      	str	r3, [sp, #56]	; 0x38
 800c6c6:	444b      	add	r3, r9
 800c6c8:	f04f 0800 	mov.w	r8, #0
 800c6cc:	9206      	str	r2, [sp, #24]
 800c6ce:	931e      	str	r3, [sp, #120]	; 0x78
 800c6d0:	4252      	negs	r2, r2
 800c6d2:	464b      	mov	r3, r9
 800c6d4:	9204      	str	r2, [sp, #16]
 800c6d6:	46c1      	mov	r9, r8
 800c6d8:	46de      	mov	lr, fp
 800c6da:	46d0      	mov	r8, sl
 800c6dc:	469a      	mov	sl, r3
        for (int channel = 0; channel < depth; ++channel) {
 800c6de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f340 808e 	ble.w	800c802 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x5e6>
 800c6e6:	9a06      	ldr	r2, [sp, #24]
 800c6e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6ea:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c6ec:	4413      	add	r3, r2
 800c6ee:	428b      	cmp	r3, r1
 800c6f0:	bfa8      	it	ge
 800c6f2:	460b      	movge	r3, r1
 800c6f4:	ea22 7be2 	bic.w	fp, r2, r2, asr #31
 800c6f8:	9313      	str	r3, [sp, #76]	; 0x4c
 800c6fa:	eba3 030b 	sub.w	r3, r3, fp
 800c6fe:	f04f 0c00 	mov.w	ip, #0
 800c702:	931d      	str	r3, [sp, #116]	; 0x74
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800c704:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c708:	429a      	cmp	r2, r3
 800c70a:	f280 80c4 	bge.w	800c896 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67a>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800c70e:	9b52      	ldr	r3, [sp, #328]	; 0x148
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800c710:	9e53      	ldr	r6, [sp, #332]	; 0x14c
 800c712:	9904      	ldr	r1, [sp, #16]
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800c714:	9319      	str	r3, [sp, #100]	; 0x64
 800c716:	fb03 a308 	mla	r3, r3, r8, sl
 800c71a:	4413      	add	r3, r2
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800c71c:	9854      	ldr	r0, [sp, #336]	; 0x150
 800c71e:	fb06 1303 	mla	r3, r6, r3, r1
 800c722:	445b      	add	r3, fp
 800c724:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c726:	fb00 c303 	mla	r3, r0, r3, ip
 800c72a:	18cf      	adds	r7, r1, r3
  inline int32_t DimensionsCount() const { return size_; }
 800c72c:	9950      	ldr	r1, [sp, #320]	; 0x140
 800c72e:	9117      	str	r1, [sp, #92]	; 0x5c
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800c730:	9951      	ldr	r1, [sp, #324]	; 0x144
 800c732:	9118      	str	r1, [sp, #96]	; 0x60
 800c734:	4674      	mov	r4, lr
 800c736:	fb00 f106 	mul.w	r1, r0, r6
          int32_t acc = 0;
 800c73a:	2300      	movs	r3, #0
 800c73c:	911c      	str	r1, [sp, #112]	; 0x70
 800c73e:	46ce      	mov	lr, r9
 800c740:	eb0a 0102 	add.w	r1, sl, r2
 800c744:	46a1      	mov	r9, r4
          int filter_count = 0;
 800c746:	461a      	mov	r2, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 800c748:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c74a:	45a3      	cmp	fp, r4
 800c74c:	da28      	bge.n	800c7a0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x584>
 800c74e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800c750:	2c04      	cmp	r4, #4
 800c752:	f040 80a1 	bne.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
 800c756:	4584      	cmp	ip, r0
 800c758:	f280 809e 	bge.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
 800c75c:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800c75e:	428c      	cmp	r4, r1
 800c760:	f340 809a 	ble.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
 800c764:	2900      	cmp	r1, #0
 800c766:	f2c0 8097 	blt.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
 800c76a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800c76c:	9c04      	ldr	r4, [sp, #16]
 800c76e:	9121      	str	r1, [sp, #132]	; 0x84
 800c770:	4415      	add	r5, r2
 800c772:	951b      	str	r5, [sp, #108]	; 0x6c
 800c774:	445c      	add	r4, fp
 800c776:	463d      	mov	r5, r7
 800c778:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c77a:	4588      	cmp	r8, r1
 800c77c:	f280 808c 	bge.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800c780:	2c00      	cmp	r4, #0
 800c782:	f2c0 8089 	blt.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
 800c786:	42a6      	cmp	r6, r4
 800c788:	f340 8086 	ble.w	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
              acc +=
 800c78c:	7829      	ldrb	r1, [r5, #0]
 800c78e:	440b      	add	r3, r1
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 800c790:	991b      	ldr	r1, [sp, #108]	; 0x6c
              filter_count++;
 800c792:	3201      	adds	r2, #1
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 800c794:	428a      	cmp	r2, r1
 800c796:	f104 0401 	add.w	r4, r4, #1
 800c79a:	4405      	add	r5, r0
 800c79c:	d1ec      	bne.n	800c778 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x55c>
 800c79e:	9921      	ldr	r1, [sp, #132]	; 0x84
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800c7a0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c7a2:	4427      	add	r7, r4
 800c7a4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800c7a6:	3101      	adds	r1, #1
 800c7a8:	428c      	cmp	r4, r1
 800c7aa:	d1cd      	bne.n	800c748 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x52c>
          acc = (acc + filter_count / 2) / filter_count;
 800c7ac:	eb03 0362 	add.w	r3, r3, r2, asr #1
 800c7b0:	fbb3 f2f2 	udiv	r2, r3, r2
      if (__a < __b)
 800c7b4:	9b05      	ldr	r3, [sp, #20]
 800c7b6:	4649      	mov	r1, r9
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	46f1      	mov	r9, lr
 800c7bc:	468e      	mov	lr, r1
 800c7be:	db53      	blt.n	800c868 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x64c>
    min(const _Tp& __a, const _Tp& __b)
 800c7c0:	9b07      	ldr	r3, [sp, #28]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	bfa8      	it	ge
 800c7c6:	461a      	movge	r2, r3
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 800c7c8:	9b56      	ldr	r3, [sp, #344]	; 0x158
 800c7ca:	2b04      	cmp	r3, #4
 800c7cc:	d164      	bne.n	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800c7ce:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 800c7d0:	4598      	cmp	r8, r3
 800c7d2:	da61      	bge.n	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800c7d4:	9b58      	ldr	r3, [sp, #352]	; 0x160
 800c7d6:	4573      	cmp	r3, lr
 800c7d8:	dd5e      	ble.n	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800c7da:	9859      	ldr	r0, [sp, #356]	; 0x164
 800c7dc:	4581      	cmp	r9, r0
 800c7de:	da5b      	bge.n	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800c7e0:	995a      	ldr	r1, [sp, #360]	; 0x168
 800c7e2:	458c      	cmp	ip, r1
 800c7e4:	da58      	bge.n	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 800c7e6:	fb03 e308 	mla	r3, r3, r8, lr
 800c7ea:	fb00 9303 	mla	r3, r0, r3, r9
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 800c7ee:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800c7f0:	fb01 0303 	mla	r3, r1, r3, r0
 800c7f4:	f803 200c 	strb.w	r2, [r3, ip]
        for (int channel = 0; channel < depth; ++channel) {
 800c7f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7fa:	f10c 0c01 	add.w	ip, ip, #1
 800c7fe:	459c      	cmp	ip, r3
 800c800:	d180      	bne.n	800c704 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x4e8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800c802:	9b04      	ldr	r3, [sp, #16]
 800c804:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c806:	4413      	add	r3, r2
 800c808:	9304      	str	r3, [sp, #16]
 800c80a:	9b06      	ldr	r3, [sp, #24]
 800c80c:	1a9b      	subs	r3, r3, r2
 800c80e:	9306      	str	r3, [sp, #24]
 800c810:	9b08      	ldr	r3, [sp, #32]
 800c812:	f109 0901 	add.w	r9, r9, #1
 800c816:	4599      	cmp	r9, r3
 800c818:	f47f af61 	bne.w	800c6de <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x4c2>
 800c81c:	46f3      	mov	fp, lr
 800c81e:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
 800c822:	46d1      	mov	r9, sl
 800c824:	46c2      	mov	sl, r8
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800c826:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c828:	ebae 0e03 	sub.w	lr, lr, r3
 800c82c:	4499      	add	r9, r3
 800c82e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c830:	f10b 0b01 	add.w	fp, fp, #1
 800c834:	459b      	cmp	fp, r3
 800c836:	f47f af35 	bne.w	800c6a4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x488>
 800c83a:	46d3      	mov	fp, sl
  for (int batch = 0; batch < batches; ++batch) {
 800c83c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c83e:	f10b 0b01 	add.w	fp, fp, #1
 800c842:	459b      	cmp	fp, r3
 800c844:	f47f af21 	bne.w	800c68a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x46e>
    if (size_ > kMaxSmallSize) {
 800c848:	9b56      	ldr	r3, [sp, #344]	; 0x158
 800c84a:	2b05      	cmp	r3, #5
 800c84c:	dd03      	ble.n	800c856 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x63a>
      delete[] dims_pointer_;
 800c84e:	9857      	ldr	r0, [sp, #348]	; 0x15c
 800c850:	b108      	cbz	r0, 800c856 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x63a>
 800c852:	f004 f9bd 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800c856:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800c858:	2b05      	cmp	r3, #5
 800c85a:	f77f ae52 	ble.w	800c502 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2e6>
      delete[] dims_pointer_;
 800c85e:	9851      	ldr	r0, [sp, #324]	; 0x144
 800c860:	2800      	cmp	r0, #0
 800c862:	f47f aec3 	bne.w	800c5ec <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x3d0>
 800c866:	e64c      	b.n	800c502 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2e6>
 800c868:	461a      	mov	r2, r3
 800c86a:	e7ad      	b.n	800c7c8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x5ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c86c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800c86e:	9b48      	ldr	r3, [sp, #288]	; 0x120
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800c870:	68d1      	ldr	r1, [r2, #12]
 800c872:	428b      	cmp	r3, r1
 800c874:	d110      	bne.n	800c898 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x67c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c876:	6851      	ldr	r1, [r2, #4]
    input_dims.h = input_shape.Dims(1);
 800c878:	9127      	str	r1, [sp, #156]	; 0x9c
    input_dims.n = 1;
 800c87a:	2101      	movs	r1, #1
 800c87c:	6892      	ldr	r2, [r2, #8]
 800c87e:	9126      	str	r1, [sp, #152]	; 0x98
 800c880:	e66f      	b.n	800c562 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x346>
    *activation_min = 0;
 800c882:	ed9f 8a06 	vldr	s16, [pc, #24]	; 800c89c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x680>
    *activation_max = 6;
 800c886:	eef1 8a08 	vmov.f32	s17, #24	; 0x40c00000  6.0
 800c88a:	e50b      	b.n	800c2a4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x88>
    *activation_max = std::numeric_limits<T>::max();
 800c88c:	eddf 8a04 	vldr	s17, [pc, #16]	; 800c8a0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x684>
    *activation_min = 0;
 800c890:	ed9f 8a02 	vldr	s16, [pc, #8]	; 800c89c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x680>
 800c894:	e506      	b.n	800c2a4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x88>
          acc = (acc + filter_count / 2) / filter_count;
 800c896:	deff      	udf	#255	; 0xff
  TFLITE_DCHECK(context != nullptr);
 800c898:	f004 fc74 	bl	8011184 <abort>
 800c89c:	00000000 	.word	0x00000000
 800c8a0:	7f7fffff 	.word	0x7f7fffff

0800c8a4 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
}

TfLiteRegistration Register_MAX_POOL_2D() {
 800c8a4:	b510      	push	{r4, lr}
          /*prepare=*/pooling::MaxPrepare,
          /*invoke=*/pooling::MaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800c8a6:	4c06      	ldr	r4, [pc, #24]	; (800c8c0 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x1c>)
TfLiteRegistration Register_MAX_POOL_2D() {
 800c8a8:	4686      	mov	lr, r0
          /*version=*/0};
 800c8aa:	4684      	mov	ip, r0
 800c8ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c8ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c8b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c8b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 800c8ba:	4670      	mov	r0, lr
 800c8bc:	bd10      	pop	{r4, pc}
 800c8be:	bf00      	nop
 800c8c0:	08014070 	.word	0x08014070

0800c8c4 <_ZN6tflite12_GLOBAL__N_111SoftmaxInitEP13TfLiteContextPKcj>:
  }
  return kTfLiteOk;
}

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800c8c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c8c6:	b10b      	cbz	r3, 800c8cc <_ZN6tflite12_GLOBAL__N_111SoftmaxInitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 800c8c8:	2138      	movs	r1, #56	; 0x38
 800c8ca:	4718      	bx	r3
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 800c8cc:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800c8ce:	f004 fc59 	bl	8011184 <abort>
 800c8d2:	bf00      	nop

0800c8d4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 800c8d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 800c8d8:	680b      	ldr	r3, [r1, #0]
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 800c8da:	f8d1 8014 	ldr.w	r8, [r1, #20]
 800c8de:	681e      	ldr	r6, [r3, #0]
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 800c8e0:	ed2d 8b02 	vpush	{d8}

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 800c8e4:	2e01      	cmp	r6, #1
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 800c8e6:	b087      	sub	sp, #28
 800c8e8:	4605      	mov	r5, r0
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 800c8ea:	d011      	beq.n	800c910 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3c>
 800c8ec:	4b93      	ldr	r3, [pc, #588]	; (800cb3c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 800c8ee:	6945      	ldr	r5, [r0, #20]
 800c8f0:	9301      	str	r3, [sp, #4]
 800c8f2:	2401      	movs	r4, #1
 800c8f4:	4b92      	ldr	r3, [pc, #584]	; (800cb40 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>)
 800c8f6:	9300      	str	r3, [sp, #0]
 800c8f8:	e9cd 6402 	strd	r6, r4, [sp, #8]
 800c8fc:	4a91      	ldr	r2, [pc, #580]	; (800cb44 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 800c8fe:	4992      	ldr	r1, [pc, #584]	; (800cb48 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x274>)
 800c900:	234c      	movs	r3, #76	; 0x4c
 800c902:	47a8      	blx	r5
  TfLiteTensor* output = GetOutput(context, node, 0);

  TFLITE_DCHECK(node->user_data != nullptr);
  SoftmaxParams* data = static_cast<SoftmaxParams*>(node->user_data);
  return CalculateSoftmaxParams(context, input, output, params, data);
}
 800c904:	4620      	mov	r0, r4
 800c906:	b007      	add	sp, #28
 800c908:	ecbd 8b02 	vpop	{d8}
 800c90c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 800c910:	684b      	ldr	r3, [r1, #4]
 800c912:	681f      	ldr	r7, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800c914:	2f01      	cmp	r7, #1
 800c916:	460c      	mov	r4, r1
 800c918:	d011      	beq.n	800c93e <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6a>
 800c91a:	4b88      	ldr	r3, [pc, #544]	; (800cb3c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 800c91c:	6945      	ldr	r5, [r0, #20]
 800c91e:	9301      	str	r3, [sp, #4]
 800c920:	4b8a      	ldr	r3, [pc, #552]	; (800cb4c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x278>)
 800c922:	9300      	str	r3, [sp, #0]
 800c924:	e9cd 7602 	strd	r7, r6, [sp, #8]
 800c928:	4a86      	ldr	r2, [pc, #536]	; (800cb44 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 800c92a:	4987      	ldr	r1, [pc, #540]	; (800cb48 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x274>)
 800c92c:	234d      	movs	r3, #77	; 0x4d
 800c92e:	47a8      	blx	r5
 800c930:	4634      	mov	r4, r6
}
 800c932:	4620      	mov	r0, r4
 800c934:	b007      	add	sp, #28
 800c936:	ecbd 8b02 	vpop	{d8}
 800c93a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  const TfLiteTensor* input = GetInput(context, node, 0);
 800c93e:	2200      	movs	r2, #0
 800c940:	f7f7 fb8a 	bl	8004058 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 800c944:	6883      	ldr	r3, [r0, #8]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2b00      	cmp	r3, #0
  const TfLiteTensor* input = GetInput(context, node, 0);
 800c94a:	4606      	mov	r6, r0
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 800c94c:	dd1d      	ble.n	800c98a <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xb6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 800c94e:	2200      	movs	r2, #0
 800c950:	4621      	mov	r1, r4
 800c952:	4628      	mov	r0, r5
 800c954:	f7f7 fb9c 	bl	8004090 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TFLITE_DCHECK(node->user_data != nullptr);
 800c958:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c95c:	f1b9 0f00 	cmp.w	r9, #0
 800c960:	f000 80ea 	beq.w	800cb38 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
 800c964:	7834      	ldrb	r4, [r6, #0]
 800c966:	2c03      	cmp	r4, #3
 800c968:	d033      	beq.n	800c9d2 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xfe>
 800c96a:	2c09      	cmp	r4, #9
 800c96c:	d017      	beq.n	800c99e <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xca>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 800c96e:	2c01      	cmp	r4, #1
 800c970:	d15f      	bne.n	800ca32 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x15e>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 800c972:	7800      	ldrb	r0, [r0, #0]
 800c974:	2801      	cmp	r0, #1
 800c976:	f040 8082 	bne.w	800ca7e <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1aa>
    op_data->beta = static_cast<double>(params->beta);
 800c97a:	f8d8 0000 	ldr.w	r0, [r8]
 800c97e:	f7f3 fdf3 	bl	8000568 <__aeabi_f2d>
  return kTfLiteOk;
 800c982:	2400      	movs	r4, #0
    op_data->beta = static_cast<double>(params->beta);
 800c984:	e9c9 0100 	strd	r0, r1, [r9]
 800c988:	e7bc      	b.n	800c904 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x30>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 800c98a:	4b71      	ldr	r3, [pc, #452]	; (800cb50 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
 800c98c:	696e      	ldr	r6, [r5, #20]
 800c98e:	4a6d      	ldr	r2, [pc, #436]	; (800cb44 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 800c990:	9300      	str	r3, [sp, #0]
 800c992:	4970      	ldr	r1, [pc, #448]	; (800cb54 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x280>)
 800c994:	234f      	movs	r3, #79	; 0x4f
 800c996:	4628      	mov	r0, r5
 800c998:	463c      	mov	r4, r7
 800c99a:	47b0      	blx	r6
 800c99c:	e7b2      	b.n	800c904 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x30>
      if (output->type == kTfLiteInt16) {
 800c99e:	7803      	ldrb	r3, [r0, #0]
 800c9a0:	2b07      	cmp	r3, #7
 800c9a2:	d05b      	beq.n	800ca5c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 800c9a4:	2b09      	cmp	r3, #9
 800c9a6:	f040 808f 	bne.w	800cac8 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f4>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 800c9aa:	6903      	ldr	r3, [r0, #16]
 800c9ac:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800c9b0:	d078      	beq.n	800caa4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1d0>
 800c9b2:	4a69      	ldr	r2, [pc, #420]	; (800cb58 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x284>)
 800c9b4:	4869      	ldr	r0, [pc, #420]	; (800cb5c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x288>)
 800c9b6:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 800c9ba:	9103      	str	r1, [sp, #12]
 800c9bc:	696c      	ldr	r4, [r5, #20]
 800c9be:	4962      	ldr	r1, [pc, #392]	; (800cb48 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x274>)
 800c9c0:	9000      	str	r0, [sp, #0]
 800c9c2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800c9c6:	4628      	mov	r0, r5
 800c9c8:	4a5e      	ldr	r2, [pc, #376]	; (800cb44 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 800c9ca:	232c      	movs	r3, #44	; 0x2c
 800c9cc:	47a0      	blx	r4
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
 800c9ce:	2401      	movs	r4, #1
 800c9d0:	e798      	b.n	800c904 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x30>
 800c9d2:	7803      	ldrb	r3, [r0, #0]
 800c9d4:	2b03      	cmp	r3, #3
 800c9d6:	f040 808c 	bne.w	800caf2 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x21e>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 800c9da:	6903      	ldr	r3, [r0, #16]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	f040 809d 	bne.w	800cb1c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>
    tflite::PreprocessSoftmaxScaling(
 800c9e2:	68f0      	ldr	r0, [r6, #12]
 800c9e4:	f7f3 fdc0 	bl	8000568 <__aeabi_f2d>
 800c9e8:	ec41 0b18 	vmov	d8, r0, r1
 800c9ec:	f8d8 0000 	ldr.w	r0, [r8]
 800c9f0:	f7f3 fdba 	bl	8000568 <__aeabi_f2d>
 800c9f4:	eeb0 1a48 	vmov.f32	s2, s16
 800c9f8:	eef0 1a68 	vmov.f32	s3, s17
 800c9fc:	f109 0408 	add.w	r4, r9, #8
 800ca00:	ec41 0b10 	vmov	d0, r0, r1
 800ca04:	aa05      	add	r2, sp, #20
 800ca06:	4621      	mov	r1, r4
 800ca08:	2005      	movs	r0, #5
 800ca0a:	f7f7 fa6d 	bl	8003ee8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
    op_data->input_left_shift = input_left_shift;
 800ca0e:	9905      	ldr	r1, [sp, #20]
 800ca10:	f8c9 100c 	str.w	r1, [r9, #12]
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 800ca14:	221f      	movs	r2, #31
 800ca16:	2005      	movs	r0, #5
 800ca18:	f7f7 fade 	bl	8003fd8 <_ZN6tflite20CalculateInputRadiusEiii>
 800ca1c:	f7f3 fd92 	bl	8000544 <__aeabi_i2d>
 800ca20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    op_data->diff_min =
 800ca24:	4619      	mov	r1, r3
 800ca26:	f7f4 f8a7 	bl	8000b78 <__aeabi_d2iz>
  return kTfLiteOk;
 800ca2a:	2400      	movs	r4, #0
    op_data->diff_min =
 800ca2c:	f8c9 0018 	str.w	r0, [r9, #24]
  } else {
 800ca30:	e768      	b.n	800c904 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x30>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 800ca32:	4620      	mov	r0, r4
 800ca34:	696e      	ldr	r6, [r5, #20]
 800ca36:	f7f6 ff21 	bl	800387c <TfLiteTypeGetName>
 800ca3a:	4604      	mov	r4, r0
 800ca3c:	4638      	mov	r0, r7
 800ca3e:	f7f6 ff1d 	bl	800387c <TfLiteTypeGetName>
 800ca42:	4b47      	ldr	r3, [pc, #284]	; (800cb60 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
 800ca44:	9003      	str	r0, [sp, #12]
 800ca46:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca4a:	4b46      	ldr	r3, [pc, #280]	; (800cb64 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x290>)
 800ca4c:	9300      	str	r3, [sp, #0]
 800ca4e:	4a3d      	ldr	r2, [pc, #244]	; (800cb44 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 800ca50:	4945      	ldr	r1, [pc, #276]	; (800cb68 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
 800ca52:	233d      	movs	r3, #61	; 0x3d
 800ca54:	4628      	mov	r0, r5
 800ca56:	463c      	mov	r4, r7
 800ca58:	47b0      	blx	r6
 800ca5a:	e753      	b.n	800c904 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x30>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 800ca5c:	6903      	ldr	r3, [r0, #16]
 800ca5e:	4a43      	ldr	r2, [pc, #268]	; (800cb6c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d0be      	beq.n	800c9e2 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x10e>
 800ca64:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800ca68:	4841      	ldr	r0, [pc, #260]	; (800cb70 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
 800ca6a:	493c      	ldr	r1, [pc, #240]	; (800cb5c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x288>)
 800ca6c:	696c      	ldr	r4, [r5, #20]
 800ca6e:	4a35      	ldr	r2, [pc, #212]	; (800cb44 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 800ca70:	e9cd 1000 	strd	r1, r0, [sp]
 800ca74:	2326      	movs	r3, #38	; 0x26
 800ca76:	4934      	ldr	r1, [pc, #208]	; (800cb48 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x274>)
 800ca78:	4628      	mov	r0, r5
 800ca7a:	47a0      	blx	r4
 800ca7c:	e7a7      	b.n	800c9ce <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xfa>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 800ca7e:	696f      	ldr	r7, [r5, #20]
 800ca80:	f7f6 fefc 	bl	800387c <TfLiteTypeGetName>
 800ca84:	4606      	mov	r6, r0
 800ca86:	4620      	mov	r0, r4
 800ca88:	f7f6 fef8 	bl	800387c <TfLiteTypeGetName>
 800ca8c:	4b34      	ldr	r3, [pc, #208]	; (800cb60 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
 800ca8e:	9003      	str	r0, [sp, #12]
 800ca90:	e9cd 3601 	strd	r3, r6, [sp, #4]
 800ca94:	4b37      	ldr	r3, [pc, #220]	; (800cb74 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
 800ca96:	9300      	str	r3, [sp, #0]
 800ca98:	4a2a      	ldr	r2, [pc, #168]	; (800cb44 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 800ca9a:	4933      	ldr	r1, [pc, #204]	; (800cb68 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
 800ca9c:	233e      	movs	r3, #62	; 0x3e
 800ca9e:	4628      	mov	r0, r5
 800caa0:	47b8      	blx	r7
 800caa2:	e72f      	b.n	800c904 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x30>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 800caa4:	eddf 7a34 	vldr	s15, [pc, #208]	; 800cb78 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a4>
 800caa8:	ed90 7a03 	vldr	s14, [r0, #12]
 800caac:	eeb4 7a67 	vcmp.f32	s14, s15
 800cab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cab4:	d095      	beq.n	800c9e2 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x10e>
 800cab6:	4b31      	ldr	r3, [pc, #196]	; (800cb7c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a8>)
 800cab8:	696c      	ldr	r4, [r5, #20]
 800caba:	4a22      	ldr	r2, [pc, #136]	; (800cb44 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 800cabc:	9300      	str	r3, [sp, #0]
 800cabe:	4925      	ldr	r1, [pc, #148]	; (800cb54 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x280>)
 800cac0:	232d      	movs	r3, #45	; 0x2d
 800cac2:	4628      	mov	r0, r5
 800cac4:	47a0      	blx	r4
 800cac6:	e782      	b.n	800c9ce <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xfa>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 800cac8:	4618      	mov	r0, r3
 800caca:	696e      	ldr	r6, [r5, #20]
 800cacc:	f7f6 fed6 	bl	800387c <TfLiteTypeGetName>
 800cad0:	4603      	mov	r3, r0
 800cad2:	4620      	mov	r0, r4
 800cad4:	461c      	mov	r4, r3
 800cad6:	f7f6 fed1 	bl	800387c <TfLiteTypeGetName>
 800cada:	4929      	ldr	r1, [pc, #164]	; (800cb80 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ac>)
 800cadc:	4b25      	ldr	r3, [pc, #148]	; (800cb74 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
 800cade:	4a19      	ldr	r2, [pc, #100]	; (800cb44 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 800cae0:	e9cd 3100 	strd	r3, r1, [sp]
 800cae4:	e9cd 4002 	strd	r4, r0, [sp, #8]
 800cae8:	491f      	ldr	r1, [pc, #124]	; (800cb68 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
 800caea:	232b      	movs	r3, #43	; 0x2b
 800caec:	4628      	mov	r0, r5
 800caee:	47b0      	blx	r6
 800caf0:	e76d      	b.n	800c9ce <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xfa>
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
 800caf2:	4618      	mov	r0, r3
 800caf4:	696e      	ldr	r6, [r5, #20]
 800caf6:	f7f6 fec1 	bl	800387c <TfLiteTypeGetName>
 800cafa:	4603      	mov	r3, r0
 800cafc:	4620      	mov	r0, r4
 800cafe:	461c      	mov	r4, r3
 800cb00:	f7f6 febc 	bl	800387c <TfLiteTypeGetName>
 800cb04:	491f      	ldr	r1, [pc, #124]	; (800cb84 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b0>)
 800cb06:	4b1b      	ldr	r3, [pc, #108]	; (800cb74 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
 800cb08:	4a0e      	ldr	r2, [pc, #56]	; (800cb44 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 800cb0a:	e9cd 3100 	strd	r3, r1, [sp]
 800cb0e:	e9cd 4002 	strd	r4, r0, [sp, #8]
 800cb12:	4915      	ldr	r1, [pc, #84]	; (800cb68 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
 800cb14:	2321      	movs	r3, #33	; 0x21
 800cb16:	4628      	mov	r0, r5
 800cb18:	47b0      	blx	r6
 800cb1a:	e758      	b.n	800c9ce <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xfa>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 800cb1c:	4a1a      	ldr	r2, [pc, #104]	; (800cb88 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b4>)
 800cb1e:	480f      	ldr	r0, [pc, #60]	; (800cb5c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x288>)
 800cb20:	2100      	movs	r1, #0
 800cb22:	9103      	str	r1, [sp, #12]
 800cb24:	696c      	ldr	r4, [r5, #20]
 800cb26:	4908      	ldr	r1, [pc, #32]	; (800cb48 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x274>)
 800cb28:	9000      	str	r0, [sp, #0]
 800cb2a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800cb2e:	4628      	mov	r0, r5
 800cb30:	4a04      	ldr	r2, [pc, #16]	; (800cb44 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 800cb32:	2322      	movs	r3, #34	; 0x22
 800cb34:	47a0      	blx	r4
 800cb36:	e74a      	b.n	800c9ce <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xfa>
  TFLITE_DCHECK(node->user_data != nullptr);
 800cb38:	f004 fb24 	bl	8011184 <abort>
 800cb3c:	080176f0 	.word	0x080176f0
 800cb40:	080176c8 	.word	0x080176c8
 800cb44:	0801768c 	.word	0x0801768c
 800cb48:	08015678 	.word	0x08015678
 800cb4c:	0801738c 	.word	0x0801738c
 800cb50:	080176d8 	.word	0x080176d8
 800cb54:	08015618 	.word	0x08015618
 800cb58:	08017728 	.word	0x08017728
 800cb5c:	08017704 	.word	0x08017704
 800cb60:	08017754 	.word	0x08017754
 800cb64:	08016664 	.word	0x08016664
 800cb68:	08016638 	.word	0x08016638
 800cb6c:	ffff8000 	.word	0xffff8000
 800cb70:	08017720 	.word	0x08017720
 800cb74:	08016654 	.word	0x08016654
 800cb78:	3b800000 	.word	0x3b800000
 800cb7c:	08017730 	.word	0x08017730
 800cb80:	08015754 	.word	0x08015754
 800cb84:	080176f4 	.word	0x080176f4
 800cb88:	08017770 	.word	0x08017770

0800cb8c <_ZN6tflite16Register_SOFTMAXEv>:
  }
}

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 800cb8c:	b510      	push	{r4, lr}
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800cb8e:	4c06      	ldr	r4, [pc, #24]	; (800cba8 <_ZN6tflite16Register_SOFTMAXEv+0x1c>)
TfLiteRegistration Register_SOFTMAX() {
 800cb90:	4686      	mov	lr, r0
          /*version=*/0};
 800cb92:	4684      	mov	ip, r0
 800cb94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cb9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800cb9e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 800cba2:	4670      	mov	r0, lr
 800cba4:	bd10      	pop	{r4, pc}
 800cba6:	bf00      	nop
 800cba8:	08014090 	.word	0x08014090

0800cbac <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
}

// Quantized softmax with int8_t/uint8_t input and int8_t/uint8_t/int16_t
// output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
 800cbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    const RuntimeShape& input_shape, const InputT* input_data,
                    const RuntimeShape& output_shape, OutputT* output_data) {
  const int32_t input_beta_multiplier = params.input_multiplier;
  const int32_t input_beta_left_shift = params.input_left_shift;
 800cbb0:	e9d0 6502 	ldrd	r6, r5, [r0, #8]
  inline int32_t DimensionsCount() const { return size_; }
 800cbb4:	680c      	ldr	r4, [r1, #0]
  const int diff_min = params.diff_min;
 800cbb6:	f8d0 9018 	ldr.w	r9, [r0, #24]
inline void Softmax(const SoftmaxParams& params,
 800cbba:	b08b      	sub	sp, #44	; 0x2c

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
 800cbbc:	2c00      	cmp	r4, #0
  const int32_t input_beta_left_shift = params.input_left_shift;
 800cbbe:	9501      	str	r5, [sp, #4]
      gemmlowp::FixedPoint<int32_t, kScaledDiffIntegerBits>;
  using FixedPointAccum =
      gemmlowp::FixedPoint<int32_t, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32_t, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800cbc0:	f104 30ff 	add.w	r0, r4, #4294967295
 800cbc4:	f340 81d2 	ble.w	800cf6c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c0>
 800cbc8:	2c05      	cmp	r4, #5
 800cbca:	dc41      	bgt.n	800cc50 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa4>
    TFLITE_DCHECK_LT(i, size_);
 800cbcc:	681f      	ldr	r7, [r3, #0]
    if (i != skip_dim) {
 800cbce:	2800      	cmp	r0, #0
 800cbd0:	d03b      	beq.n	800cc4a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9e>
    TFLITE_DCHECK_LT(i, size_);
 800cbd2:	2f00      	cmp	r7, #0
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cbd4:	f8d1 c004 	ldr.w	ip, [r1, #4]
    TFLITE_DCHECK_LT(i, size_);
 800cbd8:	f340 81d5 	ble.w	800cf86 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3da>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cbdc:	685d      	ldr	r5, [r3, #4]
 800cbde:	2f05      	cmp	r7, #5
 800cbe0:	bfc8      	it	gt
 800cbe2:	682d      	ldrgt	r5, [r5, #0]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800cbe4:	4565      	cmp	r5, ip
 800cbe6:	f040 81ce 	bne.w	800cf86 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3da>
    if (i != skip_dim) {
 800cbea:	2801      	cmp	r0, #1
 800cbec:	d02d      	beq.n	800cc4a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9e>
    TFLITE_DCHECK_LT(i, size_);
 800cbee:	2f01      	cmp	r7, #1
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cbf0:	f8d1 c008 	ldr.w	ip, [r1, #8]
    TFLITE_DCHECK_LT(i, size_);
 800cbf4:	f340 81c7 	ble.w	800cf86 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3da>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cbf8:	2f05      	cmp	r7, #5
 800cbfa:	bfca      	itet	gt
 800cbfc:	685d      	ldrgt	r5, [r3, #4]
 800cbfe:	689d      	ldrle	r5, [r3, #8]
 800cc00:	686d      	ldrgt	r5, [r5, #4]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800cc02:	45ac      	cmp	ip, r5
 800cc04:	f040 81bf 	bne.w	800cf86 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3da>
    if (i != skip_dim) {
 800cc08:	2802      	cmp	r0, #2
 800cc0a:	d01e      	beq.n	800cc4a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9e>
    TFLITE_DCHECK_LT(i, size_);
 800cc0c:	2f02      	cmp	r7, #2
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cc0e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    TFLITE_DCHECK_LT(i, size_);
 800cc12:	f340 81b8 	ble.w	800cf86 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3da>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cc16:	2f05      	cmp	r7, #5
 800cc18:	bfca      	itet	gt
 800cc1a:	685d      	ldrgt	r5, [r3, #4]
 800cc1c:	68dd      	ldrle	r5, [r3, #12]
 800cc1e:	68ad      	ldrgt	r5, [r5, #8]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800cc20:	4565      	cmp	r5, ip
 800cc22:	f040 81b0 	bne.w	800cf86 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3da>
    if (i != skip_dim) {
 800cc26:	2803      	cmp	r0, #3
 800cc28:	d00f      	beq.n	800cc4a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9e>
    TFLITE_DCHECK_LT(i, size_);
 800cc2a:	2f03      	cmp	r7, #3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cc2c:	f8d1 c010 	ldr.w	ip, [r1, #16]
    TFLITE_DCHECK_LT(i, size_);
 800cc30:	f340 81a9 	ble.w	800cf86 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3da>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cc34:	2f05      	cmp	r7, #5
 800cc36:	bfca      	itet	gt
 800cc38:	685d      	ldrgt	r5, [r3, #4]
 800cc3a:	691d      	ldrle	r5, [r3, #16]
 800cc3c:	68ed      	ldrgt	r5, [r5, #12]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800cc3e:	4565      	cmp	r5, ip
 800cc40:	f040 81a1 	bne.w	800cf86 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3da>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800cc44:	2800      	cmp	r0, #0
 800cc46:	f2c0 819e 	blt.w	800cf86 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3da>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800cc4a:	f101 0804 	add.w	r8, r1, #4
  for (int i = 0; i < dims_count; ++i) {
 800cc4e:	e024      	b.n	800cc9a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xee>
  for (int i = 0; i < dims_count; ++i) {
 800cc50:	2700      	movs	r7, #0
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cc52:	f103 0e04 	add.w	lr, r3, #4
 800cc56:	469c      	mov	ip, r3
    if (i != skip_dim) {
 800cc58:	42b8      	cmp	r0, r7
 800cc5a:	d014      	beq.n	800cc86 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xda>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cc5c:	684d      	ldr	r5, [r1, #4]
 800cc5e:	f855 3027 	ldr.w	r3, [r5, r7, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
 800cc62:	f8dc 5000 	ldr.w	r5, [ip]
 800cc66:	42bd      	cmp	r5, r7
 800cc68:	ea4f 0887 	mov.w	r8, r7, lsl #2
 800cc6c:	f340 818b 	ble.w	800cf86 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3da>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cc70:	2d05      	cmp	r5, #5
 800cc72:	bfca      	itet	gt
 800cc74:	f8dc 5004 	ldrgt.w	r5, [ip, #4]
 800cc78:	f85e 5027 	ldrle.w	r5, [lr, r7, lsl #2]
 800cc7c:	f855 5008 	ldrgt.w	r5, [r5, r8]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800cc80:	429d      	cmp	r5, r3
 800cc82:	f040 8180 	bne.w	800cf86 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3da>
  for (int i = 0; i < dims_count; ++i) {
 800cc86:	3701      	adds	r7, #1
 800cc88:	42bc      	cmp	r4, r7
 800cc8a:	d1e5      	bne.n	800cc58 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xac>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	4663      	mov	r3, ip
 800cc90:	f2c0 8179 	blt.w	800cf86 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3da>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800cc94:	f8d1 8004 	ldr.w	r8, [r1, #4]
  for (int i = 0; i < dims_count; ++i) {
 800cc98:	681f      	ldr	r7, [r3, #0]
  for (int i = 0; i < dims_count; ++i) {
 800cc9a:	2501      	movs	r5, #1
 800cc9c:	9509      	str	r5, [sp, #36]	; 0x24
 800cc9e:	f04f 0c00 	mov.w	ip, #0
 800cca2:	4645      	mov	r5, r8
 800cca4:	f04f 0e01 	mov.w	lr, #1
 800cca8:	4698      	mov	r8, r3
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800ccaa:	4560      	cmp	r0, ip
 800ccac:	f000 814e 	beq.w	800cf4c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3a0>
 800ccb0:	f855 302c 	ldr.w	r3, [r5, ip, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
 800ccb4:	f10c 0c01 	add.w	ip, ip, #1
 800ccb8:	45a4      	cmp	ip, r4
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800ccba:	fb03 fe0e 	mul.w	lr, r3, lr
  for (int i = 0; i < dims_count; ++i) {
 800ccbe:	d1f4      	bne.n	800ccaa <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xfe>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800ccc0:	2c05      	cmp	r4, #5
 800ccc2:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 800ccc6:	4643      	mov	r3, r8
 800ccc8:	f340 814b 	ble.w	800cf62 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3b6>
 800cccc:	6849      	ldr	r1, [r1, #4]
 800ccce:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800ccd2:	9106      	str	r1, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
 800ccd4:	42b8      	cmp	r0, r7
 800ccd6:	f280 8156 	bge.w	800cf86 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3da>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800ccda:	2f05      	cmp	r7, #5
 800ccdc:	bfc8      	it	gt
 800ccde:	685b      	ldrgt	r3, [r3, #4]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800cce0:	9906      	ldr	r1, [sp, #24]
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cce2:	bfce      	itee	gt
 800cce4:	f853 3020 	ldrgt.w	r3, [r3, r0, lsl #2]
 800cce8:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 800ccec:	6843      	ldrle	r3, [r0, #4]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800ccee:	428b      	cmp	r3, r1
 800ccf0:	f040 8149 	bne.w	800cf86 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3da>
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);

  for (int i = 0; i < outer_size; ++i) {
 800ccf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	dd7a      	ble.n	800cdf0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x244>
 800ccfa:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ccfc:	9204      	str	r2, [sp, #16]
 800ccfe:	2300      	movs	r3, #0
 800cd00:	9305      	str	r3, [sp, #20]
 800cd02:	eb00 0a01 	add.w	sl, r0, r1
 800cd06:	eb02 0b01 	add.w	fp, r2, r1
 800cd0a:	9307      	str	r3, [sp, #28]
    InputT max_in_row = std::numeric_limits<InputT>::min();
    for (int c = 0; c < depth; ++c) {
 800cd0c:	9b06      	ldr	r3, [sp, #24]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	dd5f      	ble.n	800cdd2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
 800cd12:	9b04      	ldr	r3, [sp, #16]
 800cd14:	2400      	movs	r4, #0
      if (__a < __b)
 800cd16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd1a:	4294      	cmp	r4, r2
 800cd1c:	bf38      	it	cc
 800cd1e:	4614      	movcc	r4, r2
 800cd20:	459b      	cmp	fp, r3
 800cd22:	d1f8      	bne.n	800cd16 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x16a>
    }

    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
    for (int c = 0; c < depth; ++c) {
      int32_t input_diff =
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800cd24:	2700      	movs	r7, #0
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800cd26:	f8cd a008 	str.w	sl, [sp, #8]
 800cd2a:	9d04      	ldr	r5, [sp, #16]
 800cd2c:	46ba      	mov	sl, r7
 800cd2e:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 800cd32:	4627      	mov	r7, r4
 800cd34:	9c01      	ldr	r4, [sp, #4]
 800cd36:	e01e      	b.n	800cd76 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1ca>
  std::int64_t ab_64 = a_64 * b_64;
 800cd38:	fb86 0200 	smull	r0, r2, r6, r0
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800cd3c:	2a00      	cmp	r2, #0
 800cd3e:	db33      	blt.n	800cda8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1fc>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800cd40:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
 800cd44:	f142 0200 	adc.w	r2, r2, #0
 800cd48:	0fc0      	lsrs	r0, r0, #31
 800cd4a:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
        const int32_t input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 800cd4e:	f7fc fb1d 	bl	800938c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
  return a + b;
 800cd52:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800cd56:	2800      	cmp	r0, #0
  return a & b;
 800cd58:	f3c0 010b 	ubfx	r1, r0, #0, #12
  return a + b;
 800cd5c:	bfa8      	it	ge
 800cd5e:	461a      	movge	r2, r3
  return a >> offset;
 800cd60:	ea4f 3020 	mov.w	r0, r0, asr #12
  return a + b;
 800cd64:	bfb8      	it	lt
 800cd66:	f44f 6200 	movlt.w	r2, #2048	; 0x800
 800cd6a:	4291      	cmp	r1, r2
 800cd6c:	bfc8      	it	gt
 800cd6e:	3001      	addgt	r0, #1
 800cd70:	4482      	add	sl, r0
    for (int c = 0; c < depth; ++c) {
 800cd72:	45ab      	cmp	fp, r5
 800cd74:	d03f      	beq.n	800cdf6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x24a>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800cd76:	f815 0b01 	ldrb.w	r0, [r5], #1
      int32_t input_diff =
 800cd7a:	1bc0      	subs	r0, r0, r7
      if (input_diff >= diff_min) {
 800cd7c:	4581      	cmp	r9, r0
 800cd7e:	dcf8      	bgt.n	800cd72 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1c6>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 800cd80:	40a0      	lsls	r0, r4
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800cd82:	4286      	cmp	r6, r0
 800cd84:	d1d8      	bne.n	800cd38 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x18c>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800cd86:	4b81      	ldr	r3, [pc, #516]	; (800cf8c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
  std::int64_t ab_64 = a_64 * b_64;
 800cd88:	fb86 0206 	smull	r0, r2, r6, r6
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800cd8c:	2a00      	cmp	r2, #0
 800cd8e:	bfb5      	itete	lt
 800cd90:	469c      	movlt	ip, r3
 800cd92:	f04f 4c80 	movge.w	ip, #1073741824	; 0x40000000
 800cd96:	f04f 31ff 	movlt.w	r1, #4294967295
 800cd9a:	2100      	movge	r1, #0
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800cd9c:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 800cda0:	d106      	bne.n	800cdb0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x204>
 800cda2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800cda6:	e7d2      	b.n	800cd4e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a2>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800cda8:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 800cf8c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>
 800cdac:	f04f 31ff 	mov.w	r1, #4294967295
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800cdb0:	eb10 000c 	adds.w	r0, r0, ip
 800cdb4:	eb42 0201 	adc.w	r2, r2, r1
 800cdb8:	2a00      	cmp	r2, #0
 800cdba:	da03      	bge.n	800cdc4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x218>
 800cdbc:	eb10 0008 	adds.w	r0, r0, r8
 800cdc0:	f142 0200 	adc.w	r2, r2, #0
 800cdc4:	0fc0      	lsrs	r0, r0, #31
 800cdc6:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
 800cdca:	e7c0      	b.n	800cd4e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a2>
 800cdcc:	46da      	mov	sl, fp
 800cdce:	f8dd b020 	ldr.w	fp, [sp, #32]
  for (int i = 0; i < outer_size; ++i) {
 800cdd2:	9b06      	ldr	r3, [sp, #24]
 800cdd4:	9904      	ldr	r1, [sp, #16]
 800cdd6:	9a07      	ldr	r2, [sp, #28]
 800cdd8:	4419      	add	r1, r3
 800cdda:	9104      	str	r1, [sp, #16]
 800cddc:	9905      	ldr	r1, [sp, #20]
 800cdde:	449a      	add	sl, r3
 800cde0:	4419      	add	r1, r3
 800cde2:	449b      	add	fp, r3
 800cde4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cde6:	9105      	str	r1, [sp, #20]
 800cde8:	3201      	adds	r2, #1
 800cdea:	429a      	cmp	r2, r3
 800cdec:	9207      	str	r2, [sp, #28]
 800cdee:	d18d      	bne.n	800cd0c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x160>
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
      }
    }
  }
}
 800cdf0:	b00b      	add	sp, #44	; 0x2c
 800cdf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdf6:	463c      	mov	r4, r7
 800cdf8:	4657      	mov	r7, sl
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 800cdfa:	fab7 f587 	clz	r5, r7
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 800cdfe:	fa07 f005 	lsl.w	r0, r7, r5
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
 800ce02:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ce06:	f7f9 fe71 	bl	8006aec <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800ce0a:	f04f 0801 	mov.w	r8, #1
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 800ce0e:	f1c5 0123 	rsb	r1, r5, #35	; 0x23
 800ce12:	fa08 f801 	lsl.w	r8, r8, r1
 800ce16:	f108 33ff 	add.w	r3, r8, #4294967295
 800ce1a:	f8dd a008 	ldr.w	sl, [sp, #8]
 800ce1e:	9302      	str	r3, [sp, #8]
  return a >> offset;
 800ce20:	105b      	asrs	r3, r3, #1
 800ce22:	9303      	str	r3, [sp, #12]
 800ce24:	9b04      	ldr	r3, [sp, #16]
 800ce26:	9a05      	ldr	r2, [sp, #20]
 800ce28:	f8cd b020 	str.w	fp, [sp, #32]
 800ce2c:	f103 38ff 	add.w	r8, r3, #4294967295
 800ce30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ce32:	46d3      	mov	fp, sl
 800ce34:	4607      	mov	r7, r0
    for (int c = 0; c < depth; ++c) {
 800ce36:	46a2      	mov	sl, r4
 800ce38:	189d      	adds	r5, r3, r2
 800ce3a:	460c      	mov	r4, r1
 800ce3c:	e032      	b.n	800cea4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2f8>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 800ce3e:	9b01      	ldr	r3, [sp, #4]
 800ce40:	4098      	lsls	r0, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800ce42:	4286      	cmp	r6, r0
 800ce44:	d04b      	beq.n	800cede <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x332>
  std::int64_t ab_64 = a_64 * b_64;
 800ce46:	fb86 c000 	smull	ip, r0, r6, r0
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800ce4a:	2800      	cmp	r0, #0
 800ce4c:	db58      	blt.n	800cf00 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x354>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800ce4e:	f11c 4380 	adds.w	r3, ip, #1073741824	; 0x40000000
 800ce52:	f140 0c00 	adc.w	ip, r0, #0
 800ce56:	0fd8      	lsrs	r0, r3, #31
 800ce58:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800ce5c:	f7fc fa96 	bl	800938c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800ce60:	42b8      	cmp	r0, r7
 800ce62:	d02b      	beq.n	800cebc <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x310>
  std::int64_t ab_64 = a_64 * b_64;
 800ce64:	fb87 c000 	smull	ip, r0, r7, r0
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800ce68:	2800      	cmp	r0, #0
 800ce6a:	db5c      	blt.n	800cf26 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x37a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800ce6c:	f11c 4380 	adds.w	r3, ip, #1073741824	; 0x40000000
 800ce70:	f140 0000 	adc.w	r0, r0, #0
 800ce74:	0fdb      	lsrs	r3, r3, #31
 800ce76:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  assert(exponent <= 31);
 800ce7a:	2c1f      	cmp	r4, #31
 800ce7c:	d87c      	bhi.n	800cf78 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3cc>
  return a & b;
 800ce7e:	9a02      	ldr	r2, [sp, #8]
 800ce80:	ea02 0c03 	and.w	ip, r2, r3
  return a + b;
 800ce84:	9a03      	ldr	r2, [sp, #12]
 800ce86:	eb02 70d3 	add.w	r0, r2, r3, lsr #31
  return a >> offset;
 800ce8a:	4123      	asrs	r3, r4
  return a + b;
 800ce8c:	4584      	cmp	ip, r0
 800ce8e:	bfc8      	it	gt
 800ce90:	3301      	addgt	r3, #1
      if (__b < __a)
 800ce92:	2bff      	cmp	r3, #255	; 0xff
 800ce94:	dc0f      	bgt.n	800ceb6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x30a>
      if (__a < __b)
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	da0e      	bge.n	800ceb8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x30c>
 800ce9a:	2300      	movs	r3, #0
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800ce9c:	702b      	strb	r3, [r5, #0]
    for (int c = 0; c < depth; ++c) {
 800ce9e:	3501      	adds	r5, #1
 800cea0:	455d      	cmp	r5, fp
 800cea2:	d093      	beq.n	800cdcc <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x220>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800cea4:	f818 0f01 	ldrb.w	r0, [r8, #1]!
      int32_t input_diff =
 800cea8:	eba0 000a 	sub.w	r0, r0, sl
      if (input_diff >= diff_min) {
 800ceac:	4581      	cmp	r9, r0
 800ceae:	ddc6      	ble.n	800ce3e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x292>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800ceb0:	f04f 0300 	mov.w	r3, #0
 800ceb4:	e7f2      	b.n	800ce9c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2f0>
 800ceb6:	23ff      	movs	r3, #255	; 0xff
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800ceb8:	b2db      	uxtb	r3, r3
 800ceba:	e7ef      	b.n	800ce9c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2f0>
  std::int64_t ab_64 = a_64 * b_64;
 800cebc:	fb87 c007 	smull	ip, r0, r7, r7
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800cec0:	2800      	cmp	r0, #0
 800cec2:	4b32      	ldr	r3, [pc, #200]	; (800cf8c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
 800cec4:	bfa6      	itte	ge
 800cec6:	f04f 0e00 	movge.w	lr, #0
 800ceca:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 800cece:	f04f 3eff 	movlt.w	lr, #4294967295
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800ced2:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 800ced6:	d129      	bne.n	800cf2c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x380>
 800ced8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cedc:	e7cd      	b.n	800ce7a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2ce>
  std::int64_t ab_64 = a_64 * b_64;
 800cede:	fb86 c006 	smull	ip, r0, r6, r6
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800cee2:	2800      	cmp	r0, #0
 800cee4:	4b29      	ldr	r3, [pc, #164]	; (800cf8c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
 800cee6:	bfa6      	itte	ge
 800cee8:	f04f 0e00 	movge.w	lr, #0
 800ceec:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 800cef0:	f04f 3eff 	movlt.w	lr, #4294967295
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800cef4:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 800cef8:	d105      	bne.n	800cf06 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x35a>
 800cefa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800cefe:	e7ad      	b.n	800ce5c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2b0>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800cf00:	4b22      	ldr	r3, [pc, #136]	; (800cf8c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
 800cf02:	f04f 3eff 	mov.w	lr, #4294967295
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800cf06:	eb1c 0303 	adds.w	r3, ip, r3
 800cf0a:	eb40 0e0e 	adc.w	lr, r0, lr
 800cf0e:	f1be 0f00 	cmp.w	lr, #0
 800cf12:	da04      	bge.n	800cf1e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x372>
 800cf14:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800cf18:	189b      	adds	r3, r3, r2
 800cf1a:	f14e 0e00 	adc.w	lr, lr, #0
 800cf1e:	0fd8      	lsrs	r0, r3, #31
 800cf20:	ea40 004e 	orr.w	r0, r0, lr, lsl #1
 800cf24:	e79a      	b.n	800ce5c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2b0>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800cf26:	4b19      	ldr	r3, [pc, #100]	; (800cf8c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
 800cf28:	f04f 3eff 	mov.w	lr, #4294967295
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800cf2c:	eb13 030c 	adds.w	r3, r3, ip
 800cf30:	eb40 0e0e 	adc.w	lr, r0, lr
 800cf34:	f1be 0f00 	cmp.w	lr, #0
 800cf38:	da04      	bge.n	800cf44 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x398>
 800cf3a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800cf3e:	189b      	adds	r3, r3, r2
 800cf40:	f14e 0e00 	adc.w	lr, lr, #0
 800cf44:	0fdb      	lsrs	r3, r3, #31
 800cf46:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
 800cf4a:	e796      	b.n	800ce7a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2ce>
  for (int i = 0; i < dims_count; ++i) {
 800cf4c:	f100 0c01 	add.w	ip, r0, #1
 800cf50:	4564      	cmp	r4, ip
 800cf52:	f47f aeaa 	bne.w	800ccaa <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xfe>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cf56:	2c05      	cmp	r4, #5
 800cf58:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 800cf5c:	4643      	mov	r3, r8
 800cf5e:	f73f aeb5 	bgt.w	800cccc <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x120>
 800cf62:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800cf66:	6849      	ldr	r1, [r1, #4]
 800cf68:	9106      	str	r1, [sp, #24]
 800cf6a:	e6b3      	b.n	800ccd4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x128>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800cf6c:	2800      	cmp	r0, #0
 800cf6e:	db0a      	blt.n	800cf86 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3da>
  int flat_size = 1;
 800cf70:	2401      	movs	r4, #1
 800cf72:	681f      	ldr	r7, [r3, #0]
 800cf74:	9409      	str	r4, [sp, #36]	; 0x24
 800cf76:	e7f4      	b.n	800cf62 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3b6>
  assert(exponent <= 31);
 800cf78:	4b05      	ldr	r3, [pc, #20]	; (800cf90 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e4>)
 800cf7a:	4a06      	ldr	r2, [pc, #24]	; (800cf94 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e8>)
 800cf7c:	4806      	ldr	r0, [pc, #24]	; (800cf98 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>)
 800cf7e:	f240 1167 	movw	r1, #359	; 0x167
 800cf82:	f004 f907 	bl	8011194 <__assert_func>
    TFLITE_DCHECK_LT(i, size_);
 800cf86:	f004 f8fd 	bl	8011184 <abort>
 800cf8a:	bf00      	nop
 800cf8c:	c0000001 	.word	0xc0000001
 800cf90:	08016a84 	.word	0x08016a84
 800cf94:	08016a94 	.word	0x08016a94
 800cf98:	08016af0 	.word	0x08016af0

0800cf9c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 800cf9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  inline int32_t DimensionsCount() const { return size_; }
 800cfa0:	680c      	ldr	r4, [r1, #0]
  const int32_t input_beta_left_shift = params.input_left_shift;
 800cfa2:	68c5      	ldr	r5, [r0, #12]
  const int32_t input_beta_multiplier = params.input_multiplier;
 800cfa4:	6886      	ldr	r6, [r0, #8]
  const int diff_min = params.diff_min;
 800cfa6:	f8d0 a018 	ldr.w	sl, [r0, #24]
inline void Softmax(const SoftmaxParams& params,
 800cfaa:	b08b      	sub	sp, #44	; 0x2c
  for (int i = 0; i < dims_count; ++i) {
 800cfac:	2c00      	cmp	r4, #0
  const int32_t input_beta_left_shift = params.input_left_shift;
 800cfae:	9501      	str	r5, [sp, #4]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800cfb0:	f104 30ff 	add.w	r0, r4, #4294967295
 800cfb4:	f340 81db 	ble.w	800d36e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3d2>
 800cfb8:	2c05      	cmp	r4, #5
 800cfba:	dc41      	bgt.n	800d040 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa4>
    TFLITE_DCHECK_LT(i, size_);
 800cfbc:	681f      	ldr	r7, [r3, #0]
    if (i != skip_dim) {
 800cfbe:	2800      	cmp	r0, #0
 800cfc0:	d03b      	beq.n	800d03a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9e>
    TFLITE_DCHECK_LT(i, size_);
 800cfc2:	2f00      	cmp	r7, #0
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cfc4:	f8d1 c004 	ldr.w	ip, [r1, #4]
    TFLITE_DCHECK_LT(i, size_);
 800cfc8:	f340 81de 	ble.w	800d388 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cfcc:	685d      	ldr	r5, [r3, #4]
 800cfce:	2f05      	cmp	r7, #5
 800cfd0:	bfc8      	it	gt
 800cfd2:	682d      	ldrgt	r5, [r5, #0]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800cfd4:	4565      	cmp	r5, ip
 800cfd6:	f040 81d7 	bne.w	800d388 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>
    if (i != skip_dim) {
 800cfda:	2801      	cmp	r0, #1
 800cfdc:	d02d      	beq.n	800d03a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9e>
    TFLITE_DCHECK_LT(i, size_);
 800cfde:	2f01      	cmp	r7, #1
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cfe0:	f8d1 c008 	ldr.w	ip, [r1, #8]
    TFLITE_DCHECK_LT(i, size_);
 800cfe4:	f340 81d0 	ble.w	800d388 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cfe8:	2f05      	cmp	r7, #5
 800cfea:	bfca      	itet	gt
 800cfec:	685d      	ldrgt	r5, [r3, #4]
 800cfee:	689d      	ldrle	r5, [r3, #8]
 800cff0:	686d      	ldrgt	r5, [r5, #4]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800cff2:	45ac      	cmp	ip, r5
 800cff4:	f040 81c8 	bne.w	800d388 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>
    if (i != skip_dim) {
 800cff8:	2802      	cmp	r0, #2
 800cffa:	d01e      	beq.n	800d03a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9e>
    TFLITE_DCHECK_LT(i, size_);
 800cffc:	2f02      	cmp	r7, #2
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cffe:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    TFLITE_DCHECK_LT(i, size_);
 800d002:	f340 81c1 	ble.w	800d388 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d006:	2f05      	cmp	r7, #5
 800d008:	bfca      	itet	gt
 800d00a:	685d      	ldrgt	r5, [r3, #4]
 800d00c:	68dd      	ldrle	r5, [r3, #12]
 800d00e:	68ad      	ldrgt	r5, [r5, #8]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d010:	4565      	cmp	r5, ip
 800d012:	f040 81b9 	bne.w	800d388 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>
    if (i != skip_dim) {
 800d016:	2803      	cmp	r0, #3
 800d018:	d00f      	beq.n	800d03a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9e>
    TFLITE_DCHECK_LT(i, size_);
 800d01a:	2f03      	cmp	r7, #3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d01c:	f8d1 c010 	ldr.w	ip, [r1, #16]
    TFLITE_DCHECK_LT(i, size_);
 800d020:	f340 81b2 	ble.w	800d388 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d024:	2f05      	cmp	r7, #5
 800d026:	bfca      	itet	gt
 800d028:	685d      	ldrgt	r5, [r3, #4]
 800d02a:	691d      	ldrle	r5, [r3, #16]
 800d02c:	68ed      	ldrgt	r5, [r5, #12]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d02e:	4565      	cmp	r5, ip
 800d030:	f040 81aa 	bne.w	800d388 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800d034:	2800      	cmp	r0, #0
 800d036:	f2c0 81a7 	blt.w	800d388 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800d03a:	f101 0804 	add.w	r8, r1, #4
  for (int i = 0; i < dims_count; ++i) {
 800d03e:	e024      	b.n	800d08a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xee>
  for (int i = 0; i < dims_count; ++i) {
 800d040:	2700      	movs	r7, #0
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d042:	f103 0e04 	add.w	lr, r3, #4
 800d046:	469c      	mov	ip, r3
    if (i != skip_dim) {
 800d048:	42b8      	cmp	r0, r7
 800d04a:	d014      	beq.n	800d076 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xda>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d04c:	684d      	ldr	r5, [r1, #4]
 800d04e:	f855 3027 	ldr.w	r3, [r5, r7, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
 800d052:	f8dc 5000 	ldr.w	r5, [ip]
 800d056:	42bd      	cmp	r5, r7
 800d058:	ea4f 0887 	mov.w	r8, r7, lsl #2
 800d05c:	f340 8194 	ble.w	800d388 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d060:	2d05      	cmp	r5, #5
 800d062:	bfca      	itet	gt
 800d064:	f8dc 5004 	ldrgt.w	r5, [ip, #4]
 800d068:	f85e 5027 	ldrle.w	r5, [lr, r7, lsl #2]
 800d06c:	f855 5008 	ldrgt.w	r5, [r5, r8]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d070:	429d      	cmp	r5, r3
 800d072:	f040 8189 	bne.w	800d388 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>
  for (int i = 0; i < dims_count; ++i) {
 800d076:	3701      	adds	r7, #1
 800d078:	42bc      	cmp	r4, r7
 800d07a:	d1e5      	bne.n	800d048 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xac>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800d07c:	2800      	cmp	r0, #0
 800d07e:	4663      	mov	r3, ip
 800d080:	f2c0 8182 	blt.w	800d388 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800d084:	f8d1 8004 	ldr.w	r8, [r1, #4]
  for (int i = 0; i < dims_count; ++i) {
 800d088:	681f      	ldr	r7, [r3, #0]
  for (int i = 0; i < dims_count; ++i) {
 800d08a:	2501      	movs	r5, #1
 800d08c:	9509      	str	r5, [sp, #36]	; 0x24
 800d08e:	f04f 0c00 	mov.w	ip, #0
 800d092:	4645      	mov	r5, r8
 800d094:	f04f 0e01 	mov.w	lr, #1
 800d098:	4698      	mov	r8, r3
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800d09a:	4560      	cmp	r0, ip
 800d09c:	f000 8157 	beq.w	800d34e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3b2>
 800d0a0:	f855 302c 	ldr.w	r3, [r5, ip, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
 800d0a4:	f10c 0c01 	add.w	ip, ip, #1
 800d0a8:	45a4      	cmp	ip, r4
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800d0aa:	fb03 fe0e 	mul.w	lr, r3, lr
  for (int i = 0; i < dims_count; ++i) {
 800d0ae:	d1f4      	bne.n	800d09a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xfe>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d0b0:	2c05      	cmp	r4, #5
 800d0b2:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 800d0b6:	4643      	mov	r3, r8
 800d0b8:	f340 8154 	ble.w	800d364 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c8>
 800d0bc:	6849      	ldr	r1, [r1, #4]
 800d0be:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d0c2:	9105      	str	r1, [sp, #20]
    TFLITE_DCHECK_LT(i, size_);
 800d0c4:	42b8      	cmp	r0, r7
 800d0c6:	f280 815f 	bge.w	800d388 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d0ca:	2f05      	cmp	r7, #5
 800d0cc:	bfc8      	it	gt
 800d0ce:	685b      	ldrgt	r3, [r3, #4]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800d0d0:	9905      	ldr	r1, [sp, #20]
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d0d2:	bfce      	itee	gt
 800d0d4:	f853 3020 	ldrgt.w	r3, [r3, r0, lsl #2]
 800d0d8:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 800d0dc:	6843      	ldrle	r3, [r0, #4]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800d0de:	428b      	cmp	r3, r1
 800d0e0:	f040 8152 	bne.w	800d388 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>
  for (int i = 0; i < outer_size; ++i) {
 800d0e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	dd7d      	ble.n	800d1e6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x24a>
 800d0ea:	460b      	mov	r3, r1
 800d0ec:	0049      	lsls	r1, r1, #1
 800d0ee:	9107      	str	r1, [sp, #28]
 800d0f0:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d0f2:	9204      	str	r2, [sp, #16]
 800d0f4:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800d0f8:	eb02 0b03 	add.w	fp, r2, r3
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	9306      	str	r3, [sp, #24]
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800d100:	4688      	mov	r8, r1
    for (int c = 0; c < depth; ++c) {
 800d102:	9b05      	ldr	r3, [sp, #20]
 800d104:	2b00      	cmp	r3, #0
 800d106:	dd61      	ble.n	800d1cc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x230>
 800d108:	9b04      	ldr	r3, [sp, #16]
 800d10a:	f06f 047f 	mvn.w	r4, #127	; 0x7f
 800d10e:	f913 2b01 	ldrsb.w	r2, [r3], #1
 800d112:	4294      	cmp	r4, r2
 800d114:	bfb8      	it	lt
 800d116:	4614      	movlt	r4, r2
 800d118:	459b      	cmp	fp, r3
 800d11a:	d1f8      	bne.n	800d10e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x172>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800d11c:	f04f 0900 	mov.w	r9, #0
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800d120:	f8cd 8008 	str.w	r8, [sp, #8]
 800d124:	9f04      	ldr	r7, [sp, #16]
 800d126:	46c8      	mov	r8, r9
  return a + b;
 800d128:	f240 75ff 	movw	r5, #2047	; 0x7ff
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800d12c:	46a1      	mov	r9, r4
 800d12e:	9c01      	ldr	r4, [sp, #4]
 800d130:	e01c      	b.n	800d16c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d0>
  std::int64_t ab_64 = a_64 * b_64;
 800d132:	fb86 0200 	smull	r0, r2, r6, r0
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800d136:	2a00      	cmp	r2, #0
 800d138:	db32      	blt.n	800d1a0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x204>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800d13a:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
 800d13e:	f142 0200 	adc.w	r2, r2, #0
 800d142:	0fc0      	lsrs	r0, r0, #31
 800d144:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 800d148:	f7fc f920 	bl	800938c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
  return a + b;
 800d14c:	2800      	cmp	r0, #0
  return a & b;
 800d14e:	f3c0 010b 	ubfx	r1, r0, #0, #12
  return a + b;
 800d152:	bfa8      	it	ge
 800d154:	462a      	movge	r2, r5
  return a >> offset;
 800d156:	ea4f 3020 	mov.w	r0, r0, asr #12
  return a + b;
 800d15a:	bfb8      	it	lt
 800d15c:	f44f 6200 	movlt.w	r2, #2048	; 0x800
 800d160:	4291      	cmp	r1, r2
 800d162:	bfc8      	it	gt
 800d164:	3001      	addgt	r0, #1
 800d166:	4480      	add	r8, r0
    for (int c = 0; c < depth; ++c) {
 800d168:	45bb      	cmp	fp, r7
 800d16a:	d03f      	beq.n	800d1ec <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x250>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800d16c:	f917 0b01 	ldrsb.w	r0, [r7], #1
      int32_t input_diff =
 800d170:	eba0 0009 	sub.w	r0, r0, r9
      if (input_diff >= diff_min) {
 800d174:	4582      	cmp	sl, r0
 800d176:	dcf7      	bgt.n	800d168 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1cc>
 800d178:	40a0      	lsls	r0, r4
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800d17a:	4286      	cmp	r6, r0
 800d17c:	d1d9      	bne.n	800d132 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x196>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800d17e:	4b83      	ldr	r3, [pc, #524]	; (800d38c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3f0>)
  std::int64_t ab_64 = a_64 * b_64;
 800d180:	fb86 0206 	smull	r0, r2, r6, r6
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800d184:	2a00      	cmp	r2, #0
 800d186:	bfb5      	itete	lt
 800d188:	469c      	movlt	ip, r3
 800d18a:	f04f 4c80 	movge.w	ip, #1073741824	; 0x40000000
 800d18e:	f04f 31ff 	movlt.w	r1, #4294967295
 800d192:	2100      	movge	r1, #0
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800d194:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 800d198:	d106      	bne.n	800d1a8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x20c>
 800d19a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800d19e:	e7d3      	b.n	800d148 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1ac>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800d1a0:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 800d38c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3f0>
 800d1a4:	f04f 31ff 	mov.w	r1, #4294967295
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800d1a8:	eb10 000c 	adds.w	r0, r0, ip
 800d1ac:	eb42 0201 	adc.w	r2, r2, r1
 800d1b0:	2a00      	cmp	r2, #0
 800d1b2:	da04      	bge.n	800d1be <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x222>
 800d1b4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d1b8:	18c0      	adds	r0, r0, r3
 800d1ba:	f142 0200 	adc.w	r2, r2, #0
 800d1be:	0fc0      	lsrs	r0, r0, #31
 800d1c0:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
 800d1c4:	e7c0      	b.n	800d148 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1ac>
 800d1c6:	46d8      	mov	r8, fp
 800d1c8:	f8dd b020 	ldr.w	fp, [sp, #32]
  for (int i = 0; i < outer_size; ++i) {
 800d1cc:	9a07      	ldr	r2, [sp, #28]
 800d1ce:	9b06      	ldr	r3, [sp, #24]
 800d1d0:	4490      	add	r8, r2
 800d1d2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d1d6:	440a      	add	r2, r1
 800d1d8:	9204      	str	r2, [sp, #16]
 800d1da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1dc:	3301      	adds	r3, #1
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	9306      	str	r3, [sp, #24]
 800d1e2:	448b      	add	fp, r1
 800d1e4:	d18d      	bne.n	800d102 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x166>
}
 800d1e6:	b00b      	add	sp, #44	; 0x2c
 800d1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ec:	464c      	mov	r4, r9
 800d1ee:	46c1      	mov	r9, r8
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 800d1f0:	fab9 f589 	clz	r5, r9
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 800d1f4:	fa09 f005 	lsl.w	r0, r9, r5
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
 800d1f8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d1fc:	f7f9 fc76 	bl	8006aec <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800d200:	f04f 0901 	mov.w	r9, #1
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 800d204:	f1c5 011b 	rsb	r1, r5, #27
 800d208:	fa09 f901 	lsl.w	r9, r9, r1
 800d20c:	f109 33ff 	add.w	r3, r9, #4294967295
 800d210:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d214:	9302      	str	r3, [sp, #8]
  return a >> offset;
 800d216:	105b      	asrs	r3, r3, #1
 800d218:	9303      	str	r3, [sp, #12]
 800d21a:	9b04      	ldr	r3, [sp, #16]
 800d21c:	f8cd b020 	str.w	fp, [sp, #32]
 800d220:	f103 39ff 	add.w	r9, r3, #4294967295
 800d224:	9b07      	ldr	r3, [sp, #28]
 800d226:	46c3      	mov	fp, r8
 800d228:	eba8 0503 	sub.w	r5, r8, r3
 800d22c:	4607      	mov	r7, r0
    for (int c = 0; c < depth; ++c) {
 800d22e:	46a0      	mov	r8, r4
 800d230:	460c      	mov	r4, r1
 800d232:	e037      	b.n	800d2a4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x308>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 800d234:	9b01      	ldr	r3, [sp, #4]
 800d236:	4098      	lsls	r0, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800d238:	4286      	cmp	r6, r0
 800d23a:	d051      	beq.n	800d2e0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x344>
  std::int64_t ab_64 = a_64 * b_64;
 800d23c:	fb86 c000 	smull	ip, r0, r6, r0
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800d240:	2800      	cmp	r0, #0
 800d242:	db5e      	blt.n	800d302 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x366>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800d244:	f11c 4380 	adds.w	r3, ip, #1073741824	; 0x40000000
 800d248:	f140 0c00 	adc.w	ip, r0, #0
 800d24c:	0fd8      	lsrs	r0, r3, #31
 800d24e:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800d252:	f7fc f89b 	bl	800938c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800d256:	42b8      	cmp	r0, r7
 800d258:	d031      	beq.n	800d2be <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x322>
  std::int64_t ab_64 = a_64 * b_64;
 800d25a:	fb87 c000 	smull	ip, r0, r7, r0
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800d25e:	2800      	cmp	r0, #0
 800d260:	db62      	blt.n	800d328 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x38c>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800d262:	f11c 4380 	adds.w	r3, ip, #1073741824	; 0x40000000
 800d266:	f140 0000 	adc.w	r0, r0, #0
 800d26a:	0fdb      	lsrs	r3, r3, #31
 800d26c:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  assert(exponent >= 0);
 800d270:	2c00      	cmp	r4, #0
 800d272:	f2c0 8082 	blt.w	800d37a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3de>
  return a & b;
 800d276:	9a02      	ldr	r2, [sp, #8]
 800d278:	ea02 0c03 	and.w	ip, r2, r3
  return a + b;
 800d27c:	9a03      	ldr	r2, [sp, #12]
 800d27e:	eb02 70d3 	add.w	r0, r2, r3, lsr #31
  return a >> offset;
 800d282:	4123      	asrs	r3, r4
  return a + b;
 800d284:	4584      	cmp	ip, r0
 800d286:	bfc8      	it	gt
 800d288:	3301      	addgt	r3, #1
            unsat_output +
 800d28a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
      if (__b < __a)
 800d28e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d292:	da10      	bge.n	800d2b6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x31a>
      if (__a < __b)
 800d294:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800d298:	da0f      	bge.n	800d2ba <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x31e>
 800d29a:	4b3d      	ldr	r3, [pc, #244]	; (800d390 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3f4>)
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800d29c:	802b      	strh	r3, [r5, #0]
    for (int c = 0; c < depth; ++c) {
 800d29e:	3502      	adds	r5, #2
 800d2a0:	455d      	cmp	r5, fp
 800d2a2:	d090      	beq.n	800d1c6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22a>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800d2a4:	f919 0f01 	ldrsb.w	r0, [r9, #1]!
      int32_t input_diff =
 800d2a8:	eba0 0008 	sub.w	r0, r0, r8
      if (input_diff >= diff_min) {
 800d2ac:	4582      	cmp	sl, r0
 800d2ae:	ddc1      	ble.n	800d234 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x298>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800d2b0:	f248 0300 	movw	r3, #32768	; 0x8000
 800d2b4:	e7f2      	b.n	800d29c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x300>
 800d2b6:	f647 73ff 	movw	r3, #32767	; 0x7fff
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800d2ba:	b21b      	sxth	r3, r3
 800d2bc:	e7ee      	b.n	800d29c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x300>
  std::int64_t ab_64 = a_64 * b_64;
 800d2be:	fb87 c007 	smull	ip, r0, r7, r7
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800d2c2:	2800      	cmp	r0, #0
 800d2c4:	4b31      	ldr	r3, [pc, #196]	; (800d38c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3f0>)
 800d2c6:	bfa6      	itte	ge
 800d2c8:	f04f 0e00 	movge.w	lr, #0
 800d2cc:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 800d2d0:	f04f 3eff 	movlt.w	lr, #4294967295
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800d2d4:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 800d2d8:	d129      	bne.n	800d32e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x392>
 800d2da:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d2de:	e7c7      	b.n	800d270 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2d4>
  std::int64_t ab_64 = a_64 * b_64;
 800d2e0:	fb86 c006 	smull	ip, r0, r6, r6
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	4b29      	ldr	r3, [pc, #164]	; (800d38c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3f0>)
 800d2e8:	bfa6      	itte	ge
 800d2ea:	f04f 0e00 	movge.w	lr, #0
 800d2ee:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 800d2f2:	f04f 3eff 	movlt.w	lr, #4294967295
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800d2f6:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 800d2fa:	d105      	bne.n	800d308 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x36c>
 800d2fc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800d300:	e7a7      	b.n	800d252 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2b6>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800d302:	4b22      	ldr	r3, [pc, #136]	; (800d38c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3f0>)
 800d304:	f04f 3eff 	mov.w	lr, #4294967295
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800d308:	eb1c 0303 	adds.w	r3, ip, r3
 800d30c:	eb40 0e0e 	adc.w	lr, r0, lr
 800d310:	f1be 0f00 	cmp.w	lr, #0
 800d314:	da04      	bge.n	800d320 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x384>
 800d316:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800d31a:	189b      	adds	r3, r3, r2
 800d31c:	f14e 0e00 	adc.w	lr, lr, #0
 800d320:	0fd8      	lsrs	r0, r3, #31
 800d322:	ea40 004e 	orr.w	r0, r0, lr, lsl #1
 800d326:	e794      	b.n	800d252 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2b6>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800d328:	4b18      	ldr	r3, [pc, #96]	; (800d38c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3f0>)
 800d32a:	f04f 3eff 	mov.w	lr, #4294967295
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800d32e:	eb1c 0303 	adds.w	r3, ip, r3
 800d332:	eb40 0e0e 	adc.w	lr, r0, lr
 800d336:	f1be 0f00 	cmp.w	lr, #0
 800d33a:	da04      	bge.n	800d346 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3aa>
 800d33c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800d340:	189b      	adds	r3, r3, r2
 800d342:	f14e 0e00 	adc.w	lr, lr, #0
 800d346:	0fdb      	lsrs	r3, r3, #31
 800d348:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
 800d34c:	e790      	b.n	800d270 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2d4>
  for (int i = 0; i < dims_count; ++i) {
 800d34e:	f100 0c01 	add.w	ip, r0, #1
 800d352:	4564      	cmp	r4, ip
 800d354:	f47f aea1 	bne.w	800d09a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xfe>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d358:	2c05      	cmp	r4, #5
 800d35a:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 800d35e:	4643      	mov	r3, r8
 800d360:	f73f aeac 	bgt.w	800d0bc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x120>
 800d364:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800d368:	6849      	ldr	r1, [r1, #4]
 800d36a:	9105      	str	r1, [sp, #20]
 800d36c:	e6aa      	b.n	800d0c4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x128>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800d36e:	2800      	cmp	r0, #0
 800d370:	db0a      	blt.n	800d388 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>
  int flat_size = 1;
 800d372:	2401      	movs	r4, #1
 800d374:	681f      	ldr	r7, [r3, #0]
 800d376:	9409      	str	r4, [sp, #36]	; 0x24
 800d378:	e7f4      	b.n	800d364 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c8>
  assert(exponent >= 0);
 800d37a:	4b06      	ldr	r3, [pc, #24]	; (800d394 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3f8>)
 800d37c:	4a06      	ldr	r2, [pc, #24]	; (800d398 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3fc>)
 800d37e:	4807      	ldr	r0, [pc, #28]	; (800d39c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x400>)
 800d380:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800d384:	f003 ff06 	bl	8011194 <__assert_func>
    TFLITE_DCHECK_LT(i, size_);
 800d388:	f003 fefc 	bl	8011184 <abort>
 800d38c:	c0000001 	.word	0xc0000001
 800d390:	ffff8000 	.word	0xffff8000
 800d394:	08017764 	.word	0x08017764
 800d398:	08016a94 	.word	0x08016a94
 800d39c:	08016af0 	.word	0x08016af0

0800d3a0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 800d3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a4:	ed2d 8b04 	vpush	{d8-d9}
 800d3a8:	b0a5      	sub	sp, #148	; 0x94
 800d3aa:	2800      	cmp	r0, #0
 800d3ac:	f000 82a3 	beq.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
  TFLITE_DCHECK(node != nullptr);
 800d3b0:	460d      	mov	r5, r1
 800d3b2:	2900      	cmp	r1, #0
 800d3b4:	f000 829f 	beq.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800d3b8:	680a      	ldr	r2, [r1, #0]
 800d3ba:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800d3bc:	6851      	ldr	r1, [r2, #4]
 800d3be:	4606      	mov	r6, r0
 800d3c0:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800d3c2:	686a      	ldr	r2, [r5, #4]
 800d3c4:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800d3c6:	6851      	ldr	r1, [r2, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800d3c8:	4604      	mov	r4, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800d3ca:	4630      	mov	r0, r6
 800d3cc:	4798      	blx	r3
  TFLITE_DCHECK(node->user_data != nullptr);
 800d3ce:	692b      	ldr	r3, [r5, #16]
 800d3d0:	9307      	str	r3, [sp, #28]
 800d3d2:	4605      	mov	r5, r0
 800d3d4:	9005      	str	r0, [sp, #20]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	f000 828d 	beq.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
  switch (input->type) {
 800d3dc:	7a20      	ldrb	r0, [r4, #8]
 800d3de:	2803      	cmp	r0, #3
 800d3e0:	d011      	beq.n	800d406 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x66>
 800d3e2:	2809      	cmp	r0, #9
 800d3e4:	d00f      	beq.n	800d406 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x66>
 800d3e6:	2801      	cmp	r0, #1
 800d3e8:	d059      	beq.n	800d49e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xfe>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800d3ea:	6975      	ldr	r5, [r6, #20]
 800d3ec:	f7f6 fa46 	bl	800387c <TfLiteTypeGetName>
 800d3f0:	7a23      	ldrb	r3, [r4, #8]
 800d3f2:	49a3      	ldr	r1, [pc, #652]	; (800d680 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e0>)
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	4630      	mov	r0, r6
 800d3f8:	47a8      	blx	r5
      return kTfLiteError;
 800d3fa:	2001      	movs	r0, #1
}
 800d3fc:	b025      	add	sp, #148	; 0x94
 800d3fe:	ecbd 8b04 	vpop	{d8-d9}
 800d402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const auto input_shape = tflite::micro::GetTensorShape(input);
 800d406:	a80c      	add	r0, sp, #48	; 0x30
 800d408:	4621      	mov	r1, r4
 800d40a:	f7f9 fb49 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const auto output_shape = tflite::micro::GetTensorShape(output);
 800d40e:	9905      	ldr	r1, [sp, #20]
 800d410:	a812      	add	r0, sp, #72	; 0x48
 800d412:	f7f9 fb45 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  if (input->type == kTfLiteUInt8) {
 800d416:	7a23      	ldrb	r3, [r4, #8]
 800d418:	2b03      	cmp	r3, #3
 800d41a:	f000 8168 	beq.w	800d6ee <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x34e>
    if (output->type == kTfLiteInt16) {
 800d41e:	9b05      	ldr	r3, [sp, #20]
 800d420:	7a1b      	ldrb	r3, [r3, #8]
 800d422:	2b07      	cmp	r3, #7
 800d424:	f000 8132 	beq.w	800d68c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2ec>
  inline int32_t DimensionsCount() const { return size_; }
 800d428:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  for (int i = 0; i < dims_count; ++i) {
 800d42a:	2a00      	cmp	r2, #0
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 800d42c:	f102 33ff 	add.w	r3, r2, #4294967295
 800d430:	f340 819e 	ble.w	800d770 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x3d0>
    TFLITE_DCHECK_LT(i, size_);
 800d434:	9812      	ldr	r0, [sp, #72]	; 0x48
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d436:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d438:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 800d43c:	2805      	cmp	r0, #5
 800d43e:	f300 81dc 	bgt.w	800d7fa <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x45a>
 800d442:	2a05      	cmp	r2, #5
 800d444:	f300 8278 	bgt.w	800d938 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x598>
    if (i != skip_dim) {
 800d448:	2b00      	cmp	r3, #0
 800d44a:	f000 8272 	beq.w	800d932 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x592>
    TFLITE_DCHECK_LT(i, size_);
 800d44e:	2800      	cmp	r0, #0
 800d450:	f340 8251 	ble.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d454:	458c      	cmp	ip, r1
 800d456:	f040 824e 	bne.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	f000 8269 	beq.w	800d932 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x592>
    TFLITE_DCHECK_LT(i, size_);
 800d460:	2801      	cmp	r0, #1
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d462:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    TFLITE_DCHECK_LT(i, size_);
 800d464:	f000 8247 	beq.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d468:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d46a:	428e      	cmp	r6, r1
 800d46c:	f040 8243 	bne.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d470:	2b02      	cmp	r3, #2
 800d472:	f000 825e 	beq.w	800d932 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x592>
    TFLITE_DCHECK_LT(i, size_);
 800d476:	2802      	cmp	r0, #2
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d478:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    TFLITE_DCHECK_LT(i, size_);
 800d47a:	f000 823c 	beq.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d47e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d480:	428e      	cmp	r6, r1
 800d482:	f040 8238 	bne.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d486:	2b03      	cmp	r3, #3
 800d488:	f000 8253 	beq.w	800d932 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x592>
    TFLITE_DCHECK_LT(i, size_);
 800d48c:	2803      	cmp	r0, #3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d48e:	9e10      	ldr	r6, [sp, #64]	; 0x40
    TFLITE_DCHECK_LT(i, size_);
 800d490:	f000 8231 	beq.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d494:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d496:	428e      	cmp	r6, r1
 800d498:	f000 8249 	beq.w	800d92e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x58e>
 800d49c:	e22b      	b.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
  tflite::reference_ops::Softmax(op_data, tflite::micro::GetTensorShape(input),
 800d49e:	4621      	mov	r1, r4
 800d4a0:	a81e      	add	r0, sp, #120	; 0x78
 800d4a2:	f7f9 fafd 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800d4a6:	6822      	ldr	r2, [r4, #0]
 800d4a8:	9208      	str	r2, [sp, #32]
                                 tflite::micro::GetTensorShape(output),
 800d4aa:	4629      	mov	r1, r5
 800d4ac:	a818      	add	r0, sp, #96	; 0x60
 800d4ae:	f7f9 faf7 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800d4b2:	b10d      	cbz	r5, 800d4b8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x118>
 800d4b4:	682b      	ldr	r3, [r5, #0]
 800d4b6:	9305      	str	r3, [sp, #20]
  inline int32_t DimensionsCount() const { return size_; }
 800d4b8:	981e      	ldr	r0, [sp, #120]	; 0x78
 800d4ba:	9006      	str	r0, [sp, #24]
  for (int i = 0; i < dims_count; ++i) {
 800d4bc:	2800      	cmp	r0, #0
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800d4be:	f100 33ff 	add.w	r3, r0, #4294967295
 800d4c2:	f340 8139 	ble.w	800d738 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x398>
    TFLITE_DCHECK_LT(i, size_);
 800d4c6:	9c18      	ldr	r4, [sp, #96]	; 0x60
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d4c8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d4ca:	9919      	ldr	r1, [sp, #100]	; 0x64
    TFLITE_DCHECK_LT(i, size_);
 800d4cc:	940b      	str	r4, [sp, #44]	; 0x2c
 800d4ce:	2c05      	cmp	r4, #5
 800d4d0:	f300 80b2 	bgt.w	800d638 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x298>
 800d4d4:	2805      	cmp	r0, #5
 800d4d6:	f300 81f2 	bgt.w	800d8be <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x51e>
    if (i != skip_dim) {
 800d4da:	b333      	cbz	r3, 800d52a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x18a>
    TFLITE_DCHECK_LT(i, size_);
 800d4dc:	2c00      	cmp	r4, #0
 800d4de:	f340 820a 	ble.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d4e2:	4291      	cmp	r1, r2
 800d4e4:	f040 8207 	bne.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	d01e      	beq.n	800d52a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x18a>
    TFLITE_DCHECK_LT(i, size_);
 800d4ec:	2c01      	cmp	r4, #1
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d4ee:	9920      	ldr	r1, [sp, #128]	; 0x80
    TFLITE_DCHECK_LT(i, size_);
 800d4f0:	f000 8201 	beq.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d4f4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d4f6:	4291      	cmp	r1, r2
 800d4f8:	f040 81fd 	bne.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d4fc:	2b02      	cmp	r3, #2
 800d4fe:	d014      	beq.n	800d52a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x18a>
    TFLITE_DCHECK_LT(i, size_);
 800d500:	2c02      	cmp	r4, #2
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d502:	9921      	ldr	r1, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
 800d504:	f000 81f7 	beq.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d508:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d50a:	4291      	cmp	r1, r2
 800d50c:	f040 81f3 	bne.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d510:	2b03      	cmp	r3, #3
 800d512:	d00a      	beq.n	800d52a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x18a>
    TFLITE_DCHECK_LT(i, size_);
 800d514:	2c03      	cmp	r4, #3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d516:	9a22      	ldr	r2, [sp, #136]	; 0x88
    TFLITE_DCHECK_LT(i, size_);
 800d518:	f000 81ed 	beq.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d51c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d51e:	4291      	cmp	r1, r2
 800d520:	f040 81e9 	bne.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800d524:	2b00      	cmp	r3, #0
 800d526:	f2c0 81e6 	blt.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800d52a:	aa1f      	add	r2, sp, #124	; 0x7c
 800d52c:	f04f 0a01 	mov.w	sl, #1
 800d530:	2100      	movs	r1, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800d532:	428b      	cmp	r3, r1
 800d534:	f000 80fa 	beq.w	800d72c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x38c>
 800d538:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800d53c:	fb00 fa0a 	mul.w	sl, r0, sl
  for (int i = 0; i < dims_count; ++i) {
 800d540:	9806      	ldr	r0, [sp, #24]
 800d542:	3101      	adds	r1, #1
 800d544:	4288      	cmp	r0, r1
 800d546:	d1f4      	bne.n	800d532 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x192>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d548:	9a06      	ldr	r2, [sp, #24]
 800d54a:	2a05      	cmp	r2, #5
 800d54c:	f340 8109 	ble.w	800d762 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x3c2>
 800d550:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d552:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d556:	4611      	mov	r1, r2
    TFLITE_DCHECK_LT(i, size_);
 800d558:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d55a:	4293      	cmp	r3, r2
 800d55c:	f280 81cb 	bge.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d560:	2a05      	cmp	r2, #5
 800d562:	f340 80f3 	ble.w	800d74c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x3ac>
 800d566:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800d56c:	428b      	cmp	r3, r1
 800d56e:	f040 81c2 	bne.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
  for (int i = 0; i < outer_size; ++i) {
 800d572:	f1ba 0f00 	cmp.w	sl, #0
 800d576:	dd4f      	ble.n	800d618 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x278>
 800d578:	008a      	lsls	r2, r1, #2
 800d57a:	9209      	str	r2, [sp, #36]	; 0x24
 800d57c:	9a05      	ldr	r2, [sp, #20]
 800d57e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800d582:	eb02 0781 	add.w	r7, r2, r1, lsl #2
 800d586:	9a08      	ldr	r2, [sp, #32]
 800d588:	f04f 0800 	mov.w	r8, #0
 800d58c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800d590:	46c1      	mov	r9, r8
 800d592:	468b      	mov	fp, r1
 800d594:	46aa      	mov	sl, r5
    for (int c = 0; c < depth; ++c) {
 800d596:	f1bb 0f00 	cmp.w	fp, #0
 800d59a:	dd34      	ble.n	800d606 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x266>
 800d59c:	9b08      	ldr	r3, [sp, #32]
 800d59e:	ed9f 8a39 	vldr	s16, [pc, #228]	; 800d684 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e4>
 800d5a2:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 800d5a6:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800d5aa:	4629      	mov	r1, r5
 800d5ac:	ecf1 7a01 	vldmia	r1!, {s15}
 800d5b0:	eef4 7a48 	vcmp.f32	s15, s16
 800d5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5b8:	bfc8      	it	gt
 800d5ba:	eeb0 8a67 	vmovgt.f32	s16, s15
 800d5be:	458a      	cmp	sl, r1
 800d5c0:	d1f4      	bne.n	800d5ac <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x20c>
 800d5c2:	9b05      	ldr	r3, [sp, #20]
                                   static_cast<float>(params.beta));
 800d5c4:	eddf 8a30 	vldr	s17, [pc, #192]	; 800d688 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e8>
 800d5c8:	441c      	add	r4, r3
 800d5ca:	9b07      	ldr	r3, [sp, #28]
 800d5cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d5d0:	f7f3 fafa 	bl	8000bc8 <__aeabi_d2f>
 800d5d4:	ee09 0a10 	vmov	s18, r0
 800d5d8:	4626      	mov	r6, r4
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 800d5da:	ecb5 0a01 	vldmia	r5!, {s0}
 800d5de:	ee30 0a48 	vsub.f32	s0, s0, s16
  { return __builtin_expf(__x); }
 800d5e2:	ee20 0a09 	vmul.f32	s0, s0, s18
 800d5e6:	f003 fb59 	bl	8010c9c <expf>
    for (int c = 0; c < depth; ++c) {
 800d5ea:	45aa      	cmp	sl, r5
      sum += exp_c;
 800d5ec:	ee78 8a80 	vadd.f32	s17, s17, s0
      output_data[i * depth + c] = exp_c;
 800d5f0:	eca6 0a01 	vstmia	r6!, {s0}
    for (int c = 0; c < depth; ++c) {
 800d5f4:	d1f1      	bne.n	800d5da <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x23a>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 800d5f6:	ed94 7a00 	vldr	s14, [r4]
 800d5fa:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800d5fe:	ece4 7a01 	vstmia	r4!, {s15}
    for (int c = 0; c < depth; ++c) {
 800d602:	42bc      	cmp	r4, r7
 800d604:	d1f7      	bne.n	800d5f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x256>
  for (int i = 0; i < outer_size; ++i) {
 800d606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d608:	441f      	add	r7, r3
 800d60a:	449a      	add	sl, r3
 800d60c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d60e:	f109 0901 	add.w	r9, r9, #1
 800d612:	4599      	cmp	r9, r3
 800d614:	44d8      	add	r8, fp
 800d616:	d1be      	bne.n	800d596 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f6>
    if (size_ > kMaxSmallSize) {
 800d618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d61a:	2b05      	cmp	r3, #5
 800d61c:	dd05      	ble.n	800d62a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28a>
      delete[] dims_pointer_;
 800d61e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800d620:	b118      	cbz	r0, 800d62a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28a>
 800d622:	f003 fad5 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800d626:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d628:	9306      	str	r3, [sp, #24]
 800d62a:	9b06      	ldr	r3, [sp, #24]
 800d62c:	2b05      	cmp	r3, #5
 800d62e:	dd58      	ble.n	800d6e2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x342>
      delete[] dims_pointer_;
 800d630:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800d632:	2800      	cmp	r0, #0
 800d634:	d153      	bne.n	800d6de <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x33e>
 800d636:	e054      	b.n	800d6e2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x342>
 800d638:	2805      	cmp	r0, #5
 800d63a:	f300 8110 	bgt.w	800d85e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x4be>
    if (i != skip_dim) {
 800d63e:	2b00      	cmp	r3, #0
 800d640:	f43f af73 	beq.w	800d52a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x18a>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d644:	6808      	ldr	r0, [r1, #0]
 800d646:	4282      	cmp	r2, r0
 800d648:	f040 8155 	bne.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	f43f af6c 	beq.w	800d52a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x18a>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d652:	6848      	ldr	r0, [r1, #4]
 800d654:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d656:	4290      	cmp	r0, r2
 800d658:	f040 814d 	bne.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d65c:	2b02      	cmp	r3, #2
 800d65e:	f43f af64 	beq.w	800d52a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x18a>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d662:	9821      	ldr	r0, [sp, #132]	; 0x84
 800d664:	688a      	ldr	r2, [r1, #8]
 800d666:	4290      	cmp	r0, r2
 800d668:	f040 8145 	bne.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d66c:	2b03      	cmp	r3, #3
 800d66e:	f43f af5c 	beq.w	800d52a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x18a>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d672:	68ca      	ldr	r2, [r1, #12]
 800d674:	9922      	ldr	r1, [sp, #136]	; 0x88
 800d676:	4291      	cmp	r1, r2
 800d678:	f43f af54 	beq.w	800d524 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x184>
 800d67c:	e13b      	b.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
 800d67e:	bf00      	nop
 800d680:	0801742c 	.word	0x0801742c
 800d684:	ff7fffff 	.word	0xff7fffff
 800d688:	00000000 	.word	0x00000000
          op_data, tflite::micro::GetTensorShape(input),
 800d68c:	4621      	mov	r1, r4
 800d68e:	a81e      	add	r0, sp, #120	; 0x78
 800d690:	f7f9 fa06 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800d694:	6822      	ldr	r2, [r4, #0]
          tflite::micro::GetTensorShape(output),
 800d696:	9c05      	ldr	r4, [sp, #20]
 800d698:	9206      	str	r2, [sp, #24]
 800d69a:	4621      	mov	r1, r4
 800d69c:	a818      	add	r0, sp, #96	; 0x60
 800d69e:	f7f9 f9ff 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800d6a2:	6823      	ldr	r3, [r4, #0]
 800d6a4:	9300      	str	r3, [sp, #0]
 800d6a6:	9a06      	ldr	r2, [sp, #24]
 800d6a8:	9807      	ldr	r0, [sp, #28]
 800d6aa:	ab18      	add	r3, sp, #96	; 0x60
 800d6ac:	a91e      	add	r1, sp, #120	; 0x78
 800d6ae:	f7ff fc75 	bl	800cf9c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
    if (size_ > kMaxSmallSize) {
 800d6b2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d6b4:	2b05      	cmp	r3, #5
 800d6b6:	dc33      	bgt.n	800d720 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x380>
 800d6b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d6ba:	2b05      	cmp	r3, #5
 800d6bc:	dd03      	ble.n	800d6c6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x326>
      delete[] dims_pointer_;
 800d6be:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800d6c0:	b108      	cbz	r0, 800d6c6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x326>
 800d6c2:	f003 fa85 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800d6c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d6c8:	2b05      	cmp	r3, #5
 800d6ca:	dd03      	ble.n	800d6d4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x334>
      delete[] dims_pointer_;
 800d6cc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800d6ce:	b108      	cbz	r0, 800d6d4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x334>
 800d6d0:	f003 fa7e 	bl	8010bd0 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800d6d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6d6:	2b05      	cmp	r3, #5
 800d6d8:	dd03      	ble.n	800d6e2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x342>
      delete[] dims_pointer_;
 800d6da:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d6dc:	b108      	cbz	r0, 800d6e2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x342>
 800d6de:	f003 fa77 	bl	8010bd0 <_ZdaPv>
      return kTfLiteOk;
 800d6e2:	2000      	movs	r0, #0
}
 800d6e4:	b025      	add	sp, #148	; 0x94
 800d6e6:	ecbd 8b04 	vpop	{d8-d9}
 800d6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        op_data, tflite::micro::GetTensorShape(input),
 800d6ee:	4621      	mov	r1, r4
 800d6f0:	a81e      	add	r0, sp, #120	; 0x78
 800d6f2:	f7f9 f9d5 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800d6f6:	6822      	ldr	r2, [r4, #0]
        tflite::micro::GetTensorShape(output),
 800d6f8:	9c05      	ldr	r4, [sp, #20]
 800d6fa:	9206      	str	r2, [sp, #24]
 800d6fc:	4621      	mov	r1, r4
 800d6fe:	a818      	add	r0, sp, #96	; 0x60
 800d700:	f7f9 f9ce 	bl	8006aa0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800d704:	9a06      	ldr	r2, [sp, #24]
 800d706:	b10c      	cbz	r4, 800d70c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x36c>
 800d708:	6823      	ldr	r3, [r4, #0]
 800d70a:	9305      	str	r3, [sp, #20]
    tflite::reference_ops::Softmax(
 800d70c:	9b05      	ldr	r3, [sp, #20]
 800d70e:	9300      	str	r3, [sp, #0]
 800d710:	9807      	ldr	r0, [sp, #28]
 800d712:	ab18      	add	r3, sp, #96	; 0x60
 800d714:	a91e      	add	r1, sp, #120	; 0x78
 800d716:	f7ff fa49 	bl	800cbac <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
    if (size_ > kMaxSmallSize) {
 800d71a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d71c:	2b05      	cmp	r3, #5
 800d71e:	ddcb      	ble.n	800d6b8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x318>
      delete[] dims_pointer_;
 800d720:	9819      	ldr	r0, [sp, #100]	; 0x64
 800d722:	2800      	cmp	r0, #0
 800d724:	d0c8      	beq.n	800d6b8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x318>
 800d726:	f003 fa53 	bl	8010bd0 <_ZdaPv>
 800d72a:	e7c5      	b.n	800d6b8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x318>
  for (int i = 0; i < dims_count; ++i) {
 800d72c:	9806      	ldr	r0, [sp, #24]
 800d72e:	1c59      	adds	r1, r3, #1
 800d730:	4288      	cmp	r0, r1
 800d732:	f47f aefe 	bne.w	800d532 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x192>
 800d736:	e707      	b.n	800d548 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1a8>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800d738:	2b00      	cmp	r3, #0
 800d73a:	f2c0 80dc 	blt.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
 800d73e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d740:	920b      	str	r2, [sp, #44]	; 0x2c
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800d742:	9a06      	ldr	r2, [sp, #24]
 800d744:	2a05      	cmp	r2, #5
 800d746:	dd07      	ble.n	800d758 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x3b8>
 800d748:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  for (int i = 0; i < dims_count; ++i) {
 800d74a:	e6ef      	b.n	800d52c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x18c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d74c:	aa24      	add	r2, sp, #144	; 0x90
 800d74e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d752:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800d756:	e709      	b.n	800d56c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1cc>
  for (int i = 0; i < dims_count; ++i) {
 800d758:	2a00      	cmp	r2, #0
 800d75a:	f73f aee6 	bgt.w	800d52a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x18a>
  int flat_size = 1;
 800d75e:	f04f 0a01 	mov.w	sl, #1
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d762:	aa24      	add	r2, sp, #144	; 0x90
 800d764:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d768:	f852 2c14 	ldr.w	r2, [r2, #-20]
 800d76c:	4611      	mov	r1, r2
 800d76e:	e6f3      	b.n	800d558 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1b8>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800d770:	2b00      	cmp	r3, #0
 800d772:	f2c0 80c0 	blt.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
 800d776:	9812      	ldr	r0, [sp, #72]	; 0x48
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800d778:	2a05      	cmp	r2, #5
 800d77a:	dd34      	ble.n	800d7e6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x446>
 800d77c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d77e:	468c      	mov	ip, r1
 800d780:	2101      	movs	r1, #1
 800d782:	2600      	movs	r6, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800d784:	42b3      	cmp	r3, r6
 800d786:	d024      	beq.n	800d7d2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x432>
 800d788:	f85c 5026 	ldr.w	r5, [ip, r6, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
 800d78c:	3601      	adds	r6, #1
 800d78e:	42b2      	cmp	r2, r6
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800d790:	fb05 f101 	mul.w	r1, r5, r1
  for (int i = 0; i < dims_count; ++i) {
 800d794:	d1f6      	bne.n	800d784 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x3e4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d796:	2a05      	cmp	r2, #5
 800d798:	dd29      	ble.n	800d7ee <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x44e>
 800d79a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d79c:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
 800d7a0:	4283      	cmp	r3, r0
 800d7a2:	f280 80a8 	bge.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d7a6:	2805      	cmp	r0, #5
 800d7a8:	dd17      	ble.n	800d7da <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x43a>
 800d7aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d7ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800d7b0:	42b2      	cmp	r2, r6
 800d7b2:	f040 80a0 	bne.w	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 800d7b6:	9b05      	ldr	r3, [sp, #20]
 800d7b8:	6820      	ldr	r0, [r4, #0]
 800d7ba:	9c07      	ldr	r4, [sp, #28]
 800d7bc:	681d      	ldr	r5, [r3, #0]
 800d7be:	68a3      	ldr	r3, [r4, #8]
 800d7c0:	9502      	str	r5, [sp, #8]
 800d7c2:	4625      	mov	r5, r4
 800d7c4:	69a4      	ldr	r4, [r4, #24]
 800d7c6:	9401      	str	r4, [sp, #4]
 800d7c8:	68ec      	ldr	r4, [r5, #12]
 800d7ca:	9400      	str	r4, [sp, #0]
 800d7cc:	f002 fc60 	bl	8010090 <arm_softmax_s8>
 800d7d0:	e779      	b.n	800d6c6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x326>
  for (int i = 0; i < dims_count; ++i) {
 800d7d2:	1c5e      	adds	r6, r3, #1
 800d7d4:	42b2      	cmp	r2, r6
 800d7d6:	d1d5      	bne.n	800d784 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x3e4>
 800d7d8:	e7dd      	b.n	800d796 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x3f6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d7da:	aa24      	add	r2, sp, #144	; 0x90
 800d7dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d7e0:	f853 2c44 	ldr.w	r2, [r3, #-68]
 800d7e4:	e7e4      	b.n	800d7b0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x410>
  for (int i = 0; i < dims_count; ++i) {
 800d7e6:	2a00      	cmp	r2, #0
 800d7e8:	f300 80a3 	bgt.w	800d932 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x592>
  int flat_size = 1;
 800d7ec:	2101      	movs	r1, #1
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d7ee:	aa24      	add	r2, sp, #144	; 0x90
 800d7f0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d7f4:	f852 6c5c 	ldr.w	r6, [r2, #-92]
 800d7f8:	e7d2      	b.n	800d7a0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x400>
 800d7fa:	2a05      	cmp	r2, #5
 800d7fc:	dd7d      	ble.n	800d8fa <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x55a>
    if (i != skip_dim) {
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	f000 80e8 	beq.w	800d9d4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x634>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d804:	680d      	ldr	r5, [r1, #0]
 800d806:	f8dc 6000 	ldr.w	r6, [ip]
 800d80a:	42b5      	cmp	r5, r6
 800d80c:	d173      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d80e:	2b01      	cmp	r3, #1
 800d810:	f040 80e0 	bne.w	800d9d4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x634>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d814:	688d      	ldr	r5, [r1, #8]
 800d816:	f8dc 6008 	ldr.w	r6, [ip, #8]
 800d81a:	42b5      	cmp	r5, r6
 800d81c:	d16b      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d81e:	2b03      	cmp	r3, #3
 800d820:	f040 80e0 	bne.w	800d9e4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x644>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d824:	690d      	ldr	r5, [r1, #16]
 800d826:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800d82a:	42b5      	cmp	r5, r6
 800d82c:	d163      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d82e:	2b05      	cmp	r3, #5
 800d830:	d0a5      	beq.n	800d77e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x3de>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d832:	694d      	ldr	r5, [r1, #20]
 800d834:	f8dc 6014 	ldr.w	r6, [ip, #20]
 800d838:	42b5      	cmp	r5, r6
 800d83a:	d15c      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
 800d83c:	2706      	movs	r7, #6
    if (i != skip_dim) {
 800d83e:	42bb      	cmp	r3, r7
 800d840:	d007      	beq.n	800d852 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x4b2>
    TFLITE_DCHECK_LT(i, size_);
 800d842:	42b8      	cmp	r0, r7
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d844:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
 800d848:	dd55      	ble.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d84a:	f85c 6027 	ldr.w	r6, [ip, r7, lsl #2]
 800d84e:	42ae      	cmp	r6, r5
 800d850:	d151      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
  for (int i = 0; i < dims_count; ++i) {
 800d852:	3701      	adds	r7, #1
 800d854:	42ba      	cmp	r2, r7
 800d856:	d1f2      	bne.n	800d83e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x49e>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800d858:	2b00      	cmp	r3, #0
 800d85a:	da90      	bge.n	800d77e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x3de>
 800d85c:	e04b      	b.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d85e:	2b00      	cmp	r3, #0
 800d860:	f000 8098 	beq.w	800d994 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5f4>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d864:	6814      	ldr	r4, [r2, #0]
 800d866:	6808      	ldr	r0, [r1, #0]
 800d868:	4284      	cmp	r4, r0
 800d86a:	d144      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	f040 8091 	bne.w	800d994 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5f4>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d872:	6894      	ldr	r4, [r2, #8]
 800d874:	6888      	ldr	r0, [r1, #8]
 800d876:	4284      	cmp	r4, r0
 800d878:	d13d      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d87a:	2b03      	cmp	r3, #3
 800d87c:	f040 8091 	bne.w	800d9a2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x602>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d880:	6914      	ldr	r4, [r2, #16]
 800d882:	6908      	ldr	r0, [r1, #16]
 800d884:	4284      	cmp	r4, r0
 800d886:	d136      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d888:	2b05      	cmp	r3, #5
 800d88a:	f43f ae4f 	beq.w	800d52c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x18c>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d88e:	6954      	ldr	r4, [r2, #20]
 800d890:	6948      	ldr	r0, [r1, #20]
 800d892:	4284      	cmp	r4, r0
 800d894:	d12f      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
 800d896:	2406      	movs	r4, #6
    if (i != skip_dim) {
 800d898:	42a3      	cmp	r3, r4
 800d89a:	d008      	beq.n	800d8ae <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x50e>
    TFLITE_DCHECK_LT(i, size_);
 800d89c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d89e:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
 800d8a2:	42a5      	cmp	r5, r4
 800d8a4:	dd27      	ble.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d8a6:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 800d8aa:	4285      	cmp	r5, r0
 800d8ac:	d123      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
  for (int i = 0; i < dims_count; ++i) {
 800d8ae:	9806      	ldr	r0, [sp, #24]
 800d8b0:	3401      	adds	r4, #1
 800d8b2:	42a0      	cmp	r0, r4
 800d8b4:	d1f0      	bne.n	800d898 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x4f8>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	f6bf ae38 	bge.w	800d52c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x18c>
 800d8bc:	e01b      	b.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d055      	beq.n	800d96e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5ce>
    TFLITE_DCHECK_LT(i, size_);
 800d8c2:	2c00      	cmp	r4, #0
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d8c4:	6810      	ldr	r0, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
 800d8c6:	dd16      	ble.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d8c8:	4281      	cmp	r1, r0
 800d8ca:	d114      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	d14e      	bne.n	800d96e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5ce>
    TFLITE_DCHECK_LT(i, size_);
 800d8d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d8d2:	6890      	ldr	r0, [r2, #8]
    TFLITE_DCHECK_LT(i, size_);
 800d8d4:	2902      	cmp	r1, #2
 800d8d6:	dd0e      	ble.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d8d8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800d8da:	4288      	cmp	r0, r1
 800d8dc:	d10b      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d8de:	2b03      	cmp	r3, #3
 800d8e0:	d14e      	bne.n	800d980 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5e0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d8e2:	6911      	ldr	r1, [r2, #16]
    TFLITE_DCHECK_LT(i, size_);
 800d8e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d8e6:	2a05      	cmp	r2, #5
 800d8e8:	d105      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d8ea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d8ec:	4291      	cmp	r1, r2
 800d8ee:	d102      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d8f0:	2b05      	cmp	r3, #5
 800d8f2:	f43f af26 	beq.w	800d742 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x3a2>
  TFLITE_DCHECK(context != nullptr);
 800d8f6:	f003 fc45 	bl	8011184 <abort>
 800d8fa:	b1d3      	cbz	r3, 800d932 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x592>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d8fc:	f8dc 6000 	ldr.w	r6, [ip]
 800d900:	42b1      	cmp	r1, r6
 800d902:	d1f8      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d904:	2b01      	cmp	r3, #1
 800d906:	d014      	beq.n	800d932 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x592>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d908:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800d90a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d90e:	428e      	cmp	r6, r1
 800d910:	d1f1      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d912:	2b02      	cmp	r3, #2
 800d914:	d00d      	beq.n	800d932 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x592>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d916:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800d918:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800d91c:	428e      	cmp	r6, r1
 800d91e:	d1ea      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d920:	2b03      	cmp	r3, #3
 800d922:	d006      	beq.n	800d932 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x592>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d924:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800d928:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800d92a:	428e      	cmp	r6, r1
 800d92c:	d1e3      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800d92e:	2b00      	cmp	r3, #0
 800d930:	dbe1      	blt.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800d932:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 800d936:	e723      	b.n	800d780 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x3e0>
    if (i != skip_dim) {
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d03a      	beq.n	800d9b2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x612>
    TFLITE_DCHECK_LT(i, size_);
 800d93c:	2800      	cmp	r0, #0
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d93e:	680e      	ldr	r6, [r1, #0]
    TFLITE_DCHECK_LT(i, size_);
 800d940:	ddd9      	ble.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d942:	45b4      	cmp	ip, r6
 800d944:	d1d7      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d946:	2b01      	cmp	r3, #1
 800d948:	d133      	bne.n	800d9b2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x612>
    TFLITE_DCHECK_LT(i, size_);
 800d94a:	2802      	cmp	r0, #2
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d94c:	688f      	ldr	r7, [r1, #8]
    TFLITE_DCHECK_LT(i, size_);
 800d94e:	ddd2      	ble.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d950:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800d952:	42b7      	cmp	r7, r6
 800d954:	d1cf      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d956:	2b03      	cmp	r3, #3
 800d958:	d133      	bne.n	800d9c2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x622>
    TFLITE_DCHECK_LT(i, size_);
 800d95a:	2805      	cmp	r0, #5
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d95c:	690e      	ldr	r6, [r1, #16]
    TFLITE_DCHECK_LT(i, size_);
 800d95e:	d1ca      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d960:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800d962:	428e      	cmp	r6, r1
 800d964:	d1c7      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d966:	2b05      	cmp	r3, #5
 800d968:	f43f af06 	beq.w	800d778 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x3d8>
 800d96c:	e7c3      	b.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    TFLITE_DCHECK_LT(i, size_);
 800d96e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d970:	6850      	ldr	r0, [r2, #4]
    TFLITE_DCHECK_LT(i, size_);
 800d972:	2901      	cmp	r1, #1
 800d974:	ddbf      	ble.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d976:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d978:	4288      	cmp	r0, r1
 800d97a:	d1bc      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d97c:	2b02      	cmp	r3, #2
 800d97e:	d1a7      	bne.n	800d8d0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x530>
    TFLITE_DCHECK_LT(i, size_);
 800d980:	980b      	ldr	r0, [sp, #44]	; 0x2c
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d982:	68d1      	ldr	r1, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
 800d984:	2803      	cmp	r0, #3
 800d986:	ddb6      	ble.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d988:	981c      	ldr	r0, [sp, #112]	; 0x70
 800d98a:	4288      	cmp	r0, r1
 800d98c:	d1b3      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d98e:	2b04      	cmp	r3, #4
 800d990:	d0b1      	beq.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
 800d992:	e7a6      	b.n	800d8e2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x542>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d994:	6854      	ldr	r4, [r2, #4]
 800d996:	6848      	ldr	r0, [r1, #4]
 800d998:	4284      	cmp	r4, r0
 800d99a:	d1ac      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d99c:	2b02      	cmp	r3, #2
 800d99e:	f47f af68 	bne.w	800d872 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x4d2>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d9a2:	68d4      	ldr	r4, [r2, #12]
 800d9a4:	68c8      	ldr	r0, [r1, #12]
 800d9a6:	4284      	cmp	r4, r0
 800d9a8:	d1a5      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d9aa:	2b04      	cmp	r3, #4
 800d9ac:	f43f af6f 	beq.w	800d88e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x4ee>
 800d9b0:	e766      	b.n	800d880 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x4e0>
    TFLITE_DCHECK_LT(i, size_);
 800d9b2:	2801      	cmp	r0, #1
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d9b4:	684f      	ldr	r7, [r1, #4]
    TFLITE_DCHECK_LT(i, size_);
 800d9b6:	dd9e      	ble.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d9b8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800d9ba:	42b7      	cmp	r7, r6
 800d9bc:	d19b      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d9be:	2b02      	cmp	r3, #2
 800d9c0:	d1c3      	bne.n	800d94a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5aa>
    TFLITE_DCHECK_LT(i, size_);
 800d9c2:	2803      	cmp	r0, #3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d9c4:	68cf      	ldr	r7, [r1, #12]
    TFLITE_DCHECK_LT(i, size_);
 800d9c6:	dd96      	ble.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d9c8:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800d9ca:	42b7      	cmp	r7, r6
 800d9cc:	d193      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d9ce:	2b04      	cmp	r3, #4
 800d9d0:	d091      	beq.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
 800d9d2:	e7c2      	b.n	800d95a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5ba>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d9d4:	684d      	ldr	r5, [r1, #4]
 800d9d6:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800d9da:	42b5      	cmp	r5, r6
 800d9dc:	d18b      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d9de:	2b02      	cmp	r3, #2
 800d9e0:	f47f af18 	bne.w	800d814 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x474>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d9e4:	68cd      	ldr	r5, [r1, #12]
 800d9e6:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800d9ea:	42b5      	cmp	r5, r6
 800d9ec:	d183      	bne.n	800d8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
    if (i != skip_dim) {
 800d9ee:	2b04      	cmp	r3, #4
 800d9f0:	f43f af1f 	beq.w	800d832 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x492>
 800d9f4:	e716      	b.n	800d824 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x484>
 800d9f6:	bf00      	nop

0800d9f8 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
}

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
  // We don't own the scratch buffer, so don't deallocate anything.
}
 800d9f8:	4770      	bx	lr
 800d9fa:	bf00      	nop

0800d9fc <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    line[kLineWidth] = 0;
    TF_LITE_REPORT_ERROR(error_reporter, "%s", (const char*)line);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 800d9fc:	6880      	ldr	r0, [r0, #8]
 800d9fe:	4770      	bx	lr

0800da00 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 800da00:	b510      	push	{r4, lr}
}
 800da02:	212c      	movs	r1, #44	; 0x2c
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 800da04:	4604      	mov	r4, r0
}
 800da06:	f003 f8e1 	bl	8010bcc <_ZdlPvj>
 800da0a:	4620      	mov	r0, r4
 800da0c:	bd10      	pop	{r4, pc}
 800da0e:	bf00      	nop

0800da10 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:
    int last_time_used) {
 800da10:	b538      	push	{r3, r4, r5, lr}
  if (buffer_count_ >= max_buffer_count_) {
 800da12:	6884      	ldr	r4, [r0, #8]
 800da14:	6845      	ldr	r5, [r0, #4]
 800da16:	42ac      	cmp	r4, r5
    int last_time_used) {
 800da18:	4684      	mov	ip, r0
  if (buffer_count_ >= max_buffer_count_) {
 800da1a:	da13      	bge.n	800da44 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x34>
  BufferRequirements* current = &requirements_[buffer_count_];
 800da1c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800da20:	0120      	lsls	r0, r4, #4
  current->size = size;
 800da22:	500a      	str	r2, [r1, r0]
  BufferRequirements* current = &requirements_[buffer_count_];
 800da24:	eb01 1204 	add.w	r2, r1, r4, lsl #4
  current->offline_offset = kOnlinePlannedBuffer;
 800da28:	f04f 31ff 	mov.w	r1, #4294967295
  current->first_time_used = first_time_used;
 800da2c:	6093      	str	r3, [r2, #8]
  current->last_time_used = last_time_used;
 800da2e:	9b04      	ldr	r3, [sp, #16]
 800da30:	60d3      	str	r3, [r2, #12]
  ++buffer_count_;
 800da32:	3401      	adds	r4, #1
  need_to_calculate_offsets_ = true;
 800da34:	2301      	movs	r3, #1
  current->offline_offset = kOnlinePlannedBuffer;
 800da36:	6051      	str	r1, [r2, #4]
  return kTfLiteOk;
 800da38:	2000      	movs	r0, #0
  ++buffer_count_;
 800da3a:	f8cc 4008 	str.w	r4, [ip, #8]
  need_to_calculate_offsets_ = true;
 800da3e:	f88c 3028 	strb.w	r3, [ip, #40]	; 0x28
}
 800da42:	bd38      	pop	{r3, r4, r5, pc}
 800da44:	4608      	mov	r0, r1
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 800da46:	462a      	mov	r2, r5
 800da48:	4902      	ldr	r1, [pc, #8]	; (800da54 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x44>)
 800da4a:	f7f5 ff23 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 800da4e:	2001      	movs	r0, #1
}
 800da50:	bd38      	pop	{r3, r4, r5, pc}
 800da52:	bf00      	nop
 800da54:	08017774 	.word	0x08017774

0800da58 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:
GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
 800da58:	b410      	push	{r4}
    : buffer_count_(0), need_to_calculate_offsets_(true) {
 800da5a:	4c0f      	ldr	r4, [pc, #60]	; (800da98 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0x40>)
 800da5c:	6004      	str	r4, [r0, #0]
 800da5e:	2400      	movs	r4, #0
 800da60:	6084      	str	r4, [r0, #8]
 800da62:	2401      	movs	r4, #1
 800da64:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 800da68:	f104 34cc 	add.w	r4, r4, #3435973836	; 0xcccccccc
 800da6c:	fba4 4202 	umull	r4, r2, r4, r2
 800da70:	0952      	lsrs	r2, r2, #5
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 800da72:	60c1      	str	r1, [r0, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 800da74:	eb01 1102 	add.w	r1, r1, r2, lsl #4
  next_free += sizeof(int) * max_buffer_count_;
 800da78:	eb01 0482 	add.w	r4, r1, r2, lsl #2
  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 800da7c:	e9c0 1404 	strd	r1, r4, [r0, #16]
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 800da80:	6042      	str	r2, [r0, #4]
  next_free += sizeof(int) * max_buffer_count_;
 800da82:	eb04 0482 	add.w	r4, r4, r2, lsl #2
  next_free += sizeof(ListEntry) * max_buffer_count_;
 800da86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800da8a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 800da8e:	6184      	str	r4, [r0, #24]
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 800da90:	6242      	str	r2, [r0, #36]	; 0x24
}
 800da92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da96:	4770      	bx	lr
 800da98:	080177c8 	.word	0x080177c8

0800da9c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:
    int last_time_used, int offline_offset) {
 800da9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 800daa0:	6804      	ldr	r4, [r0, #0]
 800daa2:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800db08 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x6c>
 800daa6:	68a7      	ldr	r7, [r4, #8]
  BufferRequirements* current = &requirements_[buffer_count_];
 800daa8:	e9d0 4802 	ldrd	r4, r8, [r0, #8]
 800daac:	454f      	cmp	r7, r9
    int last_time_used, int offline_offset) {
 800daae:	b083      	sub	sp, #12
  BufferRequirements* current = &requirements_[buffer_count_];
 800dab0:	eb08 1604 	add.w	r6, r8, r4, lsl #4
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 800dab4:	d116      	bne.n	800dae4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x48>
 800dab6:	4692      	mov	sl, r2
  if (buffer_count_ >= max_buffer_count_) {
 800dab8:	6842      	ldr	r2, [r0, #4]
 800daba:	4294      	cmp	r4, r2
 800dabc:	da19      	bge.n	800daf2 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x56>
 800dabe:	ea4f 1b04 	mov.w	fp, r4, lsl #4
  current->size = size;
 800dac2:	461d      	mov	r5, r3
  current->last_time_used = last_time_used;
 800dac4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  current->size = size;
 800dac6:	f848 a00b 	str.w	sl, [r8, fp]
  ++buffer_count_;
 800daca:	3401      	adds	r4, #1
  need_to_calculate_offsets_ = true;
 800dacc:	2301      	movs	r3, #1
  current->first_time_used = first_time_used;
 800dace:	60b5      	str	r5, [r6, #8]
  current->last_time_used = last_time_used;
 800dad0:	60f2      	str	r2, [r6, #12]
  ++buffer_count_;
 800dad2:	6084      	str	r4, [r0, #8]
  need_to_calculate_offsets_ = true;
 800dad4:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  current->offline_offset = offline_offset;
 800dad8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dada:	6073      	str	r3, [r6, #4]
  return kTfLiteOk;
 800dadc:	2000      	movs	r0, #0
}
 800dade:	b003      	add	sp, #12
 800dae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 800dae4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800dae6:	9400      	str	r4, [sp, #0]
 800dae8:	47b8      	blx	r7
 800daea:	2800      	cmp	r0, #0
 800daec:	d0f4      	beq.n	800dad8 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x3c>
    return kTfLiteError;
 800daee:	2001      	movs	r0, #1
 800daf0:	e7f5      	b.n	800dade <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x42>
 800daf2:	468e      	mov	lr, r1
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 800daf4:	4670      	mov	r0, lr
 800daf6:	4903      	ldr	r1, [pc, #12]	; (800db04 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x68>)
 800daf8:	f7f5 fecc 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 800dafc:	2001      	movs	r0, #1
}
 800dafe:	b003      	add	sp, #12
 800db00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db04:	08017774 	.word	0x08017774
 800db08:	0800da11 	.word	0x0800da11

0800db0c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 800db0c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800db10:	2b00      	cmp	r3, #0
 800db12:	f000 80b8 	beq.w	800dc86 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x17a>
 800db16:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800db1a:	f1bc 0f00 	cmp.w	ip, #0
 800db1e:	f000 80b2 	beq.w	800dc86 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x17a>
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 800db22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  need_to_calculate_offsets_ = false;
 800db26:	f04f 0200 	mov.w	r2, #0
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 800db2a:	68c5      	ldr	r5, [r0, #12]
  need_to_calculate_offsets_ = false;
 800db2c:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 800db30:	b083      	sub	sp, #12
  for (int i = 0; i < buffer_count_; ++i) {
 800db32:	f340 8111 	ble.w	800dd58 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x24c>
    buffer_offsets_[buffer_id] = 0;
 800db36:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800db38:	9101      	str	r1, [sp, #4]
                     &buffer_ids_sorted_[idx_from_head],
 800db3a:	e9d0 eb04 	ldrd	lr, fp, [r0, #16]
 800db3e:	4689      	mov	r9, r1
 800db40:	462c      	mov	r4, r5
 800db42:	1d2f      	adds	r7, r5, #4
  int idx_from_head = 0;
 800db44:	4611      	mov	r1, r2
 800db46:	4698      	mov	r8, r3
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 800db48:	6866      	ldr	r6, [r4, #4]
 800db4a:	1c73      	adds	r3, r6, #1
 800db4c:	f000 809c 	beq.w	800dc88 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x17c>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 800db50:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800db54:	f84e 6021 	str.w	r6, [lr, r1, lsl #2]
      buffer_ids_sorted_[idx_from_head] = i;
 800db58:	f84b 2021 	str.w	r2, [fp, r1, lsl #2]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 800db5c:	6866      	ldr	r6, [r4, #4]
 800db5e:	f849 6b04 	str.w	r6, [r9], #4
  for (int i = 0; i < buffer_count_; ++i) {
 800db62:	6886      	ldr	r6, [r0, #8]
 800db64:	3201      	adds	r2, #1
 800db66:	4296      	cmp	r6, r2
      idx_from_head++;
 800db68:	f101 0101 	add.w	r1, r1, #1
  for (int i = 0; i < buffer_count_; ++i) {
 800db6c:	f104 0410 	add.w	r4, r4, #16
 800db70:	f107 0710 	add.w	r7, r7, #16
 800db74:	dce8      	bgt.n	800db48 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3c>
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800db76:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 800db7a:	eba6 0c01 	sub.w	ip, r6, r1
 800db7e:	4643      	mov	r3, r8
 800db80:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
void ReverseSortInPlace(int* values, int* ids, int size) {
 800db84:	f1ae 0904 	sub.w	r9, lr, #4
 800db88:	eb09 098c 	add.w	r9, r9, ip, lsl #2
    for (int i = 1; i < size; ++i) {
 800db8c:	f1bc 0f01 	cmp.w	ip, #1
 800db90:	dd16      	ble.n	800dbc0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xb4>
 800db92:	460c      	mov	r4, r1
 800db94:	4672      	mov	r2, lr
    any_swapped = false;
 800db96:	f04f 0800 	mov.w	r8, #0
      if (values[i - 1] < values[i]) {
 800db9a:	6816      	ldr	r6, [r2, #0]
 800db9c:	f852 7f04 	ldr.w	r7, [r2, #4]!
 800dba0:	42be      	cmp	r6, r7
 800dba2:	da06      	bge.n	800dbb2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xa6>
        values[i] = value_temp;
 800dba4:	e942 7601 	strd	r7, r6, [r2, #-4]
        ids[i - 1] = ids[i];
 800dba8:	e9d4 6700 	ldrd	r6, r7, [r4]
 800dbac:	e9c4 7600 	strd	r7, r6, [r4]
        any_swapped = true;
 800dbb0:	4698      	mov	r8, r3
    for (int i = 1; i < size; ++i) {
 800dbb2:	4591      	cmp	r9, r2
 800dbb4:	f104 0404 	add.w	r4, r4, #4
 800dbb8:	d1ef      	bne.n	800db9a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x8e>
  do {
 800dbba:	f1b8 0f00 	cmp.w	r8, #0
 800dbbe:	d1e5      	bne.n	800db8c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x80>
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800dbc0:	6984      	ldr	r4, [r0, #24]
  next_free_entry_ = 1;
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	61c2      	str	r2, [r0, #28]
  first_entry_index_ = 0;
 800dbc6:	2300      	movs	r3, #0
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 800dbc8:	f04f 32ff 	mov.w	r2, #4294967295
  first_entry_index_ = 0;
 800dbcc:	6203      	str	r3, [r0, #32]
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 800dbce:	60a2      	str	r2, [r4, #8]
  int buffer_id = buffer_ids_sorted_[0];
 800dbd0:	f8db 2000 	ldr.w	r2, [fp]
  first_entry->requirements_index = buffer_id;
 800dbd4:	6062      	str	r2, [r4, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 800dbd6:	eb05 1102 	add.w	r1, r5, r2, lsl #4
 800dbda:	6849      	ldr	r1, [r1, #4]
 800dbdc:	3101      	adds	r1, #1
 800dbde:	f000 80b7 	beq.w	800dd50 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x244>
  first_entry->offset = buffer_offsets_[buffer_id];
 800dbe2:	9b01      	ldr	r3, [sp, #4]
 800dbe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbe8:	6023      	str	r3, [r4, #0]
  for (int i = 1; i < buffer_count_; ++i) {
 800dbea:	6883      	ldr	r3, [r0, #8]
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	dd47      	ble.n	800dc80 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x174>
 800dbf0:	46a0      	mov	r8, r4
 800dbf2:	f04f 0901 	mov.w	r9, #1
 800dbf6:	f8cd b000 	str.w	fp, [sp]
 800dbfa:	e008      	b.n	800dc0e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x102>
      first_entry->next_entry_index = first_entry_index_;
 800dbfc:	6a03      	ldr	r3, [r0, #32]
 800dbfe:	6093      	str	r3, [r2, #8]
      first_entry_index_ = new_entry_index;
 800dc00:	4690      	mov	r8, r2
 800dc02:	6206      	str	r6, [r0, #32]
  for (int i = 1; i < buffer_count_; ++i) {
 800dc04:	6883      	ldr	r3, [r0, #8]
 800dc06:	f109 0901 	add.w	r9, r9, #1
 800dc0a:	454b      	cmp	r3, r9
 800dc0c:	dd38      	ble.n	800dc80 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x174>
    buffer_id = buffer_ids_sorted_[i];
 800dc0e:	9b00      	ldr	r3, [sp, #0]
 800dc10:	f853 7f04 	ldr.w	r7, [r3, #4]!
 800dc14:	9300      	str	r3, [sp, #0]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 800dc16:	eb05 1307 	add.w	r3, r5, r7, lsl #4
 800dc1a:	013a      	lsls	r2, r7, #4
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 800dc1c:	6859      	ldr	r1, [r3, #4]
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 800dc1e:	f8d3 e008 	ldr.w	lr, [r3, #8]
    const int wanted_size = wanted_requirements->size;
 800dc22:	f855 a002 	ldr.w	sl, [r5, r2]
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 800dc26:	f8d3 c00c 	ldr.w	ip, [r3, #12]
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 800dc2a:	1c4e      	adds	r6, r1, #1
 800dc2c:	d040      	beq.n	800dcb0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1a4>
    buffer_offsets_[buffer_id] = candidate_offset;
 800dc2e:	9b01      	ldr	r3, [sp, #4]
 800dc30:	f843 1027 	str.w	r1, [r3, r7, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 800dc34:	69c6      	ldr	r6, [r0, #28]
 800dc36:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    ++next_free_entry_;
 800dc3a:	1c73      	adds	r3, r6, #1
    new_entry->offset = candidate_offset;
 800dc3c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 800dc40:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    new_entry->requirements_index = buffer_id;
 800dc44:	6057      	str	r7, [r2, #4]
    ++next_free_entry_;
 800dc46:	61c3      	str	r3, [r0, #28]
    if (first_entry->offset > candidate_offset) {
 800dc48:	f8d8 3000 	ldr.w	r3, [r8]
 800dc4c:	428b      	cmp	r3, r1
 800dc4e:	dcd5      	bgt.n	800dbfc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xf0>
 800dc50:	46c4      	mov	ip, r8
 800dc52:	e004      	b.n	800dc5e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x152>
        if (next_entry->offset > candidate_offset) {
 800dc54:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800dc58:	428f      	cmp	r7, r1
 800dc5a:	dc75      	bgt.n	800dd48 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x23c>
 800dc5c:	46f4      	mov	ip, lr
        const int next_entry_index = current_entry->next_entry_index;
 800dc5e:	f8dc 3008 	ldr.w	r3, [ip, #8]
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 800dc62:	eb03 0743 	add.w	r7, r3, r3, lsl #1
        if (next_entry_index == -1) {
 800dc66:	f1b3 3fff 	cmp.w	r3, #4294967295
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 800dc6a:	eb04 0e87 	add.w	lr, r4, r7, lsl #2
        if (next_entry_index == -1) {
 800dc6e:	d1f1      	bne.n	800dc54 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x148>
          current_entry->next_entry_index = new_entry_index;
 800dc70:	f8cc 6008 	str.w	r6, [ip, #8]
          new_entry->next_entry_index = -1;
 800dc74:	6093      	str	r3, [r2, #8]
  for (int i = 1; i < buffer_count_; ++i) {
 800dc76:	6883      	ldr	r3, [r0, #8]
 800dc78:	f109 0901 	add.w	r9, r9, #1
 800dc7c:	454b      	cmp	r3, r9
 800dc7e:	dcc6      	bgt.n	800dc0e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x102>
}
 800dc80:	b003      	add	sp, #12
 800dc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc86:	4770      	bx	lr
      idx_from_tail--;
 800dc88:	f10c 3cff 	add.w	ip, ip, #4294967295
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 800dc8c:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800dc90:	f84e 302c 	str.w	r3, [lr, ip, lsl #2]
      buffer_ids_sorted_[idx_from_tail] = i;
 800dc94:	f84b 202c 	str.w	r2, [fp, ip, lsl #2]
      buffer_offsets_[i] = -1;
 800dc98:	f849 6b04 	str.w	r6, [r9], #4
  for (int i = 0; i < buffer_count_; ++i) {
 800dc9c:	6886      	ldr	r6, [r0, #8]
 800dc9e:	3201      	adds	r2, #1
 800dca0:	4296      	cmp	r6, r2
 800dca2:	f104 0410 	add.w	r4, r4, #16
 800dca6:	f107 0710 	add.w	r7, r7, #16
 800dcaa:	f73f af4d 	bgt.w	800db48 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3c>
 800dcae:	e762      	b.n	800db76 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x6a>
      ListEntry* prior_entry = nullptr;
 800dcb0:	2600      	movs	r6, #0
    int candidate_offset = 0;
 800dcb2:	4631      	mov	r1, r6
  if (start == nullptr) {
 800dcb4:	b30e      	cbz	r6, 800dcfa <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ee>
    if (start->next_entry_index == -1) {
 800dcb6:	68b3      	ldr	r3, [r6, #8]
 800dcb8:	1c5a      	adds	r2, r3, #1
 800dcba:	d03c      	beq.n	800dd36 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x22a>
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 800dcbc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dcc0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dcc4:	468b      	mov	fp, r1
      &requirements_[entry->requirements_index];
 800dcc6:	685a      	ldr	r2, [r3, #4]
  const BufferRequirements* entry_requirements =
 800dcc8:	eb05 1202 	add.w	r2, r5, r2, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
 800dccc:	6891      	ldr	r1, [r2, #8]
 800dcce:	458c      	cmp	ip, r1
 800dcd0:	db1f      	blt.n	800dd12 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x206>
  if (first_time_used > entry_requirements->last_time_used) {
 800dcd2:	68d2      	ldr	r2, [r2, #12]
 800dcd4:	4596      	cmp	lr, r2
 800dcd6:	dc1c      	bgt.n	800dd12 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x206>
        if (prior_entry) {
 800dcd8:	4659      	mov	r1, fp
 800dcda:	b316      	cbz	r6, 800dd22 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x216>
          const int prior_entry_offset =
 800dcdc:	e9d6 6200 	ldrd	r6, r2, [r6]
              prior_entry->offset + candidate_requirements->size;
 800dce0:	0112      	lsls	r2, r2, #4
          const int prior_entry_offset =
 800dce2:	58aa      	ldr	r2, [r5, r2]
 800dce4:	4432      	add	r2, r6
 800dce6:	4291      	cmp	r1, r2
 800dce8:	bfb8      	it	lt
 800dcea:	4611      	movlt	r1, r2
        const int gap = next_entry->offset - candidate_offset;
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	1a52      	subs	r2, r2, r1
        if (gap >= wanted_size) {
 800dcf0:	4592      	cmp	sl, r2
 800dcf2:	dd9c      	ble.n	800dc2e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x122>
    int candidate_offset = 0;
 800dcf4:	461e      	mov	r6, r3
  if (start == nullptr) {
 800dcf6:	2e00      	cmp	r6, #0
 800dcf8:	d1dd      	bne.n	800dcb6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1aa>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800dcfa:	6a03      	ldr	r3, [r0, #32]
 800dcfc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dd00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dd04:	468b      	mov	fp, r1
      &requirements_[entry->requirements_index];
 800dd06:	685a      	ldr	r2, [r3, #4]
  const BufferRequirements* entry_requirements =
 800dd08:	eb05 1202 	add.w	r2, r5, r2, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
 800dd0c:	6891      	ldr	r1, [r2, #8]
 800dd0e:	458c      	cmp	ip, r1
 800dd10:	dadf      	bge.n	800dcd2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1c6>
    if (candidate_next_entry->next_entry_index == -1) {
 800dd12:	689b      	ldr	r3, [r3, #8]
 800dd14:	1c5a      	adds	r2, r3, #1
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 800dd16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (candidate_next_entry->next_entry_index == -1) {
 800dd1a:	d008      	beq.n	800dd2e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x222>
    candidate_next_entry =
 800dd1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 800dd20:	e7d1      	b.n	800dcc6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ba>
        const int gap = next_entry->offset - candidate_offset;
 800dd22:	681a      	ldr	r2, [r3, #0]
 800dd24:	1a52      	subs	r2, r2, r1
        if (gap >= wanted_size) {
 800dd26:	4592      	cmp	sl, r2
 800dd28:	dd81      	ble.n	800dc2e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x122>
    int candidate_offset = 0;
 800dd2a:	461e      	mov	r6, r3
 800dd2c:	e7e3      	b.n	800dcf6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ea>
        if (prior_entry) {
 800dd2e:	4659      	mov	r1, fp
 800dd30:	2e00      	cmp	r6, #0
 800dd32:	f43f af7c 	beq.w	800dc2e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x122>
          const int prior_entry_offset =
 800dd36:	e9d6 2300 	ldrd	r2, r3, [r6]
              prior_entry->offset + candidate_requirements->size;
 800dd3a:	011b      	lsls	r3, r3, #4
          const int prior_entry_offset =
 800dd3c:	58eb      	ldr	r3, [r5, r3]
 800dd3e:	4413      	add	r3, r2
 800dd40:	4299      	cmp	r1, r3
 800dd42:	bfb8      	it	lt
 800dd44:	4619      	movlt	r1, r3
        if (next_entry == nullptr) {
 800dd46:	e772      	b.n	800dc2e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x122>
          new_entry->next_entry_index = current_entry->next_entry_index;
 800dd48:	6093      	str	r3, [r2, #8]
          current_entry->next_entry_index = new_entry_index;
 800dd4a:	f8cc 6008 	str.w	r6, [ip, #8]
          break;
 800dd4e:	e759      	b.n	800dc04 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xf8>
    buffer_offsets_[buffer_id] = 0;
 800dd50:	9901      	ldr	r1, [sp, #4]
 800dd52:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800dd56:	e747      	b.n	800dbe8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
                     &buffer_ids_sorted_[idx_from_head],
 800dd58:	e9d0 eb04 	ldrd	lr, fp, [r0, #16]
    buffer_offsets_[buffer_id] = 0;
 800dd5c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800dd5e:	9201      	str	r2, [sp, #4]
 800dd60:	4659      	mov	r1, fp
 800dd62:	e70f      	b.n	800db84 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x78>

0800dd64 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 800dd64:	b570      	push	{r4, r5, r6, lr}
  CalculateOffsetsIfNeeded();
 800dd66:	f7ff fed1 	bl	800db0c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 800dd6a:	4605      	mov	r5, r0
  if (buffer_count_ == 0) {
 800dd6c:	6880      	ldr	r0, [r0, #8]
 800dd6e:	b1c8      	cbz	r0, 800dda4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x40>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 800dd70:	6a2b      	ldr	r3, [r5, #32]
 800dd72:	69ac      	ldr	r4, [r5, #24]
 800dd74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  while (entry) {
 800dd78:	eb14 0383 	adds.w	r3, r4, r3, lsl #2
 800dd7c:	d013      	beq.n	800dda6 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x42>
        &requirements_[entry->requirements_index];
 800dd7e:	68ee      	ldr	r6, [r5, #12]
  size_t max_size = 0;
 800dd80:	2000      	movs	r0, #0
 800dd82:	e002      	b.n	800dd8a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x26>
  while (entry) {
 800dd84:	eb14 0383 	adds.w	r3, r4, r3, lsl #2
 800dd88:	d00c      	beq.n	800dda4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x40>
    const size_t current_size = entry->offset + requirements->size;
 800dd8a:	e9d3 5200 	ldrd	r5, r2, [r3]
 800dd8e:	0111      	lsls	r1, r2, #4
    if (entry->next_entry_index == -1) {
 800dd90:	689a      	ldr	r2, [r3, #8]
    const size_t current_size = entry->offset + requirements->size;
 800dd92:	5871      	ldr	r1, [r6, r1]
 800dd94:	4429      	add	r1, r5
 800dd96:	4288      	cmp	r0, r1
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 800dd98:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800dd9c:	bf38      	it	cc
 800dd9e:	4608      	movcc	r0, r1
    if (entry->next_entry_index == -1) {
 800dda0:	3201      	adds	r2, #1
 800dda2:	d1ef      	bne.n	800dd84 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x20>
}
 800dda4:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 800dda6:	4618      	mov	r0, r3
}
 800dda8:	bd70      	pop	{r4, r5, r6, pc}
 800ddaa:	bf00      	nop

0800ddac <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 800ddac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddae:	4614      	mov	r4, r2
 800ddb0:	461e      	mov	r6, r3
 800ddb2:	460f      	mov	r7, r1
  CalculateOffsetsIfNeeded();
 800ddb4:	f7ff feaa 	bl	800db0c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 800ddb8:	2c00      	cmp	r4, #0
 800ddba:	6883      	ldr	r3, [r0, #8]
 800ddbc:	db07      	blt.n	800ddce <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x22>
 800ddbe:	42a3      	cmp	r3, r4
 800ddc0:	dd05      	ble.n	800ddce <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x22>
    TF_LITE_REPORT_ERROR(error_reporter,
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
 800ddc2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ddc4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ddc8:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
 800ddca:	2000      	movs	r0, #0
}
 800ddcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(error_reporter,
 800ddce:	4903      	ldr	r1, [pc, #12]	; (800dddc <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x30>)
 800ddd0:	4622      	mov	r2, r4
 800ddd2:	4638      	mov	r0, r7
 800ddd4:	f7f5 fd5e 	bl	8003894 <_ZN6tflite13ErrorReporter6ReportEPKcz>
 800ddd8:	2001      	movs	r0, #1
}
 800ddda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dddc:	08017794 	.word	0x08017794

0800dde0 <arm_convolve_1_x_n_s8>:
                                 const q7_t *filter_data,
                                 const cmsis_nn_dims* bias_dims,
                                 const int32_t *bias_data,
                                 const cmsis_nn_dims* output_dims,
                                 q7_t *output_data)
{
 800dde0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dde4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    (void)bias_dims;
    arm_status status = ARM_MATH_SUCCESS;
    if (output_dims->w % 4 != 0)
 800dde6:	68a5      	ldr	r5, [r4, #8]
 800dde8:	07ac      	lsls	r4, r5, #30
{
 800ddea:	e9dd ce0a 	ldrd	ip, lr, [sp, #40]	; 0x28
    if (output_dims->w % 4 != 0)
 800ddee:	d103      	bne.n	800ddf8 <arm_convolve_1_x_n_s8+0x18>
#endif

out:
    /* Return to application */
    return status;
}
 800ddf0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    status = arm_convolve_s8(ctx,
 800ddf4:	f000 b850 	b.w	800de98 <arm_convolve_s8>
}
 800ddf8:	f06f 0002 	mvn.w	r0, #2
 800ddfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800de00 <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims* input_dims,
                                              const cmsis_nn_dims* filter_dims)
{
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
 800de00:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 800de04:	68c0      	ldr	r0, [r0, #12]
 800de06:	fb02 f000 	mul.w	r0, r2, r0
 800de0a:	fb03 f000 	mul.w	r0, r3, r0
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 800de0e:	0080      	lsls	r0, r0, #2
 800de10:	4770      	bx	lr
 800de12:	bf00      	nop

0800de14 <arm_convolve_1x1_s8_fast>:
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
    if (input_dims->c % 4 != 0 ||
 800de14:	68d8      	ldr	r0, [r3, #12]
 800de16:	f010 0f03 	tst.w	r0, #3
 800de1a:	d138      	bne.n	800de8e <arm_convolve_1x1_s8_fast+0x7a>
 800de1c:	468c      	mov	ip, r1
 800de1e:	6909      	ldr	r1, [r1, #16]
 800de20:	2900      	cmp	r1, #0
 800de22:	d134      	bne.n	800de8e <arm_convolve_1x1_s8_fast+0x7a>
{
 800de24:	b510      	push	{r4, lr}
        conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 800de26:	f8dc 4014 	ldr.w	r4, [ip, #20]
{
 800de2a:	b08a      	sub	sp, #40	; 0x28
        conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 800de2c:	bb64      	cbnz	r4, 800de88 <arm_convolve_1x1_s8_fast+0x74>
 800de2e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800de32:	2901      	cmp	r1, #1
 800de34:	d128      	bne.n	800de88 <arm_convolve_1x1_s8_fast+0x74>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 800de36:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800de3a:	2901      	cmp	r1, #1
 800de3c:	d124      	bne.n	800de88 <arm_convolve_1x1_s8_fast+0x74>

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
    const int32_t rhs_rows = output_dims->c;
    const int32_t rhs_cols = input_dims->c;

    arm_nn_mat_mult_nt_t_s8(input_data,
 800de3e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800de40:	9004      	str	r0, [sp, #16]
 800de42:	68c9      	ldr	r1, [r1, #12]
 800de44:	9103      	str	r1, [sp, #12]
    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
 800de46:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	fb00 f101 	mul.w	r1, r0, r1
 800de50:	fb03 f101 	mul.w	r1, r3, r1
    arm_nn_mat_mult_nt_t_s8(input_data,
 800de54:	e9d2 3000 	ldrd	r3, r0, [r2]
 800de58:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800de5c:	9300      	str	r3, [sp, #0]
 800de5e:	f8dc 0024 	ldr.w	r0, [ip, #36]	; 0x24
 800de62:	9008      	str	r0, [sp, #32]
 800de64:	f8dc 0020 	ldr.w	r0, [ip, #32]
 800de68:	9007      	str	r0, [sp, #28]
 800de6a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800de6e:	9006      	str	r0, [sp, #24]
 800de70:	f8dc 0000 	ldr.w	r0, [ip]
 800de74:	9005      	str	r0, [sp, #20]
 800de76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de78:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800de7a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800de7c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800de7e:	f000 fd45 	bl	800e90c <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_MATH_SUCCESS;
 800de82:	4620      	mov	r0, r4
}
 800de84:	b00a      	add	sp, #40	; 0x28
 800de86:	bd10      	pop	{r4, pc}
        return ARM_MATH_SIZE_MISMATCH;
 800de88:	f06f 0002 	mvn.w	r0, #2
 800de8c:	e7fa      	b.n	800de84 <arm_convolve_1x1_s8_fast+0x70>
 800de8e:	f06f 0002 	mvn.w	r0, #2
}
 800de92:	4770      	bx	lr

0800de94 <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
    (void)input_dims;
    return 0;
}
 800de94:	2000      	movs	r0, #0
 800de96:	4770      	bx	lr

0800de98 <arm_convolve_s8>:
                           const q7_t *filter_data,
                           const cmsis_nn_dims* bias_dims,
                           const int32_t *bias_data,
                           const cmsis_nn_dims* output_dims,
                           q7_t *output_data)
{
 800de98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de9c:	ed2d 8b04 	vpush	{d8-d9}
 800dea0:	b0ad      	sub	sp, #180	; 0xb4
    q15_t *buffer_a = (q15_t *)ctx->buf;
 800dea2:	6800      	ldr	r0, [r0, #0]
{
 800dea4:	9c3b      	ldr	r4, [sp, #236]	; 0xec
    q15_t *buffer_a = (q15_t *)ctx->buf;
 800dea6:	9016      	str	r0, [sp, #88]	; 0x58
    const uint16_t input_batches = input_dims->n;
    const uint16_t input_x       = input_dims->w;
    const uint16_t input_y       = input_dims->h;
    const uint16_t input_ch      = input_dims->c;
    const uint16_t kernel_x      = filter_dims->w;
    const uint16_t kernel_y      = filter_dims->h;
 800dea8:	e9d4 b501 	ldrd	fp, r5, [r4, #4]
    const uint16_t input_y       = input_dims->h;
 800deac:	e9d3 8901 	ldrd	r8, r9, [r3, #4]
    const uint16_t input_ch      = input_dims->c;
 800deb0:	881c      	ldrh	r4, [r3, #0]
 800deb2:	68d8      	ldr	r0, [r3, #12]
    const uint16_t output_x      = output_dims->w;
    const uint16_t output_y      = output_dims->h;
    const uint16_t output_ch     = output_dims->c;

    const uint16_t pad_x         = conv_params->padding.w;
 800deb4:	690b      	ldr	r3, [r1, #16]
 800deb6:	9312      	str	r3, [sp, #72]	; 0x48
    const uint16_t pad_y         = conv_params->padding.h;
 800deb8:	694b      	ldr	r3, [r1, #20]
 800deba:	9322      	str	r3, [sp, #136]	; 0x88
    const uint16_t stride_x      = conv_params->stride.w;
 800debc:	688b      	ldr	r3, [r1, #8]
 800debe:	9313      	str	r3, [sp, #76]	; 0x4c
    const uint16_t stride_y      = conv_params->stride.h;
 800dec0:	68cb      	ldr	r3, [r1, #12]
 800dec2:	9323      	str	r3, [sp, #140]	; 0x8c

    const int32_t input_offset       = conv_params->input_offset;
    const int32_t out_offset         = conv_params->output_offset;
 800dec4:	e9d1 e300 	ldrd	lr, r3, [r1]
 800dec8:	9318      	str	r3, [sp, #96]	; 0x60
    const int32_t out_activation_min = conv_params->activation.min;
 800deca:	6a0b      	ldr	r3, [r1, #32]
{
 800decc:	9f3f      	ldr	r7, [sp, #252]	; 0xfc
    const int32_t out_activation_min = conv_params->activation.min;
 800dece:	9319      	str	r3, [sp, #100]	; 0x64
    const int32_t out_activation_max = conv_params->activation.max;
 800ded0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800ded2:	931a      	str	r3, [sp, #104]	; 0x68
    int32_t *output_mult             = quant_params->multiplier;
 800ded4:	6813      	ldr	r3, [r2, #0]
    const uint16_t output_ch     = output_dims->c;
 800ded6:	68fe      	ldr	r6, [r7, #12]
 800ded8:	9420      	str	r4, [sp, #128]	; 0x80
    const uint16_t output_y      = output_dims->h;
 800deda:	e9d7 7c01 	ldrd	r7, ip, [r7, #4]
    int32_t *output_mult             = quant_params->multiplier;
 800dede:	931b      	str	r3, [sp, #108]	; 0x6c
    int32_t *output_shift            = quant_params->shift;

    int i_batch;
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 800dee0:	9c20      	ldr	r4, [sp, #128]	; 0x80
    int32_t *output_shift            = quant_params->shift;
 800dee2:	6853      	ldr	r3, [r2, #4]
    const uint16_t output_ch     = output_dims->c;
 800dee4:	fa1f fa86 	uxth.w	sl, r6
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 800dee8:	2c00      	cmp	r4, #0
 800deea:	f000 816e 	beq.w	800e1ca <arm_convolve_s8+0x332>
 800deee:	fa1f f18b 	uxth.w	r1, fp
 800def2:	ee08 3a90 	vmov	s17, r3
 800def6:	b2ab      	uxth	r3, r5
 800def8:	b282      	uxth	r2, r0

                /* Computation is filed for every 2 columns */
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
                {
                    out =
                        arm_nn_mat_mult_kernel_s8_s16(filter_data,
 800defa:	fb13 f301 	smulbb	r3, r3, r1
 800defe:	fb13 f302 	smulbb	r3, r3, r2
 800df02:	460c      	mov	r4, r1
 800df04:	b2aa      	uxth	r2, r5
 800df06:	fa1f f588 	uxth.w	r5, r8
 800df0a:	950c      	str	r5, [sp, #48]	; 0x30
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 800df0c:	4625      	mov	r5, r4
 800df0e:	ee09 aa10 	vmov	s18, sl
 800df12:	4614      	mov	r4, r2
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 800df14:	fa1f fa80 	uxth.w	sl, r0
 800df18:	9214      	str	r2, [sp, #80]	; 0x50
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 800df1a:	fb02 f205 	mul.w	r2, r2, r5
 800df1e:	fb0a f202 	mul.w	r2, sl, r2
 800df22:	9127      	str	r1, [sp, #156]	; 0x9c
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch, two_column_buf, input_ch, input_offset);
 800df24:	fa0f f18e 	sxth.w	r1, lr
 800df28:	ee08 1a10 	vmov	s16, r1

                /* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
                const q15_t *ip_as_col = buffer_a;

                /* 4 multiply and accumulates are done in one loop. */
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 800df2c:	f3c2 018f 	ubfx	r1, r2, #2, #16
 800df30:	460d      	mov	r5, r1
 800df32:	9125      	str	r1, [sp, #148]	; 0x94
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 800df34:	9916      	ldr	r1, [sp, #88]	; 0x58
 800df36:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800df3a:	fa1f f08c 	uxth.w	r0, ip
 800df3e:	fa1f f989 	uxth.w	r9, r9
                    sum = __SMLAD(ker_a2, ip_b2, sum);

                    col_count--;
                }
                /* Handle left over mac */
                col_count = input_ch * kernel_y * kernel_x & 0x3;
 800df42:	f003 0c03 	and.w	ip, r3, #3
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 800df46:	9210      	str	r2, [sp, #64]	; 0x40
                        arm_nn_mat_mult_kernel_s8_s16(filter_data,
 800df48:	b29b      	uxth	r3, r3
 800df4a:	1e6a      	subs	r2, r5, #1
                }
            }
        }
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
 800df4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
                        arm_nn_mat_mult_kernel_s8_s16(filter_data,
 800df4e:	931e      	str	r3, [sp, #120]	; 0x78
        input_data += (input_x * input_y * input_ch);
 800df50:	fb09 f30a 	mul.w	r3, r9, sl
 800df54:	b2bf      	uxth	r7, r7
 800df56:	fb05 f303 	mul.w	r3, r5, r3
 800df5a:	b2b6      	uxth	r6, r6
 800df5c:	9328      	str	r3, [sp, #160]	; 0xa0
        output_data += (output_x * output_y * output_ch);
 800df5e:	fb07 f300 	mul.w	r3, r7, r0
 800df62:	fb06 f303 	mul.w	r3, r6, r3
 800df66:	b292      	uxth	r2, r2
 800df68:	9324      	str	r3, [sp, #144]	; 0x90
                    col_count--;
 800df6a:	f10c 33ff 	add.w	r3, ip, #4294967295
 800df6e:	3201      	adds	r2, #1
 800df70:	b29b      	uxth	r3, r3
 800df72:	932b      	str	r3, [sp, #172]	; 0xac
 800df74:	0093      	lsls	r3, r2, #2
 800df76:	9329      	str	r3, [sp, #164]	; 0xa4
__STATIC_FORCEINLINE q31_t arm_nn_read_q15x2_ia(const q15_t **in_q15)
{
  q31_t val;

  memcpy(&val, *in_q15, 4);
  *in_q15 += 2;
 800df78:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 800df7c:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 800df80:	932a      	str	r3, [sp, #168]	; 0xa8
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 800df82:	2300      	movs	r3, #0
 800df84:	931f      	str	r3, [sp, #124]	; 0x7c
 800df86:	fb04 f30b 	mul.w	r3, r4, fp
 800df8a:	930d      	str	r3, [sp, #52]	; 0x34
 800df8c:	465b      	mov	r3, fp
 800df8e:	9721      	str	r7, [sp, #132]	; 0x84
 800df90:	46d3      	mov	fp, sl
 800df92:	900f      	str	r0, [sp, #60]	; 0x3c
 800df94:	9626      	str	r6, [sp, #152]	; 0x98
                col_count = input_ch * kernel_y * kernel_x & 0x3;
 800df96:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 800df9a:	469a      	mov	sl, r3
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 800df9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	f000 8104 	beq.w	800e1ac <arm_convolve_s8+0x314>
 800dfa4:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800dfa6:	9317      	str	r3, [sp, #92]	; 0x5c
    q15_t *buffer_a = (q15_t *)ctx->buf;
 800dfa8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dfaa:	9308      	str	r3, [sp, #32]
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 800dfac:	2300      	movs	r3, #0
 800dfae:	931d      	str	r3, [sp, #116]	; 0x74
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 800dfb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d070      	beq.n	800e098 <arm_convolve_s8+0x200>
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 800dfb6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800dfb8:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 800dfbc:	fb02 f303 	mul.w	r3, r2, r3
 800dfc0:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
 800dfc4:	1a9b      	subs	r3, r3, r2
 800dfc6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800dfc8:	9311      	str	r3, [sp, #68]	; 0x44
 800dfca:	189a      	adds	r2, r3, r2
 800dfcc:	fb09 f303 	mul.w	r3, r9, r3
 800dfd0:	9315      	str	r3, [sp, #84]	; 0x54
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 800dfd2:	2300      	movs	r3, #0
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 800dfd4:	920b      	str	r2, [sp, #44]	; 0x2c
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 800dfd6:	930e      	str	r3, [sp, #56]	; 0x38
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 800dfd8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dfda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfdc:	4299      	cmp	r1, r3
 800dfde:	da50      	bge.n	800e082 <arm_convolve_s8+0x1ea>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800dfe0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dfe2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800dfe6:	fb02 f303 	mul.w	r3, r2, r3
 800dfea:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800dfee:	1a9b      	subs	r3, r3, r2
 800dff0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dff2:	930a      	str	r3, [sp, #40]	; 0x28
 800dff4:	18d6      	adds	r6, r2, r3
 800dff6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dff8:	9309      	str	r3, [sp, #36]	; 0x24
 800dffa:	4688      	mov	r8, r1
 800dffc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800dffe:	42b4      	cmp	r4, r6
 800e000:	da37      	bge.n	800e072 <arm_convolve_s8+0x1da>
 800e002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e004:	4543      	cmp	r3, r8
 800e006:	f240 80e6 	bls.w	800e1d6 <arm_convolve_s8+0x33e>
 800e00a:	2c00      	cmp	r4, #0
 800e00c:	f280 80f2 	bge.w	800e1f4 <arm_convolve_s8+0x35c>
 800e010:	9d08      	ldr	r5, [sp, #32]
 800e012:	ea06 77e6 	and.w	r7, r6, r6, asr #31
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 800e016:	4628      	mov	r0, r5
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800e018:	3401      	adds	r4, #1
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 800e01a:	4652      	mov	r2, sl
 800e01c:	2100      	movs	r1, #0
 800e01e:	f004 f827 	bl	8012070 <memset>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800e022:	42a7      	cmp	r7, r4
                        two_column_buf += input_ch;
 800e024:	4455      	add	r5, sl
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800e026:	dcf6      	bgt.n	800e016 <arm_convolve_s8+0x17e>
 800e028:	42a6      	cmp	r6, r4
 800e02a:	dd1e      	ble.n	800e06a <arm_convolve_s8+0x1d2>
 800e02c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e02e:	18e7      	adds	r7, r4, r3
 800e030:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800e032:	fb0b 3707 	mla	r7, fp, r7, r3
 800e036:	e006      	b.n	800e046 <arm_convolve_s8+0x1ae>
 800e038:	3401      	adds	r4, #1
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 800e03a:	f004 f819 	bl	8012070 <memset>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800e03e:	42a6      	cmp	r6, r4
                        two_column_buf += input_ch;
 800e040:	4455      	add	r5, sl
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800e042:	445f      	add	r7, fp
 800e044:	dd11      	ble.n	800e06a <arm_convolve_s8+0x1d2>
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
 800e046:	45a1      	cmp	r9, r4
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 800e048:	4628      	mov	r0, r5
 800e04a:	4652      	mov	r2, sl
 800e04c:	f04f 0100 	mov.w	r1, #0
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
 800e050:	ddf2      	ble.n	800e038 <arm_convolve_s8+0x1a0>
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch, two_column_buf, input_ch, input_offset);
 800e052:	4629      	mov	r1, r5
 800e054:	4638      	mov	r0, r7
 800e056:	ee18 3a10 	vmov	r3, s16
 800e05a:	465a      	mov	r2, fp
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800e05c:	3401      	adds	r4, #1
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch, two_column_buf, input_ch, input_offset);
 800e05e:	f001 fd4d 	bl	800fafc <arm_q7_to_q15_with_offset>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800e062:	42a6      	cmp	r6, r4
                        two_column_buf += input_ch;
 800e064:	4455      	add	r5, sl
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800e066:	445f      	add	r7, fp
 800e068:	dced      	bgt.n	800e046 <arm_convolve_s8+0x1ae>
                        two_column_buf += input_ch;
 800e06a:	9b08      	ldr	r3, [sp, #32]
 800e06c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e06e:	4413      	add	r3, r2
 800e070:	9308      	str	r3, [sp, #32]
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 800e072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e074:	444b      	add	r3, r9
 800e076:	9309      	str	r3, [sp, #36]	; 0x24
 800e078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e07a:	f108 0801 	add.w	r8, r8, #1
 800e07e:	4598      	cmp	r8, r3
 800e080:	d1bc      	bne.n	800dffc <arm_convolve_s8+0x164>
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 800e082:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e084:	9a08      	ldr	r2, [sp, #32]
 800e086:	4293      	cmp	r3, r2
 800e088:	f000 80b6 	beq.w	800e1f8 <arm_convolve_s8+0x360>
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 800e08c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e08e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e090:	3301      	adds	r3, #1
 800e092:	4293      	cmp	r3, r2
 800e094:	930e      	str	r3, [sp, #56]	; 0x38
 800e096:	db9f      	blt.n	800dfd8 <arm_convolve_s8+0x140>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 800e098:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e09a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e09c:	3301      	adds	r3, #1
 800e09e:	4293      	cmp	r3, r2
 800e0a0:	931d      	str	r3, [sp, #116]	; 0x74
 800e0a2:	db85      	blt.n	800dfb0 <arm_convolve_s8+0x118>
        if (two_column_buf != buffer_a)
 800e0a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e0a6:	9a08      	ldr	r2, [sp, #32]
 800e0a8:	4293      	cmp	r3, r2
 800e0aa:	d07f      	beq.n	800e1ac <arm_convolve_s8+0x314>
            for (i = 0; i < output_ch; i++)
 800e0ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d07c      	beq.n	800e1ac <arm_convolve_s8+0x314>
 800e0b2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
            const q7_t *ker_a = filter_data;
 800e0b4:	9d3c      	ldr	r5, [sp, #240]	; 0xf0
 800e0b6:	f1a2 0e04 	sub.w	lr, r2, #4
 800e0ba:	ee18 2a90 	vmov	r2, s17
 800e0be:	f1a2 0804 	sub.w	r8, r2, #4
 800e0c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e0c4:	18d3      	adds	r3, r2, r3
            for (i = 0; i < output_ch; i++)
 800e0c6:	f04f 0c00 	mov.w	ip, #0
 800e0ca:	9308      	str	r3, [sp, #32]
                if (bias_data)
 800e0cc:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800e0ce:	b10b      	cbz	r3, 800e0d4 <arm_convolve_s8+0x23c>
                    sum = bias_data[i];
 800e0d0:	f853 300c 	ldr.w	r3, [r3, ip]
                while (col_count)
 800e0d4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e0d6:	2a00      	cmp	r2, #0
 800e0d8:	f000 80b3 	beq.w	800e242 <arm_convolve_s8+0x3aa>
 800e0dc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800e0de:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800e0e0:	18ae      	adds	r6, r5, r2
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
  q31_t val;
  memcpy(&val, *in_q7, 4);
 800e0e2:	f855 0b04 	ldr.w	r0, [r5], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 800e0e6:	ea4f 2230 	mov.w	r2, r0, ror #8

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800e0ea:	fa2f f282 	sxtb16	r2, r2
 800e0ee:	fa2f f080 	sxtb16	r0, r0
        q31_t     inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
        q31_t     inAbuf2 = __SXTB16(inA);

#ifndef ARM_MATH_BIG_ENDIAN
  *out2 = (int32_t) (__PKHTB (inAbuf1, inAbuf2, 16));
  *out1 = (int32_t) (__PKHBT (inAbuf2, inAbuf1, 16));
 800e0f2:	b281      	uxth	r1, r0

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e0f4:	6827      	ldr	r7, [r4, #0]
 800e0f6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e0fa:	fb21 3107 	smlad	r1, r1, r7, r3
  *out2 = (int32_t) (__PKHTB (inAbuf1, inAbuf2, 16));
 800e0fe:	0c13      	lsrs	r3, r2, #16
 800e100:	041b      	lsls	r3, r3, #16
 800e102:	6862      	ldr	r2, [r4, #4]
 800e104:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 800e108:	3408      	adds	r4, #8
 800e10a:	fb23 1302 	smlad	r3, r3, r2, r1
 800e10e:	42b5      	cmp	r5, r6
 800e110:	d1e7      	bne.n	800e0e2 <arm_convolve_s8+0x24a>
  *in_q15 += 2;
 800e112:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
                while (col_count)
 800e114:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800e116:	2c00      	cmp	r4, #0
 800e118:	f000 8091 	beq.w	800e23e <arm_convolve_s8+0x3a6>
                    sum += ker_a1 * ip_b1;
 800e11c:	f996 1000 	ldrsb.w	r1, [r6]
 800e120:	8810      	ldrh	r0, [r2, #0]
 800e122:	fb10 3301 	smlabb	r3, r0, r1, r3
                while (col_count)
 800e126:	992b      	ldr	r1, [sp, #172]	; 0xac
 800e128:	b159      	cbz	r1, 800e142 <arm_convolve_s8+0x2aa>
                    sum += ker_a1 * ip_b1;
 800e12a:	f996 1001 	ldrsb.w	r1, [r6, #1]
 800e12e:	8850      	ldrh	r0, [r2, #2]
                while (col_count)
 800e130:	2c02      	cmp	r4, #2
                    sum += ker_a1 * ip_b1;
 800e132:	fb10 3301 	smlabb	r3, r0, r1, r3
                while (col_count)
 800e136:	d004      	beq.n	800e142 <arm_convolve_s8+0x2aa>
                    sum += ker_a1 * ip_b1;
 800e138:	8891      	ldrh	r1, [r2, #4]
 800e13a:	f996 2002 	ldrsb.w	r2, [r6, #2]
 800e13e:	fb11 3302 	smlabb	r3, r1, r2, r3
                    q7_t ker_a1 = *ker_a++;
 800e142:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e144:	18b5      	adds	r5, r6, r2
                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
 800e146:	f858 2f04 	ldr.w	r2, [r8, #4]!
    // Rounding offset to add for a right shift of 31
    mult.word.low = 1 << 30;
    mult.word.high = 0;

    // Gets resolved as a SMLAL instruction
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e14a:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
  return arm_nn_divide_by_power_of_two(
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e14e:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
  return arm_nn_divide_by_power_of_two(
 800e152:	fa03 f101 	lsl.w	r1, r3, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e156:	2400      	movs	r4, #0
 800e158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e15c:	fbc1 3400 	smlal	r3, r4, r1, r0
    result = (int32_t)(mult.long_long >> 31);
 800e160:	0fdb      	lsrs	r3, r3, #31
  return arm_nn_divide_by_power_of_two(
 800e162:	2a00      	cmp	r2, #0
    result = (int32_t)(mult.long_long >> 31);
 800e164:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
  return arm_nn_divide_by_power_of_two(
 800e168:	dc0d      	bgt.n	800e186 <arm_convolve_s8+0x2ee>
 800e16a:	4252      	negs	r2, r2
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e16c:	2101      	movs	r1, #1
 800e16e:	4091      	lsls	r1, r2
 800e170:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 800e172:	ea03 0001 	and.w	r0, r3, r1
    if (result < 0)
 800e176:	4113      	asrs	r3, r2
    q31_t threshold = remainder_mask >> 1;
 800e178:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 800e17c:	bf48      	it	mi
 800e17e:	3101      	addmi	r1, #1
    if (remainder > threshold)
 800e180:	4288      	cmp	r0, r1
        result++;
 800e182:	bfc8      	it	gt
 800e184:	3301      	addgt	r3, #1
                sum += out_offset;
 800e186:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e188:	4413      	add	r3, r2
                sum = MAX(sum, out_activation_min);
 800e18a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e18c:	4293      	cmp	r3, r2
 800e18e:	bfb8      	it	lt
 800e190:	4613      	movlt	r3, r2
                sum = MIN(sum, out_activation_max);
 800e192:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e194:	4293      	cmp	r3, r2
 800e196:	bfa8      	it	ge
 800e198:	4613      	movge	r3, r2
                *out++ = (q7_t)sum;
 800e19a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e19c:	f802 3b01 	strb.w	r3, [r2], #1
            for (i = 0; i < output_ch; i++)
 800e1a0:	9b08      	ldr	r3, [sp, #32]
                *out++ = (q7_t)sum;
 800e1a2:	9217      	str	r2, [sp, #92]	; 0x5c
            for (i = 0; i < output_ch; i++)
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	f10c 0c04 	add.w	ip, ip, #4
 800e1aa:	d18f      	bne.n	800e0cc <arm_convolve_s8+0x234>
        input_data += (input_x * input_y * input_ch);
 800e1ac:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 800e1ae:	9928      	ldr	r1, [sp, #160]	; 0xa0
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 800e1b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
        input_data += (input_x * input_y * input_ch);
 800e1b2:	440a      	add	r2, r1
 800e1b4:	923a      	str	r2, [sp, #232]	; 0xe8
        output_data += (output_x * output_y * output_ch);
 800e1b6:	9924      	ldr	r1, [sp, #144]	; 0x90
 800e1b8:	9a40      	ldr	r2, [sp, #256]	; 0x100
 800e1ba:	440a      	add	r2, r1
 800e1bc:	9240      	str	r2, [sp, #256]	; 0x100
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 800e1be:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	4293      	cmp	r3, r2
 800e1c4:	931f      	str	r3, [sp, #124]	; 0x7c
 800e1c6:	f47f aee9 	bne.w	800df9c <arm_convolve_s8+0x104>
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
}
 800e1ca:	2000      	movs	r0, #0
 800e1cc:	b02d      	add	sp, #180	; 0xb4
 800e1ce:	ecbd 8b04 	vpop	{d8-d9}
 800e1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800e1d6:	9d08      	ldr	r5, [sp, #32]
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 800e1d8:	4628      	mov	r0, r5
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800e1da:	3401      	adds	r4, #1
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 800e1dc:	4652      	mov	r2, sl
 800e1de:	2100      	movs	r1, #0
 800e1e0:	f003 ff46 	bl	8012070 <memset>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800e1e4:	42b4      	cmp	r4, r6
                        two_column_buf += input_ch;
 800e1e6:	4455      	add	r5, sl
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800e1e8:	d1f6      	bne.n	800e1d8 <arm_convolve_s8+0x340>
                        two_column_buf += input_ch;
 800e1ea:	9b08      	ldr	r3, [sp, #32]
 800e1ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e1ee:	4413      	add	r3, r2
 800e1f0:	9308      	str	r3, [sp, #32]
 800e1f2:	e73e      	b.n	800e072 <arm_convolve_s8+0x1da>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800e1f4:	9d08      	ldr	r5, [sp, #32]
 800e1f6:	e719      	b.n	800e02c <arm_convolve_s8+0x194>
                        arm_nn_mat_mult_kernel_s8_s16(filter_data,
 800e1f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e1fa:	9306      	str	r3, [sp, #24]
 800e1fc:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800e1fe:	9305      	str	r3, [sp, #20]
 800e200:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e202:	9304      	str	r3, [sp, #16]
 800e204:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e206:	9301      	str	r3, [sp, #4]
 800e208:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 800e20a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
                        arm_nn_mat_mult_kernel_s8_s16(filter_data,
 800e20c:	9300      	str	r3, [sp, #0]
 800e20e:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 800e212:	9303      	str	r3, [sp, #12]
 800e214:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 800e218:	9302      	str	r3, [sp, #8]
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 800e21a:	3401      	adds	r4, #1
                        arm_nn_mat_mult_kernel_s8_s16(filter_data,
 800e21c:	ee18 3a90 	vmov	r3, s17
 800e220:	ee19 2a10 	vmov	r2, s18
 800e224:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e226:	983c      	ldr	r0, [sp, #240]	; 0xf0
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 800e228:	940e      	str	r4, [sp, #56]	; 0x38
                        arm_nn_mat_mult_kernel_s8_s16(filter_data,
 800e22a:	f000 f8a1 	bl	800e370 <arm_nn_mat_mult_kernel_s8_s16>
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 800e22e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
                        arm_nn_mat_mult_kernel_s8_s16(filter_data,
 800e230:	9017      	str	r0, [sp, #92]	; 0x5c
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 800e232:	429c      	cmp	r4, r3
    q15_t *buffer_a = (q15_t *)ctx->buf;
 800e234:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e236:	9308      	str	r3, [sp, #32]
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 800e238:	f6ff aece 	blt.w	800dfd8 <arm_convolve_s8+0x140>
 800e23c:	e72c      	b.n	800e098 <arm_convolve_s8+0x200>
                while (col_count)
 800e23e:	4635      	mov	r5, r6
 800e240:	e781      	b.n	800e146 <arm_convolve_s8+0x2ae>
                while (col_count)
 800e242:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e244:	462e      	mov	r6, r5
 800e246:	e765      	b.n	800e114 <arm_convolve_s8+0x27c>

0800e248 <arm_convolve_s8_get_buffer_size>:

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims* input_dims,
                                        const cmsis_nn_dims* filter_dims)
{
#if defined(ARM_MATH_DSP)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
 800e248:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 800e24c:	68c0      	ldr	r0, [r0, #12]
 800e24e:	fb02 f000 	mul.w	r0, r2, r0
 800e252:	fb03 f000 	mul.w	r0, r3, r0
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 800e256:	0080      	lsls	r0, r0, #2
 800e258:	4770      	bx	lr
 800e25a:	bf00      	nop

0800e25c <arm_convolve_wrapper_s8>:
                                   const q7_t *filter_data,
                                   const cmsis_nn_dims* bias_dims,
                                   const int32_t *bias_data,
                                   const cmsis_nn_dims* output_dims,
                                   q7_t *output_data)
{
 800e25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e260:	b083      	sub	sp, #12
    if ((conv_params->padding.w == 0) &&
 800e262:	690c      	ldr	r4, [r1, #16]
{
 800e264:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e266:	9600      	str	r6, [sp, #0]
 800e268:	e9dd 7b0d 	ldrd	r7, fp, [sp, #52]	; 0x34
 800e26c:	e9dd a90f 	ldrd	sl, r9, [sp, #60]	; 0x3c
 800e270:	e9dd 6811 	ldrd	r6, r8, [sp, #68]	; 0x44
 800e274:	9001      	str	r0, [sp, #4]
 800e276:	468c      	mov	ip, r1
 800e278:	4615      	mov	r5, r2
 800e27a:	469e      	mov	lr, r3
    if ((conv_params->padding.w == 0) &&
 800e27c:	b90c      	cbnz	r4, 800e282 <arm_convolve_wrapper_s8+0x26>
 800e27e:	694c      	ldr	r4, [r1, #20]
 800e280:	b30c      	cbz	r4, 800e2c6 <arm_convolve_wrapper_s8+0x6a>
                                        bias_dims,
                                        bias_data,
                                        output_dims,
                                        output_data);
    }
    else if ((output_dims->h == 1) &&
 800e282:	6873      	ldr	r3, [r6, #4]
 800e284:	2b01      	cmp	r3, #1
 800e286:	d10d      	bne.n	800e2a4 <arm_convolve_wrapper_s8+0x48>
 800e288:	f8de 3004 	ldr.w	r3, [lr, #4]
 800e28c:	2b01      	cmp	r3, #1
 800e28e:	d109      	bne.n	800e2a4 <arm_convolve_wrapper_s8+0x48>
             (input_dims->h == 1) &&
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2b01      	cmp	r3, #1
 800e294:	d106      	bne.n	800e2a4 <arm_convolve_wrapper_s8+0x48>
             (filter_dims->h == 1) &&
             (output_dims->w % 4 == 0) &&
 800e296:	68b3      	ldr	r3, [r6, #8]
             (filter_dims->h == 1) &&
 800e298:	079b      	lsls	r3, r3, #30
 800e29a:	d103      	bne.n	800e2a4 <arm_convolve_wrapper_s8+0x48>
             (output_dims->w % 4 == 0) &&
 800e29c:	f8de 3000 	ldr.w	r3, [lr]
 800e2a0:	2b01      	cmp	r3, #1
 800e2a2:	d024      	beq.n	800e2ee <arm_convolve_wrapper_s8+0x92>
                                     output_dims,
                                     output_data);
    }
    else
    {
        return arm_convolve_s8(ctx,
 800e2a4:	9b00      	ldr	r3, [sp, #0]
 800e2a6:	9801      	ldr	r0, [sp, #4]
 800e2a8:	930c      	str	r3, [sp, #48]	; 0x30
 800e2aa:	462a      	mov	r2, r5
 800e2ac:	4673      	mov	r3, lr
 800e2ae:	4661      	mov	r1, ip
 800e2b0:	e9cd 6811 	strd	r6, r8, [sp, #68]	; 0x44
 800e2b4:	e9cd a90f 	strd	sl, r9, [sp, #60]	; 0x3c
 800e2b8:	e9cd 7b0d 	strd	r7, fp, [sp, #52]	; 0x34
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
 800e2bc:	b003      	add	sp, #12
 800e2be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_s8(ctx,
 800e2c2:	f7ff bde9 	b.w	800de98 <arm_convolve_s8>
        (conv_params->padding.h == 0) &&
 800e2c6:	68dc      	ldr	r4, [r3, #12]
 800e2c8:	07a4      	lsls	r4, r4, #30
 800e2ca:	d1da      	bne.n	800e282 <arm_convolve_wrapper_s8+0x26>
        (input_dims->c % 4 == 0) &&
 800e2cc:	688c      	ldr	r4, [r1, #8]
 800e2ce:	2c01      	cmp	r4, #1
 800e2d0:	d1d7      	bne.n	800e282 <arm_convolve_wrapper_s8+0x26>
        (conv_params->stride.w == 1) &&
 800e2d2:	68cc      	ldr	r4, [r1, #12]
 800e2d4:	2c01      	cmp	r4, #1
 800e2d6:	d1d4      	bne.n	800e282 <arm_convolve_wrapper_s8+0x26>
        (conv_params->stride.h == 1) &&
 800e2d8:	68bc      	ldr	r4, [r7, #8]
 800e2da:	2c01      	cmp	r4, #1
 800e2dc:	d1d1      	bne.n	800e282 <arm_convolve_wrapper_s8+0x26>
        (filter_dims->w == 1) &&
 800e2de:	687c      	ldr	r4, [r7, #4]
 800e2e0:	2c01      	cmp	r4, #1
 800e2e2:	d1ce      	bne.n	800e282 <arm_convolve_wrapper_s8+0x26>
}
 800e2e4:	b003      	add	sp, #12
 800e2e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1x1_s8_fast(ctx,
 800e2ea:	f7ff bd93 	b.w	800de14 <arm_convolve_1x1_s8_fast>
        return arm_convolve_1_x_n_s8(ctx,
 800e2ee:	9b00      	ldr	r3, [sp, #0]
 800e2f0:	9801      	ldr	r0, [sp, #4]
 800e2f2:	930c      	str	r3, [sp, #48]	; 0x30
 800e2f4:	462a      	mov	r2, r5
 800e2f6:	4673      	mov	r3, lr
 800e2f8:	4661      	mov	r1, ip
 800e2fa:	e9cd 6811 	strd	r6, r8, [sp, #68]	; 0x44
 800e2fe:	e9cd a90f 	strd	sl, r9, [sp, #60]	; 0x3c
 800e302:	e9cd 7b0d 	strd	r7, fp, [sp, #52]	; 0x34
}
 800e306:	b003      	add	sp, #12
 800e308:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1_x_n_s8(ctx,
 800e30c:	f7ff bd68 	b.w	800dde0 <arm_convolve_1_x_n_s8>

0800e310 <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params* conv_params,
                                                const cmsis_nn_dims* input_dims,
                                                const cmsis_nn_dims* filter_dims,
                                                const cmsis_nn_dims* output_dims)
{
 800e310:	468c      	mov	ip, r1
 800e312:	4611      	mov	r1, r2
    if ((conv_params->padding.w == 0) &&
 800e314:	6902      	ldr	r2, [r0, #16]
 800e316:	b90a      	cbnz	r2, 800e31c <arm_convolve_wrapper_s8_get_buffer_size+0xc>
 800e318:	6942      	ldr	r2, [r0, #20]
 800e31a:	b19a      	cbz	r2, 800e344 <arm_convolve_wrapper_s8_get_buffer_size+0x34>
        (filter_dims->w == 1) &&
        (filter_dims->h == 1))
    {
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
    }
    else if ((output_dims->h == 1) &&
 800e31c:	685a      	ldr	r2, [r3, #4]
 800e31e:	2a01      	cmp	r2, #1
 800e320:	d10d      	bne.n	800e33e <arm_convolve_wrapper_s8_get_buffer_size+0x2e>
 800e322:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800e326:	2a01      	cmp	r2, #1
 800e328:	d109      	bne.n	800e33e <arm_convolve_wrapper_s8_get_buffer_size+0x2e>
             (input_dims->h == 1) &&
 800e32a:	684a      	ldr	r2, [r1, #4]
 800e32c:	2a01      	cmp	r2, #1
 800e32e:	d106      	bne.n	800e33e <arm_convolve_wrapper_s8_get_buffer_size+0x2e>
             (filter_dims->h == 1) &&
             (output_dims->w % 4 == 0) &&
 800e330:	689b      	ldr	r3, [r3, #8]
             (filter_dims->h == 1) &&
 800e332:	079b      	lsls	r3, r3, #30
 800e334:	d103      	bne.n	800e33e <arm_convolve_wrapper_s8_get_buffer_size+0x2e>
             (output_dims->w % 4 == 0) &&
 800e336:	f8dc 3000 	ldr.w	r3, [ip]
 800e33a:	2b01      	cmp	r3, #1
 800e33c:	d015      	beq.n	800e36a <arm_convolve_wrapper_s8_get_buffer_size+0x5a>
    {
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
 800e33e:	4660      	mov	r0, ip
 800e340:	f7ff bf82 	b.w	800e248 <arm_convolve_s8_get_buffer_size>
        (input_dims->c % 4 == 0) &&
 800e344:	f8dc 200c 	ldr.w	r2, [ip, #12]
        (conv_params->padding.h == 0) &&
 800e348:	0792      	lsls	r2, r2, #30
 800e34a:	d1e7      	bne.n	800e31c <arm_convolve_wrapper_s8_get_buffer_size+0xc>
        (input_dims->c % 4 == 0) &&
 800e34c:	6882      	ldr	r2, [r0, #8]
 800e34e:	2a01      	cmp	r2, #1
 800e350:	d1e4      	bne.n	800e31c <arm_convolve_wrapper_s8_get_buffer_size+0xc>
        (conv_params->stride.w == 1) &&
 800e352:	68c2      	ldr	r2, [r0, #12]
 800e354:	2a01      	cmp	r2, #1
 800e356:	d1e1      	bne.n	800e31c <arm_convolve_wrapper_s8_get_buffer_size+0xc>
        (conv_params->stride.h == 1) &&
 800e358:	688a      	ldr	r2, [r1, #8]
 800e35a:	2a01      	cmp	r2, #1
 800e35c:	d1de      	bne.n	800e31c <arm_convolve_wrapper_s8_get_buffer_size+0xc>
        (filter_dims->w == 1) &&
 800e35e:	684a      	ldr	r2, [r1, #4]
 800e360:	2a01      	cmp	r2, #1
 800e362:	d1db      	bne.n	800e31c <arm_convolve_wrapper_s8_get_buffer_size+0xc>
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
 800e364:	4660      	mov	r0, ip
 800e366:	f7ff bd95 	b.w	800de94 <arm_convolve_1x1_s8_fast_get_buffer_size>
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
 800e36a:	4660      	mov	r0, ip
 800e36c:	f7ff bd48 	b.w	800de00 <arm_convolve_1_x_n_s8_get_buffer_size>

0800e370 <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
 800e370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e374:	b099      	sub	sp, #100	; 0x64
 800e376:	4683      	mov	fp, r0

    return out_1;

#elif defined(ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
 800e378:	9c28      	ldr	r4, [sp, #160]	; 0xa0
{
 800e37a:	f9bd 0090 	ldrsh.w	r0, [sp, #144]	; 0x90
 800e37e:	9005      	str	r0, [sp, #20]
 800e380:	f9bd 0094 	ldrsh.w	r0, [sp, #148]	; 0x94
 800e384:	9216      	str	r2, [sp, #88]	; 0x58
    q7_t *out_1 = out_0 + output_ch;
 800e386:	4414      	add	r4, r2
{
 800e388:	9006      	str	r0, [sp, #24]
    const int32_t *bias = output_bias;

    uint16_t row_count = output_ch / 2;
    const q7_t *ip_a0 = input_a;
    /* this loop over rows in A */
    while (row_count)
 800e38a:	0852      	lsrs	r2, r2, #1
{
 800e38c:	f8bd 0098 	ldrh.w	r0, [sp, #152]	; 0x98
 800e390:	910d      	str	r1, [sp, #52]	; 0x34
 800e392:	9314      	str	r3, [sp, #80]	; 0x50
 800e394:	900b      	str	r0, [sp, #44]	; 0x2c
    q7_t *out_1 = out_0 + output_ch;
 800e396:	9415      	str	r4, [sp, #84]	; 0x54
    while (row_count)
 800e398:	9217      	str	r2, [sp, #92]	; 0x5c
 800e39a:	f000 81af 	beq.w	800e6fc <arm_nn_mat_mult_kernel_s8_s16+0x38c>
        q31_t ch_0_out_0 = *bias;
        q31_t ch_0_out_1 = *bias++;
        q31_t ch_1_out_0 = *bias;
        q31_t ch_1_out_1 = *bias++;

        uint16_t col_count = num_col_a / 4;
 800e39e:	0885      	lsrs	r5, r0, #2
 800e3a0:	460e      	mov	r6, r1
 800e3a2:	461f      	mov	r7, r3
 800e3a4:	950e      	str	r5, [sp, #56]	; 0x38
 800e3a6:	1e6b      	subs	r3, r5, #1
            ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
            ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

            col_count--;
        } /* while over col_count */
        col_count = num_col_a & 0x3;
 800e3a8:	f000 0503 	and.w	r5, r0, #3
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 800e3ac:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800e3b0:	9927      	ldr	r1, [sp, #156]	; 0x9c
        col_count = num_col_a & 0x3;
 800e3b2:	950a      	str	r5, [sp, #40]	; 0x28
 800e3b4:	3a01      	subs	r2, #1
 800e3b6:	b292      	uxth	r2, r2
 800e3b8:	3110      	adds	r1, #16
 800e3ba:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800e3be:	920f      	str	r2, [sp, #60]	; 0x3c

            ch_0_out_0 += a0 * b0;
            ch_0_out_1 += a0 * b1;
            ch_1_out_0 += a1 * b0;
            ch_1_out_1 += a1 * b1;
            col_count--;
 800e3c0:	1e6a      	subs	r2, r5, #1
 800e3c2:	b292      	uxth	r2, r2
 800e3c4:	9213      	str	r2, [sp, #76]	; 0x4c
 800e3c6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 800e3c8:	9010      	str	r0, [sp, #64]	; 0x40
 800e3ca:	3208      	adds	r2, #8
 800e3cc:	9209      	str	r2, [sp, #36]	; 0x24
 800e3ce:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800e3d0:	3202      	adds	r2, #2
 800e3d2:	9207      	str	r2, [sp, #28]
 800e3d4:	1ca2      	adds	r2, r4, #2
 800e3d6:	9208      	str	r2, [sp, #32]
 800e3d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e3da:	3208      	adds	r2, #8
 800e3dc:	b29b      	uxth	r3, r3
 800e3de:	9202      	str	r2, [sp, #8]
 800e3e0:	463a      	mov	r2, r7
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	3208      	adds	r2, #8
 800e3e6:	9203      	str	r2, [sp, #12]
 800e3e8:	009a      	lsls	r2, r3, #2
 800e3ea:	920c      	str	r2, [sp, #48]	; 0x30
  *in_q15 += 2;
 800e3ec:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800e3f0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800e3f4:	9212      	str	r2, [sp, #72]	; 0x48
 800e3f6:	9311      	str	r3, [sp, #68]	; 0x44
        q31_t ch_0_out_0 = *bias;
 800e3f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
        while (col_count)
 800e3fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        q31_t ch_1_out_0 = *bias;
 800e3fc:	e953 6502 	ldrd	r6, r5, [r3, #-8]
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 800e400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e402:	445b      	add	r3, fp
 800e404:	9304      	str	r3, [sp, #16]
        while (col_count)
 800e406:	2a00      	cmp	r2, #0
 800e408:	f000 8236 	beq.w	800e878 <arm_nn_mat_mult_kernel_s8_s16+0x508>
 800e40c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 800e40e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
        const q15_t *ip_b0 = input_b;
 800e412:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 800e416:	9300      	str	r3, [sp, #0]
 800e418:	445a      	add	r2, fp
 800e41a:	9201      	str	r2, [sp, #4]
        q31_t ch_1_out_1 = *bias++;
 800e41c:	46aa      	mov	sl, r5
        q31_t ch_0_out_1 = *bias++;
 800e41e:	4637      	mov	r7, r6
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 800e420:	f85b 2b04 	ldr.w	r2, [fp], #4
 800e424:	f8de 9000 	ldr.w	r9, [lr]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 800e428:	f8d8 c000 	ldr.w	ip, [r8]
  return (op1 >> op2) | (op1 << (32U - op2));
 800e42c:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800e430:	fa2f f181 	sxtb16	r1, r1
 800e434:	fa2f f282 	sxtb16	r2, r2
  *out2 = (int32_t) (__PKHTB (inAbuf1, inAbuf2, 16));
 800e438:	9800      	ldr	r0, [sp, #0]
 800e43a:	f850 3b04 	ldr.w	r3, [r0], #4
 800e43e:	9000      	str	r0, [sp, #0]
 800e440:	0c08      	lsrs	r0, r1, #16
 800e442:	0400      	lsls	r0, r0, #16
 800e444:	ea40 4012 	orr.w	r0, r0, r2, lsr #16
  *out1 = (int32_t) (__PKHBT (inAbuf2, inAbuf1, 16));
 800e448:	b292      	uxth	r2, r2
 800e44a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  return (op1 >> op2) | (op1 << (32U - op2));
 800e44e:	ea4f 2433 	mov.w	r4, r3, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800e452:	fa2f f484 	sxtb16	r4, r4
 800e456:	fa2f f383 	sxtb16	r3, r3
  *out2 = (int32_t) (__PKHTB (inAbuf1, inAbuf2, 16));
 800e45a:	0c21      	lsrs	r1, r4, #16
 800e45c:	0409      	lsls	r1, r1, #16
 800e45e:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
  *out1 = (int32_t) (__PKHBT (inAbuf2, inAbuf1, 16));
 800e462:	b29b      	uxth	r3, r3
 800e464:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e468:	fb22 6609 	smlad	r6, r2, r9, r6
 800e46c:	fb22 770c 	smlad	r7, r2, ip, r7
 800e470:	fb23 5509 	smlad	r5, r3, r9, r5
 800e474:	fb23 a30c 	smlad	r3, r3, ip, sl
  memcpy(&val, *in_q15, 4);
 800e478:	f8de 2004 	ldr.w	r2, [lr, #4]
  *in_q15 += 2;
 800e47c:	f8d8 a004 	ldr.w	sl, [r8, #4]
 800e480:	f10e 0e08 	add.w	lr, lr, #8
 800e484:	f108 0808 	add.w	r8, r8, #8
 800e488:	fb20 6602 	smlad	r6, r0, r2, r6
 800e48c:	fb20 770a 	smlad	r7, r0, sl, r7
 800e490:	fb21 5502 	smlad	r5, r1, r2, r5
 800e494:	fb21 3a0a 	smlad	sl, r1, sl, r3
        while (col_count)
 800e498:	9b01      	ldr	r3, [sp, #4]
 800e49a:	459b      	cmp	fp, r3
 800e49c:	d1c0      	bne.n	800e420 <arm_nn_mat_mult_kernel_s8_s16+0xb0>
            ip_a1 = read_and_pad(ip_a1, &a11, &a12);
 800e49e:	9b04      	ldr	r3, [sp, #16]
 800e4a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e4a2:	4413      	add	r3, r2
 800e4a4:	9304      	str	r3, [sp, #16]
 800e4a6:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
        while (col_count)
 800e4aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e4ac:	2900      	cmp	r1, #0
 800e4ae:	d03e      	beq.n	800e52e <arm_nn_mat_mult_kernel_s8_s16+0x1be>
            q7_t a0 = *ip_a0++;
 800e4b0:	9801      	ldr	r0, [sp, #4]
            q7_t a1 = *ip_a1++;
 800e4b2:	9904      	ldr	r1, [sp, #16]
            q7_t a0 = *ip_a0++;
 800e4b4:	f990 4000 	ldrsb.w	r4, [r0]
            q7_t a1 = *ip_a1++;
 800e4b8:	f991 1000 	ldrsb.w	r1, [r1]
            q15_t b0 = *ip_b0++;
 800e4bc:	f9b2 0000 	ldrsh.w	r0, [r2]
            ch_0_out_0 += a0 * b0;
 800e4c0:	fb10 6604 	smlabb	r6, r0, r4, r6
            ch_1_out_0 += a1 * b0;
 800e4c4:	fb10 5501 	smlabb	r5, r0, r1, r5
            q15_t b1 = *ip_b1++;
 800e4c8:	f9b3 0000 	ldrsh.w	r0, [r3]
            ch_0_out_1 += a0 * b1;
 800e4cc:	fb10 7704 	smlabb	r7, r0, r4, r7
        while (col_count)
 800e4d0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
            ch_1_out_1 += a1 * b1;
 800e4d2:	fb10 aa01 	smlabb	sl, r0, r1, sl
        while (col_count)
 800e4d6:	b334      	cbz	r4, 800e526 <arm_nn_mat_mult_kernel_s8_s16+0x1b6>
            q7_t a0 = *ip_a0++;
 800e4d8:	9801      	ldr	r0, [sp, #4]
            q7_t a1 = *ip_a1++;
 800e4da:	9904      	ldr	r1, [sp, #16]
            q7_t a0 = *ip_a0++;
 800e4dc:	f990 4001 	ldrsb.w	r4, [r0, #1]
            q7_t a1 = *ip_a1++;
 800e4e0:	f991 1001 	ldrsb.w	r1, [r1, #1]
            q15_t b0 = *ip_b0++;
 800e4e4:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
            ch_1_out_0 += a1 * b0;
 800e4e8:	fb10 5501 	smlabb	r5, r0, r1, r5
            ch_0_out_0 += a0 * b0;
 800e4ec:	fb10 6604 	smlabb	r6, r0, r4, r6
            q15_t b1 = *ip_b1++;
 800e4f0:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
            ch_1_out_1 += a1 * b1;
 800e4f4:	fb10 aa01 	smlabb	sl, r0, r1, sl
        while (col_count)
 800e4f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e4fa:	2902      	cmp	r1, #2
            ch_0_out_1 += a0 * b1;
 800e4fc:	fb10 7704 	smlabb	r7, r0, r4, r7
        while (col_count)
 800e500:	d011      	beq.n	800e526 <arm_nn_mat_mult_kernel_s8_s16+0x1b6>
            q7_t a1 = *ip_a1++;
 800e502:	9904      	ldr	r1, [sp, #16]
            q15_t b0 = *ip_b0++;
 800e504:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
            q7_t a1 = *ip_a1++;
 800e508:	f991 1002 	ldrsb.w	r1, [r1, #2]
            q15_t b1 = *ip_b1++;
 800e50c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
            q7_t a0 = *ip_a0++;
 800e510:	9801      	ldr	r0, [sp, #4]
            ch_1_out_0 += a1 * b0;
 800e512:	fb12 5501 	smlabb	r5, r2, r1, r5
            ch_1_out_1 += a1 * b1;
 800e516:	fb13 aa01 	smlabb	sl, r3, r1, sl
            q7_t a0 = *ip_a0++;
 800e51a:	f990 1002 	ldrsb.w	r1, [r0, #2]
            ch_0_out_0 += a0 * b0;
 800e51e:	fb12 6601 	smlabb	r6, r2, r1, r6
            ch_0_out_1 += a0 * b1;
 800e522:	fb13 7701 	smlabb	r7, r3, r1, r7
            q7_t a0 = *ip_a0++;
 800e526:	9b01      	ldr	r3, [sp, #4]
 800e528:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e52a:	4413      	add	r3, r2
 800e52c:	9301      	str	r3, [sp, #4]
        } /* while over col_count */

        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 800e52e:	9b03      	ldr	r3, [sp, #12]
 800e530:	f853 1c08 	ldr.w	r1, [r3, #-8]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e534:	9b02      	ldr	r3, [sp, #8]
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e536:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e53a:	f853 3c08 	ldr.w	r3, [r3, #-8]
  return arm_nn_divide_by_power_of_two(
 800e53e:	fa06 f000 	lsl.w	r0, r6, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e542:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e546:	2400      	movs	r4, #0
 800e548:	fbc0 2403 	smlal	r2, r4, r0, r3
    result = (int32_t)(mult.long_long >> 31);
 800e54c:	0fd2      	lsrs	r2, r2, #31
  return arm_nn_divide_by_power_of_two(
 800e54e:	2900      	cmp	r1, #0
    result = (int32_t)(mult.long_long >> 31);
 800e550:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
  return arm_nn_divide_by_power_of_two(
 800e554:	dc0d      	bgt.n	800e572 <arm_nn_mat_mult_kernel_s8_s16+0x202>
 800e556:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e558:	2301      	movs	r3, #1
 800e55a:	408b      	lsls	r3, r1
 800e55c:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 800e55e:	ea02 0003 	and.w	r0, r2, r3
    if (result < 0)
 800e562:	410a      	asrs	r2, r1
    q31_t threshold = remainder_mask >> 1;
 800e564:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 800e568:	bf48      	it	mi
 800e56a:	3301      	addmi	r3, #1
    if (remainder > threshold)
 800e56c:	4298      	cmp	r0, r3
        result++;
 800e56e:	bfc8      	it	gt
 800e570:	3201      	addgt	r2, #1
        ch_0_out_0 += out_offset;
 800e572:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e574:	441a      	add	r2, r3
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 800e576:	9b05      	ldr	r3, [sp, #20]
 800e578:	429a      	cmp	r2, r3
 800e57a:	bfb8      	it	lt
 800e57c:	461a      	movlt	r2, r3
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 800e57e:	9b06      	ldr	r3, [sp, #24]
 800e580:	429a      	cmp	r2, r3
 800e582:	bfa8      	it	ge
 800e584:	461a      	movge	r2, r3
        *out_0++ = (q7_t)ch_0_out_0;
 800e586:	9b07      	ldr	r3, [sp, #28]
 800e588:	f803 2c02 	strb.w	r2, [r3, #-2]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 800e58c:	9b03      	ldr	r3, [sp, #12]
 800e58e:	f853 1c08 	ldr.w	r1, [r3, #-8]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e592:	9b02      	ldr	r3, [sp, #8]
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e594:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e598:	f853 3c08 	ldr.w	r3, [r3, #-8]
  return arm_nn_divide_by_power_of_two(
 800e59c:	fa07 f000 	lsl.w	r0, r7, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e5a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e5a4:	2400      	movs	r4, #0
 800e5a6:	fbc0 2403 	smlal	r2, r4, r0, r3
    result = (int32_t)(mult.long_long >> 31);
 800e5aa:	0fd2      	lsrs	r2, r2, #31
  return arm_nn_divide_by_power_of_two(
 800e5ac:	2900      	cmp	r1, #0
    result = (int32_t)(mult.long_long >> 31);
 800e5ae:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
  return arm_nn_divide_by_power_of_two(
 800e5b2:	dc0d      	bgt.n	800e5d0 <arm_nn_mat_mult_kernel_s8_s16+0x260>
 800e5b4:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	408b      	lsls	r3, r1
 800e5ba:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 800e5bc:	ea02 0003 	and.w	r0, r2, r3
    if (result < 0)
 800e5c0:	410a      	asrs	r2, r1
    q31_t threshold = remainder_mask >> 1;
 800e5c2:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 800e5c6:	bf48      	it	mi
 800e5c8:	3301      	addmi	r3, #1
    if (remainder > threshold)
 800e5ca:	4298      	cmp	r0, r3
        result++;
 800e5cc:	bfc8      	it	gt
 800e5ce:	3201      	addgt	r2, #1
        ch_0_out_1 += out_offset;
 800e5d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e5d2:	441a      	add	r2, r3
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 800e5d4:	9b05      	ldr	r3, [sp, #20]
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	bfb8      	it	lt
 800e5da:	461a      	movlt	r2, r3
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 800e5dc:	9b06      	ldr	r3, [sp, #24]
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	bfa8      	it	ge
 800e5e2:	461a      	movge	r2, r3
        *out_1++ = (q7_t)ch_0_out_1;
 800e5e4:	9b08      	ldr	r3, [sp, #32]
 800e5e6:	f803 2c02 	strb.w	r2, [r3, #-2]
        out_mult++;
        out_shift++;

        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 800e5ea:	9b03      	ldr	r3, [sp, #12]
 800e5ec:	f853 1c04 	ldr.w	r1, [r3, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e5f0:	9b02      	ldr	r3, [sp, #8]
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e5f2:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e5f6:	f853 3c04 	ldr.w	r3, [r3, #-4]
  return arm_nn_divide_by_power_of_two(
 800e5fa:	fa05 f000 	lsl.w	r0, r5, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e5fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e602:	2400      	movs	r4, #0
 800e604:	fbc0 2403 	smlal	r2, r4, r0, r3
    result = (int32_t)(mult.long_long >> 31);
 800e608:	0fd2      	lsrs	r2, r2, #31
  return arm_nn_divide_by_power_of_two(
 800e60a:	2900      	cmp	r1, #0
    result = (int32_t)(mult.long_long >> 31);
 800e60c:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
  return arm_nn_divide_by_power_of_two(
 800e610:	dc0d      	bgt.n	800e62e <arm_nn_mat_mult_kernel_s8_s16+0x2be>
 800e612:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e614:	2301      	movs	r3, #1
 800e616:	408b      	lsls	r3, r1
 800e618:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 800e61a:	ea02 0003 	and.w	r0, r2, r3
    if (result < 0)
 800e61e:	410a      	asrs	r2, r1
    q31_t threshold = remainder_mask >> 1;
 800e620:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 800e624:	bf48      	it	mi
 800e626:	3301      	addmi	r3, #1
    if (remainder > threshold)
 800e628:	4298      	cmp	r0, r3
        result++;
 800e62a:	bfc8      	it	gt
 800e62c:	3201      	addgt	r2, #1
        ch_1_out_0 += out_offset;
 800e62e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e630:	441a      	add	r2, r3
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 800e632:	9b05      	ldr	r3, [sp, #20]
 800e634:	429a      	cmp	r2, r3
 800e636:	bfb8      	it	lt
 800e638:	461a      	movlt	r2, r3
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 800e63a:	9b06      	ldr	r3, [sp, #24]
 800e63c:	429a      	cmp	r2, r3
 800e63e:	bfa8      	it	ge
 800e640:	461a      	movge	r2, r3
        *out_0++ = (q7_t)ch_1_out_0;
 800e642:	9b07      	ldr	r3, [sp, #28]
 800e644:	f803 2c01 	strb.w	r2, [r3, #-1]

        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 800e648:	9b03      	ldr	r3, [sp, #12]
 800e64a:	f853 1c04 	ldr.w	r1, [r3, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e64e:	9b02      	ldr	r3, [sp, #8]
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e650:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e654:	f853 3c04 	ldr.w	r3, [r3, #-4]
  return arm_nn_divide_by_power_of_two(
 800e658:	fa0a f000 	lsl.w	r0, sl, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e65c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e660:	2400      	movs	r4, #0
 800e662:	fbc0 2403 	smlal	r2, r4, r0, r3
    result = (int32_t)(mult.long_long >> 31);
 800e666:	0fd2      	lsrs	r2, r2, #31
  return arm_nn_divide_by_power_of_two(
 800e668:	2900      	cmp	r1, #0
    result = (int32_t)(mult.long_long >> 31);
 800e66a:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
  return arm_nn_divide_by_power_of_two(
 800e66e:	dc0d      	bgt.n	800e68c <arm_nn_mat_mult_kernel_s8_s16+0x31c>
 800e670:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e672:	2301      	movs	r3, #1
 800e674:	408b      	lsls	r3, r1
 800e676:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 800e678:	ea02 0003 	and.w	r0, r2, r3
    if (result < 0)
 800e67c:	410a      	asrs	r2, r1
    q31_t threshold = remainder_mask >> 1;
 800e67e:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 800e682:	bf48      	it	mi
 800e684:	3301      	addmi	r3, #1
    if (remainder > threshold)
 800e686:	4298      	cmp	r0, r3
        result++;
 800e688:	bfc8      	it	gt
 800e68a:	3201      	addgt	r2, #1
        ch_1_out_1 += out_offset;
 800e68c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
        *out_1++ = (q7_t)ch_1_out_1;
 800e68e:	9908      	ldr	r1, [sp, #32]
        out_mult++;
        out_shift++;

        /* skip row */
        ip_a0 += num_col_a;
 800e690:	980b      	ldr	r0, [sp, #44]	; 0x2c
        ch_1_out_1 += out_offset;
 800e692:	441a      	add	r2, r3
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 800e694:	9b05      	ldr	r3, [sp, #20]
 800e696:	429a      	cmp	r2, r3
 800e698:	bfb8      	it	lt
 800e69a:	461a      	movlt	r2, r3
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 800e69c:	9b06      	ldr	r3, [sp, #24]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	bfa8      	it	ge
 800e6a2:	461a      	movge	r2, r3
        *out_1++ = (q7_t)ch_1_out_1;
 800e6a4:	f801 2c01 	strb.w	r2, [r1, #-1]
        ip_a0 += num_col_a;
 800e6a8:	9a01      	ldr	r2, [sp, #4]
    while (row_count)
 800e6aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
        ip_a0 += num_col_a;
 800e6ac:	4402      	add	r2, r0
 800e6ae:	4693      	mov	fp, r2
    while (row_count)
 800e6b0:	9a07      	ldr	r2, [sp, #28]
 800e6b2:	3202      	adds	r2, #2
 800e6b4:	9207      	str	r2, [sp, #28]
 800e6b6:	1c8a      	adds	r2, r1, #2
 800e6b8:	9208      	str	r2, [sp, #32]
 800e6ba:	9a02      	ldr	r2, [sp, #8]
 800e6bc:	3208      	adds	r2, #8
 800e6be:	9202      	str	r2, [sp, #8]
 800e6c0:	9a03      	ldr	r2, [sp, #12]
 800e6c2:	3208      	adds	r2, #8
 800e6c4:	9203      	str	r2, [sp, #12]
 800e6c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e6c8:	3308      	adds	r3, #8
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	9309      	str	r3, [sp, #36]	; 0x24
 800e6ce:	f47f ae93 	bne.w	800e3f8 <arm_nn_mat_mult_kernel_s8_s16+0x88>
        out_shift++;
 800e6d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e6d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e6d6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e6da:	9214      	str	r2, [sp, #80]	; 0x50
        out_mult++;
 800e6dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e6de:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e6e2:	9222      	str	r2, [sp, #136]	; 0x88
        *out_0++ = (q7_t)ch_1_out_0;
 800e6e4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800e6e6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800e6ea:	9228      	str	r2, [sp, #160]	; 0xa0
        *out_1++ = (q7_t)ch_1_out_1;
 800e6ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e6ee:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800e6f2:	9215      	str	r2, [sp, #84]	; 0x54
        q31_t ch_1_out_1 = *bias++;
 800e6f4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800e6f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e6fa:	9327      	str	r3, [sp, #156]	; 0x9c
        row_count--;
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
 800e6fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e6fe:	07db      	lsls	r3, r3, #31
 800e700:	f140 80b4 	bpl.w	800e86c <arm_nn_mat_mult_kernel_s8_s16+0x4fc>
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;

        /* load the bias */
        q31_t ch_0_out_0 = *bias;
 800e704:	9b27      	ldr	r3, [sp, #156]	; 0x9c
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 800e706:	9d0d      	ldr	r5, [sp, #52]	; 0x34
        q31_t ch_0_out_0 = *bias;
 800e708:	6818      	ldr	r0, [r3, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 800e70a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        q31_t ch_0_out_1 = *bias++;

        uint16_t col_count = num_col_a >> 2;
        while (col_count)
 800e70c:	ea5f 0993 	movs.w	r9, r3, lsr #2
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 800e710:	eb05 0843 	add.w	r8, r5, r3, lsl #1
        while (col_count)
 800e714:	f000 80b7 	beq.w	800e886 <arm_nn_mat_mult_kernel_s8_s16+0x516>
  *out2 = (int32_t) (__PKHTB (inAbuf1, inAbuf2, 16));
 800e718:	f8df c170 	ldr.w	ip, [pc, #368]	; 800e88c <arm_nn_mat_mult_kernel_s8_s16+0x51c>
 800e71c:	eb0b 0789 	add.w	r7, fp, r9, lsl #2
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 800e720:	4646      	mov	r6, r8
        q31_t ch_0_out_1 = *bias++;
 800e722:	4601      	mov	r1, r0
  memcpy(&val, *in_q7, 4);
 800e724:	f85b 3b04 	ldr.w	r3, [fp], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 800e728:	ea4f 2433 	mov.w	r4, r3, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800e72c:	fa2f f484 	sxtb16	r4, r4
 800e730:	fa2f f383 	sxtb16	r3, r3
  *out2 = (int32_t) (__PKHTB (inAbuf1, inAbuf2, 16));
 800e734:	ea04 020c 	and.w	r2, r4, ip
 800e738:	ea42 4213 	orr.w	r2, r2, r3, lsr #16
  *out1 = (int32_t) (__PKHBT (inAbuf2, inAbuf1, 16));
 800e73c:	b29b      	uxth	r3, r3
 800e73e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e742:	682c      	ldr	r4, [r5, #0]
 800e744:	fb23 0404 	smlad	r4, r3, r4, r0
 800e748:	6830      	ldr	r0, [r6, #0]
 800e74a:	fb23 1300 	smlad	r3, r3, r0, r1
  memcpy(&val, *in_q15, 4);
 800e74e:	6868      	ldr	r0, [r5, #4]
  *in_q15 += 2;
 800e750:	6871      	ldr	r1, [r6, #4]
 800e752:	3508      	adds	r5, #8
 800e754:	3608      	adds	r6, #8
 800e756:	fb22 4000 	smlad	r0, r2, r0, r4
 800e75a:	fb22 3101 	smlad	r1, r2, r1, r3
        while (col_count)
 800e75e:	45bb      	cmp	fp, r7
 800e760:	d1e0      	bne.n	800e724 <arm_nn_mat_mult_kernel_s8_s16+0x3b4>
 800e762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e764:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e768:	930d      	str	r3, [sp, #52]	; 0x34
 800e76a:	eb08 08c9 	add.w	r8, r8, r9, lsl #3
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);

            col_count--;
        }
        col_count = num_col_a & 0x3;
        while (col_count)
 800e76e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e770:	f013 0303 	ands.w	r3, r3, #3
 800e774:	d020      	beq.n	800e7b8 <arm_nn_mat_mult_kernel_s8_s16+0x448>
        {
            q7_t a0 = *ip_a0++;
            q15_t b0 = *ip_b0++;
            q15_t b1 = *ip_b1++;

            ch_0_out_0 += a0 * b0;
 800e776:	9d0d      	ldr	r5, [sp, #52]	; 0x34
            q7_t a0 = *ip_a0++;
 800e778:	f997 2000 	ldrsb.w	r2, [r7]
            ch_0_out_0 += a0 * b0;
 800e77c:	882c      	ldrh	r4, [r5, #0]
            ch_0_out_1 += a0 * b1;
            col_count--;
 800e77e:	3b01      	subs	r3, #1
            ch_0_out_0 += a0 * b0;
 800e780:	fb14 0002 	smlabb	r0, r4, r2, r0
            ch_0_out_1 += a0 * b1;
 800e784:	f8b8 4000 	ldrh.w	r4, [r8]
            col_count--;
 800e788:	b29b      	uxth	r3, r3
            ch_0_out_1 += a0 * b1;
 800e78a:	fb14 1102 	smlabb	r1, r4, r2, r1
        while (col_count)
 800e78e:	b19b      	cbz	r3, 800e7b8 <arm_nn_mat_mult_kernel_s8_s16+0x448>
            q7_t a0 = *ip_a0++;
 800e790:	f997 2001 	ldrsb.w	r2, [r7, #1]
            ch_0_out_0 += a0 * b0;
 800e794:	886c      	ldrh	r4, [r5, #2]
 800e796:	fb14 0002 	smlabb	r0, r4, r2, r0
            ch_0_out_1 += a0 * b1;
 800e79a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
        while (col_count)
 800e79e:	2b01      	cmp	r3, #1
            ch_0_out_1 += a0 * b1;
 800e7a0:	fb14 1102 	smlabb	r1, r4, r2, r1
        while (col_count)
 800e7a4:	d008      	beq.n	800e7b8 <arm_nn_mat_mult_kernel_s8_s16+0x448>
            q7_t a0 = *ip_a0++;
 800e7a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
            ch_0_out_0 += a0 * b0;
 800e7aa:	88aa      	ldrh	r2, [r5, #4]
 800e7ac:	fb12 0003 	smlabb	r0, r2, r3, r0
            ch_0_out_1 += a0 * b1;
 800e7b0:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800e7b4:	fb12 1103 	smlabb	r1, r2, r3, r1
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 800e7b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e7ba:	681c      	ldr	r4, [r3, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e7bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e7be:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e7c2:	681b      	ldr	r3, [r3, #0]
  return arm_nn_divide_by_power_of_two(
 800e7c4:	4090      	lsls	r0, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e7c6:	2500      	movs	r5, #0
 800e7c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e7cc:	fbc0 2503 	smlal	r2, r5, r0, r3
    result = (int32_t)(mult.long_long >> 31);
 800e7d0:	0fd3      	lsrs	r3, r2, #31
  return arm_nn_divide_by_power_of_two(
 800e7d2:	2c00      	cmp	r4, #0
    result = (int32_t)(mult.long_long >> 31);
 800e7d4:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
  return arm_nn_divide_by_power_of_two(
 800e7d8:	dc0d      	bgt.n	800e7f6 <arm_nn_mat_mult_kernel_s8_s16+0x486>
 800e7da:	4264      	negs	r4, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e7dc:	2201      	movs	r2, #1
 800e7de:	40a2      	lsls	r2, r4
 800e7e0:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
 800e7e2:	ea03 0002 	and.w	r0, r3, r2
    if (result < 0)
 800e7e6:	4123      	asrs	r3, r4
    q31_t threshold = remainder_mask >> 1;
 800e7e8:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
 800e7ec:	bf48      	it	mi
 800e7ee:	3201      	addmi	r2, #1
    if (remainder > threshold)
 800e7f0:	4290      	cmp	r0, r2
        result++;
 800e7f2:	bfc8      	it	gt
 800e7f4:	3301      	addgt	r3, #1
        ch_0_out_0 += out_offset;
 800e7f6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 800e7f8:	9806      	ldr	r0, [sp, #24]
        ch_0_out_0 += out_offset;
 800e7fa:	4413      	add	r3, r2
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 800e7fc:	9a05      	ldr	r2, [sp, #20]
 800e7fe:	4293      	cmp	r3, r2
 800e800:	bfb8      	it	lt
 800e802:	4613      	movlt	r3, r2
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 800e804:	4283      	cmp	r3, r0
        *out_0++ = (q7_t)ch_0_out_0;
 800e806:	9a28      	ldr	r2, [sp, #160]	; 0xa0
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 800e808:	bfa8      	it	ge
 800e80a:	4603      	movge	r3, r0
        *out_0++ = (q7_t)ch_0_out_0;
 800e80c:	f802 3b01 	strb.w	r3, [r2], #1

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 800e810:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e812:	6818      	ldr	r0, [r3, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e814:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e816:	681d      	ldr	r5, [r3, #0]
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e818:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  return arm_nn_divide_by_power_of_two(
 800e81c:	4099      	lsls	r1, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e81e:	2400      	movs	r4, #0
 800e820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e824:	fbc1 3405 	smlal	r3, r4, r1, r5
    result = (int32_t)(mult.long_long >> 31);
 800e828:	0fdb      	lsrs	r3, r3, #31
  return arm_nn_divide_by_power_of_two(
 800e82a:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
 800e82c:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
  return arm_nn_divide_by_power_of_two(
 800e830:	dc0d      	bgt.n	800e84e <arm_nn_mat_mult_kernel_s8_s16+0x4de>
 800e832:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e834:	2101      	movs	r1, #1
 800e836:	4081      	lsls	r1, r0
 800e838:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 800e83a:	ea03 0401 	and.w	r4, r3, r1
    if (result < 0)
 800e83e:	4103      	asrs	r3, r0
    q31_t threshold = remainder_mask >> 1;
 800e840:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 800e844:	bf48      	it	mi
 800e846:	3101      	addmi	r1, #1
    if (remainder > threshold)
 800e848:	428c      	cmp	r4, r1
        result++;
 800e84a:	bfc8      	it	gt
 800e84c:	3301      	addgt	r3, #1
        ch_0_out_1 += out_offset;
 800e84e:	9923      	ldr	r1, [sp, #140]	; 0x8c
        *out_0++ = (q7_t)ch_0_out_0;
 800e850:	9228      	str	r2, [sp, #160]	; 0xa0
        ch_0_out_1 += out_offset;
 800e852:	440b      	add	r3, r1
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 800e854:	9905      	ldr	r1, [sp, #20]
 800e856:	4299      	cmp	r1, r3
 800e858:	bfb8      	it	lt
 800e85a:	4619      	movlt	r1, r3
 800e85c:	460b      	mov	r3, r1
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 800e85e:	9906      	ldr	r1, [sp, #24]
 800e860:	4299      	cmp	r1, r3
 800e862:	bfa8      	it	ge
 800e864:	4619      	movge	r1, r3
 800e866:	460b      	mov	r3, r1
        *out_1++ = (q7_t)ch_0_out_1;
 800e868:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e86a:	700b      	strb	r3, [r1, #0]
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
 800e86c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e86e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e870:	4418      	add	r0, r3
 800e872:	b019      	add	sp, #100	; 0x64
 800e874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 800e878:	9b10      	ldr	r3, [sp, #64]	; 0x40
        const q15_t *ip_b0 = input_b;
 800e87a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        while (col_count)
 800e87c:	f8cd b004 	str.w	fp, [sp, #4]
        q31_t ch_1_out_1 = *bias++;
 800e880:	46aa      	mov	sl, r5
        q31_t ch_0_out_1 = *bias++;
 800e882:	4637      	mov	r7, r6
 800e884:	e611      	b.n	800e4aa <arm_nn_mat_mult_kernel_s8_s16+0x13a>
        while (col_count)
 800e886:	465f      	mov	r7, fp
        q31_t ch_0_out_1 = *bias++;
 800e888:	4601      	mov	r1, r0
 800e88a:	e770      	b.n	800e76e <arm_nn_mat_mult_kernel_s8_s16+0x3fe>
 800e88c:	ffff0000 	.word	0xffff0000

0800e890 <arm_fully_connected_s8>:
                       const q7_t *kernel,
                       const cmsis_nn_dims *bias_dims,
                       const int32_t *bias,
                       const cmsis_nn_dims *output_dims,
                       q7_t *output)
{
 800e890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 800e894:	681d      	ldr	r5, [r3, #0]
{
 800e896:	b08d      	sub	sp, #52	; 0x34
 800e898:	4690      	mov	r8, r2
 800e89a:	e9dd 6a16 	ldrd	r6, sl, [sp, #88]	; 0x58
 800e89e:	e9dd 291a 	ldrd	r2, r9, [sp, #104]	; 0x68
 800e8a2:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 800e8a6:	9f1c      	ldr	r7, [sp, #112]	; 0x70

    while (batch_cnt)
 800e8a8:	b355      	cbz	r5, 800e900 <arm_fully_connected_s8+0x70>
 800e8aa:	460c      	mov	r4, r1
                                 fc_params->filter_offset,
                                 fc_params->output_offset,
                                 quant_params->multiplier,
                                 quant_params->shift,
                                 filter_dims->n, /* col_dim or accum_depth */
                                 output_dims->c, /* row_dim or output_depth */
 800e8ac:	f8d9 300c 	ldr.w	r3, [r9, #12]
                                 filter_dims->n, /* col_dim or accum_depth */
 800e8b0:	f8da 1000 	ldr.w	r1, [sl]
                                 output_dims->c, /* row_dim or output_depth */
 800e8b4:	950b      	str	r5, [sp, #44]	; 0x2c
        arm_nn_vec_mat_mult_t_s8(input,
 800e8b6:	e9d4 0c03 	ldrd	r0, ip, [r4, #12]
 800e8ba:	9306      	str	r3, [sp, #24]
 800e8bc:	f8d8 e004 	ldr.w	lr, [r8, #4]
 800e8c0:	9105      	str	r1, [sp, #20]
 800e8c2:	f8cd c020 	str.w	ip, [sp, #32]
 800e8c6:	f8d8 1000 	ldr.w	r1, [r8]
 800e8ca:	68a3      	ldr	r3, [r4, #8]
 800e8cc:	9007      	str	r0, [sp, #28]
 800e8ce:	f8cd e010 	str.w	lr, [sp, #16]
 800e8d2:	e9d4 5000 	ldrd	r5, r0, [r4]
 800e8d6:	e9cd 3102 	strd	r3, r1, [sp, #8]
 800e8da:	9001      	str	r0, [sp, #4]
 800e8dc:	463b      	mov	r3, r7
 800e8de:	4630      	mov	r0, r6
 800e8e0:	4659      	mov	r1, fp
 800e8e2:	9500      	str	r5, [sp, #0]
 800e8e4:	921a      	str	r2, [sp, #104]	; 0x68
 800e8e6:	f000 fcdb 	bl	800f2a0 <arm_nn_vec_mat_mult_t_s8>
    while (batch_cnt)
 800e8ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                                 fc_params->activation.min,
                                 fc_params->activation.max);
        input += filter_dims->n;
 800e8ec:	f8da 1000 	ldr.w	r1, [sl]
        output += output_dims->c;
 800e8f0:	f8d9 300c 	ldr.w	r3, [r9, #12]
    while (batch_cnt)
 800e8f4:	3a01      	subs	r2, #1
 800e8f6:	920b      	str	r2, [sp, #44]	; 0x2c
        input += filter_dims->n;
 800e8f8:	440e      	add	r6, r1
    while (batch_cnt)
 800e8fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
        output += output_dims->c;
 800e8fc:	441f      	add	r7, r3
    while (batch_cnt)
 800e8fe:	d1da      	bne.n	800e8b6 <arm_fully_connected_s8+0x26>
        batch_cnt--;
    }
    return (ARM_MATH_SUCCESS);
}
 800e900:	2000      	movs	r0, #0
 800e902:	b00d      	add	sp, #52	; 0x34
 800e904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e908 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
    (void)filter_dims;
    return 0;
}
 800e908:	2000      	movs	r0, #0
 800e90a:	4770      	bx	lr

0800e90c <arm_nn_mat_mult_nt_t_s8>:
                                   const int32_t rhs_cols,
                                   const int32_t lhs_offset,
                                   const int32_t dst_offset,
                                   const int32_t activation_min,
                                   const int32_t activation_max)
{
 800e90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e910:	b09f      	sub	sp, #124	; 0x7c
 800e912:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
 800e916:	9016      	str	r0, [sp, #88]	; 0x58
#if defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800e918:	982b      	ldr	r0, [sp, #172]	; 0xac
{
 800e91a:	f8dd a0b0 	ldr.w	sl, [sp, #176]	; 0xb0
 800e91e:	911c      	str	r1, [sp, #112]	; 0x70
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800e920:	1e42      	subs	r2, r0, #1
 800e922:	2a00      	cmp	r2, #0
 800e924:	9219      	str	r2, [sp, #100]	; 0x64
 800e926:	f340 81fa 	ble.w	800ed1e <arm_nn_mat_mult_nt_t_s8+0x412>
 800e92a:	4604      	mov	r4, r0
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
 800e92c:	982a      	ldr	r0, [sp, #168]	; 0xa8

        rhs += 2 * rhs_cols;
        dst += 2;
    }

    if (rhs_rows % 2)
 800e92e:	910b      	str	r1, [sp, #44]	; 0x2c
 800e930:	461d      	mov	r5, r3
 800e932:	f1aa 0310 	sub.w	r3, sl, #16
        int32_t lhs_rows_idx = lhs_rows >> 1;
 800e936:	1042      	asrs	r2, r0, #1
 800e938:	f023 030f 	bic.w	r3, r3, #15
 800e93c:	f103 0010 	add.w	r0, r3, #16
 800e940:	fb04 f302 	mul.w	r3, r4, r2
 800e944:	eb05 0443 	add.w	r4, r5, r3, lsl #1
 800e948:	941a      	str	r4, [sp, #104]	; 0x68
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800e94a:	2400      	movs	r4, #0
 800e94c:	9411      	str	r4, [sp, #68]	; 0x44
 800e94e:	9c2b      	ldr	r4, [sp, #172]	; 0xac
        int32_t lhs_rows_idx = lhs_rows >> 1;
 800e950:	9218      	str	r2, [sp, #96]	; 0x60
 800e952:	1c63      	adds	r3, r4, #1
 800e954:	462a      	mov	r2, r5
 800e956:	441a      	add	r2, r3
 800e958:	921b      	str	r2, [sp, #108]	; 0x6c
 800e95a:	f06f 0203 	mvn.w	r2, #3
 800e95e:	eba2 020a 	sub.w	r2, r2, sl
 800e962:	921d      	str	r2, [sp, #116]	; 0x74
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800e964:	f1aa 020f 	sub.w	r2, sl, #15
 800e968:	920c      	str	r2, [sp, #48]	; 0x30
        if (lhs_rows % 2)
 800e96a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800e96c:	9008      	str	r0, [sp, #32]
 800e96e:	f002 0201 	and.w	r2, r2, #1
 800e972:	f10a 30ff 	add.w	r0, sl, #4294967295
 800e976:	9217      	str	r2, [sp, #92]	; 0x5c
        rhs += 2 * rhs_cols;
 800e978:	ea4f 024a 	mov.w	r2, sl, lsl #1
 800e97c:	9215      	str	r2, [sp, #84]	; 0x54
 800e97e:	180a      	adds	r2, r1, r0
 800e980:	9212      	str	r2, [sp, #72]	; 0x48
 800e982:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800e984:	9010      	str	r0, [sp, #64]	; 0x40
 800e986:	3204      	adds	r2, #4
 800e988:	9204      	str	r2, [sp, #16]
 800e98a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800e98c:	3204      	adds	r2, #4
 800e98e:	9203      	str	r2, [sp, #12]
 800e990:	0062      	lsls	r2, r4, #1
 800e992:	920d      	str	r2, [sp, #52]	; 0x34
 800e994:	46d3      	mov	fp, sl
 800e996:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e998:	9a11      	ldr	r2, [sp, #68]	; 0x44
        for (int32_t x = 0; x < rhs_cols; ++x)
 800e99a:	f1bb 0f00 	cmp.w	fp, #0
 800e99e:	4413      	add	r3, r2
 800e9a0:	9305      	str	r3, [sp, #20]
 800e9a2:	f340 8472 	ble.w	800f28a <arm_nn_mat_mult_nt_t_s8+0x97e>
 800e9a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9a8:	9d12      	ldr	r5, [sp, #72]	; 0x48
        q31_t lhs_offset_contribution1 = 0;
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	3b01      	subs	r3, #1
        for (int32_t x = 0; x < rhs_cols; ++x)
 800e9ae:	4628      	mov	r0, r5
        q31_t lhs_offset_contribution0 = 0;
 800e9b0:	4611      	mov	r1, r2
            lhs_offset_contribution0 += rhs[x];
 800e9b2:	f913 4f01 	ldrsb.w	r4, [r3, #1]!
 800e9b6:	4421      	add	r1, r4
            lhs_offset_contribution1 += rhs[x + rhs_cols];
 800e9b8:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
        for (int32_t x = 0; x < rhs_cols; ++x)
 800e9bc:	429d      	cmp	r5, r3
            lhs_offset_contribution1 += rhs[x + rhs_cols];
 800e9be:	4422      	add	r2, r4
        for (int32_t x = 0; x < rhs_cols; ++x)
 800e9c0:	d1f7      	bne.n	800e9b2 <arm_nn_mat_mult_nt_t_s8+0xa6>
        lhs_offset_contribution0 *= lhs_offset;
 800e9c2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e9c4:	fb01 f303 	mul.w	r3, r1, r3
 800e9c8:	9309      	str	r3, [sp, #36]	; 0x24
        lhs_offset_contribution1 *= lhs_offset;
 800e9ca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e9cc:	fb02 f303 	mul.w	r3, r2, r3
 800e9d0:	930a      	str	r3, [sp, #40]	; 0x28
        if (bias)
 800e9d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e9d4:	b15a      	cbz	r2, 800e9ee <arm_nn_mat_mult_nt_t_s8+0xe2>
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 800e9d6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e9d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e9da:	1d13      	adds	r3, r2, #4
 800e9dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e9e0:	4418      	add	r0, r3
            lhs_offset_contribution0 += bias[rhs_rows_idx];
 800e9e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e9e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 800e9e8:	900a      	str	r0, [sp, #40]	; 0x28
            lhs_offset_contribution0 += bias[rhs_rows_idx];
 800e9ea:	441a      	add	r2, r3
 800e9ec:	9209      	str	r2, [sp, #36]	; 0x24
        while (lhs_rows_idx)
 800e9ee:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	f000 8448 	beq.w	800f286 <arm_nn_mat_mult_nt_t_s8+0x97a>
 800e9f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e9f8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  *in_q7 += 4;
 800e9fa:	9306      	str	r3, [sp, #24]
 800e9fc:	440a      	add	r2, r1
 800e9fe:	9207      	str	r2, [sp, #28]
 800ea00:	9908      	ldr	r1, [sp, #32]
 800ea02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        const q7_t *lhs_ptr = &lhs[0];
 800ea04:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800ea06:	f10b 0304 	add.w	r3, fp, #4
 800ea0a:	440a      	add	r2, r1
 800ea0c:	9300      	str	r3, [sp, #0]
 800ea0e:	f1ab 0c04 	sub.w	ip, fp, #4
 800ea12:	f10b 0308 	add.w	r3, fp, #8
 800ea16:	920e      	str	r2, [sp, #56]	; 0x38
 800ea18:	9301      	str	r3, [sp, #4]
 800ea1a:	46e2      	mov	sl, ip
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800ea1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	f340 8237 	ble.w	800ee92 <arm_nn_mat_mult_nt_t_s8+0x586>
 800ea24:	9b08      	ldr	r3, [sp, #32]
            q31_t res10 = lhs_offset_contribution0;
 800ea26:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ea28:	18f3      	adds	r3, r6, r3
 800ea2a:	9302      	str	r3, [sp, #8]
            q31_t res11 = lhs_offset_contribution1;
 800ea2c:	e9dd 370a 	ldrd	r3, r7, [sp, #40]	; 0x28
            q31_t res10 = lhs_offset_contribution0;
 800ea30:	462a      	mov	r2, r5
            q31_t res11 = lhs_offset_contribution1;
 800ea32:	4619      	mov	r1, r3
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800ea34:	6838      	ldr	r0, [r7, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800ea36:	fa2f fe80 	sxtb16	lr, r0
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800ea3a:	f8d6 c000 	ldr.w	ip, [r6]
 800ea3e:	fa2f f88c 	sxtb16	r8, ip
                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 800ea42:	f857 400b 	ldr.w	r4, [r7, fp]
	__ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 800ea46:	fa2f f090 	sxtb16	r0, r0, ror #8
 800ea4a:	fa2f fc9c 	sxtb16	ip, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ea4e:	fb28 550e 	smlad	r5, r8, lr, r5
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800ea52:	fa2f f984 	sxtb16	r9, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ea56:	fb2c 5500 	smlad	r5, ip, r0, r5
 800ea5a:	fa2f f494 	sxtb16	r4, r4, ror #8
 800ea5e:	fb28 3809 	smlad	r8, r8, r9, r3
 800ea62:	fb2c 8c04 	smlad	ip, ip, r4, r8
                val0  = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 800ea66:	f856 300b 	ldr.w	r3, [r6, fp]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800ea6a:	fa2f f883 	sxtb16	r8, r3
	__ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 800ea6e:	fa2f f393 	sxtb16	r3, r3, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ea72:	fb28 2e0e 	smlad	lr, r8, lr, r2
 800ea76:	fb28 1809 	smlad	r8, r8, r9, r1
 800ea7a:	fb23 ee00 	smlad	lr, r3, r0, lr
                val1  = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	fb23 8104 	smlad	r1, r3, r4, r8
                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 800ea84:	9b00      	ldr	r3, [sp, #0]
 800ea86:	58fb      	ldr	r3, [r7, r3]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800ea88:	fa2f f480 	sxtb16	r4, r0
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800ea8c:	6872      	ldr	r2, [r6, #4]
 800ea8e:	fa2f f882 	sxtb16	r8, r2
	__ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 800ea92:	fa2f f090 	sxtb16	r0, r0, ror #8
 800ea96:	fa2f f292 	sxtb16	r2, r2, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ea9a:	fb28 5504 	smlad	r5, r8, r4, r5
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800ea9e:	fa2f f983 	sxtb16	r9, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800eaa2:	fb22 5500 	smlad	r5, r2, r0, r5
 800eaa6:	fa2f f393 	sxtb16	r3, r3, ror #8
 800eaaa:	fb28 c809 	smlad	r8, r8, r9, ip
 800eaae:	fb22 8c03 	smlad	ip, r2, r3, r8
                val0  = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 800eab2:	9a00      	ldr	r2, [sp, #0]
 800eab4:	58b2      	ldr	r2, [r6, r2]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800eab6:	fa2f f882 	sxtb16	r8, r2
	__ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 800eaba:	fa2f f292 	sxtb16	r2, r2, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800eabe:	fb28 e404 	smlad	r4, r8, r4, lr
 800eac2:	fb28 1809 	smlad	r8, r8, r9, r1
 800eac6:	fb22 4400 	smlad	r4, r2, r0, r4
                val1  = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800eaca:	68b9      	ldr	r1, [r7, #8]
 800eacc:	fb22 8203 	smlad	r2, r2, r3, r8
                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 800ead0:	9b01      	ldr	r3, [sp, #4]
 800ead2:	58fb      	ldr	r3, [r7, r3]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800ead4:	fa2f f881 	sxtb16	r8, r1
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800ead8:	68b0      	ldr	r0, [r6, #8]
 800eada:	fa2f fe80 	sxtb16	lr, r0
	__ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 800eade:	fa2f f191 	sxtb16	r1, r1, ror #8
 800eae2:	fa2f f090 	sxtb16	r0, r0, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800eae6:	fb2e 5508 	smlad	r5, lr, r8, r5
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800eaea:	fa2f f983 	sxtb16	r9, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800eaee:	fb20 5501 	smlad	r5, r0, r1, r5
 800eaf2:	fa2f f393 	sxtb16	r3, r3, ror #8
 800eaf6:	fb2e ce09 	smlad	lr, lr, r9, ip
 800eafa:	fb20 ee03 	smlad	lr, r0, r3, lr
                val0  = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 800eafe:	9801      	ldr	r0, [sp, #4]
 800eb00:	5830      	ldr	r0, [r6, r0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800eb02:	fa2f fc80 	sxtb16	ip, r0
	__ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 800eb06:	fa2f f090 	sxtb16	r0, r0, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800eb0a:	fb2c 4808 	smlad	r8, ip, r8, r4
 800eb0e:	fb2c 2409 	smlad	r4, ip, r9, r2
 800eb12:	fb20 8c01 	smlad	ip, r0, r1, r8
  memcpy(&val, *in_q7, 4);
 800eb16:	68fa      	ldr	r2, [r7, #12]
  *in_q7 += 4;
 800eb18:	3710      	adds	r7, #16
 800eb1a:	fb20 4003 	smlad	r0, r0, r3, r4
                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 800eb1e:	f857 400a 	ldr.w	r4, [r7, sl]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800eb22:	fa2f f882 	sxtb16	r8, r2
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800eb26:	68f3      	ldr	r3, [r6, #12]
 800eb28:	3610      	adds	r6, #16
 800eb2a:	fa2f f183 	sxtb16	r1, r3
	__ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 800eb2e:	fa2f f292 	sxtb16	r2, r2, ror #8
 800eb32:	fa2f f393 	sxtb16	r3, r3, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800eb36:	fb21 5508 	smlad	r5, r1, r8, r5
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800eb3a:	fa2f f984 	sxtb16	r9, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800eb3e:	fb23 5502 	smlad	r5, r3, r2, r5
 800eb42:	fa2f f494 	sxtb16	r4, r4, ror #8
 800eb46:	fb21 e109 	smlad	r1, r1, r9, lr
 800eb4a:	fb23 1304 	smlad	r3, r3, r4, r1
                val0  = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 800eb4e:	f856 100a 	ldr.w	r1, [r6, sl]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800eb52:	fa2f fe81 	sxtb16	lr, r1
	__ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 800eb56:	fa2f f191 	sxtb16	r1, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800eb5a:	fb2e c808 	smlad	r8, lr, r8, ip
 800eb5e:	fb2e 0e09 	smlad	lr, lr, r9, r0
 800eb62:	fb21 8202 	smlad	r2, r1, r2, r8
 800eb66:	fb21 e104 	smlad	r1, r1, r4, lr
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800eb6a:	9802      	ldr	r0, [sp, #8]
 800eb6c:	4286      	cmp	r6, r0
 800eb6e:	f47f af61 	bne.w	800ea34 <arm_nn_mat_mult_nt_t_s8+0x128>
 800eb72:	980e      	ldr	r0, [sp, #56]	; 0x38
 800eb74:	f8dd 8020 	ldr.w	r8, [sp, #32]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800eb78:	45d8      	cmp	r8, fp
 800eb7a:	da1e      	bge.n	800ebba <arm_nn_mat_mult_nt_t_s8+0x2ae>
 800eb7c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800eb7e:	eb00 0e04 	add.w	lr, r0, r4
 800eb82:	9c02      	ldr	r4, [sp, #8]
 800eb84:	3801      	subs	r0, #1
 800eb86:	ebae 0e08 	sub.w	lr, lr, r8
 800eb8a:	3c01      	subs	r4, #1
                q7_t rhs_value0 = rhs_ptr[0];
 800eb8c:	f910 cf01 	ldrsb.w	ip, [r0, #1]!
                q7_t lhs_value  = lhs_ptr[0];
 800eb90:	f914 6f01 	ldrsb.w	r6, [r4, #1]!
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 800eb94:	f910 700b 	ldrsb.w	r7, [r0, fp]
                res00 += lhs_value * rhs_value0;
 800eb98:	fb16 550c 	smlabb	r5, r6, ip, r5
                res01 += lhs_value * rhs_value1;
 800eb9c:	fb16 3307 	smlabb	r3, r6, r7, r3
                lhs_value  = lhs_ptr[rhs_cols];
 800eba0:	f914 600b 	ldrsb.w	r6, [r4, fp]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800eba4:	4586      	cmp	lr, r0
                res10 += lhs_value * rhs_value0;
 800eba6:	fb1c 2206 	smlabb	r2, ip, r6, r2
                res11 += lhs_value * rhs_value1;
 800ebaa:	fb17 1106 	smlabb	r1, r7, r6, r1
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ebae:	d1ed      	bne.n	800eb8c <arm_nn_mat_mult_nt_t_s8+0x280>
                ++lhs_ptr;
 800ebb0:	9802      	ldr	r0, [sp, #8]
 800ebb2:	ebab 0808 	sub.w	r8, fp, r8
 800ebb6:	4440      	add	r0, r8
 800ebb8:	9002      	str	r0, [sp, #8]
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx],     dst_shifts[rhs_rows_idx]);
 800ebba:	9803      	ldr	r0, [sp, #12]
 800ebbc:	9c04      	ldr	r4, [sp, #16]
 800ebbe:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800ebc2:	f854 6c04 	ldr.w	r6, [r4, #-4]
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800ebc6:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
  return arm_nn_divide_by_power_of_two(
 800ebca:	40a5      	lsls	r5, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800ebcc:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 800ebd0:	f04f 0c00 	mov.w	ip, #0
 800ebd4:	fbc5 7c06 	smlal	r7, ip, r5, r6
    result = (int32_t)(mult.long_long >> 31);
 800ebd8:	0fff      	lsrs	r7, r7, #31
  return arm_nn_divide_by_power_of_two(
 800ebda:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
 800ebdc:	ea47 084c 	orr.w	r8, r7, ip, lsl #1
  return arm_nn_divide_by_power_of_two(
 800ebe0:	f340 8127 	ble.w	800ee32 <arm_nn_mat_mult_nt_t_s8+0x526>
    if (result < 0)
 800ebe4:	f1b8 0f00 	cmp.w	r8, #0
 800ebe8:	f2c0 8146 	blt.w	800ee78 <arm_nn_mat_mult_nt_t_s8+0x56c>
  return arm_nn_divide_by_power_of_two(
 800ebec:	fa02 f404 	lsl.w	r4, r2, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800ebf0:	2000      	movs	r0, #0
 800ebf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ebf6:	fbc6 2004 	smlal	r2, r0, r6, r4
    result = (int32_t)(mult.long_long >> 31);
 800ebfa:	0fd2      	lsrs	r2, r2, #31
 800ebfc:	f04f 0c00 	mov.w	ip, #0
 800ec00:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
    q31_t threshold = remainder_mask >> 1;
 800ec04:	46e1      	mov	r9, ip
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 800ec06:	9803      	ldr	r0, [sp, #12]
 800ec08:	6805      	ldr	r5, [r0, #0]
 800ec0a:	9804      	ldr	r0, [sp, #16]
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800ec0c:	ea25 74e5 	bic.w	r4, r5, r5, asr #31
 800ec10:	6806      	ldr	r6, [r0, #0]
  return arm_nn_divide_by_power_of_two(
 800ec12:	40a3      	lsls	r3, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800ec14:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ec18:	2700      	movs	r7, #0
 800ec1a:	fbc3 0706 	smlal	r0, r7, r3, r6
    result = (int32_t)(mult.long_long >> 31);
 800ec1e:	0fc0      	lsrs	r0, r0, #31
  return arm_nn_divide_by_power_of_two(
 800ec20:	2d00      	cmp	r5, #0
    result = (int32_t)(mult.long_long >> 31);
 800ec22:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
  return arm_nn_divide_by_power_of_two(
 800ec26:	f340 80e3 	ble.w	800edf0 <arm_nn_mat_mult_nt_t_s8+0x4e4>
 800ec2a:	fa01 f404 	lsl.w	r4, r1, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800ec2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ec32:	2100      	movs	r1, #0
 800ec34:	fbc6 3104 	smlal	r3, r1, r6, r4
    result = (int32_t)(mult.long_long >> 31);
 800ec38:	0fdb      	lsrs	r3, r3, #31
 800ec3a:	2500      	movs	r5, #0
 800ec3c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    q31_t threshold = remainder_mask >> 1;
 800ec40:	462f      	mov	r7, r5
    if (result < 0)
 800ec42:	2a00      	cmp	r2, #0
        threshold++;
 800ec44:	bfb8      	it	lt
 800ec46:	f109 0901 	addlt.w	r9, r9, #1
    if (remainder > threshold)
 800ec4a:	45e1      	cmp	r9, ip
        result++;
 800ec4c:	bfb8      	it	lt
 800ec4e:	3201      	addlt	r2, #1
    if (result < 0)
 800ec50:	2b00      	cmp	r3, #0
        threshold++;
 800ec52:	bfb8      	it	lt
 800ec54:	3701      	addlt	r7, #1
            res01 += dst_offset;
 800ec56:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
            res00 += dst_offset;
 800ec58:	992e      	ldr	r1, [sp, #184]	; 0xb8
            lhs_ptr += rhs_cols;
 800ec5a:	9e02      	ldr	r6, [sp, #8]
    if (remainder > threshold)
 800ec5c:	42af      	cmp	r7, r5
        result++;
 800ec5e:	bfb8      	it	lt
 800ec60:	3301      	addlt	r3, #1
            res01 += dst_offset;
 800ec62:	4420      	add	r0, r4
            res10 += dst_offset;
 800ec64:	4422      	add	r2, r4
            res11 += dst_offset;
 800ec66:	4423      	add	r3, r4
            res00 = MAX(res00, activation_min);
 800ec68:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
            res00 += dst_offset;
 800ec6a:	4441      	add	r1, r8
            res00 = MAX(res00, activation_min);
 800ec6c:	42a1      	cmp	r1, r4
 800ec6e:	bfb8      	it	lt
 800ec70:	4621      	movlt	r1, r4
            res01 = MAX(res01, activation_min);
 800ec72:	42a0      	cmp	r0, r4
 800ec74:	bfb8      	it	lt
 800ec76:	4620      	movlt	r0, r4
            res10 = MAX(res10, activation_min);
 800ec78:	42a2      	cmp	r2, r4
 800ec7a:	bfb8      	it	lt
 800ec7c:	4622      	movlt	r2, r4
            res11 = MAX(res11, activation_min);
 800ec7e:	42a3      	cmp	r3, r4
 800ec80:	bfb8      	it	lt
 800ec82:	4623      	movlt	r3, r4
            res00 = MIN(res00, activation_max);
 800ec84:	9c30      	ldr	r4, [sp, #192]	; 0xc0
 800ec86:	42a1      	cmp	r1, r4
 800ec88:	bfa8      	it	ge
 800ec8a:	4621      	movge	r1, r4
            dst_ptr[0] = (q7_t)res00;
 800ec8c:	9c05      	ldr	r4, [sp, #20]
 800ec8e:	7021      	strb	r1, [r4, #0]
            res01 = MIN(res01, activation_max);
 800ec90:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800ec92:	4288      	cmp	r0, r1
 800ec94:	bfa8      	it	ge
 800ec96:	4608      	movge	r0, r1
            dst_ptr[1] = (q7_t)res01;
 800ec98:	7060      	strb	r0, [r4, #1]
            res10 = MIN(res10, activation_max);
 800ec9a:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800ec9c:	4282      	cmp	r2, r0
 800ec9e:	bfa8      	it	ge
 800eca0:	4602      	movge	r2, r0
            dst_ptr[0] = (q7_t)res10;
 800eca2:	9807      	ldr	r0, [sp, #28]
 800eca4:	f800 2c01 	strb.w	r2, [r0, #-1]
            res11 = MIN(res11, activation_max);
 800eca8:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	bfa8      	it	ge
 800ecae:	4613      	movge	r3, r2
            dst_ptr[1] = (q7_t)res11;
 800ecb0:	7003      	strb	r3, [r0, #0]
            dst_ptr += rhs_rows;
 800ecb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            dst_ptr[1] = (q7_t)res01;
 800ecb4:	4621      	mov	r1, r4
 800ecb6:	4419      	add	r1, r3
        while (lhs_rows_idx)
 800ecb8:	18c3      	adds	r3, r0, r3
 800ecba:	9307      	str	r3, [sp, #28]
 800ecbc:	9b06      	ldr	r3, [sp, #24]
 800ecbe:	9105      	str	r1, [sp, #20]
 800ecc0:	3b01      	subs	r3, #1
            lhs_ptr += rhs_cols;
 800ecc2:	445e      	add	r6, fp
        while (lhs_rows_idx)
 800ecc4:	9306      	str	r3, [sp, #24]
 800ecc6:	f47f aea9 	bne.w	800ea1c <arm_nn_mat_mult_nt_t_s8+0x110>
 800ecca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eccc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ecce:	4413      	add	r3, r2
 800ecd0:	9305      	str	r3, [sp, #20]
        if (lhs_rows % 2)
 800ecd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	f040 80e5 	bne.w	800eea4 <arm_nn_mat_mult_nt_t_s8+0x598>
        rhs += 2 * rhs_cols;
 800ecda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ecdc:	9915      	ldr	r1, [sp, #84]	; 0x54
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800ecde:	9b11      	ldr	r3, [sp, #68]	; 0x44
        rhs += 2 * rhs_cols;
 800ece0:	440a      	add	r2, r1
 800ece2:	920b      	str	r2, [sp, #44]	; 0x2c
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800ece4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ece6:	440a      	add	r2, r1
 800ece8:	9212      	str	r2, [sp, #72]	; 0x48
 800ecea:	9a04      	ldr	r2, [sp, #16]
 800ecec:	3208      	adds	r2, #8
 800ecee:	9204      	str	r2, [sp, #16]
 800ecf0:	9a03      	ldr	r2, [sp, #12]
 800ecf2:	3208      	adds	r2, #8
 800ecf4:	9203      	str	r2, [sp, #12]
 800ecf6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ecf8:	3302      	adds	r3, #2
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	9311      	str	r3, [sp, #68]	; 0x44
 800ecfe:	f6ff ae4a 	blt.w	800e996 <arm_nn_mat_mult_nt_t_s8+0x8a>
 800ed02:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800ed04:	3b02      	subs	r3, #2
 800ed06:	085b      	lsrs	r3, r3, #1
        rhs += 2 * rhs_cols;
 800ed08:	fb03 1201 	mla	r2, r3, r1, r1
 800ed0c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ed0e:	4411      	add	r1, r2
        dst += 2;
 800ed10:	9a14      	ldr	r2, [sp, #80]	; 0x50
        rhs += 2 * rhs_cols;
 800ed12:	911c      	str	r1, [sp, #112]	; 0x70
 800ed14:	3301      	adds	r3, #1
        dst += 2;
 800ed16:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800ed1a:	46da      	mov	sl, fp
 800ed1c:	9314      	str	r3, [sp, #80]	; 0x50
    if (rhs_rows % 2)
 800ed1e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800ed20:	07db      	lsls	r3, r3, #31
 800ed22:	d561      	bpl.n	800ede8 <arm_nn_mat_mult_nt_t_s8+0x4dc>
    {
        const q7_t *lhs_ptr = &lhs[0];
        q7_t *dst_ptr = &dst[0];

        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 800ed24:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	dd5e      	ble.n	800ede8 <arm_nn_mat_mult_nt_t_s8+0x4dc>
        {
            const q7_t *rhs_ptr = &rhs[0];
            q31_t res00 = 0;
            if (bias)
            {
                res00 = bias[rhs_rows - 1];
 800ed2a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
                ++rhs_ptr;
                ++lhs_ptr;
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 800ed2c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
                res00 = bias[rhs_rows - 1];
 800ed2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ed32:	3b01      	subs	r3, #1
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 800ed34:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800ed38:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800ed3a:	eb02 0783 	add.w	r7, r2, r3, lsl #2
                res00 = bias[rhs_rows - 1];
 800ed3e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ed40:	eb02 0883 	add.w	r8, r2, r3, lsl #2
    const q31_t remainder_mask = (1 << exponent) - 1;
 800ed44:	e9cd 7800 	strd	r7, r8, [sp]
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 800ed48:	2400      	movs	r4, #0
 800ed4a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ed4c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800ed50:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800ed52:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 800ed56:	46a6      	mov	lr, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
 800ed58:	f04f 0901 	mov.w	r9, #1
            if (bias)
 800ed5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	f000 8298 	beq.w	800f294 <arm_nn_mat_mult_nt_t_s8+0x988>
                res00 = bias[rhs_rows - 1];
 800ed64:	9b01      	ldr	r3, [sp, #4]
 800ed66:	6819      	ldr	r1, [r3, #0]
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ed68:	f1ba 0f00 	cmp.w	sl, #0
 800ed6c:	dd0c      	ble.n	800ed88 <arm_nn_mat_mult_nt_t_s8+0x47c>
 800ed6e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ed70:	eb02 0b0a 	add.w	fp, r2, sl
 800ed74:	1e58      	subs	r0, r3, #1
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 800ed76:	f912 3b01 	ldrsb.w	r3, [r2], #1
                q31_t rhs_value = rhs_ptr[0];
 800ed7a:	f910 6f01 	ldrsb.w	r6, [r0, #1]!
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 800ed7e:	443b      	add	r3, r7
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ed80:	455a      	cmp	r2, fp
                res00 += lhs_value * rhs_value;
 800ed82:	fb06 1103 	mla	r1, r6, r3, r1
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ed86:	d1f6      	bne.n	800ed76 <arm_nn_mat_mult_nt_t_s8+0x46a>
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 800ed88:	9b00      	ldr	r3, [sp, #0]
 800ed8a:	681e      	ldr	r6, [r3, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800ed8c:	682b      	ldr	r3, [r5, #0]
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800ed8e:	ea26 70e6 	bic.w	r0, r6, r6, asr #31
  return arm_nn_divide_by_power_of_two(
 800ed92:	fa01 f000 	lsl.w	r0, r1, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800ed96:	46f3      	mov	fp, lr
 800ed98:	4661      	mov	r1, ip
 800ed9a:	fbc0 1b03 	smlal	r1, fp, r0, r3
    result = (int32_t)(mult.long_long >> 31);
 800ed9e:	0fcb      	lsrs	r3, r1, #31
  return arm_nn_divide_by_power_of_two(
 800eda0:	2e00      	cmp	r6, #0
    result = (int32_t)(mult.long_long >> 31);
 800eda2:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
  return arm_nn_divide_by_power_of_two(
 800eda6:	dc0d      	bgt.n	800edc4 <arm_nn_mat_mult_nt_t_s8+0x4b8>
 800eda8:	4276      	negs	r6, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
 800edaa:	fa09 f106 	lsl.w	r1, r9, r6
 800edae:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 800edb0:	ea03 0001 	and.w	r0, r3, r1
    if (result < 0)
 800edb4:	4133      	asrs	r3, r6
    q31_t threshold = remainder_mask >> 1;
 800edb6:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 800edba:	bf48      	it	mi
 800edbc:	3101      	addmi	r1, #1
    if (remainder > threshold)
 800edbe:	4288      	cmp	r0, r1
        result++;
 800edc0:	bfc8      	it	gt
 800edc2:	3301      	addgt	r3, #1

            // Add offset
            res00 += dst_offset;
 800edc4:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800edc6:	440b      	add	r3, r1

            // Clamp the result
            res00 = MAX(res00, activation_min);
 800edc8:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800edca:	428b      	cmp	r3, r1
 800edcc:	bfb8      	it	lt
 800edce:	460b      	movlt	r3, r1
            res00 = MIN(res00, activation_max);
 800edd0:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800edd2:	428b      	cmp	r3, r1
 800edd4:	bfa8      	it	ge
 800edd6:	460b      	movge	r3, r1

            dst_ptr[0] = (q7_t)res00;
 800edd8:	f888 3000 	strb.w	r3, [r8]
            dst_ptr += rhs_rows;
 800eddc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800edde:	4498      	add	r8, r3
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 800ede0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800ede2:	3401      	adds	r4, #1
 800ede4:	42a3      	cmp	r3, r4
 800ede6:	d1b9      	bne.n	800ed5c <arm_nn_mat_mult_nt_t_s8+0x450>
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_MATH_SUCCESS;
}
 800ede8:	2000      	movs	r0, #0
 800edea:	b01f      	add	sp, #124	; 0x7c
 800edec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return arm_nn_divide_by_power_of_two(
 800edf0:	426b      	negs	r3, r5
    const q31_t remainder_mask = (1 << exponent) - 1;
 800edf2:	2501      	movs	r5, #1
 800edf4:	409d      	lsls	r5, r3
 800edf6:	3d01      	subs	r5, #1
  return arm_nn_divide_by_power_of_two(
 800edf8:	fa01 f404 	lsl.w	r4, r1, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800edfc:	f04f 0e00 	mov.w	lr, #0
 800ee00:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    int32_t remainder = remainder_mask & dividend;
 800ee04:	ea00 0705 	and.w	r7, r0, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800ee08:	fbc6 1e04 	smlal	r1, lr, r6, r4
    int32_t remainder = remainder_mask & dividend;
 800ee0c:	970f      	str	r7, [sp, #60]	; 0x3c
    result = (int32_t)(mult.long_long >> 31);
 800ee0e:	0fc9      	lsrs	r1, r1, #31
 800ee10:	ea41 014e 	orr.w	r1, r1, lr, lsl #1
    if (result < 0)
 800ee14:	4118      	asrs	r0, r3
    q31_t threshold = remainder_mask >> 1;
 800ee16:	ea4f 0765 	mov.w	r7, r5, asr #1
    if (remainder > threshold)
 800ee1a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    int32_t remainder = remainder_mask & dividend;
 800ee1c:	ea05 0501 	and.w	r5, r5, r1
    result = dividend >> exponent;
 800ee20:	fa41 f303 	asr.w	r3, r1, r3
    q31_t threshold = remainder_mask >> 1;
 800ee24:	bf54      	ite	pl
 800ee26:	4639      	movpl	r1, r7
        threshold++;
 800ee28:	1c79      	addmi	r1, r7, #1
    if (remainder > threshold)
 800ee2a:	428c      	cmp	r4, r1
        result++;
 800ee2c:	bfc8      	it	gt
 800ee2e:	3001      	addgt	r0, #1
 800ee30:	e707      	b.n	800ec42 <arm_nn_mat_mult_nt_t_s8+0x336>
  return arm_nn_divide_by_power_of_two(
 800ee32:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 800ee34:	2501      	movs	r5, #1
  return arm_nn_divide_by_power_of_two(
 800ee36:	fa02 f404 	lsl.w	r4, r2, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800ee3a:	f04f 0c00 	mov.w	ip, #0
 800ee3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    const q31_t remainder_mask = (1 << exponent) - 1;
 800ee42:	fa05 f700 	lsl.w	r7, r5, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800ee46:	fbc6 2c04 	smlal	r2, ip, r6, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
 800ee4a:	3f01      	subs	r7, #1
    result = (int32_t)(mult.long_long >> 31);
 800ee4c:	0fd2      	lsrs	r2, r2, #31
    int32_t remainder = remainder_mask & dividend;
 800ee4e:	ea08 0507 	and.w	r5, r8, r7
    q31_t threshold = remainder_mask >> 1;
 800ee52:	ea4f 0967 	mov.w	r9, r7, asr #1
    if (result < 0)
 800ee56:	fa58 f800 	asrs.w	r8, r8, r0
    result = (int32_t)(mult.long_long >> 31);
 800ee5a:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
    int32_t remainder = remainder_mask & dividend;
 800ee5e:	ea07 0c02 	and.w	ip, r7, r2
    result = dividend >> exponent;
 800ee62:	fa42 f200 	asr.w	r2, r2, r0
    q31_t threshold = remainder_mask >> 1;
 800ee66:	bf54      	ite	pl
 800ee68:	4648      	movpl	r0, r9
        threshold++;
 800ee6a:	f109 0001 	addmi.w	r0, r9, #1
    if (remainder > threshold)
 800ee6e:	4285      	cmp	r5, r0
        result++;
 800ee70:	bfc8      	it	gt
 800ee72:	f108 0801 	addgt.w	r8, r8, #1
 800ee76:	e6c6      	b.n	800ec06 <arm_nn_mat_mult_nt_t_s8+0x2fa>
  return arm_nn_divide_by_power_of_two(
 800ee78:	40a2      	lsls	r2, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800ee7a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ee7e:	2400      	movs	r4, #0
 800ee80:	fbc6 0402 	smlal	r0, r4, r6, r2
    result = (int32_t)(mult.long_long >> 31);
 800ee84:	0fc2      	lsrs	r2, r0, #31
 800ee86:	f04f 0c00 	mov.w	ip, #0
 800ee8a:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    q31_t threshold = remainder_mask >> 1;
 800ee8e:	46e1      	mov	r9, ip
 800ee90:	e6b9      	b.n	800ec06 <arm_nn_mat_mult_nt_t_s8+0x2fa>
            q31_t res11 = lhs_offset_contribution1;
 800ee92:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	; 0x28
            q31_t res10 = lhs_offset_contribution0;
 800ee96:	9d09      	ldr	r5, [sp, #36]	; 0x24
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800ee98:	9602      	str	r6, [sp, #8]
            q31_t res11 = lhs_offset_contribution1;
 800ee9a:	4619      	mov	r1, r3
            q31_t res10 = lhs_offset_contribution0;
 800ee9c:	462a      	mov	r2, r5
            int32_t rhs_cols_idx = 0;
 800ee9e:	f04f 0800 	mov.w	r8, #0
 800eea2:	e669      	b.n	800eb78 <arm_nn_mat_mult_nt_t_s8+0x26c>
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800eea4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	f340 81f6 	ble.w	800f298 <arm_nn_mat_mult_nt_t_s8+0x98c>
 800eeac:	9a08      	ldr	r2, [sp, #32]
 800eeae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eeb0:	981d      	ldr	r0, [sp, #116]	; 0x74
 800eeb2:	eb06 0902 	add.w	r9, r6, r2
 800eeb6:	e9dd 5209 	ldrd	r5, r2, [sp, #36]	; 0x24
 800eeba:	3305      	adds	r3, #5
 800eebc:	f850 e003 	ldr.w	lr, [r0, r3]
 800eec0:	f853 4c04 	ldr.w	r4, [r3, #-4]
 800eec4:	6831      	ldr	r1, [r6, #0]
 800eec6:	18c7      	adds	r7, r0, r3
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800eec8:	fa2f fa8e 	sxtb16	sl, lr
 800eecc:	fa2f fc81 	sxtb16	ip, r1
 800eed0:	fa2f f884 	sxtb16	r8, r4
	__ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 800eed4:	fa2f fe9e 	sxtb16	lr, lr, ror #8
 800eed8:	fa2f f191 	sxtb16	r1, r1, ror #8
 800eedc:	fa2f f494 	sxtb16	r4, r4, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800eee0:	fb2c 550a 	smlad	r5, ip, sl, r5
 800eee4:	fb21 550e 	smlad	r5, r1, lr, r5
 800eee8:	fb2c 2c08 	smlad	ip, ip, r8, r2
 800eeec:	fb21 c104 	smlad	r1, r1, r4, ip
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800eef0:	687c      	ldr	r4, [r7, #4]
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 800eef2:	f8d3 c000 	ldr.w	ip, [r3]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800eef6:	6872      	ldr	r2, [r6, #4]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800eef8:	fa2f fa84 	sxtb16	sl, r4
 800eefc:	fa2f fe82 	sxtb16	lr, r2
 800ef00:	fa2f f88c 	sxtb16	r8, ip
	__ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 800ef04:	fa2f f494 	sxtb16	r4, r4, ror #8
 800ef08:	fa2f f292 	sxtb16	r2, r2, ror #8
 800ef0c:	fa2f fc9c 	sxtb16	ip, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ef10:	fb2e 550a 	smlad	r5, lr, sl, r5
 800ef14:	fb22 5404 	smlad	r4, r2, r4, r5
 800ef18:	fb2e 1e08 	smlad	lr, lr, r8, r1
 800ef1c:	fb22 e20c 	smlad	r2, r2, ip, lr
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800ef20:	f8d7 c008 	ldr.w	ip, [r7, #8]
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 800ef24:	685d      	ldr	r5, [r3, #4]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800ef26:	68b1      	ldr	r1, [r6, #8]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800ef28:	fa2f fa8c 	sxtb16	sl, ip
 800ef2c:	fa2f fe81 	sxtb16	lr, r1
 800ef30:	fa2f f885 	sxtb16	r8, r5
	__ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 800ef34:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 800ef38:	fa2f f191 	sxtb16	r1, r1, ror #8
 800ef3c:	fa2f f595 	sxtb16	r5, r5, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ef40:	fb2e 440a 	smlad	r4, lr, sl, r4
 800ef44:	fb21 4c0c 	smlad	ip, r1, ip, r4
 800ef48:	fb2e 2e08 	smlad	lr, lr, r8, r2
 800ef4c:	fb21 e405 	smlad	r4, r1, r5, lr
  memcpy(&val, *in_q7, 4);
 800ef50:	68fd      	ldr	r5, [r7, #12]
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 800ef52:	68f1      	ldr	r1, [r6, #12]
 800ef54:	689f      	ldr	r7, [r3, #8]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800ef56:	3610      	adds	r6, #16
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800ef58:	fa2f f885 	sxtb16	r8, r5
 800ef5c:	fa2f f281 	sxtb16	r2, r1
 800ef60:	fa2f fe87 	sxtb16	lr, r7
	__ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 800ef64:	fa2f f595 	sxtb16	r5, r5, ror #8
 800ef68:	fa2f f191 	sxtb16	r1, r1, ror #8
 800ef6c:	fa2f f797 	sxtb16	r7, r7, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ef70:	fb22 cc08 	smlad	ip, r2, r8, ip
 800ef74:	fb21 c505 	smlad	r5, r1, r5, ip
 800ef78:	fb22 420e 	smlad	r2, r2, lr, r4
 800ef7c:	fb21 2207 	smlad	r2, r1, r7, r2
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800ef80:	454e      	cmp	r6, r9
 800ef82:	f103 0310 	add.w	r3, r3, #16
 800ef86:	d199      	bne.n	800eebc <arm_nn_mat_mult_nt_t_s8+0x5b0>
  *in_q7 += 4;
 800ef88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef8a:	9808      	ldr	r0, [sp, #32]
 800ef8c:	e9cd 5209 	strd	r5, r2, [sp, #36]	; 0x24
 800ef90:	1819      	adds	r1, r3, r0
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ef92:	4583      	cmp	fp, r0
 800ef94:	f340 811c 	ble.w	800f1d0 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value  = lhs_ptr[0];
 800ef98:	f999 3000 	ldrsb.w	r3, [r9]
                res00 += lhs_value * rhs_value0;
 800ef9c:	f991 2000 	ldrsb.w	r2, [r1]
 800efa0:	9c09      	ldr	r4, [sp, #36]	; 0x24
                res01 += lhs_value * rhs_value1;
 800efa2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
                res00 += lhs_value * rhs_value0;
 800efa4:	fb13 4402 	smlabb	r4, r3, r2, r4
                res01 += lhs_value * rhs_value1;
 800efa8:	f911 200b 	ldrsb.w	r2, [r1, fp]
                res00 += lhs_value * rhs_value0;
 800efac:	9409      	str	r4, [sp, #36]	; 0x24
                res01 += lhs_value * rhs_value1;
 800efae:	fb13 5502 	smlabb	r5, r3, r2, r5
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800efb2:	1c43      	adds	r3, r0, #1
 800efb4:	459b      	cmp	fp, r3
                res01 += lhs_value * rhs_value1;
 800efb6:	950a      	str	r5, [sp, #40]	; 0x28
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800efb8:	f340 810a 	ble.w	800f1d0 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 800efbc:	eb01 030b 	add.w	r3, r1, fp
                res01 += lhs_value * rhs_value1;
 800efc0:	f993 2001 	ldrsb.w	r2, [r3, #1]
                q7_t lhs_value  = lhs_ptr[0];
 800efc4:	f999 3001 	ldrsb.w	r3, [r9, #1]
                res01 += lhs_value * rhs_value1;
 800efc8:	fb13 5502 	smlabb	r5, r3, r2, r5
                res00 += lhs_value * rhs_value0;
 800efcc:	f991 2001 	ldrsb.w	r2, [r1, #1]
                res01 += lhs_value * rhs_value1;
 800efd0:	950a      	str	r5, [sp, #40]	; 0x28
                res00 += lhs_value * rhs_value0;
 800efd2:	fb13 4402 	smlabb	r4, r3, r2, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800efd6:	1c83      	adds	r3, r0, #2
 800efd8:	459b      	cmp	fp, r3
                res00 += lhs_value * rhs_value0;
 800efda:	9409      	str	r4, [sp, #36]	; 0x24
                ++rhs_ptr;
 800efdc:	f101 0202 	add.w	r2, r1, #2
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800efe0:	f340 80f6 	ble.w	800f1d0 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value  = lhs_ptr[0];
 800efe4:	f999 3002 	ldrsb.w	r3, [r9, #2]
                res01 += lhs_value * rhs_value1;
 800efe8:	f912 200b 	ldrsb.w	r2, [r2, fp]
 800efec:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 800eff0:	f991 2002 	ldrsb.w	r2, [r1, #2]
                res01 += lhs_value * rhs_value1;
 800eff4:	950a      	str	r5, [sp, #40]	; 0x28
                res00 += lhs_value * rhs_value0;
 800eff6:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800effa:	1cc3      	adds	r3, r0, #3
 800effc:	459b      	cmp	fp, r3
                res00 += lhs_value * rhs_value0;
 800effe:	9409      	str	r4, [sp, #36]	; 0x24
                ++rhs_ptr;
 800f000:	f101 0203 	add.w	r2, r1, #3
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f004:	f340 80e4 	ble.w	800f1d0 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value  = lhs_ptr[0];
 800f008:	f999 3003 	ldrsb.w	r3, [r9, #3]
                res01 += lhs_value * rhs_value1;
 800f00c:	f912 200b 	ldrsb.w	r2, [r2, fp]
 800f010:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 800f014:	f991 2003 	ldrsb.w	r2, [r1, #3]
                res01 += lhs_value * rhs_value1;
 800f018:	950a      	str	r5, [sp, #40]	; 0x28
                res00 += lhs_value * rhs_value0;
 800f01a:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f01e:	1d03      	adds	r3, r0, #4
 800f020:	459b      	cmp	fp, r3
                res00 += lhs_value * rhs_value0;
 800f022:	9409      	str	r4, [sp, #36]	; 0x24
                ++rhs_ptr;
 800f024:	f101 0204 	add.w	r2, r1, #4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f028:	f340 80d2 	ble.w	800f1d0 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value  = lhs_ptr[0];
 800f02c:	f999 3004 	ldrsb.w	r3, [r9, #4]
                res01 += lhs_value * rhs_value1;
 800f030:	f912 200b 	ldrsb.w	r2, [r2, fp]
 800f034:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 800f038:	f991 2004 	ldrsb.w	r2, [r1, #4]
                res01 += lhs_value * rhs_value1;
 800f03c:	950a      	str	r5, [sp, #40]	; 0x28
                res00 += lhs_value * rhs_value0;
 800f03e:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f042:	1d43      	adds	r3, r0, #5
 800f044:	459b      	cmp	fp, r3
                res00 += lhs_value * rhs_value0;
 800f046:	9409      	str	r4, [sp, #36]	; 0x24
                ++rhs_ptr;
 800f048:	f101 0205 	add.w	r2, r1, #5
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f04c:	f340 80c0 	ble.w	800f1d0 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value  = lhs_ptr[0];
 800f050:	f999 3005 	ldrsb.w	r3, [r9, #5]
                res01 += lhs_value * rhs_value1;
 800f054:	f912 200b 	ldrsb.w	r2, [r2, fp]
 800f058:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 800f05c:	f991 2005 	ldrsb.w	r2, [r1, #5]
                res01 += lhs_value * rhs_value1;
 800f060:	950a      	str	r5, [sp, #40]	; 0x28
                res00 += lhs_value * rhs_value0;
 800f062:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f066:	1d83      	adds	r3, r0, #6
 800f068:	459b      	cmp	fp, r3
                res00 += lhs_value * rhs_value0;
 800f06a:	9409      	str	r4, [sp, #36]	; 0x24
                ++rhs_ptr;
 800f06c:	f101 0206 	add.w	r2, r1, #6
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f070:	f340 80ae 	ble.w	800f1d0 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value  = lhs_ptr[0];
 800f074:	f999 3006 	ldrsb.w	r3, [r9, #6]
                res01 += lhs_value * rhs_value1;
 800f078:	f912 200b 	ldrsb.w	r2, [r2, fp]
 800f07c:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 800f080:	f991 2006 	ldrsb.w	r2, [r1, #6]
                res01 += lhs_value * rhs_value1;
 800f084:	950a      	str	r5, [sp, #40]	; 0x28
                res00 += lhs_value * rhs_value0;
 800f086:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f08a:	1dc3      	adds	r3, r0, #7
 800f08c:	459b      	cmp	fp, r3
                res00 += lhs_value * rhs_value0;
 800f08e:	9409      	str	r4, [sp, #36]	; 0x24
                ++rhs_ptr;
 800f090:	f101 0207 	add.w	r2, r1, #7
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f094:	f340 809c 	ble.w	800f1d0 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value  = lhs_ptr[0];
 800f098:	f999 3007 	ldrsb.w	r3, [r9, #7]
                res01 += lhs_value * rhs_value1;
 800f09c:	f912 200b 	ldrsb.w	r2, [r2, fp]
 800f0a0:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 800f0a4:	f991 2007 	ldrsb.w	r2, [r1, #7]
                res01 += lhs_value * rhs_value1;
 800f0a8:	950a      	str	r5, [sp, #40]	; 0x28
                res00 += lhs_value * rhs_value0;
 800f0aa:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f0ae:	f100 0308 	add.w	r3, r0, #8
 800f0b2:	459b      	cmp	fp, r3
                res00 += lhs_value * rhs_value0;
 800f0b4:	9409      	str	r4, [sp, #36]	; 0x24
                ++rhs_ptr;
 800f0b6:	f101 0208 	add.w	r2, r1, #8
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f0ba:	f340 8089 	ble.w	800f1d0 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value  = lhs_ptr[0];
 800f0be:	f999 3008 	ldrsb.w	r3, [r9, #8]
                res01 += lhs_value * rhs_value1;
 800f0c2:	f912 200b 	ldrsb.w	r2, [r2, fp]
 800f0c6:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 800f0ca:	f991 2008 	ldrsb.w	r2, [r1, #8]
                res01 += lhs_value * rhs_value1;
 800f0ce:	950a      	str	r5, [sp, #40]	; 0x28
                res00 += lhs_value * rhs_value0;
 800f0d0:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f0d4:	f100 0309 	add.w	r3, r0, #9
 800f0d8:	459b      	cmp	fp, r3
                res00 += lhs_value * rhs_value0;
 800f0da:	9409      	str	r4, [sp, #36]	; 0x24
                ++rhs_ptr;
 800f0dc:	f101 0209 	add.w	r2, r1, #9
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f0e0:	dd76      	ble.n	800f1d0 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value  = lhs_ptr[0];
 800f0e2:	f999 3009 	ldrsb.w	r3, [r9, #9]
                res01 += lhs_value * rhs_value1;
 800f0e6:	f912 200b 	ldrsb.w	r2, [r2, fp]
 800f0ea:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 800f0ee:	f991 2009 	ldrsb.w	r2, [r1, #9]
                res01 += lhs_value * rhs_value1;
 800f0f2:	950a      	str	r5, [sp, #40]	; 0x28
                res00 += lhs_value * rhs_value0;
 800f0f4:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f0f8:	f100 030a 	add.w	r3, r0, #10
 800f0fc:	459b      	cmp	fp, r3
                res00 += lhs_value * rhs_value0;
 800f0fe:	9409      	str	r4, [sp, #36]	; 0x24
                ++rhs_ptr;
 800f100:	f101 020a 	add.w	r2, r1, #10
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f104:	dd64      	ble.n	800f1d0 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value  = lhs_ptr[0];
 800f106:	f999 300a 	ldrsb.w	r3, [r9, #10]
                res01 += lhs_value * rhs_value1;
 800f10a:	f912 200b 	ldrsb.w	r2, [r2, fp]
 800f10e:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 800f112:	f991 200a 	ldrsb.w	r2, [r1, #10]
                res01 += lhs_value * rhs_value1;
 800f116:	950a      	str	r5, [sp, #40]	; 0x28
                res00 += lhs_value * rhs_value0;
 800f118:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f11c:	f100 030b 	add.w	r3, r0, #11
 800f120:	459b      	cmp	fp, r3
                res00 += lhs_value * rhs_value0;
 800f122:	9409      	str	r4, [sp, #36]	; 0x24
                ++rhs_ptr;
 800f124:	f101 020b 	add.w	r2, r1, #11
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f128:	dd52      	ble.n	800f1d0 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value  = lhs_ptr[0];
 800f12a:	f999 300b 	ldrsb.w	r3, [r9, #11]
                res01 += lhs_value * rhs_value1;
 800f12e:	f912 200b 	ldrsb.w	r2, [r2, fp]
 800f132:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 800f136:	f991 200b 	ldrsb.w	r2, [r1, #11]
                res01 += lhs_value * rhs_value1;
 800f13a:	950a      	str	r5, [sp, #40]	; 0x28
                res00 += lhs_value * rhs_value0;
 800f13c:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f140:	f100 030c 	add.w	r3, r0, #12
 800f144:	459b      	cmp	fp, r3
                res00 += lhs_value * rhs_value0;
 800f146:	9409      	str	r4, [sp, #36]	; 0x24
                ++rhs_ptr;
 800f148:	f101 020c 	add.w	r2, r1, #12
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f14c:	dd40      	ble.n	800f1d0 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value  = lhs_ptr[0];
 800f14e:	f999 300c 	ldrsb.w	r3, [r9, #12]
                res01 += lhs_value * rhs_value1;
 800f152:	f912 200b 	ldrsb.w	r2, [r2, fp]
 800f156:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 800f15a:	f991 200c 	ldrsb.w	r2, [r1, #12]
                res01 += lhs_value * rhs_value1;
 800f15e:	950a      	str	r5, [sp, #40]	; 0x28
                res00 += lhs_value * rhs_value0;
 800f160:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f164:	f100 030d 	add.w	r3, r0, #13
 800f168:	459b      	cmp	fp, r3
                res00 += lhs_value * rhs_value0;
 800f16a:	9409      	str	r4, [sp, #36]	; 0x24
                ++rhs_ptr;
 800f16c:	f101 020d 	add.w	r2, r1, #13
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f170:	dd2e      	ble.n	800f1d0 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value  = lhs_ptr[0];
 800f172:	f999 300d 	ldrsb.w	r3, [r9, #13]
                res01 += lhs_value * rhs_value1;
 800f176:	f912 200b 	ldrsb.w	r2, [r2, fp]
 800f17a:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 800f17e:	f991 200d 	ldrsb.w	r2, [r1, #13]
                res01 += lhs_value * rhs_value1;
 800f182:	950a      	str	r5, [sp, #40]	; 0x28
                res00 += lhs_value * rhs_value0;
 800f184:	fb12 4403 	smlabb	r4, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f188:	f100 030e 	add.w	r3, r0, #14
 800f18c:	459b      	cmp	fp, r3
                res00 += lhs_value * rhs_value0;
 800f18e:	9409      	str	r4, [sp, #36]	; 0x24
                ++rhs_ptr;
 800f190:	f101 020e 	add.w	r2, r1, #14
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f194:	dd1c      	ble.n	800f1d0 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                res01 += lhs_value * rhs_value1;
 800f196:	f912 200b 	ldrsb.w	r2, [r2, fp]
                q7_t lhs_value  = lhs_ptr[0];
 800f19a:	f999 300e 	ldrsb.w	r3, [r9, #14]
                res01 += lhs_value * rhs_value1;
 800f19e:	fb12 5503 	smlabb	r5, r2, r3, r5
                res00 += lhs_value * rhs_value0;
 800f1a2:	f991 200e 	ldrsb.w	r2, [r1, #14]
                res01 += lhs_value * rhs_value1;
 800f1a6:	950a      	str	r5, [sp, #40]	; 0x28
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f1a8:	300f      	adds	r0, #15
                res00 += lhs_value * rhs_value0;
 800f1aa:	fb12 4603 	smlabb	r6, r2, r3, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f1ae:	4583      	cmp	fp, r0
                res00 += lhs_value * rhs_value0;
 800f1b0:	9609      	str	r6, [sp, #36]	; 0x24
                ++rhs_ptr;
 800f1b2:	f101 040f 	add.w	r4, r1, #15
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f1b6:	dd0b      	ble.n	800f1d0 <arm_nn_mat_mult_nt_t_s8+0x8c4>
                q7_t lhs_value  = lhs_ptr[0];
 800f1b8:	f999 300f 	ldrsb.w	r3, [r9, #15]
                res00 += lhs_value * rhs_value0;
 800f1bc:	f991 200f 	ldrsb.w	r2, [r1, #15]
 800f1c0:	fb13 6202 	smlabb	r2, r3, r2, r6
 800f1c4:	9209      	str	r2, [sp, #36]	; 0x24
                res01 += lhs_value * rhs_value1;
 800f1c6:	f914 200b 	ldrsb.w	r2, [r4, fp]
 800f1ca:	fb13 5302 	smlabb	r3, r3, r2, r5
 800f1ce:	930a      	str	r3, [sp, #40]	; 0x28
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx],     dst_shifts[rhs_rows_idx]);
 800f1d0:	9b03      	ldr	r3, [sp, #12]
  return arm_nn_divide_by_power_of_two(
 800f1d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f1d4:	f853 1c04 	ldr.w	r1, [r3, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f1d8:	9b04      	ldr	r3, [sp, #16]
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800f1da:	ea21 72e1 	bic.w	r2, r1, r1, asr #31
  return arm_nn_divide_by_power_of_two(
 800f1de:	4090      	lsls	r0, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f1e0:	f853 3c04 	ldr.w	r3, [r3, #-4]
  return arm_nn_divide_by_power_of_two(
 800f1e4:	4602      	mov	r2, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f1e6:	2400      	movs	r4, #0
 800f1e8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800f1ec:	fbc2 0403 	smlal	r0, r4, r2, r3
    result = (int32_t)(mult.long_long >> 31);
 800f1f0:	0fc0      	lsrs	r0, r0, #31
  return arm_nn_divide_by_power_of_two(
 800f1f2:	2900      	cmp	r1, #0
    result = (int32_t)(mult.long_long >> 31);
 800f1f4:	ea40 0544 	orr.w	r5, r0, r4, lsl #1
  return arm_nn_divide_by_power_of_two(
 800f1f8:	dc0d      	bgt.n	800f216 <arm_nn_mat_mult_nt_t_s8+0x90a>
 800f1fa:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	408b      	lsls	r3, r1
 800f200:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 800f202:	ea05 0203 	and.w	r2, r5, r3
    if (result < 0)
 800f206:	410d      	asrs	r5, r1
    q31_t threshold = remainder_mask >> 1;
 800f208:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 800f20c:	bf48      	it	mi
 800f20e:	3301      	addmi	r3, #1
    if (remainder > threshold)
 800f210:	429a      	cmp	r2, r3
        result++;
 800f212:	bfc8      	it	gt
 800f214:	3501      	addgt	r5, #1
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 800f216:	9b03      	ldr	r3, [sp, #12]
  return arm_nn_divide_by_power_of_two(
 800f218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f21a:	6818      	ldr	r0, [r3, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f21c:	9b04      	ldr	r3, [sp, #16]
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800f21e:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f222:	681b      	ldr	r3, [r3, #0]
  return arm_nn_divide_by_power_of_two(
 800f224:	408a      	lsls	r2, r1
 800f226:	4611      	mov	r1, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f228:	2400      	movs	r4, #0
 800f22a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f22e:	fbc1 2403 	smlal	r2, r4, r1, r3
    result = (int32_t)(mult.long_long >> 31);
 800f232:	0fd3      	lsrs	r3, r2, #31
  return arm_nn_divide_by_power_of_two(
 800f234:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
 800f236:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
  return arm_nn_divide_by_power_of_two(
 800f23a:	dc0d      	bgt.n	800f258 <arm_nn_mat_mult_nt_t_s8+0x94c>
 800f23c:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 800f23e:	2201      	movs	r2, #1
 800f240:	4082      	lsls	r2, r0
 800f242:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
 800f244:	ea03 0102 	and.w	r1, r3, r2
    if (result < 0)
 800f248:	4103      	asrs	r3, r0
    q31_t threshold = remainder_mask >> 1;
 800f24a:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
 800f24e:	bf48      	it	mi
 800f250:	3201      	addmi	r2, #1
    if (remainder > threshold)
 800f252:	4291      	cmp	r1, r2
        result++;
 800f254:	bfc8      	it	gt
 800f256:	3301      	addgt	r3, #1
            res01 += dst_offset;
 800f258:	992e      	ldr	r1, [sp, #184]	; 0xb8
            res00 += dst_offset;
 800f25a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
            res01 += dst_offset;
 800f25c:	440b      	add	r3, r1
            res00 = MAX(res00, activation_min);
 800f25e:	992f      	ldr	r1, [sp, #188]	; 0xbc
            res00 += dst_offset;
 800f260:	442a      	add	r2, r5
            res00 = MAX(res00, activation_min);
 800f262:	428a      	cmp	r2, r1
 800f264:	bfb8      	it	lt
 800f266:	460a      	movlt	r2, r1
            res01 = MAX(res01, activation_min);
 800f268:	428b      	cmp	r3, r1
 800f26a:	bfb8      	it	lt
 800f26c:	460b      	movlt	r3, r1
            res00 = MIN(res00, activation_max);
 800f26e:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800f270:	428a      	cmp	r2, r1
 800f272:	bfa8      	it	ge
 800f274:	460a      	movge	r2, r1
            dst_ptr[0] = (q7_t)res00;
 800f276:	9905      	ldr	r1, [sp, #20]
 800f278:	700a      	strb	r2, [r1, #0]
            res01 = MIN(res01, activation_max);
 800f27a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800f27c:	4293      	cmp	r3, r2
 800f27e:	bfa8      	it	ge
 800f280:	4613      	movge	r3, r2
            dst_ptr[1] = (q7_t)res01;
 800f282:	704b      	strb	r3, [r1, #1]
 800f284:	e529      	b.n	800ecda <arm_nn_mat_mult_nt_t_s8+0x3ce>
        const q7_t *lhs_ptr = &lhs[0];
 800f286:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800f288:	e523      	b.n	800ecd2 <arm_nn_mat_mult_nt_t_s8+0x3c6>
        for (int32_t x = 0; x < rhs_cols; ++x)
 800f28a:	2300      	movs	r3, #0
 800f28c:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800f290:	f7ff bb9f 	b.w	800e9d2 <arm_nn_mat_mult_nt_t_s8+0xc6>
 800f294:	4619      	mov	r1, r3
 800f296:	e567      	b.n	800ed68 <arm_nn_mat_mult_nt_t_s8+0x45c>
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800f298:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f29a:	46b1      	mov	r9, r6
            int32_t rhs_cols_idx = 0;
 800f29c:	2000      	movs	r0, #0
 800f29e:	e678      	b.n	800ef92 <arm_nn_mat_mult_nt_t_s8+0x686>

0800f2a0 <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 800f2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a4:	b093      	sub	sp, #76	; 0x4c
 800f2a6:	469c      	mov	ip, r3
 800f2a8:	930f      	str	r3, [sp, #60]	; 0x3c
#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
    const int16_t lhs_offset_s16 = lhs_offset;
    const int16_t rhs_offset_s16 = rhs_offset;

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 800f2aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
{
 800f2ac:	9004      	str	r0, [sp, #16]
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 800f2ae:	b29c      	uxth	r4, r3
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800f2b0:	e9dd 9521 	ldrd	r9, r5, [sp, #132]	; 0x84
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 800f2b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 800f2b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
{
 800f2ba:	e9cd 120d 	strd	r1, r2, [sp, #52]	; 0x34
 800f2be:	468e      	mov	lr, r1
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800f2c0:	2d01      	cmp	r5, #1
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 800f2c2:	b299      	uxth	r1, r3
 800f2c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800f2c8:	f340 8272 	ble.w	800f7b0 <arm_nn_vec_mat_mult_t_s8+0x510>
 800f2cc:	462f      	mov	r7, r5
  return arm_nn_divide_by_power_of_two(
 800f2ce:	9d20      	ldr	r5, [sp, #128]	; 0x80
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800f2d0:	f8cd e000 	str.w	lr, [sp]
  return arm_nn_divide_by_power_of_two(
 800f2d4:	426d      	negs	r5, r5
    const q31_t remainder_mask = (1 << exponent) - 1;
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	40ab      	lsls	r3, r5
  return arm_nn_divide_by_power_of_two(
 800f2da:	950b      	str	r5, [sp, #44]	; 0x2c
    const q31_t remainder_mask = (1 << exponent) - 1;
 800f2dc:	1e5d      	subs	r5, r3, #1
 800f2de:	f1a9 0310 	sub.w	r3, r9, #16
 800f2e2:	1ebe      	subs	r6, r7, #2
 800f2e4:	f023 030f 	bic.w	r3, r3, #15
 800f2e8:	f103 0710 	add.w	r7, r3, #16
 800f2ec:	f026 0301 	bic.w	r3, r6, #1
 800f2f0:	4463      	add	r3, ip
 800f2f2:	3304      	adds	r3, #4
 800f2f4:	3208      	adds	r2, #8
 800f2f6:	9611      	str	r6, [sp, #68]	; 0x44
 800f2f8:	4666      	mov	r6, ip
 800f2fa:	950c      	str	r5, [sp, #48]	; 0x30
 800f2fc:	9306      	str	r3, [sp, #24]
 800f2fe:	9201      	str	r2, [sp, #4]
    q31_t threshold = remainder_mask >> 1;
 800f300:	106b      	asrs	r3, r5, #1
 800f302:	1cb2      	adds	r2, r6, #2
        res01 = MIN(res01, activation_max);

        *dst++ = (q7_t)res00;
        *dst++ = (q7_t)res01;

        rhs += 2 * rhs_cols;
 800f304:	ea4f 0549 	mov.w	r5, r9, lsl #1
 800f308:	9505      	str	r5, [sp, #20]
 800f30a:	9202      	str	r2, [sp, #8]
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800f30c:	9d20      	ldr	r5, [sp, #128]	; 0x80
    q31_t threshold = remainder_mask >> 1;
 800f30e:	930a      	str	r3, [sp, #40]	; 0x28
 800f310:	4602      	mov	r2, r0
 800f312:	443a      	add	r2, r7
 800f314:	f06f 0803 	mvn.w	r8, #3
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800f318:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800f31c:	9208      	str	r2, [sp, #32]
        threshold++;
 800f31e:	3301      	adds	r3, #1
 800f320:	f109 0204 	add.w	r2, r9, #4
 800f324:	9707      	str	r7, [sp, #28]
 800f326:	eba8 0809 	sub.w	r8, r8, r9
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800f32a:	9503      	str	r5, [sp, #12]
 800f32c:	9209      	str	r2, [sp, #36]	; 0x24
        threshold++;
 800f32e:	9310      	str	r3, [sp, #64]	; 0x40
 800f330:	468e      	mov	lr, r1
        q31_t res00 = *bias++;
 800f332:	9b01      	ldr	r3, [sp, #4]
 800f334:	9a00      	ldr	r2, [sp, #0]
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800f336:	f1b9 0f0f 	cmp.w	r9, #15
        q31_t res01 = *bias++;
 800f33a:	e953 0302 	ldrd	r0, r3, [r3, #-8]
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800f33e:	f340 83d6 	ble.w	800faee <arm_nn_vec_mat_mult_t_s8+0x84e>
 800f342:	9d09      	ldr	r5, [sp, #36]	; 0x24
        const q7_t *lhs_ptr = &lhs[0];
 800f344:	f8dd c010 	ldr.w	ip, [sp, #16]
 800f348:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
 800f34c:	4671      	mov	r1, lr
 800f34e:	f8dd e020 	ldr.w	lr, [sp, #32]
 800f352:	1957      	adds	r7, r2, r5
 800f354:	f858 2007 	ldr.w	r2, [r8, r7]
 800f358:	eb08 0607 	add.w	r6, r8, r7
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f35c:	fa21 fb82 	sxtab16	fp, r1, r2
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800f360:	f8dc 5000 	ldr.w	r5, [ip]
  return (op1 >> op2) | (op1 << (32U - op2));
 800f364:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f368:	fa21 f282 	sxtab16	r2, r1, r2
 800f36c:	fa24 fa85 	sxtab16	sl, r4, r5
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800f370:	f857 9c04 	ldr.w	r9, [r7, #-4]
  return (op1 >> op2) | (op1 << (32U - op2));
 800f374:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f378:	fa24 f585 	sxtab16	r5, r4, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f37c:	fb2a 000b 	smlad	r0, sl, fp, r0
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f380:	fa21 fb89 	sxtab16	fp, r1, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f384:	fb25 0202 	smlad	r2, r5, r2, r0
  return (op1 >> op2) | (op1 << (32U - op2));
 800f388:	ea4f 2939 	mov.w	r9, r9, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f38c:	fa21 f989 	sxtab16	r9, r1, r9
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800f390:	6870      	ldr	r0, [r6, #4]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f392:	fb2a 3a0b 	smlad	sl, sl, fp, r3
 800f396:	fb25 a509 	smlad	r5, r5, r9, sl
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f39a:	fa21 fb80 	sxtab16	fp, r1, r0
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800f39e:	f8dc 3004 	ldr.w	r3, [ip, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 800f3a2:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f3a6:	fa21 f080 	sxtab16	r0, r1, r0
 800f3aa:	fa24 fa83 	sxtab16	sl, r4, r3
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800f3ae:	f8d7 9000 	ldr.w	r9, [r7]
  return (op1 >> op2) | (op1 << (32U - op2));
 800f3b2:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f3b6:	fa24 f383 	sxtab16	r3, r4, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f3ba:	fb2a 2b0b 	smlad	fp, sl, fp, r2
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f3be:	fa21 f289 	sxtab16	r2, r1, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f3c2:	fb23 b000 	smlad	r0, r3, r0, fp
  return (op1 >> op2) | (op1 << (32U - op2));
 800f3c6:	ea4f 2939 	mov.w	r9, r9, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f3ca:	fa21 fb89 	sxtab16	fp, r1, r9
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800f3ce:	f8d6 9008 	ldr.w	r9, [r6, #8]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f3d2:	fb2a 5a02 	smlad	sl, sl, r2, r5
 800f3d6:	fb23 a20b 	smlad	r2, r3, fp, sl
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f3da:	fa21 fa89 	sxtab16	sl, r1, r9
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800f3de:	f8dc 3008 	ldr.w	r3, [ip, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 800f3e2:	ea4f 2939 	mov.w	r9, r9, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f3e6:	fa21 fb89 	sxtab16	fp, r1, r9
 800f3ea:	fa24 f583 	sxtab16	r5, r4, r3
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800f3ee:	f8d7 9004 	ldr.w	r9, [r7, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 800f3f2:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f3f6:	fa24 f383 	sxtab16	r3, r4, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f3fa:	fb25 0a0a 	smlad	sl, r5, sl, r0
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f3fe:	fa21 f089 	sxtab16	r0, r1, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f402:	fb23 aa0b 	smlad	sl, r3, fp, sl
  return (op1 >> op2) | (op1 << (32U - op2));
 800f406:	ea4f 2939 	mov.w	r9, r9, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f40a:	fa21 f989 	sxtab16	r9, r1, r9
  memcpy(&val, *in_q7, 4);
 800f40e:	68f6      	ldr	r6, [r6, #12]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f410:	fb25 2500 	smlad	r5, r5, r0, r2
 800f414:	fb23 5509 	smlad	r5, r3, r9, r5
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f418:	fa21 fb86 	sxtab16	fp, r1, r6
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800f41c:	f8dc 300c 	ldr.w	r3, [ip, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
 800f420:	ea4f 2036 	mov.w	r0, r6, ror #8
 800f424:	f10c 0c10 	add.w	ip, ip, #16
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f428:	fa21 f080 	sxtab16	r0, r1, r0
 800f42c:	fa24 f983 	sxtab16	r9, r4, r3
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800f430:	68ba      	ldr	r2, [r7, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 800f432:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f436:	fa24 f383 	sxtab16	r3, r4, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f43a:	fb29 ab0b 	smlad	fp, r9, fp, sl
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f43e:	fa21 f682 	sxtab16	r6, r1, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f442:	fb23 b000 	smlad	r0, r3, r0, fp
  return (op1 >> op2) | (op1 << (32U - op2));
 800f446:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f44a:	fa21 f282 	sxtab16	r2, r1, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f44e:	fb29 5906 	smlad	r9, r9, r6, r5
 800f452:	fb23 9302 	smlad	r3, r3, r2, r9
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800f456:	45e6      	cmp	lr, ip
 800f458:	f107 0710 	add.w	r7, r7, #16
 800f45c:	f47f af7a 	bne.w	800f354 <arm_nn_vec_mat_mult_t_s8+0xb4>
  *in_q7 += 4;
 800f460:	9a00      	ldr	r2, [sp, #0]
 800f462:	9d07      	ldr	r5, [sp, #28]
 800f464:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 800f468:	468e      	mov	lr, r1
 800f46a:	442a      	add	r2, r5
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f46c:	45a9      	cmp	r9, r5
 800f46e:	f340 814b 	ble.w	800f708 <arm_nn_vec_mat_mult_t_s8+0x468>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f472:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800f474:	f99c 6000 	ldrsb.w	r6, [ip]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f478:	991d      	ldr	r1, [sp, #116]	; 0x74
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f47a:	443e      	add	r6, r7
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f47c:	f992 7000 	ldrsb.w	r7, [r2]
 800f480:	440f      	add	r7, r1
            res00 += lhs_value * rhs_value0;
 800f482:	fb06 0007 	mla	r0, r6, r7, r0
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f486:	f912 7009 	ldrsb.w	r7, [r2, r9]
 800f48a:	440f      	add	r7, r1
            res01 += lhs_value * rhs_value1;
 800f48c:	fb06 3307 	mla	r3, r6, r7, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f490:	1c6e      	adds	r6, r5, #1
 800f492:	45b1      	cmp	r9, r6
 800f494:	f340 8138 	ble.w	800f708 <arm_nn_vec_mat_mult_t_s8+0x468>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f498:	eb02 0609 	add.w	r6, r2, r9
 800f49c:	f996 7001 	ldrsb.w	r7, [r6, #1]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f4a0:	f99c 6001 	ldrsb.w	r6, [ip, #1]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f4a4:	440f      	add	r7, r1
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f4a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f4a8:	440e      	add	r6, r1
            res01 += lhs_value * rhs_value1;
 800f4aa:	fb06 3307 	mla	r3, r6, r7, r3
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f4ae:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f4b0:	f992 7001 	ldrsb.w	r7, [r2, #1]
 800f4b4:	440f      	add	r7, r1
            res00 += lhs_value * rhs_value0;
 800f4b6:	fb06 0007 	mla	r0, r6, r7, r0
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f4ba:	1cae      	adds	r6, r5, #2
 800f4bc:	454e      	cmp	r6, r9
            ++rhs_ptr;
 800f4be:	f102 0702 	add.w	r7, r2, #2
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f4c2:	f280 8121 	bge.w	800f708 <arm_nn_vec_mat_mult_t_s8+0x468>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f4c6:	f917 7009 	ldrsb.w	r7, [r7, r9]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f4ca:	f99c 6002 	ldrsb.w	r6, [ip, #2]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f4ce:	440f      	add	r7, r1
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f4d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f4d2:	440e      	add	r6, r1
            res01 += lhs_value * rhs_value1;
 800f4d4:	fb06 3307 	mla	r3, r6, r7, r3
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f4d8:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f4da:	f992 7002 	ldrsb.w	r7, [r2, #2]
 800f4de:	440f      	add	r7, r1
            res00 += lhs_value * rhs_value0;
 800f4e0:	fb06 0007 	mla	r0, r6, r7, r0
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f4e4:	1cee      	adds	r6, r5, #3
 800f4e6:	45b1      	cmp	r9, r6
            ++rhs_ptr;
 800f4e8:	f102 0703 	add.w	r7, r2, #3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f4ec:	f340 810c 	ble.w	800f708 <arm_nn_vec_mat_mult_t_s8+0x468>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f4f0:	f917 7009 	ldrsb.w	r7, [r7, r9]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f4f4:	f99c 6003 	ldrsb.w	r6, [ip, #3]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f4f8:	440f      	add	r7, r1
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f4fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f4fc:	440e      	add	r6, r1
            res01 += lhs_value * rhs_value1;
 800f4fe:	fb06 3307 	mla	r3, r6, r7, r3
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f502:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f504:	f992 7003 	ldrsb.w	r7, [r2, #3]
 800f508:	440f      	add	r7, r1
            res00 += lhs_value * rhs_value0;
 800f50a:	fb06 0007 	mla	r0, r6, r7, r0
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f50e:	1d2e      	adds	r6, r5, #4
 800f510:	45b1      	cmp	r9, r6
            ++rhs_ptr;
 800f512:	f102 0704 	add.w	r7, r2, #4
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f516:	f340 80f7 	ble.w	800f708 <arm_nn_vec_mat_mult_t_s8+0x468>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f51a:	f917 7009 	ldrsb.w	r7, [r7, r9]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f51e:	f99c 6004 	ldrsb.w	r6, [ip, #4]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f522:	440f      	add	r7, r1
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f524:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f526:	440e      	add	r6, r1
            res01 += lhs_value * rhs_value1;
 800f528:	fb06 3307 	mla	r3, r6, r7, r3
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f52c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f52e:	f992 7004 	ldrsb.w	r7, [r2, #4]
 800f532:	440f      	add	r7, r1
            res00 += lhs_value * rhs_value0;
 800f534:	fb06 0007 	mla	r0, r6, r7, r0
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f538:	1d6e      	adds	r6, r5, #5
 800f53a:	45b1      	cmp	r9, r6
            ++rhs_ptr;
 800f53c:	f102 0705 	add.w	r7, r2, #5
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f540:	f340 80e2 	ble.w	800f708 <arm_nn_vec_mat_mult_t_s8+0x468>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f544:	f917 7009 	ldrsb.w	r7, [r7, r9]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f548:	f99c 6005 	ldrsb.w	r6, [ip, #5]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f54c:	440f      	add	r7, r1
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f54e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f550:	440e      	add	r6, r1
            res01 += lhs_value * rhs_value1;
 800f552:	fb06 3307 	mla	r3, r6, r7, r3
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f556:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f558:	f992 7005 	ldrsb.w	r7, [r2, #5]
 800f55c:	440f      	add	r7, r1
            res00 += lhs_value * rhs_value0;
 800f55e:	fb06 0007 	mla	r0, r6, r7, r0
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f562:	1dae      	adds	r6, r5, #6
 800f564:	45b1      	cmp	r9, r6
            ++rhs_ptr;
 800f566:	f102 0706 	add.w	r7, r2, #6
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f56a:	f340 80cd 	ble.w	800f708 <arm_nn_vec_mat_mult_t_s8+0x468>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f56e:	f917 7009 	ldrsb.w	r7, [r7, r9]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f572:	f99c 6006 	ldrsb.w	r6, [ip, #6]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f576:	440f      	add	r7, r1
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f578:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f57a:	440e      	add	r6, r1
            res01 += lhs_value * rhs_value1;
 800f57c:	fb06 3307 	mla	r3, r6, r7, r3
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f580:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f582:	f992 7006 	ldrsb.w	r7, [r2, #6]
 800f586:	440f      	add	r7, r1
            res00 += lhs_value * rhs_value0;
 800f588:	fb06 0007 	mla	r0, r6, r7, r0
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f58c:	1dee      	adds	r6, r5, #7
 800f58e:	45b1      	cmp	r9, r6
            ++rhs_ptr;
 800f590:	f102 0707 	add.w	r7, r2, #7
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f594:	f340 80b8 	ble.w	800f708 <arm_nn_vec_mat_mult_t_s8+0x468>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f598:	f917 7009 	ldrsb.w	r7, [r7, r9]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f59c:	f99c 6007 	ldrsb.w	r6, [ip, #7]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f5a0:	440f      	add	r7, r1
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f5a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f5a4:	440e      	add	r6, r1
            res01 += lhs_value * rhs_value1;
 800f5a6:	fb06 3307 	mla	r3, r6, r7, r3
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f5aa:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f5ac:	f992 7007 	ldrsb.w	r7, [r2, #7]
 800f5b0:	440f      	add	r7, r1
            res00 += lhs_value * rhs_value0;
 800f5b2:	fb06 0007 	mla	r0, r6, r7, r0
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f5b6:	f105 0608 	add.w	r6, r5, #8
 800f5ba:	45b1      	cmp	r9, r6
            ++rhs_ptr;
 800f5bc:	f102 0708 	add.w	r7, r2, #8
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f5c0:	f340 80a2 	ble.w	800f708 <arm_nn_vec_mat_mult_t_s8+0x468>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f5c4:	f917 7009 	ldrsb.w	r7, [r7, r9]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f5c8:	f99c 6008 	ldrsb.w	r6, [ip, #8]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f5cc:	440f      	add	r7, r1
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f5ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f5d0:	440e      	add	r6, r1
            res01 += lhs_value * rhs_value1;
 800f5d2:	fb06 3307 	mla	r3, r6, r7, r3
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f5d6:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f5d8:	f992 7008 	ldrsb.w	r7, [r2, #8]
 800f5dc:	440f      	add	r7, r1
            res00 += lhs_value * rhs_value0;
 800f5de:	fb06 0007 	mla	r0, r6, r7, r0
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f5e2:	f105 0609 	add.w	r6, r5, #9
 800f5e6:	45b1      	cmp	r9, r6
            ++rhs_ptr;
 800f5e8:	f102 0709 	add.w	r7, r2, #9
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f5ec:	f340 808c 	ble.w	800f708 <arm_nn_vec_mat_mult_t_s8+0x468>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f5f0:	f917 7009 	ldrsb.w	r7, [r7, r9]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f5f4:	f99c 6009 	ldrsb.w	r6, [ip, #9]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f5f8:	440f      	add	r7, r1
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f5fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f5fc:	440e      	add	r6, r1
            res01 += lhs_value * rhs_value1;
 800f5fe:	fb06 3307 	mla	r3, r6, r7, r3
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f602:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f604:	f992 7009 	ldrsb.w	r7, [r2, #9]
 800f608:	440f      	add	r7, r1
            res00 += lhs_value * rhs_value0;
 800f60a:	fb06 0007 	mla	r0, r6, r7, r0
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f60e:	f105 060a 	add.w	r6, r5, #10
 800f612:	45b1      	cmp	r9, r6
            ++rhs_ptr;
 800f614:	f102 070a 	add.w	r7, r2, #10
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f618:	dd76      	ble.n	800f708 <arm_nn_vec_mat_mult_t_s8+0x468>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f61a:	f917 7009 	ldrsb.w	r7, [r7, r9]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f61e:	f99c 600a 	ldrsb.w	r6, [ip, #10]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f622:	440f      	add	r7, r1
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f624:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f626:	440e      	add	r6, r1
            res01 += lhs_value * rhs_value1;
 800f628:	fb06 3307 	mla	r3, r6, r7, r3
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f62c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f62e:	f992 700a 	ldrsb.w	r7, [r2, #10]
 800f632:	440f      	add	r7, r1
            res00 += lhs_value * rhs_value0;
 800f634:	fb06 0007 	mla	r0, r6, r7, r0
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f638:	f105 060b 	add.w	r6, r5, #11
 800f63c:	45b1      	cmp	r9, r6
            ++rhs_ptr;
 800f63e:	f102 070b 	add.w	r7, r2, #11
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f642:	dd61      	ble.n	800f708 <arm_nn_vec_mat_mult_t_s8+0x468>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f644:	f917 7009 	ldrsb.w	r7, [r7, r9]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f648:	f99c 600b 	ldrsb.w	r6, [ip, #11]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f64c:	440f      	add	r7, r1
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f64e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f650:	440e      	add	r6, r1
            res01 += lhs_value * rhs_value1;
 800f652:	fb06 3307 	mla	r3, r6, r7, r3
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f656:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f658:	f992 700b 	ldrsb.w	r7, [r2, #11]
 800f65c:	440f      	add	r7, r1
            res00 += lhs_value * rhs_value0;
 800f65e:	fb06 0007 	mla	r0, r6, r7, r0
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f662:	f105 060c 	add.w	r6, r5, #12
 800f666:	45b1      	cmp	r9, r6
            ++rhs_ptr;
 800f668:	f102 070c 	add.w	r7, r2, #12
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f66c:	dd4c      	ble.n	800f708 <arm_nn_vec_mat_mult_t_s8+0x468>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f66e:	f917 7009 	ldrsb.w	r7, [r7, r9]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f672:	f99c 600c 	ldrsb.w	r6, [ip, #12]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f676:	440f      	add	r7, r1
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f678:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f67a:	440e      	add	r6, r1
            res01 += lhs_value * rhs_value1;
 800f67c:	fb06 3307 	mla	r3, r6, r7, r3
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f680:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f682:	f992 700c 	ldrsb.w	r7, [r2, #12]
 800f686:	440f      	add	r7, r1
            res00 += lhs_value * rhs_value0;
 800f688:	fb06 0007 	mla	r0, r6, r7, r0
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f68c:	f105 060d 	add.w	r6, r5, #13
 800f690:	45b1      	cmp	r9, r6
            ++rhs_ptr;
 800f692:	f102 070d 	add.w	r7, r2, #13
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f696:	dd37      	ble.n	800f708 <arm_nn_vec_mat_mult_t_s8+0x468>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f698:	f917 7009 	ldrsb.w	r7, [r7, r9]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f69c:	f99c 600d 	ldrsb.w	r6, [ip, #13]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f6a0:	440f      	add	r7, r1
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f6a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f6a4:	440e      	add	r6, r1
            res01 += lhs_value * rhs_value1;
 800f6a6:	fb06 3307 	mla	r3, r6, r7, r3
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f6aa:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f6ac:	f992 700d 	ldrsb.w	r7, [r2, #13]
 800f6b0:	440f      	add	r7, r1
            res00 += lhs_value * rhs_value0;
 800f6b2:	fb06 0007 	mla	r0, r6, r7, r0
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f6b6:	f105 060e 	add.w	r6, r5, #14
 800f6ba:	45b1      	cmp	r9, r6
            ++rhs_ptr;
 800f6bc:	f102 070e 	add.w	r7, r2, #14
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f6c0:	dd22      	ble.n	800f708 <arm_nn_vec_mat_mult_t_s8+0x468>
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f6c2:	f917 7009 	ldrsb.w	r7, [r7, r9]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f6c6:	f99c 600e 	ldrsb.w	r6, [ip, #14]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f6ca:	440f      	add	r7, r1
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f6cc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f6ce:	440e      	add	r6, r1
            res01 += lhs_value * rhs_value1;
 800f6d0:	fb06 3307 	mla	r3, r6, r7, r3
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f6d4:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f6d6:	f992 700e 	ldrsb.w	r7, [r2, #14]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f6da:	350f      	adds	r5, #15
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f6dc:	440f      	add	r7, r1
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f6de:	45a9      	cmp	r9, r5
            res00 += lhs_value * rhs_value0;
 800f6e0:	fb06 0007 	mla	r0, r6, r7, r0
            ++rhs_ptr;
 800f6e4:	f102 060f 	add.w	r6, r2, #15
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f6e8:	dd0e      	ble.n	800f708 <arm_nn_vec_mat_mult_t_s8+0x468>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f6ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f6ec:	f99c 500f 	ldrsb.w	r5, [ip, #15]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f6f0:	f992 200f 	ldrsb.w	r2, [r2, #15]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f6f4:	f916 6009 	ldrsb.w	r6, [r6, r9]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f6f8:	440d      	add	r5, r1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f6fa:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f6fc:	440a      	add	r2, r1
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f6fe:	440e      	add	r6, r1
            res00 += lhs_value * rhs_value0;
 800f700:	fb05 0002 	mla	r0, r5, r2, r0
            res01 += lhs_value * rhs_value1;
 800f704:	fb05 3306 	mla	r3, r5, r6, r3
  return arm_nn_divide_by_power_of_two(
 800f708:	9e03      	ldr	r6, [sp, #12]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f70a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
  return arm_nn_divide_by_power_of_two(
 800f70c:	40b0      	lsls	r0, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f70e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f712:	2500      	movs	r5, #0
 800f714:	fbc0 2507 	smlal	r2, r5, r0, r7
  return arm_nn_divide_by_power_of_two(
 800f718:	9820      	ldr	r0, [sp, #128]	; 0x80
    result = (int32_t)(mult.long_long >> 31);
 800f71a:	0fd2      	lsrs	r2, r2, #31
  return arm_nn_divide_by_power_of_two(
 800f71c:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
 800f71e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
  return arm_nn_divide_by_power_of_two(
 800f722:	f340 81a9 	ble.w	800fa78 <arm_nn_vec_mat_mult_t_s8+0x7d8>
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f726:	991f      	ldr	r1, [sp, #124]	; 0x7c
  return arm_nn_divide_by_power_of_two(
 800f728:	40b3      	lsls	r3, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f72a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800f72e:	2500      	movs	r5, #0
 800f730:	fbc1 0503 	smlal	r0, r5, r1, r3
    if (result < 0)
 800f734:	2a00      	cmp	r2, #0
    result = (int32_t)(mult.long_long >> 31);
 800f736:	ea4f 73d0 	mov.w	r3, r0, lsr #31
    if (result < 0)
 800f73a:	f2c0 81c1 	blt.w	800fac0 <arm_nn_vec_mat_mult_t_s8+0x820>
 800f73e:	ea53 0345 	orrs.w	r3, r3, r5, lsl #1
 800f742:	f100 81b9 	bmi.w	800fab8 <arm_nn_vec_mat_mult_t_s8+0x818>
        res00 += dst_offset;
 800f746:	981e      	ldr	r0, [sp, #120]	; 0x78
 800f748:	4402      	add	r2, r0
        res01 += dst_offset;
 800f74a:	4403      	add	r3, r0
        res00 = MAX(res00, activation_min);
 800f74c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800f74e:	4282      	cmp	r2, r0
 800f750:	bfb8      	it	lt
 800f752:	4602      	movlt	r2, r0
        res01 = MAX(res01, activation_min);
 800f754:	4283      	cmp	r3, r0
 800f756:	bfb8      	it	lt
 800f758:	4603      	movlt	r3, r0
        res00 = MIN(res00, activation_max);
 800f75a:	9824      	ldr	r0, [sp, #144]	; 0x90
 800f75c:	4282      	cmp	r2, r0
 800f75e:	bfa8      	it	ge
 800f760:	4602      	movge	r2, r0
        *dst++ = (q7_t)res00;
 800f762:	9802      	ldr	r0, [sp, #8]
 800f764:	f800 2c02 	strb.w	r2, [r0, #-2]
        res01 = MIN(res01, activation_max);
 800f768:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f76a:	4293      	cmp	r3, r2
 800f76c:	bfa8      	it	ge
 800f76e:	4613      	movge	r3, r2
        *dst++ = (q7_t)res01;
 800f770:	f800 3c01 	strb.w	r3, [r0, #-1]
        rhs += 2 * rhs_cols;
 800f774:	9a00      	ldr	r2, [sp, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800f776:	1c83      	adds	r3, r0, #2
        rhs += 2 * rhs_cols;
 800f778:	9805      	ldr	r0, [sp, #20]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800f77a:	9302      	str	r3, [sp, #8]
        rhs += 2 * rhs_cols;
 800f77c:	4402      	add	r2, r0
 800f77e:	9200      	str	r2, [sp, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800f780:	9a01      	ldr	r2, [sp, #4]
 800f782:	3208      	adds	r2, #8
 800f784:	9201      	str	r2, [sp, #4]
 800f786:	9a06      	ldr	r2, [sp, #24]
 800f788:	4293      	cmp	r3, r2
 800f78a:	f47f add2 	bne.w	800f332 <arm_nn_vec_mat_mult_t_s8+0x92>
 800f78e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f790:	085b      	lsrs	r3, r3, #1
        rhs += 2 * rhs_cols;
 800f792:	fb03 0200 	mla	r2, r3, r0, r0
 800f796:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f798:	4410      	add	r0, r2
        q31_t res01 = *bias++;
 800f79a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        rhs += 2 * rhs_cols;
 800f79c:	900d      	str	r0, [sp, #52]	; 0x34
 800f79e:	3301      	adds	r3, #1
        q31_t res01 = *bias++;
 800f7a0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f7a4:	920e      	str	r2, [sp, #56]	; 0x38
        *dst++ = (q7_t)res01;
 800f7a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f7a8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800f7ac:	4671      	mov	r1, lr
 800f7ae:	930f      	str	r3, [sp, #60]	; 0x3c
    }

    if (rhs_rows % 2)
 800f7b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f7b2:	07db      	lsls	r3, r3, #31
 800f7b4:	f140 815c 	bpl.w	800fa70 <arm_nn_vec_mat_mult_t_s8+0x7d0>
    {
        const q7_t *lhs_ptr = &lhs[0];
        const q7_t *rhs_ptr = &rhs[0];

        q31_t res00 = *bias++;
 800f7b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38

        int32_t rhs_cols_idx = 0;

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800f7ba:	f1b9 0f0f 	cmp.w	r9, #15
        q31_t res00 = *bias++;
 800f7be:	681b      	ldr	r3, [r3, #0]
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800f7c0:	f340 8199 	ble.w	800faf6 <arm_nn_vec_mat_mult_t_s8+0x856>
 800f7c4:	f1a9 0210 	sub.w	r2, r9, #16
 800f7c8:	9804      	ldr	r0, [sp, #16]
 800f7ca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f7cc:	0912      	lsrs	r2, r2, #4
 800f7ce:	f102 0e01 	add.w	lr, r2, #1
 800f7d2:	ea4f 180e 	mov.w	r8, lr, lsl #4
 800f7d6:	eb00 170e 	add.w	r7, r0, lr, lsl #4
        {
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800f7da:	682e      	ldr	r6, [r5, #0]
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f7dc:	fa21 fa86 	sxtab16	sl, r1, r6
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800f7e0:	6802      	ldr	r2, [r0, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 800f7e2:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f7e6:	fa21 f686 	sxtab16	r6, r1, r6
 800f7ea:	fa24 fc82 	sxtab16	ip, r4, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 800f7ee:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f7f2:	fa24 f282 	sxtab16	r2, r4, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f7f6:	fb2c 3c0a 	smlad	ip, ip, sl, r3
 800f7fa:	fb22 c206 	smlad	r2, r2, r6, ip

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
            res00 = __SMLAD(val2, val0, res00);

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800f7fe:	686e      	ldr	r6, [r5, #4]
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f800:	fa21 fa86 	sxtab16	sl, r1, r6
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800f804:	6843      	ldr	r3, [r0, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 800f806:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f80a:	fa21 f686 	sxtab16	r6, r1, r6
 800f80e:	fa24 fc83 	sxtab16	ip, r4, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 800f812:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f816:	fa24 f383 	sxtab16	r3, r4, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f81a:	fb2c 2c0a 	smlad	ip, ip, sl, r2
 800f81e:	fb23 c306 	smlad	r3, r3, r6, ip

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
            res00 = __SMLAD(val2, val0, res00);

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800f822:	68ae      	ldr	r6, [r5, #8]
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f824:	fa21 fa86 	sxtab16	sl, r1, r6
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800f828:	6882      	ldr	r2, [r0, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 800f82a:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f82e:	fa21 f686 	sxtab16	r6, r1, r6
 800f832:	fa24 fc82 	sxtab16	ip, r4, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 800f836:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f83a:	fa24 f282 	sxtab16	r2, r4, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f83e:	fb2c 3c0a 	smlad	ip, ip, sl, r3
 800f842:	fb22 c206 	smlad	r2, r2, r6, ip
  memcpy(&val, *in_q7, 4);
 800f846:	68ee      	ldr	r6, [r5, #12]
  *in_q7 += 4;
 800f848:	3510      	adds	r5, #16
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f84a:	fa21 fa86 	sxtab16	sl, r1, r6
            res00 = __SMLAD(val3, val1, res00);
            res00 = __SMLAD(val2, val0, res00);

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800f84e:	68c3      	ldr	r3, [r0, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
 800f850:	ea4f 2636 	mov.w	r6, r6, ror #8
 800f854:	3010      	adds	r0, #16
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f856:	fa21 f686 	sxtab16	r6, r1, r6
 800f85a:	fa24 fc83 	sxtab16	ip, r4, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 800f85e:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f862:	fa24 f383 	sxtab16	r3, r4, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f866:	fb2c 2c0a 	smlad	ip, ip, sl, r2
 800f86a:	fb23 c306 	smlad	r3, r3, r6, ip
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800f86e:	4287      	cmp	r7, r0
 800f870:	d1b3      	bne.n	800f7da <arm_nn_vec_mat_mult_t_s8+0x53a>
 800f872:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f874:	9004      	str	r0, [sp, #16]
 800f876:	4442      	add	r2, r8
 800f878:	920d      	str	r2, [sp, #52]	; 0x34
 800f87a:	ea4f 120e 	mov.w	r2, lr, lsl #4
            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
            res00 = __SMLAD(val2, val0, res00);
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f87e:	4591      	cmp	r9, r2
 800f880:	f340 80cc 	ble.w	800fa1c <arm_nn_vec_mat_mult_t_s8+0x77c>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f884:	9c04      	ldr	r4, [sp, #16]
 800f886:	981c      	ldr	r0, [sp, #112]	; 0x70
 800f888:	f994 1000 	ldrsb.w	r1, [r4]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f88c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f88e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f890:	4401      	add	r1, r0
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f892:	f995 0000 	ldrsb.w	r0, [r5]
 800f896:	4430      	add	r0, r6

            res00 += lhs_value * rhs_value0;
 800f898:	fb00 3301 	mla	r3, r0, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f89c:	1c51      	adds	r1, r2, #1
 800f89e:	4589      	cmp	r9, r1
 800f8a0:	f340 80bc 	ble.w	800fa1c <arm_nn_vec_mat_mult_t_s8+0x77c>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f8a4:	981c      	ldr	r0, [sp, #112]	; 0x70
 800f8a6:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800f8aa:	4401      	add	r1, r0
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f8ac:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800f8b0:	4430      	add	r0, r6
            res00 += lhs_value * rhs_value0;
 800f8b2:	fb00 3301 	mla	r3, r0, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f8b6:	1c91      	adds	r1, r2, #2
 800f8b8:	4589      	cmp	r9, r1
 800f8ba:	f340 80af 	ble.w	800fa1c <arm_nn_vec_mat_mult_t_s8+0x77c>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f8be:	981c      	ldr	r0, [sp, #112]	; 0x70
 800f8c0:	f994 1002 	ldrsb.w	r1, [r4, #2]
 800f8c4:	4401      	add	r1, r0
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f8c6:	f995 0002 	ldrsb.w	r0, [r5, #2]
 800f8ca:	4430      	add	r0, r6
            res00 += lhs_value * rhs_value0;
 800f8cc:	fb00 3301 	mla	r3, r0, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f8d0:	1cd1      	adds	r1, r2, #3
 800f8d2:	4589      	cmp	r9, r1
 800f8d4:	f340 80a2 	ble.w	800fa1c <arm_nn_vec_mat_mult_t_s8+0x77c>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f8d8:	981c      	ldr	r0, [sp, #112]	; 0x70
 800f8da:	f994 1003 	ldrsb.w	r1, [r4, #3]
 800f8de:	4401      	add	r1, r0
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f8e0:	f995 0003 	ldrsb.w	r0, [r5, #3]
 800f8e4:	4430      	add	r0, r6
            res00 += lhs_value * rhs_value0;
 800f8e6:	fb00 3301 	mla	r3, r0, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f8ea:	1d11      	adds	r1, r2, #4
 800f8ec:	4589      	cmp	r9, r1
 800f8ee:	f340 8095 	ble.w	800fa1c <arm_nn_vec_mat_mult_t_s8+0x77c>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f8f2:	981c      	ldr	r0, [sp, #112]	; 0x70
 800f8f4:	f994 1004 	ldrsb.w	r1, [r4, #4]
 800f8f8:	4401      	add	r1, r0
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f8fa:	f995 0004 	ldrsb.w	r0, [r5, #4]
 800f8fe:	4430      	add	r0, r6
            res00 += lhs_value * rhs_value0;
 800f900:	fb00 3301 	mla	r3, r0, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f904:	1d51      	adds	r1, r2, #5
 800f906:	4589      	cmp	r9, r1
 800f908:	f340 8088 	ble.w	800fa1c <arm_nn_vec_mat_mult_t_s8+0x77c>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f90c:	981c      	ldr	r0, [sp, #112]	; 0x70
 800f90e:	f994 1005 	ldrsb.w	r1, [r4, #5]
 800f912:	4401      	add	r1, r0
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f914:	f995 0005 	ldrsb.w	r0, [r5, #5]
 800f918:	4430      	add	r0, r6
            res00 += lhs_value * rhs_value0;
 800f91a:	fb00 3301 	mla	r3, r0, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f91e:	1d91      	adds	r1, r2, #6
 800f920:	4589      	cmp	r9, r1
 800f922:	dd7b      	ble.n	800fa1c <arm_nn_vec_mat_mult_t_s8+0x77c>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f924:	981c      	ldr	r0, [sp, #112]	; 0x70
 800f926:	f994 1006 	ldrsb.w	r1, [r4, #6]
 800f92a:	4401      	add	r1, r0
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f92c:	f995 0006 	ldrsb.w	r0, [r5, #6]
 800f930:	4430      	add	r0, r6
            res00 += lhs_value * rhs_value0;
 800f932:	fb00 3301 	mla	r3, r0, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f936:	1dd1      	adds	r1, r2, #7
 800f938:	4589      	cmp	r9, r1
 800f93a:	dd6f      	ble.n	800fa1c <arm_nn_vec_mat_mult_t_s8+0x77c>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f93c:	981c      	ldr	r0, [sp, #112]	; 0x70
 800f93e:	f994 1007 	ldrsb.w	r1, [r4, #7]
 800f942:	4401      	add	r1, r0
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f944:	f995 0007 	ldrsb.w	r0, [r5, #7]
 800f948:	4430      	add	r0, r6
            res00 += lhs_value * rhs_value0;
 800f94a:	fb00 3301 	mla	r3, r0, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f94e:	f102 0108 	add.w	r1, r2, #8
 800f952:	4589      	cmp	r9, r1
 800f954:	dd62      	ble.n	800fa1c <arm_nn_vec_mat_mult_t_s8+0x77c>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f956:	981c      	ldr	r0, [sp, #112]	; 0x70
 800f958:	f994 1008 	ldrsb.w	r1, [r4, #8]
 800f95c:	4401      	add	r1, r0
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f95e:	f995 0008 	ldrsb.w	r0, [r5, #8]
 800f962:	4430      	add	r0, r6
            res00 += lhs_value * rhs_value0;
 800f964:	fb00 3301 	mla	r3, r0, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f968:	f102 0109 	add.w	r1, r2, #9
 800f96c:	4589      	cmp	r9, r1
 800f96e:	dd55      	ble.n	800fa1c <arm_nn_vec_mat_mult_t_s8+0x77c>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f970:	981c      	ldr	r0, [sp, #112]	; 0x70
 800f972:	f994 1009 	ldrsb.w	r1, [r4, #9]
 800f976:	4401      	add	r1, r0
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f978:	f995 0009 	ldrsb.w	r0, [r5, #9]
 800f97c:	4430      	add	r0, r6
            res00 += lhs_value * rhs_value0;
 800f97e:	fb00 3301 	mla	r3, r0, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f982:	f102 010a 	add.w	r1, r2, #10
 800f986:	4589      	cmp	r9, r1
 800f988:	dd48      	ble.n	800fa1c <arm_nn_vec_mat_mult_t_s8+0x77c>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f98a:	981c      	ldr	r0, [sp, #112]	; 0x70
 800f98c:	f994 100a 	ldrsb.w	r1, [r4, #10]
 800f990:	4401      	add	r1, r0
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f992:	f995 000a 	ldrsb.w	r0, [r5, #10]
 800f996:	4430      	add	r0, r6
            res00 += lhs_value * rhs_value0;
 800f998:	fb00 3301 	mla	r3, r0, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f99c:	f102 010b 	add.w	r1, r2, #11
 800f9a0:	4589      	cmp	r9, r1
 800f9a2:	dd3b      	ble.n	800fa1c <arm_nn_vec_mat_mult_t_s8+0x77c>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f9a4:	981c      	ldr	r0, [sp, #112]	; 0x70
 800f9a6:	f994 100b 	ldrsb.w	r1, [r4, #11]
 800f9aa:	4401      	add	r1, r0
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f9ac:	f995 000b 	ldrsb.w	r0, [r5, #11]
 800f9b0:	4430      	add	r0, r6
            res00 += lhs_value * rhs_value0;
 800f9b2:	fb00 3301 	mla	r3, r0, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f9b6:	f102 010c 	add.w	r1, r2, #12
 800f9ba:	4589      	cmp	r9, r1
 800f9bc:	dd2e      	ble.n	800fa1c <arm_nn_vec_mat_mult_t_s8+0x77c>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f9be:	981c      	ldr	r0, [sp, #112]	; 0x70
 800f9c0:	f994 100c 	ldrsb.w	r1, [r4, #12]
 800f9c4:	4401      	add	r1, r0
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f9c6:	f995 000c 	ldrsb.w	r0, [r5, #12]
 800f9ca:	4430      	add	r0, r6
            res00 += lhs_value * rhs_value0;
 800f9cc:	fb00 3301 	mla	r3, r0, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f9d0:	f102 010d 	add.w	r1, r2, #13
 800f9d4:	4589      	cmp	r9, r1
 800f9d6:	dd21      	ble.n	800fa1c <arm_nn_vec_mat_mult_t_s8+0x77c>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f9d8:	981c      	ldr	r0, [sp, #112]	; 0x70
 800f9da:	f994 100d 	ldrsb.w	r1, [r4, #13]
 800f9de:	4401      	add	r1, r0
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f9e0:	f995 000d 	ldrsb.w	r0, [r5, #13]
 800f9e4:	4430      	add	r0, r6
            res00 += lhs_value * rhs_value0;
 800f9e6:	fb00 3301 	mla	r3, r0, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f9ea:	f102 010e 	add.w	r1, r2, #14
 800f9ee:	4589      	cmp	r9, r1
 800f9f0:	dd14      	ble.n	800fa1c <arm_nn_vec_mat_mult_t_s8+0x77c>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f9f2:	981c      	ldr	r0, [sp, #112]	; 0x70
 800f9f4:	f994 100e 	ldrsb.w	r1, [r4, #14]
 800f9f8:	4401      	add	r1, r0
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f9fa:	f995 000e 	ldrsb.w	r0, [r5, #14]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f9fe:	320f      	adds	r2, #15
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800fa00:	4430      	add	r0, r6
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800fa02:	4591      	cmp	r9, r2
            res00 += lhs_value * rhs_value0;
 800fa04:	fb00 3301 	mla	r3, r0, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800fa08:	dd08      	ble.n	800fa1c <arm_nn_vec_mat_mult_t_s8+0x77c>
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800fa0a:	f995 200f 	ldrsb.w	r2, [r5, #15]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800fa0e:	f994 100f 	ldrsb.w	r1, [r4, #15]
 800fa12:	981c      	ldr	r0, [sp, #112]	; 0x70
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800fa14:	4432      	add	r2, r6
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800fa16:	4401      	add	r1, r0
            res00 += lhs_value * rhs_value0;
 800fa18:	fb01 3302 	mla	r3, r1, r2, r3
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800fa1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800fa1e:	981f      	ldr	r0, [sp, #124]	; 0x7c
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800fa20:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  return arm_nn_divide_by_power_of_two(
 800fa24:	4093      	lsls	r3, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800fa26:	2100      	movs	r1, #0
 800fa28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fa2c:	fbc3 2100 	smlal	r2, r1, r3, r0
  return arm_nn_divide_by_power_of_two(
 800fa30:	9b20      	ldr	r3, [sp, #128]	; 0x80
    result = (int32_t)(mult.long_long >> 31);
 800fa32:	0fd2      	lsrs	r2, r2, #31
  return arm_nn_divide_by_power_of_two(
 800fa34:	2b00      	cmp	r3, #0
    result = (int32_t)(mult.long_long >> 31);
 800fa36:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
  return arm_nn_divide_by_power_of_two(
 800fa3a:	dc0d      	bgt.n	800fa58 <arm_nn_vec_mat_mult_t_s8+0x7b8>
 800fa3c:	425b      	negs	r3, r3
    const q31_t remainder_mask = (1 << exponent) - 1;
 800fa3e:	2101      	movs	r1, #1
 800fa40:	4099      	lsls	r1, r3
 800fa42:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 800fa44:	ea02 0001 	and.w	r0, r2, r1
    if (result < 0)
 800fa48:	411a      	asrs	r2, r3
    q31_t threshold = remainder_mask >> 1;
 800fa4a:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 800fa4e:	bf48      	it	mi
 800fa50:	3101      	addmi	r1, #1
    if (remainder > threshold)
 800fa52:	4288      	cmp	r0, r1
        result++;
 800fa54:	bfc8      	it	gt
 800fa56:	3201      	addgt	r2, #1

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);

        // Add offset
        res00 += dst_offset;
 800fa58:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800fa5a:	4413      	add	r3, r2

        // Clamp the result
        res00 = MAX(res00, activation_min);
 800fa5c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	bfb8      	it	lt
 800fa62:	4613      	movlt	r3, r2
        res00 = MIN(res00, activation_max);
 800fa64:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fa66:	4293      	cmp	r3, r2
 800fa68:	bfa8      	it	ge
 800fa6a:	4613      	movge	r3, r2

        *dst = (q7_t)res00;
 800fa6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fa6e:	7013      	strb	r3, [r2, #0]
        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
}
 800fa70:	2000      	movs	r0, #0
 800fa72:	b013      	add	sp, #76	; 0x4c
 800fa74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int32_t remainder = remainder_mask & dividend;
 800fa78:	990c      	ldr	r1, [sp, #48]	; 0x30
    if (result < 0)
 800fa7a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    int32_t remainder = remainder_mask & dividend;
 800fa7c:	ea02 0001 	and.w	r0, r2, r1
    if (result < 0)
 800fa80:	413a      	asrs	r2, r7
 800fa82:	d422      	bmi.n	800faca <arm_nn_vec_mat_mult_t_s8+0x82a>
  return arm_nn_divide_by_power_of_two(
 800fa84:	fa03 f606 	lsl.w	r6, r3, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800fa88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800fa8a:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 800fa8e:	2500      	movs	r5, #0
 800fa90:	fbc3 c506 	smlal	ip, r5, r3, r6
 800fa94:	4663      	mov	r3, ip
    result = (int32_t)(mult.long_long >> 31);
 800fa96:	0fdb      	lsrs	r3, r3, #31
 800fa98:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    q31_t threshold = remainder_mask >> 1;
 800fa9c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    int32_t remainder = remainder_mask & dividend;
 800fa9e:	ea01 0503 	and.w	r5, r1, r3
    result = dividend >> exponent;
 800faa2:	413b      	asrs	r3, r7
    if (remainder > threshold)
 800faa4:	42b0      	cmp	r0, r6
        result++;
 800faa6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800faa8:	bfc8      	it	gt
 800faaa:	3201      	addgt	r2, #1
    if (result < 0)
 800faac:	2b00      	cmp	r3, #0
 800faae:	db05      	blt.n	800fabc <arm_nn_vec_mat_mult_t_s8+0x81c>
    if (remainder > threshold)
 800fab0:	42a8      	cmp	r0, r5
        result++;
 800fab2:	bfb8      	it	lt
 800fab4:	3301      	addlt	r3, #1
 800fab6:	e646      	b.n	800f746 <arm_nn_vec_mat_mult_t_s8+0x4a6>
    if (result < 0)
 800fab8:	2500      	movs	r5, #0
    q31_t threshold = remainder_mask >> 1;
 800faba:	4628      	mov	r0, r5
        threshold++;
 800fabc:	3001      	adds	r0, #1
 800fabe:	e7f7      	b.n	800fab0 <arm_nn_vec_mat_mult_t_s8+0x810>
    result = (int32_t)(mult.long_long >> 31);
 800fac0:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 800fac4:	2500      	movs	r5, #0
    q31_t threshold = remainder_mask >> 1;
 800fac6:	4628      	mov	r0, r5
 800fac8:	e7f0      	b.n	800faac <arm_nn_vec_mat_mult_t_s8+0x80c>
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800faca:	991f      	ldr	r1, [sp, #124]	; 0x7c
  return arm_nn_divide_by_power_of_two(
 800facc:	fa03 f506 	lsl.w	r5, r3, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800fad0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fad4:	2600      	movs	r6, #0
 800fad6:	fbc1 3605 	smlal	r3, r6, r1, r5
    result = (int32_t)(mult.long_long >> 31);
 800fada:	0fdb      	lsrs	r3, r3, #31
    int32_t remainder = remainder_mask & dividend;
 800fadc:	990c      	ldr	r1, [sp, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 800fade:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    int32_t remainder = remainder_mask & dividend;
 800fae2:	ea01 0503 	and.w	r5, r1, r3
    result = dividend >> exponent;
 800fae6:	990b      	ldr	r1, [sp, #44]	; 0x2c
        threshold++;
 800fae8:	9e10      	ldr	r6, [sp, #64]	; 0x40
    result = dividend >> exponent;
 800faea:	410b      	asrs	r3, r1
        threshold++;
 800faec:	e7da      	b.n	800faa4 <arm_nn_vec_mat_mult_t_s8+0x804>
        const q7_t *lhs_ptr = &lhs[0];
 800faee:	f8dd c010 	ldr.w	ip, [sp, #16]
        int32_t rhs_cols_idx = 0;
 800faf2:	2500      	movs	r5, #0
 800faf4:	e4ba      	b.n	800f46c <arm_nn_vec_mat_mult_t_s8+0x1cc>
        int32_t rhs_cols_idx = 0;
 800faf6:	2200      	movs	r2, #0
 800faf8:	e6c1      	b.n	800f87e <arm_nn_vec_mat_mult_t_s8+0x5de>
 800fafa:	bf00      	nop

0800fafc <arm_q7_to_q15_with_offset>:

void arm_q7_to_q15_with_offset(const q7_t *src,
                               q15_t *dst,
                               uint32_t block_size,
                               q15_t offset)
{
 800fafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    /*loop unrolling */
    block_cnt = block_size >> 2;

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
 800fb00:	b29e      	uxth	r6, r3
    block_cnt = block_size >> 2;
 800fb02:	ea4f 0992 	mov.w	r9, r2, lsr #2
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
 800fb06:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
    while (block_cnt > 0)
 800fb0a:	f1b9 0f00 	cmp.w	r9, #0
 800fb0e:	d020      	beq.n	800fb52 <arm_q7_to_q15_with_offset+0x56>

        /* Extract and sign extend each of the four q7 values to q15 */
        in_q15x2_1 = __SXTAB16(offset_q15x2, __ROR(in_q7x4, 8));
        in_q15x2_2 = __SXTAB16(offset_q15x2, in_q7x4);

        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
 800fb10:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800fb80 <arm_q7_to_q15_with_offset+0x84>
 800fb14:	464d      	mov	r5, r9
    while (block_cnt > 0)
 800fb16:	468e      	mov	lr, r1
 800fb18:	4607      	mov	r7, r0
  memcpy(&val, *in_q7, 4);
 800fb1a:	f857 ab04 	ldr.w	sl, [r7], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 800fb1e:	ea4f 2c3a 	mov.w	ip, sl, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800fb22:	fa26 fc8c 	sxtab16	ip, r6, ip
 800fb26:	fa26 fa8a 	sxtab16	sl, r6, sl
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
 800fb2a:	fa1f f48a 	uxth.w	r4, sl
 800fb2e:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
 800fb32:	ea0c 0c08 	and.w	ip, ip, r8
 800fb36:	ea4c 4c1a 	orr.w	ip, ip, sl, lsr #16
    while (block_cnt > 0)
 800fb3a:	3d01      	subs	r5, #1
  q15_t ** pQ15,
  q31_t    value)
{
  q31_t val = value;
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ15, &val, 4);
 800fb3c:	f8ce 4000 	str.w	r4, [lr]
 800fb40:	f8ce c004 	str.w	ip, [lr, #4]
#else
  (*pQ15)[0] = (val & 0x0FFFF);
  (*pQ15)[1] = (val >> 16) & 0x0FFFF;
#endif

 *pQ15 += 2;
 800fb44:	f10e 0e08 	add.w	lr, lr, #8
 800fb48:	d1e7      	bne.n	800fb1a <arm_q7_to_q15_with_offset+0x1e>
 800fb4a:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
  *in_q7 += 4;
 800fb4e:	eb00 0089 	add.w	r0, r0, r9, lsl #2
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
 800fb52:	f012 0203 	ands.w	r2, r2, #3
 800fb56:	d010      	beq.n	800fb7a <arm_q7_to_q15_with_offset+0x7e>
    {
        *dst++ = (q15_t)*src++ + offset;
 800fb58:	f990 4000 	ldrsb.w	r4, [r0]
 800fb5c:	b29b      	uxth	r3, r3
 800fb5e:	441c      	add	r4, r3
    while (block_cnt > 0)
 800fb60:	3a01      	subs	r2, #1
        *dst++ = (q15_t)*src++ + offset;
 800fb62:	800c      	strh	r4, [r1, #0]
    while (block_cnt > 0)
 800fb64:	d009      	beq.n	800fb7a <arm_q7_to_q15_with_offset+0x7e>
        *dst++ = (q15_t)*src++ + offset;
 800fb66:	f990 4001 	ldrsb.w	r4, [r0, #1]
    while (block_cnt > 0)
 800fb6a:	2a01      	cmp	r2, #1
        *dst++ = (q15_t)*src++ + offset;
 800fb6c:	441c      	add	r4, r3
 800fb6e:	804c      	strh	r4, [r1, #2]
    while (block_cnt > 0)
 800fb70:	d003      	beq.n	800fb7a <arm_q7_to_q15_with_offset+0x7e>
        *dst++ = (q15_t)*src++ + offset;
 800fb72:	f990 2002 	ldrsb.w	r2, [r0, #2]
 800fb76:	4413      	add	r3, r2
 800fb78:	808b      	strh	r3, [r1, #4]

        /* Decrement the loop counter */
        block_cnt--;
    }
}
 800fb7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb7e:	bf00      	nop
 800fb80:	ffff0000 	.word	0xffff0000

0800fb84 <arm_avgpool_s8>:
                          const cmsis_nn_dims *input_dims,
                          const q7_t *src,
                          const cmsis_nn_dims *filter_dims,
                          const cmsis_nn_dims *output_dims,
                          q7_t *dst)
{
 800fb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb88:	b09f      	sub	sp, #124	; 0x7c
  const int32_t kernel_x = filter_dims->w;
  const int32_t pad_y = pool_params->padding.h;
  const int32_t pad_x = pool_params->padding.w;
  const int32_t act_min = pool_params->activation.min;
  const int32_t act_max = pool_params->activation.max;
  const int32_t ch_src = input_dims->c;
 800fb8a:	f8d2 b00c 	ldr.w	fp, [r2, #12]
{
 800fb8e:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 800fb90:	9c28      	ldr	r4, [sp, #160]	; 0xa0
  const int32_t output_y = output_dims->h;
 800fb92:	686e      	ldr	r6, [r5, #4]
 800fb94:	960d      	str	r6, [sp, #52]	; 0x34
  const int32_t output_x = output_dims->w;
 800fb96:	68ae      	ldr	r6, [r5, #8]
{
 800fb98:	9316      	str	r3, [sp, #88]	; 0x58
  const int32_t input_x = input_dims->w;
 800fb9a:	e9d2 5701 	ldrd	r5, r7, [r2, #4]
  const int32_t stride_y = pool_params->stride.h;
 800fb9e:	684a      	ldr	r2, [r1, #4]
 800fba0:	9218      	str	r2, [sp, #96]	; 0x60
  const int32_t stride_x = pool_params->stride.w;
 800fba2:	680a      	ldr	r2, [r1, #0]
 800fba4:	920f      	str	r2, [sp, #60]	; 0x3c
  const int32_t kernel_y = filter_dims->h;
 800fba6:	6862      	ldr	r2, [r4, #4]
 800fba8:	9219      	str	r2, [sp, #100]	; 0x64
  const int32_t kernel_x = filter_dims->w;
 800fbaa:	68a2      	ldr	r2, [r4, #8]
  const int32_t act_min = pool_params->activation.min;
 800fbac:	690c      	ldr	r4, [r1, #16]
  const int32_t pad_y = pool_params->padding.h;
 800fbae:	68cb      	ldr	r3, [r1, #12]
  const int32_t kernel_x = filter_dims->w;
 800fbb0:	9210      	str	r2, [sp, #64]	; 0x40
  const int32_t act_min = pool_params->activation.min;
 800fbb2:	9411      	str	r4, [sp, #68]	; 0x44
  const int32_t pad_x = pool_params->padding.w;
 800fbb4:	688a      	ldr	r2, [r1, #8]
  const int32_t act_max = pool_params->activation.max;
 800fbb6:	694c      	ldr	r4, [r1, #20]

#if defined(ARM_MATH_DSP)

  /* Run the following code for CPU's with DSP extension
   */
  for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 800fbb8:	990d      	ldr	r1, [sp, #52]	; 0x34
  const int32_t act_max = pool_params->activation.max;
 800fbba:	9412      	str	r4, [sp, #72]	; 0x48
  for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 800fbbc:	2900      	cmp	r1, #0
 800fbbe:	f1c3 0400 	rsb	r4, r3, #0
  q31_t *buffer = (q31_t *)ctx->buf;
 800fbc2:	6800      	ldr	r0, [r0, #0]
  const int32_t output_x = output_dims->w;
 800fbc4:	960e      	str	r6, [sp, #56]	; 0x38
  const int32_t input_x = input_dims->w;
 800fbc6:	9717      	str	r7, [sp, #92]	; 0x5c
  const int32_t pad_x = pool_params->padding.w;
 800fbc8:	921a      	str	r2, [sp, #104]	; 0x68
  for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 800fbca:	940a      	str	r4, [sp, #40]	; 0x28
 800fbcc:	f340 80bb 	ble.w	800fd46 <arm_avgpool_s8+0x1c2>
  {
    for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 800fbd0:	4251      	negs	r1, r2
 800fbd2:	2e00      	cmp	r6, #0
 800fbd4:	911b      	str	r1, [sp, #108]	; 0x6c
 800fbd6:	f340 80b6 	ble.w	800fd46 <arm_avgpool_s8+0x1c2>
 800fbda:	930c      	str	r3, [sp, #48]	; 0x30
 800fbdc:	18eb      	adds	r3, r5, r3
 800fbde:	f1a0 0a04 	sub.w	sl, r0, #4
 800fbe2:	930b      	str	r3, [sp, #44]	; 0x2c
 800fbe4:	fb07 f30b 	mul.w	r3, r7, fp
 800fbe8:	9302      	str	r3, [sp, #8]
 800fbea:	eb0a 038b 	add.w	r3, sl, fp, lsl #2
 800fbee:	9314      	str	r3, [sp, #80]	; 0x50
 800fbf0:	fb0b f306 	mul.w	r3, fp, r6
 800fbf4:	931c      	str	r3, [sp, #112]	; 0x70
  for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	9313      	str	r3, [sp, #76]	; 0x4c
 800fbfa:	18bb      	adds	r3, r7, r2
 800fbfc:	931d      	str	r3, [sp, #116]	; 0x74
    for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 800fbfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	bfc8      	it	gt
 800fc06:	2200      	movgt	r2, #0
 800fc08:	18d3      	adds	r3, r2, r3
 800fc0a:	9208      	str	r2, [sp, #32]
 800fc0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fc0e:	fb02 f303 	mul.w	r3, r2, r3
 800fc12:	9315      	str	r3, [sp, #84]	; 0x54
      const int32_t kernel_y_start = MAX(0, -idx_y);
      const int32_t kernel_x_start = MAX(0, -idx_x);

      /* Condition for kernel end dimension:
             (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
      const int32_t kernel_y_end = MIN(kernel_y, input_y - idx_y);
 800fc14:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fc16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc18:	4293      	cmp	r3, r2
 800fc1a:	bfa8      	it	ge
 800fc1c:	4613      	movge	r3, r2
 800fc1e:	9301      	str	r3, [sp, #4]
 800fc20:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800fc22:	9307      	str	r3, [sp, #28]
 800fc24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fc26:	9306      	str	r3, [sp, #24]
    for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 800fc28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fc2a:	9304      	str	r3, [sp, #16]
      const int32_t kernel_y_end = MIN(kernel_y, input_y - idx_y);
 800fc2c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800fc2e:	9305      	str	r3, [sp, #20]
    for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 800fc30:	2300      	movs	r3, #0
 800fc32:	9309      	str	r3, [sp, #36]	; 0x24
      const int32_t kernel_x_start = MAX(0, -idx_x);
 800fc34:	9b04      	ldr	r3, [sp, #16]
      const int32_t kernel_x_end = MIN(kernel_x, input_x - idx_x);
 800fc36:	9a10      	ldr	r2, [sp, #64]	; 0x40
      const int32_t kernel_x_start = MAX(0, -idx_x);
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	9b07      	ldr	r3, [sp, #28]
 800fc3c:	bfd8      	it	le
 800fc3e:	4698      	movle	r8, r3
      const int32_t kernel_x_end = MIN(kernel_x, input_x - idx_x);
 800fc40:	9b06      	ldr	r3, [sp, #24]
      const int32_t kernel_x_start = MAX(0, -idx_x);
 800fc42:	bfc8      	it	gt
 800fc44:	f04f 0800 	movgt.w	r8, #0
      const int32_t kernel_x_end = MIN(kernel_x, input_x - idx_x);
 800fc48:	4293      	cmp	r3, r2
 800fc4a:	bfa8      	it	ge
 800fc4c:	4613      	movge	r3, r2
 800fc4e:	4699      	mov	r9, r3

      int count = 0;

      for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 800fc50:	9a01      	ldr	r2, [sp, #4]
 800fc52:	9b08      	ldr	r3, [sp, #32]
 800fc54:	4293      	cmp	r3, r2
 800fc56:	f280 808b 	bge.w	800fd70 <arm_avgpool_s8+0x1ec>
 800fc5a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fc5c:	469e      	mov	lr, r3
 800fc5e:	9b04      	ldr	r3, [sp, #16]
 800fc60:	eb03 0c02 	add.w	ip, r3, r2
 800fc64:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fc66:	44c4      	add	ip, r8
 800fc68:	fb0b 3c0c 	mla	ip, fp, ip, r3
 800fc6c:	eba9 0308 	sub.w	r3, r9, r8
 800fc70:	f10c 3cff 	add.w	ip, ip, #4294967295
      int count = 0;
 800fc74:	2500      	movs	r5, #0
 800fc76:	9303      	str	r3, [sp, #12]
      {
        for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
 800fc78:	45c8      	cmp	r8, r9
 800fc7a:	da19      	bge.n	800fcb0 <arm_avgpool_s8+0x12c>
 800fc7c:	9b03      	ldr	r3, [sp, #12]
 800fc7e:	eb0b 040c 	add.w	r4, fp, ip
 800fc82:	195f      	adds	r7, r3, r5
 800fc84:	4666      	mov	r6, ip
        {
          const q7_t *start = src + ch_src * (k_x + idx_x + (k_y + idx_y) * input_x);

          if (count == 0)
 800fc86:	2d00      	cmp	r5, #0
 800fc88:	d061      	beq.n	800fd4e <arm_avgpool_s8+0x1ca>
              buffer[i] = start[i];
            }
          }
          else
          {
            for (int i = 0; i < ch_src; i++)
 800fc8a:	f1bb 0f00 	cmp.w	fp, #0
 800fc8e:	dd0a      	ble.n	800fca6 <arm_avgpool_s8+0x122>
 800fc90:	4651      	mov	r1, sl
 800fc92:	4632      	mov	r2, r6
            {
              buffer[i] = __QADD(start[i], buffer[i]);
 800fc94:	f912 3f01 	ldrsb.w	r3, [r2, #1]!

__STATIC_FORCEINLINE  int32_t __QADD( int32_t op1,  int32_t op2)
{
  int32_t result;

  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800fc98:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800fc9c:	fa80 f383 	qadd	r3, r3, r0
            for (int i = 0; i < ch_src; i++)
 800fca0:	42a2      	cmp	r2, r4
              buffer[i] = __QADD(start[i], buffer[i]);
 800fca2:	600b      	str	r3, [r1, #0]
            for (int i = 0; i < ch_src; i++)
 800fca4:	d1f6      	bne.n	800fc94 <arm_avgpool_s8+0x110>
            }
          }
          count++;
 800fca6:	3501      	adds	r5, #1
        for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
 800fca8:	42bd      	cmp	r5, r7
 800fcaa:	445e      	add	r6, fp
 800fcac:	445c      	add	r4, fp
 800fcae:	d1ea      	bne.n	800fc86 <arm_avgpool_s8+0x102>
      for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 800fcb0:	9b02      	ldr	r3, [sp, #8]
 800fcb2:	449c      	add	ip, r3
 800fcb4:	9b01      	ldr	r3, [sp, #4]
 800fcb6:	f10e 0e01 	add.w	lr, lr, #1
 800fcba:	4573      	cmp	r3, lr
 800fcbc:	d1dc      	bne.n	800fc78 <arm_avgpool_s8+0xf4>
  const int half_count = count / 2;
 800fcbe:	1068      	asrs	r0, r5, #1
  for (int i = 0; i < length; i++)
 800fcc0:	f1bb 0f00 	cmp.w	fp, #0
 800fcc4:	dd17      	ble.n	800fcf6 <arm_avgpool_s8+0x172>
 800fcc6:	9b05      	ldr	r3, [sp, #20]
 800fcc8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800fcca:	e9dd 4611 	ldrd	r4, r6, [sp, #68]	; 0x44
 800fcce:	4652      	mov	r2, sl
 800fcd0:	1e59      	subs	r1, r3, #1
    int32_t sum = buffer[i] > 0 ? (buffer[i] + half_count) : (buffer[i] - half_count);
 800fcd2:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	bfcc      	ite	gt
 800fcda:	181b      	addgt	r3, r3, r0
 800fcdc:	1a1b      	suble	r3, r3, r0
    sum = sum / count;
 800fcde:	fb93 f3f5 	sdiv	r3, r3, r5
    sum = MAX(sum, act_min);
 800fce2:	42a3      	cmp	r3, r4
 800fce4:	bfb8      	it	lt
 800fce6:	4623      	movlt	r3, r4
    sum = MIN(sum, act_max);
 800fce8:	42b3      	cmp	r3, r6
 800fcea:	bfa8      	it	ge
 800fcec:	4633      	movge	r3, r6
  for (int i = 0; i < length; i++)
 800fcee:	4297      	cmp	r7, r2
    target[i] = (q7_t)sum;
 800fcf0:	f801 3f01 	strb.w	r3, [r1, #1]!
  for (int i = 0; i < length; i++)
 800fcf4:	d1ed      	bne.n	800fcd2 <arm_avgpool_s8+0x14e>
        }
      }
      scale_q31_to_q7_and_clamp(buffer, dst, ch_src, count, act_min, act_max);
      dst += ch_src;
 800fcf6:	9a05      	ldr	r2, [sp, #20]
    for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 800fcf8:	9904      	ldr	r1, [sp, #16]
 800fcfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
      dst += ch_src;
 800fcfc:	445a      	add	r2, fp
 800fcfe:	9205      	str	r2, [sp, #20]
    for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 800fd00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fd02:	4411      	add	r1, r2
 800fd04:	9104      	str	r1, [sp, #16]
 800fd06:	9907      	ldr	r1, [sp, #28]
 800fd08:	1a89      	subs	r1, r1, r2
 800fd0a:	9107      	str	r1, [sp, #28]
 800fd0c:	9906      	ldr	r1, [sp, #24]
 800fd0e:	1a8a      	subs	r2, r1, r2
 800fd10:	9206      	str	r2, [sp, #24]
 800fd12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fd14:	3301      	adds	r3, #1
 800fd16:	429a      	cmp	r2, r3
 800fd18:	9309      	str	r3, [sp, #36]	; 0x24
 800fd1a:	d18b      	bne.n	800fc34 <arm_avgpool_s8+0xb0>
      dst += ch_src;
 800fd1c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800fd1e:	991c      	ldr	r1, [sp, #112]	; 0x70
  for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 800fd20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      dst += ch_src;
 800fd22:	440a      	add	r2, r1
 800fd24:	922a      	str	r2, [sp, #168]	; 0xa8
  for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 800fd26:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fd28:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fd2a:	4411      	add	r1, r2
 800fd2c:	910a      	str	r1, [sp, #40]	; 0x28
 800fd2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fd30:	1a89      	subs	r1, r1, r2
 800fd32:	910c      	str	r1, [sp, #48]	; 0x30
 800fd34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fd36:	1a8a      	subs	r2, r1, r2
 800fd38:	920b      	str	r2, [sp, #44]	; 0x2c
 800fd3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fd3c:	3301      	adds	r3, #1
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	9313      	str	r3, [sp, #76]	; 0x4c
 800fd42:	f47f af5c 	bne.w	800fbfe <arm_avgpool_s8+0x7a>
    }
  }

#endif
  return ARM_MATH_SUCCESS;
}
 800fd46:	2000      	movs	r0, #0
 800fd48:	b01f      	add	sp, #124	; 0x7c
 800fd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for (int i = 0; i < ch_src; i++)
 800fd4e:	f1bb 0f00 	cmp.w	fp, #0
 800fd52:	dda8      	ble.n	800fca6 <arm_avgpool_s8+0x122>
 800fd54:	4652      	mov	r2, sl
 800fd56:	4633      	mov	r3, r6
              buffer[i] = start[i];
 800fd58:	f913 1f01 	ldrsb.w	r1, [r3, #1]!
 800fd5c:	f842 1f04 	str.w	r1, [r2, #4]!
            for (int i = 0; i < ch_src; i++)
 800fd60:	42a3      	cmp	r3, r4
 800fd62:	d1f9      	bne.n	800fd58 <arm_avgpool_s8+0x1d4>
          count++;
 800fd64:	3501      	adds	r5, #1
        for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
 800fd66:	42bd      	cmp	r5, r7
 800fd68:	445e      	add	r6, fp
 800fd6a:	445c      	add	r4, fp
 800fd6c:	d18b      	bne.n	800fc86 <arm_avgpool_s8+0x102>
 800fd6e:	e79f      	b.n	800fcb0 <arm_avgpool_s8+0x12c>
      for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 800fd70:	2000      	movs	r0, #0
      int count = 0;
 800fd72:	4605      	mov	r5, r0
 800fd74:	e7a4      	b.n	800fcc0 <arm_avgpool_s8+0x13c>
 800fd76:	bf00      	nop

0800fd78 <arm_avgpool_s8_get_buffer_size>:
  return (ch_src * sizeof(int32_t));
#else
  (void)ch_src;
  return 0;
#endif
}
 800fd78:	0088      	lsls	r0, r1, #2
 800fd7a:	4770      	bx	lr

0800fd7c <arm_max_pool_s8>:
                const cmsis_nn_dims *input_dims,
                const q7_t *src,
                const cmsis_nn_dims *filter_dims,
                const cmsis_nn_dims *output_dims,
                q7_t *dst)
{
 800fd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd80:	b0a3      	sub	sp, #140	; 0x8c
 800fd82:	e9dd 042c 	ldrd	r0, r4, [sp, #176]	; 0xb0
    const int32_t input_y = input_dims->h;
    const int32_t input_x = input_dims->w;
    const int32_t output_y = output_dims->h;
 800fd86:	6865      	ldr	r5, [r4, #4]
    const int32_t output_x = output_dims->w;
 800fd88:	68a4      	ldr	r4, [r4, #8]
    const int32_t kernel_x = filter_dims->w;
    const int32_t pad_y = pool_params->padding.h;
    const int32_t pad_x = pool_params->padding.w;
    const int32_t act_min = pool_params->activation.min;
    const int32_t act_max = pool_params->activation.max;
    const int32_t channel_in = input_dims->c;
 800fd8a:	f8d2 a00c 	ldr.w	sl, [r2, #12]
    const int32_t output_x = output_dims->w;
 800fd8e:	940d      	str	r4, [sp, #52]	; 0x34
    const int32_t input_x = input_dims->w;
 800fd90:	e9d2 4601 	ldrd	r4, r6, [r2, #4]
    const int32_t stride_y = pool_params->stride.h;
 800fd94:	684a      	ldr	r2, [r1, #4]
 800fd96:	921d      	str	r2, [sp, #116]	; 0x74
    const int32_t stride_x = pool_params->stride.w;
 800fd98:	680a      	ldr	r2, [r1, #0]
 800fd9a:	920f      	str	r2, [sp, #60]	; 0x3c
    const int32_t kernel_y = filter_dims->h;
 800fd9c:	6842      	ldr	r2, [r0, #4]
 800fd9e:	921e      	str	r2, [sp, #120]	; 0x78
    const int32_t kernel_x = filter_dims->w;
 800fda0:	6882      	ldr	r2, [r0, #8]
 800fda2:	9210      	str	r2, [sp, #64]	; 0x40
    const int32_t pad_x = pool_params->padding.w;
 800fda4:	688a      	ldr	r2, [r1, #8]
{
 800fda6:	931c      	str	r3, [sp, #112]	; 0x70
    const int32_t pad_x = pool_params->padding.w;
 800fda8:	9217      	str	r2, [sp, #92]	; 0x5c
    const int32_t pad_y = pool_params->padding.h;
 800fdaa:	68cb      	ldr	r3, [r1, #12]
    const int32_t act_min = pool_params->activation.min;
 800fdac:	690a      	ldr	r2, [r1, #16]
 800fdae:	9218      	str	r2, [sp, #96]	; 0x60
    const int32_t act_max = pool_params->activation.max;
 800fdb0:	694a      	ldr	r2, [r1, #20]
 800fdb2:	9219      	str	r2, [sp, #100]	; 0x64
    (void)ctx;
    q7_t *dst_base = dst;

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 800fdb4:	2d00      	cmp	r5, #0
 800fdb6:	f1c3 0200 	rsb	r2, r3, #0
    const int32_t output_y = output_dims->h;
 800fdba:	9516      	str	r5, [sp, #88]	; 0x58
    const int32_t input_x = input_dims->w;
 800fdbc:	9615      	str	r6, [sp, #84]	; 0x54
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 800fdbe:	9211      	str	r2, [sp, #68]	; 0x44
 800fdc0:	f340 80f7 	ble.w	800ffb2 <arm_max_pool_s8+0x236>
    {
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 800fdc4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800fdc6:	4248      	negs	r0, r1
 800fdc8:	9020      	str	r0, [sp, #128]	; 0x80
 800fdca:	980d      	ldr	r0, [sp, #52]	; 0x34
    int32_t cnt = length >> 2;
 800fdcc:	ea4f 02aa 	mov.w	r2, sl, asr #2
 800fdd0:	2800      	cmp	r0, #0
 800fdd2:	9202      	str	r2, [sp, #8]
    cnt = length & 0x3;
 800fdd4:	f00a 0603 	and.w	r6, sl, #3
 800fdd8:	f340 80eb 	ble.w	800ffb2 <arm_max_pool_s8+0x236>
 800fddc:	9314      	str	r3, [sp, #80]	; 0x50
 800fdde:	18e3      	adds	r3, r4, r3
 800fde0:	9312      	str	r3, [sp, #72]	; 0x48
 800fde2:	fb0a f300 	mul.w	r3, sl, r0
 800fde6:	931f      	str	r3, [sp, #124]	; 0x7c
 800fde8:	0093      	lsls	r3, r2, #2
 800fdea:	9303      	str	r3, [sp, #12]
 800fdec:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800fdee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800fdf2:	9313      	str	r3, [sp, #76]	; 0x4c
 800fdf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fdf6:	fb03 f20a 	mul.w	r2, r3, sl
 800fdfa:	9207      	str	r2, [sp, #28]
 800fdfc:	440b      	add	r3, r1
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 800fdfe:	2200      	movs	r2, #0
 800fe00:	921a      	str	r2, [sp, #104]	; 0x68
 800fe02:	9321      	str	r3, [sp, #132]	; 0x84
 800fe04:	46b0      	mov	r8, r6
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 800fe06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fe08:	9a14      	ldr	r2, [sp, #80]	; 0x50
            /* Condition for kernel start dimension: (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t ker_y_start = MAX(0, -base_idx_y);
            const int32_t ker_x_start = MAX(0, -base_idx_x);

            /* Condition for kernel end dimension: (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 800fe0a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	bfc8      	it	gt
 800fe10:	2200      	movgt	r2, #0
 800fe12:	4413      	add	r3, r2
 800fe14:	920e      	str	r2, [sp, #56]	; 0x38
 800fe16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fe18:	fb02 f303 	mul.w	r3, r2, r3
 800fe1c:	931b      	str	r3, [sp, #108]	; 0x6c
 800fe1e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800fe20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fe22:	4293      	cmp	r3, r2
 800fe24:	bfa8      	it	ge
 800fe26:	4613      	movge	r3, r2
 800fe28:	9306      	str	r3, [sp, #24]
 800fe2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fe2c:	930b      	str	r3, [sp, #44]	; 0x2c
 800fe2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe30:	930a      	str	r3, [sp, #40]	; 0x28
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 800fe32:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800fe34:	9309      	str	r3, [sp, #36]	; 0x24
 800fe36:	2300      	movs	r3, #0
 800fe38:	930c      	str	r3, [sp, #48]	; 0x30
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 800fe3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 800fe3e:	9910      	ldr	r1, [sp, #64]	; 0x40

            int count = 0;

            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 800fe40:	9d0e      	ldr	r5, [sp, #56]	; 0x38
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 800fe42:	2a00      	cmp	r2, #0
 800fe44:	bfd8      	it	le
 800fe46:	461c      	movle	r4, r3
 800fe48:	9b03      	ldr	r3, [sp, #12]
 800fe4a:	eba7 0003 	sub.w	r0, r7, r3
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 800fe4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe50:	9001      	str	r0, [sp, #4]
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 800fe52:	bfc8      	it	gt
 800fe54:	2400      	movgt	r4, #0
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 800fe56:	428b      	cmp	r3, r1
 800fe58:	bfa8      	it	ge
 800fe5a:	460b      	movge	r3, r1
 800fe5c:	4699      	mov	r9, r3
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 800fe5e:	9b06      	ldr	r3, [sp, #24]
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 800fe60:	9408      	str	r4, [sp, #32]
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 800fe62:	429d      	cmp	r5, r3
 800fe64:	da7e      	bge.n	800ff64 <arm_max_pool_s8+0x1e8>
 800fe66:	454c      	cmp	r4, r9
 800fe68:	da7c      	bge.n	800ff64 <arm_max_pool_s8+0x1e8>
 800fe6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fe6c:	18a6      	adds	r6, r4, r2
 800fe6e:	441e      	add	r6, r3
 800fe70:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800fe72:	fb0a 3606 	mla	r6, sl, r6, r3
                {
                    const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);

                    if (count == 0)
                    {
                        memcpy(dst, start, channel_in);
 800fe76:	4652      	mov	r2, sl
 800fe78:	4631      	mov	r1, r6
 800fe7a:	f002 f9de 	bl	801223a <memcpy>
                        count++;
 800fe7e:	e9cd 5604 	strd	r5, r6, [sp, #16]
 800fe82:	46a4      	mov	ip, r4
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 800fe84:	f10c 0c01 	add.w	ip, ip, #1
 800fe88:	4456      	add	r6, sl
 800fe8a:	45e1      	cmp	r9, ip
                    const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);
 800fe8c:	bf18      	it	ne
 800fe8e:	4634      	movne	r4, r6
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 800fe90:	d056      	beq.n	800ff40 <arm_max_pool_s8+0x1c4>
    while (cnt > 0l)
 800fe92:	9b02      	ldr	r3, [sp, #8]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	dd63      	ble.n	800ff60 <arm_max_pool_s8+0x1e4>
 800fe98:	9801      	ldr	r0, [sp, #4]
 800fe9a:	463d      	mov	r5, r7
  memcpy(&val, in_q7, 4);
 800fe9c:	6803      	ldr	r3, [r0, #0]
  memcpy(&val, *in_q7, 4);
 800fe9e:	f854 2b04 	ldr.w	r2, [r4], #4
  q7_t ** pQ7,
  q31_t   value)
{
  q31_t val = value;
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ7, &val, 4);
 800fea2:	b259      	sxtb	r1, r3
 800fea4:	fa4f fe82 	sxtb.w	lr, r2
 800fea8:	458e      	cmp	lr, r1
 800feaa:	bfb8      	it	lt
 800feac:	468e      	movlt	lr, r1
 800feae:	2100      	movs	r1, #0
 800feb0:	f343 2b07 	sbfx	fp, r3, #8, #8
 800feb4:	f36e 0107 	bfi	r1, lr, #0, #8
 800feb8:	f342 2e07 	sbfx	lr, r2, #8, #8
 800febc:	45de      	cmp	lr, fp
 800febe:	bfb8      	it	lt
 800fec0:	46de      	movlt	lr, fp
 800fec2:	f36e 210f 	bfi	r1, lr, #8, #8
 800fec6:	f343 4b07 	sbfx	fp, r3, #16, #8
 800feca:	f342 4e07 	sbfx	lr, r2, #16, #8
 800fece:	45de      	cmp	lr, fp
 800fed0:	ea4f 6222 	mov.w	r2, r2, asr #24
 800fed4:	ea4f 6323 	mov.w	r3, r3, asr #24
 800fed8:	bfb8      	it	lt
 800feda:	46de      	movlt	lr, fp
 800fedc:	429a      	cmp	r2, r3
 800fede:	bfb8      	it	lt
 800fee0:	461a      	movlt	r2, r3
 800fee2:	f36e 4117 	bfi	r1, lr, #16, #8
 800fee6:	f362 611f 	bfi	r1, r2, #24, #8
 800feea:	f840 1b04 	str.w	r1, [r0], #4
 800feee:	42b8      	cmp	r0, r7
 800fef0:	d1d4      	bne.n	800fe9c <arm_max_pool_s8+0x120>
 800fef2:	9b03      	ldr	r3, [sp, #12]
 800fef4:	199c      	adds	r4, r3, r6
    while (cnt > 0l)
 800fef6:	f1b8 0f00 	cmp.w	r8, #0
 800fefa:	d0c3      	beq.n	800fe84 <arm_max_pool_s8+0x108>
        if (*src > *dst)
 800fefc:	f994 3000 	ldrsb.w	r3, [r4]
 800ff00:	f995 2000 	ldrsb.w	r2, [r5]
 800ff04:	429a      	cmp	r2, r3
            *dst = *src;
 800ff06:	bfb8      	it	lt
 800ff08:	702b      	strblt	r3, [r5, #0]
    while (cnt > 0l)
 800ff0a:	f1b8 0f01 	cmp.w	r8, #1
 800ff0e:	d0b9      	beq.n	800fe84 <arm_max_pool_s8+0x108>
        if (*src > *dst)
 800ff10:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800ff14:	f995 2001 	ldrsb.w	r2, [r5, #1]
 800ff18:	429a      	cmp	r2, r3
            *dst = *src;
 800ff1a:	bfb8      	it	lt
 800ff1c:	706b      	strblt	r3, [r5, #1]
    while (cnt > 0l)
 800ff1e:	f1b8 0f02 	cmp.w	r8, #2
 800ff22:	d0af      	beq.n	800fe84 <arm_max_pool_s8+0x108>
        if (*src > *dst)
 800ff24:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800ff28:	f995 2002 	ldrsb.w	r2, [r5, #2]
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 800ff2c:	f10c 0c01 	add.w	ip, ip, #1
        if (*src > *dst)
 800ff30:	429a      	cmp	r2, r3
            *dst = *src;
 800ff32:	bfb8      	it	lt
 800ff34:	70ab      	strblt	r3, [r5, #2]
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 800ff36:	4456      	add	r6, sl
 800ff38:	45e1      	cmp	r9, ip
                    const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);
 800ff3a:	bf18      	it	ne
 800ff3c:	4634      	movne	r4, r6
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 800ff3e:	d1a8      	bne.n	800fe92 <arm_max_pool_s8+0x116>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 800ff40:	9a07      	ldr	r2, [sp, #28]
 800ff42:	9e05      	ldr	r6, [sp, #20]
 800ff44:	9b04      	ldr	r3, [sp, #16]
 800ff46:	4416      	add	r6, r2
 800ff48:	9a06      	ldr	r2, [sp, #24]
 800ff4a:	3301      	adds	r3, #1
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	9304      	str	r3, [sp, #16]
 800ff50:	d008      	beq.n	800ff64 <arm_max_pool_s8+0x1e8>
    while (cnt > 0l)
 800ff52:	9b02      	ldr	r3, [sp, #8]
                    const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);
 800ff54:	f8dd c020 	ldr.w	ip, [sp, #32]
 800ff58:	9605      	str	r6, [sp, #20]
    while (cnt > 0l)
 800ff5a:	2b00      	cmp	r3, #0
                    const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);
 800ff5c:	4634      	mov	r4, r6
    while (cnt > 0l)
 800ff5e:	dc9b      	bgt.n	800fe98 <arm_max_pool_s8+0x11c>
 800ff60:	9d01      	ldr	r5, [sp, #4]
 800ff62:	e7c8      	b.n	800fef6 <arm_max_pool_s8+0x17a>
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 800ff64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ff66:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ff68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff6a:	4411      	add	r1, r2
 800ff6c:	9109      	str	r1, [sp, #36]	; 0x24
 800ff6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ff70:	1a89      	subs	r1, r1, r2
 800ff72:	910b      	str	r1, [sp, #44]	; 0x2c
 800ff74:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ff76:	1a8a      	subs	r2, r1, r2
 800ff78:	920a      	str	r2, [sp, #40]	; 0x28
 800ff7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ff7c:	3301      	adds	r3, #1
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	930c      	str	r3, [sp, #48]	; 0x30
 800ff82:	4457      	add	r7, sl
 800ff84:	f47f af59 	bne.w	800fe3a <arm_max_pool_s8+0xbe>
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 800ff88:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ff8a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ff8c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ff8e:	4411      	add	r1, r2
 800ff90:	9111      	str	r1, [sp, #68]	; 0x44
 800ff92:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ff94:	1a89      	subs	r1, r1, r2
 800ff96:	9114      	str	r1, [sp, #80]	; 0x50
 800ff98:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ff9a:	1a8a      	subs	r2, r1, r2
 800ff9c:	9212      	str	r2, [sp, #72]	; 0x48
 800ff9e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800ffa0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ffa2:	440a      	add	r2, r1
 800ffa4:	9213      	str	r2, [sp, #76]	; 0x4c
 800ffa6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ffa8:	3301      	adds	r3, #1
 800ffaa:	429a      	cmp	r2, r3
 800ffac:	931a      	str	r3, [sp, #104]	; 0x68
 800ffae:	f47f af2a 	bne.w	800fe06 <arm_max_pool_s8+0x8a>
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 800ffb2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ffb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ffb6:	fb03 f202 	mul.w	r2, r3, r2
 800ffba:	fb0a f202 	mul.w	r2, sl, r2
    int32_t cnt = length >> 2;
 800ffbe:	1094      	asrs	r4, r2, #2
    while (cnt > 0l)
 800ffc0:	2c00      	cmp	r4, #0
 800ffc2:	dd3a      	ble.n	801003a <arm_max_pool_s8+0x2be>
 800ffc4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ffc6:	e9dd 5618 	ldrd	r5, r6, [sp, #96]	; 0x60
 800ffca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ffce:	461f      	mov	r7, r3
  memcpy(&val, in_q7, 4);
 800ffd0:	683b      	ldr	r3, [r7, #0]
        in.bytes[0] = MAX(in.bytes[0], act_min);
 800ffd2:	fa4f fe83 	sxtb.w	lr, r3
 800ffd6:	45ae      	cmp	lr, r5
        in.bytes[1] = MAX(in.bytes[1], act_min);
 800ffd8:	f343 2c07 	sbfx	ip, r3, #8, #8
        in.bytes[0] = MAX(in.bytes[0], act_min);
 800ffdc:	bfb8      	it	lt
 800ffde:	46ae      	movlt	lr, r5
        in.bytes[0] = MIN(in.bytes[0], act_max);
 800ffe0:	fa4f fe8e 	sxtb.w	lr, lr
        in.bytes[1] = MAX(in.bytes[1], act_min);
 800ffe4:	45ac      	cmp	ip, r5
        in.bytes[2] = MAX(in.bytes[2], act_min);
 800ffe6:	f343 4107 	sbfx	r1, r3, #16, #8
        in.bytes[1] = MAX(in.bytes[1], act_min);
 800ffea:	bfb8      	it	lt
 800ffec:	46ac      	movlt	ip, r5
        in.bytes[0] = MIN(in.bytes[0], act_max);
 800ffee:	45b6      	cmp	lr, r6
        in.bytes[1] = MIN(in.bytes[1], act_max);
 800fff0:	fa4f fc8c 	sxtb.w	ip, ip
        in.bytes[0] = MIN(in.bytes[0], act_max);
 800fff4:	bfa8      	it	ge
 800fff6:	46b6      	movge	lr, r6
        in.bytes[2] = MAX(in.bytes[2], act_min);
 800fff8:	42a9      	cmp	r1, r5
        in.bytes[3] = MAX(in.bytes[3], act_min);
 800fffa:	ea4f 6323 	mov.w	r3, r3, asr #24
        in.bytes[2] = MAX(in.bytes[2], act_min);
 800fffe:	bfb8      	it	lt
 8010000:	4629      	movlt	r1, r5
        in.bytes[1] = MIN(in.bytes[1], act_max);
 8010002:	45b4      	cmp	ip, r6
 8010004:	bfa8      	it	ge
 8010006:	46b4      	movge	ip, r6
        in.bytes[3] = MAX(in.bytes[3], act_min);
 8010008:	42ab      	cmp	r3, r5
        in.bytes[2] = MIN(in.bytes[2], act_max);
 801000a:	b249      	sxtb	r1, r1
        in.bytes[3] = MAX(in.bytes[3], act_min);
 801000c:	bfb8      	it	lt
 801000e:	462b      	movlt	r3, r5
 8010010:	2000      	movs	r0, #0
        in.bytes[3] = MIN(in.bytes[3], act_max);
 8010012:	b25b      	sxtb	r3, r3
        in.bytes[2] = MIN(in.bytes[2], act_max);
 8010014:	42b1      	cmp	r1, r6
 8010016:	f36e 0007 	bfi	r0, lr, #0, #8
 801001a:	bfa8      	it	ge
 801001c:	4631      	movge	r1, r6
 801001e:	f36c 200f 	bfi	r0, ip, #8, #8
        in.bytes[3] = MIN(in.bytes[3], act_max);
 8010022:	42b3      	cmp	r3, r6
 8010024:	bfa8      	it	ge
 8010026:	4633      	movge	r3, r6
 8010028:	f361 4017 	bfi	r0, r1, #16, #8
 801002c:	f363 601f 	bfi	r0, r3, #24, #8
 8010030:	f847 0b04 	str.w	r0, [r7], #4
    while (cnt > 0l)
 8010034:	42a7      	cmp	r7, r4
 8010036:	d1cb      	bne.n	800ffd0 <arm_max_pool_s8+0x254>
 8010038:	972e      	str	r7, [sp, #184]	; 0xb8
    while (cnt > 0l)
 801003a:	f012 0203 	ands.w	r2, r2, #3
 801003e:	d022      	beq.n	8010086 <arm_max_pool_s8+0x30a>
        int32_t comp = *source;
 8010040:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
        comp = MAX(comp, act_min);
 8010042:	9918      	ldr	r1, [sp, #96]	; 0x60
        int32_t comp = *source;
 8010044:	f993 3000 	ldrsb.w	r3, [r3]
        comp = MIN(comp, act_max);
 8010048:	9819      	ldr	r0, [sp, #100]	; 0x64
        *source++ = (int8_t)comp;
 801004a:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
        comp = MAX(comp, act_min);
 801004c:	428b      	cmp	r3, r1
 801004e:	bfb8      	it	lt
 8010050:	460b      	movlt	r3, r1
        comp = MIN(comp, act_max);
 8010052:	4283      	cmp	r3, r0
 8010054:	bfa8      	it	ge
 8010056:	4603      	movge	r3, r0
    while (cnt > 0l)
 8010058:	3a01      	subs	r2, #1
        *source++ = (int8_t)comp;
 801005a:	7023      	strb	r3, [r4, #0]
    while (cnt > 0l)
 801005c:	d013      	beq.n	8010086 <arm_max_pool_s8+0x30a>
        int32_t comp = *source;
 801005e:	f994 3001 	ldrsb.w	r3, [r4, #1]
        comp = MAX(comp, act_min);
 8010062:	428b      	cmp	r3, r1
 8010064:	bfb8      	it	lt
 8010066:	460b      	movlt	r3, r1
        comp = MIN(comp, act_max);
 8010068:	4283      	cmp	r3, r0
 801006a:	bfa8      	it	ge
 801006c:	4603      	movge	r3, r0
    while (cnt > 0l)
 801006e:	2a01      	cmp	r2, #1
        *source++ = (int8_t)comp;
 8010070:	7063      	strb	r3, [r4, #1]
    while (cnt > 0l)
 8010072:	d008      	beq.n	8010086 <arm_max_pool_s8+0x30a>
        int32_t comp = *source;
 8010074:	f994 3002 	ldrsb.w	r3, [r4, #2]
        comp = MAX(comp, act_min);
 8010078:	4299      	cmp	r1, r3
 801007a:	bfb8      	it	lt
 801007c:	4619      	movlt	r1, r3
        comp = MIN(comp, act_max);
 801007e:	4288      	cmp	r0, r1
 8010080:	bfa8      	it	ge
 8010082:	4608      	movge	r0, r1
        *source++ = (int8_t)comp;
 8010084:	70a0      	strb	r0, [r4, #2]

    return ARM_MATH_SUCCESS;
}
 8010086:	2000      	movs	r0, #0
 8010088:	b023      	add	sp, #140	; 0x8c
 801008a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801008e:	bf00      	nop

08010090 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 8010090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010094:	b09b      	sub	sp, #108	; 0x6c
 8010096:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801009a:	9301      	str	r3, [sp, #4]
    const int32_t mask = (1 << shift);

    int32_t col = 0;
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 801009c:	1e0b      	subs	r3, r1, #0
 801009e:	9319      	str	r3, [sp, #100]	; 0x64
 80100a0:	f340 84cc 	ble.w	8010a3c <arm_softmax_s8+0x9ac>
 80100a4:	1e53      	subs	r3, r2, #1
 80100a6:	18c3      	adds	r3, r0, r3
 80100a8:	9305      	str	r3, [sp, #20]
        mult = 1 - mult;
 80100aa:	48c3      	ldr	r0, [pc, #780]	; (80103b8 <arm_softmax_s8+0x328>)
 80100ac:	2300      	movs	r3, #0
 80100ae:	9318      	str	r3, [sp, #96]	; 0x60
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 80100b0:	9b03      	ldr	r3, [sp, #12]

        for (col = 1; col < row_size; ++col)
 80100b2:	9904      	ldr	r1, [sp, #16]
        int8_t max = *input;
 80100b4:	f993 2000 	ldrsb.w	r2, [r3]
 80100b8:	9202      	str	r2, [sp, #8]
        for (col = 1; col < row_size; ++col)
 80100ba:	2901      	cmp	r1, #1
 80100bc:	f340 850b 	ble.w	8010ad6 <arm_softmax_s8+0xa46>
 80100c0:	9c05      	ldr	r4, [sp, #20]
        {
            max = MAX(max, input[col]);
 80100c2:	f913 1f01 	ldrsb.w	r1, [r3, #1]!
 80100c6:	428a      	cmp	r2, r1
 80100c8:	bfb8      	it	lt
 80100ca:	460a      	movlt	r2, r1
        for (col = 1; col < row_size; ++col)
 80100cc:	429c      	cmp	r4, r3
 80100ce:	d1f8      	bne.n	80100c2 <arm_softmax_s8+0x32>
 80100d0:	9202      	str	r2, [sp, #8]
 80100d2:	9b03      	ldr	r3, [sp, #12]
 80100d4:	f103 3bff 	add.w	fp, r3, #4294967295
        int32_t diff = 0;
        int32_t sum = 0;

        for (col = 0; col < row_size; ++col)
        {
            diff = input[col] - max;
 80100d8:	2300      	movs	r3, #0
 80100da:	9300      	str	r3, [sp, #0]
 80100dc:	e080      	b.n	80101e0 <arm_softmax_s8+0x150>
    result = (int32_t) (mult / (1ll << 31));
 80100de:	49b7      	ldr	r1, [pc, #732]	; (80103bc <arm_softmax_s8+0x32c>)
 80100e0:	fbc3 2401 	smlal	r2, r4, r3, r1
 80100e4:	2c00      	cmp	r4, #0
 80100e6:	da05      	bge.n	80100f4 <arm_softmax_s8+0x64>
 80100e8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80100ec:	18d3      	adds	r3, r2, r3
 80100ee:	461a      	mov	r2, r3
 80100f0:	f144 0400 	adc.w	r4, r4, #0
 80100f4:	0fd2      	lsrs	r2, r2, #31
 80100f6:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
    const int32_t remainder             = val_mod_minus_quarter - val;
    const int32_t x                     = (val_mod_minus_quarter << 5) + (1 << 28);
    const int32_t x2                    = MUL_SAT(x, x);

    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 80100fa:	f102 42e2 	add.w	r2, r2, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
 80100fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010102:	2100      	movs	r1, #0
 8010104:	4eae      	ldr	r6, [pc, #696]	; (80103c0 <arm_softmax_s8+0x330>)
{                                                                 \
    mask   = MASK_IF_NON_ZERO(remainder & (1 << shift++));        \
    result = SELECT_USING_MASK(mask, MUL_SAT(result, x), result); \
}

    SELECT_IF_NON_ZERO(1672461947)
 8010106:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 8010108:	f5a2 2225 	sub.w	r2, r2, #675840	; 0xa5000
 801010c:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
 8010110:	461c      	mov	r4, r3
 8010112:	468c      	mov	ip, r1
 8010114:	fbc2 4c06 	smlal	r4, ip, r2, r6
    result = (int32_t) (mult / (1ll << 31));
 8010118:	0fe4      	lsrs	r4, r4, #31
    SELECT_IF_NON_ZERO(1672461947)
 801011a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    result = (int32_t) (mult / (1ll << 31));
 801011c:	ea44 044c 	orr.w	r4, r4, ip, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
 8010120:	4017      	ands	r7, r2
 8010122:	4026      	ands	r6, r4
 8010124:	407e      	eors	r6, r7
    mult = mult + (q63_t)m1 * m2;
 8010126:	4fa7      	ldr	r7, [pc, #668]	; (80103c4 <arm_softmax_s8+0x334>)
 8010128:	461a      	mov	r2, r3
 801012a:	460c      	mov	r4, r1
 801012c:	fbc6 2407 	smlal	r2, r4, r6, r7
    result = (int32_t) (mult / (1ll << 31));
 8010130:	0fd2      	lsrs	r2, r2, #31
 8010132:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    mult = mult + (q63_t)m1 * m2;
 8010136:	4fa4      	ldr	r7, [pc, #656]	; (80103c8 <arm_softmax_s8+0x338>)
    SELECT_IF_NON_ZERO(1302514674)
    SELECT_IF_NON_ZERO(790015084)
 8010138:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    SELECT_IF_NON_ZERO(1302514674)
 801013a:	ea06 0808 	and.w	r8, r6, r8
 801013e:	4015      	ands	r5, r2
 8010140:	ea85 0508 	eor.w	r5, r5, r8
    mult = mult + (q63_t)m1 * m2;
 8010144:	461a      	mov	r2, r3
 8010146:	460e      	mov	r6, r1
 8010148:	fbc5 2607 	smlal	r2, r6, r5, r7
    SELECT_IF_NON_ZERO(790015084)
 801014c:	402c      	ands	r4, r5
    result = (int32_t) (mult / (1ll << 31));
 801014e:	0fd2      	lsrs	r2, r2, #31
    SELECT_IF_NON_ZERO(790015084)
 8010150:	9d11      	ldr	r5, [sp, #68]	; 0x44
    mult = mult + (q63_t)m1 * m2;
 8010152:	4f9e      	ldr	r7, [pc, #632]	; (80103cc <arm_softmax_s8+0x33c>)
    result = (int32_t) (mult / (1ll << 31));
 8010154:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
    SELECT_IF_NON_ZERO(790015084)
 8010158:	4015      	ands	r5, r2
 801015a:	462a      	mov	r2, r5
 801015c:	4062      	eors	r2, r4
    mult = mult + (q63_t)m1 * m2;
 801015e:	460e      	mov	r6, r1
 8010160:	461c      	mov	r4, r3
    SELECT_IF_NON_ZERO(290630308)
 8010162:	9d09      	ldr	r5, [sp, #36]	; 0x24
    mult = mult + (q63_t)m1 * m2;
 8010164:	fbc2 4607 	smlal	r4, r6, r2, r7
    SELECT_IF_NON_ZERO(290630308)
 8010168:	4015      	ands	r5, r2
    result = (int32_t) (mult / (1ll << 31));
 801016a:	0fe4      	lsrs	r4, r4, #31
    SELECT_IF_NON_ZERO(290630308)
 801016c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    mult = mult + (q63_t)m1 * m2;
 801016e:	4f98      	ldr	r7, [pc, #608]	; (80103d0 <arm_softmax_s8+0x340>)
    result = (int32_t) (mult / (1ll << 31));
 8010170:	ea44 0446 	orr.w	r4, r4, r6, lsl #1
    SELECT_IF_NON_ZERO(290630308)
 8010174:	4022      	ands	r2, r4
 8010176:	406a      	eors	r2, r5
    mult = mult + (q63_t)m1 * m2;
 8010178:	461c      	mov	r4, r3
 801017a:	460e      	mov	r6, r1
    SELECT_IF_NON_ZERO(39332535)
 801017c:	9d07      	ldr	r5, [sp, #28]
    mult = mult + (q63_t)m1 * m2;
 801017e:	fbc2 4607 	smlal	r4, r6, r2, r7
    SELECT_IF_NON_ZERO(39332535)
 8010182:	4015      	ands	r5, r2
    result = (int32_t) (mult / (1ll << 31));
 8010184:	0fe4      	lsrs	r4, r4, #31
    SELECT_IF_NON_ZERO(39332535)
 8010186:	9a10      	ldr	r2, [sp, #64]	; 0x40
    mult = mult + (q63_t)m1 * m2;
 8010188:	4f92      	ldr	r7, [pc, #584]	; (80103d4 <arm_softmax_s8+0x344>)
    result = (int32_t) (mult / (1ll << 31));
 801018a:	ea44 0446 	orr.w	r4, r4, r6, lsl #1
    SELECT_IF_NON_ZERO(39332535)
 801018e:	4022      	ands	r2, r4
 8010190:	406a      	eors	r2, r5
    mult = mult + (q63_t)m1 * m2;
 8010192:	461c      	mov	r4, r3
 8010194:	460e      	mov	r6, r1
    SELECT_IF_NON_ZERO(720401)
 8010196:	9d08      	ldr	r5, [sp, #32]
    mult = mult + (q63_t)m1 * m2;
 8010198:	fbc2 4607 	smlal	r4, r6, r2, r7
    SELECT_IF_NON_ZERO(720401)
 801019c:	4015      	ands	r5, r2
    result = (int32_t) (mult / (1ll << 31));
 801019e:	0fe4      	lsrs	r4, r4, #31
    SELECT_IF_NON_ZERO(720401)
 80101a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    result = (int32_t) (mult / (1ll << 31));
 80101a2:	ea44 0446 	orr.w	r4, r4, r6, lsl #1
    SELECT_IF_NON_ZERO(720401)
 80101a6:	4022      	ands	r2, r4
 80101a8:	406a      	eors	r2, r5
    mult = mult + (q63_t)m1 * m2;
 80101aa:	24f2      	movs	r4, #242	; 0xf2
    SELECT_IF_NON_ZERO(242)
 80101ac:	9d12      	ldr	r5, [sp, #72]	; 0x48
    mult = mult + (q63_t)m1 * m2;
 80101ae:	fbc2 3104 	smlal	r3, r1, r2, r4
    SELECT_IF_NON_ZERO(242)
 80101b2:	4015      	ands	r5, r2
    result = (int32_t) (mult / (1ll << 31));
 80101b4:	0fdb      	lsrs	r3, r3, #31
    SELECT_IF_NON_ZERO(242)
 80101b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    result = (int32_t) (mult / (1ll << 31));
 80101b8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    SELECT_IF_NON_ZERO(242)
 80101bc:	401a      	ands	r2, r3
 80101be:	4613      	mov	r3, r2
 80101c0:	406b      	eors	r3, r5
    result = dividend >> exponent;
 80101c2:	131a      	asrs	r2, r3, #12
    if (remainder > threshold)
 80101c4:	051c      	lsls	r4, r3, #20
        result++;
 80101c6:	bf48      	it	mi
 80101c8:	3201      	addmi	r2, #1
            if (diff >= diff_min)
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 80101ca:	9b00      	ldr	r3, [sp, #0]
 80101cc:	4413      	add	r3, r2
 80101ce:	9300      	str	r3, [sp, #0]
        for (col = 0; col < row_size; ++col)
 80101d0:	9a03      	ldr	r2, [sp, #12]
 80101d2:	f10a 0302 	add.w	r3, sl, #2
 80101d6:	1a9b      	subs	r3, r3, r2
 80101d8:	9a04      	ldr	r2, [sp, #16]
 80101da:	4293      	cmp	r3, r2
 80101dc:	f280 8120 	bge.w	8010420 <arm_softmax_s8+0x390>
            diff = input[col] - max;
 80101e0:	9a02      	ldr	r2, [sp, #8]
 80101e2:	46da      	mov	sl, fp
 80101e4:	f91b 3f01 	ldrsb.w	r3, [fp, #1]!
 80101e8:	1a9b      	subs	r3, r3, r2
            if (diff >= diff_min)
 80101ea:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80101ec:	429a      	cmp	r2, r3
 80101ee:	dcef      	bgt.n	80101d0 <arm_softmax_s8+0x140>
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 80101f0:	9a24      	ldr	r2, [sp, #144]	; 0x90
    if ((m1 < 0) ^ (m2 < 0))
 80101f2:	9c01      	ldr	r4, [sp, #4]
 80101f4:	4093      	lsls	r3, r2
 80101f6:	ea84 0203 	eor.w	r2, r4, r3
 80101fa:	0fd2      	lsrs	r2, r2, #31
        mult = 1 - mult;
 80101fc:	2a00      	cmp	r2, #0
 80101fe:	bf0b      	itete	eq
 8010200:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
 8010204:	4601      	movne	r1, r0
 8010206:	2200      	moveq	r2, #0
 8010208:	f04f 32ff 	movne.w	r2, #4294967295
    result = (int32_t) (mult / (1ll << 31));
 801020c:	fbc4 1203 	smlal	r1, r2, r4, r3
 8010210:	2a00      	cmp	r2, #0
 8010212:	da04      	bge.n	801021e <arm_softmax_s8+0x18e>
 8010214:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8010218:	1909      	adds	r1, r1, r4
 801021a:	f142 0200 	adc.w	r2, r2, #0
 801021e:	0fc9      	lsrs	r1, r1, #31
 8010220:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010224:	9a01      	ldr	r2, [sp, #4]
 8010226:	429a      	cmp	r2, r3
 8010228:	f000 80d8 	beq.w	80103dc <arm_softmax_s8+0x34c>
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 801022c:	f041 487f 	orr.w	r8, r1, #4278190080	; 0xff000000
    const int32_t x                     = (val_mod_minus_quarter << 5) + (1 << 28);
 8010230:	ea4f 1448 	mov.w	r4, r8, lsl #5
    const int32_t remainder             = val_mod_minus_quarter - val;
 8010234:	eba8 0801 	sub.w	r8, r8, r1
    const int32_t x                     = (val_mod_minus_quarter << 5) + (1 << 28);
 8010238:	f104 5480 	add.w	r4, r4, #268435456	; 0x10000000
    mult = mult + (q63_t)m1 * m2;
 801023c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010240:	2600      	movs	r6, #0
    SELECT_IF_NON_ZERO(242)
 8010242:	f3c8 7c80 	ubfx	ip, r8, #30, #1
 8010246:	f10c 32ff 	add.w	r2, ip, #4294967295
    result = (int32_t) (mult / (1ll << 31));
 801024a:	fbc4 3604 	smlal	r3, r6, r4, r4
 801024e:	9212      	str	r2, [sp, #72]	; 0x48
 8010250:	2e00      	cmp	r6, #0
    SELECT_IF_NON_ZERO(790015084)
 8010252:	f348 6280 	sbfx	r2, r8, #26, #1
 8010256:	f3c8 6780 	ubfx	r7, r8, #26, #1
 801025a:	9211      	str	r2, [sp, #68]	; 0x44
    result = (int32_t) (mult / (1ll << 31));
 801025c:	da05      	bge.n	801026a <arm_softmax_s8+0x1da>
 801025e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8010262:	189a      	adds	r2, r3, r2
 8010264:	4613      	mov	r3, r2
 8010266:	f146 0600 	adc.w	r6, r6, #0
 801026a:	0fdb      	lsrs	r3, r3, #31
 801026c:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    mult = mult + (q63_t)m1 * m2;
 8010270:	fba3 2503 	umull	r2, r5, r3, r3
    result = (int32_t) (mult / (1ll << 31));
 8010274:	17f6      	asrs	r6, r6, #31
    mult = mult + (q63_t)m1 * m2;
 8010276:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
 801027a:	fb03 fe06 	mul.w	lr, r3, r6
    result = (int32_t) (mult / (1ll << 31));
 801027e:	eb45 054e 	adc.w	r5, r5, lr, lsl #1
 8010282:	2d00      	cmp	r5, #0
 8010284:	9306      	str	r3, [sp, #24]
 8010286:	da06      	bge.n	8010296 <arm_softmax_s8+0x206>
 8010288:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 801028c:	eb12 0e0e 	adds.w	lr, r2, lr
 8010290:	4672      	mov	r2, lr
 8010292:	f145 0500 	adc.w	r5, r5, #0
 8010296:	0fd2      	lsrs	r2, r2, #31
 8010298:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    SELECT_IF_NON_ZERO(242)
 801029c:	f1cc 0500 	rsb	r5, ip, #0
 80102a0:	950f      	str	r5, [sp, #60]	; 0x3c
 80102a2:	1e7d      	subs	r5, r7, #1
    mult = mult + (q63_t)m1 * m2;
 80102a4:	fb04 f606 	mul.w	r6, r4, r6
 80102a8:	950a      	str	r5, [sp, #40]	; 0x28
 80102aa:	17e5      	asrs	r5, r4, #31
 80102ac:	fb03 6605 	mla	r6, r3, r5, r6
    if ((m1 < 0) ^ (m2 < 0))
 80102b0:	ea83 0c04 	eor.w	ip, r3, r4
    mult = mult + (q63_t)m1 * m2;
 80102b4:	fba4 e303 	umull	lr, r3, r4, r3
 80102b8:	4433      	add	r3, r6
    SELECT_IF_NON_ZERO(39332535)
 80102ba:	f3c8 7600 	ubfx	r6, r8, #28, #1
 80102be:	3e01      	subs	r6, #1
 80102c0:	9607      	str	r6, [sp, #28]
    SELECT_IF_NON_ZERO(290630308)
 80102c2:	f3c8 66c0 	ubfx	r6, r8, #27, #1
 80102c6:	3e01      	subs	r6, #1
 80102c8:	9609      	str	r6, [sp, #36]	; 0x24
    SELECT_IF_NON_ZERO(720401)
 80102ca:	f3c8 7640 	ubfx	r6, r8, #29, #1
    SELECT_IF_NON_ZERO(1672461947)
 80102ce:	f3c8 6700 	ubfx	r7, r8, #24, #1
 80102d2:	3e01      	subs	r6, #1
 80102d4:	9608      	str	r6, [sp, #32]
 80102d6:	1e7e      	subs	r6, r7, #1
    SELECT_IF_NON_ZERO(39332535)
 80102d8:	f348 7700 	sbfx	r7, r8, #28, #1
 80102dc:	9710      	str	r7, [sp, #64]	; 0x40
    SELECT_IF_NON_ZERO(1672461947)
 80102de:	f348 6700 	sbfx	r7, r8, #24, #1
 80102e2:	960b      	str	r6, [sp, #44]	; 0x2c
 80102e4:	970e      	str	r7, [sp, #56]	; 0x38
    int32_t remainder = remainder_mask & dividend;
 80102e6:	f002 0603 	and.w	r6, r2, #3
    SELECT_IF_NON_ZERO(720401)
 80102ea:	f348 7740 	sbfx	r7, r8, #29, #1
    result = dividend >> exponent;
 80102ee:	1092      	asrs	r2, r2, #2
    SELECT_IF_NON_ZERO(1302514674)
 80102f0:	f3c8 6540 	ubfx	r5, r8, #25, #1
    SELECT_IF_NON_ZERO(720401)
 80102f4:	970d      	str	r7, [sp, #52]	; 0x34
    if (result < 0)
 80102f6:	2a00      	cmp	r2, #0
    SELECT_IF_NON_ZERO(290630308)
 80102f8:	f348 67c0 	sbfx	r7, r8, #27, #1
    if ((m1 < 0) ^ (m2 < 0))
 80102fc:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 8010300:	f105 38ff 	add.w	r8, r5, #4294967295
    SELECT_IF_NON_ZERO(290630308)
 8010304:	970c      	str	r7, [sp, #48]	; 0x30
    SELECT_IF_NON_ZERO(1302514674)
 8010306:	f1c5 0500 	rsb	r5, r5, #0
    if (result < 0)
 801030a:	db51      	blt.n	80103b0 <arm_softmax_s8+0x320>
    q31_t threshold = remainder_mask >> 1;
 801030c:	f04f 0901 	mov.w	r9, #1
    if (remainder > threshold)
 8010310:	45b1      	cmp	r9, r6
        result++;
 8010312:	bfb8      	it	lt
 8010314:	3201      	addlt	r2, #1
        mult = 1 - mult;
 8010316:	f1bc 0f00 	cmp.w	ip, #0
 801031a:	bf0b      	itete	eq
 801031c:	f04f 4c80 	moveq.w	ip, #1073741824	; 0x40000000
 8010320:	4684      	movne	ip, r0
 8010322:	f04f 0900 	moveq.w	r9, #0
 8010326:	f04f 39ff 	movne.w	r9, #4294967295
    mult = mult + (q63_t)m1 * m2;
 801032a:	eb1c 0c0e 	adds.w	ip, ip, lr
    result = (int32_t) (mult / (1ll << 31));
 801032e:	eb43 0909 	adc.w	r9, r3, r9
 8010332:	f1b9 0f00 	cmp.w	r9, #0
 8010336:	da06      	bge.n	8010346 <arm_softmax_s8+0x2b6>
 8010338:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801033c:	eb1c 0303 	adds.w	r3, ip, r3
 8010340:	469c      	mov	ip, r3
 8010342:	f149 0900 	adc.w	r9, r9, #0
 8010346:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 801034a:	ea4c 0c49 	orr.w	ip, ip, r9, lsl #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 801034e:	4494      	add	ip, r2
    if ((m1 < 0) ^ (m2 < 0))
 8010350:	ea4f 73dc 	mov.w	r3, ip, lsr #31
        mult = 1 - mult;
 8010354:	2b00      	cmp	r3, #0
    result = (int32_t) (mult / (1ll << 31));
 8010356:	4e20      	ldr	r6, [pc, #128]	; (80103d8 <arm_softmax_s8+0x348>)
        mult = 1 - mult;
 8010358:	bf0b      	itete	eq
 801035a:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 801035e:	4603      	movne	r3, r0
 8010360:	2200      	moveq	r2, #0
 8010362:	f04f 32ff 	movne.w	r2, #4294967295
    result = (int32_t) (mult / (1ll << 31));
 8010366:	fbcc 3206 	smlal	r3, r2, ip, r6
 801036a:	2a00      	cmp	r2, #0
 801036c:	da06      	bge.n	801037c <arm_softmax_s8+0x2ec>
 801036e:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 8010372:	eb13 0c0c 	adds.w	ip, r3, ip
 8010376:	4663      	mov	r3, ip
 8010378:	f142 0200 	adc.w	r2, r2, #0
 801037c:	0fdb      	lsrs	r3, r3, #31
 801037e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 8010382:	9a06      	ldr	r2, [sp, #24]
 8010384:	441a      	add	r2, r3
    if (result < 0)
 8010386:	1053      	asrs	r3, r2, #1
 8010388:	d402      	bmi.n	8010390 <arm_softmax_s8+0x300>
    if (remainder > threshold)
 801038a:	07d6      	lsls	r6, r2, #31
        result++;
 801038c:	bf48      	it	mi
 801038e:	3301      	addmi	r3, #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 8010390:	4423      	add	r3, r4
    if ((m1 < 0) ^ (m2 < 0))
 8010392:	0fda      	lsrs	r2, r3, #31
        mult = 1 - mult;
 8010394:	2a00      	cmp	r2, #0
 8010396:	bf0b      	itete	eq
 8010398:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 801039c:	4602      	movne	r2, r0
 801039e:	2400      	moveq	r4, #0
 80103a0:	f04f 34ff 	movne.w	r4, #4294967295

#undef SELECT_IF_NON_ZERO

    mask = MASK_IF_ZERO(val);
 80103a4:	2900      	cmp	r1, #0
 80103a6:	f47f ae9a 	bne.w	80100de <arm_softmax_s8+0x4e>
 80103aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
        result++;
 80103ae:	e70c      	b.n	80101ca <arm_softmax_s8+0x13a>
        threshold++;
 80103b0:	f04f 0902 	mov.w	r9, #2
 80103b4:	e7ac      	b.n	8010310 <arm_softmax_s8+0x280>
 80103b6:	bf00      	nop
 80103b8:	c0000001 	.word	0xc0000001
 80103bc:	70f5a894 	.word	0x70f5a894
 80103c0:	63afbe7b 	.word	0x63afbe7b
 80103c4:	4da2cbf2 	.word	0x4da2cbf2
 80103c8:	2f16ac6c 	.word	0x2f16ac6c
 80103cc:	1152aaa4 	.word	0x1152aaa4
 80103d0:	02582ab7 	.word	0x02582ab7
 80103d4:	000afe11 	.word	0x000afe11
 80103d8:	2aaaaaab 	.word	0x2aaaaaab
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80103dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80103e0:	f47f af24 	bne.w	801022c <arm_softmax_s8+0x19c>
 80103e4:	f04f 32ff 	mov.w	r2, #4294967295
 80103e8:	2500      	movs	r5, #0
 80103ea:	4987      	ldr	r1, [pc, #540]	; (8010608 <arm_softmax_s8+0x578>)
 80103ec:	9207      	str	r2, [sp, #28]
 80103ee:	4617      	mov	r7, r2
 80103f0:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80103f4:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
 80103f8:	9106      	str	r1, [sp, #24]
 80103fa:	4690      	mov	r8, r2
 80103fc:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
 8010400:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
 8010404:	f8df e210 	ldr.w	lr, [pc, #528]	; 8010618 <arm_softmax_s8+0x588>
 8010408:	4b80      	ldr	r3, [pc, #512]	; (801060c <arm_softmax_s8+0x57c>)
 801040a:	4c81      	ldr	r4, [pc, #516]	; (8010610 <arm_softmax_s8+0x580>)
 801040c:	9510      	str	r5, [sp, #64]	; 0x40
 801040e:	46ac      	mov	ip, r5
 8010410:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010414:	462e      	mov	r6, r5
 8010416:	9511      	str	r5, [sp, #68]	; 0x44
 8010418:	9712      	str	r7, [sp, #72]	; 0x48
        result = Q31_MAX;
 801041a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801041e:	e775      	b.n	801030c <arm_softmax_s8+0x27c>
  if (value == 0U)
 8010420:	9a00      	ldr	r2, [sp, #0]
 8010422:	2a00      	cmp	r2, #0
 8010424:	f000 8363 	beq.w	8010aee <arm_softmax_s8+0xa5e>
  return __builtin_clz(value);
 8010428:	fab2 f382 	clz	r3, r2
            }
        }

        const int32_t headroom = __CLZ(sum);
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
 801042c:	fa02 f103 	lsl.w	r1, r2, r3
 8010430:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 8010434:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 8010438:	9314      	str	r3, [sp, #80]	; 0x50
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 801043a:	f111 4300 	adds.w	r3, r1, #2147483648	; 0x80000000
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 801043e:	ea4f 71e1 	mov.w	r1, r1, asr #31
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 8010442:	f141 0100 	adc.w	r1, r1, #0
 8010446:	085b      	lsrs	r3, r3, #1
 8010448:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
    mult = mult + (q63_t)m1 * m2;
 801044c:	4c71      	ldr	r4, [pc, #452]	; (8010614 <arm_softmax_s8+0x584>)
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 801044e:	9300      	str	r3, [sp, #0]
 8010450:	1049      	asrs	r1, r1, #1
    mult = mult + (q63_t)m1 * m2;
 8010452:	425d      	negs	r5, r3
 8010454:	fb04 5501 	mla	r5, r4, r1, r5
 8010458:	fba3 2404 	umull	r2, r4, r3, r4
 801045c:	1812      	adds	r2, r2, r0
 801045e:	442c      	add	r4, r5
    result = (int32_t) (mult / (1ll << 31));
 8010460:	f164 0400 	sbc.w	r4, r4, #0
 8010464:	2c00      	cmp	r4, #0
 8010466:	da05      	bge.n	8010474 <arm_softmax_s8+0x3e4>
 8010468:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801046c:	1955      	adds	r5, r2, r5
 801046e:	462a      	mov	r2, r5
 8010470:	f144 0400 	adc.w	r4, r4, #0
 8010474:	0fd2      	lsrs	r2, r2, #31
 8010476:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 801047a:	f102 325a 	add.w	r2, r2, #1515870810	; 0x5a5a5a5a
    mult = mult + (q63_t)m1 * m2;
 801047e:	17d4      	asrs	r4, r2, #31
 8010480:	fb02 f601 	mul.w	r6, r2, r1
 8010484:	fb03 6604 	mla	r6, r3, r4, r6
 8010488:	fba2 4503 	umull	r4, r5, r2, r3
 801048c:	f114 4480 	adds.w	r4, r4, #1073741824	; 0x40000000
 8010490:	eb46 0505 	adc.w	r5, r6, r5
    result = (int32_t) (mult / (1ll << 31));
 8010494:	0fe4      	lsrs	r4, r4, #31
 8010496:	ea44 0445 	orr.w	r4, r4, r5, lsl #1

    const int32_t shift = (1 << 29);
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801049a:	f1c4 5400 	rsb	r4, r4, #536870912	; 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
 801049e:	ea82 0504 	eor.w	r5, r2, r4
 80104a2:	0fed      	lsrs	r5, r5, #31
        mult = 1 - mult;
 80104a4:	2d00      	cmp	r5, #0
    mult = mult + (q63_t)m1 * m2;
 80104a6:	fb82 6404 	smull	r6, r4, r2, r4
        mult = 1 - mult;
 80104aa:	bf0b      	itete	eq
 80104ac:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 80104b0:	4605      	movne	r5, r0
 80104b2:	2700      	moveq	r7, #0
 80104b4:	f04f 37ff 	movne.w	r7, #4294967295
    mult = mult + (q63_t)m1 * m2;
 80104b8:	19ad      	adds	r5, r5, r6
    result = (int32_t) (mult / (1ll << 31));
 80104ba:	eb47 0404 	adc.w	r4, r7, r4
 80104be:	2c00      	cmp	r4, #0
 80104c0:	da05      	bge.n	80104ce <arm_softmax_s8+0x43e>
 80104c2:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 80104c6:	19ae      	adds	r6, r5, r6
 80104c8:	4635      	mov	r5, r6
 80104ca:	f144 0400 	adc.w	r4, r4, #0
 80104ce:	0fed      	lsrs	r5, r5, #31
 80104d0:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80104d4:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    if ((m1 < 0) ^ (m2 < 0))
 80104d8:	ea82 0403 	eor.w	r4, r2, r3
 80104dc:	0fe4      	lsrs	r4, r4, #31
        mult = 1 - mult;
 80104de:	2c00      	cmp	r4, #0
 80104e0:	bf0b      	itete	eq
 80104e2:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
 80104e6:	4606      	movne	r6, r0
 80104e8:	f04f 0c00 	moveq.w	ip, #0
 80104ec:	f04f 3cff 	movne.w	ip, #4294967295
    mult = mult + (q63_t)m1 * m2;
 80104f0:	17d4      	asrs	r4, r2, #31
 80104f2:	fb02 f501 	mul.w	r5, r2, r1
 80104f6:	fb03 5504 	mla	r5, r3, r4, r5
 80104fa:	fba2 4703 	umull	r4, r7, r2, r3
 80104fe:	19a4      	adds	r4, r4, r6
 8010500:	443d      	add	r5, r7
    result = (int32_t) (mult / (1ll << 31));
 8010502:	eb45 050c 	adc.w	r5, r5, ip
 8010506:	2d00      	cmp	r5, #0
 8010508:	da05      	bge.n	8010516 <arm_softmax_s8+0x486>
 801050a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 801050e:	19a6      	adds	r6, r4, r6
 8010510:	4634      	mov	r4, r6
 8010512:	f145 0500 	adc.w	r5, r5, #0
 8010516:	0fe4      	lsrs	r4, r4, #31
 8010518:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801051c:	f1c4 5400 	rsb	r4, r4, #536870912	; 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
 8010520:	ea84 0502 	eor.w	r5, r4, r2
 8010524:	0fed      	lsrs	r5, r5, #31
        mult = 1 - mult;
 8010526:	2d00      	cmp	r5, #0
 8010528:	bf0b      	itete	eq
 801052a:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 801052e:	4605      	movne	r5, r0
 8010530:	2600      	moveq	r6, #0
 8010532:	f04f 36ff 	movne.w	r6, #4294967295
    result = (int32_t) (mult / (1ll << 31));
 8010536:	fbc2 5604 	smlal	r5, r6, r2, r4
 801053a:	2e00      	cmp	r6, #0
 801053c:	da05      	bge.n	801054a <arm_softmax_s8+0x4ba>
 801053e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8010542:	192c      	adds	r4, r5, r4
 8010544:	4625      	mov	r5, r4
 8010546:	f146 0600 	adc.w	r6, r6, #0
 801054a:	0fed      	lsrs	r5, r5, #31
 801054c:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8010550:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 8010554:	f2c0 8275 	blt.w	8010a42 <arm_softmax_s8+0x9b2>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8010558:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801055c:	3a01      	subs	r2, #1
    q63_t mult = 1 << 30;
 801055e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8010562:	2600      	movs	r6, #0
    mult = mult + (q63_t)m1 * m2;
 8010564:	fb02 f101 	mul.w	r1, r2, r1
 8010568:	17d4      	asrs	r4, r2, #31
 801056a:	fb03 1104 	mla	r1, r3, r4, r1
 801056e:	fba2 3703 	umull	r3, r7, r2, r3
 8010572:	195b      	adds	r3, r3, r5
 8010574:	4439      	add	r1, r7
    result = (int32_t) (mult / (1ll << 31));
 8010576:	eb41 0106 	adc.w	r1, r1, r6
 801057a:	2900      	cmp	r1, #0
 801057c:	da05      	bge.n	801058a <arm_softmax_s8+0x4fa>
 801057e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8010582:	195d      	adds	r5, r3, r5
 8010584:	462b      	mov	r3, r5
 8010586:	f141 0100 	adc.w	r1, r1, #0
 801058a:	0fdb      	lsrs	r3, r3, #31
 801058c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8010590:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
        mult = 1 - mult;
 8010594:	4601      	mov	r1, r0
 8010596:	f04f 35ff 	mov.w	r5, #4294967295
    mult = mult + (q63_t)m1 * m2;
 801059a:	fb03 f404 	mul.w	r4, r3, r4
 801059e:	17de      	asrs	r6, r3, #31
 80105a0:	fb02 4406 	mla	r4, r2, r6, r4
 80105a4:	fba3 3602 	umull	r3, r6, r3, r2
 80105a8:	185b      	adds	r3, r3, r1
 80105aa:	4434      	add	r4, r6
    result = (int32_t) (mult / (1ll << 31));
 80105ac:	eb44 0405 	adc.w	r4, r4, r5
 80105b0:	2c00      	cmp	r4, #0
 80105b2:	da05      	bge.n	80105c0 <arm_softmax_s8+0x530>
 80105b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80105b8:	1859      	adds	r1, r3, r1
 80105ba:	460b      	mov	r3, r1
 80105bc:	f144 0400 	adc.w	r4, r4, #0
 80105c0:	0fdb      	lsrs	r3, r3, #31
 80105c2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80105c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80105ca:	f2c0 8243 	blt.w	8010a54 <arm_softmax_s8+0x9c4>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80105ce:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80105d2:	441a      	add	r2, r3
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80105d4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80105d8:	bfa8      	it	ge
 80105da:	9313      	strge	r3, [sp, #76]	; 0x4c
 80105dc:	f2c0 8290 	blt.w	8010b00 <arm_softmax_s8+0xa70>

        for (col = 0; col < row_size; ++col)
 80105e0:	9b04      	ldr	r3, [sp, #16]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	f340 8219 	ble.w	8010a1a <arm_softmax_s8+0x98a>
    const q31_t remainder_mask = (1 << exponent) - 1;
 80105e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80105ea:	f8dd e098 	ldr.w	lr, [sp, #152]	; 0x98
 80105ee:	2301      	movs	r3, #1
 80105f0:	4093      	lsls	r3, r2
 80105f2:	3b01      	subs	r3, #1
 80105f4:	9315      	str	r3, [sp, #84]	; 0x54
    q31_t threshold = remainder_mask >> 1;
 80105f6:	105b      	asrs	r3, r3, #1
 80105f8:	9316      	str	r3, [sp, #88]	; 0x58
        threshold++;
 80105fa:	3301      	adds	r3, #1
 80105fc:	9317      	str	r3, [sp, #92]	; 0x5c
 80105fe:	9b03      	ldr	r3, [sp, #12]
 8010600:	3b01      	subs	r3, #1
 8010602:	9300      	str	r3, [sp, #0]
 8010604:	46f0      	mov	r8, lr
 8010606:	e195      	b.n	8010934 <arm_softmax_s8+0x8a4>
 8010608:	01fffff8 	.word	0x01fffff8
 801060c:	001fffff 	.word	0x001fffff
 8010610:	0fffffe0 	.word	0x0fffffe0
 8010614:	c3c3c3c4 	.word	0xc3c3c3c4
 8010618:	40000100 	.word	0x40000100
        {
            diff = input[col] - max;
            if (diff >= diff_min)
            {
                const int32_t res = DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 801061c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    if ((m1 < 0) ^ (m2 < 0))
 801061e:	9c01      	ldr	r4, [sp, #4]
 8010620:	4093      	lsls	r3, r2
 8010622:	ea84 0203 	eor.w	r2, r4, r3
 8010626:	0fd2      	lsrs	r2, r2, #31
        mult = 1 - mult;
 8010628:	2a00      	cmp	r2, #0
 801062a:	bf0b      	itete	eq
 801062c:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 8010630:	4602      	movne	r2, r0
 8010632:	2100      	moveq	r1, #0
 8010634:	f04f 31ff 	movne.w	r1, #4294967295
    result = (int32_t) (mult / (1ll << 31));
 8010638:	fbc4 2103 	smlal	r2, r1, r4, r3
 801063c:	2900      	cmp	r1, #0
 801063e:	da05      	bge.n	801064c <arm_softmax_s8+0x5bc>
 8010640:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8010644:	1914      	adds	r4, r2, r4
 8010646:	4622      	mov	r2, r4
 8010648:	f141 0100 	adc.w	r1, r1, #0
 801064c:	0fd2      	lsrs	r2, r2, #31
 801064e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010652:	9901      	ldr	r1, [sp, #4]
 8010654:	4299      	cmp	r1, r3
 8010656:	f000 8181 	beq.w	801095c <arm_softmax_s8+0x8cc>
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 801065a:	f042 457f 	orr.w	r5, r2, #4278190080	; 0xff000000
    const int32_t x                     = (val_mod_minus_quarter << 5) + (1 << 28);
 801065e:	016c      	lsls	r4, r5, #5
    const int32_t remainder             = val_mod_minus_quarter - val;
 8010660:	1aad      	subs	r5, r5, r2
    SELECT_IF_NON_ZERO(790015084)
 8010662:	f3c5 6e80 	ubfx	lr, r5, #26, #1
 8010666:	f10e 31ff 	add.w	r1, lr, #4294967295
    SELECT_IF_NON_ZERO(1302514674)
 801066a:	f3c5 6940 	ubfx	r9, r5, #25, #1
    mask = MASK_IF_ZERO(val);
 801066e:	fab2 f282 	clz	r2, r2
    SELECT_IF_NON_ZERO(242)
 8010672:	f3c5 7c80 	ubfx	ip, r5, #30, #1
 8010676:	9111      	str	r1, [sp, #68]	; 0x44
 8010678:	f109 31ff 	add.w	r1, r9, #4294967295
    mask = MASK_IF_ZERO(val);
 801067c:	0952      	lsrs	r2, r2, #5
 801067e:	9110      	str	r1, [sp, #64]	; 0x40
 8010680:	f10c 31ff 	add.w	r1, ip, #4294967295
 8010684:	910f      	str	r1, [sp, #60]	; 0x3c
 8010686:	1e51      	subs	r1, r2, #1
    const int32_t x                     = (val_mod_minus_quarter << 5) + (1 << 28);
 8010688:	f104 5480 	add.w	r4, r4, #268435456	; 0x10000000
    mult = mult + (q63_t)m1 * m2;
 801068c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010690:	2600      	movs	r6, #0
 8010692:	910e      	str	r1, [sp, #56]	; 0x38
    SELECT_IF_NON_ZERO(39332535)
 8010694:	f3c5 7100 	ubfx	r1, r5, #28, #1
    result = (int32_t) (mult / (1ll << 31));
 8010698:	fbc4 3604 	smlal	r3, r6, r4, r4
    SELECT_IF_NON_ZERO(1672461947)
 801069c:	f3c5 6a00 	ubfx	sl, r5, #24, #1
    SELECT_IF_NON_ZERO(39332535)
 80106a0:	9106      	str	r1, [sp, #24]
 80106a2:	f345 7100 	sbfx	r1, r5, #28, #1
 80106a6:	910d      	str	r1, [sp, #52]	; 0x34
    result = (int32_t) (mult / (1ll << 31));
 80106a8:	2e00      	cmp	r6, #0
 80106aa:	f10a 31ff 	add.w	r1, sl, #4294967295
 80106ae:	910c      	str	r1, [sp, #48]	; 0x30
 80106b0:	da05      	bge.n	80106be <arm_softmax_s8+0x62e>
 80106b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80106b6:	1859      	adds	r1, r3, r1
 80106b8:	460b      	mov	r3, r1
 80106ba:	f146 0600 	adc.w	r6, r6, #0
 80106be:	0fdb      	lsrs	r3, r3, #31
 80106c0:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    mult = mult + (q63_t)m1 * m2;
 80106c4:	fba3 1703 	umull	r1, r7, r3, r3
    result = (int32_t) (mult / (1ll << 31));
 80106c8:	17f6      	asrs	r6, r6, #31
    mult = mult + (q63_t)m1 * m2;
 80106ca:	f111 4180 	adds.w	r1, r1, #1073741824	; 0x40000000
 80106ce:	fb03 fb06 	mul.w	fp, r3, r6
    result = (int32_t) (mult / (1ll << 31));
 80106d2:	eb47 074b 	adc.w	r7, r7, fp, lsl #1
 80106d6:	2f00      	cmp	r7, #0
 80106d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80106da:	da06      	bge.n	80106ea <arm_softmax_s8+0x65a>
 80106dc:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80106e0:	eb11 0b0b 	adds.w	fp, r1, fp
 80106e4:	4659      	mov	r1, fp
 80106e6:	f147 0700 	adc.w	r7, r7, #0
    mask = MASK_IF_ZERO(val);
 80106ea:	4252      	negs	r2, r2
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 80106ec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    result = (int32_t) (mult / (1ll << 31));
 80106f0:	0fc9      	lsrs	r1, r1, #31
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 80106f2:	9209      	str	r2, [sp, #36]	; 0x24
 80106f4:	9a06      	ldr	r2, [sp, #24]
    result = (int32_t) (mult / (1ll << 31));
 80106f6:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
 80106fa:	f1c9 0700 	rsb	r7, r9, #0
    mult = mult + (q63_t)m1 * m2;
 80106fe:	fb04 f606 	mul.w	r6, r4, r6
    SELECT_IF_NON_ZERO(1302514674)
 8010702:	970a      	str	r7, [sp, #40]	; 0x28
 8010704:	3a01      	subs	r2, #1
    SELECT_IF_NON_ZERO(1672461947)
 8010706:	f1ca 0a00 	rsb	sl, sl, #0
    SELECT_IF_NON_ZERO(790015084)
 801070a:	f1ce 0700 	rsb	r7, lr, #0
 801070e:	9707      	str	r7, [sp, #28]
    mult = mult + (q63_t)m1 * m2;
 8010710:	17e7      	asrs	r7, r4, #31
 8010712:	fb03 6607 	mla	r6, r3, r7, r6
    if ((m1 < 0) ^ (m2 < 0))
 8010716:	ea83 0e04 	eor.w	lr, r3, r4
    SELECT_IF_NON_ZERO(242)
 801071a:	f1cc 0b00 	rsb	fp, ip, #0
    mult = mult + (q63_t)m1 * m2;
 801071e:	fba4 3c03 	umull	r3, ip, r4, r3
    SELECT_IF_NON_ZERO(290630308)
 8010722:	f3c5 67c0 	ubfx	r7, r5, #27, #1
    mult = mult + (q63_t)m1 * m2;
 8010726:	44b4      	add	ip, r6
    SELECT_IF_NON_ZERO(720401)
 8010728:	f3c5 7540 	ubfx	r5, r5, #29, #1
    int32_t remainder = remainder_mask & dividend;
 801072c:	f001 0603 	and.w	r6, r1, #3
    result = dividend >> exponent;
 8010730:	1089      	asrs	r1, r1, #2
    mult = mult + (q63_t)m1 * m2;
 8010732:	9312      	str	r3, [sp, #72]	; 0x48
 8010734:	f105 39ff 	add.w	r9, r5, #4294967295
 8010738:	1e7b      	subs	r3, r7, #1
    SELECT_IF_NON_ZERO(720401)
 801073a:	426d      	negs	r5, r5
    if (result < 0)
 801073c:	2900      	cmp	r1, #0
    if ((m1 < 0) ^ (m2 < 0))
 801073e:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8010742:	9308      	str	r3, [sp, #32]
    SELECT_IF_NON_ZERO(290630308)
 8010744:	f1c7 0700 	rsb	r7, r7, #0
    SELECT_IF_NON_ZERO(720401)
 8010748:	9506      	str	r5, [sp, #24]
    if (result < 0)
 801074a:	f2c0 8105 	blt.w	8010958 <arm_softmax_s8+0x8c8>
    q31_t threshold = remainder_mask >> 1;
 801074e:	2501      	movs	r5, #1
    if (remainder > threshold)
 8010750:	42b5      	cmp	r5, r6
    mult = mult + (q63_t)m1 * m2;
 8010752:	9b12      	ldr	r3, [sp, #72]	; 0x48
        result++;
 8010754:	bfb8      	it	lt
 8010756:	3101      	addlt	r1, #1
        mult = 1 - mult;
 8010758:	f1be 0f00 	cmp.w	lr, #0
 801075c:	bf0b      	itete	eq
 801075e:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 8010762:	4605      	movne	r5, r0
 8010764:	f04f 0e00 	moveq.w	lr, #0
 8010768:	f04f 3eff 	movne.w	lr, #4294967295
    mult = mult + (q63_t)m1 * m2;
 801076c:	18ed      	adds	r5, r5, r3
    result = (int32_t) (mult / (1ll << 31));
 801076e:	eb4c 0e0e 	adc.w	lr, ip, lr
 8010772:	f1be 0f00 	cmp.w	lr, #0
 8010776:	da05      	bge.n	8010784 <arm_softmax_s8+0x6f4>
 8010778:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801077c:	18eb      	adds	r3, r5, r3
 801077e:	461d      	mov	r5, r3
 8010780:	f14e 0e00 	adc.w	lr, lr, #0
 8010784:	0fed      	lsrs	r5, r5, #31
 8010786:	ea45 054e 	orr.w	r5, r5, lr, lsl #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 801078a:	440d      	add	r5, r1
    if ((m1 < 0) ^ (m2 < 0))
 801078c:	0feb      	lsrs	r3, r5, #31
        mult = 1 - mult;
 801078e:	2b00      	cmp	r3, #0
    result = (int32_t) (mult / (1ll << 31));
 8010790:	4eb8      	ldr	r6, [pc, #736]	; (8010a74 <arm_softmax_s8+0x9e4>)
        mult = 1 - mult;
 8010792:	bf0b      	itete	eq
 8010794:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 8010798:	4603      	movne	r3, r0
 801079a:	2100      	moveq	r1, #0
 801079c:	f04f 31ff 	movne.w	r1, #4294967295
    result = (int32_t) (mult / (1ll << 31));
 80107a0:	fbc5 3106 	smlal	r3, r1, r5, r6
 80107a4:	2900      	cmp	r1, #0
 80107a6:	da05      	bge.n	80107b4 <arm_softmax_s8+0x724>
 80107a8:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80107ac:	195d      	adds	r5, r3, r5
 80107ae:	462b      	mov	r3, r5
 80107b0:	f141 0100 	adc.w	r1, r1, #0
 80107b4:	0fdb      	lsrs	r3, r3, #31
 80107b6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 80107ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80107bc:	4419      	add	r1, r3
    if (result < 0)
 80107be:	104b      	asrs	r3, r1, #1
 80107c0:	d402      	bmi.n	80107c8 <arm_softmax_s8+0x738>
    if (remainder > threshold)
 80107c2:	07c9      	lsls	r1, r1, #31
        result++;
 80107c4:	bf48      	it	mi
 80107c6:	3301      	addmi	r3, #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 80107c8:	4423      	add	r3, r4
    if ((m1 < 0) ^ (m2 < 0))
 80107ca:	0fd9      	lsrs	r1, r3, #31
        mult = 1 - mult;
 80107cc:	2900      	cmp	r1, #0
    result = (int32_t) (mult / (1ll << 31));
 80107ce:	4daa      	ldr	r5, [pc, #680]	; (8010a78 <arm_softmax_s8+0x9e8>)
        mult = 1 - mult;
 80107d0:	bf0b      	itete	eq
 80107d2:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
 80107d6:	4601      	movne	r1, r0
 80107d8:	2400      	moveq	r4, #0
 80107da:	f04f 34ff 	movne.w	r4, #4294967295
    result = (int32_t) (mult / (1ll << 31));
 80107de:	fbc3 1405 	smlal	r1, r4, r3, r5
 80107e2:	2c00      	cmp	r4, #0
 80107e4:	da05      	bge.n	80107f2 <arm_softmax_s8+0x762>
 80107e6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80107ea:	18cb      	adds	r3, r1, r3
 80107ec:	4619      	mov	r1, r3
 80107ee:	f144 0400 	adc.w	r4, r4, #0
 80107f2:	0fc9      	lsrs	r1, r1, #31
 80107f4:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 80107f8:	f101 41e2 	add.w	r1, r1, #1895825408	; 0x71000000
    SELECT_IF_NON_ZERO(1672461947)
 80107fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    mult = mult + (q63_t)m1 * m2;
 80107fe:	4e9f      	ldr	r6, [pc, #636]	; (8010a7c <arm_softmax_s8+0x9ec>)
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 8010800:	f5a1 2125 	sub.w	r1, r1, #675840	; 0xa5000
 8010804:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
 8010808:	2400      	movs	r4, #0
    SELECT_IF_NON_ZERO(1672461947)
 801080a:	ea01 0c03 	and.w	ip, r1, r3
    mult = mult + (q63_t)m1 * m2;
 801080e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010812:	461d      	mov	r5, r3
 8010814:	46a6      	mov	lr, r4
 8010816:	fbc1 5e06 	smlal	r5, lr, r1, r6
    result = (int32_t) (mult / (1ll << 31));
 801081a:	0fed      	lsrs	r5, r5, #31
 801081c:	ea45 054e 	orr.w	r5, r5, lr, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
 8010820:	9910      	ldr	r1, [sp, #64]	; 0x40
    mult = mult + (q63_t)m1 * m2;
 8010822:	4e97      	ldr	r6, [pc, #604]	; (8010a80 <arm_softmax_s8+0x9f0>)
    SELECT_IF_NON_ZERO(1672461947)
 8010824:	ea0a 0a05 	and.w	sl, sl, r5
 8010828:	ea8c 0a0a 	eor.w	sl, ip, sl
    SELECT_IF_NON_ZERO(1302514674)
 801082c:	ea0a 0501 	and.w	r5, sl, r1
    mult = mult + (q63_t)m1 * m2;
 8010830:	46a4      	mov	ip, r4
 8010832:	4619      	mov	r1, r3
 8010834:	fbca 1c06 	smlal	r1, ip, sl, r6
    result = (int32_t) (mult / (1ll << 31));
 8010838:	0fc9      	lsrs	r1, r1, #31
    SELECT_IF_NON_ZERO(1302514674)
 801083a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    result = (int32_t) (mult / (1ll << 31));
 801083c:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
 8010840:	400e      	ands	r6, r1
 8010842:	4631      	mov	r1, r6
 8010844:	4069      	eors	r1, r5
    SELECT_IF_NON_ZERO(790015084)
 8010846:	9d11      	ldr	r5, [sp, #68]	; 0x44
    mult = mult + (q63_t)m1 * m2;
 8010848:	4e8e      	ldr	r6, [pc, #568]	; (8010a84 <arm_softmax_s8+0x9f4>)
    SELECT_IF_NON_ZERO(790015084)
 801084a:	ea01 0c05 	and.w	ip, r1, r5
    mult = mult + (q63_t)m1 * m2;
 801084e:	46a6      	mov	lr, r4
 8010850:	461d      	mov	r5, r3
 8010852:	fbc1 5e06 	smlal	r5, lr, r1, r6
    result = (int32_t) (mult / (1ll << 31));
 8010856:	0fed      	lsrs	r5, r5, #31
    SELECT_IF_NON_ZERO(790015084)
 8010858:	9907      	ldr	r1, [sp, #28]
    SELECT_IF_NON_ZERO(290630308)
 801085a:	9e08      	ldr	r6, [sp, #32]
    result = (int32_t) (mult / (1ll << 31));
 801085c:	ea45 054e 	orr.w	r5, r5, lr, lsl #1
    SELECT_IF_NON_ZERO(790015084)
 8010860:	4029      	ands	r1, r5
    mult = mult + (q63_t)m1 * m2;
 8010862:	4d89      	ldr	r5, [pc, #548]	; (8010a88 <arm_softmax_s8+0x9f8>)
    SELECT_IF_NON_ZERO(790015084)
 8010864:	ea8c 0101 	eor.w	r1, ip, r1
    mult = mult + (q63_t)m1 * m2;
 8010868:	469e      	mov	lr, r3
 801086a:	46a4      	mov	ip, r4
 801086c:	fbc1 ec05 	smlal	lr, ip, r1, r5
 8010870:	4675      	mov	r5, lr
    result = (int32_t) (mult / (1ll << 31));
 8010872:	0fed      	lsrs	r5, r5, #31
 8010874:	ea45 054c 	orr.w	r5, r5, ip, lsl #1
    SELECT_IF_NON_ZERO(290630308)
 8010878:	400e      	ands	r6, r1
 801087a:	402f      	ands	r7, r5
 801087c:	4077      	eors	r7, r6
    mult = mult + (q63_t)m1 * m2;
 801087e:	4e83      	ldr	r6, [pc, #524]	; (8010a8c <arm_softmax_s8+0x9fc>)
 8010880:	4619      	mov	r1, r3
 8010882:	4625      	mov	r5, r4
 8010884:	fbc7 1506 	smlal	r1, r5, r7, r6
    result = (int32_t) (mult / (1ll << 31));
 8010888:	0fc9      	lsrs	r1, r1, #31
 801088a:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    SELECT_IF_NON_ZERO(39332535)
 801088e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    mult = mult + (q63_t)m1 * m2;
 8010890:	4e7f      	ldr	r6, [pc, #508]	; (8010a90 <arm_softmax_s8+0xa00>)
    SELECT_IF_NON_ZERO(39332535)
 8010892:	400d      	ands	r5, r1
 8010894:	403a      	ands	r2, r7
 8010896:	406a      	eors	r2, r5
    mult = mult + (q63_t)m1 * m2;
 8010898:	4619      	mov	r1, r3
 801089a:	4625      	mov	r5, r4
 801089c:	fbc2 1506 	smlal	r1, r5, r2, r6
    SELECT_IF_NON_ZERO(720401)
 80108a0:	ea02 0909 	and.w	r9, r2, r9
    result = (int32_t) (mult / (1ll << 31));
 80108a4:	0fc9      	lsrs	r1, r1, #31
    SELECT_IF_NON_ZERO(720401)
 80108a6:	9a06      	ldr	r2, [sp, #24]
    result = (int32_t) (mult / (1ll << 31));
 80108a8:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    SELECT_IF_NON_ZERO(720401)
 80108ac:	400a      	ands	r2, r1
 80108ae:	ea89 0102 	eor.w	r1, r9, r2
    mult = mult + (q63_t)m1 * m2;
 80108b2:	25f2      	movs	r5, #242	; 0xf2
 80108b4:	fbc1 3405 	smlal	r3, r4, r1, r5
    SELECT_IF_NON_ZERO(242)
 80108b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    result = (int32_t) (mult / (1ll << 31));
 80108ba:	0fdb      	lsrs	r3, r3, #31
 80108bc:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    SELECT_IF_NON_ZERO(242)
 80108c0:	400a      	ands	r2, r1
 80108c2:	ea0b 0b03 	and.w	fp, fp, r3
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 80108c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    if ((m1 < 0) ^ (m2 < 0))
 80108c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    SELECT_IF_NON_ZERO(242)
 80108ca:	ea82 020b 	eor.w	r2, r2, fp
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 80108ce:	401a      	ands	r2, r3
 80108d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108d2:	405a      	eors	r2, r3
    if ((m1 < 0) ^ (m2 < 0))
 80108d4:	ea84 0302 	eor.w	r3, r4, r2
 80108d8:	0fdb      	lsrs	r3, r3, #31
        mult = 1 - mult;
 80108da:	2b00      	cmp	r3, #0
 80108dc:	bf0b      	itete	eq
 80108de:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 80108e2:	4603      	movne	r3, r0
 80108e4:	2100      	moveq	r1, #0
 80108e6:	f04f 31ff 	movne.w	r1, #4294967295
    result = (int32_t) (mult / (1ll << 31));
 80108ea:	fbc2 3104 	smlal	r3, r1, r2, r4
 80108ee:	2900      	cmp	r1, #0
 80108f0:	da05      	bge.n	80108fe <arm_softmax_s8+0x86e>
 80108f2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80108f6:	189a      	adds	r2, r3, r2
 80108f8:	4613      	mov	r3, r2
 80108fa:	f141 0100 	adc.w	r1, r1, #0
 80108fe:	0fdb      	lsrs	r3, r3, #31
 8010900:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    int32_t remainder = remainder_mask & dividend;
 8010904:	9a15      	ldr	r2, [sp, #84]	; 0x54
    if (result < 0)
 8010906:	9914      	ldr	r1, [sp, #80]	; 0x50
    int32_t remainder = remainder_mask & dividend;
 8010908:	401a      	ands	r2, r3
    if (result < 0)
 801090a:	410b      	asrs	r3, r1
 801090c:	d41e      	bmi.n	801094c <arm_softmax_s8+0x8bc>
    if (remainder > threshold)
 801090e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010910:	4291      	cmp	r1, r2
 8010912:	da00      	bge.n	8010916 <arm_softmax_s8+0x886>
        result++;
 8010914:	3301      	adds	r3, #1
 8010916:	3b80      	subs	r3, #128	; 0x80
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 8010918:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 801091c:	db19      	blt.n	8010952 <arm_softmax_s8+0x8c2>
 801091e:	2b7e      	cmp	r3, #126	; 0x7e
 8010920:	dc79      	bgt.n	8010a16 <arm_softmax_s8+0x986>
 8010922:	b25b      	sxtb	r3, r3
            }
            else
            {
                output[col] = -128;
 8010924:	f888 3000 	strb.w	r3, [r8]
        for (col = 0; col < row_size; ++col)
 8010928:	9b05      	ldr	r3, [sp, #20]
 801092a:	9a00      	ldr	r2, [sp, #0]
 801092c:	4293      	cmp	r3, r2
 801092e:	f108 0801 	add.w	r8, r8, #1
 8010932:	d072      	beq.n	8010a1a <arm_softmax_s8+0x98a>
            diff = input[col] - max;
 8010934:	9a00      	ldr	r2, [sp, #0]
 8010936:	f912 3f01 	ldrsb.w	r3, [r2, #1]!
 801093a:	9200      	str	r2, [sp, #0]
 801093c:	9a02      	ldr	r2, [sp, #8]
 801093e:	1a9b      	subs	r3, r3, r2
            if (diff >= diff_min)
 8010940:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8010942:	429a      	cmp	r2, r3
 8010944:	f77f ae6a 	ble.w	801061c <arm_softmax_s8+0x58c>
                output[col] = -128;
 8010948:	2380      	movs	r3, #128	; 0x80
 801094a:	e7eb      	b.n	8010924 <arm_softmax_s8+0x894>
    if (remainder > threshold)
 801094c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801094e:	4291      	cmp	r1, r2
 8010950:	dbe0      	blt.n	8010914 <arm_softmax_s8+0x884>
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 8010952:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8010956:	e7e5      	b.n	8010924 <arm_softmax_s8+0x894>
        threshold++;
 8010958:	2502      	movs	r5, #2
 801095a:	e6f9      	b.n	8010750 <arm_softmax_s8+0x6c0>
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801095c:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8010960:	f000 8098 	beq.w	8010a94 <arm_softmax_s8+0xa04>
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8010964:	f042 457f 	orr.w	r5, r2, #4278190080	; 0xff000000
    const int32_t x                     = (val_mod_minus_quarter << 5) + (1 << 28);
 8010968:	016c      	lsls	r4, r5, #5
    const int32_t remainder             = val_mod_minus_quarter - val;
 801096a:	1aad      	subs	r5, r5, r2
    SELECT_IF_NON_ZERO(790015084)
 801096c:	f3c5 6e80 	ubfx	lr, r5, #26, #1
 8010970:	f10e 31ff 	add.w	r1, lr, #4294967295
    SELECT_IF_NON_ZERO(1302514674)
 8010974:	f3c5 6940 	ubfx	r9, r5, #25, #1
    mask = MASK_IF_ZERO(val);
 8010978:	fab2 f282 	clz	r2, r2
    SELECT_IF_NON_ZERO(242)
 801097c:	f3c5 7c80 	ubfx	ip, r5, #30, #1
 8010980:	9111      	str	r1, [sp, #68]	; 0x44
 8010982:	f109 31ff 	add.w	r1, r9, #4294967295
    mask = MASK_IF_ZERO(val);
 8010986:	0952      	lsrs	r2, r2, #5
 8010988:	9110      	str	r1, [sp, #64]	; 0x40
 801098a:	f10c 31ff 	add.w	r1, ip, #4294967295
 801098e:	910f      	str	r1, [sp, #60]	; 0x3c
 8010990:	1e51      	subs	r1, r2, #1
    const int32_t x                     = (val_mod_minus_quarter << 5) + (1 << 28);
 8010992:	f104 5480 	add.w	r4, r4, #268435456	; 0x10000000
    mult = mult + (q63_t)m1 * m2;
 8010996:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801099a:	2600      	movs	r6, #0
 801099c:	910e      	str	r1, [sp, #56]	; 0x38
    SELECT_IF_NON_ZERO(39332535)
 801099e:	f3c5 7100 	ubfx	r1, r5, #28, #1
    result = (int32_t) (mult / (1ll << 31));
 80109a2:	fbc4 3604 	smlal	r3, r6, r4, r4
    SELECT_IF_NON_ZERO(1672461947)
 80109a6:	f3c5 6b00 	ubfx	fp, r5, #24, #1
    SELECT_IF_NON_ZERO(39332535)
 80109aa:	9106      	str	r1, [sp, #24]
 80109ac:	f345 7100 	sbfx	r1, r5, #28, #1
 80109b0:	910d      	str	r1, [sp, #52]	; 0x34
    result = (int32_t) (mult / (1ll << 31));
 80109b2:	2e00      	cmp	r6, #0
 80109b4:	f10b 31ff 	add.w	r1, fp, #4294967295
 80109b8:	910c      	str	r1, [sp, #48]	; 0x30
 80109ba:	da05      	bge.n	80109c8 <arm_softmax_s8+0x938>
 80109bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80109c0:	1859      	adds	r1, r3, r1
 80109c2:	460b      	mov	r3, r1
 80109c4:	f146 0600 	adc.w	r6, r6, #0
 80109c8:	0fdb      	lsrs	r3, r3, #31
 80109ca:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    mult = mult + (q63_t)m1 * m2;
 80109ce:	fba3 1703 	umull	r1, r7, r3, r3
    result = (int32_t) (mult / (1ll << 31));
 80109d2:	17f6      	asrs	r6, r6, #31
    mult = mult + (q63_t)m1 * m2;
 80109d4:	f111 4180 	adds.w	r1, r1, #1073741824	; 0x40000000
 80109d8:	fb03 fa06 	mul.w	sl, r3, r6
    result = (int32_t) (mult / (1ll << 31));
 80109dc:	eb47 074a 	adc.w	r7, r7, sl, lsl #1
 80109e0:	2f00      	cmp	r7, #0
 80109e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80109e4:	da06      	bge.n	80109f4 <arm_softmax_s8+0x964>
 80109e6:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80109ea:	eb11 0a0a 	adds.w	sl, r1, sl
 80109ee:	4651      	mov	r1, sl
 80109f0:	f147 0700 	adc.w	r7, r7, #0
    mask = MASK_IF_ZERO(val);
 80109f4:	4252      	negs	r2, r2
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 80109f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    result = (int32_t) (mult / (1ll << 31));
 80109fa:	0fc9      	lsrs	r1, r1, #31
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 80109fc:	9209      	str	r2, [sp, #36]	; 0x24
 80109fe:	9a06      	ldr	r2, [sp, #24]
    result = (int32_t) (mult / (1ll << 31));
 8010a00:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
 8010a04:	f1c9 0700 	rsb	r7, r9, #0
    mult = mult + (q63_t)m1 * m2;
 8010a08:	fb04 f606 	mul.w	r6, r4, r6
    SELECT_IF_NON_ZERO(1302514674)
 8010a0c:	970a      	str	r7, [sp, #40]	; 0x28
 8010a0e:	3a01      	subs	r2, #1
    SELECT_IF_NON_ZERO(1672461947)
 8010a10:	f1cb 0a00 	rsb	sl, fp, #0
 8010a14:	e679      	b.n	801070a <arm_softmax_s8+0x67a>
 8010a16:	237f      	movs	r3, #127	; 0x7f
 8010a18:	e784      	b.n	8010924 <arm_softmax_s8+0x894>
            }
        }
        input += row_size;
 8010a1a:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
 8010a1e:	4411      	add	r1, r2
 8010a20:	9103      	str	r1, [sp, #12]
        output += row_size;
 8010a22:	9926      	ldr	r1, [sp, #152]	; 0x98
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8010a24:	9b18      	ldr	r3, [sp, #96]	; 0x60
        output += row_size;
 8010a26:	4411      	add	r1, r2
 8010a28:	9126      	str	r1, [sp, #152]	; 0x98
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8010a2a:	9905      	ldr	r1, [sp, #20]
 8010a2c:	4411      	add	r1, r2
 8010a2e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010a30:	9105      	str	r1, [sp, #20]
 8010a32:	3301      	adds	r3, #1
 8010a34:	429a      	cmp	r2, r3
 8010a36:	9318      	str	r3, [sp, #96]	; 0x60
 8010a38:	f47f ab3a 	bne.w	80100b0 <arm_softmax_s8+0x20>
    }

#endif
}
 8010a3c:	b01b      	add	sp, #108	; 0x6c
 8010a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8010a42:	f1b5 4f60 	cmp.w	r5, #3758096384	; 0xe0000000
 8010a46:	dc69      	bgt.n	8010b1c <arm_softmax_s8+0xa8c>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8010a48:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
        mult = 1 - mult;
 8010a4c:	4605      	mov	r5, r0
 8010a4e:	f04f 36ff 	mov.w	r6, #4294967295
 8010a52:	e587      	b.n	8010564 <arm_softmax_s8+0x4d4>
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8010a54:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8010a58:	dc55      	bgt.n	8010b06 <arm_softmax_s8+0xa76>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8010a5a:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
    int32_t result = val << exp;
 8010a5e:	0052      	lsls	r2, r2, #1
 8010a60:	9213      	str	r2, [sp, #76]	; 0x4c
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8010a62:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8010a66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010a68:	bfd8      	it	le
 8010a6a:	f04f 4300 	movle.w	r3, #2147483648	; 0x80000000
 8010a6e:	9313      	str	r3, [sp, #76]	; 0x4c
 8010a70:	e5b6      	b.n	80105e0 <arm_softmax_s8+0x550>
 8010a72:	bf00      	nop
 8010a74:	2aaaaaab 	.word	0x2aaaaaab
 8010a78:	70f5a894 	.word	0x70f5a894
 8010a7c:	63afbe7b 	.word	0x63afbe7b
 8010a80:	4da2cbf2 	.word	0x4da2cbf2
 8010a84:	2f16ac6c 	.word	0x2f16ac6c
 8010a88:	1152aaa4 	.word	0x1152aaa4
 8010a8c:	02582ab7 	.word	0x02582ab7
 8010a90:	000afe11 	.word	0x000afe11
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010a94:	f04f 0b00 	mov.w	fp, #0
 8010a98:	f04f 32ff 	mov.w	r2, #4294967295
 8010a9c:	4939      	ldr	r1, [pc, #228]	; (8010b84 <arm_softmax_s8+0xaf4>)
 8010a9e:	4b3a      	ldr	r3, [pc, #232]	; (8010b88 <arm_softmax_s8+0xaf8>)
 8010aa0:	910b      	str	r1, [sp, #44]	; 0x2c
 8010aa2:	e9cd 2b08 	strd	r2, fp, [sp, #32]
 8010aa6:	e9cd 2b0c 	strd	r2, fp, [sp, #48]	; 0x30
 8010aaa:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
 8010aae:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
 8010ab2:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8010b94 <arm_softmax_s8+0xb04>
 8010ab6:	4c35      	ldr	r4, [pc, #212]	; (8010b8c <arm_softmax_s8+0xafc>)
 8010ab8:	9312      	str	r3, [sp, #72]	; 0x48
 8010aba:	f8cd b018 	str.w	fp, [sp, #24]
 8010abe:	465f      	mov	r7, fp
 8010ac0:	f8cd b01c 	str.w	fp, [sp, #28]
 8010ac4:	46da      	mov	sl, fp
 8010ac6:	4691      	mov	r9, r2
 8010ac8:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8010acc:	46de      	mov	lr, fp
 8010ace:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8010ad2:	465e      	mov	r6, fp
 8010ad4:	e63b      	b.n	801074e <arm_softmax_s8+0x6be>
        for (col = 0; col < row_size; ++col)
 8010ad6:	f43f aafc 	beq.w	80100d2 <arm_softmax_s8+0x42>
 8010ada:	2300      	movs	r3, #0
 8010adc:	2103      	movs	r1, #3
 8010ade:	9114      	str	r1, [sp, #80]	; 0x50
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8010ae0:	4a2b      	ldr	r2, [pc, #172]	; (8010b90 <arm_softmax_s8+0xb00>)
 8010ae2:	9300      	str	r3, [sp, #0]
 8010ae4:	4619      	mov	r1, r3
        mult = 1 - mult;
 8010ae6:	4606      	mov	r6, r0
 8010ae8:	f04f 3cff 	mov.w	ip, #4294967295
 8010aec:	e500      	b.n	80104f0 <arm_softmax_s8+0x460>
 8010aee:	4611      	mov	r1, r2
 8010af0:	2303      	movs	r3, #3
 8010af2:	9314      	str	r3, [sp, #80]	; 0x50
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8010af4:	4a26      	ldr	r2, [pc, #152]	; (8010b90 <arm_softmax_s8+0xb00>)
 8010af6:	460b      	mov	r3, r1
        mult = 1 - mult;
 8010af8:	4606      	mov	r6, r0
 8010afa:	f04f 3cff 	mov.w	ip, #4294967295
 8010afe:	e4f7      	b.n	80104f0 <arm_softmax_s8+0x460>
    int32_t result = val << exp;
 8010b00:	0053      	lsls	r3, r2, #1
 8010b02:	9313      	str	r3, [sp, #76]	; 0x4c
 8010b04:	e56c      	b.n	80105e0 <arm_softmax_s8+0x550>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8010b06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    int32_t result = val << exp;
 8010b0a:	005a      	lsls	r2, r3, #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8010b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    int32_t result = val << exp;
 8010b10:	9213      	str	r2, [sp, #76]	; 0x4c
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8010b12:	dba6      	blt.n	8010a62 <arm_softmax_s8+0x9d2>
 8010b14:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010b18:	9313      	str	r3, [sp, #76]	; 0x4c
 8010b1a:	e561      	b.n	80105e0 <arm_softmax_s8+0x550>
    if ((m1 < 0) ^ (m2 < 0))
 8010b1c:	9c00      	ldr	r4, [sp, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8010b1e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    if ((m1 < 0) ^ (m2 < 0))
 8010b22:	4054      	eors	r4, r2
 8010b24:	0fe4      	lsrs	r4, r4, #31
        mult = 1 - mult;
 8010b26:	2c00      	cmp	r4, #0
    mult = mult + (q63_t)m1 * m2;
 8010b28:	fb02 f101 	mul.w	r1, r2, r1
 8010b2c:	ea4f 74e2 	mov.w	r4, r2, asr #31
 8010b30:	fb03 1104 	mla	r1, r3, r4, r1
 8010b34:	fba2 5303 	umull	r5, r3, r2, r3
 8010b38:	eb01 0603 	add.w	r6, r1, r3
        mult = 1 - mult;
 8010b3c:	bf0b      	itete	eq
 8010b3e:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 8010b42:	4603      	movne	r3, r0
 8010b44:	2100      	moveq	r1, #0
 8010b46:	f04f 31ff 	movne.w	r1, #4294967295
    mult = mult + (q63_t)m1 * m2;
 8010b4a:	18eb      	adds	r3, r5, r3
    result = (int32_t) (mult / (1ll << 31));
 8010b4c:	eb46 0101 	adc.w	r1, r6, r1
 8010b50:	2900      	cmp	r1, #0
 8010b52:	da05      	bge.n	8010b60 <arm_softmax_s8+0xad0>
 8010b54:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8010b58:	195d      	adds	r5, r3, r5
 8010b5a:	462b      	mov	r3, r5
 8010b5c:	f141 0100 	adc.w	r1, r1, #0
 8010b60:	0fdb      	lsrs	r3, r3, #31
 8010b62:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8010b66:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
 8010b6a:	ea82 0103 	eor.w	r1, r2, r3
 8010b6e:	0fc9      	lsrs	r1, r1, #31
        mult = 1 - mult;
 8010b70:	2900      	cmp	r1, #0
 8010b72:	bf0b      	itete	eq
 8010b74:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
 8010b78:	4601      	movne	r1, r0
 8010b7a:	2500      	moveq	r5, #0
 8010b7c:	f04f 35ff 	movne.w	r5, #4294967295
 8010b80:	e50b      	b.n	801059a <arm_softmax_s8+0x50a>
 8010b82:	bf00      	nop
 8010b84:	01fffff8 	.word	0x01fffff8
 8010b88:	40000100 	.word	0x40000100
 8010b8c:	0fffffe0 	.word	0x0fffffe0
 8010b90:	b4b4b4b6 	.word	0xb4b4b4b6
 8010b94:	001fffff 	.word	0x001fffff

08010b98 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode *op_code) {
 8010b98:	b508      	push	{r3, lr}
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
 8010b9a:	b1a8      	cbz	r0, 8010bc8 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x30>
    return data_ - ReadScalar<soffset_t>(data_);
 8010b9c:	6803      	ldr	r3, [r0, #0]
 8010b9e:	1ac3      	subs	r3, r0, r3
 8010ba0:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8010ba2:	2a0a      	cmp	r2, #10
 8010ba4:	d90a      	bls.n	8010bbc <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x24>
 8010ba6:	895a      	ldrh	r2, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8010ba8:	b102      	cbz	r2, 8010bac <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x14>
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
 8010baa:	5c82      	ldrb	r2, [r0, r2]
 8010bac:	889b      	ldrh	r3, [r3, #4]
 8010bae:	b11b      	cbz	r3, 8010bb8 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x20>
    max(const _Tp& __a, const _Tp& __b)
 8010bb0:	5cc3      	ldrb	r3, [r0, r3]
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	bf38      	it	cc
 8010bb6:	461a      	movcc	r2, r3

  return std::max(
      op_code->builtin_code(),
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
}
 8010bb8:	4610      	mov	r0, r2
 8010bba:	bd08      	pop	{r3, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8010bbc:	2a04      	cmp	r2, #4
 8010bbe:	f04f 0200 	mov.w	r2, #0
 8010bc2:	d8f3      	bhi.n	8010bac <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x14>
 8010bc4:	4610      	mov	r0, r2
 8010bc6:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(op_code != nullptr);
 8010bc8:	f000 fadc 	bl	8011184 <abort>

08010bcc <_ZdlPvj>:
 8010bcc:	f000 b824 	b.w	8010c18 <_ZdlPv>

08010bd0 <_ZdaPv>:
 8010bd0:	f000 b822 	b.w	8010c18 <_ZdlPv>

08010bd4 <__cxa_guard_acquire>:
 8010bd4:	6803      	ldr	r3, [r0, #0]
 8010bd6:	07db      	lsls	r3, r3, #31
 8010bd8:	d406      	bmi.n	8010be8 <__cxa_guard_acquire+0x14>
 8010bda:	7843      	ldrb	r3, [r0, #1]
 8010bdc:	b103      	cbz	r3, 8010be0 <__cxa_guard_acquire+0xc>
 8010bde:	deff      	udf	#255	; 0xff
 8010be0:	2301      	movs	r3, #1
 8010be2:	7043      	strb	r3, [r0, #1]
 8010be4:	4618      	mov	r0, r3
 8010be6:	4770      	bx	lr
 8010be8:	2000      	movs	r0, #0
 8010bea:	4770      	bx	lr

08010bec <__cxa_guard_release>:
 8010bec:	2301      	movs	r3, #1
 8010bee:	6003      	str	r3, [r0, #0]
 8010bf0:	4770      	bx	lr

08010bf2 <_Znwj>:
 8010bf2:	2801      	cmp	r0, #1
 8010bf4:	bf38      	it	cc
 8010bf6:	2001      	movcc	r0, #1
 8010bf8:	b510      	push	{r4, lr}
 8010bfa:	4604      	mov	r4, r0
 8010bfc:	4620      	mov	r0, r4
 8010bfe:	f000 faed 	bl	80111dc <malloc>
 8010c02:	b100      	cbz	r0, 8010c06 <_Znwj+0x14>
 8010c04:	bd10      	pop	{r4, pc}
 8010c06:	f000 f809 	bl	8010c1c <_ZSt15get_new_handlerv>
 8010c0a:	b908      	cbnz	r0, 8010c10 <_Znwj+0x1e>
 8010c0c:	f000 faba 	bl	8011184 <abort>
 8010c10:	4780      	blx	r0
 8010c12:	e7f3      	b.n	8010bfc <_Znwj+0xa>

08010c14 <_Znaj>:
 8010c14:	f7ff bfed 	b.w	8010bf2 <_Znwj>

08010c18 <_ZdlPv>:
 8010c18:	f000 bae8 	b.w	80111ec <free>

08010c1c <_ZSt15get_new_handlerv>:
 8010c1c:	4b02      	ldr	r3, [pc, #8]	; (8010c28 <_ZSt15get_new_handlerv+0xc>)
 8010c1e:	6818      	ldr	r0, [r3, #0]
 8010c20:	f3bf 8f5b 	dmb	ish
 8010c24:	4770      	bx	lr
 8010c26:	bf00      	nop
 8010c28:	2000e9d4 	.word	0x2000e9d4

08010c2c <frexp>:
 8010c2c:	b570      	push	{r4, r5, r6, lr}
 8010c2e:	2100      	movs	r1, #0
 8010c30:	ec55 4b10 	vmov	r4, r5, d0
 8010c34:	6001      	str	r1, [r0, #0]
 8010c36:	4916      	ldr	r1, [pc, #88]	; (8010c90 <frexp+0x64>)
 8010c38:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8010c3c:	428a      	cmp	r2, r1
 8010c3e:	4606      	mov	r6, r0
 8010c40:	462b      	mov	r3, r5
 8010c42:	dc22      	bgt.n	8010c8a <frexp+0x5e>
 8010c44:	ee10 1a10 	vmov	r1, s0
 8010c48:	4311      	orrs	r1, r2
 8010c4a:	d01e      	beq.n	8010c8a <frexp+0x5e>
 8010c4c:	4911      	ldr	r1, [pc, #68]	; (8010c94 <frexp+0x68>)
 8010c4e:	4029      	ands	r1, r5
 8010c50:	b969      	cbnz	r1, 8010c6e <frexp+0x42>
 8010c52:	4b11      	ldr	r3, [pc, #68]	; (8010c98 <frexp+0x6c>)
 8010c54:	2200      	movs	r2, #0
 8010c56:	ee10 0a10 	vmov	r0, s0
 8010c5a:	4629      	mov	r1, r5
 8010c5c:	f7ef fcdc 	bl	8000618 <__aeabi_dmul>
 8010c60:	460b      	mov	r3, r1
 8010c62:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8010c66:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8010c6a:	4604      	mov	r4, r0
 8010c6c:	6031      	str	r1, [r6, #0]
 8010c6e:	6831      	ldr	r1, [r6, #0]
 8010c70:	1512      	asrs	r2, r2, #20
 8010c72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010c76:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8010c7a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010c7e:	4411      	add	r1, r2
 8010c80:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8010c84:	6031      	str	r1, [r6, #0]
 8010c86:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8010c8a:	ec45 4b10 	vmov	d0, r4, r5
 8010c8e:	bd70      	pop	{r4, r5, r6, pc}
 8010c90:	7fefffff 	.word	0x7fefffff
 8010c94:	7ff00000 	.word	0x7ff00000
 8010c98:	43500000 	.word	0x43500000

08010c9c <expf>:
 8010c9c:	b508      	push	{r3, lr}
 8010c9e:	ed2d 8b02 	vpush	{d8}
 8010ca2:	eef0 8a40 	vmov.f32	s17, s0
 8010ca6:	f000 f99f 	bl	8010fe8 <__ieee754_expf>
 8010caa:	eeb0 8a40 	vmov.f32	s16, s0
 8010cae:	eeb0 0a68 	vmov.f32	s0, s17
 8010cb2:	f000 f829 	bl	8010d08 <finitef>
 8010cb6:	b160      	cbz	r0, 8010cd2 <expf+0x36>
 8010cb8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8010cf8 <expf+0x5c>
 8010cbc:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cc4:	dd0a      	ble.n	8010cdc <expf+0x40>
 8010cc6:	f001 fa8b 	bl	80121e0 <__errno>
 8010cca:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8010cfc <expf+0x60>
 8010cce:	2322      	movs	r3, #34	; 0x22
 8010cd0:	6003      	str	r3, [r0, #0]
 8010cd2:	eeb0 0a48 	vmov.f32	s0, s16
 8010cd6:	ecbd 8b02 	vpop	{d8}
 8010cda:	bd08      	pop	{r3, pc}
 8010cdc:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010d00 <expf+0x64>
 8010ce0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ce8:	d5f3      	bpl.n	8010cd2 <expf+0x36>
 8010cea:	f001 fa79 	bl	80121e0 <__errno>
 8010cee:	2322      	movs	r3, #34	; 0x22
 8010cf0:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8010d04 <expf+0x68>
 8010cf4:	6003      	str	r3, [r0, #0]
 8010cf6:	e7ec      	b.n	8010cd2 <expf+0x36>
 8010cf8:	42b17217 	.word	0x42b17217
 8010cfc:	7f800000 	.word	0x7f800000
 8010d00:	c2cff1b5 	.word	0xc2cff1b5
 8010d04:	00000000 	.word	0x00000000

08010d08 <finitef>:
 8010d08:	b082      	sub	sp, #8
 8010d0a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8010d0e:	9801      	ldr	r0, [sp, #4]
 8010d10:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010d14:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8010d18:	bfac      	ite	ge
 8010d1a:	2000      	movge	r0, #0
 8010d1c:	2001      	movlt	r0, #1
 8010d1e:	b002      	add	sp, #8
 8010d20:	4770      	bx	lr

08010d22 <fmaxf>:
 8010d22:	b508      	push	{r3, lr}
 8010d24:	ed2d 8b02 	vpush	{d8}
 8010d28:	eeb0 8a40 	vmov.f32	s16, s0
 8010d2c:	eef0 8a60 	vmov.f32	s17, s1
 8010d30:	f000 f82e 	bl	8010d90 <__fpclassifyf>
 8010d34:	b148      	cbz	r0, 8010d4a <fmaxf+0x28>
 8010d36:	eeb0 0a68 	vmov.f32	s0, s17
 8010d3a:	f000 f829 	bl	8010d90 <__fpclassifyf>
 8010d3e:	b130      	cbz	r0, 8010d4e <fmaxf+0x2c>
 8010d40:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d48:	dc01      	bgt.n	8010d4e <fmaxf+0x2c>
 8010d4a:	eeb0 8a68 	vmov.f32	s16, s17
 8010d4e:	eeb0 0a48 	vmov.f32	s0, s16
 8010d52:	ecbd 8b02 	vpop	{d8}
 8010d56:	bd08      	pop	{r3, pc}

08010d58 <fminf>:
 8010d58:	b508      	push	{r3, lr}
 8010d5a:	ed2d 8b02 	vpush	{d8}
 8010d5e:	eeb0 8a40 	vmov.f32	s16, s0
 8010d62:	eef0 8a60 	vmov.f32	s17, s1
 8010d66:	f000 f813 	bl	8010d90 <__fpclassifyf>
 8010d6a:	b148      	cbz	r0, 8010d80 <fminf+0x28>
 8010d6c:	eeb0 0a68 	vmov.f32	s0, s17
 8010d70:	f000 f80e 	bl	8010d90 <__fpclassifyf>
 8010d74:	b130      	cbz	r0, 8010d84 <fminf+0x2c>
 8010d76:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d7e:	d401      	bmi.n	8010d84 <fminf+0x2c>
 8010d80:	eeb0 8a68 	vmov.f32	s16, s17
 8010d84:	eeb0 0a48 	vmov.f32	s0, s16
 8010d88:	ecbd 8b02 	vpop	{d8}
 8010d8c:	bd08      	pop	{r3, pc}
	...

08010d90 <__fpclassifyf>:
 8010d90:	ee10 3a10 	vmov	r3, s0
 8010d94:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8010d98:	d00d      	beq.n	8010db6 <__fpclassifyf+0x26>
 8010d9a:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8010d9e:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8010da2:	d30a      	bcc.n	8010dba <__fpclassifyf+0x2a>
 8010da4:	4b07      	ldr	r3, [pc, #28]	; (8010dc4 <__fpclassifyf+0x34>)
 8010da6:	1e42      	subs	r2, r0, #1
 8010da8:	429a      	cmp	r2, r3
 8010daa:	d908      	bls.n	8010dbe <__fpclassifyf+0x2e>
 8010dac:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8010db0:	4258      	negs	r0, r3
 8010db2:	4158      	adcs	r0, r3
 8010db4:	4770      	bx	lr
 8010db6:	2002      	movs	r0, #2
 8010db8:	4770      	bx	lr
 8010dba:	2004      	movs	r0, #4
 8010dbc:	4770      	bx	lr
 8010dbe:	2003      	movs	r0, #3
 8010dc0:	4770      	bx	lr
 8010dc2:	bf00      	nop
 8010dc4:	007ffffe 	.word	0x007ffffe

08010dc8 <with_errnof>:
 8010dc8:	b513      	push	{r0, r1, r4, lr}
 8010dca:	4604      	mov	r4, r0
 8010dcc:	ed8d 0a01 	vstr	s0, [sp, #4]
 8010dd0:	f001 fa06 	bl	80121e0 <__errno>
 8010dd4:	ed9d 0a01 	vldr	s0, [sp, #4]
 8010dd8:	6004      	str	r4, [r0, #0]
 8010dda:	b002      	add	sp, #8
 8010ddc:	bd10      	pop	{r4, pc}

08010dde <xflowf>:
 8010dde:	b130      	cbz	r0, 8010dee <xflowf+0x10>
 8010de0:	eef1 7a40 	vneg.f32	s15, s0
 8010de4:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010de8:	2022      	movs	r0, #34	; 0x22
 8010dea:	f7ff bfed 	b.w	8010dc8 <with_errnof>
 8010dee:	eef0 7a40 	vmov.f32	s15, s0
 8010df2:	e7f7      	b.n	8010de4 <xflowf+0x6>

08010df4 <__math_uflowf>:
 8010df4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010dfc <__math_uflowf+0x8>
 8010df8:	f7ff bff1 	b.w	8010dde <xflowf>
 8010dfc:	10000000 	.word	0x10000000

08010e00 <__math_oflowf>:
 8010e00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010e08 <__math_oflowf+0x8>
 8010e04:	f7ff bfeb 	b.w	8010dde <xflowf>
 8010e08:	70000000 	.word	0x70000000
 8010e0c:	00000000 	.word	0x00000000

08010e10 <floor>:
 8010e10:	ec51 0b10 	vmov	r0, r1, d0
 8010e14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e1c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8010e20:	2e13      	cmp	r6, #19
 8010e22:	ee10 5a10 	vmov	r5, s0
 8010e26:	ee10 8a10 	vmov	r8, s0
 8010e2a:	460c      	mov	r4, r1
 8010e2c:	dc31      	bgt.n	8010e92 <floor+0x82>
 8010e2e:	2e00      	cmp	r6, #0
 8010e30:	da14      	bge.n	8010e5c <floor+0x4c>
 8010e32:	a333      	add	r3, pc, #204	; (adr r3, 8010f00 <floor+0xf0>)
 8010e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e38:	f7ef fa38 	bl	80002ac <__adddf3>
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	2300      	movs	r3, #0
 8010e40:	f7ef fe7a 	bl	8000b38 <__aeabi_dcmpgt>
 8010e44:	b138      	cbz	r0, 8010e56 <floor+0x46>
 8010e46:	2c00      	cmp	r4, #0
 8010e48:	da53      	bge.n	8010ef2 <floor+0xe2>
 8010e4a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8010e4e:	4325      	orrs	r5, r4
 8010e50:	d052      	beq.n	8010ef8 <floor+0xe8>
 8010e52:	4c2d      	ldr	r4, [pc, #180]	; (8010f08 <floor+0xf8>)
 8010e54:	2500      	movs	r5, #0
 8010e56:	4621      	mov	r1, r4
 8010e58:	4628      	mov	r0, r5
 8010e5a:	e024      	b.n	8010ea6 <floor+0x96>
 8010e5c:	4f2b      	ldr	r7, [pc, #172]	; (8010f0c <floor+0xfc>)
 8010e5e:	4137      	asrs	r7, r6
 8010e60:	ea01 0307 	and.w	r3, r1, r7
 8010e64:	4303      	orrs	r3, r0
 8010e66:	d01e      	beq.n	8010ea6 <floor+0x96>
 8010e68:	a325      	add	r3, pc, #148	; (adr r3, 8010f00 <floor+0xf0>)
 8010e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e6e:	f7ef fa1d 	bl	80002ac <__adddf3>
 8010e72:	2200      	movs	r2, #0
 8010e74:	2300      	movs	r3, #0
 8010e76:	f7ef fe5f 	bl	8000b38 <__aeabi_dcmpgt>
 8010e7a:	2800      	cmp	r0, #0
 8010e7c:	d0eb      	beq.n	8010e56 <floor+0x46>
 8010e7e:	2c00      	cmp	r4, #0
 8010e80:	bfbe      	ittt	lt
 8010e82:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010e86:	4133      	asrlt	r3, r6
 8010e88:	18e4      	addlt	r4, r4, r3
 8010e8a:	ea24 0407 	bic.w	r4, r4, r7
 8010e8e:	2500      	movs	r5, #0
 8010e90:	e7e1      	b.n	8010e56 <floor+0x46>
 8010e92:	2e33      	cmp	r6, #51	; 0x33
 8010e94:	dd0b      	ble.n	8010eae <floor+0x9e>
 8010e96:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010e9a:	d104      	bne.n	8010ea6 <floor+0x96>
 8010e9c:	ee10 2a10 	vmov	r2, s0
 8010ea0:	460b      	mov	r3, r1
 8010ea2:	f7ef fa03 	bl	80002ac <__adddf3>
 8010ea6:	ec41 0b10 	vmov	d0, r0, r1
 8010eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eae:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8010eb2:	f04f 37ff 	mov.w	r7, #4294967295
 8010eb6:	40df      	lsrs	r7, r3
 8010eb8:	4238      	tst	r0, r7
 8010eba:	d0f4      	beq.n	8010ea6 <floor+0x96>
 8010ebc:	a310      	add	r3, pc, #64	; (adr r3, 8010f00 <floor+0xf0>)
 8010ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec2:	f7ef f9f3 	bl	80002ac <__adddf3>
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	2300      	movs	r3, #0
 8010eca:	f7ef fe35 	bl	8000b38 <__aeabi_dcmpgt>
 8010ece:	2800      	cmp	r0, #0
 8010ed0:	d0c1      	beq.n	8010e56 <floor+0x46>
 8010ed2:	2c00      	cmp	r4, #0
 8010ed4:	da0a      	bge.n	8010eec <floor+0xdc>
 8010ed6:	2e14      	cmp	r6, #20
 8010ed8:	d101      	bne.n	8010ede <floor+0xce>
 8010eda:	3401      	adds	r4, #1
 8010edc:	e006      	b.n	8010eec <floor+0xdc>
 8010ede:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	40b3      	lsls	r3, r6
 8010ee6:	441d      	add	r5, r3
 8010ee8:	45a8      	cmp	r8, r5
 8010eea:	d8f6      	bhi.n	8010eda <floor+0xca>
 8010eec:	ea25 0507 	bic.w	r5, r5, r7
 8010ef0:	e7b1      	b.n	8010e56 <floor+0x46>
 8010ef2:	2500      	movs	r5, #0
 8010ef4:	462c      	mov	r4, r5
 8010ef6:	e7ae      	b.n	8010e56 <floor+0x46>
 8010ef8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8010efc:	e7ab      	b.n	8010e56 <floor+0x46>
 8010efe:	bf00      	nop
 8010f00:	8800759c 	.word	0x8800759c
 8010f04:	7e37e43c 	.word	0x7e37e43c
 8010f08:	bff00000 	.word	0xbff00000
 8010f0c:	000fffff 	.word	0x000fffff

08010f10 <round>:
 8010f10:	ec53 2b10 	vmov	r2, r3, d0
 8010f14:	b570      	push	{r4, r5, r6, lr}
 8010f16:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8010f1a:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8010f1e:	2813      	cmp	r0, #19
 8010f20:	ee10 5a10 	vmov	r5, s0
 8010f24:	4619      	mov	r1, r3
 8010f26:	dc18      	bgt.n	8010f5a <round+0x4a>
 8010f28:	2800      	cmp	r0, #0
 8010f2a:	da09      	bge.n	8010f40 <round+0x30>
 8010f2c:	3001      	adds	r0, #1
 8010f2e:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8010f32:	d103      	bne.n	8010f3c <round+0x2c>
 8010f34:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8010f38:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	e02a      	b.n	8010f96 <round+0x86>
 8010f40:	4c16      	ldr	r4, [pc, #88]	; (8010f9c <round+0x8c>)
 8010f42:	4104      	asrs	r4, r0
 8010f44:	ea03 0604 	and.w	r6, r3, r4
 8010f48:	4316      	orrs	r6, r2
 8010f4a:	d011      	beq.n	8010f70 <round+0x60>
 8010f4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010f50:	4103      	asrs	r3, r0
 8010f52:	440b      	add	r3, r1
 8010f54:	ea23 0104 	bic.w	r1, r3, r4
 8010f58:	e7f0      	b.n	8010f3c <round+0x2c>
 8010f5a:	2833      	cmp	r0, #51	; 0x33
 8010f5c:	dd0b      	ble.n	8010f76 <round+0x66>
 8010f5e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010f62:	d105      	bne.n	8010f70 <round+0x60>
 8010f64:	ee10 0a10 	vmov	r0, s0
 8010f68:	f7ef f9a0 	bl	80002ac <__adddf3>
 8010f6c:	4602      	mov	r2, r0
 8010f6e:	460b      	mov	r3, r1
 8010f70:	ec43 2b10 	vmov	d0, r2, r3
 8010f74:	bd70      	pop	{r4, r5, r6, pc}
 8010f76:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8010f7a:	f04f 34ff 	mov.w	r4, #4294967295
 8010f7e:	40f4      	lsrs	r4, r6
 8010f80:	4214      	tst	r4, r2
 8010f82:	d0f5      	beq.n	8010f70 <round+0x60>
 8010f84:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8010f88:	2301      	movs	r3, #1
 8010f8a:	4083      	lsls	r3, r0
 8010f8c:	195b      	adds	r3, r3, r5
 8010f8e:	bf28      	it	cs
 8010f90:	3101      	addcs	r1, #1
 8010f92:	ea23 0304 	bic.w	r3, r3, r4
 8010f96:	461a      	mov	r2, r3
 8010f98:	460b      	mov	r3, r1
 8010f9a:	e7e9      	b.n	8010f70 <round+0x60>
 8010f9c:	000fffff 	.word	0x000fffff

08010fa0 <roundf>:
 8010fa0:	ee10 0a10 	vmov	r0, s0
 8010fa4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8010fa8:	3a7f      	subs	r2, #127	; 0x7f
 8010faa:	2a16      	cmp	r2, #22
 8010fac:	dc15      	bgt.n	8010fda <roundf+0x3a>
 8010fae:	2a00      	cmp	r2, #0
 8010fb0:	da08      	bge.n	8010fc4 <roundf+0x24>
 8010fb2:	3201      	adds	r2, #1
 8010fb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8010fb8:	d101      	bne.n	8010fbe <roundf+0x1e>
 8010fba:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8010fbe:	ee00 3a10 	vmov	s0, r3
 8010fc2:	4770      	bx	lr
 8010fc4:	4907      	ldr	r1, [pc, #28]	; (8010fe4 <roundf+0x44>)
 8010fc6:	4111      	asrs	r1, r2
 8010fc8:	4208      	tst	r0, r1
 8010fca:	d0fa      	beq.n	8010fc2 <roundf+0x22>
 8010fcc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010fd0:	4113      	asrs	r3, r2
 8010fd2:	4403      	add	r3, r0
 8010fd4:	ea23 0301 	bic.w	r3, r3, r1
 8010fd8:	e7f1      	b.n	8010fbe <roundf+0x1e>
 8010fda:	2a80      	cmp	r2, #128	; 0x80
 8010fdc:	d1f1      	bne.n	8010fc2 <roundf+0x22>
 8010fde:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010fe2:	4770      	bx	lr
 8010fe4:	007fffff 	.word	0x007fffff

08010fe8 <__ieee754_expf>:
 8010fe8:	ee10 2a10 	vmov	r2, s0
 8010fec:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8010ff0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010ff4:	d902      	bls.n	8010ffc <__ieee754_expf+0x14>
 8010ff6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010ffa:	4770      	bx	lr
 8010ffc:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8011000:	d106      	bne.n	8011010 <__ieee754_expf+0x28>
 8011002:	eddf 7a4e 	vldr	s15, [pc, #312]	; 801113c <__ieee754_expf+0x154>
 8011006:	2900      	cmp	r1, #0
 8011008:	bf18      	it	ne
 801100a:	eeb0 0a67 	vmovne.f32	s0, s15
 801100e:	4770      	bx	lr
 8011010:	484b      	ldr	r0, [pc, #300]	; (8011140 <__ieee754_expf+0x158>)
 8011012:	4282      	cmp	r2, r0
 8011014:	dd02      	ble.n	801101c <__ieee754_expf+0x34>
 8011016:	2000      	movs	r0, #0
 8011018:	f7ff bef2 	b.w	8010e00 <__math_oflowf>
 801101c:	2a00      	cmp	r2, #0
 801101e:	da05      	bge.n	801102c <__ieee754_expf+0x44>
 8011020:	4a48      	ldr	r2, [pc, #288]	; (8011144 <__ieee754_expf+0x15c>)
 8011022:	4293      	cmp	r3, r2
 8011024:	d902      	bls.n	801102c <__ieee754_expf+0x44>
 8011026:	2000      	movs	r0, #0
 8011028:	f7ff bee4 	b.w	8010df4 <__math_uflowf>
 801102c:	4a46      	ldr	r2, [pc, #280]	; (8011148 <__ieee754_expf+0x160>)
 801102e:	4293      	cmp	r3, r2
 8011030:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8011034:	d952      	bls.n	80110dc <__ieee754_expf+0xf4>
 8011036:	4a45      	ldr	r2, [pc, #276]	; (801114c <__ieee754_expf+0x164>)
 8011038:	4293      	cmp	r3, r2
 801103a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801103e:	d834      	bhi.n	80110aa <__ieee754_expf+0xc2>
 8011040:	4b43      	ldr	r3, [pc, #268]	; (8011150 <__ieee754_expf+0x168>)
 8011042:	4413      	add	r3, r2
 8011044:	ed93 7a00 	vldr	s14, [r3]
 8011048:	4b42      	ldr	r3, [pc, #264]	; (8011154 <__ieee754_expf+0x16c>)
 801104a:	4413      	add	r3, r2
 801104c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8011050:	f1c1 0201 	rsb	r2, r1, #1
 8011054:	edd3 7a00 	vldr	s15, [r3]
 8011058:	1a52      	subs	r2, r2, r1
 801105a:	ee37 0a67 	vsub.f32	s0, s14, s15
 801105e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8011062:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8011158 <__ieee754_expf+0x170>
 8011066:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801115c <__ieee754_expf+0x174>
 801106a:	eee6 6a05 	vfma.f32	s13, s12, s10
 801106e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8011160 <__ieee754_expf+0x178>
 8011072:	eea6 5a86 	vfma.f32	s10, s13, s12
 8011076:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8011164 <__ieee754_expf+0x17c>
 801107a:	eee5 6a06 	vfma.f32	s13, s10, s12
 801107e:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8011168 <__ieee754_expf+0x180>
 8011082:	eea6 5a86 	vfma.f32	s10, s13, s12
 8011086:	eef0 6a40 	vmov.f32	s13, s0
 801108a:	eee5 6a46 	vfms.f32	s13, s10, s12
 801108e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8011092:	ee20 5a26 	vmul.f32	s10, s0, s13
 8011096:	bb92      	cbnz	r2, 80110fe <__ieee754_expf+0x116>
 8011098:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801109c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80110a0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80110a4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80110a8:	4770      	bx	lr
 80110aa:	4b30      	ldr	r3, [pc, #192]	; (801116c <__ieee754_expf+0x184>)
 80110ac:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8011170 <__ieee754_expf+0x188>
 80110b0:	eddf 6a30 	vldr	s13, [pc, #192]	; 8011174 <__ieee754_expf+0x18c>
 80110b4:	4413      	add	r3, r2
 80110b6:	edd3 7a00 	vldr	s15, [r3]
 80110ba:	eee0 7a07 	vfma.f32	s15, s0, s14
 80110be:	eeb0 7a40 	vmov.f32	s14, s0
 80110c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80110c6:	ee17 2a90 	vmov	r2, s15
 80110ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110ce:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80110d2:	eddf 6a29 	vldr	s13, [pc, #164]	; 8011178 <__ieee754_expf+0x190>
 80110d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80110da:	e7be      	b.n	801105a <__ieee754_expf+0x72>
 80110dc:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 80110e0:	d20b      	bcs.n	80110fa <__ieee754_expf+0x112>
 80110e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 801117c <__ieee754_expf+0x194>
 80110e6:	ee70 6a26 	vadd.f32	s13, s0, s13
 80110ea:	eef4 6ae5 	vcmpe.f32	s13, s11
 80110ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110f2:	dd02      	ble.n	80110fa <__ieee754_expf+0x112>
 80110f4:	ee30 0a25 	vadd.f32	s0, s0, s11
 80110f8:	4770      	bx	lr
 80110fa:	2200      	movs	r2, #0
 80110fc:	e7af      	b.n	801105e <__ieee754_expf+0x76>
 80110fe:	ee36 6a66 	vsub.f32	s12, s12, s13
 8011102:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8011106:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801110a:	bfb8      	it	lt
 801110c:	3264      	addlt	r2, #100	; 0x64
 801110e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011112:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011116:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801111a:	ee17 3a90 	vmov	r3, s15
 801111e:	bfab      	itete	ge
 8011120:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8011124:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8011128:	ee00 3a10 	vmovge	s0, r3
 801112c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8011180 <__ieee754_expf+0x198>
 8011130:	bfbc      	itt	lt
 8011132:	ee00 3a10 	vmovlt	s0, r3
 8011136:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801113a:	4770      	bx	lr
 801113c:	00000000 	.word	0x00000000
 8011140:	42b17217 	.word	0x42b17217
 8011144:	42cff1b5 	.word	0x42cff1b5
 8011148:	3eb17218 	.word	0x3eb17218
 801114c:	3f851591 	.word	0x3f851591
 8011150:	080177e8 	.word	0x080177e8
 8011154:	080177f0 	.word	0x080177f0
 8011158:	3331bb4c 	.word	0x3331bb4c
 801115c:	b5ddea0e 	.word	0xb5ddea0e
 8011160:	388ab355 	.word	0x388ab355
 8011164:	bb360b61 	.word	0xbb360b61
 8011168:	3e2aaaab 	.word	0x3e2aaaab
 801116c:	080177e0 	.word	0x080177e0
 8011170:	3fb8aa3b 	.word	0x3fb8aa3b
 8011174:	3f317180 	.word	0x3f317180
 8011178:	3717f7d1 	.word	0x3717f7d1
 801117c:	7149f2ca 	.word	0x7149f2ca
 8011180:	0d800000 	.word	0x0d800000

08011184 <abort>:
 8011184:	b508      	push	{r3, lr}
 8011186:	2006      	movs	r0, #6
 8011188:	f000 ffb4 	bl	80120f4 <raise>
 801118c:	2001      	movs	r0, #1
 801118e:	f7f0 fda1 	bl	8001cd4 <_exit>
	...

08011194 <__assert_func>:
 8011194:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011196:	4614      	mov	r4, r2
 8011198:	461a      	mov	r2, r3
 801119a:	4b09      	ldr	r3, [pc, #36]	; (80111c0 <__assert_func+0x2c>)
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	4605      	mov	r5, r0
 80111a0:	68d8      	ldr	r0, [r3, #12]
 80111a2:	b14c      	cbz	r4, 80111b8 <__assert_func+0x24>
 80111a4:	4b07      	ldr	r3, [pc, #28]	; (80111c4 <__assert_func+0x30>)
 80111a6:	9100      	str	r1, [sp, #0]
 80111a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80111ac:	4906      	ldr	r1, [pc, #24]	; (80111c8 <__assert_func+0x34>)
 80111ae:	462b      	mov	r3, r5
 80111b0:	f000 fe0a 	bl	8011dc8 <fiprintf>
 80111b4:	f7ff ffe6 	bl	8011184 <abort>
 80111b8:	4b04      	ldr	r3, [pc, #16]	; (80111cc <__assert_func+0x38>)
 80111ba:	461c      	mov	r4, r3
 80111bc:	e7f3      	b.n	80111a6 <__assert_func+0x12>
 80111be:	bf00      	nop
 80111c0:	20006ed8 	.word	0x20006ed8
 80111c4:	080177f8 	.word	0x080177f8
 80111c8:	08017805 	.word	0x08017805
 80111cc:	08017833 	.word	0x08017833

080111d0 <atexit>:
 80111d0:	2300      	movs	r3, #0
 80111d2:	4601      	mov	r1, r0
 80111d4:	461a      	mov	r2, r3
 80111d6:	4618      	mov	r0, r3
 80111d8:	f001 b83e 	b.w	8012258 <__register_exitproc>

080111dc <malloc>:
 80111dc:	4b02      	ldr	r3, [pc, #8]	; (80111e8 <malloc+0xc>)
 80111de:	4601      	mov	r1, r0
 80111e0:	6818      	ldr	r0, [r3, #0]
 80111e2:	f000 b82b 	b.w	801123c <_malloc_r>
 80111e6:	bf00      	nop
 80111e8:	20006ed8 	.word	0x20006ed8

080111ec <free>:
 80111ec:	4b02      	ldr	r3, [pc, #8]	; (80111f8 <free+0xc>)
 80111ee:	4601      	mov	r1, r0
 80111f0:	6818      	ldr	r0, [r3, #0]
 80111f2:	f001 bf0b 	b.w	801300c <_free_r>
 80111f6:	bf00      	nop
 80111f8:	20006ed8 	.word	0x20006ed8

080111fc <sbrk_aligned>:
 80111fc:	b570      	push	{r4, r5, r6, lr}
 80111fe:	4e0e      	ldr	r6, [pc, #56]	; (8011238 <sbrk_aligned+0x3c>)
 8011200:	460c      	mov	r4, r1
 8011202:	6831      	ldr	r1, [r6, #0]
 8011204:	4605      	mov	r5, r0
 8011206:	b911      	cbnz	r1, 801120e <sbrk_aligned+0x12>
 8011208:	f000 ffc8 	bl	801219c <_sbrk_r>
 801120c:	6030      	str	r0, [r6, #0]
 801120e:	4621      	mov	r1, r4
 8011210:	4628      	mov	r0, r5
 8011212:	f000 ffc3 	bl	801219c <_sbrk_r>
 8011216:	1c43      	adds	r3, r0, #1
 8011218:	d00a      	beq.n	8011230 <sbrk_aligned+0x34>
 801121a:	1cc4      	adds	r4, r0, #3
 801121c:	f024 0403 	bic.w	r4, r4, #3
 8011220:	42a0      	cmp	r0, r4
 8011222:	d007      	beq.n	8011234 <sbrk_aligned+0x38>
 8011224:	1a21      	subs	r1, r4, r0
 8011226:	4628      	mov	r0, r5
 8011228:	f000 ffb8 	bl	801219c <_sbrk_r>
 801122c:	3001      	adds	r0, #1
 801122e:	d101      	bne.n	8011234 <sbrk_aligned+0x38>
 8011230:	f04f 34ff 	mov.w	r4, #4294967295
 8011234:	4620      	mov	r0, r4
 8011236:	bd70      	pop	{r4, r5, r6, pc}
 8011238:	2000e9dc 	.word	0x2000e9dc

0801123c <_malloc_r>:
 801123c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011240:	1ccd      	adds	r5, r1, #3
 8011242:	f025 0503 	bic.w	r5, r5, #3
 8011246:	3508      	adds	r5, #8
 8011248:	2d0c      	cmp	r5, #12
 801124a:	bf38      	it	cc
 801124c:	250c      	movcc	r5, #12
 801124e:	2d00      	cmp	r5, #0
 8011250:	4607      	mov	r7, r0
 8011252:	db01      	blt.n	8011258 <_malloc_r+0x1c>
 8011254:	42a9      	cmp	r1, r5
 8011256:	d905      	bls.n	8011264 <_malloc_r+0x28>
 8011258:	230c      	movs	r3, #12
 801125a:	603b      	str	r3, [r7, #0]
 801125c:	2600      	movs	r6, #0
 801125e:	4630      	mov	r0, r6
 8011260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011264:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011338 <_malloc_r+0xfc>
 8011268:	f000 f868 	bl	801133c <__malloc_lock>
 801126c:	f8d8 3000 	ldr.w	r3, [r8]
 8011270:	461c      	mov	r4, r3
 8011272:	bb5c      	cbnz	r4, 80112cc <_malloc_r+0x90>
 8011274:	4629      	mov	r1, r5
 8011276:	4638      	mov	r0, r7
 8011278:	f7ff ffc0 	bl	80111fc <sbrk_aligned>
 801127c:	1c43      	adds	r3, r0, #1
 801127e:	4604      	mov	r4, r0
 8011280:	d155      	bne.n	801132e <_malloc_r+0xf2>
 8011282:	f8d8 4000 	ldr.w	r4, [r8]
 8011286:	4626      	mov	r6, r4
 8011288:	2e00      	cmp	r6, #0
 801128a:	d145      	bne.n	8011318 <_malloc_r+0xdc>
 801128c:	2c00      	cmp	r4, #0
 801128e:	d048      	beq.n	8011322 <_malloc_r+0xe6>
 8011290:	6823      	ldr	r3, [r4, #0]
 8011292:	4631      	mov	r1, r6
 8011294:	4638      	mov	r0, r7
 8011296:	eb04 0903 	add.w	r9, r4, r3
 801129a:	f000 ff7f 	bl	801219c <_sbrk_r>
 801129e:	4581      	cmp	r9, r0
 80112a0:	d13f      	bne.n	8011322 <_malloc_r+0xe6>
 80112a2:	6821      	ldr	r1, [r4, #0]
 80112a4:	1a6d      	subs	r5, r5, r1
 80112a6:	4629      	mov	r1, r5
 80112a8:	4638      	mov	r0, r7
 80112aa:	f7ff ffa7 	bl	80111fc <sbrk_aligned>
 80112ae:	3001      	adds	r0, #1
 80112b0:	d037      	beq.n	8011322 <_malloc_r+0xe6>
 80112b2:	6823      	ldr	r3, [r4, #0]
 80112b4:	442b      	add	r3, r5
 80112b6:	6023      	str	r3, [r4, #0]
 80112b8:	f8d8 3000 	ldr.w	r3, [r8]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d038      	beq.n	8011332 <_malloc_r+0xf6>
 80112c0:	685a      	ldr	r2, [r3, #4]
 80112c2:	42a2      	cmp	r2, r4
 80112c4:	d12b      	bne.n	801131e <_malloc_r+0xe2>
 80112c6:	2200      	movs	r2, #0
 80112c8:	605a      	str	r2, [r3, #4]
 80112ca:	e00f      	b.n	80112ec <_malloc_r+0xb0>
 80112cc:	6822      	ldr	r2, [r4, #0]
 80112ce:	1b52      	subs	r2, r2, r5
 80112d0:	d41f      	bmi.n	8011312 <_malloc_r+0xd6>
 80112d2:	2a0b      	cmp	r2, #11
 80112d4:	d917      	bls.n	8011306 <_malloc_r+0xca>
 80112d6:	1961      	adds	r1, r4, r5
 80112d8:	42a3      	cmp	r3, r4
 80112da:	6025      	str	r5, [r4, #0]
 80112dc:	bf18      	it	ne
 80112de:	6059      	strne	r1, [r3, #4]
 80112e0:	6863      	ldr	r3, [r4, #4]
 80112e2:	bf08      	it	eq
 80112e4:	f8c8 1000 	streq.w	r1, [r8]
 80112e8:	5162      	str	r2, [r4, r5]
 80112ea:	604b      	str	r3, [r1, #4]
 80112ec:	4638      	mov	r0, r7
 80112ee:	f104 060b 	add.w	r6, r4, #11
 80112f2:	f000 f829 	bl	8011348 <__malloc_unlock>
 80112f6:	f026 0607 	bic.w	r6, r6, #7
 80112fa:	1d23      	adds	r3, r4, #4
 80112fc:	1af2      	subs	r2, r6, r3
 80112fe:	d0ae      	beq.n	801125e <_malloc_r+0x22>
 8011300:	1b9b      	subs	r3, r3, r6
 8011302:	50a3      	str	r3, [r4, r2]
 8011304:	e7ab      	b.n	801125e <_malloc_r+0x22>
 8011306:	42a3      	cmp	r3, r4
 8011308:	6862      	ldr	r2, [r4, #4]
 801130a:	d1dd      	bne.n	80112c8 <_malloc_r+0x8c>
 801130c:	f8c8 2000 	str.w	r2, [r8]
 8011310:	e7ec      	b.n	80112ec <_malloc_r+0xb0>
 8011312:	4623      	mov	r3, r4
 8011314:	6864      	ldr	r4, [r4, #4]
 8011316:	e7ac      	b.n	8011272 <_malloc_r+0x36>
 8011318:	4634      	mov	r4, r6
 801131a:	6876      	ldr	r6, [r6, #4]
 801131c:	e7b4      	b.n	8011288 <_malloc_r+0x4c>
 801131e:	4613      	mov	r3, r2
 8011320:	e7cc      	b.n	80112bc <_malloc_r+0x80>
 8011322:	230c      	movs	r3, #12
 8011324:	603b      	str	r3, [r7, #0]
 8011326:	4638      	mov	r0, r7
 8011328:	f000 f80e 	bl	8011348 <__malloc_unlock>
 801132c:	e797      	b.n	801125e <_malloc_r+0x22>
 801132e:	6025      	str	r5, [r4, #0]
 8011330:	e7dc      	b.n	80112ec <_malloc_r+0xb0>
 8011332:	605b      	str	r3, [r3, #4]
 8011334:	deff      	udf	#255	; 0xff
 8011336:	bf00      	nop
 8011338:	2000e9d8 	.word	0x2000e9d8

0801133c <__malloc_lock>:
 801133c:	4801      	ldr	r0, [pc, #4]	; (8011344 <__malloc_lock+0x8>)
 801133e:	f000 bf7a 	b.w	8012236 <__retarget_lock_acquire_recursive>
 8011342:	bf00      	nop
 8011344:	2000eb21 	.word	0x2000eb21

08011348 <__malloc_unlock>:
 8011348:	4801      	ldr	r0, [pc, #4]	; (8011350 <__malloc_unlock+0x8>)
 801134a:	f000 bf75 	b.w	8012238 <__retarget_lock_release_recursive>
 801134e:	bf00      	nop
 8011350:	2000eb21 	.word	0x2000eb21

08011354 <_realloc_r>:
 8011354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011358:	4680      	mov	r8, r0
 801135a:	4614      	mov	r4, r2
 801135c:	460e      	mov	r6, r1
 801135e:	b921      	cbnz	r1, 801136a <_realloc_r+0x16>
 8011360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011364:	4611      	mov	r1, r2
 8011366:	f7ff bf69 	b.w	801123c <_malloc_r>
 801136a:	b92a      	cbnz	r2, 8011378 <_realloc_r+0x24>
 801136c:	f001 fe4e 	bl	801300c <_free_r>
 8011370:	4625      	mov	r5, r4
 8011372:	4628      	mov	r0, r5
 8011374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011378:	f002 fa10 	bl	801379c <_malloc_usable_size_r>
 801137c:	4284      	cmp	r4, r0
 801137e:	4607      	mov	r7, r0
 8011380:	d802      	bhi.n	8011388 <_realloc_r+0x34>
 8011382:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011386:	d812      	bhi.n	80113ae <_realloc_r+0x5a>
 8011388:	4621      	mov	r1, r4
 801138a:	4640      	mov	r0, r8
 801138c:	f7ff ff56 	bl	801123c <_malloc_r>
 8011390:	4605      	mov	r5, r0
 8011392:	2800      	cmp	r0, #0
 8011394:	d0ed      	beq.n	8011372 <_realloc_r+0x1e>
 8011396:	42bc      	cmp	r4, r7
 8011398:	4622      	mov	r2, r4
 801139a:	4631      	mov	r1, r6
 801139c:	bf28      	it	cs
 801139e:	463a      	movcs	r2, r7
 80113a0:	f000 ff4b 	bl	801223a <memcpy>
 80113a4:	4631      	mov	r1, r6
 80113a6:	4640      	mov	r0, r8
 80113a8:	f001 fe30 	bl	801300c <_free_r>
 80113ac:	e7e1      	b.n	8011372 <_realloc_r+0x1e>
 80113ae:	4635      	mov	r5, r6
 80113b0:	e7df      	b.n	8011372 <_realloc_r+0x1e>

080113b2 <__cvt>:
 80113b2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80113b6:	ec55 4b10 	vmov	r4, r5, d0
 80113ba:	2d00      	cmp	r5, #0
 80113bc:	460e      	mov	r6, r1
 80113be:	4619      	mov	r1, r3
 80113c0:	462b      	mov	r3, r5
 80113c2:	bfbb      	ittet	lt
 80113c4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80113c8:	461d      	movlt	r5, r3
 80113ca:	2300      	movge	r3, #0
 80113cc:	232d      	movlt	r3, #45	; 0x2d
 80113ce:	700b      	strb	r3, [r1, #0]
 80113d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80113d2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80113d6:	4691      	mov	r9, r2
 80113d8:	f023 0820 	bic.w	r8, r3, #32
 80113dc:	bfbc      	itt	lt
 80113de:	4622      	movlt	r2, r4
 80113e0:	4614      	movlt	r4, r2
 80113e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80113e6:	d005      	beq.n	80113f4 <__cvt+0x42>
 80113e8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80113ec:	d100      	bne.n	80113f0 <__cvt+0x3e>
 80113ee:	3601      	adds	r6, #1
 80113f0:	2102      	movs	r1, #2
 80113f2:	e000      	b.n	80113f6 <__cvt+0x44>
 80113f4:	2103      	movs	r1, #3
 80113f6:	ab03      	add	r3, sp, #12
 80113f8:	9301      	str	r3, [sp, #4]
 80113fa:	ab02      	add	r3, sp, #8
 80113fc:	9300      	str	r3, [sp, #0]
 80113fe:	ec45 4b10 	vmov	d0, r4, r5
 8011402:	4653      	mov	r3, sl
 8011404:	4632      	mov	r2, r6
 8011406:	f001 f80f 	bl	8012428 <_dtoa_r>
 801140a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801140e:	4607      	mov	r7, r0
 8011410:	d102      	bne.n	8011418 <__cvt+0x66>
 8011412:	f019 0f01 	tst.w	r9, #1
 8011416:	d022      	beq.n	801145e <__cvt+0xac>
 8011418:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801141c:	eb07 0906 	add.w	r9, r7, r6
 8011420:	d110      	bne.n	8011444 <__cvt+0x92>
 8011422:	783b      	ldrb	r3, [r7, #0]
 8011424:	2b30      	cmp	r3, #48	; 0x30
 8011426:	d10a      	bne.n	801143e <__cvt+0x8c>
 8011428:	2200      	movs	r2, #0
 801142a:	2300      	movs	r3, #0
 801142c:	4620      	mov	r0, r4
 801142e:	4629      	mov	r1, r5
 8011430:	f7ef fb5a 	bl	8000ae8 <__aeabi_dcmpeq>
 8011434:	b918      	cbnz	r0, 801143e <__cvt+0x8c>
 8011436:	f1c6 0601 	rsb	r6, r6, #1
 801143a:	f8ca 6000 	str.w	r6, [sl]
 801143e:	f8da 3000 	ldr.w	r3, [sl]
 8011442:	4499      	add	r9, r3
 8011444:	2200      	movs	r2, #0
 8011446:	2300      	movs	r3, #0
 8011448:	4620      	mov	r0, r4
 801144a:	4629      	mov	r1, r5
 801144c:	f7ef fb4c 	bl	8000ae8 <__aeabi_dcmpeq>
 8011450:	b108      	cbz	r0, 8011456 <__cvt+0xa4>
 8011452:	f8cd 900c 	str.w	r9, [sp, #12]
 8011456:	2230      	movs	r2, #48	; 0x30
 8011458:	9b03      	ldr	r3, [sp, #12]
 801145a:	454b      	cmp	r3, r9
 801145c:	d307      	bcc.n	801146e <__cvt+0xbc>
 801145e:	9b03      	ldr	r3, [sp, #12]
 8011460:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011462:	1bdb      	subs	r3, r3, r7
 8011464:	4638      	mov	r0, r7
 8011466:	6013      	str	r3, [r2, #0]
 8011468:	b004      	add	sp, #16
 801146a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801146e:	1c59      	adds	r1, r3, #1
 8011470:	9103      	str	r1, [sp, #12]
 8011472:	701a      	strb	r2, [r3, #0]
 8011474:	e7f0      	b.n	8011458 <__cvt+0xa6>

08011476 <__exponent>:
 8011476:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011478:	4603      	mov	r3, r0
 801147a:	2900      	cmp	r1, #0
 801147c:	bfb8      	it	lt
 801147e:	4249      	neglt	r1, r1
 8011480:	f803 2b02 	strb.w	r2, [r3], #2
 8011484:	bfb4      	ite	lt
 8011486:	222d      	movlt	r2, #45	; 0x2d
 8011488:	222b      	movge	r2, #43	; 0x2b
 801148a:	2909      	cmp	r1, #9
 801148c:	7042      	strb	r2, [r0, #1]
 801148e:	dd2a      	ble.n	80114e6 <__exponent+0x70>
 8011490:	f10d 0207 	add.w	r2, sp, #7
 8011494:	4617      	mov	r7, r2
 8011496:	260a      	movs	r6, #10
 8011498:	4694      	mov	ip, r2
 801149a:	fb91 f5f6 	sdiv	r5, r1, r6
 801149e:	fb06 1415 	mls	r4, r6, r5, r1
 80114a2:	3430      	adds	r4, #48	; 0x30
 80114a4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80114a8:	460c      	mov	r4, r1
 80114aa:	2c63      	cmp	r4, #99	; 0x63
 80114ac:	f102 32ff 	add.w	r2, r2, #4294967295
 80114b0:	4629      	mov	r1, r5
 80114b2:	dcf1      	bgt.n	8011498 <__exponent+0x22>
 80114b4:	3130      	adds	r1, #48	; 0x30
 80114b6:	f1ac 0402 	sub.w	r4, ip, #2
 80114ba:	f802 1c01 	strb.w	r1, [r2, #-1]
 80114be:	1c41      	adds	r1, r0, #1
 80114c0:	4622      	mov	r2, r4
 80114c2:	42ba      	cmp	r2, r7
 80114c4:	d30a      	bcc.n	80114dc <__exponent+0x66>
 80114c6:	f10d 0209 	add.w	r2, sp, #9
 80114ca:	eba2 020c 	sub.w	r2, r2, ip
 80114ce:	42bc      	cmp	r4, r7
 80114d0:	bf88      	it	hi
 80114d2:	2200      	movhi	r2, #0
 80114d4:	4413      	add	r3, r2
 80114d6:	1a18      	subs	r0, r3, r0
 80114d8:	b003      	add	sp, #12
 80114da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114dc:	f812 5b01 	ldrb.w	r5, [r2], #1
 80114e0:	f801 5f01 	strb.w	r5, [r1, #1]!
 80114e4:	e7ed      	b.n	80114c2 <__exponent+0x4c>
 80114e6:	2330      	movs	r3, #48	; 0x30
 80114e8:	3130      	adds	r1, #48	; 0x30
 80114ea:	7083      	strb	r3, [r0, #2]
 80114ec:	70c1      	strb	r1, [r0, #3]
 80114ee:	1d03      	adds	r3, r0, #4
 80114f0:	e7f1      	b.n	80114d6 <__exponent+0x60>
	...

080114f4 <_printf_float>:
 80114f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114f8:	ed2d 8b02 	vpush	{d8}
 80114fc:	b08d      	sub	sp, #52	; 0x34
 80114fe:	460c      	mov	r4, r1
 8011500:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011504:	4616      	mov	r6, r2
 8011506:	461f      	mov	r7, r3
 8011508:	4605      	mov	r5, r0
 801150a:	f000 fdfb 	bl	8012104 <_localeconv_r>
 801150e:	f8d0 a000 	ldr.w	sl, [r0]
 8011512:	4650      	mov	r0, sl
 8011514:	f7ee febc 	bl	8000290 <strlen>
 8011518:	2300      	movs	r3, #0
 801151a:	930a      	str	r3, [sp, #40]	; 0x28
 801151c:	6823      	ldr	r3, [r4, #0]
 801151e:	9305      	str	r3, [sp, #20]
 8011520:	f8d8 3000 	ldr.w	r3, [r8]
 8011524:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011528:	3307      	adds	r3, #7
 801152a:	f023 0307 	bic.w	r3, r3, #7
 801152e:	f103 0208 	add.w	r2, r3, #8
 8011532:	f8c8 2000 	str.w	r2, [r8]
 8011536:	e9d3 8900 	ldrd	r8, r9, [r3]
 801153a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801153e:	9307      	str	r3, [sp, #28]
 8011540:	f8cd 8018 	str.w	r8, [sp, #24]
 8011544:	ee08 0a10 	vmov	s16, r0
 8011548:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801154c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011550:	4b9e      	ldr	r3, [pc, #632]	; (80117cc <_printf_float+0x2d8>)
 8011552:	f04f 32ff 	mov.w	r2, #4294967295
 8011556:	f7ef faf9 	bl	8000b4c <__aeabi_dcmpun>
 801155a:	bb88      	cbnz	r0, 80115c0 <_printf_float+0xcc>
 801155c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011560:	4b9a      	ldr	r3, [pc, #616]	; (80117cc <_printf_float+0x2d8>)
 8011562:	f04f 32ff 	mov.w	r2, #4294967295
 8011566:	f7ef fad3 	bl	8000b10 <__aeabi_dcmple>
 801156a:	bb48      	cbnz	r0, 80115c0 <_printf_float+0xcc>
 801156c:	2200      	movs	r2, #0
 801156e:	2300      	movs	r3, #0
 8011570:	4640      	mov	r0, r8
 8011572:	4649      	mov	r1, r9
 8011574:	f7ef fac2 	bl	8000afc <__aeabi_dcmplt>
 8011578:	b110      	cbz	r0, 8011580 <_printf_float+0x8c>
 801157a:	232d      	movs	r3, #45	; 0x2d
 801157c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011580:	4a93      	ldr	r2, [pc, #588]	; (80117d0 <_printf_float+0x2dc>)
 8011582:	4b94      	ldr	r3, [pc, #592]	; (80117d4 <_printf_float+0x2e0>)
 8011584:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011588:	bf94      	ite	ls
 801158a:	4690      	movls	r8, r2
 801158c:	4698      	movhi	r8, r3
 801158e:	2303      	movs	r3, #3
 8011590:	6123      	str	r3, [r4, #16]
 8011592:	9b05      	ldr	r3, [sp, #20]
 8011594:	f023 0304 	bic.w	r3, r3, #4
 8011598:	6023      	str	r3, [r4, #0]
 801159a:	f04f 0900 	mov.w	r9, #0
 801159e:	9700      	str	r7, [sp, #0]
 80115a0:	4633      	mov	r3, r6
 80115a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80115a4:	4621      	mov	r1, r4
 80115a6:	4628      	mov	r0, r5
 80115a8:	f000 f9da 	bl	8011960 <_printf_common>
 80115ac:	3001      	adds	r0, #1
 80115ae:	f040 8090 	bne.w	80116d2 <_printf_float+0x1de>
 80115b2:	f04f 30ff 	mov.w	r0, #4294967295
 80115b6:	b00d      	add	sp, #52	; 0x34
 80115b8:	ecbd 8b02 	vpop	{d8}
 80115bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115c0:	4642      	mov	r2, r8
 80115c2:	464b      	mov	r3, r9
 80115c4:	4640      	mov	r0, r8
 80115c6:	4649      	mov	r1, r9
 80115c8:	f7ef fac0 	bl	8000b4c <__aeabi_dcmpun>
 80115cc:	b140      	cbz	r0, 80115e0 <_printf_float+0xec>
 80115ce:	464b      	mov	r3, r9
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	bfbc      	itt	lt
 80115d4:	232d      	movlt	r3, #45	; 0x2d
 80115d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80115da:	4a7f      	ldr	r2, [pc, #508]	; (80117d8 <_printf_float+0x2e4>)
 80115dc:	4b7f      	ldr	r3, [pc, #508]	; (80117dc <_printf_float+0x2e8>)
 80115de:	e7d1      	b.n	8011584 <_printf_float+0x90>
 80115e0:	6863      	ldr	r3, [r4, #4]
 80115e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80115e6:	9206      	str	r2, [sp, #24]
 80115e8:	1c5a      	adds	r2, r3, #1
 80115ea:	d13f      	bne.n	801166c <_printf_float+0x178>
 80115ec:	2306      	movs	r3, #6
 80115ee:	6063      	str	r3, [r4, #4]
 80115f0:	9b05      	ldr	r3, [sp, #20]
 80115f2:	6861      	ldr	r1, [r4, #4]
 80115f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80115f8:	2300      	movs	r3, #0
 80115fa:	9303      	str	r3, [sp, #12]
 80115fc:	ab0a      	add	r3, sp, #40	; 0x28
 80115fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011602:	ab09      	add	r3, sp, #36	; 0x24
 8011604:	ec49 8b10 	vmov	d0, r8, r9
 8011608:	9300      	str	r3, [sp, #0]
 801160a:	6022      	str	r2, [r4, #0]
 801160c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011610:	4628      	mov	r0, r5
 8011612:	f7ff fece 	bl	80113b2 <__cvt>
 8011616:	9b06      	ldr	r3, [sp, #24]
 8011618:	9909      	ldr	r1, [sp, #36]	; 0x24
 801161a:	2b47      	cmp	r3, #71	; 0x47
 801161c:	4680      	mov	r8, r0
 801161e:	d108      	bne.n	8011632 <_printf_float+0x13e>
 8011620:	1cc8      	adds	r0, r1, #3
 8011622:	db02      	blt.n	801162a <_printf_float+0x136>
 8011624:	6863      	ldr	r3, [r4, #4]
 8011626:	4299      	cmp	r1, r3
 8011628:	dd41      	ble.n	80116ae <_printf_float+0x1ba>
 801162a:	f1ab 0302 	sub.w	r3, fp, #2
 801162e:	fa5f fb83 	uxtb.w	fp, r3
 8011632:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011636:	d820      	bhi.n	801167a <_printf_float+0x186>
 8011638:	3901      	subs	r1, #1
 801163a:	465a      	mov	r2, fp
 801163c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011640:	9109      	str	r1, [sp, #36]	; 0x24
 8011642:	f7ff ff18 	bl	8011476 <__exponent>
 8011646:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011648:	1813      	adds	r3, r2, r0
 801164a:	2a01      	cmp	r2, #1
 801164c:	4681      	mov	r9, r0
 801164e:	6123      	str	r3, [r4, #16]
 8011650:	dc02      	bgt.n	8011658 <_printf_float+0x164>
 8011652:	6822      	ldr	r2, [r4, #0]
 8011654:	07d2      	lsls	r2, r2, #31
 8011656:	d501      	bpl.n	801165c <_printf_float+0x168>
 8011658:	3301      	adds	r3, #1
 801165a:	6123      	str	r3, [r4, #16]
 801165c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011660:	2b00      	cmp	r3, #0
 8011662:	d09c      	beq.n	801159e <_printf_float+0xaa>
 8011664:	232d      	movs	r3, #45	; 0x2d
 8011666:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801166a:	e798      	b.n	801159e <_printf_float+0xaa>
 801166c:	9a06      	ldr	r2, [sp, #24]
 801166e:	2a47      	cmp	r2, #71	; 0x47
 8011670:	d1be      	bne.n	80115f0 <_printf_float+0xfc>
 8011672:	2b00      	cmp	r3, #0
 8011674:	d1bc      	bne.n	80115f0 <_printf_float+0xfc>
 8011676:	2301      	movs	r3, #1
 8011678:	e7b9      	b.n	80115ee <_printf_float+0xfa>
 801167a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801167e:	d118      	bne.n	80116b2 <_printf_float+0x1be>
 8011680:	2900      	cmp	r1, #0
 8011682:	6863      	ldr	r3, [r4, #4]
 8011684:	dd0b      	ble.n	801169e <_printf_float+0x1aa>
 8011686:	6121      	str	r1, [r4, #16]
 8011688:	b913      	cbnz	r3, 8011690 <_printf_float+0x19c>
 801168a:	6822      	ldr	r2, [r4, #0]
 801168c:	07d0      	lsls	r0, r2, #31
 801168e:	d502      	bpl.n	8011696 <_printf_float+0x1a2>
 8011690:	3301      	adds	r3, #1
 8011692:	440b      	add	r3, r1
 8011694:	6123      	str	r3, [r4, #16]
 8011696:	65a1      	str	r1, [r4, #88]	; 0x58
 8011698:	f04f 0900 	mov.w	r9, #0
 801169c:	e7de      	b.n	801165c <_printf_float+0x168>
 801169e:	b913      	cbnz	r3, 80116a6 <_printf_float+0x1b2>
 80116a0:	6822      	ldr	r2, [r4, #0]
 80116a2:	07d2      	lsls	r2, r2, #31
 80116a4:	d501      	bpl.n	80116aa <_printf_float+0x1b6>
 80116a6:	3302      	adds	r3, #2
 80116a8:	e7f4      	b.n	8011694 <_printf_float+0x1a0>
 80116aa:	2301      	movs	r3, #1
 80116ac:	e7f2      	b.n	8011694 <_printf_float+0x1a0>
 80116ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80116b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116b4:	4299      	cmp	r1, r3
 80116b6:	db05      	blt.n	80116c4 <_printf_float+0x1d0>
 80116b8:	6823      	ldr	r3, [r4, #0]
 80116ba:	6121      	str	r1, [r4, #16]
 80116bc:	07d8      	lsls	r0, r3, #31
 80116be:	d5ea      	bpl.n	8011696 <_printf_float+0x1a2>
 80116c0:	1c4b      	adds	r3, r1, #1
 80116c2:	e7e7      	b.n	8011694 <_printf_float+0x1a0>
 80116c4:	2900      	cmp	r1, #0
 80116c6:	bfd4      	ite	le
 80116c8:	f1c1 0202 	rsble	r2, r1, #2
 80116cc:	2201      	movgt	r2, #1
 80116ce:	4413      	add	r3, r2
 80116d0:	e7e0      	b.n	8011694 <_printf_float+0x1a0>
 80116d2:	6823      	ldr	r3, [r4, #0]
 80116d4:	055a      	lsls	r2, r3, #21
 80116d6:	d407      	bmi.n	80116e8 <_printf_float+0x1f4>
 80116d8:	6923      	ldr	r3, [r4, #16]
 80116da:	4642      	mov	r2, r8
 80116dc:	4631      	mov	r1, r6
 80116de:	4628      	mov	r0, r5
 80116e0:	47b8      	blx	r7
 80116e2:	3001      	adds	r0, #1
 80116e4:	d12c      	bne.n	8011740 <_printf_float+0x24c>
 80116e6:	e764      	b.n	80115b2 <_printf_float+0xbe>
 80116e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80116ec:	f240 80e0 	bls.w	80118b0 <_printf_float+0x3bc>
 80116f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80116f4:	2200      	movs	r2, #0
 80116f6:	2300      	movs	r3, #0
 80116f8:	f7ef f9f6 	bl	8000ae8 <__aeabi_dcmpeq>
 80116fc:	2800      	cmp	r0, #0
 80116fe:	d034      	beq.n	801176a <_printf_float+0x276>
 8011700:	4a37      	ldr	r2, [pc, #220]	; (80117e0 <_printf_float+0x2ec>)
 8011702:	2301      	movs	r3, #1
 8011704:	4631      	mov	r1, r6
 8011706:	4628      	mov	r0, r5
 8011708:	47b8      	blx	r7
 801170a:	3001      	adds	r0, #1
 801170c:	f43f af51 	beq.w	80115b2 <_printf_float+0xbe>
 8011710:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011714:	429a      	cmp	r2, r3
 8011716:	db02      	blt.n	801171e <_printf_float+0x22a>
 8011718:	6823      	ldr	r3, [r4, #0]
 801171a:	07d8      	lsls	r0, r3, #31
 801171c:	d510      	bpl.n	8011740 <_printf_float+0x24c>
 801171e:	ee18 3a10 	vmov	r3, s16
 8011722:	4652      	mov	r2, sl
 8011724:	4631      	mov	r1, r6
 8011726:	4628      	mov	r0, r5
 8011728:	47b8      	blx	r7
 801172a:	3001      	adds	r0, #1
 801172c:	f43f af41 	beq.w	80115b2 <_printf_float+0xbe>
 8011730:	f04f 0800 	mov.w	r8, #0
 8011734:	f104 091a 	add.w	r9, r4, #26
 8011738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801173a:	3b01      	subs	r3, #1
 801173c:	4543      	cmp	r3, r8
 801173e:	dc09      	bgt.n	8011754 <_printf_float+0x260>
 8011740:	6823      	ldr	r3, [r4, #0]
 8011742:	079b      	lsls	r3, r3, #30
 8011744:	f100 8107 	bmi.w	8011956 <_printf_float+0x462>
 8011748:	68e0      	ldr	r0, [r4, #12]
 801174a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801174c:	4298      	cmp	r0, r3
 801174e:	bfb8      	it	lt
 8011750:	4618      	movlt	r0, r3
 8011752:	e730      	b.n	80115b6 <_printf_float+0xc2>
 8011754:	2301      	movs	r3, #1
 8011756:	464a      	mov	r2, r9
 8011758:	4631      	mov	r1, r6
 801175a:	4628      	mov	r0, r5
 801175c:	47b8      	blx	r7
 801175e:	3001      	adds	r0, #1
 8011760:	f43f af27 	beq.w	80115b2 <_printf_float+0xbe>
 8011764:	f108 0801 	add.w	r8, r8, #1
 8011768:	e7e6      	b.n	8011738 <_printf_float+0x244>
 801176a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801176c:	2b00      	cmp	r3, #0
 801176e:	dc39      	bgt.n	80117e4 <_printf_float+0x2f0>
 8011770:	4a1b      	ldr	r2, [pc, #108]	; (80117e0 <_printf_float+0x2ec>)
 8011772:	2301      	movs	r3, #1
 8011774:	4631      	mov	r1, r6
 8011776:	4628      	mov	r0, r5
 8011778:	47b8      	blx	r7
 801177a:	3001      	adds	r0, #1
 801177c:	f43f af19 	beq.w	80115b2 <_printf_float+0xbe>
 8011780:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011784:	4313      	orrs	r3, r2
 8011786:	d102      	bne.n	801178e <_printf_float+0x29a>
 8011788:	6823      	ldr	r3, [r4, #0]
 801178a:	07d9      	lsls	r1, r3, #31
 801178c:	d5d8      	bpl.n	8011740 <_printf_float+0x24c>
 801178e:	ee18 3a10 	vmov	r3, s16
 8011792:	4652      	mov	r2, sl
 8011794:	4631      	mov	r1, r6
 8011796:	4628      	mov	r0, r5
 8011798:	47b8      	blx	r7
 801179a:	3001      	adds	r0, #1
 801179c:	f43f af09 	beq.w	80115b2 <_printf_float+0xbe>
 80117a0:	f04f 0900 	mov.w	r9, #0
 80117a4:	f104 0a1a 	add.w	sl, r4, #26
 80117a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117aa:	425b      	negs	r3, r3
 80117ac:	454b      	cmp	r3, r9
 80117ae:	dc01      	bgt.n	80117b4 <_printf_float+0x2c0>
 80117b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117b2:	e792      	b.n	80116da <_printf_float+0x1e6>
 80117b4:	2301      	movs	r3, #1
 80117b6:	4652      	mov	r2, sl
 80117b8:	4631      	mov	r1, r6
 80117ba:	4628      	mov	r0, r5
 80117bc:	47b8      	blx	r7
 80117be:	3001      	adds	r0, #1
 80117c0:	f43f aef7 	beq.w	80115b2 <_printf_float+0xbe>
 80117c4:	f109 0901 	add.w	r9, r9, #1
 80117c8:	e7ee      	b.n	80117a8 <_printf_float+0x2b4>
 80117ca:	bf00      	nop
 80117cc:	7fefffff 	.word	0x7fefffff
 80117d0:	08017834 	.word	0x08017834
 80117d4:	08017838 	.word	0x08017838
 80117d8:	0801783c 	.word	0x0801783c
 80117dc:	08017840 	.word	0x08017840
 80117e0:	08017844 	.word	0x08017844
 80117e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80117e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80117e8:	429a      	cmp	r2, r3
 80117ea:	bfa8      	it	ge
 80117ec:	461a      	movge	r2, r3
 80117ee:	2a00      	cmp	r2, #0
 80117f0:	4691      	mov	r9, r2
 80117f2:	dc37      	bgt.n	8011864 <_printf_float+0x370>
 80117f4:	f04f 0b00 	mov.w	fp, #0
 80117f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80117fc:	f104 021a 	add.w	r2, r4, #26
 8011800:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011802:	9305      	str	r3, [sp, #20]
 8011804:	eba3 0309 	sub.w	r3, r3, r9
 8011808:	455b      	cmp	r3, fp
 801180a:	dc33      	bgt.n	8011874 <_printf_float+0x380>
 801180c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011810:	429a      	cmp	r2, r3
 8011812:	db3b      	blt.n	801188c <_printf_float+0x398>
 8011814:	6823      	ldr	r3, [r4, #0]
 8011816:	07da      	lsls	r2, r3, #31
 8011818:	d438      	bmi.n	801188c <_printf_float+0x398>
 801181a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801181e:	eba2 0903 	sub.w	r9, r2, r3
 8011822:	9b05      	ldr	r3, [sp, #20]
 8011824:	1ad2      	subs	r2, r2, r3
 8011826:	4591      	cmp	r9, r2
 8011828:	bfa8      	it	ge
 801182a:	4691      	movge	r9, r2
 801182c:	f1b9 0f00 	cmp.w	r9, #0
 8011830:	dc35      	bgt.n	801189e <_printf_float+0x3aa>
 8011832:	f04f 0800 	mov.w	r8, #0
 8011836:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801183a:	f104 0a1a 	add.w	sl, r4, #26
 801183e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011842:	1a9b      	subs	r3, r3, r2
 8011844:	eba3 0309 	sub.w	r3, r3, r9
 8011848:	4543      	cmp	r3, r8
 801184a:	f77f af79 	ble.w	8011740 <_printf_float+0x24c>
 801184e:	2301      	movs	r3, #1
 8011850:	4652      	mov	r2, sl
 8011852:	4631      	mov	r1, r6
 8011854:	4628      	mov	r0, r5
 8011856:	47b8      	blx	r7
 8011858:	3001      	adds	r0, #1
 801185a:	f43f aeaa 	beq.w	80115b2 <_printf_float+0xbe>
 801185e:	f108 0801 	add.w	r8, r8, #1
 8011862:	e7ec      	b.n	801183e <_printf_float+0x34a>
 8011864:	4613      	mov	r3, r2
 8011866:	4631      	mov	r1, r6
 8011868:	4642      	mov	r2, r8
 801186a:	4628      	mov	r0, r5
 801186c:	47b8      	blx	r7
 801186e:	3001      	adds	r0, #1
 8011870:	d1c0      	bne.n	80117f4 <_printf_float+0x300>
 8011872:	e69e      	b.n	80115b2 <_printf_float+0xbe>
 8011874:	2301      	movs	r3, #1
 8011876:	4631      	mov	r1, r6
 8011878:	4628      	mov	r0, r5
 801187a:	9205      	str	r2, [sp, #20]
 801187c:	47b8      	blx	r7
 801187e:	3001      	adds	r0, #1
 8011880:	f43f ae97 	beq.w	80115b2 <_printf_float+0xbe>
 8011884:	9a05      	ldr	r2, [sp, #20]
 8011886:	f10b 0b01 	add.w	fp, fp, #1
 801188a:	e7b9      	b.n	8011800 <_printf_float+0x30c>
 801188c:	ee18 3a10 	vmov	r3, s16
 8011890:	4652      	mov	r2, sl
 8011892:	4631      	mov	r1, r6
 8011894:	4628      	mov	r0, r5
 8011896:	47b8      	blx	r7
 8011898:	3001      	adds	r0, #1
 801189a:	d1be      	bne.n	801181a <_printf_float+0x326>
 801189c:	e689      	b.n	80115b2 <_printf_float+0xbe>
 801189e:	9a05      	ldr	r2, [sp, #20]
 80118a0:	464b      	mov	r3, r9
 80118a2:	4442      	add	r2, r8
 80118a4:	4631      	mov	r1, r6
 80118a6:	4628      	mov	r0, r5
 80118a8:	47b8      	blx	r7
 80118aa:	3001      	adds	r0, #1
 80118ac:	d1c1      	bne.n	8011832 <_printf_float+0x33e>
 80118ae:	e680      	b.n	80115b2 <_printf_float+0xbe>
 80118b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80118b2:	2a01      	cmp	r2, #1
 80118b4:	dc01      	bgt.n	80118ba <_printf_float+0x3c6>
 80118b6:	07db      	lsls	r3, r3, #31
 80118b8:	d53a      	bpl.n	8011930 <_printf_float+0x43c>
 80118ba:	2301      	movs	r3, #1
 80118bc:	4642      	mov	r2, r8
 80118be:	4631      	mov	r1, r6
 80118c0:	4628      	mov	r0, r5
 80118c2:	47b8      	blx	r7
 80118c4:	3001      	adds	r0, #1
 80118c6:	f43f ae74 	beq.w	80115b2 <_printf_float+0xbe>
 80118ca:	ee18 3a10 	vmov	r3, s16
 80118ce:	4652      	mov	r2, sl
 80118d0:	4631      	mov	r1, r6
 80118d2:	4628      	mov	r0, r5
 80118d4:	47b8      	blx	r7
 80118d6:	3001      	adds	r0, #1
 80118d8:	f43f ae6b 	beq.w	80115b2 <_printf_float+0xbe>
 80118dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80118e0:	2200      	movs	r2, #0
 80118e2:	2300      	movs	r3, #0
 80118e4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80118e8:	f7ef f8fe 	bl	8000ae8 <__aeabi_dcmpeq>
 80118ec:	b9d8      	cbnz	r0, 8011926 <_printf_float+0x432>
 80118ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 80118f2:	f108 0201 	add.w	r2, r8, #1
 80118f6:	4631      	mov	r1, r6
 80118f8:	4628      	mov	r0, r5
 80118fa:	47b8      	blx	r7
 80118fc:	3001      	adds	r0, #1
 80118fe:	d10e      	bne.n	801191e <_printf_float+0x42a>
 8011900:	e657      	b.n	80115b2 <_printf_float+0xbe>
 8011902:	2301      	movs	r3, #1
 8011904:	4652      	mov	r2, sl
 8011906:	4631      	mov	r1, r6
 8011908:	4628      	mov	r0, r5
 801190a:	47b8      	blx	r7
 801190c:	3001      	adds	r0, #1
 801190e:	f43f ae50 	beq.w	80115b2 <_printf_float+0xbe>
 8011912:	f108 0801 	add.w	r8, r8, #1
 8011916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011918:	3b01      	subs	r3, #1
 801191a:	4543      	cmp	r3, r8
 801191c:	dcf1      	bgt.n	8011902 <_printf_float+0x40e>
 801191e:	464b      	mov	r3, r9
 8011920:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011924:	e6da      	b.n	80116dc <_printf_float+0x1e8>
 8011926:	f04f 0800 	mov.w	r8, #0
 801192a:	f104 0a1a 	add.w	sl, r4, #26
 801192e:	e7f2      	b.n	8011916 <_printf_float+0x422>
 8011930:	2301      	movs	r3, #1
 8011932:	4642      	mov	r2, r8
 8011934:	e7df      	b.n	80118f6 <_printf_float+0x402>
 8011936:	2301      	movs	r3, #1
 8011938:	464a      	mov	r2, r9
 801193a:	4631      	mov	r1, r6
 801193c:	4628      	mov	r0, r5
 801193e:	47b8      	blx	r7
 8011940:	3001      	adds	r0, #1
 8011942:	f43f ae36 	beq.w	80115b2 <_printf_float+0xbe>
 8011946:	f108 0801 	add.w	r8, r8, #1
 801194a:	68e3      	ldr	r3, [r4, #12]
 801194c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801194e:	1a5b      	subs	r3, r3, r1
 8011950:	4543      	cmp	r3, r8
 8011952:	dcf0      	bgt.n	8011936 <_printf_float+0x442>
 8011954:	e6f8      	b.n	8011748 <_printf_float+0x254>
 8011956:	f04f 0800 	mov.w	r8, #0
 801195a:	f104 0919 	add.w	r9, r4, #25
 801195e:	e7f4      	b.n	801194a <_printf_float+0x456>

08011960 <_printf_common>:
 8011960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011964:	4616      	mov	r6, r2
 8011966:	4699      	mov	r9, r3
 8011968:	688a      	ldr	r2, [r1, #8]
 801196a:	690b      	ldr	r3, [r1, #16]
 801196c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011970:	4293      	cmp	r3, r2
 8011972:	bfb8      	it	lt
 8011974:	4613      	movlt	r3, r2
 8011976:	6033      	str	r3, [r6, #0]
 8011978:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801197c:	4607      	mov	r7, r0
 801197e:	460c      	mov	r4, r1
 8011980:	b10a      	cbz	r2, 8011986 <_printf_common+0x26>
 8011982:	3301      	adds	r3, #1
 8011984:	6033      	str	r3, [r6, #0]
 8011986:	6823      	ldr	r3, [r4, #0]
 8011988:	0699      	lsls	r1, r3, #26
 801198a:	bf42      	ittt	mi
 801198c:	6833      	ldrmi	r3, [r6, #0]
 801198e:	3302      	addmi	r3, #2
 8011990:	6033      	strmi	r3, [r6, #0]
 8011992:	6825      	ldr	r5, [r4, #0]
 8011994:	f015 0506 	ands.w	r5, r5, #6
 8011998:	d106      	bne.n	80119a8 <_printf_common+0x48>
 801199a:	f104 0a19 	add.w	sl, r4, #25
 801199e:	68e3      	ldr	r3, [r4, #12]
 80119a0:	6832      	ldr	r2, [r6, #0]
 80119a2:	1a9b      	subs	r3, r3, r2
 80119a4:	42ab      	cmp	r3, r5
 80119a6:	dc26      	bgt.n	80119f6 <_printf_common+0x96>
 80119a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80119ac:	1e13      	subs	r3, r2, #0
 80119ae:	6822      	ldr	r2, [r4, #0]
 80119b0:	bf18      	it	ne
 80119b2:	2301      	movne	r3, #1
 80119b4:	0692      	lsls	r2, r2, #26
 80119b6:	d42b      	bmi.n	8011a10 <_printf_common+0xb0>
 80119b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80119bc:	4649      	mov	r1, r9
 80119be:	4638      	mov	r0, r7
 80119c0:	47c0      	blx	r8
 80119c2:	3001      	adds	r0, #1
 80119c4:	d01e      	beq.n	8011a04 <_printf_common+0xa4>
 80119c6:	6823      	ldr	r3, [r4, #0]
 80119c8:	6922      	ldr	r2, [r4, #16]
 80119ca:	f003 0306 	and.w	r3, r3, #6
 80119ce:	2b04      	cmp	r3, #4
 80119d0:	bf02      	ittt	eq
 80119d2:	68e5      	ldreq	r5, [r4, #12]
 80119d4:	6833      	ldreq	r3, [r6, #0]
 80119d6:	1aed      	subeq	r5, r5, r3
 80119d8:	68a3      	ldr	r3, [r4, #8]
 80119da:	bf0c      	ite	eq
 80119dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80119e0:	2500      	movne	r5, #0
 80119e2:	4293      	cmp	r3, r2
 80119e4:	bfc4      	itt	gt
 80119e6:	1a9b      	subgt	r3, r3, r2
 80119e8:	18ed      	addgt	r5, r5, r3
 80119ea:	2600      	movs	r6, #0
 80119ec:	341a      	adds	r4, #26
 80119ee:	42b5      	cmp	r5, r6
 80119f0:	d11a      	bne.n	8011a28 <_printf_common+0xc8>
 80119f2:	2000      	movs	r0, #0
 80119f4:	e008      	b.n	8011a08 <_printf_common+0xa8>
 80119f6:	2301      	movs	r3, #1
 80119f8:	4652      	mov	r2, sl
 80119fa:	4649      	mov	r1, r9
 80119fc:	4638      	mov	r0, r7
 80119fe:	47c0      	blx	r8
 8011a00:	3001      	adds	r0, #1
 8011a02:	d103      	bne.n	8011a0c <_printf_common+0xac>
 8011a04:	f04f 30ff 	mov.w	r0, #4294967295
 8011a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a0c:	3501      	adds	r5, #1
 8011a0e:	e7c6      	b.n	801199e <_printf_common+0x3e>
 8011a10:	18e1      	adds	r1, r4, r3
 8011a12:	1c5a      	adds	r2, r3, #1
 8011a14:	2030      	movs	r0, #48	; 0x30
 8011a16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011a1a:	4422      	add	r2, r4
 8011a1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011a20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011a24:	3302      	adds	r3, #2
 8011a26:	e7c7      	b.n	80119b8 <_printf_common+0x58>
 8011a28:	2301      	movs	r3, #1
 8011a2a:	4622      	mov	r2, r4
 8011a2c:	4649      	mov	r1, r9
 8011a2e:	4638      	mov	r0, r7
 8011a30:	47c0      	blx	r8
 8011a32:	3001      	adds	r0, #1
 8011a34:	d0e6      	beq.n	8011a04 <_printf_common+0xa4>
 8011a36:	3601      	adds	r6, #1
 8011a38:	e7d9      	b.n	80119ee <_printf_common+0x8e>
	...

08011a3c <_printf_i>:
 8011a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011a40:	7e0f      	ldrb	r7, [r1, #24]
 8011a42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011a44:	2f78      	cmp	r7, #120	; 0x78
 8011a46:	4691      	mov	r9, r2
 8011a48:	4680      	mov	r8, r0
 8011a4a:	460c      	mov	r4, r1
 8011a4c:	469a      	mov	sl, r3
 8011a4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011a52:	d807      	bhi.n	8011a64 <_printf_i+0x28>
 8011a54:	2f62      	cmp	r7, #98	; 0x62
 8011a56:	d80a      	bhi.n	8011a6e <_printf_i+0x32>
 8011a58:	2f00      	cmp	r7, #0
 8011a5a:	f000 80d4 	beq.w	8011c06 <_printf_i+0x1ca>
 8011a5e:	2f58      	cmp	r7, #88	; 0x58
 8011a60:	f000 80c0 	beq.w	8011be4 <_printf_i+0x1a8>
 8011a64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011a68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011a6c:	e03a      	b.n	8011ae4 <_printf_i+0xa8>
 8011a6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011a72:	2b15      	cmp	r3, #21
 8011a74:	d8f6      	bhi.n	8011a64 <_printf_i+0x28>
 8011a76:	a101      	add	r1, pc, #4	; (adr r1, 8011a7c <_printf_i+0x40>)
 8011a78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011a7c:	08011ad5 	.word	0x08011ad5
 8011a80:	08011ae9 	.word	0x08011ae9
 8011a84:	08011a65 	.word	0x08011a65
 8011a88:	08011a65 	.word	0x08011a65
 8011a8c:	08011a65 	.word	0x08011a65
 8011a90:	08011a65 	.word	0x08011a65
 8011a94:	08011ae9 	.word	0x08011ae9
 8011a98:	08011a65 	.word	0x08011a65
 8011a9c:	08011a65 	.word	0x08011a65
 8011aa0:	08011a65 	.word	0x08011a65
 8011aa4:	08011a65 	.word	0x08011a65
 8011aa8:	08011bed 	.word	0x08011bed
 8011aac:	08011b15 	.word	0x08011b15
 8011ab0:	08011ba7 	.word	0x08011ba7
 8011ab4:	08011a65 	.word	0x08011a65
 8011ab8:	08011a65 	.word	0x08011a65
 8011abc:	08011c0f 	.word	0x08011c0f
 8011ac0:	08011a65 	.word	0x08011a65
 8011ac4:	08011b15 	.word	0x08011b15
 8011ac8:	08011a65 	.word	0x08011a65
 8011acc:	08011a65 	.word	0x08011a65
 8011ad0:	08011baf 	.word	0x08011baf
 8011ad4:	682b      	ldr	r3, [r5, #0]
 8011ad6:	1d1a      	adds	r2, r3, #4
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	602a      	str	r2, [r5, #0]
 8011adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ae0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011ae4:	2301      	movs	r3, #1
 8011ae6:	e09f      	b.n	8011c28 <_printf_i+0x1ec>
 8011ae8:	6820      	ldr	r0, [r4, #0]
 8011aea:	682b      	ldr	r3, [r5, #0]
 8011aec:	0607      	lsls	r7, r0, #24
 8011aee:	f103 0104 	add.w	r1, r3, #4
 8011af2:	6029      	str	r1, [r5, #0]
 8011af4:	d501      	bpl.n	8011afa <_printf_i+0xbe>
 8011af6:	681e      	ldr	r6, [r3, #0]
 8011af8:	e003      	b.n	8011b02 <_printf_i+0xc6>
 8011afa:	0646      	lsls	r6, r0, #25
 8011afc:	d5fb      	bpl.n	8011af6 <_printf_i+0xba>
 8011afe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011b02:	2e00      	cmp	r6, #0
 8011b04:	da03      	bge.n	8011b0e <_printf_i+0xd2>
 8011b06:	232d      	movs	r3, #45	; 0x2d
 8011b08:	4276      	negs	r6, r6
 8011b0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b0e:	485a      	ldr	r0, [pc, #360]	; (8011c78 <_printf_i+0x23c>)
 8011b10:	230a      	movs	r3, #10
 8011b12:	e012      	b.n	8011b3a <_printf_i+0xfe>
 8011b14:	682b      	ldr	r3, [r5, #0]
 8011b16:	6820      	ldr	r0, [r4, #0]
 8011b18:	1d19      	adds	r1, r3, #4
 8011b1a:	6029      	str	r1, [r5, #0]
 8011b1c:	0605      	lsls	r5, r0, #24
 8011b1e:	d501      	bpl.n	8011b24 <_printf_i+0xe8>
 8011b20:	681e      	ldr	r6, [r3, #0]
 8011b22:	e002      	b.n	8011b2a <_printf_i+0xee>
 8011b24:	0641      	lsls	r1, r0, #25
 8011b26:	d5fb      	bpl.n	8011b20 <_printf_i+0xe4>
 8011b28:	881e      	ldrh	r6, [r3, #0]
 8011b2a:	4853      	ldr	r0, [pc, #332]	; (8011c78 <_printf_i+0x23c>)
 8011b2c:	2f6f      	cmp	r7, #111	; 0x6f
 8011b2e:	bf0c      	ite	eq
 8011b30:	2308      	moveq	r3, #8
 8011b32:	230a      	movne	r3, #10
 8011b34:	2100      	movs	r1, #0
 8011b36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011b3a:	6865      	ldr	r5, [r4, #4]
 8011b3c:	60a5      	str	r5, [r4, #8]
 8011b3e:	2d00      	cmp	r5, #0
 8011b40:	bfa2      	ittt	ge
 8011b42:	6821      	ldrge	r1, [r4, #0]
 8011b44:	f021 0104 	bicge.w	r1, r1, #4
 8011b48:	6021      	strge	r1, [r4, #0]
 8011b4a:	b90e      	cbnz	r6, 8011b50 <_printf_i+0x114>
 8011b4c:	2d00      	cmp	r5, #0
 8011b4e:	d04b      	beq.n	8011be8 <_printf_i+0x1ac>
 8011b50:	4615      	mov	r5, r2
 8011b52:	fbb6 f1f3 	udiv	r1, r6, r3
 8011b56:	fb03 6711 	mls	r7, r3, r1, r6
 8011b5a:	5dc7      	ldrb	r7, [r0, r7]
 8011b5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011b60:	4637      	mov	r7, r6
 8011b62:	42bb      	cmp	r3, r7
 8011b64:	460e      	mov	r6, r1
 8011b66:	d9f4      	bls.n	8011b52 <_printf_i+0x116>
 8011b68:	2b08      	cmp	r3, #8
 8011b6a:	d10b      	bne.n	8011b84 <_printf_i+0x148>
 8011b6c:	6823      	ldr	r3, [r4, #0]
 8011b6e:	07de      	lsls	r6, r3, #31
 8011b70:	d508      	bpl.n	8011b84 <_printf_i+0x148>
 8011b72:	6923      	ldr	r3, [r4, #16]
 8011b74:	6861      	ldr	r1, [r4, #4]
 8011b76:	4299      	cmp	r1, r3
 8011b78:	bfde      	ittt	le
 8011b7a:	2330      	movle	r3, #48	; 0x30
 8011b7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011b80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011b84:	1b52      	subs	r2, r2, r5
 8011b86:	6122      	str	r2, [r4, #16]
 8011b88:	f8cd a000 	str.w	sl, [sp]
 8011b8c:	464b      	mov	r3, r9
 8011b8e:	aa03      	add	r2, sp, #12
 8011b90:	4621      	mov	r1, r4
 8011b92:	4640      	mov	r0, r8
 8011b94:	f7ff fee4 	bl	8011960 <_printf_common>
 8011b98:	3001      	adds	r0, #1
 8011b9a:	d14a      	bne.n	8011c32 <_printf_i+0x1f6>
 8011b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8011ba0:	b004      	add	sp, #16
 8011ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ba6:	6823      	ldr	r3, [r4, #0]
 8011ba8:	f043 0320 	orr.w	r3, r3, #32
 8011bac:	6023      	str	r3, [r4, #0]
 8011bae:	4833      	ldr	r0, [pc, #204]	; (8011c7c <_printf_i+0x240>)
 8011bb0:	2778      	movs	r7, #120	; 0x78
 8011bb2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011bb6:	6823      	ldr	r3, [r4, #0]
 8011bb8:	6829      	ldr	r1, [r5, #0]
 8011bba:	061f      	lsls	r7, r3, #24
 8011bbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8011bc0:	d402      	bmi.n	8011bc8 <_printf_i+0x18c>
 8011bc2:	065f      	lsls	r7, r3, #25
 8011bc4:	bf48      	it	mi
 8011bc6:	b2b6      	uxthmi	r6, r6
 8011bc8:	07df      	lsls	r7, r3, #31
 8011bca:	bf48      	it	mi
 8011bcc:	f043 0320 	orrmi.w	r3, r3, #32
 8011bd0:	6029      	str	r1, [r5, #0]
 8011bd2:	bf48      	it	mi
 8011bd4:	6023      	strmi	r3, [r4, #0]
 8011bd6:	b91e      	cbnz	r6, 8011be0 <_printf_i+0x1a4>
 8011bd8:	6823      	ldr	r3, [r4, #0]
 8011bda:	f023 0320 	bic.w	r3, r3, #32
 8011bde:	6023      	str	r3, [r4, #0]
 8011be0:	2310      	movs	r3, #16
 8011be2:	e7a7      	b.n	8011b34 <_printf_i+0xf8>
 8011be4:	4824      	ldr	r0, [pc, #144]	; (8011c78 <_printf_i+0x23c>)
 8011be6:	e7e4      	b.n	8011bb2 <_printf_i+0x176>
 8011be8:	4615      	mov	r5, r2
 8011bea:	e7bd      	b.n	8011b68 <_printf_i+0x12c>
 8011bec:	682b      	ldr	r3, [r5, #0]
 8011bee:	6826      	ldr	r6, [r4, #0]
 8011bf0:	6961      	ldr	r1, [r4, #20]
 8011bf2:	1d18      	adds	r0, r3, #4
 8011bf4:	6028      	str	r0, [r5, #0]
 8011bf6:	0635      	lsls	r5, r6, #24
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	d501      	bpl.n	8011c00 <_printf_i+0x1c4>
 8011bfc:	6019      	str	r1, [r3, #0]
 8011bfe:	e002      	b.n	8011c06 <_printf_i+0x1ca>
 8011c00:	0670      	lsls	r0, r6, #25
 8011c02:	d5fb      	bpl.n	8011bfc <_printf_i+0x1c0>
 8011c04:	8019      	strh	r1, [r3, #0]
 8011c06:	2300      	movs	r3, #0
 8011c08:	6123      	str	r3, [r4, #16]
 8011c0a:	4615      	mov	r5, r2
 8011c0c:	e7bc      	b.n	8011b88 <_printf_i+0x14c>
 8011c0e:	682b      	ldr	r3, [r5, #0]
 8011c10:	1d1a      	adds	r2, r3, #4
 8011c12:	602a      	str	r2, [r5, #0]
 8011c14:	681d      	ldr	r5, [r3, #0]
 8011c16:	6862      	ldr	r2, [r4, #4]
 8011c18:	2100      	movs	r1, #0
 8011c1a:	4628      	mov	r0, r5
 8011c1c:	f7ee fae8 	bl	80001f0 <memchr>
 8011c20:	b108      	cbz	r0, 8011c26 <_printf_i+0x1ea>
 8011c22:	1b40      	subs	r0, r0, r5
 8011c24:	6060      	str	r0, [r4, #4]
 8011c26:	6863      	ldr	r3, [r4, #4]
 8011c28:	6123      	str	r3, [r4, #16]
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c30:	e7aa      	b.n	8011b88 <_printf_i+0x14c>
 8011c32:	6923      	ldr	r3, [r4, #16]
 8011c34:	462a      	mov	r2, r5
 8011c36:	4649      	mov	r1, r9
 8011c38:	4640      	mov	r0, r8
 8011c3a:	47d0      	blx	sl
 8011c3c:	3001      	adds	r0, #1
 8011c3e:	d0ad      	beq.n	8011b9c <_printf_i+0x160>
 8011c40:	6823      	ldr	r3, [r4, #0]
 8011c42:	079b      	lsls	r3, r3, #30
 8011c44:	d413      	bmi.n	8011c6e <_printf_i+0x232>
 8011c46:	68e0      	ldr	r0, [r4, #12]
 8011c48:	9b03      	ldr	r3, [sp, #12]
 8011c4a:	4298      	cmp	r0, r3
 8011c4c:	bfb8      	it	lt
 8011c4e:	4618      	movlt	r0, r3
 8011c50:	e7a6      	b.n	8011ba0 <_printf_i+0x164>
 8011c52:	2301      	movs	r3, #1
 8011c54:	4632      	mov	r2, r6
 8011c56:	4649      	mov	r1, r9
 8011c58:	4640      	mov	r0, r8
 8011c5a:	47d0      	blx	sl
 8011c5c:	3001      	adds	r0, #1
 8011c5e:	d09d      	beq.n	8011b9c <_printf_i+0x160>
 8011c60:	3501      	adds	r5, #1
 8011c62:	68e3      	ldr	r3, [r4, #12]
 8011c64:	9903      	ldr	r1, [sp, #12]
 8011c66:	1a5b      	subs	r3, r3, r1
 8011c68:	42ab      	cmp	r3, r5
 8011c6a:	dcf2      	bgt.n	8011c52 <_printf_i+0x216>
 8011c6c:	e7eb      	b.n	8011c46 <_printf_i+0x20a>
 8011c6e:	2500      	movs	r5, #0
 8011c70:	f104 0619 	add.w	r6, r4, #25
 8011c74:	e7f5      	b.n	8011c62 <_printf_i+0x226>
 8011c76:	bf00      	nop
 8011c78:	08017846 	.word	0x08017846
 8011c7c:	08017857 	.word	0x08017857

08011c80 <std>:
 8011c80:	2300      	movs	r3, #0
 8011c82:	b510      	push	{r4, lr}
 8011c84:	4604      	mov	r4, r0
 8011c86:	e9c0 3300 	strd	r3, r3, [r0]
 8011c8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011c8e:	6083      	str	r3, [r0, #8]
 8011c90:	8181      	strh	r1, [r0, #12]
 8011c92:	6643      	str	r3, [r0, #100]	; 0x64
 8011c94:	81c2      	strh	r2, [r0, #14]
 8011c96:	6183      	str	r3, [r0, #24]
 8011c98:	4619      	mov	r1, r3
 8011c9a:	2208      	movs	r2, #8
 8011c9c:	305c      	adds	r0, #92	; 0x5c
 8011c9e:	f000 f9e7 	bl	8012070 <memset>
 8011ca2:	4b0d      	ldr	r3, [pc, #52]	; (8011cd8 <std+0x58>)
 8011ca4:	6263      	str	r3, [r4, #36]	; 0x24
 8011ca6:	4b0d      	ldr	r3, [pc, #52]	; (8011cdc <std+0x5c>)
 8011ca8:	62a3      	str	r3, [r4, #40]	; 0x28
 8011caa:	4b0d      	ldr	r3, [pc, #52]	; (8011ce0 <std+0x60>)
 8011cac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011cae:	4b0d      	ldr	r3, [pc, #52]	; (8011ce4 <std+0x64>)
 8011cb0:	6323      	str	r3, [r4, #48]	; 0x30
 8011cb2:	4b0d      	ldr	r3, [pc, #52]	; (8011ce8 <std+0x68>)
 8011cb4:	6224      	str	r4, [r4, #32]
 8011cb6:	429c      	cmp	r4, r3
 8011cb8:	d006      	beq.n	8011cc8 <std+0x48>
 8011cba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8011cbe:	4294      	cmp	r4, r2
 8011cc0:	d002      	beq.n	8011cc8 <std+0x48>
 8011cc2:	33d0      	adds	r3, #208	; 0xd0
 8011cc4:	429c      	cmp	r4, r3
 8011cc6:	d105      	bne.n	8011cd4 <std+0x54>
 8011cc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cd0:	f000 bab0 	b.w	8012234 <__retarget_lock_init_recursive>
 8011cd4:	bd10      	pop	{r4, pc}
 8011cd6:	bf00      	nop
 8011cd8:	08011e8d 	.word	0x08011e8d
 8011cdc:	08011eaf 	.word	0x08011eaf
 8011ce0:	08011ee7 	.word	0x08011ee7
 8011ce4:	08011f0b 	.word	0x08011f0b
 8011ce8:	2000e9e0 	.word	0x2000e9e0

08011cec <stdio_exit_handler>:
 8011cec:	4a02      	ldr	r2, [pc, #8]	; (8011cf8 <stdio_exit_handler+0xc>)
 8011cee:	4903      	ldr	r1, [pc, #12]	; (8011cfc <stdio_exit_handler+0x10>)
 8011cf0:	4803      	ldr	r0, [pc, #12]	; (8011d00 <stdio_exit_handler+0x14>)
 8011cf2:	f000 b87b 	b.w	8011dec <_fwalk_sglue>
 8011cf6:	bf00      	nop
 8011cf8:	20006e80 	.word	0x20006e80
 8011cfc:	08013df1 	.word	0x08013df1
 8011d00:	20006e8c 	.word	0x20006e8c

08011d04 <cleanup_stdio>:
 8011d04:	6841      	ldr	r1, [r0, #4]
 8011d06:	4b0c      	ldr	r3, [pc, #48]	; (8011d38 <cleanup_stdio+0x34>)
 8011d08:	4299      	cmp	r1, r3
 8011d0a:	b510      	push	{r4, lr}
 8011d0c:	4604      	mov	r4, r0
 8011d0e:	d001      	beq.n	8011d14 <cleanup_stdio+0x10>
 8011d10:	f002 f86e 	bl	8013df0 <_fflush_r>
 8011d14:	68a1      	ldr	r1, [r4, #8]
 8011d16:	4b09      	ldr	r3, [pc, #36]	; (8011d3c <cleanup_stdio+0x38>)
 8011d18:	4299      	cmp	r1, r3
 8011d1a:	d002      	beq.n	8011d22 <cleanup_stdio+0x1e>
 8011d1c:	4620      	mov	r0, r4
 8011d1e:	f002 f867 	bl	8013df0 <_fflush_r>
 8011d22:	68e1      	ldr	r1, [r4, #12]
 8011d24:	4b06      	ldr	r3, [pc, #24]	; (8011d40 <cleanup_stdio+0x3c>)
 8011d26:	4299      	cmp	r1, r3
 8011d28:	d004      	beq.n	8011d34 <cleanup_stdio+0x30>
 8011d2a:	4620      	mov	r0, r4
 8011d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d30:	f002 b85e 	b.w	8013df0 <_fflush_r>
 8011d34:	bd10      	pop	{r4, pc}
 8011d36:	bf00      	nop
 8011d38:	2000e9e0 	.word	0x2000e9e0
 8011d3c:	2000ea48 	.word	0x2000ea48
 8011d40:	2000eab0 	.word	0x2000eab0

08011d44 <global_stdio_init.part.0>:
 8011d44:	b510      	push	{r4, lr}
 8011d46:	4b0b      	ldr	r3, [pc, #44]	; (8011d74 <global_stdio_init.part.0+0x30>)
 8011d48:	4c0b      	ldr	r4, [pc, #44]	; (8011d78 <global_stdio_init.part.0+0x34>)
 8011d4a:	4a0c      	ldr	r2, [pc, #48]	; (8011d7c <global_stdio_init.part.0+0x38>)
 8011d4c:	601a      	str	r2, [r3, #0]
 8011d4e:	4620      	mov	r0, r4
 8011d50:	2200      	movs	r2, #0
 8011d52:	2104      	movs	r1, #4
 8011d54:	f7ff ff94 	bl	8011c80 <std>
 8011d58:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011d5c:	2201      	movs	r2, #1
 8011d5e:	2109      	movs	r1, #9
 8011d60:	f7ff ff8e 	bl	8011c80 <std>
 8011d64:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011d68:	2202      	movs	r2, #2
 8011d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d6e:	2112      	movs	r1, #18
 8011d70:	f7ff bf86 	b.w	8011c80 <std>
 8011d74:	2000eb18 	.word	0x2000eb18
 8011d78:	2000e9e0 	.word	0x2000e9e0
 8011d7c:	08011ced 	.word	0x08011ced

08011d80 <__sfp_lock_acquire>:
 8011d80:	4801      	ldr	r0, [pc, #4]	; (8011d88 <__sfp_lock_acquire+0x8>)
 8011d82:	f000 ba58 	b.w	8012236 <__retarget_lock_acquire_recursive>
 8011d86:	bf00      	nop
 8011d88:	2000eb22 	.word	0x2000eb22

08011d8c <__sfp_lock_release>:
 8011d8c:	4801      	ldr	r0, [pc, #4]	; (8011d94 <__sfp_lock_release+0x8>)
 8011d8e:	f000 ba53 	b.w	8012238 <__retarget_lock_release_recursive>
 8011d92:	bf00      	nop
 8011d94:	2000eb22 	.word	0x2000eb22

08011d98 <__sinit>:
 8011d98:	b510      	push	{r4, lr}
 8011d9a:	4604      	mov	r4, r0
 8011d9c:	f7ff fff0 	bl	8011d80 <__sfp_lock_acquire>
 8011da0:	6a23      	ldr	r3, [r4, #32]
 8011da2:	b11b      	cbz	r3, 8011dac <__sinit+0x14>
 8011da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011da8:	f7ff bff0 	b.w	8011d8c <__sfp_lock_release>
 8011dac:	4b04      	ldr	r3, [pc, #16]	; (8011dc0 <__sinit+0x28>)
 8011dae:	6223      	str	r3, [r4, #32]
 8011db0:	4b04      	ldr	r3, [pc, #16]	; (8011dc4 <__sinit+0x2c>)
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d1f5      	bne.n	8011da4 <__sinit+0xc>
 8011db8:	f7ff ffc4 	bl	8011d44 <global_stdio_init.part.0>
 8011dbc:	e7f2      	b.n	8011da4 <__sinit+0xc>
 8011dbe:	bf00      	nop
 8011dc0:	08011d05 	.word	0x08011d05
 8011dc4:	2000eb18 	.word	0x2000eb18

08011dc8 <fiprintf>:
 8011dc8:	b40e      	push	{r1, r2, r3}
 8011dca:	b503      	push	{r0, r1, lr}
 8011dcc:	4601      	mov	r1, r0
 8011dce:	ab03      	add	r3, sp, #12
 8011dd0:	4805      	ldr	r0, [pc, #20]	; (8011de8 <fiprintf+0x20>)
 8011dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011dd6:	6800      	ldr	r0, [r0, #0]
 8011dd8:	9301      	str	r3, [sp, #4]
 8011dda:	f001 fe69 	bl	8013ab0 <_vfiprintf_r>
 8011dde:	b002      	add	sp, #8
 8011de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011de4:	b003      	add	sp, #12
 8011de6:	4770      	bx	lr
 8011de8:	20006ed8 	.word	0x20006ed8

08011dec <_fwalk_sglue>:
 8011dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011df0:	4607      	mov	r7, r0
 8011df2:	4688      	mov	r8, r1
 8011df4:	4614      	mov	r4, r2
 8011df6:	2600      	movs	r6, #0
 8011df8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011dfc:	f1b9 0901 	subs.w	r9, r9, #1
 8011e00:	d505      	bpl.n	8011e0e <_fwalk_sglue+0x22>
 8011e02:	6824      	ldr	r4, [r4, #0]
 8011e04:	2c00      	cmp	r4, #0
 8011e06:	d1f7      	bne.n	8011df8 <_fwalk_sglue+0xc>
 8011e08:	4630      	mov	r0, r6
 8011e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e0e:	89ab      	ldrh	r3, [r5, #12]
 8011e10:	2b01      	cmp	r3, #1
 8011e12:	d907      	bls.n	8011e24 <_fwalk_sglue+0x38>
 8011e14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011e18:	3301      	adds	r3, #1
 8011e1a:	d003      	beq.n	8011e24 <_fwalk_sglue+0x38>
 8011e1c:	4629      	mov	r1, r5
 8011e1e:	4638      	mov	r0, r7
 8011e20:	47c0      	blx	r8
 8011e22:	4306      	orrs	r6, r0
 8011e24:	3568      	adds	r5, #104	; 0x68
 8011e26:	e7e9      	b.n	8011dfc <_fwalk_sglue+0x10>

08011e28 <iprintf>:
 8011e28:	b40f      	push	{r0, r1, r2, r3}
 8011e2a:	b507      	push	{r0, r1, r2, lr}
 8011e2c:	4906      	ldr	r1, [pc, #24]	; (8011e48 <iprintf+0x20>)
 8011e2e:	ab04      	add	r3, sp, #16
 8011e30:	6808      	ldr	r0, [r1, #0]
 8011e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e36:	6881      	ldr	r1, [r0, #8]
 8011e38:	9301      	str	r3, [sp, #4]
 8011e3a:	f001 fe39 	bl	8013ab0 <_vfiprintf_r>
 8011e3e:	b003      	add	sp, #12
 8011e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e44:	b004      	add	sp, #16
 8011e46:	4770      	bx	lr
 8011e48:	20006ed8 	.word	0x20006ed8

08011e4c <siprintf>:
 8011e4c:	b40e      	push	{r1, r2, r3}
 8011e4e:	b500      	push	{lr}
 8011e50:	b09c      	sub	sp, #112	; 0x70
 8011e52:	ab1d      	add	r3, sp, #116	; 0x74
 8011e54:	9002      	str	r0, [sp, #8]
 8011e56:	9006      	str	r0, [sp, #24]
 8011e58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011e5c:	4809      	ldr	r0, [pc, #36]	; (8011e84 <siprintf+0x38>)
 8011e5e:	9107      	str	r1, [sp, #28]
 8011e60:	9104      	str	r1, [sp, #16]
 8011e62:	4909      	ldr	r1, [pc, #36]	; (8011e88 <siprintf+0x3c>)
 8011e64:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e68:	9105      	str	r1, [sp, #20]
 8011e6a:	6800      	ldr	r0, [r0, #0]
 8011e6c:	9301      	str	r3, [sp, #4]
 8011e6e:	a902      	add	r1, sp, #8
 8011e70:	f001 fcf6 	bl	8013860 <_svfiprintf_r>
 8011e74:	9b02      	ldr	r3, [sp, #8]
 8011e76:	2200      	movs	r2, #0
 8011e78:	701a      	strb	r2, [r3, #0]
 8011e7a:	b01c      	add	sp, #112	; 0x70
 8011e7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e80:	b003      	add	sp, #12
 8011e82:	4770      	bx	lr
 8011e84:	20006ed8 	.word	0x20006ed8
 8011e88:	ffff0208 	.word	0xffff0208

08011e8c <__sread>:
 8011e8c:	b510      	push	{r4, lr}
 8011e8e:	460c      	mov	r4, r1
 8011e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e94:	f000 f95c 	bl	8012150 <_read_r>
 8011e98:	2800      	cmp	r0, #0
 8011e9a:	bfab      	itete	ge
 8011e9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011e9e:	89a3      	ldrhlt	r3, [r4, #12]
 8011ea0:	181b      	addge	r3, r3, r0
 8011ea2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011ea6:	bfac      	ite	ge
 8011ea8:	6563      	strge	r3, [r4, #84]	; 0x54
 8011eaa:	81a3      	strhlt	r3, [r4, #12]
 8011eac:	bd10      	pop	{r4, pc}

08011eae <__swrite>:
 8011eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011eb2:	461f      	mov	r7, r3
 8011eb4:	898b      	ldrh	r3, [r1, #12]
 8011eb6:	05db      	lsls	r3, r3, #23
 8011eb8:	4605      	mov	r5, r0
 8011eba:	460c      	mov	r4, r1
 8011ebc:	4616      	mov	r6, r2
 8011ebe:	d505      	bpl.n	8011ecc <__swrite+0x1e>
 8011ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ec4:	2302      	movs	r3, #2
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	f000 f930 	bl	801212c <_lseek_r>
 8011ecc:	89a3      	ldrh	r3, [r4, #12]
 8011ece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ed2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011ed6:	81a3      	strh	r3, [r4, #12]
 8011ed8:	4632      	mov	r2, r6
 8011eda:	463b      	mov	r3, r7
 8011edc:	4628      	mov	r0, r5
 8011ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ee2:	f000 b96b 	b.w	80121bc <_write_r>

08011ee6 <__sseek>:
 8011ee6:	b510      	push	{r4, lr}
 8011ee8:	460c      	mov	r4, r1
 8011eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011eee:	f000 f91d 	bl	801212c <_lseek_r>
 8011ef2:	1c43      	adds	r3, r0, #1
 8011ef4:	89a3      	ldrh	r3, [r4, #12]
 8011ef6:	bf15      	itete	ne
 8011ef8:	6560      	strne	r0, [r4, #84]	; 0x54
 8011efa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011efe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011f02:	81a3      	strheq	r3, [r4, #12]
 8011f04:	bf18      	it	ne
 8011f06:	81a3      	strhne	r3, [r4, #12]
 8011f08:	bd10      	pop	{r4, pc}

08011f0a <__sclose>:
 8011f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f0e:	f000 b8fd 	b.w	801210c <_close_r>

08011f12 <__swbuf_r>:
 8011f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f14:	460e      	mov	r6, r1
 8011f16:	4614      	mov	r4, r2
 8011f18:	4605      	mov	r5, r0
 8011f1a:	b118      	cbz	r0, 8011f24 <__swbuf_r+0x12>
 8011f1c:	6a03      	ldr	r3, [r0, #32]
 8011f1e:	b90b      	cbnz	r3, 8011f24 <__swbuf_r+0x12>
 8011f20:	f7ff ff3a 	bl	8011d98 <__sinit>
 8011f24:	69a3      	ldr	r3, [r4, #24]
 8011f26:	60a3      	str	r3, [r4, #8]
 8011f28:	89a3      	ldrh	r3, [r4, #12]
 8011f2a:	071a      	lsls	r2, r3, #28
 8011f2c:	d525      	bpl.n	8011f7a <__swbuf_r+0x68>
 8011f2e:	6923      	ldr	r3, [r4, #16]
 8011f30:	b31b      	cbz	r3, 8011f7a <__swbuf_r+0x68>
 8011f32:	6823      	ldr	r3, [r4, #0]
 8011f34:	6922      	ldr	r2, [r4, #16]
 8011f36:	1a98      	subs	r0, r3, r2
 8011f38:	6963      	ldr	r3, [r4, #20]
 8011f3a:	b2f6      	uxtb	r6, r6
 8011f3c:	4283      	cmp	r3, r0
 8011f3e:	4637      	mov	r7, r6
 8011f40:	dc04      	bgt.n	8011f4c <__swbuf_r+0x3a>
 8011f42:	4621      	mov	r1, r4
 8011f44:	4628      	mov	r0, r5
 8011f46:	f001 ff53 	bl	8013df0 <_fflush_r>
 8011f4a:	b9e0      	cbnz	r0, 8011f86 <__swbuf_r+0x74>
 8011f4c:	68a3      	ldr	r3, [r4, #8]
 8011f4e:	3b01      	subs	r3, #1
 8011f50:	60a3      	str	r3, [r4, #8]
 8011f52:	6823      	ldr	r3, [r4, #0]
 8011f54:	1c5a      	adds	r2, r3, #1
 8011f56:	6022      	str	r2, [r4, #0]
 8011f58:	701e      	strb	r6, [r3, #0]
 8011f5a:	6962      	ldr	r2, [r4, #20]
 8011f5c:	1c43      	adds	r3, r0, #1
 8011f5e:	429a      	cmp	r2, r3
 8011f60:	d004      	beq.n	8011f6c <__swbuf_r+0x5a>
 8011f62:	89a3      	ldrh	r3, [r4, #12]
 8011f64:	07db      	lsls	r3, r3, #31
 8011f66:	d506      	bpl.n	8011f76 <__swbuf_r+0x64>
 8011f68:	2e0a      	cmp	r6, #10
 8011f6a:	d104      	bne.n	8011f76 <__swbuf_r+0x64>
 8011f6c:	4621      	mov	r1, r4
 8011f6e:	4628      	mov	r0, r5
 8011f70:	f001 ff3e 	bl	8013df0 <_fflush_r>
 8011f74:	b938      	cbnz	r0, 8011f86 <__swbuf_r+0x74>
 8011f76:	4638      	mov	r0, r7
 8011f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f7a:	4621      	mov	r1, r4
 8011f7c:	4628      	mov	r0, r5
 8011f7e:	f000 f805 	bl	8011f8c <__swsetup_r>
 8011f82:	2800      	cmp	r0, #0
 8011f84:	d0d5      	beq.n	8011f32 <__swbuf_r+0x20>
 8011f86:	f04f 37ff 	mov.w	r7, #4294967295
 8011f8a:	e7f4      	b.n	8011f76 <__swbuf_r+0x64>

08011f8c <__swsetup_r>:
 8011f8c:	b538      	push	{r3, r4, r5, lr}
 8011f8e:	4b2a      	ldr	r3, [pc, #168]	; (8012038 <__swsetup_r+0xac>)
 8011f90:	4605      	mov	r5, r0
 8011f92:	6818      	ldr	r0, [r3, #0]
 8011f94:	460c      	mov	r4, r1
 8011f96:	b118      	cbz	r0, 8011fa0 <__swsetup_r+0x14>
 8011f98:	6a03      	ldr	r3, [r0, #32]
 8011f9a:	b90b      	cbnz	r3, 8011fa0 <__swsetup_r+0x14>
 8011f9c:	f7ff fefc 	bl	8011d98 <__sinit>
 8011fa0:	89a3      	ldrh	r3, [r4, #12]
 8011fa2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011fa6:	0718      	lsls	r0, r3, #28
 8011fa8:	d422      	bmi.n	8011ff0 <__swsetup_r+0x64>
 8011faa:	06d9      	lsls	r1, r3, #27
 8011fac:	d407      	bmi.n	8011fbe <__swsetup_r+0x32>
 8011fae:	2309      	movs	r3, #9
 8011fb0:	602b      	str	r3, [r5, #0]
 8011fb2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011fb6:	81a3      	strh	r3, [r4, #12]
 8011fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8011fbc:	e034      	b.n	8012028 <__swsetup_r+0x9c>
 8011fbe:	0758      	lsls	r0, r3, #29
 8011fc0:	d512      	bpl.n	8011fe8 <__swsetup_r+0x5c>
 8011fc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011fc4:	b141      	cbz	r1, 8011fd8 <__swsetup_r+0x4c>
 8011fc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011fca:	4299      	cmp	r1, r3
 8011fcc:	d002      	beq.n	8011fd4 <__swsetup_r+0x48>
 8011fce:	4628      	mov	r0, r5
 8011fd0:	f001 f81c 	bl	801300c <_free_r>
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	6363      	str	r3, [r4, #52]	; 0x34
 8011fd8:	89a3      	ldrh	r3, [r4, #12]
 8011fda:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011fde:	81a3      	strh	r3, [r4, #12]
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	6063      	str	r3, [r4, #4]
 8011fe4:	6923      	ldr	r3, [r4, #16]
 8011fe6:	6023      	str	r3, [r4, #0]
 8011fe8:	89a3      	ldrh	r3, [r4, #12]
 8011fea:	f043 0308 	orr.w	r3, r3, #8
 8011fee:	81a3      	strh	r3, [r4, #12]
 8011ff0:	6923      	ldr	r3, [r4, #16]
 8011ff2:	b94b      	cbnz	r3, 8012008 <__swsetup_r+0x7c>
 8011ff4:	89a3      	ldrh	r3, [r4, #12]
 8011ff6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011ffa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011ffe:	d003      	beq.n	8012008 <__swsetup_r+0x7c>
 8012000:	4621      	mov	r1, r4
 8012002:	4628      	mov	r0, r5
 8012004:	f001 ff42 	bl	8013e8c <__smakebuf_r>
 8012008:	89a0      	ldrh	r0, [r4, #12]
 801200a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801200e:	f010 0301 	ands.w	r3, r0, #1
 8012012:	d00a      	beq.n	801202a <__swsetup_r+0x9e>
 8012014:	2300      	movs	r3, #0
 8012016:	60a3      	str	r3, [r4, #8]
 8012018:	6963      	ldr	r3, [r4, #20]
 801201a:	425b      	negs	r3, r3
 801201c:	61a3      	str	r3, [r4, #24]
 801201e:	6923      	ldr	r3, [r4, #16]
 8012020:	b943      	cbnz	r3, 8012034 <__swsetup_r+0xa8>
 8012022:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012026:	d1c4      	bne.n	8011fb2 <__swsetup_r+0x26>
 8012028:	bd38      	pop	{r3, r4, r5, pc}
 801202a:	0781      	lsls	r1, r0, #30
 801202c:	bf58      	it	pl
 801202e:	6963      	ldrpl	r3, [r4, #20]
 8012030:	60a3      	str	r3, [r4, #8]
 8012032:	e7f4      	b.n	801201e <__swsetup_r+0x92>
 8012034:	2000      	movs	r0, #0
 8012036:	e7f7      	b.n	8012028 <__swsetup_r+0x9c>
 8012038:	20006ed8 	.word	0x20006ed8

0801203c <memmove>:
 801203c:	4288      	cmp	r0, r1
 801203e:	b510      	push	{r4, lr}
 8012040:	eb01 0402 	add.w	r4, r1, r2
 8012044:	d902      	bls.n	801204c <memmove+0x10>
 8012046:	4284      	cmp	r4, r0
 8012048:	4623      	mov	r3, r4
 801204a:	d807      	bhi.n	801205c <memmove+0x20>
 801204c:	1e43      	subs	r3, r0, #1
 801204e:	42a1      	cmp	r1, r4
 8012050:	d008      	beq.n	8012064 <memmove+0x28>
 8012052:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012056:	f803 2f01 	strb.w	r2, [r3, #1]!
 801205a:	e7f8      	b.n	801204e <memmove+0x12>
 801205c:	4402      	add	r2, r0
 801205e:	4601      	mov	r1, r0
 8012060:	428a      	cmp	r2, r1
 8012062:	d100      	bne.n	8012066 <memmove+0x2a>
 8012064:	bd10      	pop	{r4, pc}
 8012066:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801206a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801206e:	e7f7      	b.n	8012060 <memmove+0x24>

08012070 <memset>:
 8012070:	4402      	add	r2, r0
 8012072:	4603      	mov	r3, r0
 8012074:	4293      	cmp	r3, r2
 8012076:	d100      	bne.n	801207a <memset+0xa>
 8012078:	4770      	bx	lr
 801207a:	f803 1b01 	strb.w	r1, [r3], #1
 801207e:	e7f9      	b.n	8012074 <memset+0x4>

08012080 <strncmp>:
 8012080:	b510      	push	{r4, lr}
 8012082:	b16a      	cbz	r2, 80120a0 <strncmp+0x20>
 8012084:	3901      	subs	r1, #1
 8012086:	1884      	adds	r4, r0, r2
 8012088:	f810 2b01 	ldrb.w	r2, [r0], #1
 801208c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012090:	429a      	cmp	r2, r3
 8012092:	d103      	bne.n	801209c <strncmp+0x1c>
 8012094:	42a0      	cmp	r0, r4
 8012096:	d001      	beq.n	801209c <strncmp+0x1c>
 8012098:	2a00      	cmp	r2, #0
 801209a:	d1f5      	bne.n	8012088 <strncmp+0x8>
 801209c:	1ad0      	subs	r0, r2, r3
 801209e:	bd10      	pop	{r4, pc}
 80120a0:	4610      	mov	r0, r2
 80120a2:	e7fc      	b.n	801209e <strncmp+0x1e>

080120a4 <_raise_r>:
 80120a4:	291f      	cmp	r1, #31
 80120a6:	b538      	push	{r3, r4, r5, lr}
 80120a8:	4604      	mov	r4, r0
 80120aa:	460d      	mov	r5, r1
 80120ac:	d904      	bls.n	80120b8 <_raise_r+0x14>
 80120ae:	2316      	movs	r3, #22
 80120b0:	6003      	str	r3, [r0, #0]
 80120b2:	f04f 30ff 	mov.w	r0, #4294967295
 80120b6:	bd38      	pop	{r3, r4, r5, pc}
 80120b8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80120ba:	b112      	cbz	r2, 80120c2 <_raise_r+0x1e>
 80120bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80120c0:	b94b      	cbnz	r3, 80120d6 <_raise_r+0x32>
 80120c2:	4620      	mov	r0, r4
 80120c4:	f000 f868 	bl	8012198 <_getpid_r>
 80120c8:	462a      	mov	r2, r5
 80120ca:	4601      	mov	r1, r0
 80120cc:	4620      	mov	r0, r4
 80120ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80120d2:	f000 b84f 	b.w	8012174 <_kill_r>
 80120d6:	2b01      	cmp	r3, #1
 80120d8:	d00a      	beq.n	80120f0 <_raise_r+0x4c>
 80120da:	1c59      	adds	r1, r3, #1
 80120dc:	d103      	bne.n	80120e6 <_raise_r+0x42>
 80120de:	2316      	movs	r3, #22
 80120e0:	6003      	str	r3, [r0, #0]
 80120e2:	2001      	movs	r0, #1
 80120e4:	e7e7      	b.n	80120b6 <_raise_r+0x12>
 80120e6:	2400      	movs	r4, #0
 80120e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80120ec:	4628      	mov	r0, r5
 80120ee:	4798      	blx	r3
 80120f0:	2000      	movs	r0, #0
 80120f2:	e7e0      	b.n	80120b6 <_raise_r+0x12>

080120f4 <raise>:
 80120f4:	4b02      	ldr	r3, [pc, #8]	; (8012100 <raise+0xc>)
 80120f6:	4601      	mov	r1, r0
 80120f8:	6818      	ldr	r0, [r3, #0]
 80120fa:	f7ff bfd3 	b.w	80120a4 <_raise_r>
 80120fe:	bf00      	nop
 8012100:	20006ed8 	.word	0x20006ed8

08012104 <_localeconv_r>:
 8012104:	4800      	ldr	r0, [pc, #0]	; (8012108 <_localeconv_r+0x4>)
 8012106:	4770      	bx	lr
 8012108:	20006fd0 	.word	0x20006fd0

0801210c <_close_r>:
 801210c:	b538      	push	{r3, r4, r5, lr}
 801210e:	4d06      	ldr	r5, [pc, #24]	; (8012128 <_close_r+0x1c>)
 8012110:	2300      	movs	r3, #0
 8012112:	4604      	mov	r4, r0
 8012114:	4608      	mov	r0, r1
 8012116:	602b      	str	r3, [r5, #0]
 8012118:	f7ef fdfe 	bl	8001d18 <_close>
 801211c:	1c43      	adds	r3, r0, #1
 801211e:	d102      	bne.n	8012126 <_close_r+0x1a>
 8012120:	682b      	ldr	r3, [r5, #0]
 8012122:	b103      	cbz	r3, 8012126 <_close_r+0x1a>
 8012124:	6023      	str	r3, [r4, #0]
 8012126:	bd38      	pop	{r3, r4, r5, pc}
 8012128:	2000eb1c 	.word	0x2000eb1c

0801212c <_lseek_r>:
 801212c:	b538      	push	{r3, r4, r5, lr}
 801212e:	4d07      	ldr	r5, [pc, #28]	; (801214c <_lseek_r+0x20>)
 8012130:	4604      	mov	r4, r0
 8012132:	4608      	mov	r0, r1
 8012134:	4611      	mov	r1, r2
 8012136:	2200      	movs	r2, #0
 8012138:	602a      	str	r2, [r5, #0]
 801213a:	461a      	mov	r2, r3
 801213c:	f7ef fdf8 	bl	8001d30 <_lseek>
 8012140:	1c43      	adds	r3, r0, #1
 8012142:	d102      	bne.n	801214a <_lseek_r+0x1e>
 8012144:	682b      	ldr	r3, [r5, #0]
 8012146:	b103      	cbz	r3, 801214a <_lseek_r+0x1e>
 8012148:	6023      	str	r3, [r4, #0]
 801214a:	bd38      	pop	{r3, r4, r5, pc}
 801214c:	2000eb1c 	.word	0x2000eb1c

08012150 <_read_r>:
 8012150:	b538      	push	{r3, r4, r5, lr}
 8012152:	4d07      	ldr	r5, [pc, #28]	; (8012170 <_read_r+0x20>)
 8012154:	4604      	mov	r4, r0
 8012156:	4608      	mov	r0, r1
 8012158:	4611      	mov	r1, r2
 801215a:	2200      	movs	r2, #0
 801215c:	602a      	str	r2, [r5, #0]
 801215e:	461a      	mov	r2, r3
 8012160:	f7ef fdbe 	bl	8001ce0 <_read>
 8012164:	1c43      	adds	r3, r0, #1
 8012166:	d102      	bne.n	801216e <_read_r+0x1e>
 8012168:	682b      	ldr	r3, [r5, #0]
 801216a:	b103      	cbz	r3, 801216e <_read_r+0x1e>
 801216c:	6023      	str	r3, [r4, #0]
 801216e:	bd38      	pop	{r3, r4, r5, pc}
 8012170:	2000eb1c 	.word	0x2000eb1c

08012174 <_kill_r>:
 8012174:	b538      	push	{r3, r4, r5, lr}
 8012176:	4d07      	ldr	r5, [pc, #28]	; (8012194 <_kill_r+0x20>)
 8012178:	2300      	movs	r3, #0
 801217a:	4604      	mov	r4, r0
 801217c:	4608      	mov	r0, r1
 801217e:	4611      	mov	r1, r2
 8012180:	602b      	str	r3, [r5, #0]
 8012182:	f7ef fd9f 	bl	8001cc4 <_kill>
 8012186:	1c43      	adds	r3, r0, #1
 8012188:	d102      	bne.n	8012190 <_kill_r+0x1c>
 801218a:	682b      	ldr	r3, [r5, #0]
 801218c:	b103      	cbz	r3, 8012190 <_kill_r+0x1c>
 801218e:	6023      	str	r3, [r4, #0]
 8012190:	bd38      	pop	{r3, r4, r5, pc}
 8012192:	bf00      	nop
 8012194:	2000eb1c 	.word	0x2000eb1c

08012198 <_getpid_r>:
 8012198:	f7ef bd92 	b.w	8001cc0 <_getpid>

0801219c <_sbrk_r>:
 801219c:	b538      	push	{r3, r4, r5, lr}
 801219e:	4d06      	ldr	r5, [pc, #24]	; (80121b8 <_sbrk_r+0x1c>)
 80121a0:	2300      	movs	r3, #0
 80121a2:	4604      	mov	r4, r0
 80121a4:	4608      	mov	r0, r1
 80121a6:	602b      	str	r3, [r5, #0]
 80121a8:	f7ef fdc4 	bl	8001d34 <_sbrk>
 80121ac:	1c43      	adds	r3, r0, #1
 80121ae:	d102      	bne.n	80121b6 <_sbrk_r+0x1a>
 80121b0:	682b      	ldr	r3, [r5, #0]
 80121b2:	b103      	cbz	r3, 80121b6 <_sbrk_r+0x1a>
 80121b4:	6023      	str	r3, [r4, #0]
 80121b6:	bd38      	pop	{r3, r4, r5, pc}
 80121b8:	2000eb1c 	.word	0x2000eb1c

080121bc <_write_r>:
 80121bc:	b538      	push	{r3, r4, r5, lr}
 80121be:	4d07      	ldr	r5, [pc, #28]	; (80121dc <_write_r+0x20>)
 80121c0:	4604      	mov	r4, r0
 80121c2:	4608      	mov	r0, r1
 80121c4:	4611      	mov	r1, r2
 80121c6:	2200      	movs	r2, #0
 80121c8:	602a      	str	r2, [r5, #0]
 80121ca:	461a      	mov	r2, r3
 80121cc:	f7ef fd96 	bl	8001cfc <_write>
 80121d0:	1c43      	adds	r3, r0, #1
 80121d2:	d102      	bne.n	80121da <_write_r+0x1e>
 80121d4:	682b      	ldr	r3, [r5, #0]
 80121d6:	b103      	cbz	r3, 80121da <_write_r+0x1e>
 80121d8:	6023      	str	r3, [r4, #0]
 80121da:	bd38      	pop	{r3, r4, r5, pc}
 80121dc:	2000eb1c 	.word	0x2000eb1c

080121e0 <__errno>:
 80121e0:	4b01      	ldr	r3, [pc, #4]	; (80121e8 <__errno+0x8>)
 80121e2:	6818      	ldr	r0, [r3, #0]
 80121e4:	4770      	bx	lr
 80121e6:	bf00      	nop
 80121e8:	20006ed8 	.word	0x20006ed8

080121ec <__libc_init_array>:
 80121ec:	b570      	push	{r4, r5, r6, lr}
 80121ee:	4d0d      	ldr	r5, [pc, #52]	; (8012224 <__libc_init_array+0x38>)
 80121f0:	4c0d      	ldr	r4, [pc, #52]	; (8012228 <__libc_init_array+0x3c>)
 80121f2:	1b64      	subs	r4, r4, r5
 80121f4:	10a4      	asrs	r4, r4, #2
 80121f6:	2600      	movs	r6, #0
 80121f8:	42a6      	cmp	r6, r4
 80121fa:	d109      	bne.n	8012210 <__libc_init_array+0x24>
 80121fc:	4d0b      	ldr	r5, [pc, #44]	; (801222c <__libc_init_array+0x40>)
 80121fe:	4c0c      	ldr	r4, [pc, #48]	; (8012230 <__libc_init_array+0x44>)
 8012200:	f001 fed8 	bl	8013fb4 <_init>
 8012204:	1b64      	subs	r4, r4, r5
 8012206:	10a4      	asrs	r4, r4, #2
 8012208:	2600      	movs	r6, #0
 801220a:	42a6      	cmp	r6, r4
 801220c:	d105      	bne.n	801221a <__libc_init_array+0x2e>
 801220e:	bd70      	pop	{r4, r5, r6, pc}
 8012210:	f855 3b04 	ldr.w	r3, [r5], #4
 8012214:	4798      	blx	r3
 8012216:	3601      	adds	r6, #1
 8012218:	e7ee      	b.n	80121f8 <__libc_init_array+0xc>
 801221a:	f855 3b04 	ldr.w	r3, [r5], #4
 801221e:	4798      	blx	r3
 8012220:	3601      	adds	r6, #1
 8012222:	e7f2      	b.n	801220a <__libc_init_array+0x1e>
 8012224:	08017b70 	.word	0x08017b70
 8012228:	08017b70 	.word	0x08017b70
 801222c:	08017b70 	.word	0x08017b70
 8012230:	08017b74 	.word	0x08017b74

08012234 <__retarget_lock_init_recursive>:
 8012234:	4770      	bx	lr

08012236 <__retarget_lock_acquire_recursive>:
 8012236:	4770      	bx	lr

08012238 <__retarget_lock_release_recursive>:
 8012238:	4770      	bx	lr

0801223a <memcpy>:
 801223a:	440a      	add	r2, r1
 801223c:	4291      	cmp	r1, r2
 801223e:	f100 33ff 	add.w	r3, r0, #4294967295
 8012242:	d100      	bne.n	8012246 <memcpy+0xc>
 8012244:	4770      	bx	lr
 8012246:	b510      	push	{r4, lr}
 8012248:	f811 4b01 	ldrb.w	r4, [r1], #1
 801224c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012250:	4291      	cmp	r1, r2
 8012252:	d1f9      	bne.n	8012248 <memcpy+0xe>
 8012254:	bd10      	pop	{r4, pc}
	...

08012258 <__register_exitproc>:
 8012258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801225c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8012310 <__register_exitproc+0xb8>
 8012260:	4606      	mov	r6, r0
 8012262:	f8d8 0000 	ldr.w	r0, [r8]
 8012266:	461f      	mov	r7, r3
 8012268:	460d      	mov	r5, r1
 801226a:	4691      	mov	r9, r2
 801226c:	f7ff ffe3 	bl	8012236 <__retarget_lock_acquire_recursive>
 8012270:	4b23      	ldr	r3, [pc, #140]	; (8012300 <__register_exitproc+0xa8>)
 8012272:	681c      	ldr	r4, [r3, #0]
 8012274:	b934      	cbnz	r4, 8012284 <__register_exitproc+0x2c>
 8012276:	4c23      	ldr	r4, [pc, #140]	; (8012304 <__register_exitproc+0xac>)
 8012278:	601c      	str	r4, [r3, #0]
 801227a:	4b23      	ldr	r3, [pc, #140]	; (8012308 <__register_exitproc+0xb0>)
 801227c:	b113      	cbz	r3, 8012284 <__register_exitproc+0x2c>
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8012284:	6863      	ldr	r3, [r4, #4]
 8012286:	2b1f      	cmp	r3, #31
 8012288:	dd07      	ble.n	801229a <__register_exitproc+0x42>
 801228a:	f8d8 0000 	ldr.w	r0, [r8]
 801228e:	f7ff ffd3 	bl	8012238 <__retarget_lock_release_recursive>
 8012292:	f04f 30ff 	mov.w	r0, #4294967295
 8012296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801229a:	b32e      	cbz	r6, 80122e8 <__register_exitproc+0x90>
 801229c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80122a0:	b968      	cbnz	r0, 80122be <__register_exitproc+0x66>
 80122a2:	4b1a      	ldr	r3, [pc, #104]	; (801230c <__register_exitproc+0xb4>)
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d0f0      	beq.n	801228a <__register_exitproc+0x32>
 80122a8:	f44f 7084 	mov.w	r0, #264	; 0x108
 80122ac:	f7fe ff96 	bl	80111dc <malloc>
 80122b0:	2800      	cmp	r0, #0
 80122b2:	d0ea      	beq.n	801228a <__register_exitproc+0x32>
 80122b4:	2300      	movs	r3, #0
 80122b6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80122ba:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80122be:	6863      	ldr	r3, [r4, #4]
 80122c0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80122c4:	2201      	movs	r2, #1
 80122c6:	409a      	lsls	r2, r3
 80122c8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80122cc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80122d0:	4313      	orrs	r3, r2
 80122d2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80122d6:	2e02      	cmp	r6, #2
 80122d8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80122dc:	bf02      	ittt	eq
 80122de:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80122e2:	4313      	orreq	r3, r2
 80122e4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80122e8:	6863      	ldr	r3, [r4, #4]
 80122ea:	f8d8 0000 	ldr.w	r0, [r8]
 80122ee:	1c5a      	adds	r2, r3, #1
 80122f0:	3302      	adds	r3, #2
 80122f2:	6062      	str	r2, [r4, #4]
 80122f4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80122f8:	f7ff ff9e 	bl	8012238 <__retarget_lock_release_recursive>
 80122fc:	2000      	movs	r0, #0
 80122fe:	e7ca      	b.n	8012296 <__register_exitproc+0x3e>
 8012300:	2000ebb0 	.word	0x2000ebb0
 8012304:	2000eb24 	.word	0x2000eb24
 8012308:	00000000 	.word	0x00000000
 801230c:	080111dd 	.word	0x080111dd
 8012310:	20006edc 	.word	0x20006edc

08012314 <quorem>:
 8012314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012318:	6903      	ldr	r3, [r0, #16]
 801231a:	690c      	ldr	r4, [r1, #16]
 801231c:	42a3      	cmp	r3, r4
 801231e:	4607      	mov	r7, r0
 8012320:	db7e      	blt.n	8012420 <quorem+0x10c>
 8012322:	3c01      	subs	r4, #1
 8012324:	f101 0814 	add.w	r8, r1, #20
 8012328:	f100 0514 	add.w	r5, r0, #20
 801232c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012330:	9301      	str	r3, [sp, #4]
 8012332:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012336:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801233a:	3301      	adds	r3, #1
 801233c:	429a      	cmp	r2, r3
 801233e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012342:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012346:	fbb2 f6f3 	udiv	r6, r2, r3
 801234a:	d331      	bcc.n	80123b0 <quorem+0x9c>
 801234c:	f04f 0e00 	mov.w	lr, #0
 8012350:	4640      	mov	r0, r8
 8012352:	46ac      	mov	ip, r5
 8012354:	46f2      	mov	sl, lr
 8012356:	f850 2b04 	ldr.w	r2, [r0], #4
 801235a:	b293      	uxth	r3, r2
 801235c:	fb06 e303 	mla	r3, r6, r3, lr
 8012360:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012364:	0c1a      	lsrs	r2, r3, #16
 8012366:	b29b      	uxth	r3, r3
 8012368:	ebaa 0303 	sub.w	r3, sl, r3
 801236c:	f8dc a000 	ldr.w	sl, [ip]
 8012370:	fa13 f38a 	uxtah	r3, r3, sl
 8012374:	fb06 220e 	mla	r2, r6, lr, r2
 8012378:	9300      	str	r3, [sp, #0]
 801237a:	9b00      	ldr	r3, [sp, #0]
 801237c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012380:	b292      	uxth	r2, r2
 8012382:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012386:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801238a:	f8bd 3000 	ldrh.w	r3, [sp]
 801238e:	4581      	cmp	r9, r0
 8012390:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012394:	f84c 3b04 	str.w	r3, [ip], #4
 8012398:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801239c:	d2db      	bcs.n	8012356 <quorem+0x42>
 801239e:	f855 300b 	ldr.w	r3, [r5, fp]
 80123a2:	b92b      	cbnz	r3, 80123b0 <quorem+0x9c>
 80123a4:	9b01      	ldr	r3, [sp, #4]
 80123a6:	3b04      	subs	r3, #4
 80123a8:	429d      	cmp	r5, r3
 80123aa:	461a      	mov	r2, r3
 80123ac:	d32c      	bcc.n	8012408 <quorem+0xf4>
 80123ae:	613c      	str	r4, [r7, #16]
 80123b0:	4638      	mov	r0, r7
 80123b2:	f001 f8f3 	bl	801359c <__mcmp>
 80123b6:	2800      	cmp	r0, #0
 80123b8:	db22      	blt.n	8012400 <quorem+0xec>
 80123ba:	3601      	adds	r6, #1
 80123bc:	4629      	mov	r1, r5
 80123be:	2000      	movs	r0, #0
 80123c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80123c4:	f8d1 c000 	ldr.w	ip, [r1]
 80123c8:	b293      	uxth	r3, r2
 80123ca:	1ac3      	subs	r3, r0, r3
 80123cc:	0c12      	lsrs	r2, r2, #16
 80123ce:	fa13 f38c 	uxtah	r3, r3, ip
 80123d2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80123d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80123da:	b29b      	uxth	r3, r3
 80123dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80123e0:	45c1      	cmp	r9, r8
 80123e2:	f841 3b04 	str.w	r3, [r1], #4
 80123e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80123ea:	d2e9      	bcs.n	80123c0 <quorem+0xac>
 80123ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80123f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80123f4:	b922      	cbnz	r2, 8012400 <quorem+0xec>
 80123f6:	3b04      	subs	r3, #4
 80123f8:	429d      	cmp	r5, r3
 80123fa:	461a      	mov	r2, r3
 80123fc:	d30a      	bcc.n	8012414 <quorem+0x100>
 80123fe:	613c      	str	r4, [r7, #16]
 8012400:	4630      	mov	r0, r6
 8012402:	b003      	add	sp, #12
 8012404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012408:	6812      	ldr	r2, [r2, #0]
 801240a:	3b04      	subs	r3, #4
 801240c:	2a00      	cmp	r2, #0
 801240e:	d1ce      	bne.n	80123ae <quorem+0x9a>
 8012410:	3c01      	subs	r4, #1
 8012412:	e7c9      	b.n	80123a8 <quorem+0x94>
 8012414:	6812      	ldr	r2, [r2, #0]
 8012416:	3b04      	subs	r3, #4
 8012418:	2a00      	cmp	r2, #0
 801241a:	d1f0      	bne.n	80123fe <quorem+0xea>
 801241c:	3c01      	subs	r4, #1
 801241e:	e7eb      	b.n	80123f8 <quorem+0xe4>
 8012420:	2000      	movs	r0, #0
 8012422:	e7ee      	b.n	8012402 <quorem+0xee>
 8012424:	0000      	movs	r0, r0
	...

08012428 <_dtoa_r>:
 8012428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801242c:	ed2d 8b04 	vpush	{d8-d9}
 8012430:	69c5      	ldr	r5, [r0, #28]
 8012432:	b093      	sub	sp, #76	; 0x4c
 8012434:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012438:	ec57 6b10 	vmov	r6, r7, d0
 801243c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012440:	9107      	str	r1, [sp, #28]
 8012442:	4604      	mov	r4, r0
 8012444:	920a      	str	r2, [sp, #40]	; 0x28
 8012446:	930d      	str	r3, [sp, #52]	; 0x34
 8012448:	b975      	cbnz	r5, 8012468 <_dtoa_r+0x40>
 801244a:	2010      	movs	r0, #16
 801244c:	f7fe fec6 	bl	80111dc <malloc>
 8012450:	4602      	mov	r2, r0
 8012452:	61e0      	str	r0, [r4, #28]
 8012454:	b920      	cbnz	r0, 8012460 <_dtoa_r+0x38>
 8012456:	4bae      	ldr	r3, [pc, #696]	; (8012710 <_dtoa_r+0x2e8>)
 8012458:	21ef      	movs	r1, #239	; 0xef
 801245a:	48ae      	ldr	r0, [pc, #696]	; (8012714 <_dtoa_r+0x2ec>)
 801245c:	f7fe fe9a 	bl	8011194 <__assert_func>
 8012460:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012464:	6005      	str	r5, [r0, #0]
 8012466:	60c5      	str	r5, [r0, #12]
 8012468:	69e3      	ldr	r3, [r4, #28]
 801246a:	6819      	ldr	r1, [r3, #0]
 801246c:	b151      	cbz	r1, 8012484 <_dtoa_r+0x5c>
 801246e:	685a      	ldr	r2, [r3, #4]
 8012470:	604a      	str	r2, [r1, #4]
 8012472:	2301      	movs	r3, #1
 8012474:	4093      	lsls	r3, r2
 8012476:	608b      	str	r3, [r1, #8]
 8012478:	4620      	mov	r0, r4
 801247a:	f000 fe53 	bl	8013124 <_Bfree>
 801247e:	69e3      	ldr	r3, [r4, #28]
 8012480:	2200      	movs	r2, #0
 8012482:	601a      	str	r2, [r3, #0]
 8012484:	1e3b      	subs	r3, r7, #0
 8012486:	bfbb      	ittet	lt
 8012488:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801248c:	9303      	strlt	r3, [sp, #12]
 801248e:	2300      	movge	r3, #0
 8012490:	2201      	movlt	r2, #1
 8012492:	bfac      	ite	ge
 8012494:	f8c8 3000 	strge.w	r3, [r8]
 8012498:	f8c8 2000 	strlt.w	r2, [r8]
 801249c:	4b9e      	ldr	r3, [pc, #632]	; (8012718 <_dtoa_r+0x2f0>)
 801249e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80124a2:	ea33 0308 	bics.w	r3, r3, r8
 80124a6:	d11b      	bne.n	80124e0 <_dtoa_r+0xb8>
 80124a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80124aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80124ae:	6013      	str	r3, [r2, #0]
 80124b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80124b4:	4333      	orrs	r3, r6
 80124b6:	f000 8593 	beq.w	8012fe0 <_dtoa_r+0xbb8>
 80124ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80124bc:	b963      	cbnz	r3, 80124d8 <_dtoa_r+0xb0>
 80124be:	4b97      	ldr	r3, [pc, #604]	; (801271c <_dtoa_r+0x2f4>)
 80124c0:	e027      	b.n	8012512 <_dtoa_r+0xea>
 80124c2:	4b97      	ldr	r3, [pc, #604]	; (8012720 <_dtoa_r+0x2f8>)
 80124c4:	9300      	str	r3, [sp, #0]
 80124c6:	3308      	adds	r3, #8
 80124c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80124ca:	6013      	str	r3, [r2, #0]
 80124cc:	9800      	ldr	r0, [sp, #0]
 80124ce:	b013      	add	sp, #76	; 0x4c
 80124d0:	ecbd 8b04 	vpop	{d8-d9}
 80124d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124d8:	4b90      	ldr	r3, [pc, #576]	; (801271c <_dtoa_r+0x2f4>)
 80124da:	9300      	str	r3, [sp, #0]
 80124dc:	3303      	adds	r3, #3
 80124de:	e7f3      	b.n	80124c8 <_dtoa_r+0xa0>
 80124e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80124e4:	2200      	movs	r2, #0
 80124e6:	ec51 0b17 	vmov	r0, r1, d7
 80124ea:	eeb0 8a47 	vmov.f32	s16, s14
 80124ee:	eef0 8a67 	vmov.f32	s17, s15
 80124f2:	2300      	movs	r3, #0
 80124f4:	f7ee faf8 	bl	8000ae8 <__aeabi_dcmpeq>
 80124f8:	4681      	mov	r9, r0
 80124fa:	b160      	cbz	r0, 8012516 <_dtoa_r+0xee>
 80124fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80124fe:	2301      	movs	r3, #1
 8012500:	6013      	str	r3, [r2, #0]
 8012502:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012504:	2b00      	cmp	r3, #0
 8012506:	f000 8568 	beq.w	8012fda <_dtoa_r+0xbb2>
 801250a:	4b86      	ldr	r3, [pc, #536]	; (8012724 <_dtoa_r+0x2fc>)
 801250c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801250e:	6013      	str	r3, [r2, #0]
 8012510:	3b01      	subs	r3, #1
 8012512:	9300      	str	r3, [sp, #0]
 8012514:	e7da      	b.n	80124cc <_dtoa_r+0xa4>
 8012516:	aa10      	add	r2, sp, #64	; 0x40
 8012518:	a911      	add	r1, sp, #68	; 0x44
 801251a:	4620      	mov	r0, r4
 801251c:	eeb0 0a48 	vmov.f32	s0, s16
 8012520:	eef0 0a68 	vmov.f32	s1, s17
 8012524:	f001 f8e0 	bl	80136e8 <__d2b>
 8012528:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801252c:	4682      	mov	sl, r0
 801252e:	2d00      	cmp	r5, #0
 8012530:	d07f      	beq.n	8012632 <_dtoa_r+0x20a>
 8012532:	ee18 3a90 	vmov	r3, s17
 8012536:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801253a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801253e:	ec51 0b18 	vmov	r0, r1, d8
 8012542:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012546:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801254a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801254e:	4619      	mov	r1, r3
 8012550:	2200      	movs	r2, #0
 8012552:	4b75      	ldr	r3, [pc, #468]	; (8012728 <_dtoa_r+0x300>)
 8012554:	f7ed fea8 	bl	80002a8 <__aeabi_dsub>
 8012558:	a367      	add	r3, pc, #412	; (adr r3, 80126f8 <_dtoa_r+0x2d0>)
 801255a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801255e:	f7ee f85b 	bl	8000618 <__aeabi_dmul>
 8012562:	a367      	add	r3, pc, #412	; (adr r3, 8012700 <_dtoa_r+0x2d8>)
 8012564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012568:	f7ed fea0 	bl	80002ac <__adddf3>
 801256c:	4606      	mov	r6, r0
 801256e:	4628      	mov	r0, r5
 8012570:	460f      	mov	r7, r1
 8012572:	f7ed ffe7 	bl	8000544 <__aeabi_i2d>
 8012576:	a364      	add	r3, pc, #400	; (adr r3, 8012708 <_dtoa_r+0x2e0>)
 8012578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801257c:	f7ee f84c 	bl	8000618 <__aeabi_dmul>
 8012580:	4602      	mov	r2, r0
 8012582:	460b      	mov	r3, r1
 8012584:	4630      	mov	r0, r6
 8012586:	4639      	mov	r1, r7
 8012588:	f7ed fe90 	bl	80002ac <__adddf3>
 801258c:	4606      	mov	r6, r0
 801258e:	460f      	mov	r7, r1
 8012590:	f7ee faf2 	bl	8000b78 <__aeabi_d2iz>
 8012594:	2200      	movs	r2, #0
 8012596:	4683      	mov	fp, r0
 8012598:	2300      	movs	r3, #0
 801259a:	4630      	mov	r0, r6
 801259c:	4639      	mov	r1, r7
 801259e:	f7ee faad 	bl	8000afc <__aeabi_dcmplt>
 80125a2:	b148      	cbz	r0, 80125b8 <_dtoa_r+0x190>
 80125a4:	4658      	mov	r0, fp
 80125a6:	f7ed ffcd 	bl	8000544 <__aeabi_i2d>
 80125aa:	4632      	mov	r2, r6
 80125ac:	463b      	mov	r3, r7
 80125ae:	f7ee fa9b 	bl	8000ae8 <__aeabi_dcmpeq>
 80125b2:	b908      	cbnz	r0, 80125b8 <_dtoa_r+0x190>
 80125b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80125b8:	f1bb 0f16 	cmp.w	fp, #22
 80125bc:	d857      	bhi.n	801266e <_dtoa_r+0x246>
 80125be:	4b5b      	ldr	r3, [pc, #364]	; (801272c <_dtoa_r+0x304>)
 80125c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80125c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c8:	ec51 0b18 	vmov	r0, r1, d8
 80125cc:	f7ee fa96 	bl	8000afc <__aeabi_dcmplt>
 80125d0:	2800      	cmp	r0, #0
 80125d2:	d04e      	beq.n	8012672 <_dtoa_r+0x24a>
 80125d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80125d8:	2300      	movs	r3, #0
 80125da:	930c      	str	r3, [sp, #48]	; 0x30
 80125dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80125de:	1b5b      	subs	r3, r3, r5
 80125e0:	1e5a      	subs	r2, r3, #1
 80125e2:	bf45      	ittet	mi
 80125e4:	f1c3 0301 	rsbmi	r3, r3, #1
 80125e8:	9305      	strmi	r3, [sp, #20]
 80125ea:	2300      	movpl	r3, #0
 80125ec:	2300      	movmi	r3, #0
 80125ee:	9206      	str	r2, [sp, #24]
 80125f0:	bf54      	ite	pl
 80125f2:	9305      	strpl	r3, [sp, #20]
 80125f4:	9306      	strmi	r3, [sp, #24]
 80125f6:	f1bb 0f00 	cmp.w	fp, #0
 80125fa:	db3c      	blt.n	8012676 <_dtoa_r+0x24e>
 80125fc:	9b06      	ldr	r3, [sp, #24]
 80125fe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012602:	445b      	add	r3, fp
 8012604:	9306      	str	r3, [sp, #24]
 8012606:	2300      	movs	r3, #0
 8012608:	9308      	str	r3, [sp, #32]
 801260a:	9b07      	ldr	r3, [sp, #28]
 801260c:	2b09      	cmp	r3, #9
 801260e:	d868      	bhi.n	80126e2 <_dtoa_r+0x2ba>
 8012610:	2b05      	cmp	r3, #5
 8012612:	bfc4      	itt	gt
 8012614:	3b04      	subgt	r3, #4
 8012616:	9307      	strgt	r3, [sp, #28]
 8012618:	9b07      	ldr	r3, [sp, #28]
 801261a:	f1a3 0302 	sub.w	r3, r3, #2
 801261e:	bfcc      	ite	gt
 8012620:	2500      	movgt	r5, #0
 8012622:	2501      	movle	r5, #1
 8012624:	2b03      	cmp	r3, #3
 8012626:	f200 8085 	bhi.w	8012734 <_dtoa_r+0x30c>
 801262a:	e8df f003 	tbb	[pc, r3]
 801262e:	3b2e      	.short	0x3b2e
 8012630:	5839      	.short	0x5839
 8012632:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012636:	441d      	add	r5, r3
 8012638:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801263c:	2b20      	cmp	r3, #32
 801263e:	bfc1      	itttt	gt
 8012640:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012644:	fa08 f803 	lslgt.w	r8, r8, r3
 8012648:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801264c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8012650:	bfd6      	itet	le
 8012652:	f1c3 0320 	rsble	r3, r3, #32
 8012656:	ea48 0003 	orrgt.w	r0, r8, r3
 801265a:	fa06 f003 	lslle.w	r0, r6, r3
 801265e:	f7ed ff61 	bl	8000524 <__aeabi_ui2d>
 8012662:	2201      	movs	r2, #1
 8012664:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8012668:	3d01      	subs	r5, #1
 801266a:	920e      	str	r2, [sp, #56]	; 0x38
 801266c:	e76f      	b.n	801254e <_dtoa_r+0x126>
 801266e:	2301      	movs	r3, #1
 8012670:	e7b3      	b.n	80125da <_dtoa_r+0x1b2>
 8012672:	900c      	str	r0, [sp, #48]	; 0x30
 8012674:	e7b2      	b.n	80125dc <_dtoa_r+0x1b4>
 8012676:	9b05      	ldr	r3, [sp, #20]
 8012678:	eba3 030b 	sub.w	r3, r3, fp
 801267c:	9305      	str	r3, [sp, #20]
 801267e:	f1cb 0300 	rsb	r3, fp, #0
 8012682:	9308      	str	r3, [sp, #32]
 8012684:	2300      	movs	r3, #0
 8012686:	930b      	str	r3, [sp, #44]	; 0x2c
 8012688:	e7bf      	b.n	801260a <_dtoa_r+0x1e2>
 801268a:	2300      	movs	r3, #0
 801268c:	9309      	str	r3, [sp, #36]	; 0x24
 801268e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012690:	2b00      	cmp	r3, #0
 8012692:	dc52      	bgt.n	801273a <_dtoa_r+0x312>
 8012694:	2301      	movs	r3, #1
 8012696:	9301      	str	r3, [sp, #4]
 8012698:	9304      	str	r3, [sp, #16]
 801269a:	461a      	mov	r2, r3
 801269c:	920a      	str	r2, [sp, #40]	; 0x28
 801269e:	e00b      	b.n	80126b8 <_dtoa_r+0x290>
 80126a0:	2301      	movs	r3, #1
 80126a2:	e7f3      	b.n	801268c <_dtoa_r+0x264>
 80126a4:	2300      	movs	r3, #0
 80126a6:	9309      	str	r3, [sp, #36]	; 0x24
 80126a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126aa:	445b      	add	r3, fp
 80126ac:	9301      	str	r3, [sp, #4]
 80126ae:	3301      	adds	r3, #1
 80126b0:	2b01      	cmp	r3, #1
 80126b2:	9304      	str	r3, [sp, #16]
 80126b4:	bfb8      	it	lt
 80126b6:	2301      	movlt	r3, #1
 80126b8:	69e0      	ldr	r0, [r4, #28]
 80126ba:	2100      	movs	r1, #0
 80126bc:	2204      	movs	r2, #4
 80126be:	f102 0614 	add.w	r6, r2, #20
 80126c2:	429e      	cmp	r6, r3
 80126c4:	d93d      	bls.n	8012742 <_dtoa_r+0x31a>
 80126c6:	6041      	str	r1, [r0, #4]
 80126c8:	4620      	mov	r0, r4
 80126ca:	f000 fceb 	bl	80130a4 <_Balloc>
 80126ce:	9000      	str	r0, [sp, #0]
 80126d0:	2800      	cmp	r0, #0
 80126d2:	d139      	bne.n	8012748 <_dtoa_r+0x320>
 80126d4:	4b16      	ldr	r3, [pc, #88]	; (8012730 <_dtoa_r+0x308>)
 80126d6:	4602      	mov	r2, r0
 80126d8:	f240 11af 	movw	r1, #431	; 0x1af
 80126dc:	e6bd      	b.n	801245a <_dtoa_r+0x32>
 80126de:	2301      	movs	r3, #1
 80126e0:	e7e1      	b.n	80126a6 <_dtoa_r+0x27e>
 80126e2:	2501      	movs	r5, #1
 80126e4:	2300      	movs	r3, #0
 80126e6:	9307      	str	r3, [sp, #28]
 80126e8:	9509      	str	r5, [sp, #36]	; 0x24
 80126ea:	f04f 33ff 	mov.w	r3, #4294967295
 80126ee:	9301      	str	r3, [sp, #4]
 80126f0:	9304      	str	r3, [sp, #16]
 80126f2:	2200      	movs	r2, #0
 80126f4:	2312      	movs	r3, #18
 80126f6:	e7d1      	b.n	801269c <_dtoa_r+0x274>
 80126f8:	636f4361 	.word	0x636f4361
 80126fc:	3fd287a7 	.word	0x3fd287a7
 8012700:	8b60c8b3 	.word	0x8b60c8b3
 8012704:	3fc68a28 	.word	0x3fc68a28
 8012708:	509f79fb 	.word	0x509f79fb
 801270c:	3fd34413 	.word	0x3fd34413
 8012710:	08017875 	.word	0x08017875
 8012714:	0801788c 	.word	0x0801788c
 8012718:	7ff00000 	.word	0x7ff00000
 801271c:	08017871 	.word	0x08017871
 8012720:	08017868 	.word	0x08017868
 8012724:	08017845 	.word	0x08017845
 8012728:	3ff80000 	.word	0x3ff80000
 801272c:	08017978 	.word	0x08017978
 8012730:	080178e4 	.word	0x080178e4
 8012734:	2301      	movs	r3, #1
 8012736:	9309      	str	r3, [sp, #36]	; 0x24
 8012738:	e7d7      	b.n	80126ea <_dtoa_r+0x2c2>
 801273a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801273c:	9301      	str	r3, [sp, #4]
 801273e:	9304      	str	r3, [sp, #16]
 8012740:	e7ba      	b.n	80126b8 <_dtoa_r+0x290>
 8012742:	3101      	adds	r1, #1
 8012744:	0052      	lsls	r2, r2, #1
 8012746:	e7ba      	b.n	80126be <_dtoa_r+0x296>
 8012748:	69e3      	ldr	r3, [r4, #28]
 801274a:	9a00      	ldr	r2, [sp, #0]
 801274c:	601a      	str	r2, [r3, #0]
 801274e:	9b04      	ldr	r3, [sp, #16]
 8012750:	2b0e      	cmp	r3, #14
 8012752:	f200 80a8 	bhi.w	80128a6 <_dtoa_r+0x47e>
 8012756:	2d00      	cmp	r5, #0
 8012758:	f000 80a5 	beq.w	80128a6 <_dtoa_r+0x47e>
 801275c:	f1bb 0f00 	cmp.w	fp, #0
 8012760:	dd38      	ble.n	80127d4 <_dtoa_r+0x3ac>
 8012762:	4bc0      	ldr	r3, [pc, #768]	; (8012a64 <_dtoa_r+0x63c>)
 8012764:	f00b 020f 	and.w	r2, fp, #15
 8012768:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801276c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012770:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012774:	ea4f 182b 	mov.w	r8, fp, asr #4
 8012778:	d019      	beq.n	80127ae <_dtoa_r+0x386>
 801277a:	4bbb      	ldr	r3, [pc, #748]	; (8012a68 <_dtoa_r+0x640>)
 801277c:	ec51 0b18 	vmov	r0, r1, d8
 8012780:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012784:	f7ee f872 	bl	800086c <__aeabi_ddiv>
 8012788:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801278c:	f008 080f 	and.w	r8, r8, #15
 8012790:	2503      	movs	r5, #3
 8012792:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8012a68 <_dtoa_r+0x640>
 8012796:	f1b8 0f00 	cmp.w	r8, #0
 801279a:	d10a      	bne.n	80127b2 <_dtoa_r+0x38a>
 801279c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127a0:	4632      	mov	r2, r6
 80127a2:	463b      	mov	r3, r7
 80127a4:	f7ee f862 	bl	800086c <__aeabi_ddiv>
 80127a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80127ac:	e02b      	b.n	8012806 <_dtoa_r+0x3de>
 80127ae:	2502      	movs	r5, #2
 80127b0:	e7ef      	b.n	8012792 <_dtoa_r+0x36a>
 80127b2:	f018 0f01 	tst.w	r8, #1
 80127b6:	d008      	beq.n	80127ca <_dtoa_r+0x3a2>
 80127b8:	4630      	mov	r0, r6
 80127ba:	4639      	mov	r1, r7
 80127bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80127c0:	f7ed ff2a 	bl	8000618 <__aeabi_dmul>
 80127c4:	3501      	adds	r5, #1
 80127c6:	4606      	mov	r6, r0
 80127c8:	460f      	mov	r7, r1
 80127ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80127ce:	f109 0908 	add.w	r9, r9, #8
 80127d2:	e7e0      	b.n	8012796 <_dtoa_r+0x36e>
 80127d4:	f000 809f 	beq.w	8012916 <_dtoa_r+0x4ee>
 80127d8:	f1cb 0600 	rsb	r6, fp, #0
 80127dc:	4ba1      	ldr	r3, [pc, #644]	; (8012a64 <_dtoa_r+0x63c>)
 80127de:	4fa2      	ldr	r7, [pc, #648]	; (8012a68 <_dtoa_r+0x640>)
 80127e0:	f006 020f 	and.w	r2, r6, #15
 80127e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80127e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ec:	ec51 0b18 	vmov	r0, r1, d8
 80127f0:	f7ed ff12 	bl	8000618 <__aeabi_dmul>
 80127f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80127f8:	1136      	asrs	r6, r6, #4
 80127fa:	2300      	movs	r3, #0
 80127fc:	2502      	movs	r5, #2
 80127fe:	2e00      	cmp	r6, #0
 8012800:	d17e      	bne.n	8012900 <_dtoa_r+0x4d8>
 8012802:	2b00      	cmp	r3, #0
 8012804:	d1d0      	bne.n	80127a8 <_dtoa_r+0x380>
 8012806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012808:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801280c:	2b00      	cmp	r3, #0
 801280e:	f000 8084 	beq.w	801291a <_dtoa_r+0x4f2>
 8012812:	4b96      	ldr	r3, [pc, #600]	; (8012a6c <_dtoa_r+0x644>)
 8012814:	2200      	movs	r2, #0
 8012816:	4640      	mov	r0, r8
 8012818:	4649      	mov	r1, r9
 801281a:	f7ee f96f 	bl	8000afc <__aeabi_dcmplt>
 801281e:	2800      	cmp	r0, #0
 8012820:	d07b      	beq.n	801291a <_dtoa_r+0x4f2>
 8012822:	9b04      	ldr	r3, [sp, #16]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d078      	beq.n	801291a <_dtoa_r+0x4f2>
 8012828:	9b01      	ldr	r3, [sp, #4]
 801282a:	2b00      	cmp	r3, #0
 801282c:	dd39      	ble.n	80128a2 <_dtoa_r+0x47a>
 801282e:	4b90      	ldr	r3, [pc, #576]	; (8012a70 <_dtoa_r+0x648>)
 8012830:	2200      	movs	r2, #0
 8012832:	4640      	mov	r0, r8
 8012834:	4649      	mov	r1, r9
 8012836:	f7ed feef 	bl	8000618 <__aeabi_dmul>
 801283a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801283e:	9e01      	ldr	r6, [sp, #4]
 8012840:	f10b 37ff 	add.w	r7, fp, #4294967295
 8012844:	3501      	adds	r5, #1
 8012846:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801284a:	4628      	mov	r0, r5
 801284c:	f7ed fe7a 	bl	8000544 <__aeabi_i2d>
 8012850:	4642      	mov	r2, r8
 8012852:	464b      	mov	r3, r9
 8012854:	f7ed fee0 	bl	8000618 <__aeabi_dmul>
 8012858:	4b86      	ldr	r3, [pc, #536]	; (8012a74 <_dtoa_r+0x64c>)
 801285a:	2200      	movs	r2, #0
 801285c:	f7ed fd26 	bl	80002ac <__adddf3>
 8012860:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012868:	9303      	str	r3, [sp, #12]
 801286a:	2e00      	cmp	r6, #0
 801286c:	d158      	bne.n	8012920 <_dtoa_r+0x4f8>
 801286e:	4b82      	ldr	r3, [pc, #520]	; (8012a78 <_dtoa_r+0x650>)
 8012870:	2200      	movs	r2, #0
 8012872:	4640      	mov	r0, r8
 8012874:	4649      	mov	r1, r9
 8012876:	f7ed fd17 	bl	80002a8 <__aeabi_dsub>
 801287a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801287e:	4680      	mov	r8, r0
 8012880:	4689      	mov	r9, r1
 8012882:	f7ee f959 	bl	8000b38 <__aeabi_dcmpgt>
 8012886:	2800      	cmp	r0, #0
 8012888:	f040 8296 	bne.w	8012db8 <_dtoa_r+0x990>
 801288c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012890:	4640      	mov	r0, r8
 8012892:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012896:	4649      	mov	r1, r9
 8012898:	f7ee f930 	bl	8000afc <__aeabi_dcmplt>
 801289c:	2800      	cmp	r0, #0
 801289e:	f040 8289 	bne.w	8012db4 <_dtoa_r+0x98c>
 80128a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80128a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	f2c0 814e 	blt.w	8012b4a <_dtoa_r+0x722>
 80128ae:	f1bb 0f0e 	cmp.w	fp, #14
 80128b2:	f300 814a 	bgt.w	8012b4a <_dtoa_r+0x722>
 80128b6:	4b6b      	ldr	r3, [pc, #428]	; (8012a64 <_dtoa_r+0x63c>)
 80128b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80128bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80128c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	f280 80dc 	bge.w	8012a80 <_dtoa_r+0x658>
 80128c8:	9b04      	ldr	r3, [sp, #16]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	f300 80d8 	bgt.w	8012a80 <_dtoa_r+0x658>
 80128d0:	f040 826f 	bne.w	8012db2 <_dtoa_r+0x98a>
 80128d4:	4b68      	ldr	r3, [pc, #416]	; (8012a78 <_dtoa_r+0x650>)
 80128d6:	2200      	movs	r2, #0
 80128d8:	4640      	mov	r0, r8
 80128da:	4649      	mov	r1, r9
 80128dc:	f7ed fe9c 	bl	8000618 <__aeabi_dmul>
 80128e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80128e4:	f7ee f91e 	bl	8000b24 <__aeabi_dcmpge>
 80128e8:	9e04      	ldr	r6, [sp, #16]
 80128ea:	4637      	mov	r7, r6
 80128ec:	2800      	cmp	r0, #0
 80128ee:	f040 8245 	bne.w	8012d7c <_dtoa_r+0x954>
 80128f2:	9d00      	ldr	r5, [sp, #0]
 80128f4:	2331      	movs	r3, #49	; 0x31
 80128f6:	f805 3b01 	strb.w	r3, [r5], #1
 80128fa:	f10b 0b01 	add.w	fp, fp, #1
 80128fe:	e241      	b.n	8012d84 <_dtoa_r+0x95c>
 8012900:	07f2      	lsls	r2, r6, #31
 8012902:	d505      	bpl.n	8012910 <_dtoa_r+0x4e8>
 8012904:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012908:	f7ed fe86 	bl	8000618 <__aeabi_dmul>
 801290c:	3501      	adds	r5, #1
 801290e:	2301      	movs	r3, #1
 8012910:	1076      	asrs	r6, r6, #1
 8012912:	3708      	adds	r7, #8
 8012914:	e773      	b.n	80127fe <_dtoa_r+0x3d6>
 8012916:	2502      	movs	r5, #2
 8012918:	e775      	b.n	8012806 <_dtoa_r+0x3de>
 801291a:	9e04      	ldr	r6, [sp, #16]
 801291c:	465f      	mov	r7, fp
 801291e:	e792      	b.n	8012846 <_dtoa_r+0x41e>
 8012920:	9900      	ldr	r1, [sp, #0]
 8012922:	4b50      	ldr	r3, [pc, #320]	; (8012a64 <_dtoa_r+0x63c>)
 8012924:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012928:	4431      	add	r1, r6
 801292a:	9102      	str	r1, [sp, #8]
 801292c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801292e:	eeb0 9a47 	vmov.f32	s18, s14
 8012932:	eef0 9a67 	vmov.f32	s19, s15
 8012936:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801293a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801293e:	2900      	cmp	r1, #0
 8012940:	d044      	beq.n	80129cc <_dtoa_r+0x5a4>
 8012942:	494e      	ldr	r1, [pc, #312]	; (8012a7c <_dtoa_r+0x654>)
 8012944:	2000      	movs	r0, #0
 8012946:	f7ed ff91 	bl	800086c <__aeabi_ddiv>
 801294a:	ec53 2b19 	vmov	r2, r3, d9
 801294e:	f7ed fcab 	bl	80002a8 <__aeabi_dsub>
 8012952:	9d00      	ldr	r5, [sp, #0]
 8012954:	ec41 0b19 	vmov	d9, r0, r1
 8012958:	4649      	mov	r1, r9
 801295a:	4640      	mov	r0, r8
 801295c:	f7ee f90c 	bl	8000b78 <__aeabi_d2iz>
 8012960:	4606      	mov	r6, r0
 8012962:	f7ed fdef 	bl	8000544 <__aeabi_i2d>
 8012966:	4602      	mov	r2, r0
 8012968:	460b      	mov	r3, r1
 801296a:	4640      	mov	r0, r8
 801296c:	4649      	mov	r1, r9
 801296e:	f7ed fc9b 	bl	80002a8 <__aeabi_dsub>
 8012972:	3630      	adds	r6, #48	; 0x30
 8012974:	f805 6b01 	strb.w	r6, [r5], #1
 8012978:	ec53 2b19 	vmov	r2, r3, d9
 801297c:	4680      	mov	r8, r0
 801297e:	4689      	mov	r9, r1
 8012980:	f7ee f8bc 	bl	8000afc <__aeabi_dcmplt>
 8012984:	2800      	cmp	r0, #0
 8012986:	d164      	bne.n	8012a52 <_dtoa_r+0x62a>
 8012988:	4642      	mov	r2, r8
 801298a:	464b      	mov	r3, r9
 801298c:	4937      	ldr	r1, [pc, #220]	; (8012a6c <_dtoa_r+0x644>)
 801298e:	2000      	movs	r0, #0
 8012990:	f7ed fc8a 	bl	80002a8 <__aeabi_dsub>
 8012994:	ec53 2b19 	vmov	r2, r3, d9
 8012998:	f7ee f8b0 	bl	8000afc <__aeabi_dcmplt>
 801299c:	2800      	cmp	r0, #0
 801299e:	f040 80b6 	bne.w	8012b0e <_dtoa_r+0x6e6>
 80129a2:	9b02      	ldr	r3, [sp, #8]
 80129a4:	429d      	cmp	r5, r3
 80129a6:	f43f af7c 	beq.w	80128a2 <_dtoa_r+0x47a>
 80129aa:	4b31      	ldr	r3, [pc, #196]	; (8012a70 <_dtoa_r+0x648>)
 80129ac:	ec51 0b19 	vmov	r0, r1, d9
 80129b0:	2200      	movs	r2, #0
 80129b2:	f7ed fe31 	bl	8000618 <__aeabi_dmul>
 80129b6:	4b2e      	ldr	r3, [pc, #184]	; (8012a70 <_dtoa_r+0x648>)
 80129b8:	ec41 0b19 	vmov	d9, r0, r1
 80129bc:	2200      	movs	r2, #0
 80129be:	4640      	mov	r0, r8
 80129c0:	4649      	mov	r1, r9
 80129c2:	f7ed fe29 	bl	8000618 <__aeabi_dmul>
 80129c6:	4680      	mov	r8, r0
 80129c8:	4689      	mov	r9, r1
 80129ca:	e7c5      	b.n	8012958 <_dtoa_r+0x530>
 80129cc:	ec51 0b17 	vmov	r0, r1, d7
 80129d0:	f7ed fe22 	bl	8000618 <__aeabi_dmul>
 80129d4:	9b02      	ldr	r3, [sp, #8]
 80129d6:	9d00      	ldr	r5, [sp, #0]
 80129d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80129da:	ec41 0b19 	vmov	d9, r0, r1
 80129de:	4649      	mov	r1, r9
 80129e0:	4640      	mov	r0, r8
 80129e2:	f7ee f8c9 	bl	8000b78 <__aeabi_d2iz>
 80129e6:	4606      	mov	r6, r0
 80129e8:	f7ed fdac 	bl	8000544 <__aeabi_i2d>
 80129ec:	3630      	adds	r6, #48	; 0x30
 80129ee:	4602      	mov	r2, r0
 80129f0:	460b      	mov	r3, r1
 80129f2:	4640      	mov	r0, r8
 80129f4:	4649      	mov	r1, r9
 80129f6:	f7ed fc57 	bl	80002a8 <__aeabi_dsub>
 80129fa:	f805 6b01 	strb.w	r6, [r5], #1
 80129fe:	9b02      	ldr	r3, [sp, #8]
 8012a00:	429d      	cmp	r5, r3
 8012a02:	4680      	mov	r8, r0
 8012a04:	4689      	mov	r9, r1
 8012a06:	f04f 0200 	mov.w	r2, #0
 8012a0a:	d124      	bne.n	8012a56 <_dtoa_r+0x62e>
 8012a0c:	4b1b      	ldr	r3, [pc, #108]	; (8012a7c <_dtoa_r+0x654>)
 8012a0e:	ec51 0b19 	vmov	r0, r1, d9
 8012a12:	f7ed fc4b 	bl	80002ac <__adddf3>
 8012a16:	4602      	mov	r2, r0
 8012a18:	460b      	mov	r3, r1
 8012a1a:	4640      	mov	r0, r8
 8012a1c:	4649      	mov	r1, r9
 8012a1e:	f7ee f88b 	bl	8000b38 <__aeabi_dcmpgt>
 8012a22:	2800      	cmp	r0, #0
 8012a24:	d173      	bne.n	8012b0e <_dtoa_r+0x6e6>
 8012a26:	ec53 2b19 	vmov	r2, r3, d9
 8012a2a:	4914      	ldr	r1, [pc, #80]	; (8012a7c <_dtoa_r+0x654>)
 8012a2c:	2000      	movs	r0, #0
 8012a2e:	f7ed fc3b 	bl	80002a8 <__aeabi_dsub>
 8012a32:	4602      	mov	r2, r0
 8012a34:	460b      	mov	r3, r1
 8012a36:	4640      	mov	r0, r8
 8012a38:	4649      	mov	r1, r9
 8012a3a:	f7ee f85f 	bl	8000afc <__aeabi_dcmplt>
 8012a3e:	2800      	cmp	r0, #0
 8012a40:	f43f af2f 	beq.w	80128a2 <_dtoa_r+0x47a>
 8012a44:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012a46:	1e6b      	subs	r3, r5, #1
 8012a48:	930f      	str	r3, [sp, #60]	; 0x3c
 8012a4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012a4e:	2b30      	cmp	r3, #48	; 0x30
 8012a50:	d0f8      	beq.n	8012a44 <_dtoa_r+0x61c>
 8012a52:	46bb      	mov	fp, r7
 8012a54:	e04a      	b.n	8012aec <_dtoa_r+0x6c4>
 8012a56:	4b06      	ldr	r3, [pc, #24]	; (8012a70 <_dtoa_r+0x648>)
 8012a58:	f7ed fdde 	bl	8000618 <__aeabi_dmul>
 8012a5c:	4680      	mov	r8, r0
 8012a5e:	4689      	mov	r9, r1
 8012a60:	e7bd      	b.n	80129de <_dtoa_r+0x5b6>
 8012a62:	bf00      	nop
 8012a64:	08017978 	.word	0x08017978
 8012a68:	08017950 	.word	0x08017950
 8012a6c:	3ff00000 	.word	0x3ff00000
 8012a70:	40240000 	.word	0x40240000
 8012a74:	401c0000 	.word	0x401c0000
 8012a78:	40140000 	.word	0x40140000
 8012a7c:	3fe00000 	.word	0x3fe00000
 8012a80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012a84:	9d00      	ldr	r5, [sp, #0]
 8012a86:	4642      	mov	r2, r8
 8012a88:	464b      	mov	r3, r9
 8012a8a:	4630      	mov	r0, r6
 8012a8c:	4639      	mov	r1, r7
 8012a8e:	f7ed feed 	bl	800086c <__aeabi_ddiv>
 8012a92:	f7ee f871 	bl	8000b78 <__aeabi_d2iz>
 8012a96:	9001      	str	r0, [sp, #4]
 8012a98:	f7ed fd54 	bl	8000544 <__aeabi_i2d>
 8012a9c:	4642      	mov	r2, r8
 8012a9e:	464b      	mov	r3, r9
 8012aa0:	f7ed fdba 	bl	8000618 <__aeabi_dmul>
 8012aa4:	4602      	mov	r2, r0
 8012aa6:	460b      	mov	r3, r1
 8012aa8:	4630      	mov	r0, r6
 8012aaa:	4639      	mov	r1, r7
 8012aac:	f7ed fbfc 	bl	80002a8 <__aeabi_dsub>
 8012ab0:	9e01      	ldr	r6, [sp, #4]
 8012ab2:	9f04      	ldr	r7, [sp, #16]
 8012ab4:	3630      	adds	r6, #48	; 0x30
 8012ab6:	f805 6b01 	strb.w	r6, [r5], #1
 8012aba:	9e00      	ldr	r6, [sp, #0]
 8012abc:	1bae      	subs	r6, r5, r6
 8012abe:	42b7      	cmp	r7, r6
 8012ac0:	4602      	mov	r2, r0
 8012ac2:	460b      	mov	r3, r1
 8012ac4:	d134      	bne.n	8012b30 <_dtoa_r+0x708>
 8012ac6:	f7ed fbf1 	bl	80002ac <__adddf3>
 8012aca:	4642      	mov	r2, r8
 8012acc:	464b      	mov	r3, r9
 8012ace:	4606      	mov	r6, r0
 8012ad0:	460f      	mov	r7, r1
 8012ad2:	f7ee f831 	bl	8000b38 <__aeabi_dcmpgt>
 8012ad6:	b9c8      	cbnz	r0, 8012b0c <_dtoa_r+0x6e4>
 8012ad8:	4642      	mov	r2, r8
 8012ada:	464b      	mov	r3, r9
 8012adc:	4630      	mov	r0, r6
 8012ade:	4639      	mov	r1, r7
 8012ae0:	f7ee f802 	bl	8000ae8 <__aeabi_dcmpeq>
 8012ae4:	b110      	cbz	r0, 8012aec <_dtoa_r+0x6c4>
 8012ae6:	9b01      	ldr	r3, [sp, #4]
 8012ae8:	07db      	lsls	r3, r3, #31
 8012aea:	d40f      	bmi.n	8012b0c <_dtoa_r+0x6e4>
 8012aec:	4651      	mov	r1, sl
 8012aee:	4620      	mov	r0, r4
 8012af0:	f000 fb18 	bl	8013124 <_Bfree>
 8012af4:	2300      	movs	r3, #0
 8012af6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012af8:	702b      	strb	r3, [r5, #0]
 8012afa:	f10b 0301 	add.w	r3, fp, #1
 8012afe:	6013      	str	r3, [r2, #0]
 8012b00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	f43f ace2 	beq.w	80124cc <_dtoa_r+0xa4>
 8012b08:	601d      	str	r5, [r3, #0]
 8012b0a:	e4df      	b.n	80124cc <_dtoa_r+0xa4>
 8012b0c:	465f      	mov	r7, fp
 8012b0e:	462b      	mov	r3, r5
 8012b10:	461d      	mov	r5, r3
 8012b12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012b16:	2a39      	cmp	r2, #57	; 0x39
 8012b18:	d106      	bne.n	8012b28 <_dtoa_r+0x700>
 8012b1a:	9a00      	ldr	r2, [sp, #0]
 8012b1c:	429a      	cmp	r2, r3
 8012b1e:	d1f7      	bne.n	8012b10 <_dtoa_r+0x6e8>
 8012b20:	9900      	ldr	r1, [sp, #0]
 8012b22:	2230      	movs	r2, #48	; 0x30
 8012b24:	3701      	adds	r7, #1
 8012b26:	700a      	strb	r2, [r1, #0]
 8012b28:	781a      	ldrb	r2, [r3, #0]
 8012b2a:	3201      	adds	r2, #1
 8012b2c:	701a      	strb	r2, [r3, #0]
 8012b2e:	e790      	b.n	8012a52 <_dtoa_r+0x62a>
 8012b30:	4ba3      	ldr	r3, [pc, #652]	; (8012dc0 <_dtoa_r+0x998>)
 8012b32:	2200      	movs	r2, #0
 8012b34:	f7ed fd70 	bl	8000618 <__aeabi_dmul>
 8012b38:	2200      	movs	r2, #0
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	4606      	mov	r6, r0
 8012b3e:	460f      	mov	r7, r1
 8012b40:	f7ed ffd2 	bl	8000ae8 <__aeabi_dcmpeq>
 8012b44:	2800      	cmp	r0, #0
 8012b46:	d09e      	beq.n	8012a86 <_dtoa_r+0x65e>
 8012b48:	e7d0      	b.n	8012aec <_dtoa_r+0x6c4>
 8012b4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b4c:	2a00      	cmp	r2, #0
 8012b4e:	f000 80ca 	beq.w	8012ce6 <_dtoa_r+0x8be>
 8012b52:	9a07      	ldr	r2, [sp, #28]
 8012b54:	2a01      	cmp	r2, #1
 8012b56:	f300 80ad 	bgt.w	8012cb4 <_dtoa_r+0x88c>
 8012b5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012b5c:	2a00      	cmp	r2, #0
 8012b5e:	f000 80a5 	beq.w	8012cac <_dtoa_r+0x884>
 8012b62:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012b66:	9e08      	ldr	r6, [sp, #32]
 8012b68:	9d05      	ldr	r5, [sp, #20]
 8012b6a:	9a05      	ldr	r2, [sp, #20]
 8012b6c:	441a      	add	r2, r3
 8012b6e:	9205      	str	r2, [sp, #20]
 8012b70:	9a06      	ldr	r2, [sp, #24]
 8012b72:	2101      	movs	r1, #1
 8012b74:	441a      	add	r2, r3
 8012b76:	4620      	mov	r0, r4
 8012b78:	9206      	str	r2, [sp, #24]
 8012b7a:	f000 fb89 	bl	8013290 <__i2b>
 8012b7e:	4607      	mov	r7, r0
 8012b80:	b165      	cbz	r5, 8012b9c <_dtoa_r+0x774>
 8012b82:	9b06      	ldr	r3, [sp, #24]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	dd09      	ble.n	8012b9c <_dtoa_r+0x774>
 8012b88:	42ab      	cmp	r3, r5
 8012b8a:	9a05      	ldr	r2, [sp, #20]
 8012b8c:	bfa8      	it	ge
 8012b8e:	462b      	movge	r3, r5
 8012b90:	1ad2      	subs	r2, r2, r3
 8012b92:	9205      	str	r2, [sp, #20]
 8012b94:	9a06      	ldr	r2, [sp, #24]
 8012b96:	1aed      	subs	r5, r5, r3
 8012b98:	1ad3      	subs	r3, r2, r3
 8012b9a:	9306      	str	r3, [sp, #24]
 8012b9c:	9b08      	ldr	r3, [sp, #32]
 8012b9e:	b1f3      	cbz	r3, 8012bde <_dtoa_r+0x7b6>
 8012ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	f000 80a3 	beq.w	8012cee <_dtoa_r+0x8c6>
 8012ba8:	2e00      	cmp	r6, #0
 8012baa:	dd10      	ble.n	8012bce <_dtoa_r+0x7a6>
 8012bac:	4639      	mov	r1, r7
 8012bae:	4632      	mov	r2, r6
 8012bb0:	4620      	mov	r0, r4
 8012bb2:	f000 fc2d 	bl	8013410 <__pow5mult>
 8012bb6:	4652      	mov	r2, sl
 8012bb8:	4601      	mov	r1, r0
 8012bba:	4607      	mov	r7, r0
 8012bbc:	4620      	mov	r0, r4
 8012bbe:	f000 fb7d 	bl	80132bc <__multiply>
 8012bc2:	4651      	mov	r1, sl
 8012bc4:	4680      	mov	r8, r0
 8012bc6:	4620      	mov	r0, r4
 8012bc8:	f000 faac 	bl	8013124 <_Bfree>
 8012bcc:	46c2      	mov	sl, r8
 8012bce:	9b08      	ldr	r3, [sp, #32]
 8012bd0:	1b9a      	subs	r2, r3, r6
 8012bd2:	d004      	beq.n	8012bde <_dtoa_r+0x7b6>
 8012bd4:	4651      	mov	r1, sl
 8012bd6:	4620      	mov	r0, r4
 8012bd8:	f000 fc1a 	bl	8013410 <__pow5mult>
 8012bdc:	4682      	mov	sl, r0
 8012bde:	2101      	movs	r1, #1
 8012be0:	4620      	mov	r0, r4
 8012be2:	f000 fb55 	bl	8013290 <__i2b>
 8012be6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	4606      	mov	r6, r0
 8012bec:	f340 8081 	ble.w	8012cf2 <_dtoa_r+0x8ca>
 8012bf0:	461a      	mov	r2, r3
 8012bf2:	4601      	mov	r1, r0
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	f000 fc0b 	bl	8013410 <__pow5mult>
 8012bfa:	9b07      	ldr	r3, [sp, #28]
 8012bfc:	2b01      	cmp	r3, #1
 8012bfe:	4606      	mov	r6, r0
 8012c00:	dd7a      	ble.n	8012cf8 <_dtoa_r+0x8d0>
 8012c02:	f04f 0800 	mov.w	r8, #0
 8012c06:	6933      	ldr	r3, [r6, #16]
 8012c08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012c0c:	6918      	ldr	r0, [r3, #16]
 8012c0e:	f000 faf1 	bl	80131f4 <__hi0bits>
 8012c12:	f1c0 0020 	rsb	r0, r0, #32
 8012c16:	9b06      	ldr	r3, [sp, #24]
 8012c18:	4418      	add	r0, r3
 8012c1a:	f010 001f 	ands.w	r0, r0, #31
 8012c1e:	f000 8094 	beq.w	8012d4a <_dtoa_r+0x922>
 8012c22:	f1c0 0320 	rsb	r3, r0, #32
 8012c26:	2b04      	cmp	r3, #4
 8012c28:	f340 8085 	ble.w	8012d36 <_dtoa_r+0x90e>
 8012c2c:	9b05      	ldr	r3, [sp, #20]
 8012c2e:	f1c0 001c 	rsb	r0, r0, #28
 8012c32:	4403      	add	r3, r0
 8012c34:	9305      	str	r3, [sp, #20]
 8012c36:	9b06      	ldr	r3, [sp, #24]
 8012c38:	4403      	add	r3, r0
 8012c3a:	4405      	add	r5, r0
 8012c3c:	9306      	str	r3, [sp, #24]
 8012c3e:	9b05      	ldr	r3, [sp, #20]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	dd05      	ble.n	8012c50 <_dtoa_r+0x828>
 8012c44:	4651      	mov	r1, sl
 8012c46:	461a      	mov	r2, r3
 8012c48:	4620      	mov	r0, r4
 8012c4a:	f000 fc3b 	bl	80134c4 <__lshift>
 8012c4e:	4682      	mov	sl, r0
 8012c50:	9b06      	ldr	r3, [sp, #24]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	dd05      	ble.n	8012c62 <_dtoa_r+0x83a>
 8012c56:	4631      	mov	r1, r6
 8012c58:	461a      	mov	r2, r3
 8012c5a:	4620      	mov	r0, r4
 8012c5c:	f000 fc32 	bl	80134c4 <__lshift>
 8012c60:	4606      	mov	r6, r0
 8012c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d072      	beq.n	8012d4e <_dtoa_r+0x926>
 8012c68:	4631      	mov	r1, r6
 8012c6a:	4650      	mov	r0, sl
 8012c6c:	f000 fc96 	bl	801359c <__mcmp>
 8012c70:	2800      	cmp	r0, #0
 8012c72:	da6c      	bge.n	8012d4e <_dtoa_r+0x926>
 8012c74:	2300      	movs	r3, #0
 8012c76:	4651      	mov	r1, sl
 8012c78:	220a      	movs	r2, #10
 8012c7a:	4620      	mov	r0, r4
 8012c7c:	f000 fa74 	bl	8013168 <__multadd>
 8012c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012c86:	4682      	mov	sl, r0
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	f000 81b0 	beq.w	8012fee <_dtoa_r+0xbc6>
 8012c8e:	2300      	movs	r3, #0
 8012c90:	4639      	mov	r1, r7
 8012c92:	220a      	movs	r2, #10
 8012c94:	4620      	mov	r0, r4
 8012c96:	f000 fa67 	bl	8013168 <__multadd>
 8012c9a:	9b01      	ldr	r3, [sp, #4]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	4607      	mov	r7, r0
 8012ca0:	f300 8096 	bgt.w	8012dd0 <_dtoa_r+0x9a8>
 8012ca4:	9b07      	ldr	r3, [sp, #28]
 8012ca6:	2b02      	cmp	r3, #2
 8012ca8:	dc59      	bgt.n	8012d5e <_dtoa_r+0x936>
 8012caa:	e091      	b.n	8012dd0 <_dtoa_r+0x9a8>
 8012cac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012cae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012cb2:	e758      	b.n	8012b66 <_dtoa_r+0x73e>
 8012cb4:	9b04      	ldr	r3, [sp, #16]
 8012cb6:	1e5e      	subs	r6, r3, #1
 8012cb8:	9b08      	ldr	r3, [sp, #32]
 8012cba:	42b3      	cmp	r3, r6
 8012cbc:	bfbf      	itttt	lt
 8012cbe:	9b08      	ldrlt	r3, [sp, #32]
 8012cc0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8012cc2:	9608      	strlt	r6, [sp, #32]
 8012cc4:	1af3      	sublt	r3, r6, r3
 8012cc6:	bfb4      	ite	lt
 8012cc8:	18d2      	addlt	r2, r2, r3
 8012cca:	1b9e      	subge	r6, r3, r6
 8012ccc:	9b04      	ldr	r3, [sp, #16]
 8012cce:	bfbc      	itt	lt
 8012cd0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8012cd2:	2600      	movlt	r6, #0
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	bfb7      	itett	lt
 8012cd8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8012cdc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8012ce0:	1a9d      	sublt	r5, r3, r2
 8012ce2:	2300      	movlt	r3, #0
 8012ce4:	e741      	b.n	8012b6a <_dtoa_r+0x742>
 8012ce6:	9e08      	ldr	r6, [sp, #32]
 8012ce8:	9d05      	ldr	r5, [sp, #20]
 8012cea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012cec:	e748      	b.n	8012b80 <_dtoa_r+0x758>
 8012cee:	9a08      	ldr	r2, [sp, #32]
 8012cf0:	e770      	b.n	8012bd4 <_dtoa_r+0x7ac>
 8012cf2:	9b07      	ldr	r3, [sp, #28]
 8012cf4:	2b01      	cmp	r3, #1
 8012cf6:	dc19      	bgt.n	8012d2c <_dtoa_r+0x904>
 8012cf8:	9b02      	ldr	r3, [sp, #8]
 8012cfa:	b9bb      	cbnz	r3, 8012d2c <_dtoa_r+0x904>
 8012cfc:	9b03      	ldr	r3, [sp, #12]
 8012cfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012d02:	b99b      	cbnz	r3, 8012d2c <_dtoa_r+0x904>
 8012d04:	9b03      	ldr	r3, [sp, #12]
 8012d06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012d0a:	0d1b      	lsrs	r3, r3, #20
 8012d0c:	051b      	lsls	r3, r3, #20
 8012d0e:	b183      	cbz	r3, 8012d32 <_dtoa_r+0x90a>
 8012d10:	9b05      	ldr	r3, [sp, #20]
 8012d12:	3301      	adds	r3, #1
 8012d14:	9305      	str	r3, [sp, #20]
 8012d16:	9b06      	ldr	r3, [sp, #24]
 8012d18:	3301      	adds	r3, #1
 8012d1a:	9306      	str	r3, [sp, #24]
 8012d1c:	f04f 0801 	mov.w	r8, #1
 8012d20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	f47f af6f 	bne.w	8012c06 <_dtoa_r+0x7de>
 8012d28:	2001      	movs	r0, #1
 8012d2a:	e774      	b.n	8012c16 <_dtoa_r+0x7ee>
 8012d2c:	f04f 0800 	mov.w	r8, #0
 8012d30:	e7f6      	b.n	8012d20 <_dtoa_r+0x8f8>
 8012d32:	4698      	mov	r8, r3
 8012d34:	e7f4      	b.n	8012d20 <_dtoa_r+0x8f8>
 8012d36:	d082      	beq.n	8012c3e <_dtoa_r+0x816>
 8012d38:	9a05      	ldr	r2, [sp, #20]
 8012d3a:	331c      	adds	r3, #28
 8012d3c:	441a      	add	r2, r3
 8012d3e:	9205      	str	r2, [sp, #20]
 8012d40:	9a06      	ldr	r2, [sp, #24]
 8012d42:	441a      	add	r2, r3
 8012d44:	441d      	add	r5, r3
 8012d46:	9206      	str	r2, [sp, #24]
 8012d48:	e779      	b.n	8012c3e <_dtoa_r+0x816>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	e7f4      	b.n	8012d38 <_dtoa_r+0x910>
 8012d4e:	9b04      	ldr	r3, [sp, #16]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	dc37      	bgt.n	8012dc4 <_dtoa_r+0x99c>
 8012d54:	9b07      	ldr	r3, [sp, #28]
 8012d56:	2b02      	cmp	r3, #2
 8012d58:	dd34      	ble.n	8012dc4 <_dtoa_r+0x99c>
 8012d5a:	9b04      	ldr	r3, [sp, #16]
 8012d5c:	9301      	str	r3, [sp, #4]
 8012d5e:	9b01      	ldr	r3, [sp, #4]
 8012d60:	b963      	cbnz	r3, 8012d7c <_dtoa_r+0x954>
 8012d62:	4631      	mov	r1, r6
 8012d64:	2205      	movs	r2, #5
 8012d66:	4620      	mov	r0, r4
 8012d68:	f000 f9fe 	bl	8013168 <__multadd>
 8012d6c:	4601      	mov	r1, r0
 8012d6e:	4606      	mov	r6, r0
 8012d70:	4650      	mov	r0, sl
 8012d72:	f000 fc13 	bl	801359c <__mcmp>
 8012d76:	2800      	cmp	r0, #0
 8012d78:	f73f adbb 	bgt.w	80128f2 <_dtoa_r+0x4ca>
 8012d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d7e:	9d00      	ldr	r5, [sp, #0]
 8012d80:	ea6f 0b03 	mvn.w	fp, r3
 8012d84:	f04f 0800 	mov.w	r8, #0
 8012d88:	4631      	mov	r1, r6
 8012d8a:	4620      	mov	r0, r4
 8012d8c:	f000 f9ca 	bl	8013124 <_Bfree>
 8012d90:	2f00      	cmp	r7, #0
 8012d92:	f43f aeab 	beq.w	8012aec <_dtoa_r+0x6c4>
 8012d96:	f1b8 0f00 	cmp.w	r8, #0
 8012d9a:	d005      	beq.n	8012da8 <_dtoa_r+0x980>
 8012d9c:	45b8      	cmp	r8, r7
 8012d9e:	d003      	beq.n	8012da8 <_dtoa_r+0x980>
 8012da0:	4641      	mov	r1, r8
 8012da2:	4620      	mov	r0, r4
 8012da4:	f000 f9be 	bl	8013124 <_Bfree>
 8012da8:	4639      	mov	r1, r7
 8012daa:	4620      	mov	r0, r4
 8012dac:	f000 f9ba 	bl	8013124 <_Bfree>
 8012db0:	e69c      	b.n	8012aec <_dtoa_r+0x6c4>
 8012db2:	2600      	movs	r6, #0
 8012db4:	4637      	mov	r7, r6
 8012db6:	e7e1      	b.n	8012d7c <_dtoa_r+0x954>
 8012db8:	46bb      	mov	fp, r7
 8012dba:	4637      	mov	r7, r6
 8012dbc:	e599      	b.n	80128f2 <_dtoa_r+0x4ca>
 8012dbe:	bf00      	nop
 8012dc0:	40240000 	.word	0x40240000
 8012dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	f000 80c8 	beq.w	8012f5c <_dtoa_r+0xb34>
 8012dcc:	9b04      	ldr	r3, [sp, #16]
 8012dce:	9301      	str	r3, [sp, #4]
 8012dd0:	2d00      	cmp	r5, #0
 8012dd2:	dd05      	ble.n	8012de0 <_dtoa_r+0x9b8>
 8012dd4:	4639      	mov	r1, r7
 8012dd6:	462a      	mov	r2, r5
 8012dd8:	4620      	mov	r0, r4
 8012dda:	f000 fb73 	bl	80134c4 <__lshift>
 8012dde:	4607      	mov	r7, r0
 8012de0:	f1b8 0f00 	cmp.w	r8, #0
 8012de4:	d05b      	beq.n	8012e9e <_dtoa_r+0xa76>
 8012de6:	6879      	ldr	r1, [r7, #4]
 8012de8:	4620      	mov	r0, r4
 8012dea:	f000 f95b 	bl	80130a4 <_Balloc>
 8012dee:	4605      	mov	r5, r0
 8012df0:	b928      	cbnz	r0, 8012dfe <_dtoa_r+0x9d6>
 8012df2:	4b83      	ldr	r3, [pc, #524]	; (8013000 <_dtoa_r+0xbd8>)
 8012df4:	4602      	mov	r2, r0
 8012df6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8012dfa:	f7ff bb2e 	b.w	801245a <_dtoa_r+0x32>
 8012dfe:	693a      	ldr	r2, [r7, #16]
 8012e00:	3202      	adds	r2, #2
 8012e02:	0092      	lsls	r2, r2, #2
 8012e04:	f107 010c 	add.w	r1, r7, #12
 8012e08:	300c      	adds	r0, #12
 8012e0a:	f7ff fa16 	bl	801223a <memcpy>
 8012e0e:	2201      	movs	r2, #1
 8012e10:	4629      	mov	r1, r5
 8012e12:	4620      	mov	r0, r4
 8012e14:	f000 fb56 	bl	80134c4 <__lshift>
 8012e18:	9b00      	ldr	r3, [sp, #0]
 8012e1a:	3301      	adds	r3, #1
 8012e1c:	9304      	str	r3, [sp, #16]
 8012e1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e22:	4413      	add	r3, r2
 8012e24:	9308      	str	r3, [sp, #32]
 8012e26:	9b02      	ldr	r3, [sp, #8]
 8012e28:	f003 0301 	and.w	r3, r3, #1
 8012e2c:	46b8      	mov	r8, r7
 8012e2e:	9306      	str	r3, [sp, #24]
 8012e30:	4607      	mov	r7, r0
 8012e32:	9b04      	ldr	r3, [sp, #16]
 8012e34:	4631      	mov	r1, r6
 8012e36:	3b01      	subs	r3, #1
 8012e38:	4650      	mov	r0, sl
 8012e3a:	9301      	str	r3, [sp, #4]
 8012e3c:	f7ff fa6a 	bl	8012314 <quorem>
 8012e40:	4641      	mov	r1, r8
 8012e42:	9002      	str	r0, [sp, #8]
 8012e44:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012e48:	4650      	mov	r0, sl
 8012e4a:	f000 fba7 	bl	801359c <__mcmp>
 8012e4e:	463a      	mov	r2, r7
 8012e50:	9005      	str	r0, [sp, #20]
 8012e52:	4631      	mov	r1, r6
 8012e54:	4620      	mov	r0, r4
 8012e56:	f000 fbbd 	bl	80135d4 <__mdiff>
 8012e5a:	68c2      	ldr	r2, [r0, #12]
 8012e5c:	4605      	mov	r5, r0
 8012e5e:	bb02      	cbnz	r2, 8012ea2 <_dtoa_r+0xa7a>
 8012e60:	4601      	mov	r1, r0
 8012e62:	4650      	mov	r0, sl
 8012e64:	f000 fb9a 	bl	801359c <__mcmp>
 8012e68:	4602      	mov	r2, r0
 8012e6a:	4629      	mov	r1, r5
 8012e6c:	4620      	mov	r0, r4
 8012e6e:	9209      	str	r2, [sp, #36]	; 0x24
 8012e70:	f000 f958 	bl	8013124 <_Bfree>
 8012e74:	9b07      	ldr	r3, [sp, #28]
 8012e76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012e78:	9d04      	ldr	r5, [sp, #16]
 8012e7a:	ea43 0102 	orr.w	r1, r3, r2
 8012e7e:	9b06      	ldr	r3, [sp, #24]
 8012e80:	4319      	orrs	r1, r3
 8012e82:	d110      	bne.n	8012ea6 <_dtoa_r+0xa7e>
 8012e84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012e88:	d029      	beq.n	8012ede <_dtoa_r+0xab6>
 8012e8a:	9b05      	ldr	r3, [sp, #20]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	dd02      	ble.n	8012e96 <_dtoa_r+0xa6e>
 8012e90:	9b02      	ldr	r3, [sp, #8]
 8012e92:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8012e96:	9b01      	ldr	r3, [sp, #4]
 8012e98:	f883 9000 	strb.w	r9, [r3]
 8012e9c:	e774      	b.n	8012d88 <_dtoa_r+0x960>
 8012e9e:	4638      	mov	r0, r7
 8012ea0:	e7ba      	b.n	8012e18 <_dtoa_r+0x9f0>
 8012ea2:	2201      	movs	r2, #1
 8012ea4:	e7e1      	b.n	8012e6a <_dtoa_r+0xa42>
 8012ea6:	9b05      	ldr	r3, [sp, #20]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	db04      	blt.n	8012eb6 <_dtoa_r+0xa8e>
 8012eac:	9907      	ldr	r1, [sp, #28]
 8012eae:	430b      	orrs	r3, r1
 8012eb0:	9906      	ldr	r1, [sp, #24]
 8012eb2:	430b      	orrs	r3, r1
 8012eb4:	d120      	bne.n	8012ef8 <_dtoa_r+0xad0>
 8012eb6:	2a00      	cmp	r2, #0
 8012eb8:	dded      	ble.n	8012e96 <_dtoa_r+0xa6e>
 8012eba:	4651      	mov	r1, sl
 8012ebc:	2201      	movs	r2, #1
 8012ebe:	4620      	mov	r0, r4
 8012ec0:	f000 fb00 	bl	80134c4 <__lshift>
 8012ec4:	4631      	mov	r1, r6
 8012ec6:	4682      	mov	sl, r0
 8012ec8:	f000 fb68 	bl	801359c <__mcmp>
 8012ecc:	2800      	cmp	r0, #0
 8012ece:	dc03      	bgt.n	8012ed8 <_dtoa_r+0xab0>
 8012ed0:	d1e1      	bne.n	8012e96 <_dtoa_r+0xa6e>
 8012ed2:	f019 0f01 	tst.w	r9, #1
 8012ed6:	d0de      	beq.n	8012e96 <_dtoa_r+0xa6e>
 8012ed8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012edc:	d1d8      	bne.n	8012e90 <_dtoa_r+0xa68>
 8012ede:	9a01      	ldr	r2, [sp, #4]
 8012ee0:	2339      	movs	r3, #57	; 0x39
 8012ee2:	7013      	strb	r3, [r2, #0]
 8012ee4:	462b      	mov	r3, r5
 8012ee6:	461d      	mov	r5, r3
 8012ee8:	3b01      	subs	r3, #1
 8012eea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012eee:	2a39      	cmp	r2, #57	; 0x39
 8012ef0:	d06c      	beq.n	8012fcc <_dtoa_r+0xba4>
 8012ef2:	3201      	adds	r2, #1
 8012ef4:	701a      	strb	r2, [r3, #0]
 8012ef6:	e747      	b.n	8012d88 <_dtoa_r+0x960>
 8012ef8:	2a00      	cmp	r2, #0
 8012efa:	dd07      	ble.n	8012f0c <_dtoa_r+0xae4>
 8012efc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012f00:	d0ed      	beq.n	8012ede <_dtoa_r+0xab6>
 8012f02:	9a01      	ldr	r2, [sp, #4]
 8012f04:	f109 0301 	add.w	r3, r9, #1
 8012f08:	7013      	strb	r3, [r2, #0]
 8012f0a:	e73d      	b.n	8012d88 <_dtoa_r+0x960>
 8012f0c:	9b04      	ldr	r3, [sp, #16]
 8012f0e:	9a08      	ldr	r2, [sp, #32]
 8012f10:	f803 9c01 	strb.w	r9, [r3, #-1]
 8012f14:	4293      	cmp	r3, r2
 8012f16:	d043      	beq.n	8012fa0 <_dtoa_r+0xb78>
 8012f18:	4651      	mov	r1, sl
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	220a      	movs	r2, #10
 8012f1e:	4620      	mov	r0, r4
 8012f20:	f000 f922 	bl	8013168 <__multadd>
 8012f24:	45b8      	cmp	r8, r7
 8012f26:	4682      	mov	sl, r0
 8012f28:	f04f 0300 	mov.w	r3, #0
 8012f2c:	f04f 020a 	mov.w	r2, #10
 8012f30:	4641      	mov	r1, r8
 8012f32:	4620      	mov	r0, r4
 8012f34:	d107      	bne.n	8012f46 <_dtoa_r+0xb1e>
 8012f36:	f000 f917 	bl	8013168 <__multadd>
 8012f3a:	4680      	mov	r8, r0
 8012f3c:	4607      	mov	r7, r0
 8012f3e:	9b04      	ldr	r3, [sp, #16]
 8012f40:	3301      	adds	r3, #1
 8012f42:	9304      	str	r3, [sp, #16]
 8012f44:	e775      	b.n	8012e32 <_dtoa_r+0xa0a>
 8012f46:	f000 f90f 	bl	8013168 <__multadd>
 8012f4a:	4639      	mov	r1, r7
 8012f4c:	4680      	mov	r8, r0
 8012f4e:	2300      	movs	r3, #0
 8012f50:	220a      	movs	r2, #10
 8012f52:	4620      	mov	r0, r4
 8012f54:	f000 f908 	bl	8013168 <__multadd>
 8012f58:	4607      	mov	r7, r0
 8012f5a:	e7f0      	b.n	8012f3e <_dtoa_r+0xb16>
 8012f5c:	9b04      	ldr	r3, [sp, #16]
 8012f5e:	9301      	str	r3, [sp, #4]
 8012f60:	9d00      	ldr	r5, [sp, #0]
 8012f62:	4631      	mov	r1, r6
 8012f64:	4650      	mov	r0, sl
 8012f66:	f7ff f9d5 	bl	8012314 <quorem>
 8012f6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012f6e:	9b00      	ldr	r3, [sp, #0]
 8012f70:	f805 9b01 	strb.w	r9, [r5], #1
 8012f74:	1aea      	subs	r2, r5, r3
 8012f76:	9b01      	ldr	r3, [sp, #4]
 8012f78:	4293      	cmp	r3, r2
 8012f7a:	dd07      	ble.n	8012f8c <_dtoa_r+0xb64>
 8012f7c:	4651      	mov	r1, sl
 8012f7e:	2300      	movs	r3, #0
 8012f80:	220a      	movs	r2, #10
 8012f82:	4620      	mov	r0, r4
 8012f84:	f000 f8f0 	bl	8013168 <__multadd>
 8012f88:	4682      	mov	sl, r0
 8012f8a:	e7ea      	b.n	8012f62 <_dtoa_r+0xb3a>
 8012f8c:	9b01      	ldr	r3, [sp, #4]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	bfc8      	it	gt
 8012f92:	461d      	movgt	r5, r3
 8012f94:	9b00      	ldr	r3, [sp, #0]
 8012f96:	bfd8      	it	le
 8012f98:	2501      	movle	r5, #1
 8012f9a:	441d      	add	r5, r3
 8012f9c:	f04f 0800 	mov.w	r8, #0
 8012fa0:	4651      	mov	r1, sl
 8012fa2:	2201      	movs	r2, #1
 8012fa4:	4620      	mov	r0, r4
 8012fa6:	f000 fa8d 	bl	80134c4 <__lshift>
 8012faa:	4631      	mov	r1, r6
 8012fac:	4682      	mov	sl, r0
 8012fae:	f000 faf5 	bl	801359c <__mcmp>
 8012fb2:	2800      	cmp	r0, #0
 8012fb4:	dc96      	bgt.n	8012ee4 <_dtoa_r+0xabc>
 8012fb6:	d102      	bne.n	8012fbe <_dtoa_r+0xb96>
 8012fb8:	f019 0f01 	tst.w	r9, #1
 8012fbc:	d192      	bne.n	8012ee4 <_dtoa_r+0xabc>
 8012fbe:	462b      	mov	r3, r5
 8012fc0:	461d      	mov	r5, r3
 8012fc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012fc6:	2a30      	cmp	r2, #48	; 0x30
 8012fc8:	d0fa      	beq.n	8012fc0 <_dtoa_r+0xb98>
 8012fca:	e6dd      	b.n	8012d88 <_dtoa_r+0x960>
 8012fcc:	9a00      	ldr	r2, [sp, #0]
 8012fce:	429a      	cmp	r2, r3
 8012fd0:	d189      	bne.n	8012ee6 <_dtoa_r+0xabe>
 8012fd2:	f10b 0b01 	add.w	fp, fp, #1
 8012fd6:	2331      	movs	r3, #49	; 0x31
 8012fd8:	e796      	b.n	8012f08 <_dtoa_r+0xae0>
 8012fda:	4b0a      	ldr	r3, [pc, #40]	; (8013004 <_dtoa_r+0xbdc>)
 8012fdc:	f7ff ba99 	b.w	8012512 <_dtoa_r+0xea>
 8012fe0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	f47f aa6d 	bne.w	80124c2 <_dtoa_r+0x9a>
 8012fe8:	4b07      	ldr	r3, [pc, #28]	; (8013008 <_dtoa_r+0xbe0>)
 8012fea:	f7ff ba92 	b.w	8012512 <_dtoa_r+0xea>
 8012fee:	9b01      	ldr	r3, [sp, #4]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	dcb5      	bgt.n	8012f60 <_dtoa_r+0xb38>
 8012ff4:	9b07      	ldr	r3, [sp, #28]
 8012ff6:	2b02      	cmp	r3, #2
 8012ff8:	f73f aeb1 	bgt.w	8012d5e <_dtoa_r+0x936>
 8012ffc:	e7b0      	b.n	8012f60 <_dtoa_r+0xb38>
 8012ffe:	bf00      	nop
 8013000:	080178e4 	.word	0x080178e4
 8013004:	08017844 	.word	0x08017844
 8013008:	08017868 	.word	0x08017868

0801300c <_free_r>:
 801300c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801300e:	2900      	cmp	r1, #0
 8013010:	d044      	beq.n	801309c <_free_r+0x90>
 8013012:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013016:	9001      	str	r0, [sp, #4]
 8013018:	2b00      	cmp	r3, #0
 801301a:	f1a1 0404 	sub.w	r4, r1, #4
 801301e:	bfb8      	it	lt
 8013020:	18e4      	addlt	r4, r4, r3
 8013022:	f7fe f98b 	bl	801133c <__malloc_lock>
 8013026:	4a1e      	ldr	r2, [pc, #120]	; (80130a0 <_free_r+0x94>)
 8013028:	9801      	ldr	r0, [sp, #4]
 801302a:	6813      	ldr	r3, [r2, #0]
 801302c:	b933      	cbnz	r3, 801303c <_free_r+0x30>
 801302e:	6063      	str	r3, [r4, #4]
 8013030:	6014      	str	r4, [r2, #0]
 8013032:	b003      	add	sp, #12
 8013034:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013038:	f7fe b986 	b.w	8011348 <__malloc_unlock>
 801303c:	42a3      	cmp	r3, r4
 801303e:	d908      	bls.n	8013052 <_free_r+0x46>
 8013040:	6825      	ldr	r5, [r4, #0]
 8013042:	1961      	adds	r1, r4, r5
 8013044:	428b      	cmp	r3, r1
 8013046:	bf01      	itttt	eq
 8013048:	6819      	ldreq	r1, [r3, #0]
 801304a:	685b      	ldreq	r3, [r3, #4]
 801304c:	1949      	addeq	r1, r1, r5
 801304e:	6021      	streq	r1, [r4, #0]
 8013050:	e7ed      	b.n	801302e <_free_r+0x22>
 8013052:	461a      	mov	r2, r3
 8013054:	685b      	ldr	r3, [r3, #4]
 8013056:	b10b      	cbz	r3, 801305c <_free_r+0x50>
 8013058:	42a3      	cmp	r3, r4
 801305a:	d9fa      	bls.n	8013052 <_free_r+0x46>
 801305c:	6811      	ldr	r1, [r2, #0]
 801305e:	1855      	adds	r5, r2, r1
 8013060:	42a5      	cmp	r5, r4
 8013062:	d10b      	bne.n	801307c <_free_r+0x70>
 8013064:	6824      	ldr	r4, [r4, #0]
 8013066:	4421      	add	r1, r4
 8013068:	1854      	adds	r4, r2, r1
 801306a:	42a3      	cmp	r3, r4
 801306c:	6011      	str	r1, [r2, #0]
 801306e:	d1e0      	bne.n	8013032 <_free_r+0x26>
 8013070:	681c      	ldr	r4, [r3, #0]
 8013072:	685b      	ldr	r3, [r3, #4]
 8013074:	6053      	str	r3, [r2, #4]
 8013076:	440c      	add	r4, r1
 8013078:	6014      	str	r4, [r2, #0]
 801307a:	e7da      	b.n	8013032 <_free_r+0x26>
 801307c:	d902      	bls.n	8013084 <_free_r+0x78>
 801307e:	230c      	movs	r3, #12
 8013080:	6003      	str	r3, [r0, #0]
 8013082:	e7d6      	b.n	8013032 <_free_r+0x26>
 8013084:	6825      	ldr	r5, [r4, #0]
 8013086:	1961      	adds	r1, r4, r5
 8013088:	428b      	cmp	r3, r1
 801308a:	bf04      	itt	eq
 801308c:	6819      	ldreq	r1, [r3, #0]
 801308e:	685b      	ldreq	r3, [r3, #4]
 8013090:	6063      	str	r3, [r4, #4]
 8013092:	bf04      	itt	eq
 8013094:	1949      	addeq	r1, r1, r5
 8013096:	6021      	streq	r1, [r4, #0]
 8013098:	6054      	str	r4, [r2, #4]
 801309a:	e7ca      	b.n	8013032 <_free_r+0x26>
 801309c:	b003      	add	sp, #12
 801309e:	bd30      	pop	{r4, r5, pc}
 80130a0:	2000e9d8 	.word	0x2000e9d8

080130a4 <_Balloc>:
 80130a4:	b570      	push	{r4, r5, r6, lr}
 80130a6:	69c6      	ldr	r6, [r0, #28]
 80130a8:	4604      	mov	r4, r0
 80130aa:	460d      	mov	r5, r1
 80130ac:	b976      	cbnz	r6, 80130cc <_Balloc+0x28>
 80130ae:	2010      	movs	r0, #16
 80130b0:	f7fe f894 	bl	80111dc <malloc>
 80130b4:	4602      	mov	r2, r0
 80130b6:	61e0      	str	r0, [r4, #28]
 80130b8:	b920      	cbnz	r0, 80130c4 <_Balloc+0x20>
 80130ba:	4b18      	ldr	r3, [pc, #96]	; (801311c <_Balloc+0x78>)
 80130bc:	4818      	ldr	r0, [pc, #96]	; (8013120 <_Balloc+0x7c>)
 80130be:	216b      	movs	r1, #107	; 0x6b
 80130c0:	f7fe f868 	bl	8011194 <__assert_func>
 80130c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80130c8:	6006      	str	r6, [r0, #0]
 80130ca:	60c6      	str	r6, [r0, #12]
 80130cc:	69e6      	ldr	r6, [r4, #28]
 80130ce:	68f3      	ldr	r3, [r6, #12]
 80130d0:	b183      	cbz	r3, 80130f4 <_Balloc+0x50>
 80130d2:	69e3      	ldr	r3, [r4, #28]
 80130d4:	68db      	ldr	r3, [r3, #12]
 80130d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80130da:	b9b8      	cbnz	r0, 801310c <_Balloc+0x68>
 80130dc:	2101      	movs	r1, #1
 80130de:	fa01 f605 	lsl.w	r6, r1, r5
 80130e2:	1d72      	adds	r2, r6, #5
 80130e4:	0092      	lsls	r2, r2, #2
 80130e6:	4620      	mov	r0, r4
 80130e8:	f000 ff2e 	bl	8013f48 <_calloc_r>
 80130ec:	b160      	cbz	r0, 8013108 <_Balloc+0x64>
 80130ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80130f2:	e00e      	b.n	8013112 <_Balloc+0x6e>
 80130f4:	2221      	movs	r2, #33	; 0x21
 80130f6:	2104      	movs	r1, #4
 80130f8:	4620      	mov	r0, r4
 80130fa:	f000 ff25 	bl	8013f48 <_calloc_r>
 80130fe:	69e3      	ldr	r3, [r4, #28]
 8013100:	60f0      	str	r0, [r6, #12]
 8013102:	68db      	ldr	r3, [r3, #12]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d1e4      	bne.n	80130d2 <_Balloc+0x2e>
 8013108:	2000      	movs	r0, #0
 801310a:	bd70      	pop	{r4, r5, r6, pc}
 801310c:	6802      	ldr	r2, [r0, #0]
 801310e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013112:	2300      	movs	r3, #0
 8013114:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013118:	e7f7      	b.n	801310a <_Balloc+0x66>
 801311a:	bf00      	nop
 801311c:	08017875 	.word	0x08017875
 8013120:	080178f5 	.word	0x080178f5

08013124 <_Bfree>:
 8013124:	b570      	push	{r4, r5, r6, lr}
 8013126:	69c6      	ldr	r6, [r0, #28]
 8013128:	4605      	mov	r5, r0
 801312a:	460c      	mov	r4, r1
 801312c:	b976      	cbnz	r6, 801314c <_Bfree+0x28>
 801312e:	2010      	movs	r0, #16
 8013130:	f7fe f854 	bl	80111dc <malloc>
 8013134:	4602      	mov	r2, r0
 8013136:	61e8      	str	r0, [r5, #28]
 8013138:	b920      	cbnz	r0, 8013144 <_Bfree+0x20>
 801313a:	4b09      	ldr	r3, [pc, #36]	; (8013160 <_Bfree+0x3c>)
 801313c:	4809      	ldr	r0, [pc, #36]	; (8013164 <_Bfree+0x40>)
 801313e:	218f      	movs	r1, #143	; 0x8f
 8013140:	f7fe f828 	bl	8011194 <__assert_func>
 8013144:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013148:	6006      	str	r6, [r0, #0]
 801314a:	60c6      	str	r6, [r0, #12]
 801314c:	b13c      	cbz	r4, 801315e <_Bfree+0x3a>
 801314e:	69eb      	ldr	r3, [r5, #28]
 8013150:	6862      	ldr	r2, [r4, #4]
 8013152:	68db      	ldr	r3, [r3, #12]
 8013154:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013158:	6021      	str	r1, [r4, #0]
 801315a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801315e:	bd70      	pop	{r4, r5, r6, pc}
 8013160:	08017875 	.word	0x08017875
 8013164:	080178f5 	.word	0x080178f5

08013168 <__multadd>:
 8013168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801316c:	690d      	ldr	r5, [r1, #16]
 801316e:	4607      	mov	r7, r0
 8013170:	460c      	mov	r4, r1
 8013172:	461e      	mov	r6, r3
 8013174:	f101 0c14 	add.w	ip, r1, #20
 8013178:	2000      	movs	r0, #0
 801317a:	f8dc 3000 	ldr.w	r3, [ip]
 801317e:	b299      	uxth	r1, r3
 8013180:	fb02 6101 	mla	r1, r2, r1, r6
 8013184:	0c1e      	lsrs	r6, r3, #16
 8013186:	0c0b      	lsrs	r3, r1, #16
 8013188:	fb02 3306 	mla	r3, r2, r6, r3
 801318c:	b289      	uxth	r1, r1
 801318e:	3001      	adds	r0, #1
 8013190:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013194:	4285      	cmp	r5, r0
 8013196:	f84c 1b04 	str.w	r1, [ip], #4
 801319a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801319e:	dcec      	bgt.n	801317a <__multadd+0x12>
 80131a0:	b30e      	cbz	r6, 80131e6 <__multadd+0x7e>
 80131a2:	68a3      	ldr	r3, [r4, #8]
 80131a4:	42ab      	cmp	r3, r5
 80131a6:	dc19      	bgt.n	80131dc <__multadd+0x74>
 80131a8:	6861      	ldr	r1, [r4, #4]
 80131aa:	4638      	mov	r0, r7
 80131ac:	3101      	adds	r1, #1
 80131ae:	f7ff ff79 	bl	80130a4 <_Balloc>
 80131b2:	4680      	mov	r8, r0
 80131b4:	b928      	cbnz	r0, 80131c2 <__multadd+0x5a>
 80131b6:	4602      	mov	r2, r0
 80131b8:	4b0c      	ldr	r3, [pc, #48]	; (80131ec <__multadd+0x84>)
 80131ba:	480d      	ldr	r0, [pc, #52]	; (80131f0 <__multadd+0x88>)
 80131bc:	21ba      	movs	r1, #186	; 0xba
 80131be:	f7fd ffe9 	bl	8011194 <__assert_func>
 80131c2:	6922      	ldr	r2, [r4, #16]
 80131c4:	3202      	adds	r2, #2
 80131c6:	f104 010c 	add.w	r1, r4, #12
 80131ca:	0092      	lsls	r2, r2, #2
 80131cc:	300c      	adds	r0, #12
 80131ce:	f7ff f834 	bl	801223a <memcpy>
 80131d2:	4621      	mov	r1, r4
 80131d4:	4638      	mov	r0, r7
 80131d6:	f7ff ffa5 	bl	8013124 <_Bfree>
 80131da:	4644      	mov	r4, r8
 80131dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80131e0:	3501      	adds	r5, #1
 80131e2:	615e      	str	r6, [r3, #20]
 80131e4:	6125      	str	r5, [r4, #16]
 80131e6:	4620      	mov	r0, r4
 80131e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131ec:	080178e4 	.word	0x080178e4
 80131f0:	080178f5 	.word	0x080178f5

080131f4 <__hi0bits>:
 80131f4:	0c03      	lsrs	r3, r0, #16
 80131f6:	041b      	lsls	r3, r3, #16
 80131f8:	b9d3      	cbnz	r3, 8013230 <__hi0bits+0x3c>
 80131fa:	0400      	lsls	r0, r0, #16
 80131fc:	2310      	movs	r3, #16
 80131fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013202:	bf04      	itt	eq
 8013204:	0200      	lsleq	r0, r0, #8
 8013206:	3308      	addeq	r3, #8
 8013208:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801320c:	bf04      	itt	eq
 801320e:	0100      	lsleq	r0, r0, #4
 8013210:	3304      	addeq	r3, #4
 8013212:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013216:	bf04      	itt	eq
 8013218:	0080      	lsleq	r0, r0, #2
 801321a:	3302      	addeq	r3, #2
 801321c:	2800      	cmp	r0, #0
 801321e:	db05      	blt.n	801322c <__hi0bits+0x38>
 8013220:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013224:	f103 0301 	add.w	r3, r3, #1
 8013228:	bf08      	it	eq
 801322a:	2320      	moveq	r3, #32
 801322c:	4618      	mov	r0, r3
 801322e:	4770      	bx	lr
 8013230:	2300      	movs	r3, #0
 8013232:	e7e4      	b.n	80131fe <__hi0bits+0xa>

08013234 <__lo0bits>:
 8013234:	6803      	ldr	r3, [r0, #0]
 8013236:	f013 0207 	ands.w	r2, r3, #7
 801323a:	d00c      	beq.n	8013256 <__lo0bits+0x22>
 801323c:	07d9      	lsls	r1, r3, #31
 801323e:	d422      	bmi.n	8013286 <__lo0bits+0x52>
 8013240:	079a      	lsls	r2, r3, #30
 8013242:	bf49      	itett	mi
 8013244:	085b      	lsrmi	r3, r3, #1
 8013246:	089b      	lsrpl	r3, r3, #2
 8013248:	6003      	strmi	r3, [r0, #0]
 801324a:	2201      	movmi	r2, #1
 801324c:	bf5c      	itt	pl
 801324e:	6003      	strpl	r3, [r0, #0]
 8013250:	2202      	movpl	r2, #2
 8013252:	4610      	mov	r0, r2
 8013254:	4770      	bx	lr
 8013256:	b299      	uxth	r1, r3
 8013258:	b909      	cbnz	r1, 801325e <__lo0bits+0x2a>
 801325a:	0c1b      	lsrs	r3, r3, #16
 801325c:	2210      	movs	r2, #16
 801325e:	b2d9      	uxtb	r1, r3
 8013260:	b909      	cbnz	r1, 8013266 <__lo0bits+0x32>
 8013262:	3208      	adds	r2, #8
 8013264:	0a1b      	lsrs	r3, r3, #8
 8013266:	0719      	lsls	r1, r3, #28
 8013268:	bf04      	itt	eq
 801326a:	091b      	lsreq	r3, r3, #4
 801326c:	3204      	addeq	r2, #4
 801326e:	0799      	lsls	r1, r3, #30
 8013270:	bf04      	itt	eq
 8013272:	089b      	lsreq	r3, r3, #2
 8013274:	3202      	addeq	r2, #2
 8013276:	07d9      	lsls	r1, r3, #31
 8013278:	d403      	bmi.n	8013282 <__lo0bits+0x4e>
 801327a:	085b      	lsrs	r3, r3, #1
 801327c:	f102 0201 	add.w	r2, r2, #1
 8013280:	d003      	beq.n	801328a <__lo0bits+0x56>
 8013282:	6003      	str	r3, [r0, #0]
 8013284:	e7e5      	b.n	8013252 <__lo0bits+0x1e>
 8013286:	2200      	movs	r2, #0
 8013288:	e7e3      	b.n	8013252 <__lo0bits+0x1e>
 801328a:	2220      	movs	r2, #32
 801328c:	e7e1      	b.n	8013252 <__lo0bits+0x1e>
	...

08013290 <__i2b>:
 8013290:	b510      	push	{r4, lr}
 8013292:	460c      	mov	r4, r1
 8013294:	2101      	movs	r1, #1
 8013296:	f7ff ff05 	bl	80130a4 <_Balloc>
 801329a:	4602      	mov	r2, r0
 801329c:	b928      	cbnz	r0, 80132aa <__i2b+0x1a>
 801329e:	4b05      	ldr	r3, [pc, #20]	; (80132b4 <__i2b+0x24>)
 80132a0:	4805      	ldr	r0, [pc, #20]	; (80132b8 <__i2b+0x28>)
 80132a2:	f240 1145 	movw	r1, #325	; 0x145
 80132a6:	f7fd ff75 	bl	8011194 <__assert_func>
 80132aa:	2301      	movs	r3, #1
 80132ac:	6144      	str	r4, [r0, #20]
 80132ae:	6103      	str	r3, [r0, #16]
 80132b0:	bd10      	pop	{r4, pc}
 80132b2:	bf00      	nop
 80132b4:	080178e4 	.word	0x080178e4
 80132b8:	080178f5 	.word	0x080178f5

080132bc <__multiply>:
 80132bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132c0:	4691      	mov	r9, r2
 80132c2:	690a      	ldr	r2, [r1, #16]
 80132c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80132c8:	429a      	cmp	r2, r3
 80132ca:	bfb8      	it	lt
 80132cc:	460b      	movlt	r3, r1
 80132ce:	460c      	mov	r4, r1
 80132d0:	bfbc      	itt	lt
 80132d2:	464c      	movlt	r4, r9
 80132d4:	4699      	movlt	r9, r3
 80132d6:	6927      	ldr	r7, [r4, #16]
 80132d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80132dc:	68a3      	ldr	r3, [r4, #8]
 80132de:	6861      	ldr	r1, [r4, #4]
 80132e0:	eb07 060a 	add.w	r6, r7, sl
 80132e4:	42b3      	cmp	r3, r6
 80132e6:	b085      	sub	sp, #20
 80132e8:	bfb8      	it	lt
 80132ea:	3101      	addlt	r1, #1
 80132ec:	f7ff feda 	bl	80130a4 <_Balloc>
 80132f0:	b930      	cbnz	r0, 8013300 <__multiply+0x44>
 80132f2:	4602      	mov	r2, r0
 80132f4:	4b44      	ldr	r3, [pc, #272]	; (8013408 <__multiply+0x14c>)
 80132f6:	4845      	ldr	r0, [pc, #276]	; (801340c <__multiply+0x150>)
 80132f8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80132fc:	f7fd ff4a 	bl	8011194 <__assert_func>
 8013300:	f100 0514 	add.w	r5, r0, #20
 8013304:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013308:	462b      	mov	r3, r5
 801330a:	2200      	movs	r2, #0
 801330c:	4543      	cmp	r3, r8
 801330e:	d321      	bcc.n	8013354 <__multiply+0x98>
 8013310:	f104 0314 	add.w	r3, r4, #20
 8013314:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013318:	f109 0314 	add.w	r3, r9, #20
 801331c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013320:	9202      	str	r2, [sp, #8]
 8013322:	1b3a      	subs	r2, r7, r4
 8013324:	3a15      	subs	r2, #21
 8013326:	f022 0203 	bic.w	r2, r2, #3
 801332a:	3204      	adds	r2, #4
 801332c:	f104 0115 	add.w	r1, r4, #21
 8013330:	428f      	cmp	r7, r1
 8013332:	bf38      	it	cc
 8013334:	2204      	movcc	r2, #4
 8013336:	9201      	str	r2, [sp, #4]
 8013338:	9a02      	ldr	r2, [sp, #8]
 801333a:	9303      	str	r3, [sp, #12]
 801333c:	429a      	cmp	r2, r3
 801333e:	d80c      	bhi.n	801335a <__multiply+0x9e>
 8013340:	2e00      	cmp	r6, #0
 8013342:	dd03      	ble.n	801334c <__multiply+0x90>
 8013344:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013348:	2b00      	cmp	r3, #0
 801334a:	d05b      	beq.n	8013404 <__multiply+0x148>
 801334c:	6106      	str	r6, [r0, #16]
 801334e:	b005      	add	sp, #20
 8013350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013354:	f843 2b04 	str.w	r2, [r3], #4
 8013358:	e7d8      	b.n	801330c <__multiply+0x50>
 801335a:	f8b3 a000 	ldrh.w	sl, [r3]
 801335e:	f1ba 0f00 	cmp.w	sl, #0
 8013362:	d024      	beq.n	80133ae <__multiply+0xf2>
 8013364:	f104 0e14 	add.w	lr, r4, #20
 8013368:	46a9      	mov	r9, r5
 801336a:	f04f 0c00 	mov.w	ip, #0
 801336e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013372:	f8d9 1000 	ldr.w	r1, [r9]
 8013376:	fa1f fb82 	uxth.w	fp, r2
 801337a:	b289      	uxth	r1, r1
 801337c:	fb0a 110b 	mla	r1, sl, fp, r1
 8013380:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013384:	f8d9 2000 	ldr.w	r2, [r9]
 8013388:	4461      	add	r1, ip
 801338a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801338e:	fb0a c20b 	mla	r2, sl, fp, ip
 8013392:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013396:	b289      	uxth	r1, r1
 8013398:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801339c:	4577      	cmp	r7, lr
 801339e:	f849 1b04 	str.w	r1, [r9], #4
 80133a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80133a6:	d8e2      	bhi.n	801336e <__multiply+0xb2>
 80133a8:	9a01      	ldr	r2, [sp, #4]
 80133aa:	f845 c002 	str.w	ip, [r5, r2]
 80133ae:	9a03      	ldr	r2, [sp, #12]
 80133b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80133b4:	3304      	adds	r3, #4
 80133b6:	f1b9 0f00 	cmp.w	r9, #0
 80133ba:	d021      	beq.n	8013400 <__multiply+0x144>
 80133bc:	6829      	ldr	r1, [r5, #0]
 80133be:	f104 0c14 	add.w	ip, r4, #20
 80133c2:	46ae      	mov	lr, r5
 80133c4:	f04f 0a00 	mov.w	sl, #0
 80133c8:	f8bc b000 	ldrh.w	fp, [ip]
 80133cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80133d0:	fb09 220b 	mla	r2, r9, fp, r2
 80133d4:	4452      	add	r2, sl
 80133d6:	b289      	uxth	r1, r1
 80133d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80133dc:	f84e 1b04 	str.w	r1, [lr], #4
 80133e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80133e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80133e8:	f8be 1000 	ldrh.w	r1, [lr]
 80133ec:	fb09 110a 	mla	r1, r9, sl, r1
 80133f0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80133f4:	4567      	cmp	r7, ip
 80133f6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80133fa:	d8e5      	bhi.n	80133c8 <__multiply+0x10c>
 80133fc:	9a01      	ldr	r2, [sp, #4]
 80133fe:	50a9      	str	r1, [r5, r2]
 8013400:	3504      	adds	r5, #4
 8013402:	e799      	b.n	8013338 <__multiply+0x7c>
 8013404:	3e01      	subs	r6, #1
 8013406:	e79b      	b.n	8013340 <__multiply+0x84>
 8013408:	080178e4 	.word	0x080178e4
 801340c:	080178f5 	.word	0x080178f5

08013410 <__pow5mult>:
 8013410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013414:	4615      	mov	r5, r2
 8013416:	f012 0203 	ands.w	r2, r2, #3
 801341a:	4606      	mov	r6, r0
 801341c:	460f      	mov	r7, r1
 801341e:	d007      	beq.n	8013430 <__pow5mult+0x20>
 8013420:	4c25      	ldr	r4, [pc, #148]	; (80134b8 <__pow5mult+0xa8>)
 8013422:	3a01      	subs	r2, #1
 8013424:	2300      	movs	r3, #0
 8013426:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801342a:	f7ff fe9d 	bl	8013168 <__multadd>
 801342e:	4607      	mov	r7, r0
 8013430:	10ad      	asrs	r5, r5, #2
 8013432:	d03d      	beq.n	80134b0 <__pow5mult+0xa0>
 8013434:	69f4      	ldr	r4, [r6, #28]
 8013436:	b97c      	cbnz	r4, 8013458 <__pow5mult+0x48>
 8013438:	2010      	movs	r0, #16
 801343a:	f7fd fecf 	bl	80111dc <malloc>
 801343e:	4602      	mov	r2, r0
 8013440:	61f0      	str	r0, [r6, #28]
 8013442:	b928      	cbnz	r0, 8013450 <__pow5mult+0x40>
 8013444:	4b1d      	ldr	r3, [pc, #116]	; (80134bc <__pow5mult+0xac>)
 8013446:	481e      	ldr	r0, [pc, #120]	; (80134c0 <__pow5mult+0xb0>)
 8013448:	f240 11b3 	movw	r1, #435	; 0x1b3
 801344c:	f7fd fea2 	bl	8011194 <__assert_func>
 8013450:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013454:	6004      	str	r4, [r0, #0]
 8013456:	60c4      	str	r4, [r0, #12]
 8013458:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801345c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013460:	b94c      	cbnz	r4, 8013476 <__pow5mult+0x66>
 8013462:	f240 2171 	movw	r1, #625	; 0x271
 8013466:	4630      	mov	r0, r6
 8013468:	f7ff ff12 	bl	8013290 <__i2b>
 801346c:	2300      	movs	r3, #0
 801346e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013472:	4604      	mov	r4, r0
 8013474:	6003      	str	r3, [r0, #0]
 8013476:	f04f 0900 	mov.w	r9, #0
 801347a:	07eb      	lsls	r3, r5, #31
 801347c:	d50a      	bpl.n	8013494 <__pow5mult+0x84>
 801347e:	4639      	mov	r1, r7
 8013480:	4622      	mov	r2, r4
 8013482:	4630      	mov	r0, r6
 8013484:	f7ff ff1a 	bl	80132bc <__multiply>
 8013488:	4639      	mov	r1, r7
 801348a:	4680      	mov	r8, r0
 801348c:	4630      	mov	r0, r6
 801348e:	f7ff fe49 	bl	8013124 <_Bfree>
 8013492:	4647      	mov	r7, r8
 8013494:	106d      	asrs	r5, r5, #1
 8013496:	d00b      	beq.n	80134b0 <__pow5mult+0xa0>
 8013498:	6820      	ldr	r0, [r4, #0]
 801349a:	b938      	cbnz	r0, 80134ac <__pow5mult+0x9c>
 801349c:	4622      	mov	r2, r4
 801349e:	4621      	mov	r1, r4
 80134a0:	4630      	mov	r0, r6
 80134a2:	f7ff ff0b 	bl	80132bc <__multiply>
 80134a6:	6020      	str	r0, [r4, #0]
 80134a8:	f8c0 9000 	str.w	r9, [r0]
 80134ac:	4604      	mov	r4, r0
 80134ae:	e7e4      	b.n	801347a <__pow5mult+0x6a>
 80134b0:	4638      	mov	r0, r7
 80134b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134b6:	bf00      	nop
 80134b8:	08017a40 	.word	0x08017a40
 80134bc:	08017875 	.word	0x08017875
 80134c0:	080178f5 	.word	0x080178f5

080134c4 <__lshift>:
 80134c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134c8:	460c      	mov	r4, r1
 80134ca:	6849      	ldr	r1, [r1, #4]
 80134cc:	6923      	ldr	r3, [r4, #16]
 80134ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80134d2:	68a3      	ldr	r3, [r4, #8]
 80134d4:	4607      	mov	r7, r0
 80134d6:	4691      	mov	r9, r2
 80134d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80134dc:	f108 0601 	add.w	r6, r8, #1
 80134e0:	42b3      	cmp	r3, r6
 80134e2:	db0b      	blt.n	80134fc <__lshift+0x38>
 80134e4:	4638      	mov	r0, r7
 80134e6:	f7ff fddd 	bl	80130a4 <_Balloc>
 80134ea:	4605      	mov	r5, r0
 80134ec:	b948      	cbnz	r0, 8013502 <__lshift+0x3e>
 80134ee:	4602      	mov	r2, r0
 80134f0:	4b28      	ldr	r3, [pc, #160]	; (8013594 <__lshift+0xd0>)
 80134f2:	4829      	ldr	r0, [pc, #164]	; (8013598 <__lshift+0xd4>)
 80134f4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80134f8:	f7fd fe4c 	bl	8011194 <__assert_func>
 80134fc:	3101      	adds	r1, #1
 80134fe:	005b      	lsls	r3, r3, #1
 8013500:	e7ee      	b.n	80134e0 <__lshift+0x1c>
 8013502:	2300      	movs	r3, #0
 8013504:	f100 0114 	add.w	r1, r0, #20
 8013508:	f100 0210 	add.w	r2, r0, #16
 801350c:	4618      	mov	r0, r3
 801350e:	4553      	cmp	r3, sl
 8013510:	db33      	blt.n	801357a <__lshift+0xb6>
 8013512:	6920      	ldr	r0, [r4, #16]
 8013514:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013518:	f104 0314 	add.w	r3, r4, #20
 801351c:	f019 091f 	ands.w	r9, r9, #31
 8013520:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013524:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013528:	d02b      	beq.n	8013582 <__lshift+0xbe>
 801352a:	f1c9 0e20 	rsb	lr, r9, #32
 801352e:	468a      	mov	sl, r1
 8013530:	2200      	movs	r2, #0
 8013532:	6818      	ldr	r0, [r3, #0]
 8013534:	fa00 f009 	lsl.w	r0, r0, r9
 8013538:	4310      	orrs	r0, r2
 801353a:	f84a 0b04 	str.w	r0, [sl], #4
 801353e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013542:	459c      	cmp	ip, r3
 8013544:	fa22 f20e 	lsr.w	r2, r2, lr
 8013548:	d8f3      	bhi.n	8013532 <__lshift+0x6e>
 801354a:	ebac 0304 	sub.w	r3, ip, r4
 801354e:	3b15      	subs	r3, #21
 8013550:	f023 0303 	bic.w	r3, r3, #3
 8013554:	3304      	adds	r3, #4
 8013556:	f104 0015 	add.w	r0, r4, #21
 801355a:	4584      	cmp	ip, r0
 801355c:	bf38      	it	cc
 801355e:	2304      	movcc	r3, #4
 8013560:	50ca      	str	r2, [r1, r3]
 8013562:	b10a      	cbz	r2, 8013568 <__lshift+0xa4>
 8013564:	f108 0602 	add.w	r6, r8, #2
 8013568:	3e01      	subs	r6, #1
 801356a:	4638      	mov	r0, r7
 801356c:	612e      	str	r6, [r5, #16]
 801356e:	4621      	mov	r1, r4
 8013570:	f7ff fdd8 	bl	8013124 <_Bfree>
 8013574:	4628      	mov	r0, r5
 8013576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801357a:	f842 0f04 	str.w	r0, [r2, #4]!
 801357e:	3301      	adds	r3, #1
 8013580:	e7c5      	b.n	801350e <__lshift+0x4a>
 8013582:	3904      	subs	r1, #4
 8013584:	f853 2b04 	ldr.w	r2, [r3], #4
 8013588:	f841 2f04 	str.w	r2, [r1, #4]!
 801358c:	459c      	cmp	ip, r3
 801358e:	d8f9      	bhi.n	8013584 <__lshift+0xc0>
 8013590:	e7ea      	b.n	8013568 <__lshift+0xa4>
 8013592:	bf00      	nop
 8013594:	080178e4 	.word	0x080178e4
 8013598:	080178f5 	.word	0x080178f5

0801359c <__mcmp>:
 801359c:	b530      	push	{r4, r5, lr}
 801359e:	6902      	ldr	r2, [r0, #16]
 80135a0:	690c      	ldr	r4, [r1, #16]
 80135a2:	1b12      	subs	r2, r2, r4
 80135a4:	d10e      	bne.n	80135c4 <__mcmp+0x28>
 80135a6:	f100 0314 	add.w	r3, r0, #20
 80135aa:	3114      	adds	r1, #20
 80135ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80135b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80135b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80135b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80135bc:	42a5      	cmp	r5, r4
 80135be:	d003      	beq.n	80135c8 <__mcmp+0x2c>
 80135c0:	d305      	bcc.n	80135ce <__mcmp+0x32>
 80135c2:	2201      	movs	r2, #1
 80135c4:	4610      	mov	r0, r2
 80135c6:	bd30      	pop	{r4, r5, pc}
 80135c8:	4283      	cmp	r3, r0
 80135ca:	d3f3      	bcc.n	80135b4 <__mcmp+0x18>
 80135cc:	e7fa      	b.n	80135c4 <__mcmp+0x28>
 80135ce:	f04f 32ff 	mov.w	r2, #4294967295
 80135d2:	e7f7      	b.n	80135c4 <__mcmp+0x28>

080135d4 <__mdiff>:
 80135d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135d8:	460c      	mov	r4, r1
 80135da:	4606      	mov	r6, r0
 80135dc:	4611      	mov	r1, r2
 80135de:	4620      	mov	r0, r4
 80135e0:	4690      	mov	r8, r2
 80135e2:	f7ff ffdb 	bl	801359c <__mcmp>
 80135e6:	1e05      	subs	r5, r0, #0
 80135e8:	d110      	bne.n	801360c <__mdiff+0x38>
 80135ea:	4629      	mov	r1, r5
 80135ec:	4630      	mov	r0, r6
 80135ee:	f7ff fd59 	bl	80130a4 <_Balloc>
 80135f2:	b930      	cbnz	r0, 8013602 <__mdiff+0x2e>
 80135f4:	4b3a      	ldr	r3, [pc, #232]	; (80136e0 <__mdiff+0x10c>)
 80135f6:	4602      	mov	r2, r0
 80135f8:	f240 2137 	movw	r1, #567	; 0x237
 80135fc:	4839      	ldr	r0, [pc, #228]	; (80136e4 <__mdiff+0x110>)
 80135fe:	f7fd fdc9 	bl	8011194 <__assert_func>
 8013602:	2301      	movs	r3, #1
 8013604:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013608:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801360c:	bfa4      	itt	ge
 801360e:	4643      	movge	r3, r8
 8013610:	46a0      	movge	r8, r4
 8013612:	4630      	mov	r0, r6
 8013614:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013618:	bfa6      	itte	ge
 801361a:	461c      	movge	r4, r3
 801361c:	2500      	movge	r5, #0
 801361e:	2501      	movlt	r5, #1
 8013620:	f7ff fd40 	bl	80130a4 <_Balloc>
 8013624:	b920      	cbnz	r0, 8013630 <__mdiff+0x5c>
 8013626:	4b2e      	ldr	r3, [pc, #184]	; (80136e0 <__mdiff+0x10c>)
 8013628:	4602      	mov	r2, r0
 801362a:	f240 2145 	movw	r1, #581	; 0x245
 801362e:	e7e5      	b.n	80135fc <__mdiff+0x28>
 8013630:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013634:	6926      	ldr	r6, [r4, #16]
 8013636:	60c5      	str	r5, [r0, #12]
 8013638:	f104 0914 	add.w	r9, r4, #20
 801363c:	f108 0514 	add.w	r5, r8, #20
 8013640:	f100 0e14 	add.w	lr, r0, #20
 8013644:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013648:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801364c:	f108 0210 	add.w	r2, r8, #16
 8013650:	46f2      	mov	sl, lr
 8013652:	2100      	movs	r1, #0
 8013654:	f859 3b04 	ldr.w	r3, [r9], #4
 8013658:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801365c:	fa11 f88b 	uxtah	r8, r1, fp
 8013660:	b299      	uxth	r1, r3
 8013662:	0c1b      	lsrs	r3, r3, #16
 8013664:	eba8 0801 	sub.w	r8, r8, r1
 8013668:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801366c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013670:	fa1f f888 	uxth.w	r8, r8
 8013674:	1419      	asrs	r1, r3, #16
 8013676:	454e      	cmp	r6, r9
 8013678:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801367c:	f84a 3b04 	str.w	r3, [sl], #4
 8013680:	d8e8      	bhi.n	8013654 <__mdiff+0x80>
 8013682:	1b33      	subs	r3, r6, r4
 8013684:	3b15      	subs	r3, #21
 8013686:	f023 0303 	bic.w	r3, r3, #3
 801368a:	3304      	adds	r3, #4
 801368c:	3415      	adds	r4, #21
 801368e:	42a6      	cmp	r6, r4
 8013690:	bf38      	it	cc
 8013692:	2304      	movcc	r3, #4
 8013694:	441d      	add	r5, r3
 8013696:	4473      	add	r3, lr
 8013698:	469e      	mov	lr, r3
 801369a:	462e      	mov	r6, r5
 801369c:	4566      	cmp	r6, ip
 801369e:	d30e      	bcc.n	80136be <__mdiff+0xea>
 80136a0:	f10c 0203 	add.w	r2, ip, #3
 80136a4:	1b52      	subs	r2, r2, r5
 80136a6:	f022 0203 	bic.w	r2, r2, #3
 80136aa:	3d03      	subs	r5, #3
 80136ac:	45ac      	cmp	ip, r5
 80136ae:	bf38      	it	cc
 80136b0:	2200      	movcc	r2, #0
 80136b2:	4413      	add	r3, r2
 80136b4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80136b8:	b17a      	cbz	r2, 80136da <__mdiff+0x106>
 80136ba:	6107      	str	r7, [r0, #16]
 80136bc:	e7a4      	b.n	8013608 <__mdiff+0x34>
 80136be:	f856 8b04 	ldr.w	r8, [r6], #4
 80136c2:	fa11 f288 	uxtah	r2, r1, r8
 80136c6:	1414      	asrs	r4, r2, #16
 80136c8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80136cc:	b292      	uxth	r2, r2
 80136ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80136d2:	f84e 2b04 	str.w	r2, [lr], #4
 80136d6:	1421      	asrs	r1, r4, #16
 80136d8:	e7e0      	b.n	801369c <__mdiff+0xc8>
 80136da:	3f01      	subs	r7, #1
 80136dc:	e7ea      	b.n	80136b4 <__mdiff+0xe0>
 80136de:	bf00      	nop
 80136e0:	080178e4 	.word	0x080178e4
 80136e4:	080178f5 	.word	0x080178f5

080136e8 <__d2b>:
 80136e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80136ec:	460f      	mov	r7, r1
 80136ee:	2101      	movs	r1, #1
 80136f0:	ec59 8b10 	vmov	r8, r9, d0
 80136f4:	4616      	mov	r6, r2
 80136f6:	f7ff fcd5 	bl	80130a4 <_Balloc>
 80136fa:	4604      	mov	r4, r0
 80136fc:	b930      	cbnz	r0, 801370c <__d2b+0x24>
 80136fe:	4602      	mov	r2, r0
 8013700:	4b24      	ldr	r3, [pc, #144]	; (8013794 <__d2b+0xac>)
 8013702:	4825      	ldr	r0, [pc, #148]	; (8013798 <__d2b+0xb0>)
 8013704:	f240 310f 	movw	r1, #783	; 0x30f
 8013708:	f7fd fd44 	bl	8011194 <__assert_func>
 801370c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013710:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013714:	bb2d      	cbnz	r5, 8013762 <__d2b+0x7a>
 8013716:	9301      	str	r3, [sp, #4]
 8013718:	f1b8 0300 	subs.w	r3, r8, #0
 801371c:	d026      	beq.n	801376c <__d2b+0x84>
 801371e:	4668      	mov	r0, sp
 8013720:	9300      	str	r3, [sp, #0]
 8013722:	f7ff fd87 	bl	8013234 <__lo0bits>
 8013726:	e9dd 1200 	ldrd	r1, r2, [sp]
 801372a:	b1e8      	cbz	r0, 8013768 <__d2b+0x80>
 801372c:	f1c0 0320 	rsb	r3, r0, #32
 8013730:	fa02 f303 	lsl.w	r3, r2, r3
 8013734:	430b      	orrs	r3, r1
 8013736:	40c2      	lsrs	r2, r0
 8013738:	6163      	str	r3, [r4, #20]
 801373a:	9201      	str	r2, [sp, #4]
 801373c:	9b01      	ldr	r3, [sp, #4]
 801373e:	61a3      	str	r3, [r4, #24]
 8013740:	2b00      	cmp	r3, #0
 8013742:	bf14      	ite	ne
 8013744:	2202      	movne	r2, #2
 8013746:	2201      	moveq	r2, #1
 8013748:	6122      	str	r2, [r4, #16]
 801374a:	b1bd      	cbz	r5, 801377c <__d2b+0x94>
 801374c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013750:	4405      	add	r5, r0
 8013752:	603d      	str	r5, [r7, #0]
 8013754:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013758:	6030      	str	r0, [r6, #0]
 801375a:	4620      	mov	r0, r4
 801375c:	b003      	add	sp, #12
 801375e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013766:	e7d6      	b.n	8013716 <__d2b+0x2e>
 8013768:	6161      	str	r1, [r4, #20]
 801376a:	e7e7      	b.n	801373c <__d2b+0x54>
 801376c:	a801      	add	r0, sp, #4
 801376e:	f7ff fd61 	bl	8013234 <__lo0bits>
 8013772:	9b01      	ldr	r3, [sp, #4]
 8013774:	6163      	str	r3, [r4, #20]
 8013776:	3020      	adds	r0, #32
 8013778:	2201      	movs	r2, #1
 801377a:	e7e5      	b.n	8013748 <__d2b+0x60>
 801377c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013780:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013784:	6038      	str	r0, [r7, #0]
 8013786:	6918      	ldr	r0, [r3, #16]
 8013788:	f7ff fd34 	bl	80131f4 <__hi0bits>
 801378c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013790:	e7e2      	b.n	8013758 <__d2b+0x70>
 8013792:	bf00      	nop
 8013794:	080178e4 	.word	0x080178e4
 8013798:	080178f5 	.word	0x080178f5

0801379c <_malloc_usable_size_r>:
 801379c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80137a0:	1f18      	subs	r0, r3, #4
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	bfbc      	itt	lt
 80137a6:	580b      	ldrlt	r3, [r1, r0]
 80137a8:	18c0      	addlt	r0, r0, r3
 80137aa:	4770      	bx	lr

080137ac <__ssputs_r>:
 80137ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137b0:	688e      	ldr	r6, [r1, #8]
 80137b2:	461f      	mov	r7, r3
 80137b4:	42be      	cmp	r6, r7
 80137b6:	680b      	ldr	r3, [r1, #0]
 80137b8:	4682      	mov	sl, r0
 80137ba:	460c      	mov	r4, r1
 80137bc:	4690      	mov	r8, r2
 80137be:	d82c      	bhi.n	801381a <__ssputs_r+0x6e>
 80137c0:	898a      	ldrh	r2, [r1, #12]
 80137c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80137c6:	d026      	beq.n	8013816 <__ssputs_r+0x6a>
 80137c8:	6965      	ldr	r5, [r4, #20]
 80137ca:	6909      	ldr	r1, [r1, #16]
 80137cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80137d0:	eba3 0901 	sub.w	r9, r3, r1
 80137d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80137d8:	1c7b      	adds	r3, r7, #1
 80137da:	444b      	add	r3, r9
 80137dc:	106d      	asrs	r5, r5, #1
 80137de:	429d      	cmp	r5, r3
 80137e0:	bf38      	it	cc
 80137e2:	461d      	movcc	r5, r3
 80137e4:	0553      	lsls	r3, r2, #21
 80137e6:	d527      	bpl.n	8013838 <__ssputs_r+0x8c>
 80137e8:	4629      	mov	r1, r5
 80137ea:	f7fd fd27 	bl	801123c <_malloc_r>
 80137ee:	4606      	mov	r6, r0
 80137f0:	b360      	cbz	r0, 801384c <__ssputs_r+0xa0>
 80137f2:	6921      	ldr	r1, [r4, #16]
 80137f4:	464a      	mov	r2, r9
 80137f6:	f7fe fd20 	bl	801223a <memcpy>
 80137fa:	89a3      	ldrh	r3, [r4, #12]
 80137fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013804:	81a3      	strh	r3, [r4, #12]
 8013806:	6126      	str	r6, [r4, #16]
 8013808:	6165      	str	r5, [r4, #20]
 801380a:	444e      	add	r6, r9
 801380c:	eba5 0509 	sub.w	r5, r5, r9
 8013810:	6026      	str	r6, [r4, #0]
 8013812:	60a5      	str	r5, [r4, #8]
 8013814:	463e      	mov	r6, r7
 8013816:	42be      	cmp	r6, r7
 8013818:	d900      	bls.n	801381c <__ssputs_r+0x70>
 801381a:	463e      	mov	r6, r7
 801381c:	6820      	ldr	r0, [r4, #0]
 801381e:	4632      	mov	r2, r6
 8013820:	4641      	mov	r1, r8
 8013822:	f7fe fc0b 	bl	801203c <memmove>
 8013826:	68a3      	ldr	r3, [r4, #8]
 8013828:	1b9b      	subs	r3, r3, r6
 801382a:	60a3      	str	r3, [r4, #8]
 801382c:	6823      	ldr	r3, [r4, #0]
 801382e:	4433      	add	r3, r6
 8013830:	6023      	str	r3, [r4, #0]
 8013832:	2000      	movs	r0, #0
 8013834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013838:	462a      	mov	r2, r5
 801383a:	f7fd fd8b 	bl	8011354 <_realloc_r>
 801383e:	4606      	mov	r6, r0
 8013840:	2800      	cmp	r0, #0
 8013842:	d1e0      	bne.n	8013806 <__ssputs_r+0x5a>
 8013844:	6921      	ldr	r1, [r4, #16]
 8013846:	4650      	mov	r0, sl
 8013848:	f7ff fbe0 	bl	801300c <_free_r>
 801384c:	230c      	movs	r3, #12
 801384e:	f8ca 3000 	str.w	r3, [sl]
 8013852:	89a3      	ldrh	r3, [r4, #12]
 8013854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013858:	81a3      	strh	r3, [r4, #12]
 801385a:	f04f 30ff 	mov.w	r0, #4294967295
 801385e:	e7e9      	b.n	8013834 <__ssputs_r+0x88>

08013860 <_svfiprintf_r>:
 8013860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013864:	4698      	mov	r8, r3
 8013866:	898b      	ldrh	r3, [r1, #12]
 8013868:	061b      	lsls	r3, r3, #24
 801386a:	b09d      	sub	sp, #116	; 0x74
 801386c:	4607      	mov	r7, r0
 801386e:	460d      	mov	r5, r1
 8013870:	4614      	mov	r4, r2
 8013872:	d50e      	bpl.n	8013892 <_svfiprintf_r+0x32>
 8013874:	690b      	ldr	r3, [r1, #16]
 8013876:	b963      	cbnz	r3, 8013892 <_svfiprintf_r+0x32>
 8013878:	2140      	movs	r1, #64	; 0x40
 801387a:	f7fd fcdf 	bl	801123c <_malloc_r>
 801387e:	6028      	str	r0, [r5, #0]
 8013880:	6128      	str	r0, [r5, #16]
 8013882:	b920      	cbnz	r0, 801388e <_svfiprintf_r+0x2e>
 8013884:	230c      	movs	r3, #12
 8013886:	603b      	str	r3, [r7, #0]
 8013888:	f04f 30ff 	mov.w	r0, #4294967295
 801388c:	e0d0      	b.n	8013a30 <_svfiprintf_r+0x1d0>
 801388e:	2340      	movs	r3, #64	; 0x40
 8013890:	616b      	str	r3, [r5, #20]
 8013892:	2300      	movs	r3, #0
 8013894:	9309      	str	r3, [sp, #36]	; 0x24
 8013896:	2320      	movs	r3, #32
 8013898:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801389c:	f8cd 800c 	str.w	r8, [sp, #12]
 80138a0:	2330      	movs	r3, #48	; 0x30
 80138a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013a48 <_svfiprintf_r+0x1e8>
 80138a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80138aa:	f04f 0901 	mov.w	r9, #1
 80138ae:	4623      	mov	r3, r4
 80138b0:	469a      	mov	sl, r3
 80138b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138b6:	b10a      	cbz	r2, 80138bc <_svfiprintf_r+0x5c>
 80138b8:	2a25      	cmp	r2, #37	; 0x25
 80138ba:	d1f9      	bne.n	80138b0 <_svfiprintf_r+0x50>
 80138bc:	ebba 0b04 	subs.w	fp, sl, r4
 80138c0:	d00b      	beq.n	80138da <_svfiprintf_r+0x7a>
 80138c2:	465b      	mov	r3, fp
 80138c4:	4622      	mov	r2, r4
 80138c6:	4629      	mov	r1, r5
 80138c8:	4638      	mov	r0, r7
 80138ca:	f7ff ff6f 	bl	80137ac <__ssputs_r>
 80138ce:	3001      	adds	r0, #1
 80138d0:	f000 80a9 	beq.w	8013a26 <_svfiprintf_r+0x1c6>
 80138d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80138d6:	445a      	add	r2, fp
 80138d8:	9209      	str	r2, [sp, #36]	; 0x24
 80138da:	f89a 3000 	ldrb.w	r3, [sl]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	f000 80a1 	beq.w	8013a26 <_svfiprintf_r+0x1c6>
 80138e4:	2300      	movs	r3, #0
 80138e6:	f04f 32ff 	mov.w	r2, #4294967295
 80138ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80138ee:	f10a 0a01 	add.w	sl, sl, #1
 80138f2:	9304      	str	r3, [sp, #16]
 80138f4:	9307      	str	r3, [sp, #28]
 80138f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80138fa:	931a      	str	r3, [sp, #104]	; 0x68
 80138fc:	4654      	mov	r4, sl
 80138fe:	2205      	movs	r2, #5
 8013900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013904:	4850      	ldr	r0, [pc, #320]	; (8013a48 <_svfiprintf_r+0x1e8>)
 8013906:	f7ec fc73 	bl	80001f0 <memchr>
 801390a:	9a04      	ldr	r2, [sp, #16]
 801390c:	b9d8      	cbnz	r0, 8013946 <_svfiprintf_r+0xe6>
 801390e:	06d0      	lsls	r0, r2, #27
 8013910:	bf44      	itt	mi
 8013912:	2320      	movmi	r3, #32
 8013914:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013918:	0711      	lsls	r1, r2, #28
 801391a:	bf44      	itt	mi
 801391c:	232b      	movmi	r3, #43	; 0x2b
 801391e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013922:	f89a 3000 	ldrb.w	r3, [sl]
 8013926:	2b2a      	cmp	r3, #42	; 0x2a
 8013928:	d015      	beq.n	8013956 <_svfiprintf_r+0xf6>
 801392a:	9a07      	ldr	r2, [sp, #28]
 801392c:	4654      	mov	r4, sl
 801392e:	2000      	movs	r0, #0
 8013930:	f04f 0c0a 	mov.w	ip, #10
 8013934:	4621      	mov	r1, r4
 8013936:	f811 3b01 	ldrb.w	r3, [r1], #1
 801393a:	3b30      	subs	r3, #48	; 0x30
 801393c:	2b09      	cmp	r3, #9
 801393e:	d94d      	bls.n	80139dc <_svfiprintf_r+0x17c>
 8013940:	b1b0      	cbz	r0, 8013970 <_svfiprintf_r+0x110>
 8013942:	9207      	str	r2, [sp, #28]
 8013944:	e014      	b.n	8013970 <_svfiprintf_r+0x110>
 8013946:	eba0 0308 	sub.w	r3, r0, r8
 801394a:	fa09 f303 	lsl.w	r3, r9, r3
 801394e:	4313      	orrs	r3, r2
 8013950:	9304      	str	r3, [sp, #16]
 8013952:	46a2      	mov	sl, r4
 8013954:	e7d2      	b.n	80138fc <_svfiprintf_r+0x9c>
 8013956:	9b03      	ldr	r3, [sp, #12]
 8013958:	1d19      	adds	r1, r3, #4
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	9103      	str	r1, [sp, #12]
 801395e:	2b00      	cmp	r3, #0
 8013960:	bfbb      	ittet	lt
 8013962:	425b      	neglt	r3, r3
 8013964:	f042 0202 	orrlt.w	r2, r2, #2
 8013968:	9307      	strge	r3, [sp, #28]
 801396a:	9307      	strlt	r3, [sp, #28]
 801396c:	bfb8      	it	lt
 801396e:	9204      	strlt	r2, [sp, #16]
 8013970:	7823      	ldrb	r3, [r4, #0]
 8013972:	2b2e      	cmp	r3, #46	; 0x2e
 8013974:	d10c      	bne.n	8013990 <_svfiprintf_r+0x130>
 8013976:	7863      	ldrb	r3, [r4, #1]
 8013978:	2b2a      	cmp	r3, #42	; 0x2a
 801397a:	d134      	bne.n	80139e6 <_svfiprintf_r+0x186>
 801397c:	9b03      	ldr	r3, [sp, #12]
 801397e:	1d1a      	adds	r2, r3, #4
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	9203      	str	r2, [sp, #12]
 8013984:	2b00      	cmp	r3, #0
 8013986:	bfb8      	it	lt
 8013988:	f04f 33ff 	movlt.w	r3, #4294967295
 801398c:	3402      	adds	r4, #2
 801398e:	9305      	str	r3, [sp, #20]
 8013990:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8013a58 <_svfiprintf_r+0x1f8>
 8013994:	7821      	ldrb	r1, [r4, #0]
 8013996:	2203      	movs	r2, #3
 8013998:	4650      	mov	r0, sl
 801399a:	f7ec fc29 	bl	80001f0 <memchr>
 801399e:	b138      	cbz	r0, 80139b0 <_svfiprintf_r+0x150>
 80139a0:	9b04      	ldr	r3, [sp, #16]
 80139a2:	eba0 000a 	sub.w	r0, r0, sl
 80139a6:	2240      	movs	r2, #64	; 0x40
 80139a8:	4082      	lsls	r2, r0
 80139aa:	4313      	orrs	r3, r2
 80139ac:	3401      	adds	r4, #1
 80139ae:	9304      	str	r3, [sp, #16]
 80139b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139b4:	4825      	ldr	r0, [pc, #148]	; (8013a4c <_svfiprintf_r+0x1ec>)
 80139b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80139ba:	2206      	movs	r2, #6
 80139bc:	f7ec fc18 	bl	80001f0 <memchr>
 80139c0:	2800      	cmp	r0, #0
 80139c2:	d038      	beq.n	8013a36 <_svfiprintf_r+0x1d6>
 80139c4:	4b22      	ldr	r3, [pc, #136]	; (8013a50 <_svfiprintf_r+0x1f0>)
 80139c6:	bb1b      	cbnz	r3, 8013a10 <_svfiprintf_r+0x1b0>
 80139c8:	9b03      	ldr	r3, [sp, #12]
 80139ca:	3307      	adds	r3, #7
 80139cc:	f023 0307 	bic.w	r3, r3, #7
 80139d0:	3308      	adds	r3, #8
 80139d2:	9303      	str	r3, [sp, #12]
 80139d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139d6:	4433      	add	r3, r6
 80139d8:	9309      	str	r3, [sp, #36]	; 0x24
 80139da:	e768      	b.n	80138ae <_svfiprintf_r+0x4e>
 80139dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80139e0:	460c      	mov	r4, r1
 80139e2:	2001      	movs	r0, #1
 80139e4:	e7a6      	b.n	8013934 <_svfiprintf_r+0xd4>
 80139e6:	2300      	movs	r3, #0
 80139e8:	3401      	adds	r4, #1
 80139ea:	9305      	str	r3, [sp, #20]
 80139ec:	4619      	mov	r1, r3
 80139ee:	f04f 0c0a 	mov.w	ip, #10
 80139f2:	4620      	mov	r0, r4
 80139f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80139f8:	3a30      	subs	r2, #48	; 0x30
 80139fa:	2a09      	cmp	r2, #9
 80139fc:	d903      	bls.n	8013a06 <_svfiprintf_r+0x1a6>
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d0c6      	beq.n	8013990 <_svfiprintf_r+0x130>
 8013a02:	9105      	str	r1, [sp, #20]
 8013a04:	e7c4      	b.n	8013990 <_svfiprintf_r+0x130>
 8013a06:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a0a:	4604      	mov	r4, r0
 8013a0c:	2301      	movs	r3, #1
 8013a0e:	e7f0      	b.n	80139f2 <_svfiprintf_r+0x192>
 8013a10:	ab03      	add	r3, sp, #12
 8013a12:	9300      	str	r3, [sp, #0]
 8013a14:	462a      	mov	r2, r5
 8013a16:	4b0f      	ldr	r3, [pc, #60]	; (8013a54 <_svfiprintf_r+0x1f4>)
 8013a18:	a904      	add	r1, sp, #16
 8013a1a:	4638      	mov	r0, r7
 8013a1c:	f7fd fd6a 	bl	80114f4 <_printf_float>
 8013a20:	1c42      	adds	r2, r0, #1
 8013a22:	4606      	mov	r6, r0
 8013a24:	d1d6      	bne.n	80139d4 <_svfiprintf_r+0x174>
 8013a26:	89ab      	ldrh	r3, [r5, #12]
 8013a28:	065b      	lsls	r3, r3, #25
 8013a2a:	f53f af2d 	bmi.w	8013888 <_svfiprintf_r+0x28>
 8013a2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a30:	b01d      	add	sp, #116	; 0x74
 8013a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a36:	ab03      	add	r3, sp, #12
 8013a38:	9300      	str	r3, [sp, #0]
 8013a3a:	462a      	mov	r2, r5
 8013a3c:	4b05      	ldr	r3, [pc, #20]	; (8013a54 <_svfiprintf_r+0x1f4>)
 8013a3e:	a904      	add	r1, sp, #16
 8013a40:	4638      	mov	r0, r7
 8013a42:	f7fd fffb 	bl	8011a3c <_printf_i>
 8013a46:	e7eb      	b.n	8013a20 <_svfiprintf_r+0x1c0>
 8013a48:	08017a4c 	.word	0x08017a4c
 8013a4c:	08017a56 	.word	0x08017a56
 8013a50:	080114f5 	.word	0x080114f5
 8013a54:	080137ad 	.word	0x080137ad
 8013a58:	08017a52 	.word	0x08017a52

08013a5c <__sfputc_r>:
 8013a5c:	6893      	ldr	r3, [r2, #8]
 8013a5e:	3b01      	subs	r3, #1
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	b410      	push	{r4}
 8013a64:	6093      	str	r3, [r2, #8]
 8013a66:	da08      	bge.n	8013a7a <__sfputc_r+0x1e>
 8013a68:	6994      	ldr	r4, [r2, #24]
 8013a6a:	42a3      	cmp	r3, r4
 8013a6c:	db01      	blt.n	8013a72 <__sfputc_r+0x16>
 8013a6e:	290a      	cmp	r1, #10
 8013a70:	d103      	bne.n	8013a7a <__sfputc_r+0x1e>
 8013a72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a76:	f7fe ba4c 	b.w	8011f12 <__swbuf_r>
 8013a7a:	6813      	ldr	r3, [r2, #0]
 8013a7c:	1c58      	adds	r0, r3, #1
 8013a7e:	6010      	str	r0, [r2, #0]
 8013a80:	7019      	strb	r1, [r3, #0]
 8013a82:	4608      	mov	r0, r1
 8013a84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a88:	4770      	bx	lr

08013a8a <__sfputs_r>:
 8013a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a8c:	4606      	mov	r6, r0
 8013a8e:	460f      	mov	r7, r1
 8013a90:	4614      	mov	r4, r2
 8013a92:	18d5      	adds	r5, r2, r3
 8013a94:	42ac      	cmp	r4, r5
 8013a96:	d101      	bne.n	8013a9c <__sfputs_r+0x12>
 8013a98:	2000      	movs	r0, #0
 8013a9a:	e007      	b.n	8013aac <__sfputs_r+0x22>
 8013a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013aa0:	463a      	mov	r2, r7
 8013aa2:	4630      	mov	r0, r6
 8013aa4:	f7ff ffda 	bl	8013a5c <__sfputc_r>
 8013aa8:	1c43      	adds	r3, r0, #1
 8013aaa:	d1f3      	bne.n	8013a94 <__sfputs_r+0xa>
 8013aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013ab0 <_vfiprintf_r>:
 8013ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ab4:	460d      	mov	r5, r1
 8013ab6:	b09d      	sub	sp, #116	; 0x74
 8013ab8:	4614      	mov	r4, r2
 8013aba:	4698      	mov	r8, r3
 8013abc:	4606      	mov	r6, r0
 8013abe:	b118      	cbz	r0, 8013ac8 <_vfiprintf_r+0x18>
 8013ac0:	6a03      	ldr	r3, [r0, #32]
 8013ac2:	b90b      	cbnz	r3, 8013ac8 <_vfiprintf_r+0x18>
 8013ac4:	f7fe f968 	bl	8011d98 <__sinit>
 8013ac8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013aca:	07d9      	lsls	r1, r3, #31
 8013acc:	d405      	bmi.n	8013ada <_vfiprintf_r+0x2a>
 8013ace:	89ab      	ldrh	r3, [r5, #12]
 8013ad0:	059a      	lsls	r2, r3, #22
 8013ad2:	d402      	bmi.n	8013ada <_vfiprintf_r+0x2a>
 8013ad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013ad6:	f7fe fbae 	bl	8012236 <__retarget_lock_acquire_recursive>
 8013ada:	89ab      	ldrh	r3, [r5, #12]
 8013adc:	071b      	lsls	r3, r3, #28
 8013ade:	d501      	bpl.n	8013ae4 <_vfiprintf_r+0x34>
 8013ae0:	692b      	ldr	r3, [r5, #16]
 8013ae2:	b99b      	cbnz	r3, 8013b0c <_vfiprintf_r+0x5c>
 8013ae4:	4629      	mov	r1, r5
 8013ae6:	4630      	mov	r0, r6
 8013ae8:	f7fe fa50 	bl	8011f8c <__swsetup_r>
 8013aec:	b170      	cbz	r0, 8013b0c <_vfiprintf_r+0x5c>
 8013aee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013af0:	07dc      	lsls	r4, r3, #31
 8013af2:	d504      	bpl.n	8013afe <_vfiprintf_r+0x4e>
 8013af4:	f04f 30ff 	mov.w	r0, #4294967295
 8013af8:	b01d      	add	sp, #116	; 0x74
 8013afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013afe:	89ab      	ldrh	r3, [r5, #12]
 8013b00:	0598      	lsls	r0, r3, #22
 8013b02:	d4f7      	bmi.n	8013af4 <_vfiprintf_r+0x44>
 8013b04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013b06:	f7fe fb97 	bl	8012238 <__retarget_lock_release_recursive>
 8013b0a:	e7f3      	b.n	8013af4 <_vfiprintf_r+0x44>
 8013b0c:	2300      	movs	r3, #0
 8013b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8013b10:	2320      	movs	r3, #32
 8013b12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013b16:	f8cd 800c 	str.w	r8, [sp, #12]
 8013b1a:	2330      	movs	r3, #48	; 0x30
 8013b1c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013cd0 <_vfiprintf_r+0x220>
 8013b20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013b24:	f04f 0901 	mov.w	r9, #1
 8013b28:	4623      	mov	r3, r4
 8013b2a:	469a      	mov	sl, r3
 8013b2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b30:	b10a      	cbz	r2, 8013b36 <_vfiprintf_r+0x86>
 8013b32:	2a25      	cmp	r2, #37	; 0x25
 8013b34:	d1f9      	bne.n	8013b2a <_vfiprintf_r+0x7a>
 8013b36:	ebba 0b04 	subs.w	fp, sl, r4
 8013b3a:	d00b      	beq.n	8013b54 <_vfiprintf_r+0xa4>
 8013b3c:	465b      	mov	r3, fp
 8013b3e:	4622      	mov	r2, r4
 8013b40:	4629      	mov	r1, r5
 8013b42:	4630      	mov	r0, r6
 8013b44:	f7ff ffa1 	bl	8013a8a <__sfputs_r>
 8013b48:	3001      	adds	r0, #1
 8013b4a:	f000 80a9 	beq.w	8013ca0 <_vfiprintf_r+0x1f0>
 8013b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b50:	445a      	add	r2, fp
 8013b52:	9209      	str	r2, [sp, #36]	; 0x24
 8013b54:	f89a 3000 	ldrb.w	r3, [sl]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	f000 80a1 	beq.w	8013ca0 <_vfiprintf_r+0x1f0>
 8013b5e:	2300      	movs	r3, #0
 8013b60:	f04f 32ff 	mov.w	r2, #4294967295
 8013b64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b68:	f10a 0a01 	add.w	sl, sl, #1
 8013b6c:	9304      	str	r3, [sp, #16]
 8013b6e:	9307      	str	r3, [sp, #28]
 8013b70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013b74:	931a      	str	r3, [sp, #104]	; 0x68
 8013b76:	4654      	mov	r4, sl
 8013b78:	2205      	movs	r2, #5
 8013b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b7e:	4854      	ldr	r0, [pc, #336]	; (8013cd0 <_vfiprintf_r+0x220>)
 8013b80:	f7ec fb36 	bl	80001f0 <memchr>
 8013b84:	9a04      	ldr	r2, [sp, #16]
 8013b86:	b9d8      	cbnz	r0, 8013bc0 <_vfiprintf_r+0x110>
 8013b88:	06d1      	lsls	r1, r2, #27
 8013b8a:	bf44      	itt	mi
 8013b8c:	2320      	movmi	r3, #32
 8013b8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b92:	0713      	lsls	r3, r2, #28
 8013b94:	bf44      	itt	mi
 8013b96:	232b      	movmi	r3, #43	; 0x2b
 8013b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8013ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8013ba2:	d015      	beq.n	8013bd0 <_vfiprintf_r+0x120>
 8013ba4:	9a07      	ldr	r2, [sp, #28]
 8013ba6:	4654      	mov	r4, sl
 8013ba8:	2000      	movs	r0, #0
 8013baa:	f04f 0c0a 	mov.w	ip, #10
 8013bae:	4621      	mov	r1, r4
 8013bb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013bb4:	3b30      	subs	r3, #48	; 0x30
 8013bb6:	2b09      	cmp	r3, #9
 8013bb8:	d94d      	bls.n	8013c56 <_vfiprintf_r+0x1a6>
 8013bba:	b1b0      	cbz	r0, 8013bea <_vfiprintf_r+0x13a>
 8013bbc:	9207      	str	r2, [sp, #28]
 8013bbe:	e014      	b.n	8013bea <_vfiprintf_r+0x13a>
 8013bc0:	eba0 0308 	sub.w	r3, r0, r8
 8013bc4:	fa09 f303 	lsl.w	r3, r9, r3
 8013bc8:	4313      	orrs	r3, r2
 8013bca:	9304      	str	r3, [sp, #16]
 8013bcc:	46a2      	mov	sl, r4
 8013bce:	e7d2      	b.n	8013b76 <_vfiprintf_r+0xc6>
 8013bd0:	9b03      	ldr	r3, [sp, #12]
 8013bd2:	1d19      	adds	r1, r3, #4
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	9103      	str	r1, [sp, #12]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	bfbb      	ittet	lt
 8013bdc:	425b      	neglt	r3, r3
 8013bde:	f042 0202 	orrlt.w	r2, r2, #2
 8013be2:	9307      	strge	r3, [sp, #28]
 8013be4:	9307      	strlt	r3, [sp, #28]
 8013be6:	bfb8      	it	lt
 8013be8:	9204      	strlt	r2, [sp, #16]
 8013bea:	7823      	ldrb	r3, [r4, #0]
 8013bec:	2b2e      	cmp	r3, #46	; 0x2e
 8013bee:	d10c      	bne.n	8013c0a <_vfiprintf_r+0x15a>
 8013bf0:	7863      	ldrb	r3, [r4, #1]
 8013bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8013bf4:	d134      	bne.n	8013c60 <_vfiprintf_r+0x1b0>
 8013bf6:	9b03      	ldr	r3, [sp, #12]
 8013bf8:	1d1a      	adds	r2, r3, #4
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	9203      	str	r2, [sp, #12]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	bfb8      	it	lt
 8013c02:	f04f 33ff 	movlt.w	r3, #4294967295
 8013c06:	3402      	adds	r4, #2
 8013c08:	9305      	str	r3, [sp, #20]
 8013c0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013ce0 <_vfiprintf_r+0x230>
 8013c0e:	7821      	ldrb	r1, [r4, #0]
 8013c10:	2203      	movs	r2, #3
 8013c12:	4650      	mov	r0, sl
 8013c14:	f7ec faec 	bl	80001f0 <memchr>
 8013c18:	b138      	cbz	r0, 8013c2a <_vfiprintf_r+0x17a>
 8013c1a:	9b04      	ldr	r3, [sp, #16]
 8013c1c:	eba0 000a 	sub.w	r0, r0, sl
 8013c20:	2240      	movs	r2, #64	; 0x40
 8013c22:	4082      	lsls	r2, r0
 8013c24:	4313      	orrs	r3, r2
 8013c26:	3401      	adds	r4, #1
 8013c28:	9304      	str	r3, [sp, #16]
 8013c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c2e:	4829      	ldr	r0, [pc, #164]	; (8013cd4 <_vfiprintf_r+0x224>)
 8013c30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013c34:	2206      	movs	r2, #6
 8013c36:	f7ec fadb 	bl	80001f0 <memchr>
 8013c3a:	2800      	cmp	r0, #0
 8013c3c:	d03f      	beq.n	8013cbe <_vfiprintf_r+0x20e>
 8013c3e:	4b26      	ldr	r3, [pc, #152]	; (8013cd8 <_vfiprintf_r+0x228>)
 8013c40:	bb1b      	cbnz	r3, 8013c8a <_vfiprintf_r+0x1da>
 8013c42:	9b03      	ldr	r3, [sp, #12]
 8013c44:	3307      	adds	r3, #7
 8013c46:	f023 0307 	bic.w	r3, r3, #7
 8013c4a:	3308      	adds	r3, #8
 8013c4c:	9303      	str	r3, [sp, #12]
 8013c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c50:	443b      	add	r3, r7
 8013c52:	9309      	str	r3, [sp, #36]	; 0x24
 8013c54:	e768      	b.n	8013b28 <_vfiprintf_r+0x78>
 8013c56:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c5a:	460c      	mov	r4, r1
 8013c5c:	2001      	movs	r0, #1
 8013c5e:	e7a6      	b.n	8013bae <_vfiprintf_r+0xfe>
 8013c60:	2300      	movs	r3, #0
 8013c62:	3401      	adds	r4, #1
 8013c64:	9305      	str	r3, [sp, #20]
 8013c66:	4619      	mov	r1, r3
 8013c68:	f04f 0c0a 	mov.w	ip, #10
 8013c6c:	4620      	mov	r0, r4
 8013c6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c72:	3a30      	subs	r2, #48	; 0x30
 8013c74:	2a09      	cmp	r2, #9
 8013c76:	d903      	bls.n	8013c80 <_vfiprintf_r+0x1d0>
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d0c6      	beq.n	8013c0a <_vfiprintf_r+0x15a>
 8013c7c:	9105      	str	r1, [sp, #20]
 8013c7e:	e7c4      	b.n	8013c0a <_vfiprintf_r+0x15a>
 8013c80:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c84:	4604      	mov	r4, r0
 8013c86:	2301      	movs	r3, #1
 8013c88:	e7f0      	b.n	8013c6c <_vfiprintf_r+0x1bc>
 8013c8a:	ab03      	add	r3, sp, #12
 8013c8c:	9300      	str	r3, [sp, #0]
 8013c8e:	462a      	mov	r2, r5
 8013c90:	4b12      	ldr	r3, [pc, #72]	; (8013cdc <_vfiprintf_r+0x22c>)
 8013c92:	a904      	add	r1, sp, #16
 8013c94:	4630      	mov	r0, r6
 8013c96:	f7fd fc2d 	bl	80114f4 <_printf_float>
 8013c9a:	4607      	mov	r7, r0
 8013c9c:	1c78      	adds	r0, r7, #1
 8013c9e:	d1d6      	bne.n	8013c4e <_vfiprintf_r+0x19e>
 8013ca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013ca2:	07d9      	lsls	r1, r3, #31
 8013ca4:	d405      	bmi.n	8013cb2 <_vfiprintf_r+0x202>
 8013ca6:	89ab      	ldrh	r3, [r5, #12]
 8013ca8:	059a      	lsls	r2, r3, #22
 8013caa:	d402      	bmi.n	8013cb2 <_vfiprintf_r+0x202>
 8013cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013cae:	f7fe fac3 	bl	8012238 <__retarget_lock_release_recursive>
 8013cb2:	89ab      	ldrh	r3, [r5, #12]
 8013cb4:	065b      	lsls	r3, r3, #25
 8013cb6:	f53f af1d 	bmi.w	8013af4 <_vfiprintf_r+0x44>
 8013cba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013cbc:	e71c      	b.n	8013af8 <_vfiprintf_r+0x48>
 8013cbe:	ab03      	add	r3, sp, #12
 8013cc0:	9300      	str	r3, [sp, #0]
 8013cc2:	462a      	mov	r2, r5
 8013cc4:	4b05      	ldr	r3, [pc, #20]	; (8013cdc <_vfiprintf_r+0x22c>)
 8013cc6:	a904      	add	r1, sp, #16
 8013cc8:	4630      	mov	r0, r6
 8013cca:	f7fd feb7 	bl	8011a3c <_printf_i>
 8013cce:	e7e4      	b.n	8013c9a <_vfiprintf_r+0x1ea>
 8013cd0:	08017a4c 	.word	0x08017a4c
 8013cd4:	08017a56 	.word	0x08017a56
 8013cd8:	080114f5 	.word	0x080114f5
 8013cdc:	08013a8b 	.word	0x08013a8b
 8013ce0:	08017a52 	.word	0x08017a52

08013ce4 <__sflush_r>:
 8013ce4:	898a      	ldrh	r2, [r1, #12]
 8013ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cea:	4605      	mov	r5, r0
 8013cec:	0710      	lsls	r0, r2, #28
 8013cee:	460c      	mov	r4, r1
 8013cf0:	d458      	bmi.n	8013da4 <__sflush_r+0xc0>
 8013cf2:	684b      	ldr	r3, [r1, #4]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	dc05      	bgt.n	8013d04 <__sflush_r+0x20>
 8013cf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	dc02      	bgt.n	8013d04 <__sflush_r+0x20>
 8013cfe:	2000      	movs	r0, #0
 8013d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d06:	2e00      	cmp	r6, #0
 8013d08:	d0f9      	beq.n	8013cfe <__sflush_r+0x1a>
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013d10:	682f      	ldr	r7, [r5, #0]
 8013d12:	6a21      	ldr	r1, [r4, #32]
 8013d14:	602b      	str	r3, [r5, #0]
 8013d16:	d032      	beq.n	8013d7e <__sflush_r+0x9a>
 8013d18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013d1a:	89a3      	ldrh	r3, [r4, #12]
 8013d1c:	075a      	lsls	r2, r3, #29
 8013d1e:	d505      	bpl.n	8013d2c <__sflush_r+0x48>
 8013d20:	6863      	ldr	r3, [r4, #4]
 8013d22:	1ac0      	subs	r0, r0, r3
 8013d24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013d26:	b10b      	cbz	r3, 8013d2c <__sflush_r+0x48>
 8013d28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013d2a:	1ac0      	subs	r0, r0, r3
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	4602      	mov	r2, r0
 8013d30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d32:	6a21      	ldr	r1, [r4, #32]
 8013d34:	4628      	mov	r0, r5
 8013d36:	47b0      	blx	r6
 8013d38:	1c43      	adds	r3, r0, #1
 8013d3a:	89a3      	ldrh	r3, [r4, #12]
 8013d3c:	d106      	bne.n	8013d4c <__sflush_r+0x68>
 8013d3e:	6829      	ldr	r1, [r5, #0]
 8013d40:	291d      	cmp	r1, #29
 8013d42:	d82b      	bhi.n	8013d9c <__sflush_r+0xb8>
 8013d44:	4a29      	ldr	r2, [pc, #164]	; (8013dec <__sflush_r+0x108>)
 8013d46:	410a      	asrs	r2, r1
 8013d48:	07d6      	lsls	r6, r2, #31
 8013d4a:	d427      	bmi.n	8013d9c <__sflush_r+0xb8>
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	6062      	str	r2, [r4, #4]
 8013d50:	04d9      	lsls	r1, r3, #19
 8013d52:	6922      	ldr	r2, [r4, #16]
 8013d54:	6022      	str	r2, [r4, #0]
 8013d56:	d504      	bpl.n	8013d62 <__sflush_r+0x7e>
 8013d58:	1c42      	adds	r2, r0, #1
 8013d5a:	d101      	bne.n	8013d60 <__sflush_r+0x7c>
 8013d5c:	682b      	ldr	r3, [r5, #0]
 8013d5e:	b903      	cbnz	r3, 8013d62 <__sflush_r+0x7e>
 8013d60:	6560      	str	r0, [r4, #84]	; 0x54
 8013d62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d64:	602f      	str	r7, [r5, #0]
 8013d66:	2900      	cmp	r1, #0
 8013d68:	d0c9      	beq.n	8013cfe <__sflush_r+0x1a>
 8013d6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d6e:	4299      	cmp	r1, r3
 8013d70:	d002      	beq.n	8013d78 <__sflush_r+0x94>
 8013d72:	4628      	mov	r0, r5
 8013d74:	f7ff f94a 	bl	801300c <_free_r>
 8013d78:	2000      	movs	r0, #0
 8013d7a:	6360      	str	r0, [r4, #52]	; 0x34
 8013d7c:	e7c0      	b.n	8013d00 <__sflush_r+0x1c>
 8013d7e:	2301      	movs	r3, #1
 8013d80:	4628      	mov	r0, r5
 8013d82:	47b0      	blx	r6
 8013d84:	1c41      	adds	r1, r0, #1
 8013d86:	d1c8      	bne.n	8013d1a <__sflush_r+0x36>
 8013d88:	682b      	ldr	r3, [r5, #0]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d0c5      	beq.n	8013d1a <__sflush_r+0x36>
 8013d8e:	2b1d      	cmp	r3, #29
 8013d90:	d001      	beq.n	8013d96 <__sflush_r+0xb2>
 8013d92:	2b16      	cmp	r3, #22
 8013d94:	d101      	bne.n	8013d9a <__sflush_r+0xb6>
 8013d96:	602f      	str	r7, [r5, #0]
 8013d98:	e7b1      	b.n	8013cfe <__sflush_r+0x1a>
 8013d9a:	89a3      	ldrh	r3, [r4, #12]
 8013d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013da0:	81a3      	strh	r3, [r4, #12]
 8013da2:	e7ad      	b.n	8013d00 <__sflush_r+0x1c>
 8013da4:	690f      	ldr	r7, [r1, #16]
 8013da6:	2f00      	cmp	r7, #0
 8013da8:	d0a9      	beq.n	8013cfe <__sflush_r+0x1a>
 8013daa:	0793      	lsls	r3, r2, #30
 8013dac:	680e      	ldr	r6, [r1, #0]
 8013dae:	bf08      	it	eq
 8013db0:	694b      	ldreq	r3, [r1, #20]
 8013db2:	600f      	str	r7, [r1, #0]
 8013db4:	bf18      	it	ne
 8013db6:	2300      	movne	r3, #0
 8013db8:	eba6 0807 	sub.w	r8, r6, r7
 8013dbc:	608b      	str	r3, [r1, #8]
 8013dbe:	f1b8 0f00 	cmp.w	r8, #0
 8013dc2:	dd9c      	ble.n	8013cfe <__sflush_r+0x1a>
 8013dc4:	6a21      	ldr	r1, [r4, #32]
 8013dc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013dc8:	4643      	mov	r3, r8
 8013dca:	463a      	mov	r2, r7
 8013dcc:	4628      	mov	r0, r5
 8013dce:	47b0      	blx	r6
 8013dd0:	2800      	cmp	r0, #0
 8013dd2:	dc06      	bgt.n	8013de2 <__sflush_r+0xfe>
 8013dd4:	89a3      	ldrh	r3, [r4, #12]
 8013dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013dda:	81a3      	strh	r3, [r4, #12]
 8013ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8013de0:	e78e      	b.n	8013d00 <__sflush_r+0x1c>
 8013de2:	4407      	add	r7, r0
 8013de4:	eba8 0800 	sub.w	r8, r8, r0
 8013de8:	e7e9      	b.n	8013dbe <__sflush_r+0xda>
 8013dea:	bf00      	nop
 8013dec:	dfbffffe 	.word	0xdfbffffe

08013df0 <_fflush_r>:
 8013df0:	b538      	push	{r3, r4, r5, lr}
 8013df2:	690b      	ldr	r3, [r1, #16]
 8013df4:	4605      	mov	r5, r0
 8013df6:	460c      	mov	r4, r1
 8013df8:	b913      	cbnz	r3, 8013e00 <_fflush_r+0x10>
 8013dfa:	2500      	movs	r5, #0
 8013dfc:	4628      	mov	r0, r5
 8013dfe:	bd38      	pop	{r3, r4, r5, pc}
 8013e00:	b118      	cbz	r0, 8013e0a <_fflush_r+0x1a>
 8013e02:	6a03      	ldr	r3, [r0, #32]
 8013e04:	b90b      	cbnz	r3, 8013e0a <_fflush_r+0x1a>
 8013e06:	f7fd ffc7 	bl	8011d98 <__sinit>
 8013e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d0f3      	beq.n	8013dfa <_fflush_r+0xa>
 8013e12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013e14:	07d0      	lsls	r0, r2, #31
 8013e16:	d404      	bmi.n	8013e22 <_fflush_r+0x32>
 8013e18:	0599      	lsls	r1, r3, #22
 8013e1a:	d402      	bmi.n	8013e22 <_fflush_r+0x32>
 8013e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e1e:	f7fe fa0a 	bl	8012236 <__retarget_lock_acquire_recursive>
 8013e22:	4628      	mov	r0, r5
 8013e24:	4621      	mov	r1, r4
 8013e26:	f7ff ff5d 	bl	8013ce4 <__sflush_r>
 8013e2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e2c:	07da      	lsls	r2, r3, #31
 8013e2e:	4605      	mov	r5, r0
 8013e30:	d4e4      	bmi.n	8013dfc <_fflush_r+0xc>
 8013e32:	89a3      	ldrh	r3, [r4, #12]
 8013e34:	059b      	lsls	r3, r3, #22
 8013e36:	d4e1      	bmi.n	8013dfc <_fflush_r+0xc>
 8013e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e3a:	f7fe f9fd 	bl	8012238 <__retarget_lock_release_recursive>
 8013e3e:	e7dd      	b.n	8013dfc <_fflush_r+0xc>

08013e40 <__swhatbuf_r>:
 8013e40:	b570      	push	{r4, r5, r6, lr}
 8013e42:	460c      	mov	r4, r1
 8013e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e48:	2900      	cmp	r1, #0
 8013e4a:	b096      	sub	sp, #88	; 0x58
 8013e4c:	4615      	mov	r5, r2
 8013e4e:	461e      	mov	r6, r3
 8013e50:	da0d      	bge.n	8013e6e <__swhatbuf_r+0x2e>
 8013e52:	89a3      	ldrh	r3, [r4, #12]
 8013e54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013e58:	f04f 0100 	mov.w	r1, #0
 8013e5c:	bf0c      	ite	eq
 8013e5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013e62:	2340      	movne	r3, #64	; 0x40
 8013e64:	2000      	movs	r0, #0
 8013e66:	6031      	str	r1, [r6, #0]
 8013e68:	602b      	str	r3, [r5, #0]
 8013e6a:	b016      	add	sp, #88	; 0x58
 8013e6c:	bd70      	pop	{r4, r5, r6, pc}
 8013e6e:	466a      	mov	r2, sp
 8013e70:	f000 f848 	bl	8013f04 <_fstat_r>
 8013e74:	2800      	cmp	r0, #0
 8013e76:	dbec      	blt.n	8013e52 <__swhatbuf_r+0x12>
 8013e78:	9901      	ldr	r1, [sp, #4]
 8013e7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013e7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013e82:	4259      	negs	r1, r3
 8013e84:	4159      	adcs	r1, r3
 8013e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013e8a:	e7eb      	b.n	8013e64 <__swhatbuf_r+0x24>

08013e8c <__smakebuf_r>:
 8013e8c:	898b      	ldrh	r3, [r1, #12]
 8013e8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013e90:	079d      	lsls	r5, r3, #30
 8013e92:	4606      	mov	r6, r0
 8013e94:	460c      	mov	r4, r1
 8013e96:	d507      	bpl.n	8013ea8 <__smakebuf_r+0x1c>
 8013e98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013e9c:	6023      	str	r3, [r4, #0]
 8013e9e:	6123      	str	r3, [r4, #16]
 8013ea0:	2301      	movs	r3, #1
 8013ea2:	6163      	str	r3, [r4, #20]
 8013ea4:	b002      	add	sp, #8
 8013ea6:	bd70      	pop	{r4, r5, r6, pc}
 8013ea8:	ab01      	add	r3, sp, #4
 8013eaa:	466a      	mov	r2, sp
 8013eac:	f7ff ffc8 	bl	8013e40 <__swhatbuf_r>
 8013eb0:	9900      	ldr	r1, [sp, #0]
 8013eb2:	4605      	mov	r5, r0
 8013eb4:	4630      	mov	r0, r6
 8013eb6:	f7fd f9c1 	bl	801123c <_malloc_r>
 8013eba:	b948      	cbnz	r0, 8013ed0 <__smakebuf_r+0x44>
 8013ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ec0:	059a      	lsls	r2, r3, #22
 8013ec2:	d4ef      	bmi.n	8013ea4 <__smakebuf_r+0x18>
 8013ec4:	f023 0303 	bic.w	r3, r3, #3
 8013ec8:	f043 0302 	orr.w	r3, r3, #2
 8013ecc:	81a3      	strh	r3, [r4, #12]
 8013ece:	e7e3      	b.n	8013e98 <__smakebuf_r+0xc>
 8013ed0:	89a3      	ldrh	r3, [r4, #12]
 8013ed2:	6020      	str	r0, [r4, #0]
 8013ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ed8:	81a3      	strh	r3, [r4, #12]
 8013eda:	9b00      	ldr	r3, [sp, #0]
 8013edc:	6163      	str	r3, [r4, #20]
 8013ede:	9b01      	ldr	r3, [sp, #4]
 8013ee0:	6120      	str	r0, [r4, #16]
 8013ee2:	b15b      	cbz	r3, 8013efc <__smakebuf_r+0x70>
 8013ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ee8:	4630      	mov	r0, r6
 8013eea:	f000 f81d 	bl	8013f28 <_isatty_r>
 8013eee:	b128      	cbz	r0, 8013efc <__smakebuf_r+0x70>
 8013ef0:	89a3      	ldrh	r3, [r4, #12]
 8013ef2:	f023 0303 	bic.w	r3, r3, #3
 8013ef6:	f043 0301 	orr.w	r3, r3, #1
 8013efa:	81a3      	strh	r3, [r4, #12]
 8013efc:	89a3      	ldrh	r3, [r4, #12]
 8013efe:	431d      	orrs	r5, r3
 8013f00:	81a5      	strh	r5, [r4, #12]
 8013f02:	e7cf      	b.n	8013ea4 <__smakebuf_r+0x18>

08013f04 <_fstat_r>:
 8013f04:	b538      	push	{r3, r4, r5, lr}
 8013f06:	4d07      	ldr	r5, [pc, #28]	; (8013f24 <_fstat_r+0x20>)
 8013f08:	2300      	movs	r3, #0
 8013f0a:	4604      	mov	r4, r0
 8013f0c:	4608      	mov	r0, r1
 8013f0e:	4611      	mov	r1, r2
 8013f10:	602b      	str	r3, [r5, #0]
 8013f12:	f7ed ff05 	bl	8001d20 <_fstat>
 8013f16:	1c43      	adds	r3, r0, #1
 8013f18:	d102      	bne.n	8013f20 <_fstat_r+0x1c>
 8013f1a:	682b      	ldr	r3, [r5, #0]
 8013f1c:	b103      	cbz	r3, 8013f20 <_fstat_r+0x1c>
 8013f1e:	6023      	str	r3, [r4, #0]
 8013f20:	bd38      	pop	{r3, r4, r5, pc}
 8013f22:	bf00      	nop
 8013f24:	2000eb1c 	.word	0x2000eb1c

08013f28 <_isatty_r>:
 8013f28:	b538      	push	{r3, r4, r5, lr}
 8013f2a:	4d06      	ldr	r5, [pc, #24]	; (8013f44 <_isatty_r+0x1c>)
 8013f2c:	2300      	movs	r3, #0
 8013f2e:	4604      	mov	r4, r0
 8013f30:	4608      	mov	r0, r1
 8013f32:	602b      	str	r3, [r5, #0]
 8013f34:	f7ed fefa 	bl	8001d2c <_isatty>
 8013f38:	1c43      	adds	r3, r0, #1
 8013f3a:	d102      	bne.n	8013f42 <_isatty_r+0x1a>
 8013f3c:	682b      	ldr	r3, [r5, #0]
 8013f3e:	b103      	cbz	r3, 8013f42 <_isatty_r+0x1a>
 8013f40:	6023      	str	r3, [r4, #0]
 8013f42:	bd38      	pop	{r3, r4, r5, pc}
 8013f44:	2000eb1c 	.word	0x2000eb1c

08013f48 <_calloc_r>:
 8013f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013f4a:	fba1 2402 	umull	r2, r4, r1, r2
 8013f4e:	b94c      	cbnz	r4, 8013f64 <_calloc_r+0x1c>
 8013f50:	4611      	mov	r1, r2
 8013f52:	9201      	str	r2, [sp, #4]
 8013f54:	f7fd f972 	bl	801123c <_malloc_r>
 8013f58:	9a01      	ldr	r2, [sp, #4]
 8013f5a:	4605      	mov	r5, r0
 8013f5c:	b930      	cbnz	r0, 8013f6c <_calloc_r+0x24>
 8013f5e:	4628      	mov	r0, r5
 8013f60:	b003      	add	sp, #12
 8013f62:	bd30      	pop	{r4, r5, pc}
 8013f64:	220c      	movs	r2, #12
 8013f66:	6002      	str	r2, [r0, #0]
 8013f68:	2500      	movs	r5, #0
 8013f6a:	e7f8      	b.n	8013f5e <_calloc_r+0x16>
 8013f6c:	4621      	mov	r1, r4
 8013f6e:	f7fe f87f 	bl	8012070 <memset>
 8013f72:	e7f4      	b.n	8013f5e <_calloc_r+0x16>

08013f74 <__ascii_mbtowc>:
 8013f74:	b082      	sub	sp, #8
 8013f76:	b901      	cbnz	r1, 8013f7a <__ascii_mbtowc+0x6>
 8013f78:	a901      	add	r1, sp, #4
 8013f7a:	b142      	cbz	r2, 8013f8e <__ascii_mbtowc+0x1a>
 8013f7c:	b14b      	cbz	r3, 8013f92 <__ascii_mbtowc+0x1e>
 8013f7e:	7813      	ldrb	r3, [r2, #0]
 8013f80:	600b      	str	r3, [r1, #0]
 8013f82:	7812      	ldrb	r2, [r2, #0]
 8013f84:	1e10      	subs	r0, r2, #0
 8013f86:	bf18      	it	ne
 8013f88:	2001      	movne	r0, #1
 8013f8a:	b002      	add	sp, #8
 8013f8c:	4770      	bx	lr
 8013f8e:	4610      	mov	r0, r2
 8013f90:	e7fb      	b.n	8013f8a <__ascii_mbtowc+0x16>
 8013f92:	f06f 0001 	mvn.w	r0, #1
 8013f96:	e7f8      	b.n	8013f8a <__ascii_mbtowc+0x16>

08013f98 <__ascii_wctomb>:
 8013f98:	b149      	cbz	r1, 8013fae <__ascii_wctomb+0x16>
 8013f9a:	2aff      	cmp	r2, #255	; 0xff
 8013f9c:	bf85      	ittet	hi
 8013f9e:	238a      	movhi	r3, #138	; 0x8a
 8013fa0:	6003      	strhi	r3, [r0, #0]
 8013fa2:	700a      	strbls	r2, [r1, #0]
 8013fa4:	f04f 30ff 	movhi.w	r0, #4294967295
 8013fa8:	bf98      	it	ls
 8013faa:	2001      	movls	r0, #1
 8013fac:	4770      	bx	lr
 8013fae:	4608      	mov	r0, r1
 8013fb0:	4770      	bx	lr
	...

08013fb4 <_init>:
 8013fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fb6:	bf00      	nop
 8013fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013fba:	bc08      	pop	{r3}
 8013fbc:	469e      	mov	lr, r3
 8013fbe:	4770      	bx	lr

08013fc0 <_fini>:
 8013fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fc2:	bf00      	nop
 8013fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013fc6:	bc08      	pop	{r3}
 8013fc8:	469e      	mov	lr, r3
 8013fca:	4770      	bx	lr
