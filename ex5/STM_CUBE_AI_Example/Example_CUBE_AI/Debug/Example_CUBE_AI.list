
Example_CUBE_AI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c658  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014294  0800c800  0800c800  0001c800  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020a94  08020a94  0004117c  2**0
                  CONTENTS
  4 .ARM          00000008  08020a94  08020a94  00030a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020a9c  08020a9c  0004117c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020a9c  08020a9c  00030a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020aa0  08020aa0  00030aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000117c  20000000  08020aa4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006b3c  20001180  08021c20  00041180  2**5
                  ALLOC
 10 ._user_heap_stack 00006004  20007cbc  08021c20  00047cbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004117c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000411ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ddd6  00000000  00000000  000411ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004dea  00000000  00000000  0005efc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  00063db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001006  00000000  00000000  00064bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ba40  00000000  00000000  00065bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a0b2  00000000  00000000  000915fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff45e  00000000  00000000  000ab6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039b0  00000000  00000000  001aab10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00009e48  00000000  00000000  001ae4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  001b8308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001180 	.word	0x20001180
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c7d0 	.word	0x0800c7d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001184 	.word	0x20001184
 80001cc:	0800c7d0 	.word	0x0800c7d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_frsub>:
 8000ba8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bac:	e002      	b.n	8000bb4 <__addsf3>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fsub>:
 8000bb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bb4 <__addsf3>:
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	bf1f      	itttt	ne
 8000bb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bbc:	ea92 0f03 	teqne	r2, r3
 8000bc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc8:	d06a      	beq.n	8000ca0 <__addsf3+0xec>
 8000bca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd2:	bfc1      	itttt	gt
 8000bd4:	18d2      	addgt	r2, r2, r3
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	4048      	eorgt	r0, r1
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	2b19      	cmp	r3, #25
 8000be2:	bf88      	it	hi
 8000be4:	4770      	bxhi	lr
 8000be6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4249      	negne	r1, r1
 8000c06:	ea92 0f03 	teq	r2, r3
 8000c0a:	d03f      	beq.n	8000c8c <__addsf3+0xd8>
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	fa41 fc03 	asr.w	ip, r1, r3
 8000c14:	eb10 000c 	adds.w	r0, r0, ip
 8000c18:	f1c3 0320 	rsb	r3, r3, #32
 8000c1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__addsf3+0x78>
 8000c26:	4249      	negs	r1, r1
 8000c28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c30:	d313      	bcc.n	8000c5a <__addsf3+0xa6>
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c36:	d306      	bcc.n	8000c46 <__addsf3+0x92>
 8000c38:	0840      	lsrs	r0, r0, #1
 8000c3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3e:	f102 0201 	add.w	r2, r2, #1
 8000c42:	2afe      	cmp	r2, #254	; 0xfe
 8000c44:	d251      	bcs.n	8000cea <__addsf3+0x136>
 8000c46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	ea40 0003 	orr.w	r0, r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	eb40 0000 	adc.w	r0, r0, r0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	bf28      	it	cs
 8000c64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c68:	d2ed      	bcs.n	8000c46 <__addsf3+0x92>
 8000c6a:	fab0 fc80 	clz	ip, r0
 8000c6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c72:	ebb2 020c 	subs.w	r2, r2, ip
 8000c76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7a:	bfaa      	itet	ge
 8000c7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c80:	4252      	neglt	r2, r2
 8000c82:	4318      	orrge	r0, r3
 8000c84:	bfbc      	itt	lt
 8000c86:	40d0      	lsrlt	r0, r2
 8000c88:	4318      	orrlt	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	f092 0f00 	teq	r2, #0
 8000c90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c94:	bf06      	itte	eq
 8000c96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c9a:	3201      	addeq	r2, #1
 8000c9c:	3b01      	subne	r3, #1
 8000c9e:	e7b5      	b.n	8000c0c <__addsf3+0x58>
 8000ca0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cae:	d021      	beq.n	8000cf4 <__addsf3+0x140>
 8000cb0:	ea92 0f03 	teq	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__addsf3+0x10c>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	bf08      	it	eq
 8000cbc:	4608      	moveq	r0, r1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea90 0f01 	teq	r0, r1
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	4770      	bxne	lr
 8000cca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cce:	d104      	bne.n	8000cda <__addsf3+0x126>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cde:	bf3c      	itt	cc
 8000ce0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bxcc	lr
 8000ce6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf8:	bf16      	itet	ne
 8000cfa:	4608      	movne	r0, r1
 8000cfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d00:	4601      	movne	r1, r0
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	bf06      	itte	eq
 8000d06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0a:	ea90 0f01 	teqeq	r0, r1
 8000d0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_ui2f>:
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e004      	b.n	8000d24 <__aeabi_i2f+0x8>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_i2f>:
 8000d1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d20:	bf48      	it	mi
 8000d22:	4240      	negmi	r0, r0
 8000d24:	ea5f 0c00 	movs.w	ip, r0
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d30:	4601      	mov	r1, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	e01c      	b.n	8000d72 <__aeabi_l2f+0x2a>

08000d38 <__aeabi_ul2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e00a      	b.n	8000d5c <__aeabi_l2f+0x14>
 8000d46:	bf00      	nop

08000d48 <__aeabi_l2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__aeabi_l2f+0x14>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	ea5f 0c01 	movs.w	ip, r1
 8000d60:	bf02      	ittt	eq
 8000d62:	4684      	moveq	ip, r0
 8000d64:	4601      	moveq	r1, r0
 8000d66:	2000      	moveq	r0, #0
 8000d68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d6c:	bf08      	it	eq
 8000d6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d76:	fabc f28c 	clz	r2, ip
 8000d7a:	3a08      	subs	r2, #8
 8000d7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d80:	db10      	blt.n	8000da4 <__aeabi_l2f+0x5c>
 8000d82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d94:	fa20 f202 	lsr.w	r2, r0, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f102 0220 	add.w	r2, r2, #32
 8000da8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db4:	fa21 f202 	lsr.w	r2, r1, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_uldivmod>:
 8000dc4:	b953      	cbnz	r3, 8000ddc <__aeabi_uldivmod+0x18>
 8000dc6:	b94a      	cbnz	r2, 8000ddc <__aeabi_uldivmod+0x18>
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	bf08      	it	eq
 8000dcc:	2800      	cmpeq	r0, #0
 8000dce:	bf1c      	itt	ne
 8000dd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd8:	f000 b98e 	b.w	80010f8 <__aeabi_idiv0>
 8000ddc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000de0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de4:	f000 f824 	bl	8000e30 <__udivmoddi4>
 8000de8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000df0:	b004      	add	sp, #16
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_d2ulz>:
 8000df4:	b5d0      	push	{r4, r6, r7, lr}
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <__aeabi_d2ulz+0x34>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	4606      	mov	r6, r0
 8000dfc:	460f      	mov	r7, r1
 8000dfe:	f7ff fbfb 	bl	80005f8 <__aeabi_dmul>
 8000e02:	f000 f97b 	bl	80010fc <__aeabi_d2uiz>
 8000e06:	4604      	mov	r4, r0
 8000e08:	f7ff fb7c 	bl	8000504 <__aeabi_ui2d>
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <__aeabi_d2ulz+0x38>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f7ff fbf2 	bl	80005f8 <__aeabi_dmul>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	4630      	mov	r0, r6
 8000e1a:	4639      	mov	r1, r7
 8000e1c:	f7ff fa34 	bl	8000288 <__aeabi_dsub>
 8000e20:	f000 f96c 	bl	80010fc <__aeabi_d2uiz>
 8000e24:	4621      	mov	r1, r4
 8000e26:	bdd0      	pop	{r4, r6, r7, pc}
 8000e28:	3df00000 	.word	0x3df00000
 8000e2c:	41f00000 	.word	0x41f00000

08000e30 <__udivmoddi4>:
 8000e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e34:	9e08      	ldr	r6, [sp, #32]
 8000e36:	460d      	mov	r5, r1
 8000e38:	4604      	mov	r4, r0
 8000e3a:	460f      	mov	r7, r1
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d14a      	bne.n	8000ed6 <__udivmoddi4+0xa6>
 8000e40:	428a      	cmp	r2, r1
 8000e42:	4694      	mov	ip, r2
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0xe2>
 8000e46:	fab2 f382 	clz	r3, r2
 8000e4a:	b143      	cbz	r3, 8000e5e <__udivmoddi4+0x2e>
 8000e4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e50:	f1c3 0220 	rsb	r2, r3, #32
 8000e54:	409f      	lsls	r7, r3
 8000e56:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5a:	4317      	orrs	r7, r2
 8000e5c:	409c      	lsls	r4, r3
 8000e5e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e62:	fa1f f58c 	uxth.w	r5, ip
 8000e66:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e6a:	0c22      	lsrs	r2, r4, #16
 8000e6c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e70:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e74:	fb01 f005 	mul.w	r0, r1, r5
 8000e78:	4290      	cmp	r0, r2
 8000e7a:	d90a      	bls.n	8000e92 <__udivmoddi4+0x62>
 8000e7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e80:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e84:	f080 811c 	bcs.w	80010c0 <__udivmoddi4+0x290>
 8000e88:	4290      	cmp	r0, r2
 8000e8a:	f240 8119 	bls.w	80010c0 <__udivmoddi4+0x290>
 8000e8e:	3902      	subs	r1, #2
 8000e90:	4462      	add	r2, ip
 8000e92:	1a12      	subs	r2, r2, r0
 8000e94:	b2a4      	uxth	r4, r4
 8000e96:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e9a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e9e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea2:	fb00 f505 	mul.w	r5, r0, r5
 8000ea6:	42a5      	cmp	r5, r4
 8000ea8:	d90a      	bls.n	8000ec0 <__udivmoddi4+0x90>
 8000eaa:	eb1c 0404 	adds.w	r4, ip, r4
 8000eae:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb2:	f080 8107 	bcs.w	80010c4 <__udivmoddi4+0x294>
 8000eb6:	42a5      	cmp	r5, r4
 8000eb8:	f240 8104 	bls.w	80010c4 <__udivmoddi4+0x294>
 8000ebc:	4464      	add	r4, ip
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ec4:	1b64      	subs	r4, r4, r5
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	b11e      	cbz	r6, 8000ed2 <__udivmoddi4+0xa2>
 8000eca:	40dc      	lsrs	r4, r3
 8000ecc:	2300      	movs	r3, #0
 8000ece:	e9c6 4300 	strd	r4, r3, [r6]
 8000ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d908      	bls.n	8000eec <__udivmoddi4+0xbc>
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	f000 80ed 	beq.w	80010ba <__udivmoddi4+0x28a>
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	e9c6 0500 	strd	r0, r5, [r6]
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eec:	fab3 f183 	clz	r1, r3
 8000ef0:	2900      	cmp	r1, #0
 8000ef2:	d149      	bne.n	8000f88 <__udivmoddi4+0x158>
 8000ef4:	42ab      	cmp	r3, r5
 8000ef6:	d302      	bcc.n	8000efe <__udivmoddi4+0xce>
 8000ef8:	4282      	cmp	r2, r0
 8000efa:	f200 80f8 	bhi.w	80010ee <__udivmoddi4+0x2be>
 8000efe:	1a84      	subs	r4, r0, r2
 8000f00:	eb65 0203 	sbc.w	r2, r5, r3
 8000f04:	2001      	movs	r0, #1
 8000f06:	4617      	mov	r7, r2
 8000f08:	2e00      	cmp	r6, #0
 8000f0a:	d0e2      	beq.n	8000ed2 <__udivmoddi4+0xa2>
 8000f0c:	e9c6 4700 	strd	r4, r7, [r6]
 8000f10:	e7df      	b.n	8000ed2 <__udivmoddi4+0xa2>
 8000f12:	b902      	cbnz	r2, 8000f16 <__udivmoddi4+0xe6>
 8000f14:	deff      	udf	#255	; 0xff
 8000f16:	fab2 f382 	clz	r3, r2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f040 8090 	bne.w	8001040 <__udivmoddi4+0x210>
 8000f20:	1a8a      	subs	r2, r1, r2
 8000f22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f26:	fa1f fe8c 	uxth.w	lr, ip
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f30:	fb07 2015 	mls	r0, r7, r5, r2
 8000f34:	0c22      	lsrs	r2, r4, #16
 8000f36:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f3a:	fb0e f005 	mul.w	r0, lr, r5
 8000f3e:	4290      	cmp	r0, r2
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x124>
 8000f42:	eb1c 0202 	adds.w	r2, ip, r2
 8000f46:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f4a:	d202      	bcs.n	8000f52 <__udivmoddi4+0x122>
 8000f4c:	4290      	cmp	r0, r2
 8000f4e:	f200 80cb 	bhi.w	80010e8 <__udivmoddi4+0x2b8>
 8000f52:	4645      	mov	r5, r8
 8000f54:	1a12      	subs	r2, r2, r0
 8000f56:	b2a4      	uxth	r4, r4
 8000f58:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f5c:	fb07 2210 	mls	r2, r7, r0, r2
 8000f60:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f64:	fb0e fe00 	mul.w	lr, lr, r0
 8000f68:	45a6      	cmp	lr, r4
 8000f6a:	d908      	bls.n	8000f7e <__udivmoddi4+0x14e>
 8000f6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f70:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f74:	d202      	bcs.n	8000f7c <__udivmoddi4+0x14c>
 8000f76:	45a6      	cmp	lr, r4
 8000f78:	f200 80bb 	bhi.w	80010f2 <__udivmoddi4+0x2c2>
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	eba4 040e 	sub.w	r4, r4, lr
 8000f82:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f86:	e79f      	b.n	8000ec8 <__udivmoddi4+0x98>
 8000f88:	f1c1 0720 	rsb	r7, r1, #32
 8000f8c:	408b      	lsls	r3, r1
 8000f8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f96:	fa05 f401 	lsl.w	r4, r5, r1
 8000f9a:	fa20 f307 	lsr.w	r3, r0, r7
 8000f9e:	40fd      	lsrs	r5, r7
 8000fa0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000fa4:	4323      	orrs	r3, r4
 8000fa6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000faa:	fa1f fe8c 	uxth.w	lr, ip
 8000fae:	fb09 5518 	mls	r5, r9, r8, r5
 8000fb2:	0c1c      	lsrs	r4, r3, #16
 8000fb4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000fb8:	fb08 f50e 	mul.w	r5, r8, lr
 8000fbc:	42a5      	cmp	r5, r4
 8000fbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000fc2:	fa00 f001 	lsl.w	r0, r0, r1
 8000fc6:	d90b      	bls.n	8000fe0 <__udivmoddi4+0x1b0>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fd0:	f080 8088 	bcs.w	80010e4 <__udivmoddi4+0x2b4>
 8000fd4:	42a5      	cmp	r5, r4
 8000fd6:	f240 8085 	bls.w	80010e4 <__udivmoddi4+0x2b4>
 8000fda:	f1a8 0802 	sub.w	r8, r8, #2
 8000fde:	4464      	add	r4, ip
 8000fe0:	1b64      	subs	r4, r4, r5
 8000fe2:	b29d      	uxth	r5, r3
 8000fe4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fe8:	fb09 4413 	mls	r4, r9, r3, r4
 8000fec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ff0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ff4:	45a6      	cmp	lr, r4
 8000ff6:	d908      	bls.n	800100a <__udivmoddi4+0x1da>
 8000ff8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ffc:	f103 35ff 	add.w	r5, r3, #4294967295
 8001000:	d26c      	bcs.n	80010dc <__udivmoddi4+0x2ac>
 8001002:	45a6      	cmp	lr, r4
 8001004:	d96a      	bls.n	80010dc <__udivmoddi4+0x2ac>
 8001006:	3b02      	subs	r3, #2
 8001008:	4464      	add	r4, ip
 800100a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800100e:	fba3 9502 	umull	r9, r5, r3, r2
 8001012:	eba4 040e 	sub.w	r4, r4, lr
 8001016:	42ac      	cmp	r4, r5
 8001018:	46c8      	mov	r8, r9
 800101a:	46ae      	mov	lr, r5
 800101c:	d356      	bcc.n	80010cc <__udivmoddi4+0x29c>
 800101e:	d053      	beq.n	80010c8 <__udivmoddi4+0x298>
 8001020:	b156      	cbz	r6, 8001038 <__udivmoddi4+0x208>
 8001022:	ebb0 0208 	subs.w	r2, r0, r8
 8001026:	eb64 040e 	sbc.w	r4, r4, lr
 800102a:	fa04 f707 	lsl.w	r7, r4, r7
 800102e:	40ca      	lsrs	r2, r1
 8001030:	40cc      	lsrs	r4, r1
 8001032:	4317      	orrs	r7, r2
 8001034:	e9c6 7400 	strd	r7, r4, [r6]
 8001038:	4618      	mov	r0, r3
 800103a:	2100      	movs	r1, #0
 800103c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001040:	f1c3 0120 	rsb	r1, r3, #32
 8001044:	fa02 fc03 	lsl.w	ip, r2, r3
 8001048:	fa20 f201 	lsr.w	r2, r0, r1
 800104c:	fa25 f101 	lsr.w	r1, r5, r1
 8001050:	409d      	lsls	r5, r3
 8001052:	432a      	orrs	r2, r5
 8001054:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001058:	fa1f fe8c 	uxth.w	lr, ip
 800105c:	fbb1 f0f7 	udiv	r0, r1, r7
 8001060:	fb07 1510 	mls	r5, r7, r0, r1
 8001064:	0c11      	lsrs	r1, r2, #16
 8001066:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800106a:	fb00 f50e 	mul.w	r5, r0, lr
 800106e:	428d      	cmp	r5, r1
 8001070:	fa04 f403 	lsl.w	r4, r4, r3
 8001074:	d908      	bls.n	8001088 <__udivmoddi4+0x258>
 8001076:	eb1c 0101 	adds.w	r1, ip, r1
 800107a:	f100 38ff 	add.w	r8, r0, #4294967295
 800107e:	d22f      	bcs.n	80010e0 <__udivmoddi4+0x2b0>
 8001080:	428d      	cmp	r5, r1
 8001082:	d92d      	bls.n	80010e0 <__udivmoddi4+0x2b0>
 8001084:	3802      	subs	r0, #2
 8001086:	4461      	add	r1, ip
 8001088:	1b49      	subs	r1, r1, r5
 800108a:	b292      	uxth	r2, r2
 800108c:	fbb1 f5f7 	udiv	r5, r1, r7
 8001090:	fb07 1115 	mls	r1, r7, r5, r1
 8001094:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001098:	fb05 f10e 	mul.w	r1, r5, lr
 800109c:	4291      	cmp	r1, r2
 800109e:	d908      	bls.n	80010b2 <__udivmoddi4+0x282>
 80010a0:	eb1c 0202 	adds.w	r2, ip, r2
 80010a4:	f105 38ff 	add.w	r8, r5, #4294967295
 80010a8:	d216      	bcs.n	80010d8 <__udivmoddi4+0x2a8>
 80010aa:	4291      	cmp	r1, r2
 80010ac:	d914      	bls.n	80010d8 <__udivmoddi4+0x2a8>
 80010ae:	3d02      	subs	r5, #2
 80010b0:	4462      	add	r2, ip
 80010b2:	1a52      	subs	r2, r2, r1
 80010b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80010b8:	e738      	b.n	8000f2c <__udivmoddi4+0xfc>
 80010ba:	4631      	mov	r1, r6
 80010bc:	4630      	mov	r0, r6
 80010be:	e708      	b.n	8000ed2 <__udivmoddi4+0xa2>
 80010c0:	4639      	mov	r1, r7
 80010c2:	e6e6      	b.n	8000e92 <__udivmoddi4+0x62>
 80010c4:	4610      	mov	r0, r2
 80010c6:	e6fb      	b.n	8000ec0 <__udivmoddi4+0x90>
 80010c8:	4548      	cmp	r0, r9
 80010ca:	d2a9      	bcs.n	8001020 <__udivmoddi4+0x1f0>
 80010cc:	ebb9 0802 	subs.w	r8, r9, r2
 80010d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010d4:	3b01      	subs	r3, #1
 80010d6:	e7a3      	b.n	8001020 <__udivmoddi4+0x1f0>
 80010d8:	4645      	mov	r5, r8
 80010da:	e7ea      	b.n	80010b2 <__udivmoddi4+0x282>
 80010dc:	462b      	mov	r3, r5
 80010de:	e794      	b.n	800100a <__udivmoddi4+0x1da>
 80010e0:	4640      	mov	r0, r8
 80010e2:	e7d1      	b.n	8001088 <__udivmoddi4+0x258>
 80010e4:	46d0      	mov	r8, sl
 80010e6:	e77b      	b.n	8000fe0 <__udivmoddi4+0x1b0>
 80010e8:	3d02      	subs	r5, #2
 80010ea:	4462      	add	r2, ip
 80010ec:	e732      	b.n	8000f54 <__udivmoddi4+0x124>
 80010ee:	4608      	mov	r0, r1
 80010f0:	e70a      	b.n	8000f08 <__udivmoddi4+0xd8>
 80010f2:	4464      	add	r4, ip
 80010f4:	3802      	subs	r0, #2
 80010f6:	e742      	b.n	8000f7e <__udivmoddi4+0x14e>

080010f8 <__aeabi_idiv0>:
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <__aeabi_d2uiz>:
 80010fc:	004a      	lsls	r2, r1, #1
 80010fe:	d211      	bcs.n	8001124 <__aeabi_d2uiz+0x28>
 8001100:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001104:	d211      	bcs.n	800112a <__aeabi_d2uiz+0x2e>
 8001106:	d50d      	bpl.n	8001124 <__aeabi_d2uiz+0x28>
 8001108:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800110c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001110:	d40e      	bmi.n	8001130 <__aeabi_d2uiz+0x34>
 8001112:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001116:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800111a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800111e:	fa23 f002 	lsr.w	r0, r3, r2
 8001122:	4770      	bx	lr
 8001124:	f04f 0000 	mov.w	r0, #0
 8001128:	4770      	bx	lr
 800112a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800112e:	d102      	bne.n	8001136 <__aeabi_d2uiz+0x3a>
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	4770      	bx	lr
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4770      	bx	lr

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b500      	push	{lr}
 800113e:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001140:	2244      	movs	r2, #68	; 0x44
 8001142:	2100      	movs	r1, #0
 8001144:	a805      	add	r0, sp, #20
 8001146:	f009 fb24 	bl	800a792 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114a:	2214      	movs	r2, #20
 800114c:	2100      	movs	r1, #0
 800114e:	4668      	mov	r0, sp
 8001150:	f009 fb1f 	bl	800a792 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001154:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001158:	f000 fac4 	bl	80016e4 <HAL_PWREx_ControlVoltageScaling>
 800115c:	b108      	cbz	r0, 8001162 <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800115e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001160:	e7fe      	b.n	8001160 <SystemClock_Config+0x24>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001162:	2310      	movs	r3, #16
 8001164:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001166:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001168:	2201      	movs	r2, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800116a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116c:	2302      	movs	r3, #2
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800116e:	e9cd 200b 	strd	r2, r0, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001172:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001176:	2028      	movs	r0, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001178:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800117a:	2207      	movs	r2, #7
 800117c:	e9cd 0212 	strd	r0, r2, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001180:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001182:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001186:	f000 fb73 	bl	8001870 <HAL_RCC_OscConfig>
 800118a:	b108      	cbz	r0, 8001190 <SystemClock_Config+0x54>
 800118c:	b672      	cpsid	i
  while (1)
 800118e:	e7fe      	b.n	800118e <SystemClock_Config+0x52>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001190:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001194:	220f      	movs	r2, #15
 8001196:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001198:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800119a:	2104      	movs	r1, #4
 800119c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800119e:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011a2:	f000 fde5 	bl	8001d70 <HAL_RCC_ClockConfig>
 80011a6:	b108      	cbz	r0, 80011ac <SystemClock_Config+0x70>
 80011a8:	b672      	cpsid	i
  while (1)
 80011aa:	e7fe      	b.n	80011aa <SystemClock_Config+0x6e>
}
 80011ac:	b017      	add	sp, #92	; 0x5c
 80011ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080011b4 <main>:
{
 80011b4:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 80011b6:	f000 f90f 	bl	80013d8 <HAL_Init>
  SystemClock_Config();
 80011ba:	f7ff ffbf 	bl	800113c <SystemClock_Config>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <main+0x28>)
 80011c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011c2:	f042 0202 	orr.w	r2, r2, #2
 80011c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	9b01      	ldr	r3, [sp, #4]
  MX_X_CUBE_AI_Init();
 80011d2:	f003 fad3 	bl	800477c <MX_X_CUBE_AI_Init>
  MX_X_CUBE_AI_Process();
 80011d6:	f003 fad8 	bl	800478a <MX_X_CUBE_AI_Process>
  while (1)
 80011da:	e7fc      	b.n	80011d6 <main+0x22>
 80011dc:	40021000 	.word	0x40021000

080011e0 <MX_USART1_UART_Init>:
  huart1.Instance = USART1;
 80011e0:	480b      	ldr	r0, [pc, #44]	; (8001210 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 80011e2:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <MX_USART1_UART_Init+0x34>)
{
 80011e4:	b508      	push	{r3, lr}
  huart1.Init.BaudRate = 115200;
 80011e6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80011ea:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ee:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f0:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011f2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011fa:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011fe:	6103      	str	r3, [r0, #16]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001200:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001202:	f001 fc94 	bl	8002b2e <HAL_UART_Init>
 8001206:	b108      	cbz	r0, 800120c <MX_USART1_UART_Init+0x2c>
 8001208:	b672      	cpsid	i
  while (1)
 800120a:	e7fe      	b.n	800120a <MX_USART1_UART_Init+0x2a>
}
 800120c:	bd08      	pop	{r3, pc}
 800120e:	bf00      	nop
 8001210:	2000119c 	.word	0x2000119c
 8001214:	40013800 	.word	0x40013800

08001218 <Error_Handler>:
 8001218:	b672      	cpsid	i
  while (1)
 800121a:	e7fe      	b.n	800121a <Error_Handler+0x2>

0800121c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_MspInit+0x2c>)
 800121e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001220:	f042 0201 	orr.w	r2, r2, #1
 8001224:	661a      	str	r2, [r3, #96]	; 0x60
 8001226:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001228:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	f002 0201 	and.w	r2, r2, #1
 800122e:	9200      	str	r2, [sp, #0]
 8001230:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001234:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001238:	659a      	str	r2, [r3, #88]	; 0x58
 800123a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001244:	b002      	add	sp, #8
 8001246:	4770      	bx	lr
 8001248:	40021000 	.word	0x40021000

0800124c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800124c:	b510      	push	{r4, lr}
 800124e:	b0aa      	sub	sp, #168	; 0xa8
 8001250:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	2214      	movs	r2, #20
 8001254:	2100      	movs	r1, #0
 8001256:	a803      	add	r0, sp, #12
 8001258:	f009 fa9b 	bl	800a792 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800125c:	2288      	movs	r2, #136	; 0x88
 800125e:	2100      	movs	r1, #0
 8001260:	a808      	add	r0, sp, #32
 8001262:	f009 fa96 	bl	800a792 <memset>
  if(huart->Instance==USART1)
 8001266:	6822      	ldr	r2, [r4, #0]
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_UART_MspInit+0x78>)
 800126a:	429a      	cmp	r2, r3
 800126c:	d128      	bne.n	80012c0 <HAL_UART_MspInit+0x74>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800126e:	2301      	movs	r3, #1
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001270:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001272:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001274:	f000 ff52 	bl	800211c <HAL_RCCEx_PeriphCLKConfig>
 8001278:	b108      	cbz	r0, 800127e <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 800127a:	f7ff ffcd 	bl	8001218 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_UART_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001280:	4812      	ldr	r0, [pc, #72]	; (80012cc <HAL_UART_MspInit+0x80>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001282:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001284:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001288:	661a      	str	r2, [r3, #96]	; 0x60
 800128a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800128c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001290:	9201      	str	r2, [sp, #4]
 8001292:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001294:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001296:	f042 0202 	orr.w	r2, r2, #2
 800129a:	64da      	str	r2, [r3, #76]	; 0x4c
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	9302      	str	r3, [sp, #8]
 80012a4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	22c0      	movs	r2, #192	; 0xc0
 80012a8:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2100      	movs	r1, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012b6:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012ba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f000 f92c 	bl	8001518 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012c0:	b02a      	add	sp, #168	; 0xa8
 80012c2:	bd10      	pop	{r4, pc}
 80012c4:	40013800 	.word	0x40013800
 80012c8:	40021000 	.word	0x40021000
 80012cc:	48000400 	.word	0x48000400

080012d0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d0:	e7fe      	b.n	80012d0 <NMI_Handler>

080012d2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <HardFault_Handler>

080012d4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <MemManage_Handler>

080012d6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <BusFault_Handler>

080012d8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <UsageFault_Handler>

080012da <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012da:	4770      	bx	lr

080012dc <DebugMon_Handler>:
 80012dc:	4770      	bx	lr

080012de <PendSV_Handler>:
 80012de:	4770      	bx	lr

080012e0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e0:	f000 b88a 	b.w	80013f8 <HAL_IncTick>

080012e4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e4:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <_sbrk+0x30>)
 80012e6:	6811      	ldr	r1, [r2, #0]
{
 80012e8:	b510      	push	{r4, lr}
 80012ea:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80012ec:	b909      	cbnz	r1, 80012f2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80012ee:	490a      	ldr	r1, [pc, #40]	; (8001318 <_sbrk+0x34>)
 80012f0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f2:	6810      	ldr	r0, [r2, #0]
 80012f4:	4909      	ldr	r1, [pc, #36]	; (800131c <_sbrk+0x38>)
 80012f6:	4c0a      	ldr	r4, [pc, #40]	; (8001320 <_sbrk+0x3c>)
 80012f8:	4403      	add	r3, r0
 80012fa:	1b09      	subs	r1, r1, r4
 80012fc:	428b      	cmp	r3, r1
 80012fe:	d906      	bls.n	800130e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001300:	f009 fabc 	bl	800a87c <__errno>
 8001304:	230c      	movs	r3, #12
 8001306:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001308:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800130c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800130e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001310:	e7fc      	b.n	800130c <_sbrk+0x28>
 8001312:	bf00      	nop
 8001314:	20001224 	.word	0x20001224
 8001318:	20007cc0 	.word	0x20007cc0
 800131c:	20018000 	.word	0x20018000
 8001320:	00004000 	.word	0x00004000

08001324 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001324:	4a03      	ldr	r2, [pc, #12]	; (8001334 <SystemInit+0x10>)
 8001326:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800132a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800132e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001338:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001370 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800133c:	f7ff fff2 	bl	8001324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001340:	480c      	ldr	r0, [pc, #48]	; (8001374 <LoopForever+0x6>)
  ldr r1, =_edata
 8001342:	490d      	ldr	r1, [pc, #52]	; (8001378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001344:	4a0d      	ldr	r2, [pc, #52]	; (800137c <LoopForever+0xe>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001348:	e002      	b.n	8001350 <LoopCopyDataInit>

0800134a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800134c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134e:	3304      	adds	r3, #4

08001350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001354:	d3f9      	bcc.n	800134a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001358:	4c0a      	ldr	r4, [pc, #40]	; (8001384 <LoopForever+0x16>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800135c:	e001      	b.n	8001362 <LoopFillZerobss>

0800135e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001360:	3204      	adds	r2, #4

08001362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001364:	d3fb      	bcc.n	800135e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001366:	f009 fa8f 	bl	800a888 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800136a:	f7ff ff23 	bl	80011b4 <main>

0800136e <LoopForever>:

LoopForever:
    b LoopForever
 800136e:	e7fe      	b.n	800136e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001370:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001378:	2000117c 	.word	0x2000117c
  ldr r2, =_sidata
 800137c:	08020aa4 	.word	0x08020aa4
  ldr r2, =_sbss
 8001380:	20001180 	.word	0x20001180
  ldr r4, =_ebss
 8001384:	20007cbc 	.word	0x20007cbc

08001388 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001388:	e7fe      	b.n	8001388 <ADC1_2_IRQHandler>
	...

0800138c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800138c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <HAL_InitTick+0x40>)
 8001390:	781a      	ldrb	r2, [r3, #0]
{
 8001392:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8001394:	b90a      	cbnz	r2, 800139a <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001396:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001398:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800139a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139e:	fbb3 f3f2 	udiv	r3, r3, r2
 80013a2:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <HAL_InitTick+0x44>)
 80013a4:	6810      	ldr	r0, [r2, #0]
 80013a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80013aa:	f000 f8a1 	bl	80014f0 <HAL_SYSTICK_Config>
 80013ae:	4604      	mov	r4, r0
 80013b0:	2800      	cmp	r0, #0
 80013b2:	d1f0      	bne.n	8001396 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b4:	2d0f      	cmp	r5, #15
 80013b6:	d8ee      	bhi.n	8001396 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b8:	4602      	mov	r2, r0
 80013ba:	4629      	mov	r1, r5
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	f000 f864 	bl	800148c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <HAL_InitTick+0x48>)
 80013c6:	4620      	mov	r0, r4
 80013c8:	601d      	str	r5, [r3, #0]
  return status;
 80013ca:	e7e5      	b.n	8001398 <HAL_InitTick+0xc>
 80013cc:	20000004 	.word	0x20000004
 80013d0:	20000000 	.word	0x20000000
 80013d4:	20000008 	.word	0x20000008

080013d8 <HAL_Init>:
{
 80013d8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013da:	2003      	movs	r0, #3
 80013dc:	f000 f844 	bl	8001468 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013e0:	2000      	movs	r0, #0
 80013e2:	f7ff ffd3 	bl	800138c <HAL_InitTick>
 80013e6:	4604      	mov	r4, r0
 80013e8:	b918      	cbnz	r0, 80013f2 <HAL_Init+0x1a>
    HAL_MspInit();
 80013ea:	f7ff ff17 	bl	800121c <HAL_MspInit>
}
 80013ee:	4620      	mov	r0, r4
 80013f0:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80013f2:	2401      	movs	r4, #1
 80013f4:	e7fb      	b.n	80013ee <HAL_Init+0x16>
	...

080013f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80013f8:	4a03      	ldr	r2, [pc, #12]	; (8001408 <HAL_IncTick+0x10>)
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <HAL_IncTick+0x14>)
 80013fc:	6811      	ldr	r1, [r2, #0]
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	440b      	add	r3, r1
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20001228 	.word	0x20001228
 800140c:	20000004 	.word	0x20000004

08001410 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001410:	4b01      	ldr	r3, [pc, #4]	; (8001418 <HAL_GetTick+0x8>)
 8001412:	6818      	ldr	r0, [r3, #0]
}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20001228 	.word	0x20001228

0800141c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800141c:	b538      	push	{r3, r4, r5, lr}
 800141e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001420:	f7ff fff6 	bl	8001410 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001424:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8001426:	bf1c      	itt	ne
 8001428:	4b05      	ldrne	r3, [pc, #20]	; (8001440 <HAL_Delay+0x24>)
 800142a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800142c:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 800142e:	bf18      	it	ne
 8001430:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001432:	f7ff ffed 	bl	8001410 <HAL_GetTick>
 8001436:	1b43      	subs	r3, r0, r5
 8001438:	42a3      	cmp	r3, r4
 800143a:	d3fa      	bcc.n	8001432 <HAL_Delay+0x16>
  {
  }
}
 800143c:	bd38      	pop	{r3, r4, r5, pc}
 800143e:	bf00      	nop
 8001440:	20000004 	.word	0x20000004

08001444 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return STM32L4XX_HAL_VERSION;
}
 8001444:	4800      	ldr	r0, [pc, #0]	; (8001448 <HAL_GetHalVersion+0x4>)
 8001446:	4770      	bx	lr
 8001448:	010d0500 	.word	0x010d0500

0800144c <HAL_GetREVID>:
  * @brief  Return the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 800144c:	4b01      	ldr	r3, [pc, #4]	; (8001454 <HAL_GetREVID+0x8>)
 800144e:	6818      	ldr	r0, [r3, #0]
}
 8001450:	0c00      	lsrs	r0, r0, #16
 8001452:	4770      	bx	lr
 8001454:	e0042000 	.word	0xe0042000

08001458 <HAL_GetDEVID>:
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 8001458:	4b02      	ldr	r3, [pc, #8]	; (8001464 <HAL_GetDEVID+0xc>)
 800145a:	6818      	ldr	r0, [r3, #0]
}
 800145c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e0042000 	.word	0xe0042000

08001468 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001468:	4907      	ldr	r1, [pc, #28]	; (8001488 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800146a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001470:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001472:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001474:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001478:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800147a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800147c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001484:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148e:	b530      	push	{r4, r5, lr}
 8001490:	68dc      	ldr	r4, [r3, #12]
 8001492:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001496:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800149c:	2b04      	cmp	r3, #4
 800149e:	bf28      	it	cs
 80014a0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a8:	bf8c      	ite	hi
 80014aa:	3c03      	subhi	r4, #3
 80014ac:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ae:	fa05 f303 	lsl.w	r3, r5, r3
 80014b2:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b6:	40a5      	lsls	r5, r4
 80014b8:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80014be:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c4:	bfac      	ite	ge
 80014c6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ca:	4a08      	ldrlt	r2, [pc, #32]	; (80014ec <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014cc:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d0:	bfb8      	it	lt
 80014d2:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	bfaa      	itet	ge
 80014da:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014de:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80014e4:	bd30      	pop	{r4, r5, pc}
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00
 80014ec:	e000ed14 	.word	0xe000ed14

080014f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f0:	3801      	subs	r0, #1
 80014f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80014f6:	d20b      	bcs.n	8001510 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fc:	4a05      	ldr	r2, [pc, #20]	; (8001514 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fe:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	21f0      	movs	r1, #240	; 0xf0
 8001502:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001506:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001508:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800150a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800150e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001510:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001518:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151c:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 80016d0 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001520:	4c69      	ldr	r4, [pc, #420]	; (80016c8 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 8001522:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001524:	680a      	ldr	r2, [r1, #0]
 8001526:	fa32 f503 	lsrs.w	r5, r2, r3
 800152a:	d102      	bne.n	8001532 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 800152c:	b003      	add	sp, #12
 800152e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001532:	f04f 0e01 	mov.w	lr, #1
 8001536:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 800153a:	ea1e 0202 	ands.w	r2, lr, r2
 800153e:	f000 8090 	beq.w	8001662 <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001542:	684d      	ldr	r5, [r1, #4]
 8001544:	f005 0603 	and.w	r6, r5, #3
 8001548:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800154c:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001550:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001552:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001556:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001558:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800155c:	f200 8083 	bhi.w	8001666 <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 8001560:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001562:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001566:	68cf      	ldr	r7, [r1, #12]
 8001568:	fa07 f708 	lsl.w	r7, r7, r8
 800156c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001570:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001572:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001574:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001578:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800157c:	409f      	lsls	r7, r3
 800157e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001582:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001584:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001586:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800158a:	688f      	ldr	r7, [r1, #8]
 800158c:	fa07 f708 	lsl.w	r7, r7, r8
 8001590:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001594:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 8001596:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001598:	d071      	beq.n	800167e <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 800159a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800159c:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015a0:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015a4:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015a6:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80015aa:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ac:	d059      	beq.n	8001662 <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ae:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80015b2:	f046 0601 	orr.w	r6, r6, #1
 80015b6:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 80015ba:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80015be:	f023 0703 	bic.w	r7, r3, #3
 80015c2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80015c6:	f006 0601 	and.w	r6, r6, #1
 80015ca:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80015ce:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015d0:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d4:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80015d6:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015d8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80015dc:	f04f 0c0f 	mov.w	ip, #15
 80015e0:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015e4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015e8:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015ec:	d05f      	beq.n	80016ae <HAL_GPIO_Init+0x196>
 80015ee:	4e37      	ldr	r6, [pc, #220]	; (80016cc <HAL_GPIO_Init+0x1b4>)
 80015f0:	42b0      	cmp	r0, r6
 80015f2:	d05e      	beq.n	80016b2 <HAL_GPIO_Init+0x19a>
 80015f4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015f8:	42b0      	cmp	r0, r6
 80015fa:	d05c      	beq.n	80016b6 <HAL_GPIO_Init+0x19e>
 80015fc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001600:	42b0      	cmp	r0, r6
 8001602:	d05a      	beq.n	80016ba <HAL_GPIO_Init+0x1a2>
 8001604:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001608:	42b0      	cmp	r0, r6
 800160a:	d058      	beq.n	80016be <HAL_GPIO_Init+0x1a6>
 800160c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001610:	42b0      	cmp	r0, r6
 8001612:	d056      	beq.n	80016c2 <HAL_GPIO_Init+0x1aa>
 8001614:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001618:	42b0      	cmp	r0, r6
 800161a:	bf0c      	ite	eq
 800161c:	2606      	moveq	r6, #6
 800161e:	2607      	movne	r6, #7
 8001620:	fa06 f60e 	lsl.w	r6, r6, lr
 8001624:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001628:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 800162a:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 800162c:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800162e:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001632:	bf0c      	ite	eq
 8001634:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001636:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8001638:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 800163a:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800163c:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8001640:	bf0c      	ite	eq
 8001642:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001644:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 8001646:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 8001648:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800164a:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 800164e:	bf0c      	ite	eq
 8001650:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001652:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8001654:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 8001656:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001658:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 800165a:	bf54      	ite	pl
 800165c:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800165e:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 8001660:	6026      	str	r6, [r4, #0]
    position++;
 8001662:	3301      	adds	r3, #1
 8001664:	e75e      	b.n	8001524 <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001666:	2e03      	cmp	r6, #3
 8001668:	d18c      	bne.n	8001584 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 800166a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800166c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001670:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 8001674:	409f      	lsls	r7, r3
 8001676:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 800167a:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167c:	e78d      	b.n	800159a <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 800167e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001682:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001686:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800168a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800168e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001692:	f04f 0e0f 	mov.w	lr, #15
 8001696:	fa0e fe0b 	lsl.w	lr, lr, fp
 800169a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800169e:	690f      	ldr	r7, [r1, #16]
 80016a0:	fa07 f70b 	lsl.w	r7, r7, fp
 80016a4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 80016a8:	f8ca 7020 	str.w	r7, [sl, #32]
 80016ac:	e775      	b.n	800159a <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016ae:	2600      	movs	r6, #0
 80016b0:	e7b6      	b.n	8001620 <HAL_GPIO_Init+0x108>
 80016b2:	2601      	movs	r6, #1
 80016b4:	e7b4      	b.n	8001620 <HAL_GPIO_Init+0x108>
 80016b6:	2602      	movs	r6, #2
 80016b8:	e7b2      	b.n	8001620 <HAL_GPIO_Init+0x108>
 80016ba:	2603      	movs	r6, #3
 80016bc:	e7b0      	b.n	8001620 <HAL_GPIO_Init+0x108>
 80016be:	2604      	movs	r6, #4
 80016c0:	e7ae      	b.n	8001620 <HAL_GPIO_Init+0x108>
 80016c2:	2605      	movs	r6, #5
 80016c4:	e7ac      	b.n	8001620 <HAL_GPIO_Init+0x108>
 80016c6:	bf00      	nop
 80016c8:	40010400 	.word	0x40010400
 80016cc:	48000400 	.word	0x48000400
 80016d0:	40021000 	.word	0x40021000

080016d4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016d4:	4b02      	ldr	r3, [pc, #8]	; (80016e0 <HAL_PWREx_GetVoltageRange+0xc>)
 80016d6:	6818      	ldr	r0, [r3, #0]
#endif
}
 80016d8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40007000 	.word	0x40007000

080016e4 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e4:	4a17      	ldr	r2, [pc, #92]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e6:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016f0:	d11d      	bne.n	800172e <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016f6:	d101      	bne.n	80016fc <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016f8:	2000      	movs	r0, #0
 80016fa:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016fc:	6813      	ldr	r3, [r2, #0]
 80016fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001706:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2132      	movs	r1, #50	; 0x32
 800170e:	434b      	muls	r3, r1
 8001710:	490e      	ldr	r1, [pc, #56]	; (800174c <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001712:	fbb3 f3f1 	udiv	r3, r3, r1
 8001716:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001718:	6951      	ldr	r1, [r2, #20]
 800171a:	0549      	lsls	r1, r1, #21
 800171c:	d500      	bpl.n	8001720 <HAL_PWREx_ControlVoltageScaling+0x3c>
 800171e:	b923      	cbnz	r3, 800172a <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001720:	6953      	ldr	r3, [r2, #20]
 8001722:	055b      	lsls	r3, r3, #21
 8001724:	d5e8      	bpl.n	80016f8 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 8001726:	2003      	movs	r0, #3
}
 8001728:	4770      	bx	lr
        wait_loop_index--;
 800172a:	3b01      	subs	r3, #1
 800172c:	e7f4      	b.n	8001718 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800172e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001732:	bf1f      	itttt	ne
 8001734:	6813      	ldrne	r3, [r2, #0]
 8001736:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 800173a:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 800173e:	6013      	strne	r3, [r2, #0]
 8001740:	e7da      	b.n	80016f8 <HAL_PWREx_ControlVoltageScaling+0x14>
 8001742:	bf00      	nop
 8001744:	40007000 	.word	0x40007000
 8001748:	20000000 	.word	0x20000000
 800174c:	000f4240 	.word	0x000f4240

08001750 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001750:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001752:	4d1e      	ldr	r5, [pc, #120]	; (80017cc <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001754:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001756:	00da      	lsls	r2, r3, #3
{
 8001758:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800175a:	d518      	bpl.n	800178e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800175c:	f7ff ffba 	bl	80016d4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001760:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001764:	d123      	bne.n	80017ae <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001766:	2c80      	cmp	r4, #128	; 0x80
 8001768:	d929      	bls.n	80017be <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800176a:	2ca0      	cmp	r4, #160	; 0xa0
 800176c:	bf8c      	ite	hi
 800176e:	2402      	movhi	r4, #2
 8001770:	2401      	movls	r4, #1
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001772:	4917      	ldr	r1, [pc, #92]	; (80017d0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001774:	680a      	ldr	r2, [r1, #0]
 8001776:	f022 0207 	bic.w	r2, r2, #7
 800177a:	4322      	orrs	r2, r4
 800177c:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800177e:	6808      	ldr	r0, [r1, #0]
 8001780:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001784:	1b00      	subs	r0, r0, r4
 8001786:	bf18      	it	ne
 8001788:	2001      	movne	r0, #1
 800178a:	b003      	add	sp, #12
 800178c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001794:	65ab      	str	r3, [r5, #88]	; 0x58
 8001796:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179c:	9301      	str	r3, [sp, #4]
 800179e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80017a0:	f7ff ff98 	bl	80016d4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80017a4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80017a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017aa:	65ab      	str	r3, [r5, #88]	; 0x58
 80017ac:	e7d8      	b.n	8001760 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80017ae:	2c80      	cmp	r4, #128	; 0x80
 80017b0:	d807      	bhi.n	80017c2 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80017b2:	d008      	beq.n	80017c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80017b4:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80017b8:	425c      	negs	r4, r3
 80017ba:	415c      	adcs	r4, r3
 80017bc:	e7d9      	b.n	8001772 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80017be:	2400      	movs	r4, #0
 80017c0:	e7d7      	b.n	8001772 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80017c2:	2403      	movs	r4, #3
 80017c4:	e7d5      	b.n	8001772 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80017c6:	2402      	movs	r4, #2
 80017c8:	e7d3      	b.n	8001772 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40022000 	.word	0x40022000

080017d4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017d4:	4b22      	ldr	r3, [pc, #136]	; (8001860 <HAL_RCC_GetSysClockFreq+0x8c>)
 80017d6:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017d8:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017da:	f012 020c 	ands.w	r2, r2, #12
 80017de:	d005      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0x18>
 80017e0:	2a0c      	cmp	r2, #12
 80017e2:	d115      	bne.n	8001810 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e4:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017e8:	2901      	cmp	r1, #1
 80017ea:	d118      	bne.n	800181e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017ec:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80017ee:	481d      	ldr	r0, [pc, #116]	; (8001864 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017f0:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017f2:	bf55      	itete	pl
 80017f4:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017f8:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017fa:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017fe:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001802:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001806:	b34a      	cbz	r2, 800185c <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001808:	2a0c      	cmp	r2, #12
 800180a:	d009      	beq.n	8001820 <HAL_RCC_GetSysClockFreq+0x4c>
 800180c:	2000      	movs	r0, #0
  return sysclockfreq;
 800180e:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001810:	2a04      	cmp	r2, #4
 8001812:	d022      	beq.n	800185a <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001814:	2a08      	cmp	r2, #8
 8001816:	4814      	ldr	r0, [pc, #80]	; (8001868 <HAL_RCC_GetSysClockFreq+0x94>)
 8001818:	bf18      	it	ne
 800181a:	2000      	movne	r0, #0
 800181c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800181e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8001826:	2a02      	cmp	r2, #2
 8001828:	d015      	beq.n	8001856 <HAL_RCC_GetSysClockFreq+0x82>
 800182a:	490f      	ldr	r1, [pc, #60]	; (8001868 <HAL_RCC_GetSysClockFreq+0x94>)
 800182c:	2a03      	cmp	r2, #3
 800182e:	bf08      	it	eq
 8001830:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001832:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800183a:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800183c:	68d8      	ldr	r0, [r3, #12]
 800183e:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001842:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001846:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001848:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800184a:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800184c:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8001850:	fbb2 f0f0 	udiv	r0, r2, r0
 8001854:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8001856:	4805      	ldr	r0, [pc, #20]	; (800186c <HAL_RCC_GetSysClockFreq+0x98>)
 8001858:	e7eb      	b.n	8001832 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 800185a:	4804      	ldr	r0, [pc, #16]	; (800186c <HAL_RCC_GetSysClockFreq+0x98>)
}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000
 8001864:	0800d124 	.word	0x0800d124
 8001868:	007a1200 	.word	0x007a1200
 800186c:	00f42400 	.word	0x00f42400

08001870 <HAL_RCC_OscConfig>:
{
 8001870:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001874:	4605      	mov	r5, r0
 8001876:	b918      	cbnz	r0, 8001880 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001878:	2001      	movs	r0, #1
}
 800187a:	b003      	add	sp, #12
 800187c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001880:	4c92      	ldr	r4, [pc, #584]	; (8001acc <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001882:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001884:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001886:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001888:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800188a:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800188e:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001892:	d53d      	bpl.n	8001910 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001894:	b11e      	cbz	r6, 800189e <HAL_RCC_OscConfig+0x2e>
 8001896:	2e0c      	cmp	r6, #12
 8001898:	d166      	bne.n	8001968 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800189a:	2f01      	cmp	r7, #1
 800189c:	d164      	bne.n	8001968 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800189e:	6823      	ldr	r3, [r4, #0]
 80018a0:	0798      	lsls	r0, r3, #30
 80018a2:	d502      	bpl.n	80018aa <HAL_RCC_OscConfig+0x3a>
 80018a4:	69ab      	ldr	r3, [r5, #24]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0e6      	beq.n	8001878 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018aa:	6823      	ldr	r3, [r4, #0]
 80018ac:	6a28      	ldr	r0, [r5, #32]
 80018ae:	0719      	lsls	r1, r3, #28
 80018b0:	bf56      	itet	pl
 80018b2:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80018b6:	6823      	ldrmi	r3, [r4, #0]
 80018b8:	091b      	lsrpl	r3, r3, #4
 80018ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018be:	4298      	cmp	r0, r3
 80018c0:	d93b      	bls.n	800193a <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018c2:	f7ff ff45 	bl	8001750 <RCC_SetFlashLatencyFromMSIRange>
 80018c6:	2800      	cmp	r0, #0
 80018c8:	d1d6      	bne.n	8001878 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ca:	6823      	ldr	r3, [r4, #0]
 80018cc:	f043 0308 	orr.w	r3, r3, #8
 80018d0:	6023      	str	r3, [r4, #0]
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	6a2a      	ldr	r2, [r5, #32]
 80018d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018da:	4313      	orrs	r3, r2
 80018dc:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018de:	6863      	ldr	r3, [r4, #4]
 80018e0:	69ea      	ldr	r2, [r5, #28]
 80018e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80018e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80018ea:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018ec:	f7ff ff72 	bl	80017d4 <HAL_RCC_GetSysClockFreq>
 80018f0:	68a3      	ldr	r3, [r4, #8]
 80018f2:	4a77      	ldr	r2, [pc, #476]	; (8001ad0 <HAL_RCC_OscConfig+0x260>)
 80018f4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018f8:	5cd3      	ldrb	r3, [r2, r3]
 80018fa:	f003 031f 	and.w	r3, r3, #31
 80018fe:	40d8      	lsrs	r0, r3
 8001900:	4b74      	ldr	r3, [pc, #464]	; (8001ad4 <HAL_RCC_OscConfig+0x264>)
 8001902:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001904:	4b74      	ldr	r3, [pc, #464]	; (8001ad8 <HAL_RCC_OscConfig+0x268>)
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	f7ff fd40 	bl	800138c <HAL_InitTick>
        if(status != HAL_OK)
 800190c:	2800      	cmp	r0, #0
 800190e:	d1b4      	bne.n	800187a <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001910:	682b      	ldr	r3, [r5, #0]
 8001912:	07d8      	lsls	r0, r3, #31
 8001914:	d45f      	bmi.n	80019d6 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001916:	682b      	ldr	r3, [r5, #0]
 8001918:	0799      	lsls	r1, r3, #30
 800191a:	f100 809e 	bmi.w	8001a5a <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191e:	682b      	ldr	r3, [r5, #0]
 8001920:	0718      	lsls	r0, r3, #28
 8001922:	f100 80db 	bmi.w	8001adc <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001926:	682b      	ldr	r3, [r5, #0]
 8001928:	0759      	lsls	r1, r3, #29
 800192a:	f100 8101 	bmi.w	8001b30 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800192e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001930:	2b00      	cmp	r3, #0
 8001932:	f040 816a 	bne.w	8001c0a <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8001936:	2000      	movs	r0, #0
 8001938:	e79f      	b.n	800187a <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800193a:	6823      	ldr	r3, [r4, #0]
 800193c:	f043 0308 	orr.w	r3, r3, #8
 8001940:	6023      	str	r3, [r4, #0]
 8001942:	6823      	ldr	r3, [r4, #0]
 8001944:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001948:	4303      	orrs	r3, r0
 800194a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800194c:	6863      	ldr	r3, [r4, #4]
 800194e:	69ea      	ldr	r2, [r5, #28]
 8001950:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001954:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001958:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800195a:	2e00      	cmp	r6, #0
 800195c:	d1c6      	bne.n	80018ec <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800195e:	f7ff fef7 	bl	8001750 <RCC_SetFlashLatencyFromMSIRange>
 8001962:	2800      	cmp	r0, #0
 8001964:	d0c2      	beq.n	80018ec <HAL_RCC_OscConfig+0x7c>
 8001966:	e787      	b.n	8001878 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001968:	69ab      	ldr	r3, [r5, #24]
 800196a:	b31b      	cbz	r3, 80019b4 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 800196c:	6823      	ldr	r3, [r4, #0]
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001974:	f7ff fd4c 	bl	8001410 <HAL_GetTick>
 8001978:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	079a      	lsls	r2, r3, #30
 800197e:	d511      	bpl.n	80019a4 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001980:	6823      	ldr	r3, [r4, #0]
 8001982:	f043 0308 	orr.w	r3, r3, #8
 8001986:	6023      	str	r3, [r4, #0]
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	6a2a      	ldr	r2, [r5, #32]
 800198c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001990:	4313      	orrs	r3, r2
 8001992:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001994:	6863      	ldr	r3, [r4, #4]
 8001996:	69ea      	ldr	r2, [r5, #28]
 8001998:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800199c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80019a0:	6063      	str	r3, [r4, #4]
 80019a2:	e7b5      	b.n	8001910 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019a4:	f7ff fd34 	bl	8001410 <HAL_GetTick>
 80019a8:	eba0 0008 	sub.w	r0, r0, r8
 80019ac:	2802      	cmp	r0, #2
 80019ae:	d9e4      	bls.n	800197a <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 80019b0:	2003      	movs	r0, #3
 80019b2:	e762      	b.n	800187a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80019bc:	f7ff fd28 	bl	8001410 <HAL_GetTick>
 80019c0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019c2:	6823      	ldr	r3, [r4, #0]
 80019c4:	079b      	lsls	r3, r3, #30
 80019c6:	d5a3      	bpl.n	8001910 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019c8:	f7ff fd22 	bl	8001410 <HAL_GetTick>
 80019cc:	eba0 0008 	sub.w	r0, r0, r8
 80019d0:	2802      	cmp	r0, #2
 80019d2:	d9f6      	bls.n	80019c2 <HAL_RCC_OscConfig+0x152>
 80019d4:	e7ec      	b.n	80019b0 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019d6:	2e08      	cmp	r6, #8
 80019d8:	d003      	beq.n	80019e2 <HAL_RCC_OscConfig+0x172>
 80019da:	2e0c      	cmp	r6, #12
 80019dc:	d108      	bne.n	80019f0 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019de:	2f03      	cmp	r7, #3
 80019e0:	d106      	bne.n	80019f0 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e2:	6823      	ldr	r3, [r4, #0]
 80019e4:	039a      	lsls	r2, r3, #14
 80019e6:	d596      	bpl.n	8001916 <HAL_RCC_OscConfig+0xa6>
 80019e8:	686b      	ldr	r3, [r5, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d193      	bne.n	8001916 <HAL_RCC_OscConfig+0xa6>
 80019ee:	e743      	b.n	8001878 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f0:	686b      	ldr	r3, [r5, #4]
 80019f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f6:	d110      	bne.n	8001a1a <HAL_RCC_OscConfig+0x1aa>
 80019f8:	6823      	ldr	r3, [r4, #0]
 80019fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a00:	f7ff fd06 	bl	8001410 <HAL_GetTick>
 8001a04:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	039b      	lsls	r3, r3, #14
 8001a0a:	d484      	bmi.n	8001916 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fd00 	bl	8001410 <HAL_GetTick>
 8001a10:	eba0 0008 	sub.w	r0, r0, r8
 8001a14:	2864      	cmp	r0, #100	; 0x64
 8001a16:	d9f6      	bls.n	8001a06 <HAL_RCC_OscConfig+0x196>
 8001a18:	e7ca      	b.n	80019b0 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a1e:	d104      	bne.n	8001a2a <HAL_RCC_OscConfig+0x1ba>
 8001a20:	6823      	ldr	r3, [r4, #0]
 8001a22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a26:	6023      	str	r3, [r4, #0]
 8001a28:	e7e6      	b.n	80019f8 <HAL_RCC_OscConfig+0x188>
 8001a2a:	6822      	ldr	r2, [r4, #0]
 8001a2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a30:	6022      	str	r2, [r4, #0]
 8001a32:	6822      	ldr	r2, [r4, #0]
 8001a34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a38:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1e0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8001a3e:	f7ff fce7 	bl	8001410 <HAL_GetTick>
 8001a42:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a44:	6823      	ldr	r3, [r4, #0]
 8001a46:	0398      	lsls	r0, r3, #14
 8001a48:	f57f af65 	bpl.w	8001916 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a4c:	f7ff fce0 	bl	8001410 <HAL_GetTick>
 8001a50:	eba0 0008 	sub.w	r0, r0, r8
 8001a54:	2864      	cmp	r0, #100	; 0x64
 8001a56:	d9f5      	bls.n	8001a44 <HAL_RCC_OscConfig+0x1d4>
 8001a58:	e7aa      	b.n	80019b0 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a5a:	2e04      	cmp	r6, #4
 8001a5c:	d003      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1f6>
 8001a5e:	2e0c      	cmp	r6, #12
 8001a60:	d110      	bne.n	8001a84 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a62:	2f02      	cmp	r7, #2
 8001a64:	d10e      	bne.n	8001a84 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	0559      	lsls	r1, r3, #21
 8001a6a:	d503      	bpl.n	8001a74 <HAL_RCC_OscConfig+0x204>
 8001a6c:	68eb      	ldr	r3, [r5, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f43f af02 	beq.w	8001878 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	6863      	ldr	r3, [r4, #4]
 8001a76:	692a      	ldr	r2, [r5, #16]
 8001a78:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001a7c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001a80:	6063      	str	r3, [r4, #4]
 8001a82:	e74c      	b.n	800191e <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a84:	68eb      	ldr	r3, [r5, #12]
 8001a86:	b17b      	cbz	r3, 8001aa8 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a90:	f7ff fcbe 	bl	8001410 <HAL_GetTick>
 8001a94:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	055a      	lsls	r2, r3, #21
 8001a9a:	d4eb      	bmi.n	8001a74 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9c:	f7ff fcb8 	bl	8001410 <HAL_GetTick>
 8001aa0:	1bc0      	subs	r0, r0, r7
 8001aa2:	2802      	cmp	r0, #2
 8001aa4:	d9f7      	bls.n	8001a96 <HAL_RCC_OscConfig+0x226>
 8001aa6:	e783      	b.n	80019b0 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001aa8:	6823      	ldr	r3, [r4, #0]
 8001aaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fcae 	bl	8001410 <HAL_GetTick>
 8001ab4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ab6:	6823      	ldr	r3, [r4, #0]
 8001ab8:	055b      	lsls	r3, r3, #21
 8001aba:	f57f af30 	bpl.w	800191e <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001abe:	f7ff fca7 	bl	8001410 <HAL_GetTick>
 8001ac2:	1bc0      	subs	r0, r0, r7
 8001ac4:	2802      	cmp	r0, #2
 8001ac6:	d9f6      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x246>
 8001ac8:	e772      	b.n	80019b0 <HAL_RCC_OscConfig+0x140>
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	0800d10c 	.word	0x0800d10c
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	20000008 	.word	0x20000008
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001adc:	696b      	ldr	r3, [r5, #20]
 8001ade:	b19b      	cbz	r3, 8001b08 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8001ae0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001aec:	f7ff fc90 	bl	8001410 <HAL_GetTick>
 8001af0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001af2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001af6:	079a      	lsls	r2, r3, #30
 8001af8:	f53f af15 	bmi.w	8001926 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001afc:	f7ff fc88 	bl	8001410 <HAL_GetTick>
 8001b00:	1bc0      	subs	r0, r0, r7
 8001b02:	2802      	cmp	r0, #2
 8001b04:	d9f5      	bls.n	8001af2 <HAL_RCC_OscConfig+0x282>
 8001b06:	e753      	b.n	80019b0 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8001b08:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001b0c:	f023 0301 	bic.w	r3, r3, #1
 8001b10:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001b14:	f7ff fc7c 	bl	8001410 <HAL_GetTick>
 8001b18:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b1a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001b1e:	079b      	lsls	r3, r3, #30
 8001b20:	f57f af01 	bpl.w	8001926 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b24:	f7ff fc74 	bl	8001410 <HAL_GetTick>
 8001b28:	1bc0      	subs	r0, r0, r7
 8001b2a:	2802      	cmp	r0, #2
 8001b2c:	d9f5      	bls.n	8001b1a <HAL_RCC_OscConfig+0x2aa>
 8001b2e:	e73f      	b.n	80019b0 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b32:	00df      	lsls	r7, r3, #3
 8001b34:	d429      	bmi.n	8001b8a <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	65a3      	str	r3, [r4, #88]	; 0x58
 8001b3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b44:	9301      	str	r3, [sp, #4]
 8001b46:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b48:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b4c:	4f85      	ldr	r7, [pc, #532]	; (8001d64 <HAL_RCC_OscConfig+0x4f4>)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	05d8      	lsls	r0, r3, #23
 8001b52:	d51d      	bpl.n	8001b90 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b54:	68ab      	ldr	r3, [r5, #8]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d12b      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x342>
 8001b5a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001b66:	f7ff fc53 	bl	8001410 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b6e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b70:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001b74:	079a      	lsls	r2, r3, #30
 8001b76:	d542      	bpl.n	8001bfe <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8001b78:	f1b8 0f00 	cmp.w	r8, #0
 8001b7c:	f43f aed7 	beq.w	800192e <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b86:	65a3      	str	r3, [r4, #88]	; 0x58
 8001b88:	e6d1      	b.n	800192e <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8001b8a:	f04f 0800 	mov.w	r8, #0
 8001b8e:	e7dd      	b.n	8001b4c <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b96:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001b98:	f7ff fc3a 	bl	8001410 <HAL_GetTick>
 8001b9c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	05d9      	lsls	r1, r3, #23
 8001ba2:	d4d7      	bmi.n	8001b54 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba4:	f7ff fc34 	bl	8001410 <HAL_GetTick>
 8001ba8:	eba0 0009 	sub.w	r0, r0, r9
 8001bac:	2802      	cmp	r0, #2
 8001bae:	d9f6      	bls.n	8001b9e <HAL_RCC_OscConfig+0x32e>
 8001bb0:	e6fe      	b.n	80019b0 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb2:	2b05      	cmp	r3, #5
 8001bb4:	d106      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x354>
 8001bb6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001bc2:	e7ca      	b.n	8001b5a <HAL_RCC_OscConfig+0x2ea>
 8001bc4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001bc8:	f022 0201 	bic.w	r2, r2, #1
 8001bcc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001bd0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001bd4:	f022 0204 	bic.w	r2, r2, #4
 8001bd8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1c2      	bne.n	8001b66 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8001be0:	f7ff fc16 	bl	8001410 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be4:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001be8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bea:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001bee:	079b      	lsls	r3, r3, #30
 8001bf0:	d5c2      	bpl.n	8001b78 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf2:	f7ff fc0d 	bl	8001410 <HAL_GetTick>
 8001bf6:	1bc0      	subs	r0, r0, r7
 8001bf8:	4548      	cmp	r0, r9
 8001bfa:	d9f6      	bls.n	8001bea <HAL_RCC_OscConfig+0x37a>
 8001bfc:	e6d8      	b.n	80019b0 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfe:	f7ff fc07 	bl	8001410 <HAL_GetTick>
 8001c02:	1bc0      	subs	r0, r0, r7
 8001c04:	4548      	cmp	r0, r9
 8001c06:	d9b3      	bls.n	8001b70 <HAL_RCC_OscConfig+0x300>
 8001c08:	e6d2      	b.n	80019b0 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	f040 808f 	bne.w	8001d2e <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8001c10:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c12:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001c14:	f003 0103 	and.w	r1, r3, #3
 8001c18:	4291      	cmp	r1, r2
 8001c1a:	d124      	bne.n	8001c66 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c1c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001c1e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c22:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c24:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001c28:	d11d      	bne.n	8001c66 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c2a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8001c2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c30:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001c34:	d117      	bne.n	8001c66 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c36:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001c38:	3a07      	subs	r2, #7
 8001c3a:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8001c3e:	bf18      	it	ne
 8001c40:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c42:	4291      	cmp	r1, r2
 8001c44:	d10f      	bne.n	8001c66 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c46:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001c48:	0852      	lsrs	r2, r2, #1
 8001c4a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001c4e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c50:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001c54:	d107      	bne.n	8001c66 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c56:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001c58:	0852      	lsrs	r2, r2, #1
 8001c5a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8001c5e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c60:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001c64:	d04a      	beq.n	8001cfc <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c66:	2e0c      	cmp	r6, #12
 8001c68:	f43f ae06 	beq.w	8001878 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c6c:	6823      	ldr	r3, [r4, #0]
 8001c6e:	015f      	lsls	r7, r3, #5
 8001c70:	f53f ae02 	bmi.w	8001878 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c74:	6823      	ldr	r3, [r4, #0]
 8001c76:	00de      	lsls	r6, r3, #3
 8001c78:	f53f adfe 	bmi.w	8001878 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8001c7c:	6823      	ldr	r3, [r4, #0]
 8001c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c82:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8001c84:	f7ff fbc4 	bl	8001410 <HAL_GetTick>
 8001c88:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c8a:	6823      	ldr	r3, [r4, #0]
 8001c8c:	0198      	lsls	r0, r3, #6
 8001c8e:	d42f      	bmi.n	8001cf0 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c90:	68e2      	ldr	r2, [r4, #12]
 8001c92:	4b35      	ldr	r3, [pc, #212]	; (8001d68 <HAL_RCC_OscConfig+0x4f8>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001c9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ca0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001ca2:	3a01      	subs	r2, #1
 8001ca4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001ca8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001caa:	0912      	lsrs	r2, r2, #4
 8001cac:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001cb0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001cb2:	0852      	lsrs	r2, r2, #1
 8001cb4:	3a01      	subs	r2, #1
 8001cb6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001cba:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001cbc:	0852      	lsrs	r2, r2, #1
 8001cbe:	3a01      	subs	r2, #1
 8001cc0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001cc4:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8001cc6:	6823      	ldr	r3, [r4, #0]
 8001cc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ccc:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cce:	68e3      	ldr	r3, [r4, #12]
 8001cd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd4:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8001cd6:	f7ff fb9b 	bl	8001410 <HAL_GetTick>
 8001cda:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cdc:	6823      	ldr	r3, [r4, #0]
 8001cde:	0199      	lsls	r1, r3, #6
 8001ce0:	f53f ae29 	bmi.w	8001936 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7ff fb94 	bl	8001410 <HAL_GetTick>
 8001ce8:	1b40      	subs	r0, r0, r5
 8001cea:	2802      	cmp	r0, #2
 8001cec:	d9f6      	bls.n	8001cdc <HAL_RCC_OscConfig+0x46c>
 8001cee:	e65f      	b.n	80019b0 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7ff fb8e 	bl	8001410 <HAL_GetTick>
 8001cf4:	1b80      	subs	r0, r0, r6
 8001cf6:	2802      	cmp	r0, #2
 8001cf8:	d9c7      	bls.n	8001c8a <HAL_RCC_OscConfig+0x41a>
 8001cfa:	e659      	b.n	80019b0 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfc:	6823      	ldr	r3, [r4, #0]
 8001cfe:	019a      	lsls	r2, r3, #6
 8001d00:	f53f ae19 	bmi.w	8001936 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8001d04:	6823      	ldr	r3, [r4, #0]
 8001d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d0a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d0c:	68e3      	ldr	r3, [r4, #12]
 8001d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d12:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8001d14:	f7ff fb7c 	bl	8001410 <HAL_GetTick>
 8001d18:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	019b      	lsls	r3, r3, #6
 8001d1e:	f53f ae0a 	bmi.w	8001936 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d22:	f7ff fb75 	bl	8001410 <HAL_GetTick>
 8001d26:	1b40      	subs	r0, r0, r5
 8001d28:	2802      	cmp	r0, #2
 8001d2a:	d9f6      	bls.n	8001d1a <HAL_RCC_OscConfig+0x4aa>
 8001d2c:	e640      	b.n	80019b0 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d2e:	2e0c      	cmp	r6, #12
 8001d30:	f43f ada2 	beq.w	8001878 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001d34:	6823      	ldr	r3, [r4, #0]
 8001d36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d3a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d3c:	f7ff fb68 	bl	8001410 <HAL_GetTick>
 8001d40:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8001d48:	d105      	bne.n	8001d56 <HAL_RCC_OscConfig+0x4e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d4a:	68e1      	ldr	r1, [r4, #12]
 8001d4c:	4a07      	ldr	r2, [pc, #28]	; (8001d6c <HAL_RCC_OscConfig+0x4fc>)
 8001d4e:	400a      	ands	r2, r1
 8001d50:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 8001d52:	4618      	mov	r0, r3
 8001d54:	e591      	b.n	800187a <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d56:	f7ff fb5b 	bl	8001410 <HAL_GetTick>
 8001d5a:	1b40      	subs	r0, r0, r5
 8001d5c:	2802      	cmp	r0, #2
 8001d5e:	d9f0      	bls.n	8001d42 <HAL_RCC_OscConfig+0x4d2>
 8001d60:	e626      	b.n	80019b0 <HAL_RCC_OscConfig+0x140>
 8001d62:	bf00      	nop
 8001d64:	40007000 	.word	0x40007000
 8001d68:	f99d808c 	.word	0xf99d808c
 8001d6c:	feeefffc 	.word	0xfeeefffc

08001d70 <HAL_RCC_ClockConfig>:
{
 8001d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d74:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001d76:	4604      	mov	r4, r0
 8001d78:	b910      	cbnz	r0, 8001d80 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001d7a:	2001      	movs	r0, #1
}
 8001d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d80:	4a4b      	ldr	r2, [pc, #300]	; (8001eb0 <HAL_RCC_ClockConfig+0x140>)
 8001d82:	6813      	ldr	r3, [r2, #0]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	428b      	cmp	r3, r1
 8001d8a:	d32c      	bcc.n	8001de6 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d8c:	6821      	ldr	r1, [r4, #0]
 8001d8e:	0788      	lsls	r0, r1, #30
 8001d90:	d434      	bmi.n	8001dfc <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d92:	07c9      	lsls	r1, r1, #31
 8001d94:	d43f      	bmi.n	8001e16 <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d96:	6821      	ldr	r1, [r4, #0]
 8001d98:	078a      	lsls	r2, r1, #30
 8001d9a:	d468      	bmi.n	8001e6e <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d9c:	4a44      	ldr	r2, [pc, #272]	; (8001eb0 <HAL_RCC_ClockConfig+0x140>)
 8001d9e:	6813      	ldr	r3, [r2, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	42ab      	cmp	r3, r5
 8001da6:	d86f      	bhi.n	8001e88 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da8:	f011 0f04 	tst.w	r1, #4
 8001dac:	4d41      	ldr	r5, [pc, #260]	; (8001eb4 <HAL_RCC_ClockConfig+0x144>)
 8001dae:	d177      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db0:	070b      	lsls	r3, r1, #28
 8001db2:	d506      	bpl.n	8001dc2 <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001db4:	68ab      	ldr	r3, [r5, #8]
 8001db6:	6922      	ldr	r2, [r4, #16]
 8001db8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001dbc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001dc0:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dc2:	f7ff fd07 	bl	80017d4 <HAL_RCC_GetSysClockFreq>
 8001dc6:	68ab      	ldr	r3, [r5, #8]
 8001dc8:	4a3b      	ldr	r2, [pc, #236]	; (8001eb8 <HAL_RCC_ClockConfig+0x148>)
 8001dca:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dd2:	5cd3      	ldrb	r3, [r2, r3]
 8001dd4:	f003 031f 	and.w	r3, r3, #31
 8001dd8:	40d8      	lsrs	r0, r3
 8001dda:	4b38      	ldr	r3, [pc, #224]	; (8001ebc <HAL_RCC_ClockConfig+0x14c>)
 8001ddc:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001dde:	4b38      	ldr	r3, [pc, #224]	; (8001ec0 <HAL_RCC_ClockConfig+0x150>)
 8001de0:	6818      	ldr	r0, [r3, #0]
 8001de2:	f7ff bad3 	b.w	800138c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de6:	6813      	ldr	r3, [r2, #0]
 8001de8:	f023 0307 	bic.w	r3, r3, #7
 8001dec:	430b      	orrs	r3, r1
 8001dee:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df0:	6813      	ldr	r3, [r2, #0]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	428b      	cmp	r3, r1
 8001df8:	d1bf      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xa>
 8001dfa:	e7c7      	b.n	8001d8c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dfc:	4a2d      	ldr	r2, [pc, #180]	; (8001eb4 <HAL_RCC_ClockConfig+0x144>)
 8001dfe:	68a0      	ldr	r0, [r4, #8]
 8001e00:	6893      	ldr	r3, [r2, #8]
 8001e02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e06:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e08:	bf81      	itttt	hi
 8001e0a:	6893      	ldrhi	r3, [r2, #8]
 8001e0c:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 8001e10:	4303      	orrhi	r3, r0
 8001e12:	6093      	strhi	r3, [r2, #8]
 8001e14:	e7bd      	b.n	8001d92 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e16:	6862      	ldr	r2, [r4, #4]
 8001e18:	4e26      	ldr	r6, [pc, #152]	; (8001eb4 <HAL_RCC_ClockConfig+0x144>)
 8001e1a:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1c:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e1e:	d11a      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e20:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e24:	d0a9      	beq.n	8001d7a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e26:	68b3      	ldr	r3, [r6, #8]
 8001e28:	f023 0303 	bic.w	r3, r3, #3
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001e30:	f7ff faee 	bl	8001410 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e34:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001e38:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3a:	68b3      	ldr	r3, [r6, #8]
 8001e3c:	6862      	ldr	r2, [r4, #4]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e46:	d0a6      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e48:	f7ff fae2 	bl	8001410 <HAL_GetTick>
 8001e4c:	1bc0      	subs	r0, r0, r7
 8001e4e:	4540      	cmp	r0, r8
 8001e50:	d9f3      	bls.n	8001e3a <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 8001e52:	2003      	movs	r0, #3
 8001e54:	e792      	b.n	8001d7c <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e56:	2a02      	cmp	r2, #2
 8001e58:	d102      	bne.n	8001e60 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e5a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e5e:	e7e1      	b.n	8001e24 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e60:	b912      	cbnz	r2, 8001e68 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e62:	f013 0f02 	tst.w	r3, #2
 8001e66:	e7dd      	b.n	8001e24 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e68:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001e6c:	e7da      	b.n	8001e24 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e6e:	4a11      	ldr	r2, [pc, #68]	; (8001eb4 <HAL_RCC_ClockConfig+0x144>)
 8001e70:	68a0      	ldr	r0, [r4, #8]
 8001e72:	6893      	ldr	r3, [r2, #8]
 8001e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e78:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e7a:	bf3f      	itttt	cc
 8001e7c:	6893      	ldrcc	r3, [r2, #8]
 8001e7e:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 8001e82:	4303      	orrcc	r3, r0
 8001e84:	6093      	strcc	r3, [r2, #8]
 8001e86:	e789      	b.n	8001d9c <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e88:	6813      	ldr	r3, [r2, #0]
 8001e8a:	f023 0307 	bic.w	r3, r3, #7
 8001e8e:	432b      	orrs	r3, r5
 8001e90:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	6813      	ldr	r3, [r2, #0]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	42ab      	cmp	r3, r5
 8001e9a:	f47f af6e 	bne.w	8001d7a <HAL_RCC_ClockConfig+0xa>
 8001e9e:	e783      	b.n	8001da8 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea0:	68ab      	ldr	r3, [r5, #8]
 8001ea2:	68e2      	ldr	r2, [r4, #12]
 8001ea4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	60ab      	str	r3, [r5, #8]
 8001eac:	e780      	b.n	8001db0 <HAL_RCC_ClockConfig+0x40>
 8001eae:	bf00      	nop
 8001eb0:	40022000 	.word	0x40022000
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	0800d10c 	.word	0x0800d10c
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	20000008 	.word	0x20000008

08001ec4 <HAL_RCC_GetHCLKFreq>:
}
 8001ec4:	4b01      	ldr	r3, [pc, #4]	; (8001ecc <HAL_RCC_GetHCLKFreq+0x8>)
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000000 	.word	0x20000000

08001ed0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001ed2:	4a06      	ldr	r2, [pc, #24]	; (8001eec <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001eda:	5cd3      	ldrb	r3, [r2, r3]
 8001edc:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ede:	6810      	ldr	r0, [r2, #0]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
}
 8001ee4:	40d8      	lsrs	r0, r3
 8001ee6:	4770      	bx	lr
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	0800d11c 	.word	0x0800d11c
 8001ef0:	20000000 	.word	0x20000000

08001ef4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001ef6:	4a06      	ldr	r2, [pc, #24]	; (8001f10 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001efe:	5cd3      	ldrb	r3, [r2, r3]
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f02:	6810      	ldr	r0, [r2, #0]
 8001f04:	f003 031f 	and.w	r3, r3, #31
}
 8001f08:	40d8      	lsrs	r0, r3
 8001f0a:	4770      	bx	lr
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	0800d11c 	.word	0x0800d11c
 8001f14:	20000000 	.word	0x20000000

08001f18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f1a:	4c42      	ldr	r4, [pc, #264]	; (8002024 <RCCEx_PLLSAI1_Config+0x10c>)
 8001f1c:	68e2      	ldr	r2, [r4, #12]
 8001f1e:	0793      	lsls	r3, r2, #30
{
 8001f20:	4605      	mov	r5, r0
 8001f22:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001f24:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f26:	d029      	beq.n	8001f7c <RCCEx_PLLSAI1_Config+0x64>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001f28:	68e2      	ldr	r2, [r4, #12]
 8001f2a:	f002 0203 	and.w	r2, r2, #3
 8001f2e:	4282      	cmp	r2, r0
 8001f30:	d13c      	bne.n	8001fac <RCCEx_PLLSAI1_Config+0x94>
       ||
 8001f32:	2a00      	cmp	r2, #0
 8001f34:	d03a      	beq.n	8001fac <RCCEx_PLLSAI1_Config+0x94>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001f36:	68e3      	ldr	r3, [r4, #12]
       ||
 8001f38:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001f3a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001f3e:	3301      	adds	r3, #1
       ||
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d133      	bne.n	8001fac <RCCEx_PLLSAI1_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f4a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f4c:	f7ff fa60 	bl	8001410 <HAL_GetTick>
 8001f50:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001f52:	6823      	ldr	r3, [r4, #0]
 8001f54:	011a      	lsls	r2, r3, #4
 8001f56:	d432      	bmi.n	8001fbe <RCCEx_PLLSAI1_Config+0xa6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f58:	68aa      	ldr	r2, [r5, #8]
 8001f5a:	0212      	lsls	r2, r2, #8
      if(Divider == DIVIDER_P_UPDATE)
 8001f5c:	2e00      	cmp	r6, #0
 8001f5e:	d035      	beq.n	8001fcc <RCCEx_PLLSAI1_Config+0xb4>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001f60:	2e01      	cmp	r6, #1
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f62:	6923      	ldr	r3, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8001f64:	d14d      	bne.n	8002002 <RCCEx_PLLSAI1_Config+0xea>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f66:	6929      	ldr	r1, [r5, #16]
 8001f68:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001f6c:	0849      	lsrs	r1, r1, #1
 8001f6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001f72:	3901      	subs	r1, #1
 8001f74:	4313      	orrs	r3, r2
 8001f76:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8001f7a:	e031      	b.n	8001fe0 <RCCEx_PLLSAI1_Config+0xc8>
    switch(PllSai1->PLLSAI1Source)
 8001f7c:	2802      	cmp	r0, #2
 8001f7e:	d011      	beq.n	8001fa4 <RCCEx_PLLSAI1_Config+0x8c>
 8001f80:	2803      	cmp	r0, #3
 8001f82:	d015      	beq.n	8001fb0 <RCCEx_PLLSAI1_Config+0x98>
 8001f84:	2801      	cmp	r0, #1
 8001f86:	d111      	bne.n	8001fac <RCCEx_PLLSAI1_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001f88:	6822      	ldr	r2, [r4, #0]
 8001f8a:	0797      	lsls	r7, r2, #30
 8001f8c:	d51d      	bpl.n	8001fca <RCCEx_PLLSAI1_Config+0xb2>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001f8e:	68e2      	ldr	r2, [r4, #12]
 8001f90:	6869      	ldr	r1, [r5, #4]
 8001f92:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8001f96:	3901      	subs	r1, #1
 8001f98:	ea42 0300 	orr.w	r3, r2, r0
 8001f9c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001fa0:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 8001fa2:	e7cf      	b.n	8001f44 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001fa4:	6822      	ldr	r2, [r4, #0]
 8001fa6:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001faa:	d1f0      	bne.n	8001f8e <RCCEx_PLLSAI1_Config+0x76>
      status = HAL_ERROR;
 8001fac:	2001      	movs	r0, #1
 8001fae:	e00c      	b.n	8001fca <RCCEx_PLLSAI1_Config+0xb2>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001fb0:	6822      	ldr	r2, [r4, #0]
 8001fb2:	0391      	lsls	r1, r2, #14
 8001fb4:	d4eb      	bmi.n	8001f8e <RCCEx_PLLSAI1_Config+0x76>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001fb6:	6822      	ldr	r2, [r4, #0]
 8001fb8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001fbc:	e7f5      	b.n	8001faa <RCCEx_PLLSAI1_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001fbe:	f7ff fa27 	bl	8001410 <HAL_GetTick>
 8001fc2:	1bc0      	subs	r0, r0, r7
 8001fc4:	2802      	cmp	r0, #2
 8001fc6:	d9c4      	bls.n	8001f52 <RCCEx_PLLSAI1_Config+0x3a>
    switch(PllSai1->PLLSAI1Source)
 8001fc8:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8001fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001fcc:	6923      	ldr	r3, [r4, #16]
 8001fce:	68e9      	ldr	r1, [r5, #12]
 8001fd0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8001fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd8:	0909      	lsrs	r1, r1, #4
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001fe0:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8001fe2:	6823      	ldr	r3, [r4, #0]
 8001fe4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fe8:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8001fea:	f7ff fa11 	bl	8001410 <HAL_GetTick>
 8001fee:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001ff0:	6823      	ldr	r3, [r4, #0]
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	d510      	bpl.n	8002018 <RCCEx_PLLSAI1_Config+0x100>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001ff6:	6923      	ldr	r3, [r4, #16]
 8001ff8:	69aa      	ldr	r2, [r5, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	6123      	str	r3, [r4, #16]
 8001ffe:	2000      	movs	r0, #0
  return status;
 8002000:	e7e3      	b.n	8001fca <RCCEx_PLLSAI1_Config+0xb2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002002:	6969      	ldr	r1, [r5, #20]
 8002004:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002008:	0849      	lsrs	r1, r1, #1
 800200a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800200e:	3901      	subs	r1, #1
 8002010:	4313      	orrs	r3, r2
 8002012:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002016:	e7e3      	b.n	8001fe0 <RCCEx_PLLSAI1_Config+0xc8>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002018:	f7ff f9fa 	bl	8001410 <HAL_GetTick>
 800201c:	1b80      	subs	r0, r0, r6
 800201e:	2802      	cmp	r0, #2
 8002020:	d9e6      	bls.n	8001ff0 <RCCEx_PLLSAI1_Config+0xd8>
 8002022:	e7d1      	b.n	8001fc8 <RCCEx_PLLSAI1_Config+0xb0>
 8002024:	40021000 	.word	0x40021000

08002028 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800202a:	4c3b      	ldr	r4, [pc, #236]	; (8002118 <RCCEx_PLLSAI2_Config+0xf0>)
 800202c:	68e2      	ldr	r2, [r4, #12]
 800202e:	0793      	lsls	r3, r2, #30
{
 8002030:	4605      	mov	r5, r0
 8002032:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002034:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002036:	d026      	beq.n	8002086 <RCCEx_PLLSAI2_Config+0x5e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002038:	68e2      	ldr	r2, [r4, #12]
 800203a:	f002 0203 	and.w	r2, r2, #3
 800203e:	4282      	cmp	r2, r0
 8002040:	d139      	bne.n	80020b6 <RCCEx_PLLSAI2_Config+0x8e>
       ||
 8002042:	2a00      	cmp	r2, #0
 8002044:	d037      	beq.n	80020b6 <RCCEx_PLLSAI2_Config+0x8e>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002046:	68e3      	ldr	r3, [r4, #12]
       ||
 8002048:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800204a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800204e:	3301      	adds	r3, #1
       ||
 8002050:	4293      	cmp	r3, r2
 8002052:	d130      	bne.n	80020b6 <RCCEx_PLLSAI2_Config+0x8e>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002054:	6823      	ldr	r3, [r4, #0]
 8002056:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800205a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800205c:	f7ff f9d8 	bl	8001410 <HAL_GetTick>
 8002060:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002062:	6823      	ldr	r3, [r4, #0]
 8002064:	009a      	lsls	r2, r3, #2
 8002066:	d42f      	bmi.n	80020c8 <RCCEx_PLLSAI2_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002068:	68a9      	ldr	r1, [r5, #8]
 800206a:	0209      	lsls	r1, r1, #8
      if(Divider == DIVIDER_P_UPDATE)
 800206c:	b39e      	cbz	r6, 80020d6 <RCCEx_PLLSAI2_Config+0xae>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800206e:	6963      	ldr	r3, [r4, #20]
 8002070:	692a      	ldr	r2, [r5, #16]
 8002072:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002076:	0852      	lsrs	r2, r2, #1
 8002078:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800207c:	3a01      	subs	r2, #1
 800207e:	430b      	orrs	r3, r1
 8002080:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002084:	e031      	b.n	80020ea <RCCEx_PLLSAI2_Config+0xc2>
    switch(PllSai2->PLLSAI2Source)
 8002086:	2802      	cmp	r0, #2
 8002088:	d011      	beq.n	80020ae <RCCEx_PLLSAI2_Config+0x86>
 800208a:	2803      	cmp	r0, #3
 800208c:	d015      	beq.n	80020ba <RCCEx_PLLSAI2_Config+0x92>
 800208e:	2801      	cmp	r0, #1
 8002090:	d111      	bne.n	80020b6 <RCCEx_PLLSAI2_Config+0x8e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002092:	6822      	ldr	r2, [r4, #0]
 8002094:	0797      	lsls	r7, r2, #30
 8002096:	d51d      	bpl.n	80020d4 <RCCEx_PLLSAI2_Config+0xac>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002098:	68e2      	ldr	r2, [r4, #12]
 800209a:	6869      	ldr	r1, [r5, #4]
 800209c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80020a0:	3901      	subs	r1, #1
 80020a2:	ea42 0300 	orr.w	r3, r2, r0
 80020a6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80020aa:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 80020ac:	e7d2      	b.n	8002054 <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80020ae:	6822      	ldr	r2, [r4, #0]
 80020b0:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80020b4:	d1f0      	bne.n	8002098 <RCCEx_PLLSAI2_Config+0x70>
      status = HAL_ERROR;
 80020b6:	2001      	movs	r0, #1
 80020b8:	e00c      	b.n	80020d4 <RCCEx_PLLSAI2_Config+0xac>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80020ba:	6822      	ldr	r2, [r4, #0]
 80020bc:	0391      	lsls	r1, r2, #14
 80020be:	d4eb      	bmi.n	8002098 <RCCEx_PLLSAI2_Config+0x70>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80020c0:	6822      	ldr	r2, [r4, #0]
 80020c2:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80020c6:	e7f5      	b.n	80020b4 <RCCEx_PLLSAI2_Config+0x8c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80020c8:	f7ff f9a2 	bl	8001410 <HAL_GetTick>
 80020cc:	1bc0      	subs	r0, r0, r7
 80020ce:	2802      	cmp	r0, #2
 80020d0:	d9c7      	bls.n	8002062 <RCCEx_PLLSAI2_Config+0x3a>
    switch(PllSai2->PLLSAI2Source)
 80020d2:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 80020d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80020d6:	6963      	ldr	r3, [r4, #20]
 80020d8:	68ea      	ldr	r2, [r5, #12]
 80020da:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80020de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e2:	0912      	lsrs	r2, r2, #4
 80020e4:	430b      	orrs	r3, r1
 80020e6:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80020ea:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80020ec:	6823      	ldr	r3, [r4, #0]
 80020ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f2:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80020f4:	f7ff f98c 	bl	8001410 <HAL_GetTick>
 80020f8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	d505      	bpl.n	800210c <RCCEx_PLLSAI2_Config+0xe4>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002100:	6963      	ldr	r3, [r4, #20]
 8002102:	696a      	ldr	r2, [r5, #20]
 8002104:	4313      	orrs	r3, r2
 8002106:	6163      	str	r3, [r4, #20]
 8002108:	2000      	movs	r0, #0
  return status;
 800210a:	e7e3      	b.n	80020d4 <RCCEx_PLLSAI2_Config+0xac>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800210c:	f7ff f980 	bl	8001410 <HAL_GetTick>
 8002110:	1b80      	subs	r0, r0, r6
 8002112:	2802      	cmp	r0, #2
 8002114:	d9f1      	bls.n	80020fa <RCCEx_PLLSAI2_Config+0xd2>
 8002116:	e7dc      	b.n	80020d2 <RCCEx_PLLSAI2_Config+0xaa>
 8002118:	40021000 	.word	0x40021000

0800211c <HAL_RCCEx_PeriphCLKConfig>:
{
 800211c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002120:	6806      	ldr	r6, [r0, #0]
 8002122:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8002126:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002128:	d009      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 800212a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800212c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002130:	d022      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002132:	d813      	bhi.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002134:	b331      	cbz	r1, 8002184 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8002136:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800213a:	d02a      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800213c:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	04d8      	lsls	r0, r3, #19
 8002142:	d509      	bpl.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002144:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002146:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800214a:	d02c      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800214c:	d826      	bhi.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x80>
 800214e:	b381      	cbz	r1, 80021b2 <HAL_RCCEx_PeriphCLKConfig+0x96>
 8002150:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002154:	d072      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x120>
 8002156:	2601      	movs	r6, #1
 8002158:	4635      	mov	r5, r6
 800215a:	e039      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 800215c:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002160:	d1ec      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002162:	4a3c      	ldr	r2, [pc, #240]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002164:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002166:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800216a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800216e:	430b      	orrs	r3, r1
 8002170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002174:	2600      	movs	r6, #0
 8002176:	e7e2      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002178:	4a36      	ldr	r2, [pc, #216]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800217a:	68d3      	ldr	r3, [r2, #12]
 800217c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002180:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 8002182:	e7ee      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002184:	3004      	adds	r0, #4
 8002186:	f7ff fec7 	bl	8001f18 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800218a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800218c:	2800      	cmp	r0, #0
 800218e:	d1d6      	bne.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x22>
 8002190:	e7e7      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002192:	2100      	movs	r1, #0
 8002194:	3020      	adds	r0, #32
 8002196:	f7ff ff47 	bl	8002028 <RCCEx_PLLSAI2_Config>
 800219a:	e7f6      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 800219c:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80021a0:	d1d9      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 80021a2:	4635      	mov	r5, r6
 80021a4:	e009      	b.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021a6:	4a2b      	ldr	r2, [pc, #172]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80021a8:	68d3      	ldr	r3, [r2, #12]
 80021aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ae:	60d3      	str	r3, [r2, #12]
      break;
 80021b0:	e7f7      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021b2:	1d20      	adds	r0, r4, #4
 80021b4:	f7ff feb0 	bl	8001f18 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021b8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80021ba:	2d00      	cmp	r5, #0
 80021bc:	d144      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021be:	4a25      	ldr	r2, [pc, #148]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80021c0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80021c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80021c6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80021ca:	430b      	orrs	r3, r1
 80021cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021d0:	6823      	ldr	r3, [r4, #0]
 80021d2:	0399      	lsls	r1, r3, #14
 80021d4:	f140 815d 	bpl.w	8002492 <HAL_RCCEx_PeriphCLKConfig+0x376>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021d8:	4f1e      	ldr	r7, [pc, #120]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80021da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021dc:	00da      	lsls	r2, r3, #3
 80021de:	d435      	bmi.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80021e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ee:	9301      	str	r3, [sp, #4]
 80021f0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80021f2:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021f6:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8002258 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80021fa:	f8d9 3000 	ldr.w	r3, [r9]
 80021fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002202:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002206:	f7ff f903 	bl	8001410 <HAL_GetTick>
 800220a:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800220c:	f8d9 3000 	ldr.w	r3, [r9]
 8002210:	05db      	lsls	r3, r3, #23
 8002212:	d523      	bpl.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x140>
    if(ret == HAL_OK)
 8002214:	bb4d      	cbnz	r5, 800226a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002216:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800221a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800221e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002222:	f040 810e 	bne.w	8002442 <HAL_RCCEx_PeriphCLKConfig+0x326>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002226:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800222a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800222e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002232:	4313      	orrs	r3, r2
 8002234:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002238:	4635      	mov	r5, r6
 800223a:	e016      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800223c:	2100      	movs	r1, #0
 800223e:	f104 0020 	add.w	r0, r4, #32
 8002242:	f7ff fef1 	bl	8002028 <RCCEx_PLLSAI2_Config>
 8002246:	e7b7      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002248:	462e      	mov	r6, r5
 800224a:	e7c1      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 800224c:	f04f 0800 	mov.w	r8, #0
 8002250:	e7d1      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225c:	f7ff f8d8 	bl	8001410 <HAL_GetTick>
 8002260:	eba0 000a 	sub.w	r0, r0, sl
 8002264:	2802      	cmp	r0, #2
 8002266:	d9d1      	bls.n	800220c <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 8002268:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800226a:	f1b8 0f00 	cmp.w	r8, #0
 800226e:	d003      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002270:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002276:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002278:	6823      	ldr	r3, [r4, #0]
 800227a:	07da      	lsls	r2, r3, #31
 800227c:	d508      	bpl.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x174>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800227e:	499b      	ldr	r1, [pc, #620]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002280:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002282:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002286:	f022 0203 	bic.w	r2, r2, #3
 800228a:	4302      	orrs	r2, r0
 800228c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002290:	079f      	lsls	r7, r3, #30
 8002292:	d508      	bpl.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002294:	4995      	ldr	r1, [pc, #596]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002296:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002298:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800229c:	f022 020c 	bic.w	r2, r2, #12
 80022a0:	4302      	orrs	r2, r0
 80022a2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022a6:	075e      	lsls	r6, r3, #29
 80022a8:	d508      	bpl.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022aa:	4990      	ldr	r1, [pc, #576]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80022ac:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80022ae:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80022b2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80022b6:	4302      	orrs	r2, r0
 80022b8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022bc:	0718      	lsls	r0, r3, #28
 80022be:	d508      	bpl.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022c0:	498a      	ldr	r1, [pc, #552]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80022c2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80022c4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80022c8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80022cc:	4302      	orrs	r2, r0
 80022ce:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022d2:	06d9      	lsls	r1, r3, #27
 80022d4:	d508      	bpl.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022d6:	4985      	ldr	r1, [pc, #532]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80022d8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80022da:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80022de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80022e2:	4302      	orrs	r2, r0
 80022e4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022e8:	069a      	lsls	r2, r3, #26
 80022ea:	d508      	bpl.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022ec:	497f      	ldr	r1, [pc, #508]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80022ee:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80022f0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80022f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80022f8:	4302      	orrs	r2, r0
 80022fa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022fe:	059f      	lsls	r7, r3, #22
 8002300:	d508      	bpl.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002302:	497a      	ldr	r1, [pc, #488]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002304:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002306:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800230a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800230e:	4302      	orrs	r2, r0
 8002310:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002314:	055e      	lsls	r6, r3, #21
 8002316:	d508      	bpl.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002318:	4974      	ldr	r1, [pc, #464]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800231a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800231c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002320:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002324:	4302      	orrs	r2, r0
 8002326:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800232a:	0658      	lsls	r0, r3, #25
 800232c:	d508      	bpl.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800232e:	496f      	ldr	r1, [pc, #444]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002330:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002332:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002336:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800233a:	4302      	orrs	r2, r0
 800233c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002340:	0619      	lsls	r1, r3, #24
 8002342:	d508      	bpl.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002344:	4969      	ldr	r1, [pc, #420]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002346:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002348:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800234c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002350:	4302      	orrs	r2, r0
 8002352:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002356:	05da      	lsls	r2, r3, #23
 8002358:	d508      	bpl.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x250>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800235a:	4964      	ldr	r1, [pc, #400]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800235c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800235e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002362:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002366:	4302      	orrs	r2, r0
 8002368:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800236c:	049b      	lsls	r3, r3, #18
 800236e:	d510      	bpl.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002370:	4a5e      	ldr	r2, [pc, #376]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002372:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002374:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002378:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800237c:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800237e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002382:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002386:	f040 8086 	bne.w	8002496 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800238a:	68d3      	ldr	r3, [r2, #12]
 800238c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002390:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002392:	6823      	ldr	r3, [r4, #0]
 8002394:	031f      	lsls	r7, r3, #12
 8002396:	d50f      	bpl.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002398:	4a54      	ldr	r2, [pc, #336]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800239a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800239c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80023a0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80023a4:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023a6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023ae:	d17e      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023b0:	68d3      	ldr	r3, [r2, #12]
 80023b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023b6:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023b8:	6823      	ldr	r3, [r4, #0]
 80023ba:	035e      	lsls	r6, r3, #13
 80023bc:	d50f      	bpl.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023be:	4a4b      	ldr	r2, [pc, #300]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80023c0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80023c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80023c6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80023ca:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023cc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023d4:	d176      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023d6:	68d3      	ldr	r3, [r2, #12]
 80023d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023dc:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023de:	6823      	ldr	r3, [r4, #0]
 80023e0:	0458      	lsls	r0, r3, #17
 80023e2:	d512      	bpl.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023e4:	4941      	ldr	r1, [pc, #260]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80023e6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80023e8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80023ec:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80023f0:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023f2:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023fa:	d16e      	bne.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x3be>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023fc:	2102      	movs	r1, #2
 80023fe:	1d20      	adds	r0, r4, #4
 8002400:	f7ff fd8a 	bl	8001f18 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002404:	2800      	cmp	r0, #0
 8002406:	bf18      	it	ne
 8002408:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800240a:	6822      	ldr	r2, [r4, #0]
 800240c:	0411      	lsls	r1, r2, #16
 800240e:	d508      	bpl.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x306>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002410:	4936      	ldr	r1, [pc, #216]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002412:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002414:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002418:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800241c:	4303      	orrs	r3, r0
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002422:	03d3      	lsls	r3, r2, #15
 8002424:	d509      	bpl.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002426:	4a31      	ldr	r2, [pc, #196]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002428:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800242c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002430:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002434:	430b      	orrs	r3, r1
 8002436:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800243a:	4628      	mov	r0, r5
 800243c:	b002      	add	sp, #8
 800243e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002442:	429a      	cmp	r2, r3
 8002444:	f43f aeef 	beq.w	8002226 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002448:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800244c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002454:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002458:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800245c:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002464:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002466:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800246a:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800246e:	f57f aeda 	bpl.w	8002226 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tickstart = HAL_GetTick();
 8002472:	f7fe ffcd 	bl	8001410 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002476:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800247a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800247c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002480:	0799      	lsls	r1, r3, #30
 8002482:	f53f aed0 	bmi.w	8002226 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002486:	f7fe ffc3 	bl	8001410 <HAL_GetTick>
 800248a:	1b40      	subs	r0, r0, r5
 800248c:	4548      	cmp	r0, r9
 800248e:	d9f5      	bls.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002490:	e6ea      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002492:	4635      	mov	r5, r6
 8002494:	e6f0      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002496:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800249a:	f47f af7a 	bne.w	8002392 <HAL_RCCEx_PeriphCLKConfig+0x276>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800249e:	2101      	movs	r1, #1
 80024a0:	1d20      	adds	r0, r4, #4
 80024a2:	f7ff fd39 	bl	8001f18 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80024a6:	2800      	cmp	r0, #0
 80024a8:	bf18      	it	ne
 80024aa:	4605      	movne	r5, r0
 80024ac:	e771      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x276>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024ae:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80024b2:	d181      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024b4:	2101      	movs	r1, #1
 80024b6:	1d20      	adds	r0, r4, #4
 80024b8:	f7ff fd2e 	bl	8001f18 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80024bc:	2800      	cmp	r0, #0
 80024be:	bf18      	it	ne
 80024c0:	4605      	movne	r5, r0
 80024c2:	e779      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024c4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80024c8:	d189      	bne.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024ca:	2101      	movs	r1, #1
 80024cc:	1d20      	adds	r0, r4, #4
 80024ce:	f7ff fd23 	bl	8001f18 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80024d2:	2800      	cmp	r0, #0
 80024d4:	bf18      	it	ne
 80024d6:	4605      	movne	r5, r0
 80024d8:	e781      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024da:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80024de:	d194      	bne.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024e0:	2102      	movs	r1, #2
 80024e2:	f104 0020 	add.w	r0, r4, #32
 80024e6:	f7ff fd9f 	bl	8002028 <RCCEx_PLLSAI2_Config>
 80024ea:	e78b      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80024ec:	40021000 	.word	0x40021000

080024f0 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024f0:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f2:	e852 3f00 	ldrex	r3, [r2]
 80024f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024fa:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80024fe:	6802      	ldr	r2, [r0, #0]
 8002500:	2900      	cmp	r1, #0
 8002502:	d1f5      	bne.n	80024f0 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002504:	f102 0308 	add.w	r3, r2, #8
 8002508:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800250c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002510:	f102 0c08 	add.w	ip, r2, #8
 8002514:	e84c 3100 	strex	r1, r3, [ip]
 8002518:	2900      	cmp	r1, #0
 800251a:	d1f3      	bne.n	8002504 <UART_EndRxTransfer+0x14>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800251c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800251e:	2b01      	cmp	r3, #1
 8002520:	d107      	bne.n	8002532 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002522:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002526:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800252a:	e842 3100 	strex	r1, r3, [r2]
 800252e:	2900      	cmp	r1, #0
 8002530:	d1f7      	bne.n	8002522 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002532:	2320      	movs	r3, #32
 8002534:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002538:	2300      	movs	r3, #0
 800253a:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800253c:	6683      	str	r3, [r0, #104]	; 0x68
}
 800253e:	4770      	bx	lr

08002540 <UART_SetConfig>:
{
 8002540:	b570      	push	{r4, r5, r6, lr}
 8002542:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8002544:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002546:	6921      	ldr	r1, [r4, #16]
 8002548:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800254a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800254c:	69c0      	ldr	r0, [r0, #28]
 800254e:	430a      	orrs	r2, r1
 8002550:	6961      	ldr	r1, [r4, #20]
 8002552:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002554:	498f      	ldr	r1, [pc, #572]	; (8002794 <UART_SetConfig+0x254>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002556:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002558:	4029      	ands	r1, r5
 800255a:	430a      	orrs	r2, r1
 800255c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	68e1      	ldr	r1, [r4, #12]
 8002562:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002566:	430a      	orrs	r2, r1
 8002568:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800256a:	4a8b      	ldr	r2, [pc, #556]	; (8002798 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800256c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800256e:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8002570:	bf1c      	itt	ne
 8002572:	6a22      	ldrne	r2, [r4, #32]
 8002574:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800257c:	430a      	orrs	r2, r1
 800257e:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002580:	4a86      	ldr	r2, [pc, #536]	; (800279c <UART_SetConfig+0x25c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d117      	bne.n	80025b6 <UART_SetConfig+0x76>
 8002586:	4b86      	ldr	r3, [pc, #536]	; (80027a0 <UART_SetConfig+0x260>)
 8002588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	3b01      	subs	r3, #1
 8002592:	2b02      	cmp	r3, #2
 8002594:	f200 80cf 	bhi.w	8002736 <UART_SetConfig+0x1f6>
 8002598:	4a82      	ldr	r2, [pc, #520]	; (80027a4 <UART_SetConfig+0x264>)
 800259a:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800259c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80025a0:	f040 8099 	bne.w	80026d6 <UART_SetConfig+0x196>
    switch (clocksource)
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d822      	bhi.n	80025ee <UART_SetConfig+0xae>
 80025a8:	e8df f003 	tbb	[pc, r3]
 80025ac:	2193c8d9 	.word	0x2193c8d9
 80025b0:	212121ce 	.word	0x212121ce
 80025b4:	dd          	.byte	0xdd
 80025b5:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025b6:	4a7c      	ldr	r2, [pc, #496]	; (80027a8 <UART_SetConfig+0x268>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d106      	bne.n	80025ca <UART_SetConfig+0x8a>
 80025bc:	4b78      	ldr	r3, [pc, #480]	; (80027a0 <UART_SetConfig+0x260>)
 80025be:	4a7b      	ldr	r2, [pc, #492]	; (80027ac <UART_SetConfig+0x26c>)
 80025c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	e7e7      	b.n	800259a <UART_SetConfig+0x5a>
 80025ca:	4a79      	ldr	r2, [pc, #484]	; (80027b0 <UART_SetConfig+0x270>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d119      	bne.n	8002604 <UART_SetConfig+0xc4>
 80025d0:	4b73      	ldr	r3, [pc, #460]	; (80027a0 <UART_SetConfig+0x260>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80025da:	2b20      	cmp	r3, #32
 80025dc:	f000 80b7 	beq.w	800274e <UART_SetConfig+0x20e>
 80025e0:	d807      	bhi.n	80025f2 <UART_SetConfig+0xb2>
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 80b8 	beq.w	8002758 <UART_SetConfig+0x218>
 80025e8:	2b10      	cmp	r3, #16
 80025ea:	f000 80aa 	beq.w	8002742 <UART_SetConfig+0x202>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025ee:	2001      	movs	r0, #1
 80025f0:	e04e      	b.n	8002690 <UART_SetConfig+0x150>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025f2:	2b30      	cmp	r3, #48	; 0x30
 80025f4:	d1fb      	bne.n	80025ee <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025f6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80025fa:	f000 80b4 	beq.w	8002766 <UART_SetConfig+0x226>
 80025fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002602:	e083      	b.n	800270c <UART_SetConfig+0x1cc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002604:	4a6b      	ldr	r2, [pc, #428]	; (80027b4 <UART_SetConfig+0x274>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d10f      	bne.n	800262a <UART_SetConfig+0xea>
 800260a:	4b65      	ldr	r3, [pc, #404]	; (80027a0 <UART_SetConfig+0x260>)
 800260c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002610:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002614:	2b80      	cmp	r3, #128	; 0x80
 8002616:	f000 809a 	beq.w	800274e <UART_SetConfig+0x20e>
 800261a:	d804      	bhi.n	8002626 <UART_SetConfig+0xe6>
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 809b 	beq.w	8002758 <UART_SetConfig+0x218>
 8002622:	2b40      	cmp	r3, #64	; 0x40
 8002624:	e7e1      	b.n	80025ea <UART_SetConfig+0xaa>
 8002626:	2bc0      	cmp	r3, #192	; 0xc0
 8002628:	e7e4      	b.n	80025f4 <UART_SetConfig+0xb4>
 800262a:	4a63      	ldr	r2, [pc, #396]	; (80027b8 <UART_SetConfig+0x278>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d112      	bne.n	8002656 <UART_SetConfig+0x116>
 8002630:	4b5b      	ldr	r3, [pc, #364]	; (80027a0 <UART_SetConfig+0x260>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800263e:	f000 8086 	beq.w	800274e <UART_SetConfig+0x20e>
 8002642:	d805      	bhi.n	8002650 <UART_SetConfig+0x110>
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 8087 	beq.w	8002758 <UART_SetConfig+0x218>
 800264a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800264e:	e7cc      	b.n	80025ea <UART_SetConfig+0xaa>
 8002650:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002654:	e7ce      	b.n	80025f4 <UART_SetConfig+0xb4>
 8002656:	4a50      	ldr	r2, [pc, #320]	; (8002798 <UART_SetConfig+0x258>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d1c8      	bne.n	80025ee <UART_SetConfig+0xae>
 800265c:	4b50      	ldr	r3, [pc, #320]	; (80027a0 <UART_SetConfig+0x260>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800266a:	d015      	beq.n	8002698 <UART_SetConfig+0x158>
 800266c:	d806      	bhi.n	800267c <UART_SetConfig+0x13c>
 800266e:	b15b      	cbz	r3, 8002688 <UART_SetConfig+0x148>
 8002670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002674:	d1bb      	bne.n	80025ee <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 8002676:	f7ff f8ad 	bl	80017d4 <HAL_RCC_GetSysClockFreq>
        break;
 800267a:	e007      	b.n	800268c <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800267c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002680:	d1b5      	bne.n	80025ee <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 8002682:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002686:	e008      	b.n	800269a <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002688:	f7ff fc22 	bl	8001ed0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800268c:	b928      	cbnz	r0, 800269a <UART_SetConfig+0x15a>
 800268e:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8002690:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002692:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 8002696:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 8002698:	4848      	ldr	r0, [pc, #288]	; (80027bc <UART_SetConfig+0x27c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800269a:	6862      	ldr	r2, [r4, #4]
 800269c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80026a0:	4283      	cmp	r3, r0
 80026a2:	d8a4      	bhi.n	80025ee <UART_SetConfig+0xae>
 80026a4:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80026a8:	d8a1      	bhi.n	80025ee <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80026aa:	0851      	lsrs	r1, r2, #1
 80026ac:	2500      	movs	r5, #0
 80026ae:	468c      	mov	ip, r1
 80026b0:	f44f 7680 	mov.w	r6, #256	; 0x100
 80026b4:	4629      	mov	r1, r5
 80026b6:	fbe0 c106 	umlal	ip, r1, r0, r6
 80026ba:	462b      	mov	r3, r5
 80026bc:	4660      	mov	r0, ip
 80026be:	f7fe fb81 	bl	8000dc4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80026c2:	4b3f      	ldr	r3, [pc, #252]	; (80027c0 <UART_SetConfig+0x280>)
 80026c4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d890      	bhi.n	80025ee <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 80026cc:	6823      	ldr	r3, [r4, #0]
 80026ce:	60d8      	str	r0, [r3, #12]
 80026d0:	e7dd      	b.n	800268e <UART_SetConfig+0x14e>
        pclk = (uint32_t) HSI_VALUE;
 80026d2:	483a      	ldr	r0, [pc, #232]	; (80027bc <UART_SetConfig+0x27c>)
 80026d4:	e047      	b.n	8002766 <UART_SetConfig+0x226>
    switch (clocksource)
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d889      	bhi.n	80025ee <UART_SetConfig+0xae>
 80026da:	a201      	add	r2, pc, #4	; (adr r2, 80026e0 <UART_SetConfig+0x1a0>)
 80026dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e0:	08002705 	.word	0x08002705
 80026e4:	0800272b 	.word	0x0800272b
 80026e8:	08002755 	.word	0x08002755
 80026ec:	080025ef 	.word	0x080025ef
 80026f0:	08002731 	.word	0x08002731
 80026f4:	080025ef 	.word	0x080025ef
 80026f8:	080025ef 	.word	0x080025ef
 80026fc:	080025ef 	.word	0x080025ef
 8002700:	080025ff 	.word	0x080025ff
        pclk = HAL_RCC_GetPCLK1Freq();
 8002704:	f7ff fbe4 	bl	8001ed0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002708:	2800      	cmp	r0, #0
 800270a:	d0c0      	beq.n	800268e <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800270c:	6862      	ldr	r2, [r4, #4]
 800270e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002712:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002716:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800271a:	f1a3 0110 	sub.w	r1, r3, #16
 800271e:	4291      	cmp	r1, r2
 8002720:	f63f af65 	bhi.w	80025ee <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002724:	6822      	ldr	r2, [r4, #0]
 8002726:	60d3      	str	r3, [r2, #12]
 8002728:	e7b1      	b.n	800268e <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800272a:	f7ff fbe3 	bl	8001ef4 <HAL_RCC_GetPCLK2Freq>
        break;
 800272e:	e7eb      	b.n	8002708 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 8002730:	f7ff f850 	bl	80017d4 <HAL_RCC_GetSysClockFreq>
        break;
 8002734:	e7e8      	b.n	8002708 <UART_SetConfig+0x1c8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002736:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800273a:	d1f6      	bne.n	800272a <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK2Freq();
 800273c:	f7ff fbda 	bl	8001ef4 <HAL_RCC_GetPCLK2Freq>
        break;
 8002740:	e00f      	b.n	8002762 <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002742:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002746:	d1f3      	bne.n	8002730 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetSysClockFreq();
 8002748:	f7ff f844 	bl	80017d4 <HAL_RCC_GetSysClockFreq>
        break;
 800274c:	e009      	b.n	8002762 <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800274e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002752:	d0be      	beq.n	80026d2 <UART_SetConfig+0x192>
        pclk = (uint32_t) HSI_VALUE;
 8002754:	4819      	ldr	r0, [pc, #100]	; (80027bc <UART_SetConfig+0x27c>)
 8002756:	e7d9      	b.n	800270c <UART_SetConfig+0x1cc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002758:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800275c:	d1d2      	bne.n	8002704 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 800275e:	f7ff fbb7 	bl	8001ed0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002762:	2800      	cmp	r0, #0
 8002764:	d093      	beq.n	800268e <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002766:	6862      	ldr	r2, [r4, #4]
 8002768:	0853      	lsrs	r3, r2, #1
 800276a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800276e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002772:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002776:	f1a3 0110 	sub.w	r1, r3, #16
 800277a:	4291      	cmp	r1, r2
 800277c:	f63f af37 	bhi.w	80025ee <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002780:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8002784:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002786:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002788:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800278c:	4313      	orrs	r3, r2
 800278e:	60cb      	str	r3, [r1, #12]
 8002790:	e77d      	b.n	800268e <UART_SetConfig+0x14e>
 8002792:	bf00      	nop
 8002794:	efff69f3 	.word	0xefff69f3
 8002798:	40008000 	.word	0x40008000
 800279c:	40013800 	.word	0x40013800
 80027a0:	40021000 	.word	0x40021000
 80027a4:	0800d154 	.word	0x0800d154
 80027a8:	40004400 	.word	0x40004400
 80027ac:	0800d157 	.word	0x0800d157
 80027b0:	40004800 	.word	0x40004800
 80027b4:	40004c00 	.word	0x40004c00
 80027b8:	40005000 	.word	0x40005000
 80027bc:	00f42400 	.word	0x00f42400
 80027c0:	000ffcff 	.word	0x000ffcff

080027c4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80027c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80027c6:	071a      	lsls	r2, r3, #28
{
 80027c8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80027ca:	d506      	bpl.n	80027da <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80027cc:	6801      	ldr	r1, [r0, #0]
 80027ce:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80027d0:	684a      	ldr	r2, [r1, #4]
 80027d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027d6:	4322      	orrs	r2, r4
 80027d8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027da:	07dc      	lsls	r4, r3, #31
 80027dc:	d506      	bpl.n	80027ec <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027de:	6801      	ldr	r1, [r0, #0]
 80027e0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80027e2:	684a      	ldr	r2, [r1, #4]
 80027e4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80027e8:	4322      	orrs	r2, r4
 80027ea:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027ec:	0799      	lsls	r1, r3, #30
 80027ee:	d506      	bpl.n	80027fe <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027f0:	6801      	ldr	r1, [r0, #0]
 80027f2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80027f4:	684a      	ldr	r2, [r1, #4]
 80027f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027fa:	4322      	orrs	r2, r4
 80027fc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027fe:	075a      	lsls	r2, r3, #29
 8002800:	d506      	bpl.n	8002810 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002802:	6801      	ldr	r1, [r0, #0]
 8002804:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002806:	684a      	ldr	r2, [r1, #4]
 8002808:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800280c:	4322      	orrs	r2, r4
 800280e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002810:	06dc      	lsls	r4, r3, #27
 8002812:	d506      	bpl.n	8002822 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002814:	6801      	ldr	r1, [r0, #0]
 8002816:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002818:	688a      	ldr	r2, [r1, #8]
 800281a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800281e:	4322      	orrs	r2, r4
 8002820:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002822:	0699      	lsls	r1, r3, #26
 8002824:	d506      	bpl.n	8002834 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002826:	6801      	ldr	r1, [r0, #0]
 8002828:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800282a:	688a      	ldr	r2, [r1, #8]
 800282c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002830:	4322      	orrs	r2, r4
 8002832:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002834:	065a      	lsls	r2, r3, #25
 8002836:	d50f      	bpl.n	8002858 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002838:	6801      	ldr	r1, [r0, #0]
 800283a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800283c:	684a      	ldr	r2, [r1, #4]
 800283e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002842:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002844:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002848:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800284a:	d105      	bne.n	8002858 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800284c:	684a      	ldr	r2, [r1, #4]
 800284e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002850:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002854:	4322      	orrs	r2, r4
 8002856:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002858:	061b      	lsls	r3, r3, #24
 800285a:	d506      	bpl.n	800286a <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800285c:	6802      	ldr	r2, [r0, #0]
 800285e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002860:	6853      	ldr	r3, [r2, #4]
 8002862:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002866:	430b      	orrs	r3, r1
 8002868:	6053      	str	r3, [r2, #4]
}
 800286a:	bd10      	pop	{r4, pc}

0800286c <UART_WaitOnFlagUntilTimeout>:
{
 800286c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002870:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002874:	4604      	mov	r4, r0
 8002876:	460d      	mov	r5, r1
 8002878:	4617      	mov	r7, r2
 800287a:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800287c:	6822      	ldr	r2, [r4, #0]
 800287e:	69d3      	ldr	r3, [r2, #28]
 8002880:	ea35 0303 	bics.w	r3, r5, r3
 8002884:	bf0c      	ite	eq
 8002886:	2301      	moveq	r3, #1
 8002888:	2300      	movne	r3, #0
 800288a:	42bb      	cmp	r3, r7
 800288c:	d001      	beq.n	8002892 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800288e:	2000      	movs	r0, #0
 8002890:	e022      	b.n	80028d8 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8002892:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002896:	d0f2      	beq.n	800287e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002898:	f7fe fdba 	bl	8001410 <HAL_GetTick>
 800289c:	eba0 0008 	sub.w	r0, r0, r8
 80028a0:	4548      	cmp	r0, r9
 80028a2:	d829      	bhi.n	80028f8 <UART_WaitOnFlagUntilTimeout+0x8c>
 80028a4:	f1b9 0f00 	cmp.w	r9, #0
 80028a8:	d026      	beq.n	80028f8 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80028aa:	6821      	ldr	r1, [r4, #0]
 80028ac:	680b      	ldr	r3, [r1, #0]
 80028ae:	075a      	lsls	r2, r3, #29
 80028b0:	d5e4      	bpl.n	800287c <UART_WaitOnFlagUntilTimeout+0x10>
 80028b2:	2d80      	cmp	r5, #128	; 0x80
 80028b4:	d0e2      	beq.n	800287c <UART_WaitOnFlagUntilTimeout+0x10>
 80028b6:	2d40      	cmp	r5, #64	; 0x40
 80028b8:	d0e0      	beq.n	800287c <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028ba:	69ce      	ldr	r6, [r1, #28]
 80028bc:	f016 0608 	ands.w	r6, r6, #8
 80028c0:	d00c      	beq.n	80028dc <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028c2:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 80028c4:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028c6:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 80028c8:	f7ff fe12 	bl	80024f0 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 80028cc:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028ce:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 80028d2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
          return HAL_ERROR;
 80028d6:	2001      	movs	r0, #1
}
 80028d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80028dc:	69cb      	ldr	r3, [r1, #28]
 80028de:	051b      	lsls	r3, r3, #20
 80028e0:	d5cc      	bpl.n	800287c <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028e6:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 80028e8:	4620      	mov	r0, r4
 80028ea:	f7ff fe01 	bl	80024f0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80028ee:	2320      	movs	r3, #32
 80028f0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 80028f4:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
        return HAL_TIMEOUT;
 80028f8:	2003      	movs	r0, #3
 80028fa:	e7ed      	b.n	80028d8 <UART_WaitOnFlagUntilTimeout+0x6c>

080028fc <HAL_UART_Transmit>:
{
 80028fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002900:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002902:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002904:	2b20      	cmp	r3, #32
{
 8002906:	4604      	mov	r4, r0
 8002908:	460e      	mov	r6, r1
 800290a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800290c:	d144      	bne.n	8002998 <HAL_UART_Transmit+0x9c>
    if ((pData == NULL) || (Size == 0U))
 800290e:	2900      	cmp	r1, #0
 8002910:	d044      	beq.n	800299c <HAL_UART_Transmit+0xa0>
 8002912:	2a00      	cmp	r2, #0
 8002914:	d042      	beq.n	800299c <HAL_UART_Transmit+0xa0>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002916:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002918:	2500      	movs	r5, #0
 800291a:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800291e:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8002920:	f7fe fd76 	bl	8001410 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002924:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8002926:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800292a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800292e:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8002930:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002934:	d103      	bne.n	800293e <HAL_UART_Transmit+0x42>
 8002936:	6922      	ldr	r2, [r4, #16]
 8002938:	b90a      	cbnz	r2, 800293e <HAL_UART_Transmit+0x42>
 800293a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800293c:	4616      	mov	r6, r2
    while (huart->TxXferCount > 0U)
 800293e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002942:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002946:	b292      	uxth	r2, r2
 8002948:	b94a      	cbnz	r2, 800295e <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800294a:	2140      	movs	r1, #64	; 0x40
 800294c:	4620      	mov	r0, r4
 800294e:	f7ff ff8d 	bl	800286c <UART_WaitOnFlagUntilTimeout>
 8002952:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 8002954:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002956:	b960      	cbnz	r0, 8002972 <HAL_UART_Transmit+0x76>
}
 8002958:	b004      	add	sp, #16
 800295a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800295e:	2200      	movs	r2, #0
 8002960:	2180      	movs	r1, #128	; 0x80
 8002962:	4620      	mov	r0, r4
 8002964:	9303      	str	r3, [sp, #12]
 8002966:	f7ff ff81 	bl	800286c <UART_WaitOnFlagUntilTimeout>
 800296a:	9b03      	ldr	r3, [sp, #12]
 800296c:	b118      	cbz	r0, 8002976 <HAL_UART_Transmit+0x7a>
        huart->gState = HAL_UART_STATE_READY;
 800296e:	2320      	movs	r3, #32
 8002970:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8002972:	2003      	movs	r0, #3
 8002974:	e7f0      	b.n	8002958 <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002976:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8002978:	b95e      	cbnz	r6, 8002992 <HAL_UART_Transmit+0x96>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800297a:	f835 2b02 	ldrh.w	r2, [r5], #2
 800297e:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002982:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8002984:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002988:	3a01      	subs	r2, #1
 800298a:	b292      	uxth	r2, r2
 800298c:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8002990:	e7d5      	b.n	800293e <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002992:	f816 2b01 	ldrb.w	r2, [r6], #1
 8002996:	e7f4      	b.n	8002982 <HAL_UART_Transmit+0x86>
    return HAL_BUSY;
 8002998:	2002      	movs	r0, #2
 800299a:	e7dd      	b.n	8002958 <HAL_UART_Transmit+0x5c>
      return  HAL_ERROR;
 800299c:	2001      	movs	r0, #1
 800299e:	e7db      	b.n	8002958 <HAL_UART_Transmit+0x5c>

080029a0 <HAL_UART_Receive>:
{
 80029a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80029a4:	4698      	mov	r8, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80029a6:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80029aa:	2b20      	cmp	r3, #32
{
 80029ac:	4604      	mov	r4, r0
 80029ae:	460e      	mov	r6, r1
 80029b0:	4617      	mov	r7, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80029b2:	d15e      	bne.n	8002a72 <HAL_UART_Receive+0xd2>
    if ((pData == NULL) || (Size == 0U))
 80029b4:	2900      	cmp	r1, #0
 80029b6:	d05e      	beq.n	8002a76 <HAL_UART_Receive+0xd6>
 80029b8:	2a00      	cmp	r2, #0
 80029ba:	d05c      	beq.n	8002a76 <HAL_UART_Receive+0xd6>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029bc:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029be:	2500      	movs	r5, #0
 80029c0:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029c4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029c8:	6605      	str	r5, [r0, #96]	; 0x60
    tickstart = HAL_GetTick();
 80029ca:	f7fe fd21 	bl	8001410 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 80029ce:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 80029d0:	f8a4 7058 	strh.w	r7, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 80029d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80029d8:	4681      	mov	r9, r0
    huart->RxXferCount = Size;
 80029da:	f8a4 705a 	strh.w	r7, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80029de:	d116      	bne.n	8002a0e <HAL_UART_Receive+0x6e>
 80029e0:	6922      	ldr	r2, [r4, #16]
 80029e2:	42aa      	cmp	r2, r5
 80029e4:	f240 15ff 	movw	r5, #511	; 0x1ff
 80029e8:	bf18      	it	ne
 80029ea:	25ff      	movne	r5, #255	; 0xff
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    UART_MASK_COMPUTATION(huart);
 80029f0:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029f4:	d11b      	bne.n	8002a2e <HAL_UART_Receive+0x8e>
 80029f6:	6923      	ldr	r3, [r4, #16]
 80029f8:	b9cb      	cbnz	r3, 8002a2e <HAL_UART_Receive+0x8e>
 80029fa:	4637      	mov	r7, r6
      pdata8bits  = NULL;
 80029fc:	461e      	mov	r6, r3
    while (huart->RxXferCount > 0U)
 80029fe:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8002a02:	b290      	uxth	r0, r2
 8002a04:	b9a8      	cbnz	r0, 8002a32 <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 8002a06:	2320      	movs	r3, #32
 8002a08:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 8002a0c:	e01e      	b.n	8002a4c <HAL_UART_Receive+0xac>
    UART_MASK_COMPUTATION(huart);
 8002a0e:	b92b      	cbnz	r3, 8002a1c <HAL_UART_Receive+0x7c>
 8002a10:	6922      	ldr	r2, [r4, #16]
 8002a12:	2a00      	cmp	r2, #0
 8002a14:	bf14      	ite	ne
 8002a16:	257f      	movne	r5, #127	; 0x7f
 8002a18:	25ff      	moveq	r5, #255	; 0xff
 8002a1a:	e7e7      	b.n	80029ec <HAL_UART_Receive+0x4c>
 8002a1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a20:	d1e4      	bne.n	80029ec <HAL_UART_Receive+0x4c>
 8002a22:	6922      	ldr	r2, [r4, #16]
 8002a24:	2a00      	cmp	r2, #0
 8002a26:	bf0c      	ite	eq
 8002a28:	257f      	moveq	r5, #127	; 0x7f
 8002a2a:	253f      	movne	r5, #63	; 0x3f
 8002a2c:	e7de      	b.n	80029ec <HAL_UART_Receive+0x4c>
      pdata16bits = NULL;
 8002a2e:	2700      	movs	r7, #0
 8002a30:	e7e5      	b.n	80029fe <HAL_UART_Receive+0x5e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a32:	f8cd 8000 	str.w	r8, [sp]
 8002a36:	464b      	mov	r3, r9
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2120      	movs	r1, #32
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f7ff ff15 	bl	800286c <UART_WaitOnFlagUntilTimeout>
 8002a42:	b130      	cbz	r0, 8002a52 <HAL_UART_Receive+0xb2>
        huart->RxState = HAL_UART_STATE_READY;
 8002a44:	2320      	movs	r3, #32
 8002a46:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        return HAL_TIMEOUT;
 8002a4a:	2003      	movs	r0, #3
}
 8002a4c:	b003      	add	sp, #12
 8002a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002a52:	6823      	ldr	r3, [r4, #0]
 8002a54:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002a56:	402b      	ands	r3, r5
      if (pdata8bits == NULL)
 8002a58:	b946      	cbnz	r6, 8002a6c <HAL_UART_Receive+0xcc>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002a5a:	f827 3b02 	strh.w	r3, [r7], #2
      huart->RxXferCount--;
 8002a5e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8002a62:	3a01      	subs	r2, #1
 8002a64:	b292      	uxth	r2, r2
 8002a66:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8002a6a:	e7c8      	b.n	80029fe <HAL_UART_Receive+0x5e>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002a6c:	f806 3b01 	strb.w	r3, [r6], #1
        pdata8bits++;
 8002a70:	e7f5      	b.n	8002a5e <HAL_UART_Receive+0xbe>
    return HAL_BUSY;
 8002a72:	2002      	movs	r0, #2
 8002a74:	e7ea      	b.n	8002a4c <HAL_UART_Receive+0xac>
      return  HAL_ERROR;
 8002a76:	2001      	movs	r0, #1
 8002a78:	e7e8      	b.n	8002a4c <HAL_UART_Receive+0xac>

08002a7a <UART_CheckIdleState>:
{
 8002a7a:	b530      	push	{r4, r5, lr}
 8002a7c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a7e:	2500      	movs	r5, #0
{
 8002a80:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a82:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8002a86:	f7fe fcc3 	bl	8001410 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a8a:	6822      	ldr	r2, [r4, #0]
 8002a8c:	6812      	ldr	r2, [r2, #0]
 8002a8e:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8002a90:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a92:	d51c      	bpl.n	8002ace <UART_CheckIdleState+0x54>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a94:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002a98:	9200      	str	r2, [sp, #0]
 8002a9a:	9003      	str	r0, [sp, #12]
 8002a9c:	462a      	mov	r2, r5
 8002a9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f7ff fee2 	bl	800286c <UART_WaitOnFlagUntilTimeout>
 8002aa8:	9b03      	ldr	r3, [sp, #12]
 8002aaa:	b180      	cbz	r0, 8002ace <UART_CheckIdleState+0x54>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002aac:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aae:	e852 3f00 	ldrex	r3, [r2]
 8002ab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab6:	e842 3100 	strex	r1, r3, [r2]
 8002aba:	2900      	cmp	r1, #0
 8002abc:	d1f6      	bne.n	8002aac <UART_CheckIdleState+0x32>
      huart->gState = HAL_UART_STATE_READY;
 8002abe:	2320      	movs	r3, #32
 8002ac0:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8002ac2:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 8002aca:	b005      	add	sp, #20
 8002acc:	bd30      	pop	{r4, r5, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ace:	6822      	ldr	r2, [r4, #0]
 8002ad0:	6812      	ldr	r2, [r2, #0]
 8002ad2:	0752      	lsls	r2, r2, #29
 8002ad4:	d523      	bpl.n	8002b1e <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ad6:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002ada:	9200      	str	r2, [sp, #0]
 8002adc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	f7ff fec2 	bl	800286c <UART_WaitOnFlagUntilTimeout>
 8002ae8:	b1c8      	cbz	r0, 8002b1e <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002aea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aec:	e852 3f00 	ldrex	r3, [r2]
 8002af0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8002af8:	6822      	ldr	r2, [r4, #0]
 8002afa:	2900      	cmp	r1, #0
 8002afc:	d1f5      	bne.n	8002aea <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002afe:	f102 0308 	add.w	r3, r2, #8
 8002b02:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b06:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0a:	f102 0008 	add.w	r0, r2, #8
 8002b0e:	e840 3100 	strex	r1, r3, [r0]
 8002b12:	2900      	cmp	r1, #0
 8002b14:	d1f3      	bne.n	8002afe <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 8002b16:	2320      	movs	r3, #32
 8002b18:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8002b1c:	e7d1      	b.n	8002ac2 <UART_CheckIdleState+0x48>
  huart->gState = HAL_UART_STATE_READY;
 8002b1e:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b20:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002b22:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002b24:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b28:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b2a:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 8002b2c:	e7ca      	b.n	8002ac4 <UART_CheckIdleState+0x4a>

08002b2e <HAL_UART_Init>:
{
 8002b2e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002b30:	4604      	mov	r4, r0
 8002b32:	b340      	cbz	r0, 8002b86 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002b34:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002b36:	b91b      	cbnz	r3, 8002b40 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002b38:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8002b3c:	f7fe fb86 	bl	800124c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002b40:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002b42:	2324      	movs	r3, #36	; 0x24
 8002b44:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8002b46:	6813      	ldr	r3, [r2, #0]
 8002b48:	f023 0301 	bic.w	r3, r3, #1
 8002b4c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b50:	b113      	cbz	r3, 8002b58 <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 8002b52:	4620      	mov	r0, r4
 8002b54:	f7ff fe36 	bl	80027c4 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b58:	4620      	mov	r0, r4
 8002b5a:	f7ff fcf1 	bl	8002540 <UART_SetConfig>
 8002b5e:	2801      	cmp	r0, #1
 8002b60:	d011      	beq.n	8002b86 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b62:	6823      	ldr	r3, [r4, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b72:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002b7a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002b7c:	601a      	str	r2, [r3, #0]
}
 8002b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002b82:	f7ff bf7a 	b.w	8002a7a <UART_CheckIdleState>
}
 8002b86:	2001      	movs	r0, #1
 8002b88:	bd10      	pop	{r4, pc}
	...

08002b8c <write_callback>:
  o_packet.pw = 0;
}

static bool write_callback(pb_ostream_t *stream, const uint8_t *buf,
    size_t count)
{
 8002b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *pr = (uint8_t *)buf;

  UNUSED(stream);

  while (count) {
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8002b8e:	4d0e      	ldr	r5, [pc, #56]	; (8002bc8 <write_callback+0x3c>)
{
 8002b90:	460e      	mov	r6, r1
 8002b92:	4614      	mov	r4, r2
  bool res = true;
 8002b94:	2001      	movs	r0, #1
      pr++;
      count--;
    }
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
      res = write_packet();
      o_packet.pw = 0;
 8002b96:	2700      	movs	r7, #0
  while (count) {
 8002b98:	b93c      	cbnz	r4, 8002baa <write_callback+0x1e>
 8002b9a:	e00b      	b.n	8002bb4 <write_callback+0x28>
      o_packet.payload[o_packet.pw] = *pr;
 8002b9c:	18ea      	adds	r2, r5, r3
 8002b9e:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002ba2:	7051      	strb	r1, [r2, #1]
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8002ba4:	3301      	adds	r3, #1
      count--;
 8002ba6:	3c01      	subs	r4, #1
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8002ba8:	702b      	strb	r3, [r5, #0]
 8002baa:	782b      	ldrb	r3, [r5, #0]
 8002bac:	2b1f      	cmp	r3, #31
 8002bae:	d802      	bhi.n	8002bb6 <write_callback+0x2a>
 8002bb0:	2c00      	cmp	r4, #0
 8002bb2:	d1f3      	bne.n	8002b9c <write_callback+0x10>
    }
  }
  return res;
}
 8002bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	d1ee      	bne.n	8002b98 <write_callback+0xc>
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8002bba:	2121      	movs	r1, #33	; 0x21
 8002bbc:	4628      	mov	r0, r5
 8002bbe:	f000 fc89 	bl	80034d4 <ioRawWriteBuffer>
      o_packet.pw = 0;
 8002bc2:	702f      	strb	r7, [r5, #0]
 8002bc4:	e7e8      	b.n	8002b98 <write_callback+0xc>
 8002bc6:	bf00      	nop
 8002bc8:	20001254 	.word	0x20001254

08002bcc <read_callback>:
  i_packet.pr = 0xFF;
  i_ridx = 0;
}

static bool read_callback(pb_istream_t *stream, uint8_t *buf, size_t count)
{
 8002bcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002bd0:	460c      	mov	r4, r1
  bool res = true;
  uint8_t *pw = (uint8_t *)buf;

  UNUSED(stream);

  if (count == 0)
 8002bd2:	4615      	mov	r5, r2
 8002bd4:	b35a      	cbz	r2, 8002c2e <read_callback+0x62>
    return true;

  if (i_packet.pr == 0xFF)
 8002bd6:	4e20      	ldr	r6, [pc, #128]	; (8002c58 <read_callback+0x8c>)
 8002bd8:	4f20      	ldr	r7, [pc, #128]	; (8002c5c <read_callback+0x90>)
 8002bda:	7833      	ldrb	r3, [r6, #0]
 8002bdc:	2bff      	cmp	r3, #255	; 0xff
 8002bde:	d008      	beq.n	8002bf2 <read_callback+0x26>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8002be0:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8002c58 <read_callback+0x8c>

  if (res == false)
    return res;

  while (count) {
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8002be4:	f04f 0900 	mov.w	r9, #0
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	2200      	movs	r2, #0
 8002bec:	18f0      	adds	r0, r6, r3
 8002bee:	1b1b      	subs	r3, r3, r4
 8002bf0:	e013      	b.n	8002c1a <read_callback+0x4e>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8002bf2:	2121      	movs	r1, #33	; 0x21
 8002bf4:	4630      	mov	r0, r6
 8002bf6:	f000 fc7b 	bl	80034f0 <ioRawReadBuffer>
  i_ridx = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	603b      	str	r3, [r7, #0]
  if (res == false)
 8002bfe:	2800      	cmp	r0, #0
 8002c00:	d1ee      	bne.n	8002be0 <read_callback+0x14>
      read_packet();
    }
  }

  return res;
}
 8002c02:	b003      	add	sp, #12
 8002c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      *pw = i_packet.payload[i_ridx];
 8002c08:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8002c0c:	f804 2b01 	strb.w	r2, [r4], #1
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8002c10:	7832      	ldrb	r2, [r6, #0]
 8002c12:	3a01      	subs	r2, #1
 8002c14:	7032      	strb	r2, [r6, #0]
      count--;
 8002c16:	3d01      	subs	r5, #1
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f896 c000 	ldrb.w	ip, [r6]
 8002c1e:	18e1      	adds	r1, r4, r3
 8002c20:	f1bc 0f00 	cmp.w	ip, #0
 8002c24:	d005      	beq.n	8002c32 <read_callback+0x66>
 8002c26:	2d00      	cmp	r5, #0
 8002c28:	d1ee      	bne.n	8002c08 <read_callback+0x3c>
 8002c2a:	b102      	cbz	r2, 8002c2e <read_callback+0x62>
 8002c2c:	6039      	str	r1, [r7, #0]
 8002c2e:	2001      	movs	r0, #1
 8002c30:	e7e7      	b.n	8002c02 <read_callback+0x36>
 8002c32:	b102      	cbz	r2, 8002c36 <read_callback+0x6a>
 8002c34:	6039      	str	r1, [r7, #0]
    if (count && i_packet.pr == 0) {
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	d0f9      	beq.n	8002c2e <read_callback+0x62>
      uint8_t sync = 0xAA;
 8002c3a:	23aa      	movs	r3, #170	; 0xaa
      ioRawWriteBuffer(&sync, 1);
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	f10d 0007 	add.w	r0, sp, #7
      uint8_t sync = 0xAA;
 8002c42:	f88d 3007 	strb.w	r3, [sp, #7]
      ioRawWriteBuffer(&sync, 1);
 8002c46:	f000 fc45 	bl	80034d4 <ioRawWriteBuffer>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8002c4a:	2121      	movs	r1, #33	; 0x21
 8002c4c:	4640      	mov	r0, r8
 8002c4e:	f000 fc4f 	bl	80034f0 <ioRawReadBuffer>
  i_ridx = 0;
 8002c52:	f8c7 9000 	str.w	r9, [r7]
  while (count) {
 8002c56:	e7c7      	b.n	8002be8 <read_callback+0x1c>
 8002c58:	2000122c 	.word	0x2000122c
 8002c5c:	20001250 	.word	0x20001250

08002c60 <pb_io_flush_ostream>:
{
 8002c60:	b510      	push	{r4, lr}
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8002c62:	4c06      	ldr	r4, [pc, #24]	; (8002c7c <pb_io_flush_ostream+0x1c>)
 8002c64:	7823      	ldrb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8002c66:	2121      	movs	r1, #33	; 0x21
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8002c68:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8002c6c:	4620      	mov	r0, r4
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8002c6e:	7023      	strb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8002c70:	f000 fc30 	bl	80034d4 <ioRawWriteBuffer>
  o_packet.pw = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	7023      	strb	r3, [r4, #0]
}
 8002c78:	bd10      	pop	{r4, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20001254 	.word	0x20001254

08002c80 <pb_io_flush_istream>:
  i_packet.pr = 0xFF;
 8002c80:	4b03      	ldr	r3, [pc, #12]	; (8002c90 <pb_io_flush_istream+0x10>)
 8002c82:	22ff      	movs	r2, #255	; 0xff
 8002c84:	701a      	strb	r2, [r3, #0]
  i_ridx = 0;
 8002c86:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <pb_io_flush_istream+0x14>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
}
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	2000122c 	.word	0x2000122c
 8002c94:	20001250 	.word	0x20001250

08002c98 <pb_io_ostream>:
#ifndef PB_NO_ERRMSG
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0, NULL};
#else
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
#endif
  return stream;
 8002c98:	4a04      	ldr	r2, [pc, #16]	; (8002cac <pb_io_ostream+0x14>)
 8002c9a:	e9c0 2100 	strd	r2, r1, [r0]
 8002c9e:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	e9c0 1202 	strd	r1, r2, [r0, #8]
}
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	08002b8d 	.word	0x08002b8d

08002cb0 <pb_io_istream>:
#ifndef PB_NO_ERRMSG
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX, NULL};
#else
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
#endif
  return stream;
 8002cb0:	4a03      	ldr	r2, [pc, #12]	; (8002cc0 <pb_io_istream+0x10>)
 8002cb2:	e9c0 2100 	strd	r2, r1, [r0]
 8002cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cba:	6082      	str	r2, [r0, #8]
}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	08002bcd 	.word	0x08002bcd

08002cc4 <pb_io_stream_init>:

int pb_io_stream_init(void)
{
 8002cc4:	b508      	push	{r3, lr}
  ioRawDisableLLWrite();
 8002cc6:	f000 fc21 	bl	800350c <ioRawDisableLLWrite>
  return 0;
}
 8002cca:	2000      	movs	r0, #0
 8002ccc:	bd08      	pop	{r3, pc}

08002cce <encode_uint32>:
/*
 * Callback function to encode array of uint32
 */
bool encode_uint32(pb_ostream_t *stream, const pb_field_t *field,
                   void * const *arg)
{
 8002cce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct _encode_uint32* array = (struct _encode_uint32 *)*arg;
 8002cd2:	f8d2 8000 	ldr.w	r8, [r2]
  int offset = (array->offset == 0)?4:array->offset;
 8002cd6:	f8d8 4008 	ldr.w	r4, [r8, #8]
  for (size_t i = 0; i < array->size; i++)
 8002cda:	2600      	movs	r6, #0
 8002cdc:	2c00      	cmp	r4, #0
{
 8002cde:	4607      	mov	r7, r0
 8002ce0:	4689      	mov	r9, r1
 8002ce2:	bf08      	it	eq
 8002ce4:	2404      	moveq	r4, #4
  for (size_t i = 0; i < array->size; i++)
 8002ce6:	4635      	mov	r5, r6
 8002ce8:	f8d8 3000 	ldr.w	r3, [r8]
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	d801      	bhi.n	8002cf4 <encode_uint32+0x26>
    else
      c_val = *(uint32_t*)((uint8_t *)array->data + i * offset);
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
      return false;
  }
  return true;
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	e005      	b.n	8002d00 <encode_uint32+0x32>
    if (!pb_encode_tag_for_field(stream, field))
 8002cf4:	4649      	mov	r1, r9
 8002cf6:	4638      	mov	r0, r7
 8002cf8:	f003 f8ee 	bl	8005ed8 <pb_encode_tag_for_field>
 8002cfc:	b910      	cbnz	r0, 8002d04 <encode_uint32+0x36>
      return false;
 8002cfe:	2000      	movs	r0, #0
}
 8002d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      c_val = *(uint16_t*)((uint8_t *)array->data + i * offset);
 8002d04:	f8d8 3004 	ldr.w	r3, [r8, #4]
    if (offset == 2)
 8002d08:	2c02      	cmp	r4, #2
      c_val = *(uint32_t*)((uint8_t *)array->data + i * offset);
 8002d0a:	bf14      	ite	ne
 8002d0c:	599a      	ldrne	r2, [r3, r6]
      c_val = *(uint16_t*)((uint8_t *)array->data + i * offset);
 8002d0e:	f833 2015 	ldrheq.w	r2, [r3, r5, lsl #1]
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
 8002d12:	4638      	mov	r0, r7
 8002d14:	17d3      	asrs	r3, r2, #31
 8002d16:	f003 f835 	bl	8005d84 <pb_encode_varint>
 8002d1a:	4426      	add	r6, r4
 8002d1c:	2800      	cmp	r0, #0
 8002d1e:	d0ee      	beq.n	8002cfe <encode_uint32+0x30>
  for (size_t i = 0; i < array->size; i++)
 8002d20:	3501      	adds	r5, #1
 8002d22:	e7e1      	b.n	8002ce8 <encode_uint32+0x1a>

08002d24 <encode_data_cb>:
/*
 * Local callback function to encode datas field from aiDataMsg msg
 */
bool encode_data_cb(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
 8002d24:	b570      	push	{r4, r5, r6, lr}
  aiPbData *data = (aiPbData *)*arg;
 8002d26:	6815      	ldr	r5, [r2, #0]
{
 8002d28:	4604      	mov	r4, r0

  pb_byte_t *pr = (pb_byte_t *)data->addr;
 8002d2a:	68ae      	ldr	r6, [r5, #8]

  if (!pb_encode_tag_for_field(stream, field))
 8002d2c:	f003 f8d4 	bl	8005ed8 <pb_encode_tag_for_field>
 8002d30:	b130      	cbz	r0, 8002d40 <encode_data_cb+0x1c>
    return false;

  if (!pb_encode_string(stream, pr, data->size))
 8002d32:	686a      	ldr	r2, [r5, #4]
 8002d34:	4631      	mov	r1, r6
 8002d36:	4620      	mov	r0, r4
    return false;

  return true;
}
 8002d38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (!pb_encode_string(stream, pr, data->size))
 8002d3c:	f003 ba00 	b.w	8006140 <pb_encode_string>
}
 8002d40:	bd70      	pop	{r4, r5, r6, pc}

08002d42 <decode_data_cb>:
{
 8002d42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  aiPbData *data = (aiPbData *)*arg;
 8002d44:	6814      	ldr	r4, [r2, #0]
  uint8_t *pw = (uint8_t *)data->addr;
 8002d46:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
{
 8002d4a:	4605      	mov	r5, r0
  data->nb_read = 0;
 8002d4c:	2300      	movs	r3, #0
    data->nb_read += itsize;
 8002d4e:	60e3      	str	r3, [r4, #12]
  while (stream->bytes_left) {
 8002d50:	68ab      	ldr	r3, [r5, #8]
 8002d52:	b913      	cbnz	r3, 8002d5a <decode_data_cb+0x18>
  return true;
 8002d54:	2001      	movs	r0, #1
}
 8002d56:	b003      	add	sp, #12
 8002d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!pb_read(stream, (pb_byte_t *)&number, itsize))
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	4669      	mov	r1, sp
 8002d5e:	4628      	mov	r0, r5
 8002d60:	f002 fbb4 	bl	80054cc <pb_read>
 8002d64:	2800      	cmp	r0, #0
 8002d66:	d0f6      	beq.n	8002d56 <decode_data_cb+0x14>
    if ((pw) && (maxr > 0)) /* additional data are skipped */
 8002d68:	b13f      	cbz	r7, 8002d7a <decode_data_cb+0x38>
 8002d6a:	2e00      	cmp	r6, #0
      *pw = *(uint8_t *)&number;
 8002d6c:	bfc2      	ittt	gt
 8002d6e:	f89d 3000 	ldrbgt.w	r3, [sp]
 8002d72:	f807 3b01 	strbgt.w	r3, [r7], #1
      maxr--;
 8002d76:	f106 36ff 	addgt.w	r6, r6, #4294967295
    data->nb_read += itsize;
 8002d7a:	68e3      	ldr	r3, [r4, #12]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	e7e6      	b.n	8002d4e <decode_data_cb+0xc>

08002d80 <aiPbMgrInit>:
{
 8002d80:	b5f0      	push	{r4, r5, r6, r7, lr}
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 8002d82:	4c1b      	ldr	r4, [pc, #108]	; (8002df0 <aiPbMgrInit+0x70>)
{
 8002d84:	b089      	sub	sp, #36	; 0x24
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 8002d86:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8002d8a:	2100      	movs	r1, #0
  pbContextMgr.input = pb_io_istream(0);
 8002d8c:	ae04      	add	r6, sp, #16
{
 8002d8e:	4605      	mov	r5, r0
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 8002d90:	4620      	mov	r0, r4
 8002d92:	f007 fcfe 	bl	800a792 <memset>
  pb_io_stream_init();
 8002d96:	f7ff ff95 	bl	8002cc4 <pb_io_stream_init>
  pbContextMgr.input = pb_io_istream(0);
 8002d9a:	4630      	mov	r0, r6
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	f7ff ff87 	bl	8002cb0 <pb_io_istream>
 8002da2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  pbContextMgr.output = pb_io_ostream(0);
 8002da6:	466e      	mov	r6, sp
  pbContextMgr.input = pb_io_istream(0);
 8002da8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pbContextMgr.output = pb_io_ostream(0);
 8002dac:	2100      	movs	r1, #0
 8002dae:	4630      	mov	r0, r6
 8002db0:	f7ff ff72 	bl	8002c98 <pb_io_ostream>
 8002db4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002db8:	f104 070c 	add.w	r7, r4, #12
 8002dbc:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
  pbContextMgr.n_func = 0;
 8002dc0:	2300      	movs	r3, #0
  pbContextMgr.funcs = NULL;
 8002dc2:	e9c4 3307 	strd	r3, r3, [r4, #28]
  if (funcs) {
 8002dc6:	b97d      	cbnz	r5, 8002de8 <aiPbMgrInit+0x68>
  pbContextMgr.state = PB_MGR_READY;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
}
 8002dce:	b009      	add	sp, #36	; 0x24
 8002dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      cfunc++;
 8002dd2:	320c      	adds	r2, #12
 8002dd4:	4633      	mov	r3, r6
 8002dd6:	2101      	movs	r1, #1
    while (cfunc->process) {
 8002dd8:	6850      	ldr	r0, [r2, #4]
 8002dda:	1c5e      	adds	r6, r3, #1
 8002ddc:	2800      	cmp	r0, #0
 8002dde:	d1f8      	bne.n	8002dd2 <aiPbMgrInit+0x52>
 8002de0:	b101      	cbz	r1, 8002de4 <aiPbMgrInit+0x64>
 8002de2:	6223      	str	r3, [r4, #32]
    pbContextMgr.funcs = funcs;
 8002de4:	61e5      	str	r5, [r4, #28]
 8002de6:	e7ef      	b.n	8002dc8 <aiPbMgrInit+0x48>
 8002de8:	462a      	mov	r2, r5
 8002dea:	4619      	mov	r1, r3
 8002dec:	e7f4      	b.n	8002dd8 <aiPbMgrInit+0x58>
 8002dee:	bf00      	nop
 8002df0:	20001278 	.word	0x20001278

08002df4 <aiPbStrCopy>:
{
 8002df4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002df6:	4616      	mov	r6, r2
  const char undef[] = "UNDEFINED";
 8002df8:	4a10      	ldr	r2, [pc, #64]	; (8002e3c <aiPbStrCopy+0x48>)
{
 8002dfa:	4605      	mov	r5, r0
 8002dfc:	460c      	mov	r4, r1
  const char undef[] = "UNDEFINED";
 8002dfe:	6810      	ldr	r0, [r2, #0]
 8002e00:	6851      	ldr	r1, [r2, #4]
 8002e02:	8912      	ldrh	r2, [r2, #8]
 8002e04:	ab01      	add	r3, sp, #4
 8002e06:	c303      	stmia	r3!, {r0, r1}
  size_t l = strlen(src);
 8002e08:	4628      	mov	r0, r5
  const char undef[] = "UNDEFINED";
 8002e0a:	801a      	strh	r2, [r3, #0]
  size_t l = strlen(src);
 8002e0c:	f7fd fa30 	bl	8000270 <strlen>
  if (l > max)
 8002e10:	42b0      	cmp	r0, r6
    l = max-1;
 8002e12:	bf88      	it	hi
 8002e14:	f106 30ff 	addhi.w	r0, r6, #4294967295
  if (!dst)
 8002e18:	b174      	cbz	r4, 8002e38 <aiPbStrCopy+0x44>
  if (src && l)
 8002e1a:	b138      	cbz	r0, 8002e2c <aiPbStrCopy+0x38>
    memcpy(dst, src, l+1);
 8002e1c:	1c42      	adds	r2, r0, #1
 8002e1e:	4629      	mov	r1, r5
 8002e20:	4620      	mov	r0, r4
}
 8002e22:	b004      	add	sp, #16
 8002e24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memcpy(dst, src, l+1);
 8002e28:	f007 bd55 	b.w	800a8d6 <memcpy>
    memcpy(dst, undef, strlen(undef)+1);
 8002e2c:	ab01      	add	r3, sp, #4
 8002e2e:	cb03      	ldmia	r3!, {r0, r1}
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	6020      	str	r0, [r4, #0]
 8002e34:	6061      	str	r1, [r4, #4]
 8002e36:	8123      	strh	r3, [r4, #8]
}
 8002e38:	b004      	add	sp, #16
 8002e3a:	bd70      	pop	{r4, r5, r6, pc}
 8002e3c:	0800d164 	.word	0x0800d164

08002e40 <encode_tensor_desc>:
{
 8002e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct _encode_tensor_desc* tensors = (struct _encode_tensor_desc *)*arg;
 8002e44:	6816      	ldr	r6, [r2, #0]
    msg.dims.funcs.encode = encode_uint32;
 8002e46:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8002ea0 <encode_tensor_desc+0x60>
    if (!pb_encode_submessage(stream, aiTensorDescMsg_fields, &msg))
 8002e4a:	f8df a058 	ldr.w	sl, [pc, #88]	; 8002ea4 <encode_tensor_desc+0x64>
{
 8002e4e:	b09c      	sub	sp, #112	; 0x70
 8002e50:	4605      	mov	r5, r0
 8002e52:	4688      	mov	r8, r1
  for (size_t i = 0; i < tensors->size; i++)
 8002e54:	2400      	movs	r4, #0
 8002e56:	6873      	ldr	r3, [r6, #4]
 8002e58:	42a3      	cmp	r3, r4
 8002e5a:	d801      	bhi.n	8002e60 <encode_tensor_desc+0x20>
  return true;
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	e01c      	b.n	8002e9a <encode_tensor_desc+0x5a>
    aiTensorDescMsg msg = aiTensorDescMsg_init_zero;
 8002e60:	2264      	movs	r2, #100	; 0x64
 8002e62:	2100      	movs	r1, #0
 8002e64:	a803      	add	r0, sp, #12
 8002e66:	f007 fc94 	bl	800a792 <memset>
    tensors->cb(i, tensors->data, &msg, &array_u32);
 8002e6a:	68b1      	ldr	r1, [r6, #8]
 8002e6c:	6837      	ldr	r7, [r6, #0]
 8002e6e:	4620      	mov	r0, r4
 8002e70:	466b      	mov	r3, sp
 8002e72:	aa03      	add	r2, sp, #12
 8002e74:	47b8      	blx	r7
    if (!pb_encode_tag_for_field(stream, field))
 8002e76:	4641      	mov	r1, r8
 8002e78:	4628      	mov	r0, r5
    msg.dims.funcs.encode = encode_uint32;
 8002e7a:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
    msg.dims.arg = &array_u32;
 8002e7e:	f8cd d05c 	str.w	sp, [sp, #92]	; 0x5c
    if (!pb_encode_tag_for_field(stream, field))
 8002e82:	f003 f829 	bl	8005ed8 <pb_encode_tag_for_field>
 8002e86:	b138      	cbz	r0, 8002e98 <encode_tensor_desc+0x58>
    if (!pb_encode_submessage(stream, aiTensorDescMsg_fields, &msg))
 8002e88:	aa03      	add	r2, sp, #12
 8002e8a:	4651      	mov	r1, sl
 8002e8c:	4628      	mov	r0, r5
 8002e8e:	f003 f99a 	bl	80061c6 <pb_encode_submessage>
 8002e92:	b108      	cbz	r0, 8002e98 <encode_tensor_desc+0x58>
  for (size_t i = 0; i < tensors->size; i++)
 8002e94:	3401      	adds	r4, #1
 8002e96:	e7de      	b.n	8002e56 <encode_tensor_desc+0x16>
      return false;
 8002e98:	2000      	movs	r0, #0
}
 8002e9a:	b01c      	add	sp, #112	; 0x70
 8002e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ea0:	08002ccf 	.word	0x08002ccf
 8002ea4:	0802040c 	.word	0x0802040c

08002ea8 <aiPbMgrSendResp>:

/*---------------------------------------------------------------------------*/

void aiPbMgrSendResp(const reqMsg *req, respMsg *resp,
    EnumState state)
{
 8002ea8:	b508      	push	{r3, lr}
  resp->reqid = req->reqid;
 8002eaa:	6803      	ldr	r3, [r0, #0]
 8002eac:	600b      	str	r3, [r1, #0]
  resp->state = state;
 8002eae:	710a      	strb	r2, [r1, #4]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 8002eb0:	4804      	ldr	r0, [pc, #16]	; (8002ec4 <aiPbMgrSendResp+0x1c>)
 8002eb2:	460a      	mov	r2, r1
 8002eb4:	4904      	ldr	r1, [pc, #16]	; (8002ec8 <aiPbMgrSendResp+0x20>)
 8002eb6:	f003 f90f 	bl	80060d8 <pb_encode>
  pb_io_flush_ostream();
}
 8002eba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pb_io_flush_ostream();
 8002ebe:	f7ff becf 	b.w	8002c60 <pb_io_flush_ostream>
 8002ec2:	bf00      	nop
 8002ec4:	20001284 	.word	0x20001284
 8002ec8:	08020588 	.word	0x08020588

08002ecc <aiPbMgrWaitAndProcess>:
{
 8002ecc:	b570      	push	{r4, r5, r6, lr}
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 8002ece:	4c1d      	ldr	r4, [pc, #116]	; (8002f44 <aiPbMgrWaitAndProcess+0x78>)
  pb_io_flush_istream();
 8002ed0:	f7ff fed6 	bl	8002c80 <pb_io_flush_istream>
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 8002ed4:	491c      	ldr	r1, [pc, #112]	; (8002f48 <aiPbMgrWaitAndProcess+0x7c>)
 8002ed6:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8002eda:	4620      	mov	r0, r4
 8002edc:	f002 fe7c 	bl	8005bd8 <pb_decode_delimited>
 8002ee0:	b348      	cbz	r0, 8002f36 <aiPbMgrWaitAndProcess+0x6a>
    pb_io_flush_istream();
 8002ee2:	f7ff fecd 	bl	8002c80 <pb_io_flush_istream>
    pbContextMgr.state = PB_MGR_ON_GOING;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8002eec:	6a21      	ldr	r1, [r4, #32]
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 8002eee:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8002ef2:	69e3      	ldr	r3, [r4, #28]
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8002ef4:	2500      	movs	r5, #0
 8002ef6:	42a9      	cmp	r1, r5
 8002ef8:	d00d      	beq.n	8002f16 <aiPbMgrWaitAndProcess+0x4a>
      cfunc = &pbContextMgr.funcs[idx];
 8002efa:	461a      	mov	r2, r3
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 8002efc:	f813 6b0c 	ldrb.w	r6, [r3], #12
 8002f00:	4286      	cmp	r6, r0
 8002f02:	d11c      	bne.n	8002f3e <aiPbMgrWaitAndProcess+0x72>
        cfunc->process(&(pbContextMgr.req), &(pbContextMgr.resp), cfunc->param);
 8002f04:	4911      	ldr	r1, [pc, #68]	; (8002f4c <aiPbMgrWaitAndProcess+0x80>)
 8002f06:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
 8002f0a:	f1a1 0054 	sub.w	r0, r1, #84	; 0x54
 8002f0e:	4798      	blx	r3
    if (idx == pbContextMgr.n_func) {
 8002f10:	6a23      	ldr	r3, [r4, #32]
 8002f12:	42ab      	cmp	r3, r5
 8002f14:	d10c      	bne.n	8002f30 <aiPbMgrWaitAndProcess+0x64>
    EnumState state, uint32_t param, EnumError error)
{
  resp->which_payload = respMsg_ack_tag;
  resp->payload.ack.param = param;
  resp->payload.ack.error = error;
  aiPbMgrSendResp(req, resp, state);
 8002f16:	490d      	ldr	r1, [pc, #52]	; (8002f4c <aiPbMgrWaitAndProcess+0x80>)
  resp->payload.ack.param = param;
 8002f18:	2204      	movs	r2, #4
  resp->which_payload = respMsg_ack_tag;
 8002f1a:	230c      	movs	r3, #12
  aiPbMgrSendResp(req, resp, state);
 8002f1c:	f1a1 0054 	sub.w	r0, r1, #84	; 0x54
  resp->which_payload = respMsg_ack_tag;
 8002f20:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
  resp->payload.ack.param = param;
 8002f24:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  resp->payload.ack.error = error;
 8002f28:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  aiPbMgrSendResp(req, resp, state);
 8002f2c:	f7ff ffbc 	bl	8002ea8 <aiPbMgrSendResp>
    pbContextMgr.state = PB_MGR_READY;
 8002f30:	2301      	movs	r3, #1
 8002f32:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
  pb_io_flush_istream();
 8002f36:	f7ff fea3 	bl	8002c80 <pb_io_flush_istream>
}
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	bd70      	pop	{r4, r5, r6, pc}
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8002f3e:	3501      	adds	r5, #1
 8002f40:	e7d9      	b.n	8002ef6 <aiPbMgrWaitAndProcess+0x2a>
 8002f42:	bf00      	nop
 8002f44:	20001278 	.word	0x20001278
 8002f48:	08020528 	.word	0x08020528
 8002f4c:	200012f0 	.word	0x200012f0

08002f50 <aiPbMgrSendAck>:
{
 8002f50:	b470      	push	{r4, r5, r6}
  resp->which_payload = respMsg_ack_tag;
 8002f52:	260c      	movs	r6, #12
{
 8002f54:	f89d 500c 	ldrb.w	r5, [sp, #12]
  resp->which_payload = respMsg_ack_tag;
 8002f58:	80ce      	strh	r6, [r1, #6]
  resp->payload.ack.error = error;
 8002f5a:	730d      	strb	r5, [r1, #12]
  resp->payload.ack.param = param;
 8002f5c:	608b      	str	r3, [r1, #8]
}
 8002f5e:	bc70      	pop	{r4, r5, r6}
  aiPbMgrSendResp(req, resp, state);
 8002f60:	f7ff bfa2 	b.w	8002ea8 <aiPbMgrSendResp>

08002f64 <aiPbMgrWaitAck>:

bool aiPbMgrWaitAck(void)
{
 8002f64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  bool res;
  ackMsg ack = ackMsg_init_default;
 8002f66:	2300      	movs	r3, #0
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8002f68:	4907      	ldr	r1, [pc, #28]	; (8002f88 <aiPbMgrWaitAck+0x24>)
 8002f6a:	4808      	ldr	r0, [pc, #32]	; (8002f8c <aiPbMgrWaitAck+0x28>)
  ackMsg ack = ackMsg_init_default;
 8002f6c:	9302      	str	r3, [sp, #8]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8002f6e:	aa02      	add	r2, sp, #8
  ackMsg ack = ackMsg_init_default;
 8002f70:	f88d 300c 	strb.w	r3, [sp, #12]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8002f74:	f002 fe30 	bl	8005bd8 <pb_decode_delimited>
 8002f78:	9001      	str	r0, [sp, #4]
  pb_io_flush_istream();
 8002f7a:	f7ff fe81 	bl	8002c80 <pb_io_flush_istream>
  return res;
}
 8002f7e:	9801      	ldr	r0, [sp, #4]
 8002f80:	b005      	add	sp, #20
 8002f82:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f86:	bf00      	nop
 8002f88:	080201d0 	.word	0x080201d0
 8002f8c:	20001278 	.word	0x20001278

08002f90 <aiPbMgrSendLogV2>:
  pb_io_flush_istream();
  return res;
}

bool aiPbMgrSendLogV2(EnumState state, uint32_t lvl, const char *str)
{
 8002f90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  bool res;
  ackMsg ack = ackMsg_init_default;

  if (pbContextMgr.state != PB_MGR_ON_GOING)
 8002f92:	4c19      	ldr	r4, [pc, #100]	; (8002ff8 <aiPbMgrSendLogV2+0x68>)
{
 8002f94:	460e      	mov	r6, r1
 8002f96:	4611      	mov	r1, r2
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 8002f98:	f894 21d0 	ldrb.w	r2, [r4, #464]	; 0x1d0
  ackMsg ack = ackMsg_init_default;
 8002f9c:	2300      	movs	r3, #0
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 8002f9e:	2a02      	cmp	r2, #2
{
 8002fa0:	4605      	mov	r5, r0
  ackMsg ack = ackMsg_init_default;
 8002fa2:	9302      	str	r3, [sp, #8]
 8002fa4:	f88d 300c 	strb.w	r3, [sp, #12]
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 8002fa8:	d123      	bne.n	8002ff2 <aiPbMgrSendLogV2+0x62>
    return false;

  size_t len = strlen(str);
 8002faa:	4608      	mov	r0, r1
 8002fac:	9101      	str	r1, [sp, #4]
 8002fae:	f7fd f95f 	bl	8000270 <strlen>
  pbContextMgr.resp.which_payload = respMsg_log_tag;
  pbContextMgr.resp.payload.log.level = lvl;
  if (len >= sizeof(pbContextMgr.resp.payload.log.str))
    len = sizeof(pbContextMgr.resp.payload.log.str) - 1;

  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 8002fb2:	287f      	cmp	r0, #127	; 0x7f
 8002fb4:	bf28      	it	cs
 8002fb6:	207f      	movcs	r0, #127	; 0x7f
  pbContextMgr.resp.which_payload = respMsg_log_tag;
 8002fb8:	230d      	movs	r3, #13
  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 8002fba:	1c42      	adds	r2, r0, #1
 8002fbc:	9901      	ldr	r1, [sp, #4]
  pbContextMgr.resp.which_payload = respMsg_log_tag;
 8002fbe:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 8002fc2:	f104 0084 	add.w	r0, r4, #132	; 0x84
  pbContextMgr.resp.payload.log.level = lvl;
 8002fc6:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 8002fca:	f007 fc84 	bl	800a8d6 <memcpy>

  aiPbMgrSendResp(&(pbContextMgr.req), &(pbContextMgr.resp), state);
 8002fce:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8002fd2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002fd6:	462a      	mov	r2, r5
 8002fd8:	f7ff ff66 	bl	8002ea8 <aiPbMgrSendResp>

  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8002fdc:	4620      	mov	r0, r4
 8002fde:	4907      	ldr	r1, [pc, #28]	; (8002ffc <aiPbMgrSendLogV2+0x6c>)
 8002fe0:	aa02      	add	r2, sp, #8
 8002fe2:	f002 fdf9 	bl	8005bd8 <pb_decode_delimited>
 8002fe6:	4604      	mov	r4, r0
  pb_io_flush_istream();
 8002fe8:	f7ff fe4a 	bl	8002c80 <pb_io_flush_istream>
  return res;
}
 8002fec:	4620      	mov	r0, r4
 8002fee:	b004      	add	sp, #16
 8002ff0:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8002ff2:	461c      	mov	r4, r3
 8002ff4:	e7fa      	b.n	8002fec <aiPbMgrSendLogV2+0x5c>
 8002ff6:	bf00      	nop
 8002ff8:	20001278 	.word	0x20001278
 8002ffc:	080201d0 	.word	0x080201d0

08003000 <aiPbMgrReceiveData>:

bool aiPbMgrReceiveData(aiPbData *data)
{
 8003000:	b510      	push	{r4, lr}
  aiDataMsg msg;

  msg.datas.funcs.decode = &decode_data_cb;
 8003002:	4b09      	ldr	r3, [pc, #36]	; (8003028 <aiPbMgrReceiveData+0x28>)
  msg.datas.arg = (void *)data;

  /* Waiting and decoding aiDataMsg message */
  pb_decode_delimited(&pbContextMgr.input, aiDataMsg_fields, &msg);
 8003004:	4909      	ldr	r1, [pc, #36]	; (800302c <aiPbMgrReceiveData+0x2c>)
{
 8003006:	b086      	sub	sp, #24
  msg.datas.arg = (void *)data;
 8003008:	e9cd 3004 	strd	r3, r0, [sp, #16]
{
 800300c:	4604      	mov	r4, r0
  pb_decode_delimited(&pbContextMgr.input, aiDataMsg_fields, &msg);
 800300e:	aa01      	add	r2, sp, #4
 8003010:	4807      	ldr	r0, [pc, #28]	; (8003030 <aiPbMgrReceiveData+0x30>)
 8003012:	f002 fde1 	bl	8005bd8 <pb_decode_delimited>
  pb_io_flush_istream();
 8003016:	f7ff fe33 	bl	8002c80 <pb_io_flush_istream>

  data->type = msg.type;
 800301a:	9b01      	ldr	r3, [sp, #4]
 800301c:	6023      	str	r3, [r4, #0]
  data->addr = msg.addr;
 800301e:	9b03      	ldr	r3, [sp, #12]
 8003020:	60a3      	str	r3, [r4, #8]

  return true;
}
 8003022:	2001      	movs	r0, #1
 8003024:	b006      	add	sp, #24
 8003026:	bd10      	pop	{r4, pc}
 8003028:	08002d43 	.word	0x08002d43
 800302c:	08020204 	.word	0x08020204
 8003030:	20001278 	.word	0x20001278

08003034 <aiPbMgrSendOperator>:


bool aiPbMgrSendOperator(const reqMsg *req, respMsg *resp,
    EnumState state, const char *name, const uint32_t type, const uint32_t id,
    aiOpPerf *perf)
{
 8003034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003036:	b085      	sub	sp, #20
 8003038:	4617      	mov	r7, r2
  struct _encode_uint32 array;
  resp->which_payload = respMsg_op_tag;
 800303a:	2210      	movs	r2, #16
{
 800303c:	4606      	mov	r6, r0
 800303e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  resp->which_payload = respMsg_op_tag;
 8003040:	80ca      	strh	r2, [r1, #6]
{
 8003042:	460c      	mov	r4, r1
  if (name)
 8003044:	4618      	mov	r0, r3
 8003046:	b31b      	cbz	r3, 8003090 <aiPbMgrSendOperator+0x5c>
    aiPbStrCopy(name, &resp->payload.op.name[0], sizeof(resp->payload.op.name));
 8003048:	2240      	movs	r2, #64	; 0x40
 800304a:	3108      	adds	r1, #8
 800304c:	f7ff fed2 	bl	8002df4 <aiPbStrCopy>
  else
    resp->payload.op.name[0] = 0;
  resp->payload.op.type = type;
 8003050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003052:	64a3      	str	r3, [r4, #72]	; 0x48
  resp->payload.op.id = id;
 8003054:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003056:	64e3      	str	r3, [r4, #76]	; 0x4c

  if (perf) {
 8003058:	b1f5      	cbz	r5, 8003098 <aiPbMgrSendOperator+0x64>
    resp->payload.op.stack_used = perf->stack_usage;
 800305a:	692b      	ldr	r3, [r5, #16]
 800305c:	6623      	str	r3, [r4, #96]	; 0x60
    resp->payload.op.heap_used = perf->heap_usage;
 800305e:	696b      	ldr	r3, [r5, #20]
 8003060:	6663      	str	r3, [r4, #100]	; 0x64
    resp->payload.op.duration = perf->duration;
 8003062:	682b      	ldr	r3, [r5, #0]
 8003064:	6523      	str	r3, [r4, #80]	; 0x50
    resp->payload.op.counter_type = perf->counter_type;
 8003066:	686b      	ldr	r3, [r5, #4]
 8003068:	6563      	str	r3, [r4, #84]	; 0x54
    if (perf->counters) {
 800306a:	68eb      	ldr	r3, [r5, #12]
 800306c:	b193      	cbz	r3, 8003094 <aiPbMgrSendOperator+0x60>
      array.size = perf->counter_n;
 800306e:	68aa      	ldr	r2, [r5, #8]
	  array.data = (void *)perf->counters;
 8003070:	e9cd 2301 	strd	r2, r3, [sp, #4]
	  array.offset = 4;
 8003074:	2304      	movs	r3, #4
 8003076:	9303      	str	r3, [sp, #12]
      resp->payload.op.counters.funcs.encode = encode_uint32;
 8003078:	4b0a      	ldr	r3, [pc, #40]	; (80030a4 <aiPbMgrSendOperator+0x70>)
 800307a:	65a3      	str	r3, [r4, #88]	; 0x58
      resp->payload.op.counters.arg = &array;
 800307c:	ab01      	add	r3, sp, #4
 800307e:	65e3      	str	r3, [r4, #92]	; 0x5c
    resp->payload.op.duration = 0.0f;
    resp->payload.op.counter_type = 0;
    resp->payload.op.counters.funcs.encode = NULL;
  }

  aiPbMgrSendResp(req, resp, state);
 8003080:	4630      	mov	r0, r6
 8003082:	463a      	mov	r2, r7
 8003084:	4621      	mov	r1, r4
 8003086:	f7ff ff0f 	bl	8002ea8 <aiPbMgrSendResp>
  // aiPbMgrWaitAck();

  return true;
}
 800308a:	2001      	movs	r0, #1
 800308c:	b005      	add	sp, #20
 800308e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    resp->payload.op.name[0] = 0;
 8003090:	720b      	strb	r3, [r1, #8]
 8003092:	e7dd      	b.n	8003050 <aiPbMgrSendOperator+0x1c>
      resp->payload.op.counters.funcs.encode = NULL;
 8003094:	65a3      	str	r3, [r4, #88]	; 0x58
 8003096:	e7f3      	b.n	8003080 <aiPbMgrSendOperator+0x4c>
    resp->payload.op.duration = 0.0f;
 8003098:	2300      	movs	r3, #0
    resp->payload.op.counters.funcs.encode = NULL;
 800309a:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
    resp->payload.op.duration = 0.0f;
 800309e:	6523      	str	r3, [r4, #80]	; 0x50
    resp->payload.op.counter_type = 0;
 80030a0:	e7ee      	b.n	8003080 <aiPbMgrSendOperator+0x4c>
 80030a2:	bf00      	nop
 80030a4:	08002ccf 	.word	0x08002ccf

080030a8 <aiPbCmdSync>:
#if defined(_IS_GHS_COMPILER) && _IS_GHS_COMPILER
#define _ARM_TOOLS_ID       EnumTools_AI_GHS
#endif

void aiPbCmdSync(const reqMsg *req, respMsg *resp, void *param)
{
 80030a8:	b410      	push	{r4}
  resp->which_payload = respMsg_sync_tag;
 80030aa:	240a      	movs	r4, #10
 80030ac:	80cc      	strh	r4, [r1, #6]
  resp->payload.sync.version =
 80030ae:	f240 3401 	movw	r4, #769	; 0x301
 80030b2:	608c      	str	r4, [r1, #8]
   *  b15..b8  8b : API variant (EnumAiApiRuntime value)
   *  b23..b16 8b : TOOL-CHAIN ID (EnumTools value)
   */

  resp->payload.sync.rtid = ((uint32_t)param >> 16) & 0xFFFF;
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 80030b4:	b294      	uxth	r4, r2
  resp->payload.sync.rtid = ((uint32_t)param >> 16) & 0xFFFF;
 80030b6:	0c12      	lsrs	r2, r2, #16

  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << EnumTools_AI_TOOLS_POS);
 80030b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 80030bc:	60cc      	str	r4, [r1, #12]
  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << EnumTools_AI_TOOLS_POS);
 80030be:	610a      	str	r2, [r1, #16]

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
}
 80030c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 80030c4:	2200      	movs	r2, #0
 80030c6:	f7ff beef 	b.w	8002ea8 <aiPbMgrSendResp>
	...

080030cc <_aiPrintDataInfo>:
    );
}


static void _aiPrintDataInfo(const int idx, const ai_buffer *buffer)
{
 80030cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  const ai_buffer_format fmt = buffer->format;
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 80030ce:	e9d1 5200 	ldrd	r5, r2, [r1]
{
 80030d2:	4604      	mov	r4, r0
 80030d4:	4608      	mov	r0, r1
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 80030d6:	2101      	movs	r1, #1
 80030d8:	9201      	str	r2, [sp, #4]
 80030da:	f003 f913 	bl	8006304 <ai_buffer_get_size>
 80030de:	4629      	mov	r1, r5
 80030e0:	f003 f944 	bl	800636c <ai_buffer_get_byte_size>
 80030e4:	9a01      	ldr	r2, [sp, #4]
 80030e6:	4603      	mov	r3, r0
 80030e8:	4803      	ldr	r0, [pc, #12]	; (80030f8 <_aiPrintDataInfo+0x2c>)
 80030ea:	4621      	mov	r1, r4
      idx,
      (int)buffer->data,
      (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
  );
}
 80030ec:	b003      	add	sp, #12
 80030ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 80030f2:	f000 ba49 	b.w	8003588 <lc_print>
 80030f6:	bf00      	nop
 80030f8:	0800c800 	.word	0x0800c800

080030fc <aiPlatformVersion>:
{
 80030fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const ai_platform_version rt_ver = ai_platform_runtime_get_version();
 80030fe:	f003 fa93 	bl	8006628 <ai_platform_runtime_get_version>
  LC_PRINT("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 8003102:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8003106:	9302      	str	r3, [sp, #8]
 8003108:	2201      	movs	r2, #1
 800310a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800310e:	b2c0      	uxtb	r0, r0
 8003110:	9301      	str	r3, [sp, #4]
 8003112:	9000      	str	r0, [sp, #0]
 8003114:	2300      	movs	r3, #0
 8003116:	4803      	ldr	r0, [pc, #12]	; (8003124 <aiPlatformVersion+0x28>)
 8003118:	4611      	mov	r1, r2
 800311a:	f000 fa35 	bl	8003588 <lc_print>
}
 800311e:	b007      	add	sp, #28
 8003120:	f85d fb04 	ldr.w	pc, [sp], #4
 8003124:	0800c813 	.word	0x0800c813

08003128 <aiLogErr>:
{
 8003128:	b410      	push	{r4}
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800312a:	f3c0 2317 	ubfx	r3, r0, #8, #24
 800312e:	b2c4      	uxtb	r4, r0
  if (fct)
 8003130:	b129      	cbz	r1, 800313e <aiLogErr+0x16>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003132:	4622      	mov	r2, r4
 8003134:	4805      	ldr	r0, [pc, #20]	; (800314c <aiLogErr+0x24>)
}
 8003136:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800313a:	f000 ba25 	b.w	8003588 <lc_print>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800313e:	4621      	mov	r1, r4
 8003140:	4803      	ldr	r0, [pc, #12]	; (8003150 <aiLogErr+0x28>)
}
 8003142:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8003146:	461a      	mov	r2, r3
 8003148:	f000 ba1e 	b.w	8003588 <lc_print>
 800314c:	0800c845 	.word	0x0800c845
 8003150:	0800c872 	.word	0x0800c872

08003154 <aiPrintBufferInfo>:
{
 8003154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LC_PRINT("(%d,%d,%d,",
 8003158:	6981      	ldr	r1, [r0, #24]
  const ai_buffer_format fmt = buffer->format;
 800315a:	6807      	ldr	r7, [r0, #0]
{
 800315c:	4605      	mov	r5, r0
  LC_PRINT("(%d,%d,%d,",
 800315e:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 8003162:	486b      	ldr	r0, [pc, #428]	; (8003310 <aiPrintBufferInfo+0x1bc>)
 8003164:	6809      	ldr	r1, [r1, #0]
 8003166:	f000 fa0f 	bl	8003588 <lc_print>
  if (AI_BUFFER_SHAPE_SIZE(buffer) == 5)
 800316a:	696a      	ldr	r2, [r5, #20]
 800316c:	69a8      	ldr	r0, [r5, #24]
 800316e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003172:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8003176:	d119      	bne.n	80031ac <aiPrintBufferInfo+0x58>
    LC_PRINT("%d,%d)",
 8003178:	6842      	ldr	r2, [r0, #4]
 800317a:	6901      	ldr	r1, [r0, #16]
 800317c:	4865      	ldr	r0, [pc, #404]	; (8003314 <aiPrintBufferInfo+0x1c0>)
 800317e:	f000 fa03 	bl	8003588 <lc_print>
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8003182:	2101      	movs	r1, #1
 8003184:	4628      	mov	r0, r5
 8003186:	f003 f8bd 	bl	8006304 <ai_buffer_get_size>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 800318a:	f3c7 4643 	ubfx	r6, r7, #17, #4
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 800318e:	4601      	mov	r1, r0
 8003190:	4861      	ldr	r0, [pc, #388]	; (8003318 <aiPrintBufferInfo+0x1c4>)
 8003192:	f000 f9f9 	bl	8003588 <lc_print>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8003196:	2e01      	cmp	r6, #1
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8003198:	ea4f 19e7 	mov.w	r9, r7, asr #7
 800319c:	f3c7 14c6 	ubfx	r4, r7, #7, #7
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 80031a0:	d113      	bne.n	80031ca <aiPrintBufferInfo+0x76>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80031a2:	485e      	ldr	r0, [pc, #376]	; (800331c <aiPrintBufferInfo+0x1c8>)
 80031a4:	4621      	mov	r1, r4
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80031a6:	f000 f9ef 	bl	8003588 <lc_print>
 80031aa:	e046      	b.n	800323a <aiPrintBufferInfo+0xe6>
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 80031ac:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
    LC_PRINT("%d,%d)",
 80031b0:	6843      	ldr	r3, [r0, #4]
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 80031b2:	d105      	bne.n	80031c0 <aiPrintBufferInfo+0x6c>
    LC_PRINT("%d,%d,%d)",
 80031b4:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 80031b8:	4859      	ldr	r0, [pc, #356]	; (8003320 <aiPrintBufferInfo+0x1cc>)
 80031ba:	f000 f9e5 	bl	8003588 <lc_print>
 80031be:	e7e0      	b.n	8003182 <aiPrintBufferInfo+0x2e>
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
 80031c0:	4858      	ldr	r0, [pc, #352]	; (8003324 <aiPrintBufferInfo+0x1d0>)
 80031c2:	4619      	mov	r1, r3
 80031c4:	f000 f9e0 	bl	8003588 <lc_print>
 80031c8:	e7db      	b.n	8003182 <aiPrintBufferInfo+0x2e>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 80031ca:	2e03      	cmp	r6, #3
 80031cc:	d102      	bne.n	80031d4 <aiPrintBufferInfo+0x80>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80031ce:	4856      	ldr	r0, [pc, #344]	; (8003328 <aiPrintBufferInfo+0x1d4>)
 80031d0:	4621      	mov	r1, r4
 80031d2:	e7e8      	b.n	80031a6 <aiPrintBufferInfo+0x52>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 80031d4:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8003340 <aiPrintBufferInfo+0x1ec>
 80031d8:	f417 0f00 	tst.w	r7, #8388608	; 0x800000
 80031dc:	f108 0102 	add.w	r1, r8, #2
 80031e0:	4622      	mov	r2, r4
 80031e2:	bf18      	it	ne
 80031e4:	4641      	movne	r1, r8
 80031e6:	f108 003b 	add.w	r0, r8, #59	; 0x3b
 80031ea:	f000 f9cd 	bl	8003588 <lc_print>
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 80031ee:	2e02      	cmp	r6, #2
 80031f0:	d123      	bne.n	800323a <aiPrintBufferInfo+0xe6>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 80031f2:	68ab      	ldr	r3, [r5, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d069      	beq.n	80032cc <aiPrintBufferInfo+0x178>
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	07d2      	lsls	r2, r2, #31
 80031fc:	d566      	bpl.n	80032cc <aiPrintBufferInfo+0x178>
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d063      	beq.n	80032cc <aiPrintBufferInfo+0x178>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 8003204:	f8b3 a002 	ldrh.w	sl, [r3, #2]
      LC_PRINT(" %d:", s_);
 8003208:	f108 0040 	add.w	r0, r8, #64	; 0x40
      const int max_ = s_> 4?4:s_;
 800320c:	f1ba 0f04 	cmp.w	sl, #4
      LC_PRINT(" %d:", s_);
 8003210:	4651      	mov	r1, sl
      const int max_ = s_> 4?4:s_;
 8003212:	46d3      	mov	fp, sl
 8003214:	bf28      	it	cs
 8003216:	f04f 0b04 	movcs.w	fp, #4
      LC_PRINT(" %d:", s_);
 800321a:	f000 f9b5 	bl	8003588 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 800321e:	2600      	movs	r6, #0
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003220:	f04f 0900 	mov.w	r9, #0
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8003224:	f108 0845 	add.w	r8, r8, #69	; 0x45
      for (int idx=0; idx<max_; idx++) {
 8003228:	455e      	cmp	r6, fp
 800322a:	db18      	blt.n	800325e <aiPrintBufferInfo+0x10a>
      LC_PRINT((s_ > max_)?"..":"");
 800322c:	4b3f      	ldr	r3, [pc, #252]	; (800332c <aiPrintBufferInfo+0x1d8>)
 800322e:	1cd8      	adds	r0, r3, #3
 8003230:	45d3      	cmp	fp, sl
 8003232:	bf38      	it	cc
 8003234:	4618      	movcc	r0, r3
 8003236:	f000 f9a7 	bl	8003588 <lc_print>
  if (buffer->data)
 800323a:	686c      	ldr	r4, [r5, #4]
    LC_PRINT(" @0x%X/%d",
 800323c:	2101      	movs	r1, #1
 800323e:	4628      	mov	r0, r5
  if (buffer->data)
 8003240:	2c00      	cmp	r4, #0
 8003242:	d054      	beq.n	80032ee <aiPrintBufferInfo+0x19a>
    LC_PRINT(" @0x%X/%d",
 8003244:	f003 f85e 	bl	8006304 <ai_buffer_get_size>
 8003248:	4639      	mov	r1, r7
 800324a:	f003 f88f 	bl	800636c <ai_buffer_get_byte_size>
 800324e:	4602      	mov	r2, r0
 8003250:	4837      	ldr	r0, [pc, #220]	; (8003330 <aiPrintBufferInfo+0x1dc>)
 8003252:	4621      	mov	r1, r4
}
 8003254:	b003      	add	sp, #12
 8003256:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" @0x%X/%d",
 800325a:	f000 b995 	b.w	8003588 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800325e:	68ab      	ldr	r3, [r5, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d02e      	beq.n	80032c2 <aiPrintBufferInfo+0x16e>
 8003264:	681c      	ldr	r4, [r3, #0]
 8003266:	f014 0401 	ands.w	r4, r4, #1
 800326a:	d02d      	beq.n	80032c8 <aiPrintBufferInfo+0x174>
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	2a00      	cmp	r2, #0
 8003270:	d049      	beq.n	8003306 <aiPrintBufferInfo+0x1b2>
 8003272:	6853      	ldr	r3, [r2, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d049      	beq.n	800330c <aiPrintBufferInfo+0x1b8>
 8003278:	8851      	ldrh	r1, [r2, #2]
 800327a:	42b1      	cmp	r1, r6
 800327c:	dd46      	ble.n	800330c <aiPrintBufferInfo+0x1b8>
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8003284:	6818      	ldr	r0, [r3, #0]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8003286:	2a00      	cmp	r2, #0
 8003288:	d03e      	beq.n	8003308 <aiPrintBufferInfo+0x1b4>
 800328a:	8814      	ldrh	r4, [r2, #0]
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800328c:	6853      	ldr	r3, [r2, #4]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 800328e:	f014 0402 	ands.w	r4, r4, #2
 8003292:	d00f      	beq.n	80032b4 <aiPrintBufferInfo+0x160>
 8003294:	b1b3      	cbz	r3, 80032c4 <aiPrintBufferInfo+0x170>
 8003296:	8852      	ldrh	r2, [r2, #2]
 8003298:	42b2      	cmp	r2, r6
 800329a:	dd35      	ble.n	8003308 <aiPrintBufferInfo+0x1b4>
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	5d9c      	ldrb	r4, [r3, r6]
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 80032a0:	f7fd f952 	bl	8000548 <__aeabi_f2d>
 80032a4:	9400      	str	r4, [sp, #0]
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4640      	mov	r0, r8
 80032ac:	f000 f96c 	bl	8003588 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 80032b0:	3601      	adds	r6, #1
 80032b2:	e7b9      	b.n	8003228 <aiPrintBufferInfo+0xd4>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 80032b4:	b133      	cbz	r3, 80032c4 <aiPrintBufferInfo+0x170>
 80032b6:	8852      	ldrh	r2, [r2, #2]
 80032b8:	42b2      	cmp	r2, r6
 80032ba:	ddf1      	ble.n	80032a0 <aiPrintBufferInfo+0x14c>
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	579c      	ldrsb	r4, [r3, r6]
 80032c0:	e7ee      	b.n	80032a0 <aiPrintBufferInfo+0x14c>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80032c2:	4648      	mov	r0, r9
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 80032c4:	461c      	mov	r4, r3
 80032c6:	e7eb      	b.n	80032a0 <aiPrintBufferInfo+0x14c>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80032c8:	4648      	mov	r0, r9
 80032ca:	e7e9      	b.n	80032a0 <aiPrintBufferInfo+0x14c>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 80032cc:	f019 0f78 	tst.w	r9, #120	; 0x78
 80032d0:	d102      	bne.n	80032d8 <aiPrintBufferInfo+0x184>
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80032d2:	4818      	ldr	r0, [pc, #96]	; (8003334 <aiPrintBufferInfo+0x1e0>)
 80032d4:	4621      	mov	r1, r4
 80032d6:	e766      	b.n	80031a6 <aiPrintBufferInfo+0x52>
      LC_PRINT(" Q%d.%d",
 80032d8:	f007 027f 	and.w	r2, r7, #127	; 0x7f
 80032dc:	3a40      	subs	r2, #64	; 0x40
 80032de:	f3c7 51c0 	ubfx	r1, r7, #23, #1
 80032e2:	4411      	add	r1, r2
 80032e4:	4814      	ldr	r0, [pc, #80]	; (8003338 <aiPrintBufferInfo+0x1e4>)
 80032e6:	1a61      	subs	r1, r4, r1
 80032e8:	f000 f94e 	bl	8003588 <lc_print>
 80032ec:	e7a5      	b.n	800323a <aiPrintBufferInfo+0xe6>
    LC_PRINT(" (User Domain)/%d",
 80032ee:	f003 f809 	bl	8006304 <ai_buffer_get_size>
 80032f2:	4639      	mov	r1, r7
 80032f4:	f003 f83a 	bl	800636c <ai_buffer_get_byte_size>
 80032f8:	4601      	mov	r1, r0
 80032fa:	4810      	ldr	r0, [pc, #64]	; (800333c <aiPrintBufferInfo+0x1e8>)
}
 80032fc:	b003      	add	sp, #12
 80032fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" (User Domain)/%d",
 8003302:	f000 b941 	b.w	8003588 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003306:	4648      	mov	r0, r9
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8003308:	2400      	movs	r4, #0
 800330a:	e7c9      	b.n	80032a0 <aiPrintBufferInfo+0x14c>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800330c:	4648      	mov	r0, r9
 800330e:	e7ba      	b.n	8003286 <aiPrintBufferInfo+0x132>
 8003310:	0800c8a2 	.word	0x0800c8a2
 8003314:	0800c8ad 	.word	0x0800c8ad
 8003318:	0800c8c2 	.word	0x0800c8c2
 800331c:	0800c8c6 	.word	0x0800c8c6
 8003320:	0800c8b4 	.word	0x0800c8b4
 8003324:	0800c8be 	.word	0x0800c8be
 8003328:	0800c8ce 	.word	0x0800c8ce
 800332c:	0800c89e 	.word	0x0800c89e
 8003330:	0800c8fb 	.word	0x0800c8fb
 8003334:	0800c8e8 	.word	0x0800c8e8
 8003338:	0800c8f3 	.word	0x0800c8f3
 800333c:	0800c905 	.word	0x0800c905
 8003340:	0800c89a 	.word	0x0800c89a

08003344 <aiPrintNetworkInfo>:


void aiPrintNetworkInfo(const ai_network_report* report)
{
 8003344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003348:	4604      	mov	r4, r0
  LC_PRINT("Network informations...\r\n");
 800334a:	4842      	ldr	r0, [pc, #264]	; (8003454 <aiPrintNetworkInfo+0x110>)
 800334c:	f000 f91c 	bl	8003588 <lc_print>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 8003350:	6821      	ldr	r1, [r4, #0]
 8003352:	4841      	ldr	r0, [pc, #260]	; (8003458 <aiPrintNetworkInfo+0x114>)
 8003354:	f000 f918 	bl	8003588 <lc_print>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 8003358:	6861      	ldr	r1, [r4, #4]
 800335a:	4840      	ldr	r0, [pc, #256]	; (800345c <aiPrintNetworkInfo+0x118>)
 800335c:	f000 f914 	bl	8003588 <lc_print>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 8003360:	68a1      	ldr	r1, [r4, #8]
 8003362:	483f      	ldr	r0, [pc, #252]	; (8003460 <aiPrintNetworkInfo+0x11c>)
 8003364:	f000 f910 	bl	8003588 <lc_print>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 8003368:	68e1      	ldr	r1, [r4, #12]
 800336a:	483e      	ldr	r0, [pc, #248]	; (8003464 <aiPrintNetworkInfo+0x120>)
 800336c:	f000 f90c 	bl	8003588 <lc_print>

  if (report->tool_revision[0])
 8003370:	69a1      	ldr	r1, [r4, #24]
 8003372:	780b      	ldrb	r3, [r1, #0]
 8003374:	b113      	cbz	r3, 800337c <aiPrintNetworkInfo+0x38>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 8003376:	483c      	ldr	r0, [pc, #240]	; (8003468 <aiPrintNetworkInfo+0x124>)
 8003378:	f000 f906 	bl	8003588 <lc_print>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 800337c:	7fa3      	ldrb	r3, [r4, #30]
 800337e:	7f62      	ldrb	r2, [r4, #29]
 8003380:	7f21      	ldrb	r1, [r4, #28]
 8003382:	483a      	ldr	r0, [pc, #232]	; (800346c <aiPrintNetworkInfo+0x128>)
 8003384:	f000 f900 	bl	8003588 <lc_print>
      report->tool_version.major,
      report->tool_version.minor,
      report->tool_version.micro);
  LC_PRINT(" complexity         : %s MACC\r\n", uint64ToDecimal(report->n_macc));
 8003388:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 800338c:	f000 f8e4 	bl	8003558 <uint64ToDecimal>
 8003390:	4601      	mov	r1, r0
 8003392:	4837      	ldr	r0, [pc, #220]	; (8003470 <aiPrintNetworkInfo+0x12c>)
 8003394:	f000 f8f8 	bl	8003588 <lc_print>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 8003398:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800339a:	4836      	ldr	r0, [pc, #216]	; (8003474 <aiPrintNetworkInfo+0x130>)
 800339c:	f000 f8f4 	bl	8003588 <lc_print>

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 80033a0:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
 80033a4:	4834      	ldr	r0, [pc, #208]	; (8003478 <aiPrintNetworkInfo+0x134>)
 80033a6:	f000 f8ef 	bl	8003588 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 80033aa:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 80033ac:	261c      	movs	r6, #28
  for (int idx=0; idx<report->map_activations.size;idx++) {
 80033ae:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80033b2:	42ab      	cmp	r3, r5
 80033b4:	dc21      	bgt.n	80033fa <aiPrintNetworkInfo+0xb6>
      _aiPrintDataInfo(idx, buffer);
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 80033b6:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 80033ba:	4830      	ldr	r0, [pc, #192]	; (800347c <aiPrintNetworkInfo+0x138>)
 80033bc:	f000 f8e4 	bl	8003588 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 80033c0:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 80033c2:	261c      	movs	r6, #28
  for (int idx=0; idx<report->map_weights.size;idx++) {
 80033c4:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 80033c8:	42ab      	cmp	r3, r5
 80033ca:	dc1e      	bgt.n	800340a <aiPrintNetworkInfo+0xc6>
      _aiPrintDataInfo(idx, buffer);
  }

  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 80033cc:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 80033ce:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80033d0:	482b      	ldr	r0, [pc, #172]	; (8003480 <aiPrintNetworkInfo+0x13c>)
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
    LC_PRINT("  I[%d] ", i);
 80033d2:	4e2c      	ldr	r6, [pc, #176]	; (8003484 <aiPrintNetworkInfo+0x140>)
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 80033d4:	f000 f8d8 	bl	8003588 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 80033d8:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->inputs[i]);
 80033da:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 80033dc:	f106 0809 	add.w	r8, r6, #9
  for (int i=0; i<report->n_inputs; i++) {
 80033e0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80033e2:	42ab      	cmp	r3, r5
 80033e4:	dc19      	bgt.n	800341a <aiPrintNetworkInfo+0xd6>
  }

  for (int i=0; i<report->n_outputs; i++) {
    LC_PRINT("  O[%d] ", i);
 80033e6:	4e28      	ldr	r6, [pc, #160]	; (8003488 <aiPrintNetworkInfo+0x144>)
  for (int i=0; i<report->n_outputs; i++) {
 80033e8:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->outputs[i]);
 80033ea:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 80033ec:	f1a6 0803 	sub.w	r8, r6, #3
  for (int i=0; i<report->n_outputs; i++) {
 80033f0:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80033f2:	42ab      	cmp	r3, r5
 80033f4:	dc1f      	bgt.n	8003436 <aiPrintNetworkInfo+0xf2>
  }
}
 80033f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 80033fa:	6d61      	ldr	r1, [r4, #84]	; 0x54
      _aiPrintDataInfo(idx, buffer);
 80033fc:	4628      	mov	r0, r5
 80033fe:	fb06 1105 	mla	r1, r6, r5, r1
 8003402:	f7ff fe63 	bl	80030cc <_aiPrintDataInfo>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8003406:	3501      	adds	r5, #1
 8003408:	e7d1      	b.n	80033ae <aiPrintNetworkInfo+0x6a>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 800340a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      _aiPrintDataInfo(idx, buffer);
 800340c:	4628      	mov	r0, r5
 800340e:	fb06 1105 	mla	r1, r6, r5, r1
 8003412:	f7ff fe5b 	bl	80030cc <_aiPrintDataInfo>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8003416:	3501      	adds	r5, #1
 8003418:	e7d4      	b.n	80033c4 <aiPrintNetworkInfo+0x80>
    LC_PRINT("  I[%d] ", i);
 800341a:	4629      	mov	r1, r5
 800341c:	4630      	mov	r0, r6
 800341e:	f000 f8b3 	bl	8003588 <lc_print>
    aiPrintBufferInfo(&report->inputs[i]);
 8003422:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003424:	fb07 0005 	mla	r0, r7, r5, r0
 8003428:	f7ff fe94 	bl	8003154 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 800342c:	4640      	mov	r0, r8
 800342e:	f000 f8ab 	bl	8003588 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8003432:	3501      	adds	r5, #1
 8003434:	e7d4      	b.n	80033e0 <aiPrintNetworkInfo+0x9c>
    LC_PRINT("  O[%d] ", i);
 8003436:	4629      	mov	r1, r5
 8003438:	4630      	mov	r0, r6
 800343a:	f000 f8a5 	bl	8003588 <lc_print>
    aiPrintBufferInfo(&report->outputs[i]);
 800343e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003440:	fb07 0005 	mla	r0, r7, r5, r0
 8003444:	f7ff fe86 	bl	8003154 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8003448:	4640      	mov	r0, r8
 800344a:	f000 f89d 	bl	8003588 <lc_print>
  for (int i=0; i<report->n_outputs; i++) {
 800344e:	3501      	adds	r5, #1
 8003450:	e7ce      	b.n	80033f0 <aiPrintNetworkInfo+0xac>
 8003452:	bf00      	nop
 8003454:	0800c917 	.word	0x0800c917
 8003458:	0800c931 	.word	0x0800c931
 800345c:	0800c94c 	.word	0x0800c94c
 8003460:	0800c967 	.word	0x0800c967
 8003464:	0800c982 	.word	0x0800c982
 8003468:	0800c99d 	.word	0x0800c99d
 800346c:	0800c9b8 	.word	0x0800c9b8
 8003470:	0800c9d9 	.word	0x0800c9d9
 8003474:	0800c9f9 	.word	0x0800c9f9
 8003478:	0800ca14 	.word	0x0800ca14
 800347c:	0800ca2f 	.word	0x0800ca2f
 8003480:	0800ca4a 	.word	0x0800ca4a
 8003484:	0800ca68 	.word	0x0800ca68
 8003488:	0800ca74 	.word	0x0800ca74

0800348c <_put_c_buffer_cb>:
};

static void _put_c_buffer_cb(void *user, const char c)
{
  struct _buffer *buffer = (struct _buffer *)user;
  if (buffer->pos < (buffer->size - 1)) {
 800348c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8003490:	3b01      	subs	r3, #1
 8003492:	429a      	cmp	r2, r3
 8003494:	d207      	bcs.n	80034a6 <_put_c_buffer_cb+0x1a>
    buffer->buffer[buffer->pos] = c;
 8003496:	6803      	ldr	r3, [r0, #0]
 8003498:	5499      	strb	r1, [r3, r2]
    buffer->pos++;
 800349a:	6883      	ldr	r3, [r0, #8]
    buffer->buffer[buffer->pos] = 0;
 800349c:	6802      	ldr	r2, [r0, #0]
    buffer->pos++;
 800349e:	3301      	adds	r3, #1
    buffer->buffer[buffer->pos] = 0;
 80034a0:	2100      	movs	r1, #0
    buffer->pos++;
 80034a2:	6083      	str	r3, [r0, #8]
    buffer->buffer[buffer->pos] = 0;
 80034a4:	54d1      	strb	r1, [r2, r3]
  }
}
 80034a6:	4770      	bx	lr

080034a8 <_put_c_driver>:
{
 80034a8:	b507      	push	{r0, r1, r2, lr}
  if (_ioWriteAllowed)
 80034aa:	4b08      	ldr	r3, [pc, #32]	; (80034cc <_put_c_driver+0x24>)
{
 80034ac:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	b13b      	cbz	r3, 80034c4 <_put_c_driver+0x1c>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 80034b4:	4806      	ldr	r0, [pc, #24]	; (80034d0 <_put_c_driver+0x28>)
 80034b6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ba:	2201      	movs	r2, #1
 80034bc:	f10d 0107 	add.w	r1, sp, #7
 80034c0:	f7ff fa1c 	bl	80028fc <HAL_UART_Transmit>
}
 80034c4:	b003      	add	sp, #12
 80034c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80034ca:	bf00      	nop
 80034cc:	2000000c 	.word	0x2000000c
 80034d0:	2000119c 	.word	0x2000119c

080034d4 <ioRawWriteBuffer>:
{
 80034d4:	b508      	push	{r3, lr}
 80034d6:	b28a      	uxth	r2, r1
 80034d8:	f04f 33ff 	mov.w	r3, #4294967295
 80034dc:	4601      	mov	r1, r0
 80034de:	4803      	ldr	r0, [pc, #12]	; (80034ec <ioRawWriteBuffer+0x18>)
 80034e0:	f7ff fa0c 	bl	80028fc <HAL_UART_Transmit>
}
 80034e4:	fab0 f080 	clz	r0, r0
 80034e8:	0940      	lsrs	r0, r0, #5
 80034ea:	bd08      	pop	{r3, pc}
 80034ec:	2000119c 	.word	0x2000119c

080034f0 <ioRawReadBuffer>:
{
 80034f0:	b508      	push	{r3, lr}

__STATIC_INLINE bool port_io_read(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Receive(&UartHandle, buff, count, HAL_MAX_DELAY);
 80034f2:	b28a      	uxth	r2, r1
 80034f4:	f04f 33ff 	mov.w	r3, #4294967295
 80034f8:	4601      	mov	r1, r0
 80034fa:	4803      	ldr	r0, [pc, #12]	; (8003508 <ioRawReadBuffer+0x18>)
 80034fc:	f7ff fa50 	bl	80029a0 <HAL_UART_Receive>
}
 8003500:	fab0 f080 	clz	r0, r0
 8003504:	0940      	lsrs	r0, r0, #5
 8003506:	bd08      	pop	{r3, pc}
 8003508:	2000119c 	.word	0x2000119c

0800350c <ioRawDisableLLWrite>:
  _ioWriteAllowed = false;
 800350c:	4b01      	ldr	r3, [pc, #4]	; (8003514 <ioRawDisableLLWrite+0x8>)
 800350e:	2200      	movs	r2, #0
 8003510:	701a      	strb	r2, [r3, #0]
}
 8003512:	4770      	bx	lr
 8003514:	2000000c 	.word	0x2000000c

08003518 <_write>:
{
 8003518:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 800351a:	1e14      	subs	r4, r2, #0
 800351c:	da0a      	bge.n	8003534 <_write+0x1c>
 800351e:	3801      	subs	r0, #1
 8003520:	2801      	cmp	r0, #1
 8003522:	d907      	bls.n	8003534 <_write+0x1c>
    errno = EBADF;
 8003524:	f007 f9aa 	bl	800a87c <__errno>
 8003528:	2309      	movs	r3, #9
 800352a:	6003      	str	r3, [r0, #0]
    return -1;
 800352c:	f04f 34ff 	mov.w	r4, #4294967295
}
 8003530:	4620      	mov	r0, r4
 8003532:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 8003534:	4b06      	ldr	r3, [pc, #24]	; (8003550 <_write+0x38>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0f9      	beq.n	8003530 <_write+0x18>
  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 800353c:	b2a2      	uxth	r2, r4
 800353e:	4805      	ldr	r0, [pc, #20]	; (8003554 <_write+0x3c>)
 8003540:	f04f 33ff 	mov.w	r3, #4294967295
 8003544:	f7ff f9da 	bl	80028fc <HAL_UART_Transmit>
  return (status ? count : 0);
 8003548:	2800      	cmp	r0, #0
 800354a:	bf18      	it	ne
 800354c:	2400      	movne	r4, #0
 800354e:	e7ef      	b.n	8003530 <_write+0x18>
 8003550:	2000000c 	.word	0x2000000c
 8003554:	2000119c 	.word	0x2000119c

08003558 <uint64ToDecimal>:
{ /* see https://www.eevblog.com/forum/microcontrollers/printf-uint64_t-with-arm-gcc/ */
 8003558:	b510      	push	{r4, lr}
  *(--p) = '\0';
 800355a:	4c0a      	ldr	r4, [pc, #40]	; (8003584 <uint64ToDecimal+0x2c>)
 800355c:	2300      	movs	r3, #0
 800355e:	f804 3f14 	strb.w	r3, [r4, #20]!
  for (bool first = true; v || first; first = false) {
 8003562:	2301      	movs	r3, #1
 8003564:	ea50 0201 	orrs.w	r2, r0, r1
 8003568:	d102      	bne.n	8003570 <uint64ToDecimal+0x18>
 800356a:	b90b      	cbnz	r3, 8003570 <uint64ToDecimal+0x18>
}
 800356c:	4620      	mov	r0, r4
 800356e:	bd10      	pop	{r4, pc}
    const uint32_t digit = v % 10;
 8003570:	220a      	movs	r2, #10
 8003572:	2300      	movs	r3, #0
 8003574:	f7fd fc26 	bl	8000dc4 <__aeabi_uldivmod>
    const char c = '0' + digit;
 8003578:	3230      	adds	r2, #48	; 0x30
    *(--p) = c;
 800357a:	f804 2d01 	strb.w	r2, [r4, #-1]!
  for (bool first = true; v || first; first = false) {
 800357e:	2300      	movs	r3, #0
 8003580:	e7f0      	b.n	8003564 <uint64ToDecimal+0xc>
 8003582:	bf00      	nop
 8003584:	20001450 	.word	0x20001450

08003588 <lc_print>:
{
 8003588:	b40f      	push	{r0, r1, r2, r3}
 800358a:	b507      	push	{r0, r1, r2, lr}
 800358c:	ab04      	add	r3, sp, #16
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 800358e:	2100      	movs	r1, #0
{
 8003590:	f853 2b04 	ldr.w	r2, [r3], #4
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8003594:	4804      	ldr	r0, [pc, #16]	; (80035a8 <lc_print+0x20>)
  va_start(ap, fmt);
 8003596:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8003598:	f001 fa40 	bl	8004a1c <vlc_print>
}
 800359c:	b003      	add	sp, #12
 800359e:	f85d eb04 	ldr.w	lr, [sp], #4
 80035a2:	b004      	add	sp, #16
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	080034a9 	.word	0x080034a9

080035ac <lc_vsnprint>:

size_t lc_vsnprint(char *buff, size_t size, const char* fmt, va_list vlist)
{
 80035ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  struct _buffer buffer = {buff, size, 0};
 80035ae:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80035b2:	2100      	movs	r1, #0
 80035b4:	9103      	str	r1, [sp, #12]
  vlc_print(&_put_c_buffer_cb, &buffer, fmt, vlist);
 80035b6:	4804      	ldr	r0, [pc, #16]	; (80035c8 <lc_vsnprint+0x1c>)
 80035b8:	a901      	add	r1, sp, #4
 80035ba:	f001 fa2f 	bl	8004a1c <vlc_print>
  return buffer.pos - 1;
}
 80035be:	9803      	ldr	r0, [sp, #12]
 80035c0:	3801      	subs	r0, #1
 80035c2:	b005      	add	sp, #20
 80035c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80035c8:	0800348d 	.word	0x0800348d

080035cc <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 80035cc:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 80035ce:	4d11      	ldr	r5, [pc, #68]	; (8003614 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 80035d0:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 80035d2:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 80035d4:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 80035d8:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 80035dc:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 80035e0:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 80035e2:	f006 faaf 	bl	8009b44 <malloc>

  /* remember size */
  if (ptr) {
 80035e6:	b1a0      	cbz	r0, 8003612 <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 80035e8:	1903      	adds	r3, r0, r4
 80035ea:	4a0b      	ldr	r2, [pc, #44]	; (8003618 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 80035ec:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 80035ee:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 80035f0:	682b      	ldr	r3, [r5, #0]
 80035f2:	07db      	lsls	r3, r3, #31
 80035f4:	d50c      	bpl.n	8003610 <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 80035f6:	68eb      	ldr	r3, [r5, #12]
 80035f8:	3301      	adds	r3, #1
 80035fa:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 80035fc:	686b      	ldr	r3, [r5, #4]
 80035fe:	4423      	add	r3, r4
 8003600:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 8003602:	69ab      	ldr	r3, [r5, #24]
 8003604:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 8003606:	696b      	ldr	r3, [r5, #20]
    io_malloc.used += bytes;
 8003608:	61ac      	str	r4, [r5, #24]
    if (io_malloc.used > io_malloc.max) {
 800360a:	429c      	cmp	r4, r3
      io_malloc.max = io_malloc.used;
 800360c:	bf88      	it	hi
 800360e:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 8003610:	3004      	adds	r0, #4
}
 8003612:	bd38      	pop	{r3, r4, r5, pc}
 8003614:	20001474 	.word	0x20001474
 8003618:	efdcba98 	.word	0xefdcba98

0800361c <__wrap_free>:
void __wrap_free(void *ptr)
{
  uint8_t* p;
  uint32_t bytes;

  io_malloc.cfg |= 1 << 2;
 800361c:	4b11      	ldr	r3, [pc, #68]	; (8003664 <__wrap_free+0x48>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	f042 0204 	orr.w	r2, r2, #4
{
 8003624:	b430      	push	{r4, r5}
  io_malloc.cfg |= 1 << 2;
 8003626:	601a      	str	r2, [r3, #0]

  if (!ptr)
 8003628:	4602      	mov	r2, r0
 800362a:	b1c0      	cbz	r0, 800365e <__wrap_free+0x42>
    return;

  p = (uint8_t*)ptr - 4;
  bytes = *((uint32_t*)p);
 800362c:	f852 1c04 	ldr.w	r1, [r2, #-4]

  if (*((uint32_t*)(p + 4 + bytes)) == MAGIC_MALLOC_NUMBER) {
 8003630:	4c0d      	ldr	r4, [pc, #52]	; (8003668 <__wrap_free+0x4c>)
 8003632:	5855      	ldr	r5, [r2, r1]
 8003634:	42a5      	cmp	r5, r4
    *((uint32_t*)(p + 4 + bytes)) = 0;
 8003636:	bf04      	itt	eq
 8003638:	2400      	moveq	r4, #0
 800363a:	5054      	streq	r4, [r2, r1]
  }

  if (io_malloc.cfg & 1UL) {
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	07d2      	lsls	r2, r2, #31
  p = (uint8_t*)ptr - 4;
 8003640:	f1a0 0004 	sub.w	r0, r0, #4
  if (io_malloc.cfg & 1UL) {
 8003644:	d508      	bpl.n	8003658 <__wrap_free+0x3c>
    io_malloc.free_req++;
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	3201      	adds	r2, #1
 800364a:	611a      	str	r2, [r3, #16]
    io_malloc.free += bytes;
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	440a      	add	r2, r1
 8003650:	609a      	str	r2, [r3, #8]
    io_malloc.used -= bytes;
 8003652:	699a      	ldr	r2, [r3, #24]
 8003654:	1a52      	subs	r2, r2, r1
 8003656:	619a      	str	r2, [r3, #24]
    if (io_malloc.f_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.f_idx = 0;
#endif
  }
  __real_free(p);
}
 8003658:	bc30      	pop	{r4, r5}
  __real_free(p);
 800365a:	f006 ba7b 	b.w	8009b54 <free>
}
 800365e:	bc30      	pop	{r4, r5}
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	20001474 	.word	0x20001474
 8003668:	efdcba98 	.word	0xefdcba98

0800366c <stackMonInit>:
#endif

struct io_stack io_stack;

void stackMonInit(uint32_t ctrl, uint32_t cstack, uint32_t msize)
{
 800366c:	b538      	push	{r3, r4, r5, lr}
  memset(&io_stack, 0, sizeof(struct io_stack));
 800366e:	4c11      	ldr	r4, [pc, #68]	; (80036b4 <stackMonInit+0x48>)
  /* Reading ARM Core registers */
  io_stack.ctrl = ctrl;
  io_stack.cstack = cstack;

#if defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  io_stack.estack = (uint32_t)_estack;
 8003670:	4b11      	ldr	r3, [pc, #68]	; (80036b8 <stackMonInit+0x4c>)
 8003672:	6123      	str	r3, [r4, #16]
  io_stack.bstack = io_stack.estack - msize;
 8003674:	1a9b      	subs	r3, r3, r2
  memset(&io_stack, 0, sizeof(struct io_stack));
 8003676:	2500      	movs	r5, #0
  io_stack.bstack = io_stack.estack - msize;
 8003678:	61e3      	str	r3, [r4, #28]
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  (void)msize;
#endif

  /* Check that MSP is the active stack */
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 800367a:	0783      	lsls	r3, r0, #30
  memset(&io_stack, 0, sizeof(struct io_stack));
 800367c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003680:	60e5      	str	r5, [r4, #12]
  io_stack.ctrl = ctrl;
 8003682:	6020      	str	r0, [r4, #0]
  io_stack.cstack = cstack;
 8003684:	61a1      	str	r1, [r4, #24]
  io_stack.mstack_size = msize;
 8003686:	6162      	str	r2, [r4, #20]
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 8003688:	d511      	bpl.n	80036ae <stackMonInit+0x42>
    LC_PRINT("E: MSP is not the active stack (stack monitoring is disabled)\r\n");
 800368a:	480c      	ldr	r0, [pc, #48]	; (80036bc <stackMonInit+0x50>)
 800368c:	f7ff ff7c 	bl	8003588 <lc_print>
    io_stack.stack_mon = false;
  } else
    io_stack.stack_mon = true;

  /* Calculating used stack before test */
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 8003690:	6921      	ldr	r1, [r4, #16]
 8003692:	69a3      	ldr	r3, [r4, #24]
    io_stack.stack_mon = false;
 8003694:	7125      	strb	r5, [r4, #4]
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 8003696:	1ac9      	subs	r1, r1, r3
 8003698:	60e1      	str	r1, [r4, #12]

  if ((io_stack.stack_mon) && (io_stack.ustack_size > io_stack.mstack_size)) {
 800369a:	b13d      	cbz	r5, 80036ac <stackMonInit+0x40>
 800369c:	6962      	ldr	r2, [r4, #20]
 800369e:	4291      	cmp	r1, r2
 80036a0:	d904      	bls.n	80036ac <stackMonInit+0x40>
    LC_PRINT("E: !stack overflow detected %d > %d\r\n", (int)io_stack.ustack_size,
 80036a2:	4807      	ldr	r0, [pc, #28]	; (80036c0 <stackMonInit+0x54>)
 80036a4:	f7ff ff70 	bl	8003588 <lc_print>
        (int)io_stack.mstack_size);
    io_stack.stack_mon = false;
 80036a8:	2300      	movs	r3, #0
 80036aa:	7123      	strb	r3, [r4, #4]
  }
}
 80036ac:	bd38      	pop	{r3, r4, r5, pc}
 80036ae:	2501      	movs	r5, #1
 80036b0:	e7ee      	b.n	8003690 <stackMonInit+0x24>
 80036b2:	bf00      	nop
 80036b4:	20001490 	.word	0x20001490
 80036b8:	20018000 	.word	0x20018000
 80036bc:	0800ca7d 	.word	0x0800ca7d
 80036c0:	0800cabd 	.word	0x0800cabd

080036c4 <dwtCyclesToTime>:
 */

struct cyclesCount cyclesCount;

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 80036c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036c8:	4604      	mov	r4, r0
 80036ca:	468a      	mov	sl, r1
  if (!t)
 80036cc:	4617      	mov	r7, r2
 80036ce:	b382      	cbz	r2, 8003732 <dwtCyclesToTime+0x6e>
    return -1;
  uint32_t fcpu = port_hal_get_cpu_freq();
 80036d0:	f7fe fbf8 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
  uint64_t s  = clks / fcpu;
 80036d4:	2300      	movs	r3, #0
  uint32_t fcpu = port_hal_get_cpu_freq();
 80036d6:	4602      	mov	r2, r0
  uint64_t s  = clks / fcpu;
 80036d8:	9001      	str	r0, [sp, #4]
 80036da:	4651      	mov	r1, sl
 80036dc:	4620      	mov	r0, r4
 80036de:	f7fd fb71 	bl	8000dc4 <__aeabi_uldivmod>
  uint64_t ms = (clks * 1000) / fcpu;
 80036e2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  uint64_t s  = clks / fcpu;
 80036e6:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 80036e8:	fba4 0106 	umull	r0, r1, r4, r6
 80036ec:	9a01      	ldr	r2, [sp, #4]
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 80036ee:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8003738 <dwtCyclesToTime+0x74>
  uint64_t ms = (clks * 1000) / fcpu;
 80036f2:	2300      	movs	r3, #0
 80036f4:	fb06 110a 	mla	r1, r6, sl, r1
 80036f8:	f7fd fb64 	bl	8000dc4 <__aeabi_uldivmod>
  ms -= (s * 1000);
 80036fc:	fbab 3106 	umull	r3, r1, fp, r6
 8003700:	1ac5      	subs	r5, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003702:	fba4 0109 	umull	r0, r1, r4, r9
 8003706:	9a01      	ldr	r2, [sp, #4]
 8003708:	fb09 110a 	mla	r1, r9, sl, r1
 800370c:	2300      	movs	r3, #0
 800370e:	f7fd fb59 	bl	8000dc4 <__aeabi_uldivmod>
  us -= (ms * 1000 + s * 1000000);
  t->fcpu = fcpu;
 8003712:	9a01      	ldr	r2, [sp, #4]
  t->s = s;
  t->ms = ms;
 8003714:	60bd      	str	r5, [r7, #8]
  us -= (ms * 1000 + s * 1000000);
 8003716:	fbab 8909 	umull	r8, r9, fp, r9
 800371a:	eba0 0008 	sub.w	r0, r0, r8
 800371e:	fba5 5606 	umull	r5, r6, r5, r6
  t->s = s;
 8003722:	e9c7 2b00 	strd	r2, fp, [r7]
  us -= (ms * 1000 + s * 1000000);
 8003726:	1b40      	subs	r0, r0, r5
  t->us = us;
 8003728:	60f8      	str	r0, [r7, #12]
  return 0;
 800372a:	2000      	movs	r0, #0
}
 800372c:	b003      	add	sp, #12
 800372e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 8003732:	f04f 30ff 	mov.w	r0, #4294967295
 8003736:	e7f9      	b.n	800372c <dwtCyclesToTime+0x68>
 8003738:	000f4240 	.word	0x000f4240

0800373c <dwtCyclesToFloatMs>:

float dwtCyclesToFloatMs(uint64_t clks)
{
 800373c:	b510      	push	{r4, lr}
 800373e:	ed2d 8b02 	vpush	{d8}
 8003742:	b082      	sub	sp, #8
 8003744:	4604      	mov	r4, r0
 8003746:	9101      	str	r1, [sp, #4]
  float res;
  float fcpu = (float)port_hal_get_cpu_freq();
 8003748:	f7fe fbbc 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
  res = ((float)clks * (float)1000.0) / fcpu;
 800374c:	9901      	ldr	r1, [sp, #4]
  float fcpu = (float)port_hal_get_cpu_freq();
 800374e:	ee08 0a10 	vmov	s16, r0
  res = ((float)clks * (float)1000.0) / fcpu;
 8003752:	4620      	mov	r0, r4
 8003754:	f7fd faf0 	bl	8000d38 <__aeabi_ul2f>
 8003758:	eddf 7a06 	vldr	s15, [pc, #24]	; 8003774 <dwtCyclesToFloatMs+0x38>
 800375c:	ee07 0a10 	vmov	s14, r0
  float fcpu = (float)port_hal_get_cpu_freq();
 8003760:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  res = ((float)clks * (float)1000.0) / fcpu;
 8003764:	ee27 0a27 	vmul.f32	s0, s14, s15
  return res;
}
 8003768:	ee80 0a08 	vdiv.f32	s0, s0, s16
 800376c:	b002      	add	sp, #8
 800376e:	ecbd 8b02 	vpop	{d8}
 8003772:	bd10      	pop	{r4, pc}
 8003774:	447a0000 	.word	0x447a0000

08003778 <getFlashCacheConf>:

#if defined(STM32L4) || defined(STM32F4)

  mconf |= MCONF_L4_F4;

  __I uint32_t acr = FLASH->ACR ;
 8003778:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <getFlashCacheConf+0x38>)
{
 800377a:	b082      	sub	sp, #8
  __I uint32_t acr = FLASH->ACR ;
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	9301      	str	r3, [sp, #4]

  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8003780:	9801      	ldr	r0, [sp, #4]

  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8003782:	9b01      	ldr	r3, [sp, #4]
 8003784:	05d9      	lsls	r1, r3, #23
    mconf |= MCONF_ART_DCACHE;
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 8003786:	9b01      	ldr	r3, [sp, #4]
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8003788:	f000 0007 	and.w	r0, r0, #7
    mconf |= MCONF_ART_DCACHE;
 800378c:	bf4c      	ite	mi
 800378e:	f040 2001 	orrmi.w	r0, r0, #16777472	; 0x1000100
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8003792:	f040 7080 	orrpl.w	r0, r0, #16777216	; 0x1000000
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 8003796:	059a      	lsls	r2, r3, #22
    mconf |= MCONF_ART_ICACHE;
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8003798:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_ART_ICACHE;
 800379a:	bf48      	it	mi
 800379c:	f440 7000 	orrmi.w	r0, r0, #512	; 0x200
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 80037a0:	055b      	lsls	r3, r3, #21
    mconf |= MCONF_ART_PREFETCH;
 80037a2:	bf48      	it	mi
 80037a4:	f440 6080 	orrmi.w	r0, r0, #1024	; 0x400
    mconf |= MCONF_CORE_DCACHE;

#endif

  return mconf;
}
 80037a8:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80037ac:	b002      	add	sp, #8
 80037ae:	4770      	bx	lr
 80037b0:	40022000 	.word	0x40022000

080037b4 <getSysConf.part.0>:
void getSysConf(struct mcu_conf *conf)
 80037b4:	b510      	push	{r4, lr}
 80037b6:	4604      	mov	r4, r0
  conf->sclk = port_hal_get_cpu_freq();
 80037b8:	f7fe fb84 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 80037bc:	6020      	str	r0, [r4, #0]
  conf->hclk = port_hal_get_sys_freq();
 80037be:	f7fe fb81 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 80037c2:	6060      	str	r0, [r4, #4]
  conf->conf = getFlashCacheConf();
 80037c4:	f7ff ffd8 	bl	8003778 <getFlashCacheConf>
 80037c8:	60a0      	str	r0, [r4, #8]
  conf->devid = port_hal_get_dev_id();
 80037ca:	f7fd fe45 	bl	8001458 <HAL_GetDEVID>
 80037ce:	60e0      	str	r0, [r4, #12]
  conf->revid = port_hal_get_rev_id();
 80037d0:	f7fd fe3c 	bl	800144c <HAL_GetREVID>
 80037d4:	6120      	str	r0, [r4, #16]
}
 80037d6:	bd10      	pop	{r4, pc}

080037d8 <getSysConf>:
  if (!conf)
 80037d8:	b108      	cbz	r0, 80037de <getSysConf+0x6>
 80037da:	f7ff bfeb 	b.w	80037b4 <getSysConf.part.0>
}
 80037de:	4770      	bx	lr

080037e0 <systemSettingLog>:

void systemSettingLog(void)
{
 80037e0:	b530      	push	{r4, r5, lr}
  LC_PRINT("Compiled with GHS-ARM Compiler %d\r\n", __GHS_VERSION_NUMBER);
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  LC_PRINT("Compiled with HIGHTEC Clang %d.%d.%d\r\n", __clang_major__, __clang_minor__,
      __clang_patchlevel__);
#elif defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 80037e2:	2301      	movs	r3, #1
{
 80037e4:	b089      	sub	sp, #36	; 0x24
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 80037e6:	2203      	movs	r2, #3
 80037e8:	210b      	movs	r1, #11
 80037ea:	4838      	ldr	r0, [pc, #224]	; (80038cc <systemSettingLog+0xec>)
 80037ec:	f7ff fecc 	bl	8003588 <lc_print>
  if (!conf)
 80037f0:	a803      	add	r0, sp, #12
 80037f2:	f7ff ffdf 	bl	80037b4 <getSysConf.part.0>


  /* Display Device configuration */
  getSysConf(&sys_conf);

  LC_PRINT(DEVICE_FAMILY " device configuration...\r\n");
 80037f6:	4836      	ldr	r0, [pc, #216]	; (80038d0 <systemSettingLog+0xf0>)
 80037f8:	f7ff fec6 	bl	8003588 <lc_print>

  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80037fc:	9906      	ldr	r1, [sp, #24]
  switch (dev_id) {
 80037fe:	f240 4262 	movw	r2, #1122	; 0x462
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003802:	b28b      	uxth	r3, r1
  switch (dev_id) {
 8003804:	4293      	cmp	r3, r2
 8003806:	d056      	beq.n	80038b6 <systemSettingLog+0xd6>
 8003808:	d848      	bhi.n	800389c <systemSettingLog+0xbc>
 800380a:	f240 4235 	movw	r2, #1077	; 0x435
 800380e:	4293      	cmp	r3, r2
 8003810:	d053      	beq.n	80038ba <systemSettingLog+0xda>
 8003812:	f240 4261 	movw	r2, #1121	; 0x461
 8003816:	4293      	cmp	r3, r2
 8003818:	d051      	beq.n	80038be <systemSettingLog+0xde>
  case 0x415: str = "STM32L4x6xx"; break;  /* Orca_1M */
 800381a:	4a2e      	ldr	r2, [pc, #184]	; (80038d4 <systemSettingLog+0xf4>)
 800381c:	f240 4415 	movw	r4, #1045	; 0x415
 8003820:	f1a2 0022 	sub.w	r0, r2, #34	; 0x22
  case 0x464: str = "STM32L4x2"; break;    /* Orca_128K */
 8003824:	42a3      	cmp	r3, r4
 8003826:	bf08      	it	eq
 8003828:	4602      	moveq	r2, r0
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 800382a:	9b07      	ldr	r3, [sp, #28]
 800382c:	482a      	ldr	r0, [pc, #168]	; (80038d8 <systemSettingLog+0xf8>)
#else
  LC_PRINT(" Core Arch.   : M%d - %s\r\n", __CORTEX_M, "no FPU");
#endif

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 800382e:	4c2b      	ldr	r4, [pc, #172]	; (80038dc <systemSettingLog+0xfc>)
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003830:	f7ff feaa 	bl	8003588 <lc_print>
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 8003834:	4b2a      	ldr	r3, [pc, #168]	; (80038e0 <systemSettingLog+0x100>)
 8003836:	2104      	movs	r1, #4
 8003838:	1d5a      	adds	r2, r3, #5
 800383a:	f103 000a 	add.w	r0, r3, #10
 800383e:	f7ff fea3 	bl	8003588 <lc_print>
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
 8003842:	f7fd fdff 	bl	8001444 <HAL_GetHalVersion>
 8003846:	4601      	mov	r1, r0
 8003848:	4826      	ldr	r0, [pc, #152]	; (80038e4 <systemSettingLog+0x104>)
 800384a:	f7ff fe9d 	bl	8003588 <lc_print>
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 800384e:	9903      	ldr	r1, [sp, #12]
 8003850:	4825      	ldr	r0, [pc, #148]	; (80038e8 <systemSettingLog+0x108>)
 8003852:	fb91 f1f4 	sdiv	r1, r1, r4
 8003856:	f7ff fe97 	bl	8003588 <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 800385a:	9904      	ldr	r1, [sp, #16]
 800385c:	4823      	ldr	r0, [pc, #140]	; (80038ec <systemSettingLog+0x10c>)
 800385e:	fb91 f1f4 	sdiv	r1, r1, r4
 8003862:	f7ff fe91 	bl	8003588 <lc_print>
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif
#endif

#if defined(STM32F4) || defined(STM32L4)
  uint32_t acr = FLASH->ACR;
 8003866:	4b22      	ldr	r3, [pc, #136]	; (80038f0 <systemSettingLog+0x110>)
    return "False";
 8003868:	4822      	ldr	r0, [pc, #136]	; (80038f4 <systemSettingLog+0x114>)
  uint32_t acr = FLASH->ACR;
 800386a:	6819      	ldr	r1, [r3, #0]
    return "False";
 800386c:	1d44      	adds	r4, r0, #5
 800386e:	f411 7f80 	tst.w	r1, #256	; 0x100
 8003872:	bf14      	ite	ne
 8003874:	4602      	movne	r2, r0
 8003876:	4622      	moveq	r2, r4
 8003878:	f411 7f00 	tst.w	r1, #512	; 0x200
 800387c:	bf14      	ite	ne
 800387e:	4603      	movne	r3, r0
 8003880:	4623      	moveq	r3, r4
 8003882:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8003886:	bf18      	it	ne
 8003888:	4604      	movne	r4, r0
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 800388a:	f001 0507 	and.w	r5, r1, #7
 800388e:	e9cd 4500 	strd	r4, r5, [sp]
 8003892:	30ec      	adds	r0, #236	; 0xec
 8003894:	f7ff fe78 	bl	8003588 <lc_print>
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
      bitToStr(ccr & SCB_CCR_IC_Msk),
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif

}
 8003898:	b009      	add	sp, #36	; 0x24
 800389a:	bd30      	pop	{r4, r5, pc}
  switch (dev_id) {
 800389c:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 80038a0:	d00f      	beq.n	80038c2 <systemSettingLog+0xe2>
 80038a2:	f240 4271 	movw	r2, #1137	; 0x471
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d00d      	beq.n	80038c6 <systemSettingLog+0xe6>
  case 0x464: str = "STM32L4x2"; break;    /* Orca_128K */
 80038aa:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <systemSettingLog+0xf4>)
 80038ac:	f240 4464 	movw	r4, #1124	; 0x464
 80038b0:	f1a2 0038 	sub.w	r0, r2, #56	; 0x38
 80038b4:	e7b6      	b.n	8003824 <systemSettingLog+0x44>
  switch (dev_id) {
 80038b6:	4a10      	ldr	r2, [pc, #64]	; (80038f8 <systemSettingLog+0x118>)
 80038b8:	e7b7      	b.n	800382a <systemSettingLog+0x4a>
  case 0x435: str = "STM32L43xxx"; break;  /* Little_Orca_256K */
 80038ba:	4a10      	ldr	r2, [pc, #64]	; (80038fc <systemSettingLog+0x11c>)
 80038bc:	e7b5      	b.n	800382a <systemSettingLog+0x4a>
  case 0x461: str = "STM32L49xxx"; break;  /* BigOrca_1M */
 80038be:	4a10      	ldr	r2, [pc, #64]	; (8003900 <systemSettingLog+0x120>)
 80038c0:	e7b3      	b.n	800382a <systemSettingLog+0x4a>
  case 0x470: str = "STM32L4R/S"; break;   /* Orca_plus_2MB */
 80038c2:	4a10      	ldr	r2, [pc, #64]	; (8003904 <systemSettingLog+0x124>)
 80038c4:	e7b1      	b.n	800382a <systemSettingLog+0x4a>
  case 0x471: str = "STM32L4P/Q"; break;   /* Orca_plus_1MB */
 80038c6:	4a10      	ldr	r2, [pc, #64]	; (8003908 <systemSettingLog+0x128>)
 80038c8:	e7af      	b.n	800382a <systemSettingLog+0x4a>
 80038ca:	bf00      	nop
 80038cc:	0800cb46 	.word	0x0800cb46
 80038d0:	0800cb63 	.word	0x0800cb63
 80038d4:	0800cb33 	.word	0x0800cb33
 80038d8:	0800cb83 	.word	0x0800cb83
 80038dc:	000f4240 	.word	0x000f4240
 80038e0:	0800cbb4 	.word	0x0800cbb4
 80038e4:	0800cbdc 	.word	0x0800cbdc
 80038e8:	0800cbf5 	.word	0x0800cbf5
 80038ec:	0800cc0e 	.word	0x0800cc0e
 80038f0:	40022000 	.word	0x40022000
 80038f4:	0800cb3b 	.word	0x0800cb3b
 80038f8:	0800caef 	.word	0x0800caef
 80038fc:	0800cb05 	.word	0x0800cb05
 8003900:	0800cae3 	.word	0x0800cae3
 8003904:	0800cb28 	.word	0x0800cb28
 8003908:	0800cb1d 	.word	0x0800cb1d

0800390c <_mon_alloc_reset>:

#include <stdlib.h>

#pragma GCC push_options
#pragma GCC optimize ("O0")
static inline void _mon_alloc_reset(void) {
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
    memset((void *)&io_malloc, 0, sizeof(struct io_malloc));
 8003910:	221c      	movs	r2, #28
 8003912:	2100      	movs	r1, #0
 8003914:	4805      	ldr	r0, [pc, #20]	; (800392c <_mon_alloc_reset+0x20>)
 8003916:	f006 ff3c 	bl	800a792 <memset>
    /* force a call of wrap functions */\
    free(malloc(10));
 800391a:	200a      	movs	r0, #10
 800391c:	f7ff fe56 	bl	80035cc <__wrap_malloc>
 8003920:	4603      	mov	r3, r0
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff fe7a 	bl	800361c <__wrap_free>
}
 8003928:	bf00      	nop
 800392a:	bd80      	pop	{r7, pc}
 800392c:	20001474 	.word	0x20001474

08003930 <aiPbCmdSysInfo>:
 * Specific test APP commands
 * -----------------------------------------------------------------------------
 */

void aiPbCmdSysInfo(const reqMsg *req, respMsg *resp, void *param)
{
 8003930:	b530      	push	{r4, r5, lr}
 8003932:	b089      	sub	sp, #36	; 0x24
 8003934:	460c      	mov	r4, r1
 8003936:	4605      	mov	r5, r0
  UNUSED(param);
  struct mcu_conf conf;
  struct _encode_uint32 array_u32;

  getSysConf(&conf);
 8003938:	a803      	add	r0, sp, #12
 800393a:	f7ff ff4d 	bl	80037d8 <getSysConf>

  resp->which_payload = respMsg_sinfo_tag;
 800393e:	230b      	movs	r3, #11
 8003940:	80e3      	strh	r3, [r4, #6]

  resp->payload.sinfo.devid = conf.devid;
 8003942:	9b06      	ldr	r3, [sp, #24]
 8003944:	60a3      	str	r3, [r4, #8]
  resp->payload.sinfo.sclock = conf.sclk;
 8003946:	9b03      	ldr	r3, [sp, #12]
 8003948:	60e3      	str	r3, [r4, #12]
  resp->payload.sinfo.hclock = conf.hclk;
 800394a:	9b04      	ldr	r3, [sp, #16]
 800394c:	6123      	str	r3, [r4, #16]
  resp->payload.sinfo.cache = conf.conf;
 800394e:	9b05      	ldr	r3, [sp, #20]
 8003950:	6163      	str	r3, [r4, #20]
#if defined(HAS_EXTRA_CONF) && HAS_EXTRA_CONF > 0
  array_u32.size = HAS_EXTRA_CONF;
  array_u32.offset = 4;
  array_u32.data = &conf.extra[0];
#else
  array_u32.size = 0;
 8003952:	2200      	movs	r2, #0
  array_u32.offset = 4;
 8003954:	2304      	movs	r3, #4
  array_u32.data = NULL;
 8003956:	e9cd 2301 	strd	r2, r3, [sp, #4]
#endif

  resp->payload.sinfo.extra.funcs.encode = encode_uint32;
 800395a:	4b05      	ldr	r3, [pc, #20]	; (8003970 <aiPbCmdSysInfo+0x40>)
 800395c:	61a3      	str	r3, [r4, #24]
  resp->payload.sinfo.extra.arg = &array_u32;
 800395e:	f8c4 d01c 	str.w	sp, [r4, #28]

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8003962:	4621      	mov	r1, r4
 8003964:	4628      	mov	r0, r5
  array_u32.size = 0;
 8003966:	9200      	str	r2, [sp, #0]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8003968:	f7ff fa9e 	bl	8002ea8 <aiPbMgrSendResp>
}
 800396c:	b009      	add	sp, #36	; 0x24
 800396e:	bd30      	pop	{r4, r5, pc}
 8003970:	08002ccf 	.word	0x08002ccf

08003974 <encode_mempool_to_tensor_desc>:
{
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	461e      	mov	r6, r3
  array_u32->size = 1;
 8003978:	2301      	movs	r3, #1
 800397a:	6033      	str	r3, [r6, #0]
  if (info->name)
 800397c:	6808      	ldr	r0, [r1, #0]
  array_u32->data = (void *)&info->size;
 800397e:	1d0b      	adds	r3, r1, #4
 8003980:	6073      	str	r3, [r6, #4]
  array_u32->offset = 4;
 8003982:	2304      	movs	r3, #4
{
 8003984:	460d      	mov	r5, r1
 8003986:	4614      	mov	r4, r2
  array_u32->offset = 4;
 8003988:	60b3      	str	r3, [r6, #8]
  if (info->name)
 800398a:	b1a0      	cbz	r0, 80039b6 <encode_mempool_to_tensor_desc+0x42>
    aiPbStrCopy(info->name, &msg->name[0],
 800398c:	2240      	movs	r2, #64	; 0x40
 800398e:	4621      	mov	r1, r4
 8003990:	f7ff fa30 	bl	8002df4 <aiPbStrCopy>
  msg->format = AI_BUFFER_FORMAT_U8;
 8003994:	4b09      	ldr	r3, [pc, #36]	; (80039bc <encode_mempool_to_tensor_desc+0x48>)
 8003996:	6423      	str	r3, [r4, #64]	; 0x40
  msg->size = info->size;
 8003998:	686b      	ldr	r3, [r5, #4]
 800399a:	6463      	str	r3, [r4, #68]	; 0x44
  msg->n_dims = EnumShapeFmt_F_SHAPE_FMT_BCWH << EnumShapeFmt_F_SHAPE_FMT_POS | array_u32->size;
 800399c:	6833      	ldr	r3, [r6, #0]
 800399e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039a2:	64a3      	str	r3, [r4, #72]	; 0x48
  msg->scale = 0.0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	6563      	str	r3, [r4, #84]	; 0x54
  msg->zeropoint = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	65a3      	str	r3, [r4, #88]	; 0x58
  msg->addr = (uint32_t)info->addr;
 80039ac:	68ab      	ldr	r3, [r5, #8]
 80039ae:	65e3      	str	r3, [r4, #92]	; 0x5c
  msg->flags = EnumTensorFlag_TENSOR_FLAG_MEMPOOL;
 80039b0:	2308      	movs	r3, #8
 80039b2:	6623      	str	r3, [r4, #96]	; 0x60
}
 80039b4:	bd70      	pop	{r4, r5, r6, pc}
    msg->name[0] = 0;
 80039b6:	7010      	strb	r0, [r2, #0]
 80039b8:	e7ec      	b.n	8003994 <encode_mempool_to_tensor_desc+0x20>
 80039ba:	bf00      	nop
 80039bc:	00040440 	.word	0x00040440

080039c0 <fill_tensor_desc_msg>:
{
 80039c0:	b570      	push	{r4, r5, r6, lr}
 80039c2:	460c      	mov	r4, r1
  array_u32->size = buff->shape.size;
 80039c4:	6941      	ldr	r1, [r0, #20]
  array_u32->data = (uint32_t *)buff->shape.data;
 80039c6:	6986      	ldr	r6, [r0, #24]
  array_u32->size = buff->shape.size;
 80039c8:	f3c1 2117 	ubfx	r1, r1, #8, #24
  array_u32->offset = sizeof(buff->shape.data[0]);
 80039cc:	f04f 0c04 	mov.w	ip, #4
{
 80039d0:	ed2d 8b02 	vpush	{d8}
  array_u32->offset = sizeof(buff->shape.data[0]);
 80039d4:	f8c2 c008 	str.w	ip, [r2, #8]
  array_u32->size = buff->shape.size;
 80039d8:	6011      	str	r1, [r2, #0]
  array_u32->data = (uint32_t *)buff->shape.data;
 80039da:	6056      	str	r6, [r2, #4]
  msg->name[0] = 0;
 80039dc:	2200      	movs	r2, #0
 80039de:	7022      	strb	r2, [r4, #0]
  msg->format = (uint32_t)buff->format;
 80039e0:	6802      	ldr	r2, [r0, #0]
  msg->flags = flags;
 80039e2:	6623      	str	r3, [r4, #96]	; 0x60
  if (buff->shape.type == AI_SHAPE_BCWH)
 80039e4:	7d03      	ldrb	r3, [r0, #20]
  msg->format = (uint32_t)buff->format;
 80039e6:	6422      	str	r2, [r4, #64]	; 0x40
  if (buff->shape.type == AI_SHAPE_BCWH)
 80039e8:	f103 3cff 	add.w	ip, r3, #4294967295
 80039ec:	f1dc 0300 	rsbs	r3, ip, #0
 80039f0:	eb43 030c 	adc.w	r3, r3, ip
  n_dims = shape_fmt << EnumShapeFmt_F_SHAPE_FMT_POS | buff->shape.size;
 80039f4:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
  msg->n_dims = _shape_to_n_dims(buff);
 80039f8:	64a1      	str	r1, [r4, #72]	; 0x48
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 80039fa:	2101      	movs	r1, #1
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 80039fc:	6836      	ldr	r6, [r6, #0]
{
 80039fe:	4605      	mov	r5, r0
 8003a00:	eeb0 8a40 	vmov.f32	s16, s0
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 8003a04:	f002 fc7e 	bl	8006304 <ai_buffer_get_size>
  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(buff);
 8003a08:	68ab      	ldr	r3, [r5, #8]
  msg->zeropoint = zero_point;
 8003a0a:	9a06      	ldr	r2, [sp, #24]
  msg->scale = scale;
 8003a0c:	ed84 8a15 	vstr	s16, [r4, #84]	; 0x54
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 8003a10:	4370      	muls	r0, r6
  msg->size = _get_buffer_element_size(buff);
 8003a12:	6460      	str	r0, [r4, #68]	; 0x44
  msg->zeropoint = zero_point;
 8003a14:	65a2      	str	r2, [r4, #88]	; 0x58
  if (AI_BUFFER_META_INFO_INTQ(meta_info)) {
 8003a16:	b1a3      	cbz	r3, 8003a42 <fill_tensor_desc_msg+0x82>
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	07d0      	lsls	r0, r2, #31
 8003a1c:	d511      	bpl.n	8003a42 <fill_tensor_desc_msg+0x82>
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	b17b      	cbz	r3, 8003a42 <fill_tensor_desc_msg+0x82>
    msg->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, 0);
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	b192      	cbz	r2, 8003a4c <fill_tensor_desc_msg+0x8c>
 8003a26:	8859      	ldrh	r1, [r3, #2]
 8003a28:	b181      	cbz	r1, 8003a4c <fill_tensor_desc_msg+0x8c>
 8003a2a:	6811      	ldr	r1, [r2, #0]
 8003a2c:	6809      	ldr	r1, [r1, #0]
 8003a2e:	6561      	str	r1, [r4, #84]	; 0x54
    msg->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, 0);
 8003a30:	8819      	ldrh	r1, [r3, #0]
 8003a32:	0789      	lsls	r1, r1, #30
 8003a34:	d50c      	bpl.n	8003a50 <fill_tensor_desc_msg+0x90>
 8003a36:	b19a      	cbz	r2, 8003a60 <fill_tensor_desc_msg+0xa0>
 8003a38:	885b      	ldrh	r3, [r3, #2]
 8003a3a:	b10b      	cbz	r3, 8003a40 <fill_tensor_desc_msg+0x80>
 8003a3c:	6853      	ldr	r3, [r2, #4]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8003a42:	ecbd 8b02 	vpop	{d8}
  msg->addr = (uint32_t)buff->data;
 8003a46:	686b      	ldr	r3, [r5, #4]
 8003a48:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8003a4a:	bd70      	pop	{r4, r5, r6, pc}
    msg->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, 0);
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	e7ee      	b.n	8003a2e <fill_tensor_desc_msg+0x6e>
    msg->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, 0);
 8003a50:	b132      	cbz	r2, 8003a60 <fill_tensor_desc_msg+0xa0>
 8003a52:	885b      	ldrh	r3, [r3, #2]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f3      	beq.n	8003a40 <fill_tensor_desc_msg+0x80>
 8003a58:	6853      	ldr	r3, [r2, #4]
 8003a5a:	f993 3000 	ldrsb.w	r3, [r3]
 8003a5e:	e7ef      	b.n	8003a40 <fill_tensor_desc_msg+0x80>
 8003a60:	4613      	mov	r3, r2
 8003a62:	e7ed      	b.n	8003a40 <fill_tensor_desc_msg+0x80>

08003a64 <encode_ai_buffer_to_tensor_desc>:
{
 8003a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a66:	460c      	mov	r4, r1
 8003a68:	4611      	mov	r1, r2
 8003a6a:	461a      	mov	r2, r3
  fill_tensor_desc_msg(buff, msg, array_u32, info->flags, info->scale, info->zero_point);
 8003a6c:	68e3      	ldr	r3, [r4, #12]
  ai_buffer *buff = &((ai_buffer *)(info->buffer))[index];
 8003a6e:	6825      	ldr	r5, [r4, #0]
  fill_tensor_desc_msg(buff, msg, array_u32, info->flags, info->scale, info->zero_point);
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	ed94 0a02 	vldr	s0, [r4, #8]
 8003a76:	6863      	ldr	r3, [r4, #4]
 8003a78:	241c      	movs	r4, #28
 8003a7a:	fb04 5000 	mla	r0, r4, r0, r5
 8003a7e:	f7ff ff9f 	bl	80039c0 <fill_tensor_desc_msg>
}
 8003a82:	b003      	add	sp, #12
 8003a84:	bd30      	pop	{r4, r5, pc}
	...

08003a88 <cyclesCounterStart>:
  port_dwt_init();
#endif /* !USE_SYSTICK_ONLY */
}

__STATIC_INLINE void cyclesCounterStart(void)
{
 8003a88:	b508      	push	{r3, lr}
#else
#if USE_CORE_CLOCK_ONLY == 1
  port_dwt_reset();
  cyclesCount.dwt_start = port_dwt_get_cycles();
#else
  cyclesCount.tick_start = port_hal_get_tick();
 8003a8a:	f7fd fcc1 	bl	8001410 <HAL_GetTick>
 8003a8e:	4b04      	ldr	r3, [pc, #16]	; (8003aa0 <cyclesCounterStart+0x18>)
  port_dwt_reset();
 8003a90:	4a04      	ldr	r2, [pc, #16]	; (8003aa4 <cyclesCounterStart+0x1c>)
  cyclesCount.tick_start = port_hal_get_tick();
 8003a92:	6098      	str	r0, [r3, #8]
  port_dwt_reset();
 8003a94:	2100      	movs	r1, #0
 8003a96:	6051      	str	r1, [r2, #4]
  cyclesCount.dwt_start = port_dwt_get_cycles();
 8003a98:	6852      	ldr	r2, [r2, #4]
 8003a9a:	605a      	str	r2, [r3, #4]
#endif
#endif
}
 8003a9c:	bd08      	pop	{r3, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20001468 	.word	0x20001468
 8003aa4:	e0001000 	.word	0xe0001000

08003aa8 <cyclesCounterEnd>:

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 8003aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if USE_CORE_CLOCK_ONLY == 1
  return (uint64_t)(port_dwt_get_cycles() - cyclesCount.dwt_start);
#else
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = port_dwt_get_cycles() - cyclesCount.dwt_start;
 8003aaa:	4b10      	ldr	r3, [pc, #64]	; (8003aec <cyclesCounterEnd+0x44>)
 8003aac:	4d10      	ldr	r5, [pc, #64]	; (8003af0 <cyclesCounterEnd+0x48>)
 8003aae:	685c      	ldr	r4, [r3, #4]
 8003ab0:	686b      	ldr	r3, [r5, #4]
 8003ab2:	1ae4      	subs	r4, r4, r3
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	9301      	str	r3, [sp, #4]
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 8003ab8:	f7fd fcaa 	bl	8001410 <HAL_GetTick>
 8003abc:	68aa      	ldr	r2, [r5, #8]
  if (tick_e > cyclesCount.dwt_max) {
 8003abe:	9b01      	ldr	r3, [sp, #4]
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 8003ac0:	1a80      	subs	r0, r0, r2
  if (tick_e > cyclesCount.dwt_max) {
 8003ac2:	682a      	ldr	r2, [r5, #0]
 8003ac4:	4290      	cmp	r0, r2
 8003ac6:	d90c      	bls.n	8003ae2 <cyclesCounterEnd+0x3a>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 8003ac8:	4619      	mov	r1, r3
 8003aca:	f7fd f97b 	bl	8000dc4 <__aeabi_uldivmod>
 8003ace:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad2:	fba0 0303 	umull	r0, r3, r0, r3
 8003ad6:	1900      	adds	r0, r0, r4
 8003ad8:	eba3 0301 	sub.w	r3, r3, r1
 8003adc:	4604      	mov	r4, r0
 8003ade:	f143 0300 	adc.w	r3, r3, #0
  }
  return dwt_e;
#endif
#endif
}
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	b003      	add	sp, #12
 8003ae8:	bd30      	pop	{r4, r5, pc}
 8003aea:	bf00      	nop
 8003aec:	e0001000 	.word	0xe0001000
 8003af0:	20001468 	.word	0x20001468

08003af4 <_get_buffer_size>:
{
 8003af4:	b538      	push	{r3, r4, r5, lr}
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 8003af6:	6983      	ldr	r3, [r0, #24]
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 8003af8:	2101      	movs	r1, #1
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 8003afa:	681d      	ldr	r5, [r3, #0]
{
 8003afc:	4604      	mov	r4, r0
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 8003afe:	f002 fc01 	bl	8006304 <ai_buffer_get_size>
 8003b02:	6821      	ldr	r1, [r4, #0]
 8003b04:	4368      	muls	r0, r5
}
 8003b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 8003b0a:	f002 bc2f 	b.w	800636c <ai_buffer_get_byte_size>
	...

08003b10 <aiExecCtx>:
{
 8003b10:	e92d 4178 	stmdb	sp!, {r3, r4, r5, r6, r8, lr}
 8003b14:	4604      	mov	r4, r0
  if (!nn_name[0]) {
 8003b16:	7800      	ldrb	r0, [r0, #0]
 8003b18:	b938      	cbnz	r0, 8003b2a <aiExecCtx+0x1a>
    if ((pos >= 0) && (pos < AI_MNETWORK_NUMBER) && net_exec_ctx[pos].handle)
 8003b1a:	b921      	cbnz	r1, 8003b26 <aiExecCtx+0x16>
 8003b1c:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <aiExecCtx+0x50>)
 8003b1e:	6818      	ldr	r0, [r3, #0]
      cur = &net_exec_ctx[pos];
 8003b20:	2800      	cmp	r0, #0
 8003b22:	bf18      	it	ne
 8003b24:	4618      	movne	r0, r3
}
 8003b26:	e8bd 8178 	ldmia.w	sp!, {r3, r4, r5, r6, r8, pc}
      if (cur->handle &&
 8003b2a:	4e0d      	ldr	r6, [pc, #52]	; (8003b60 <aiExecCtx+0x50>)
 8003b2c:	6830      	ldr	r0, [r6, #0]
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	d0f9      	beq.n	8003b26 <aiExecCtx+0x16>
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 8003b32:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8003b36:	4640      	mov	r0, r8
 8003b38:	f7fc fb9a 	bl	8000270 <strlen>
 8003b3c:	4605      	mov	r5, r0
 8003b3e:	4620      	mov	r0, r4
 8003b40:	f7fc fb96 	bl	8000270 <strlen>
      if (cur->handle &&
 8003b44:	4285      	cmp	r5, r0
 8003b46:	d109      	bne.n	8003b5c <aiExecCtx+0x4c>
          (strncmp(cur->report.model_name, nn_name,
 8003b48:	462a      	mov	r2, r5
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	4640      	mov	r0, r8
 8003b4e:	f006 fe28 	bl	800a7a2 <strncmp>
      cur = &net_exec_ctx[pos];
 8003b52:	2800      	cmp	r0, #0
 8003b54:	bf0c      	ite	eq
 8003b56:	4630      	moveq	r0, r6
 8003b58:	2000      	movne	r0, #0
 8003b5a:	e7e4      	b.n	8003b26 <aiExecCtx+0x16>
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	e7e2      	b.n	8003b26 <aiExecCtx+0x16>
 8003b60:	20001500 	.word	0x20001500

08003b64 <send_ai_io_tensor.isra.0>:
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 8003b64:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
 8003b68:	b08b      	sub	sp, #44	; 0x2c
 8003b6a:	461d      	mov	r5, r3
 8003b6c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  resp->which_payload = respMsg_tensor_tag;
 8003b70:	2311      	movs	r3, #17
 8003b72:	80cb      	strh	r3, [r1, #6]
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 8003b74:	f10d 0a0c 	add.w	sl, sp, #12
 8003b78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003b7a:	9300      	str	r3, [sp, #0]
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 8003b7c:	460c      	mov	r4, r1
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 8003b7e:	464b      	mov	r3, r9
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 8003b80:	4606      	mov	r6, r0
 8003b82:	4690      	mov	r8, r2
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 8003b84:	3108      	adds	r1, #8
 8003b86:	4652      	mov	r2, sl
 8003b88:	4628      	mov	r0, r5
 8003b8a:	f7ff ff19 	bl	80039c0 <fill_tensor_desc_msg>
  resp->payload.tensor.desc.dims.funcs.encode = encode_uint32;
 8003b8e:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <send_ai_io_tensor.isra.0+0x6c>)
  if (flags & EnumTensorFlag_TENSOR_FLAG_NO_DATA) {
 8003b90:	f419 7f00 	tst.w	r9, #512	; 0x200
  resp->payload.tensor.desc.dims.arg = &array_u32;
 8003b94:	e9c4 3a15 	strd	r3, sl, [r4, #84]	; 0x54
  resp->payload.tensor.data.addr = (uint32_t)buffer->data;
 8003b98:	686b      	ldr	r3, [r5, #4]
 8003b9a:	6763      	str	r3, [r4, #116]	; 0x74
  if (flags & EnumTensorFlag_TENSOR_FLAG_NO_DATA) {
 8003b9c:	d115      	bne.n	8003bca <send_ai_io_tensor.isra.0+0x66>
    resp->payload.tensor.data.size = _get_buffer_size(buffer);
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	f7ff ffa8 	bl	8003af4 <_get_buffer_size>
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 8003ba4:	6f63      	ldr	r3, [r4, #116]	; 0x74
    resp->payload.tensor.data.size = 0;
 8003ba6:	6720      	str	r0, [r4, #112]	; 0x70
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 8003ba8:	2200      	movs	r2, #0
 8003baa:	e9cd 3208 	strd	r3, r2, [sp, #32]
  resp->payload.tensor.data.datas.funcs.encode = &encode_data_cb;
 8003bae:	4b09      	ldr	r3, [pc, #36]	; (8003bd4 <send_ai_io_tensor.isra.0+0x70>)
 8003bb0:	67a3      	str	r3, [r4, #120]	; 0x78
  resp->payload.tensor.data.datas.arg = (void *)&data;
 8003bb2:	ab06      	add	r3, sp, #24
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 8003bb4:	e9cd 2006 	strd	r2, r0, [sp, #24]
  resp->payload.tensor.data.datas.arg = (void *)&data;
 8003bb8:	67e3      	str	r3, [r4, #124]	; 0x7c
  aiPbMgrSendResp(req, resp, state);
 8003bba:	4642      	mov	r2, r8
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	4630      	mov	r0, r6
 8003bc0:	f7ff f972 	bl	8002ea8 <aiPbMgrSendResp>
}
 8003bc4:	b00b      	add	sp, #44	; 0x2c
 8003bc6:	e8bd 8770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, pc}
 8003bca:	2000      	movs	r0, #0
 8003bcc:	e7ea      	b.n	8003ba4 <send_ai_io_tensor.isra.0+0x40>
 8003bce:	bf00      	nop
 8003bd0:	08002ccf 	.word	0x08002ccf
 8003bd4:	08002d25 	.word	0x08002d25

08003bd8 <aiOnExecNode_cb>:
    const ai_observer_node *node) {
 8003bd8:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
 8003bdc:	ed2d 8b02 	vpush	{d8}
 8003be0:	b095      	sub	sp, #84	; 0x54
 8003be2:	4688      	mov	r8, r1
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8003be4:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
    const ai_observer_node *node) {
 8003be8:	4615      	mov	r5, r2
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp to mark the entry */
 8003bea:	f7ff ff5d 	bl	8003aa8 <cyclesCounterEnd>
  if (flags & AI_OBSERVER_PRE_EVT) {
 8003bee:	f018 0602 	ands.w	r6, r8, #2
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp to mark the entry */
 8003bf2:	e9cd 0104 	strd	r0, r1, [sp, #16]
  if (flags & AI_OBSERVER_PRE_EVT) {
 8003bf6:	d012      	beq.n	8003c1e <aiOnExecNode_cb+0x46>
    obs_ctx->n_cb_in++;
 8003bf8:	6863      	ldr	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 8003bfa:	f418 7f80 	tst.w	r8, #256	; 0x100
    obs_ctx->n_cb_in++;
 8003bfe:	f103 0301 	add.w	r3, r3, #1
 8003c02:	6063      	str	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 8003c04:	d003      	beq.n	8003c0e <aiOnExecNode_cb+0x36>
      obs_ctx->tnodes = ts;
 8003c06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c0a:	e9c4 2308 	strd	r2, r3, [r4, #32]
  cyclesCounterStart();
 8003c0e:	f7ff ff3b 	bl	8003a88 <cyclesCounterStart>
}
 8003c12:	2000      	movs	r0, #0
 8003c14:	b015      	add	sp, #84	; 0x54
 8003c16:	ecbd 8b02 	vpop	{d8}
 8003c1a:	e8bd 8770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, pc}
  } else if (flags & AI_OBSERVER_POST_EVT) {
 8003c1e:	f018 0f04 	tst.w	r8, #4
 8003c22:	d0f4      	beq.n	8003c0e <aiOnExecNode_cb+0x36>
    cyclesCounterStart();
 8003c24:	f7ff ff30 	bl	8003a88 <cyclesCounterStart>
    obs_ctx->tnodes += ts;
 8003c28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c2c:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8003c30:	181b      	adds	r3, r3, r0
 8003c32:	eb42 0201 	adc.w	r2, r2, r1
 8003c36:	e9c4 3208 	strd	r3, r2, [r4, #32]
    obs_ctx->n_cb_out++;
 8003c3a:	68a3      	ldr	r3, [r4, #8]
      type |= (EnumOperatorFlag_OPERATOR_FLAG_LAST << 24);
 8003c3c:	f418 7f00 	tst.w	r8, #512	; 0x200
    type |= (node->type & (ai_u16)0x7FFF);
 8003c40:	f8b5 8002 	ldrh.w	r8, [r5, #2]
    obs_ctx->n_cb_out++;
 8003c44:	f103 0301 	add.w	r3, r3, #1
 8003c48:	60a3      	str	r3, [r4, #8]
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts, -1, -1};
 8003c4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
      type |= (EnumOperatorFlag_OPERATOR_FLAG_LAST << 24);
 8003c4e:	bf0c      	ite	eq
 8003c50:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8003c54:	f04f 7340 	movne.w	r3, #50331648	; 0x3000000
    type |= (node->type & (ai_u16)0x7FFF);
 8003c58:	f3c8 080e 	ubfx	r8, r8, #0, #15
 8003c5c:	ea48 0803 	orr.w	r8, r8, r3
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts, -1, -1};
 8003c60:	f7ff fd6c 	bl	800373c <dwtCyclesToFloatMs>
 8003c64:	ab04      	add	r3, sp, #16
 8003c66:	930a      	str	r3, [sp, #40]	; 0x28
 8003c68:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6c:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003c70:	ab07      	add	r3, sp, #28
 8003c72:	9302      	str	r3, [sp, #8]
 8003c74:	88ab      	ldrh	r3, [r5, #4]
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts, -1, -1};
 8003c76:	ed8d 0a07 	vstr	s0, [sp, #28]
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003c7a:	e9cd 8300 	strd	r8, r3, [sp]
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts, -1, -1};
 8003c7e:	2202      	movs	r2, #2
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003c80:	4633      	mov	r3, r6
 8003c82:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts, -1, -1};
 8003c86:	9209      	str	r2, [sp, #36]	; 0x24
 8003c88:	9608      	str	r6, [sp, #32]
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003c8a:	f7ff f9d3 	bl	8003034 <aiPbMgrSendOperator>
    tl = GET_TENSOR_LIST_OUT(node->tensors);
 8003c8e:	68eb      	ldr	r3, [r5, #12]
 8003c90:	881a      	ldrh	r2, [r3, #0]
 8003c92:	2a01      	cmp	r2, #1
 8003c94:	d910      	bls.n	8003cb8 <aiOnExecNode_cb+0xe0>
 8003c96:	f8d3 9004 	ldr.w	r9, [r3, #4]
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8003c9a:	eddf 8a3d 	vldr	s17, [pc, #244]	; 8003d90 <aiOnExecNode_cb+0x1b8>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8003c9e:	46b2      	mov	sl, r6
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8003ca0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003ca4:	429e      	cmp	r6, r3
 8003ca6:	d207      	bcs.n	8003cb8 <aiOnExecNode_cb+0xe0>
 8003ca8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003cac:	b123      	cbz	r3, 8003cb8 <aiOnExecNode_cb+0xe0>
 8003cae:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
 8003cb2:	f1b8 0f00 	cmp.w	r8, #0
 8003cb6:	d109      	bne.n	8003ccc <aiOnExecNode_cb+0xf4>
    obs_ctx->tcom += cyclesCounterEnd();
 8003cb8:	f7ff fef6 	bl	8003aa8 <cyclesCounterEnd>
 8003cbc:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8003cc0:	1818      	adds	r0, r3, r0
 8003cc2:	eb42 0101 	adc.w	r1, r2, r1
 8003cc6:	e9c4 0106 	strd	r0, r1, [r4, #24]
 8003cca:	e7a0      	b.n	8003c0e <aiOnExecNode_cb+0x36>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8003ccc:	f8d8 3000 	ldr.w	r3, [r8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d04a      	beq.n	8003d6a <aiOnExecNode_cb+0x192>
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	2a00      	cmp	r2, #0
 8003cd8:	d047      	beq.n	8003d6a <aiOnExecNode_cb+0x192>
 8003cda:	8859      	ldrh	r1, [r3, #2]
 8003cdc:	2900      	cmp	r1, #0
 8003cde:	d044      	beq.n	8003d6a <aiOnExecNode_cb+0x192>
 8003ce0:	6812      	ldr	r2, [r2, #0]
 8003ce2:	ed92 8a00 	vldr	s16, [r2]
      if (AI_TENSOR_FMT_GET_SIGN(t))
 8003ce6:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8003cea:	6802      	ldr	r2, [r0, #0]
 8003cec:	f412 0500 	ands.w	r5, r2, #8388608	; 0x800000
 8003cf0:	d03e      	beq.n	8003d70 <aiOnExecNode_cb+0x198>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d047      	beq.n	8003d86 <aiOnExecNode_cb+0x1ae>
 8003cf6:	6859      	ldr	r1, [r3, #4]
 8003cf8:	2900      	cmp	r1, #0
 8003cfa:	d046      	beq.n	8003d8a <aiOnExecNode_cb+0x1b2>
 8003cfc:	885d      	ldrh	r5, [r3, #2]
 8003cfe:	b115      	cbz	r5, 8003d06 <aiOnExecNode_cb+0x12e>
 8003d00:	684b      	ldr	r3, [r1, #4]
 8003d02:	f993 5000 	ldrsb.w	r5, [r3]
      ai_buffer buffer =
 8003d06:	68c3      	ldr	r3, [r0, #12]
 8003d08:	920d      	str	r2, [sp, #52]	; 0x34
          AI_BUFFER_INIT(
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	4640      	mov	r0, r8
      ai_buffer buffer =
 8003d0e:	e9cd 3a0e 	strd	r3, sl, [sp, #56]	; 0x38
 8003d12:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
          AI_BUFFER_INIT(
 8003d16:	f002 fac9 	bl	80062ac <get_tensor_size>
      ai_buffer buffer =
 8003d1a:	f898 3008 	ldrb.w	r3, [r8, #8]
 8003d1e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
          AI_BUFFER_INIT(
 8003d22:	f8d8 3008 	ldr.w	r3, [r8, #8]
      ai_buffer buffer =
 8003d26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003d28:	9011      	str	r0, [sp, #68]	; 0x44
          AI_BUFFER_INIT(
 8003d2a:	f3c3 2317 	ubfx	r3, r3, #8, #24
      ai_buffer buffer =
 8003d2e:	f363 221f 	bfi	r2, r3, #8, #24
 8003d32:	9212      	str	r2, [sp, #72]	; 0x48
 8003d34:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003d38:	9313      	str	r3, [sp, #76]	; 0x4c
      if (i == (GET_TENSOR_LIST_SIZE(tl) - 1U))
 8003d3a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
      if (obs_ctx->no_data)
 8003d3e:	7d22      	ldrb	r2, [r4, #20]
      if (i == (GET_TENSOR_LIST_SIZE(tl) - 1U))
 8003d40:	3b01      	subs	r3, #1
        tens_flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
 8003d42:	429e      	cmp	r6, r3
 8003d44:	bf14      	ite	ne
 8003d46:	2304      	movne	r3, #4
 8003d48:	f44f 7382 	moveq.w	r3, #260	; 0x104
      if (obs_ctx->no_data)
 8003d4c:	b10a      	cbz	r2, 8003d52 <aiOnExecNode_cb+0x17a>
        tens_flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 8003d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      send_ai_io_tensor(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003d52:	e9cd 3500 	strd	r3, r5, [sp]
 8003d56:	eeb0 0a48 	vmov.f32	s0, s16
 8003d5a:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8003d5e:	ab0d      	add	r3, sp, #52	; 0x34
 8003d60:	2202      	movs	r2, #2
 8003d62:	f7ff feff 	bl	8003b64 <send_ai_io_tensor.isra.0>
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8003d66:	3601      	adds	r6, #1
 8003d68:	e79a      	b.n	8003ca0 <aiOnExecNode_cb+0xc8>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8003d6a:	eeb0 8a68 	vmov.f32	s16, s17
 8003d6e:	e7ba      	b.n	8003ce6 <aiOnExecNode_cb+0x10e>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_U8(t, 0);
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0c8      	beq.n	8003d06 <aiOnExecNode_cb+0x12e>
 8003d74:	6859      	ldr	r1, [r3, #4]
 8003d76:	2900      	cmp	r1, #0
 8003d78:	d0c5      	beq.n	8003d06 <aiOnExecNode_cb+0x12e>
 8003d7a:	885b      	ldrh	r3, [r3, #2]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0c2      	beq.n	8003d06 <aiOnExecNode_cb+0x12e>
 8003d80:	684b      	ldr	r3, [r1, #4]
 8003d82:	781d      	ldrb	r5, [r3, #0]
 8003d84:	e7bf      	b.n	8003d06 <aiOnExecNode_cb+0x12e>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8003d86:	461d      	mov	r5, r3
 8003d88:	e7bd      	b.n	8003d06 <aiOnExecNode_cb+0x12e>
 8003d8a:	460d      	mov	r5, r1
 8003d8c:	e7bb      	b.n	8003d06 <aiOnExecNode_cb+0x12e>
 8003d8e:	bf00      	nop
 8003d90:	00000000 	.word	0x00000000

08003d94 <aiPbCmdNNInfo>:

void aiPbCmdNNInfo(const reqMsg *req, respMsg *resp, void *param)
{
 8003d94:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8003d98:	4606      	mov	r6, r0
 8003d9a:	b0a2      	sub	sp, #136	; 0x88
 8003d9c:	460c      	mov	r4, r1
  struct ai_network_exec_ctx *ctx;

  UNUSED(param);

  ctx = aiExecCtx(req->name, req->param);
 8003d9e:	300c      	adds	r0, #12
 8003da0:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8003da4:	f7ff feb4 	bl	8003b10 <aiExecCtx>
  if (ctx)
 8003da8:	4605      	mov	r5, r0
 8003daa:	2800      	cmp	r0, #0
 8003dac:	f000 80d6 	beq.w	8003f5c <aiPbCmdNNInfo+0x1c8>
  resp->which_payload = respMsg_minfo_tag;
 8003db0:	2316      	movs	r3, #22
    send_model_info(req, resp, EnumState_S_IDLE, &ctx->report,
 8003db2:	f890 9090 	ldrb.w	r9, [r0, #144]	; 0x90
 8003db6:	f890 8091 	ldrb.w	r8, [r0, #145]	; 0x91
  resp->which_payload = respMsg_minfo_tag;
 8003dba:	80e3      	strh	r3, [r4, #6]
  stai_runtime_get_info(&rt_info);
 8003dbc:	a81c      	add	r0, sp, #112	; 0x70
 8003dbe:	f002 fa45 	bl	800624c <stai_runtime_get_info>
  aiPbStrCopy(nn->model_name, &resp->payload.minfo.name[0],
 8003dc2:	68a8      	ldr	r0, [r5, #8]
 8003dc4:	2240      	movs	r2, #64	; 0x40
 8003dc6:	f104 0108 	add.w	r1, r4, #8
 8003dca:	f7ff f813 	bl	8002df4 <aiPbStrCopy>
  aiPbStrCopy(nn->model_signature, &resp->payload.minfo.signature[0],
 8003dce:	68e8      	ldr	r0, [r5, #12]
 8003dd0:	2240      	movs	r2, #64	; 0x40
 8003dd2:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8003dd6:	f7ff f80d 	bl	8002df4 <aiPbStrCopy>
  aiPbStrCopy(nn->compile_datetime, &resp->payload.minfo.compile_datetime[0],
 8003dda:	6968      	ldr	r0, [r5, #20]
 8003ddc:	2240      	movs	r2, #64	; 0x40
 8003dde:	f104 018c 	add.w	r1, r4, #140	; 0x8c
 8003de2:	f7ff f807 	bl	8002df4 <aiPbStrCopy>
  resp->payload.minfo.runtime_version = _ai_version_to_uint32((const ai_platform_version *)&rt_info.runtime_version);
 8003de6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003de8:	ba1b      	rev	r3, r3
 8003dea:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
  resp->payload.minfo.tool_version = _ai_version_to_uint32(&nn->tool_version);
 8003dee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003df0:	ba1b      	rev	r3, r3
 8003df2:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  resp->payload.minfo.rtid = _AI_RUNTIME_ID | _stai_compiler_id_to(rt_info.compiler_id) << EnumTools_AI_TOOLS_POS;
 8003df6:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
  if (id == STAI_COMPILER_ID_GCC) {
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d00f      	beq.n	8003e1e <aiPbCmdNNInfo+0x8a>
  else if (id == STAI_COMPILER_ID_GHS) {
 8003dfe:	2b10      	cmp	r3, #16
 8003e00:	f000 80a0 	beq.w	8003f44 <aiPbCmdNNInfo+0x1b0>
  else if  (id == STAI_COMPILER_ID_HIGHTECH) {
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	f000 809f 	beq.w	8003f48 <aiPbCmdNNInfo+0x1b4>
  else if  (id == STAI_COMPILER_ID_IAR) {
 8003e0a:	2b30      	cmp	r3, #48	; 0x30
 8003e0c:	f000 809e 	beq.w	8003f4c <aiPbCmdNNInfo+0x1b8>
  else if  (id == STAI_COMPILER_ID_KEIL_AC6) {
 8003e10:	2b50      	cmp	r3, #80	; 0x50
 8003e12:	f000 809d 	beq.w	8003f50 <aiPbCmdNNInfo+0x1bc>
    return EnumTools_AI_MDK_5;
 8003e16:	2b40      	cmp	r3, #64	; 0x40
 8003e18:	bf14      	ite	ne
 8003e1a:	2300      	movne	r3, #0
 8003e1c:	2303      	moveq	r3, #3
  resp->payload.minfo.rtid = _AI_RUNTIME_ID | _stai_compiler_id_to(rt_info.compiler_id) << EnumTools_AI_TOOLS_POS;
 8003e1e:	041b      	lsls	r3, r3, #16
 8003e20:	f043 0301 	orr.w	r3, r3, #1
  aiPbStrCopy(rt_info.compiler_desc, &resp->payload.minfo.runtime_desc[0],
 8003e24:	9821      	ldr	r0, [sp, #132]	; 0x84
  resp->payload.minfo.rtid = _AI_RUNTIME_ID | _stai_compiler_id_to(rt_info.compiler_id) << EnumTools_AI_TOOLS_POS;
 8003e26:	64a3      	str	r3, [r4, #72]	; 0x48
  aiPbStrCopy(rt_info.compiler_desc, &resp->payload.minfo.runtime_desc[0],
 8003e28:	2240      	movs	r2, #64	; 0x40
 8003e2a:	f504 718a 	add.w	r1, r4, #276	; 0x114
 8003e2e:	f7fe ffe1 	bl	8002df4 <aiPbStrCopy>
  resp->payload.minfo.n_macc = (uint64_t)nn->n_macc;
 8003e32:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8003e36:	f1b9 0f00 	cmp.w	r9, #0
  resp->payload.minfo.n_macc = (uint64_t)nn->n_macc;
 8003e3a:	e9c4 2336 	strd	r2, r3, [r4, #216]	; 0xd8
  resp->payload.minfo.n_nodes = nn->n_nodes;
 8003e3e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8003e42:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  resp->payload.minfo.n_nodes = nn->n_nodes;
 8003e44:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8003e48:	f240 4301 	movw	r3, #1025	; 0x401
 8003e4c:	bf08      	it	eq
 8003e4e:	2301      	moveq	r3, #1
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8003e50:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
      &encode_ai_buffer_to_tensor_desc, nn->n_inputs, &tensor_desc_ins };
 8003e54:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
  struct _encode_tensor_desc tensor_ins = {
 8003e58:	9203      	str	r2, [sp, #12]
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8003e5a:	2300      	movs	r3, #0
  resp->payload.minfo.n_inputs = nn->n_inputs;
 8003e5c:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
  resp->payload.minfo.inputs.arg = (void *)&tensor_ins;
 8003e60:	aa02      	add	r2, sp, #8
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8003e62:	4598      	cmp	r8, r3
  resp->payload.minfo.inputs.arg = (void *)&tensor_ins;
 8003e64:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8003e68:	f240 4202 	movw	r2, #1026	; 0x402
 8003e6c:	bf18      	it	ne
 8003e6e:	4694      	movne	ip, r2
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 8003e70:	6caa      	ldr	r2, [r5, #72]	; 0x48
  struct _encode_tensor_desc tensor_ins = {
 8003e72:	483e      	ldr	r0, [pc, #248]	; (8003f6c <aiPbCmdNNInfo+0x1d8>)
 8003e74:	9002      	str	r0, [sp, #8]
 8003e76:	a914      	add	r1, sp, #80	; 0x50
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8003e78:	bf08      	it	eq
 8003e7a:	f04f 0c02 	moveq.w	ip, #2
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 8003e7e:	e9cd 2c18 	strd	r2, ip, [sp, #96]	; 0x60
  struct _encode_tensor_desc tensor_ins = {
 8003e82:	9104      	str	r1, [sp, #16]
      &encode_ai_buffer_to_tensor_desc, nn->n_outputs, &tensor_desc_outs };
 8003e84:	f8b5 2042 	ldrh.w	r2, [r5, #66]	; 0x42
  resp->payload.minfo.inputs.funcs.encode = encode_tensor_desc;
 8003e88:	4939      	ldr	r1, [pc, #228]	; (8003f70 <aiPbCmdNNInfo+0x1dc>)
  if (nn->map_activations.size) {
 8003e8a:	f8b5 c05a 	ldrh.w	ip, [r5, #90]	; 0x5a
  struct _encode_tensor_desc tensor_outs = {
 8003e8e:	9005      	str	r0, [sp, #20]
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8003e90:	f04f 0e00 	mov.w	lr, #0
  resp->payload.minfo.outputs.funcs.encode = encode_tensor_desc;
 8003e94:	e9c4 213c 	strd	r2, r1, [r4, #240]	; 0xf0
  struct _encode_tensor_desc tensor_outs = {
 8003e98:	9206      	str	r2, [sp, #24]
 8003e9a:	a818      	add	r0, sp, #96	; 0x60
  resp->payload.minfo.outputs.arg = (void *)&tensor_outs;
 8003e9c:	aa05      	add	r2, sp, #20
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8003e9e:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8003ea2:	9317      	str	r3, [sp, #92]	; 0x5c
  resp->payload.minfo.inputs.funcs.encode = encode_tensor_desc;
 8003ea4:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 8003ea8:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 8003eac:	931b      	str	r3, [sp, #108]	; 0x6c
  struct _encode_tensor_desc tensor_outs = {
 8003eae:	9007      	str	r0, [sp, #28]
  resp->payload.minfo.outputs.arg = (void *)&tensor_outs;
 8003eb0:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8
  if (nn->map_activations.size) {
 8003eb4:	f1bc 0f00 	cmp.w	ip, #0
 8003eb8:	d04c      	beq.n	8003f54 <aiPbCmdNNInfo+0x1c0>
      size_acts += nn->map_activations.buffer[i].size;
 8003eba:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    for (int i=0; i<nn->map_activations.size; i++)
 8003ebc:	4618      	mov	r0, r3
      size_acts += nn->map_activations.buffer[i].size;
 8003ebe:	3210      	adds	r2, #16
 8003ec0:	f04f 081c 	mov.w	r8, #28
 8003ec4:	fb08 fe00 	mul.w	lr, r8, r0
    for (int i=0; i<nn->map_activations.size; i++)
 8003ec8:	3001      	adds	r0, #1
      size_acts += nn->map_activations.buffer[i].size;
 8003eca:	f852 e00e 	ldr.w	lr, [r2, lr]
    for (int i=0; i<nn->map_activations.size; i++)
 8003ece:	4560      	cmp	r0, ip
      size_acts += nn->map_activations.buffer[i].size;
 8003ed0:	4473      	add	r3, lr
    for (int i=0; i<nn->map_activations.size; i++)
 8003ed2:	dbf7      	blt.n	8003ec4 <aiPbCmdNNInfo+0x130>
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8003ed4:	4a27      	ldr	r2, [pc, #156]	; (8003f74 <aiPbCmdNNInfo+0x1e0>)
  struct _encode_tensor_desc tensor_acts = {
 8003ed6:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8003f7c <aiPbCmdNNInfo+0x1e8>
 8003eda:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8003ede:	a808      	add	r0, sp, #32
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8003ee0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  struct _encode_tensor_desc tensor_acts = {
 8003ee4:	900d      	str	r0, [sp, #52]	; 0x34
 8003ee6:	2201      	movs	r2, #1
  if (nn->map_weights.size) {
 8003ee8:	f8b5 0052 	ldrh.w	r0, [r5, #82]	; 0x52
  struct _encode_tensor_desc tensor_acts = {
 8003eec:	920c      	str	r2, [sp, #48]	; 0x30
  resp->payload.minfo.activations.funcs.encode = encode_tensor_desc;
 8003eee:	e9c4 213f 	strd	r2, r1, [r4, #252]	; 0xfc
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8003ef2:	2300      	movs	r3, #0
  resp->payload.minfo.activations.arg = (void *)&tensor_acts;
 8003ef4:	aa0b      	add	r2, sp, #44	; 0x2c
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8003ef6:	930a      	str	r3, [sp, #40]	; 0x28
  resp->payload.minfo.activations.arg = (void *)&tensor_acts;
 8003ef8:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
  if (nn->map_weights.size) {
 8003efc:	b360      	cbz	r0, 8003f58 <aiPbCmdNNInfo+0x1c4>
      size_params += nn->map_weights.buffer[i].size;
 8003efe:	6d6d      	ldr	r5, [r5, #84]	; 0x54
    for (int i=0; i<nn->map_weights.size; i++)
 8003f00:	461a      	mov	r2, r3
      size_params += nn->map_weights.buffer[i].size;
 8003f02:	3510      	adds	r5, #16
 8003f04:	f04f 081c 	mov.w	r8, #28
 8003f08:	fb08 fe02 	mul.w	lr, r8, r2
    for (int i=0; i<nn->map_weights.size; i++)
 8003f0c:	3201      	adds	r2, #1
      size_params += nn->map_weights.buffer[i].size;
 8003f0e:	f855 e00e 	ldr.w	lr, [r5, lr]
    for (int i=0; i<nn->map_weights.size; i++)
 8003f12:	4282      	cmp	r2, r0
      size_params += nn->map_weights.buffer[i].size;
 8003f14:	4473      	add	r3, lr
    for (int i=0; i<nn->map_weights.size; i++)
 8003f16:	dbf7      	blt.n	8003f08 <aiPbCmdNNInfo+0x174>
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 8003f18:	4a17      	ldr	r2, [pc, #92]	; (8003f78 <aiPbCmdNNInfo+0x1e4>)
 8003f1a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  struct _encode_tensor_desc tensor_w = {
 8003f1e:	2301      	movs	r3, #1
  resp->payload.minfo.params.funcs.encode = encode_tensor_desc;
 8003f20:	e9c4 3142 	strd	r3, r1, [r4, #264]	; 0x108
  struct _encode_tensor_desc tensor_w = {
 8003f24:	a80e      	add	r0, sp, #56	; 0x38
 8003f26:	9312      	str	r3, [sp, #72]	; 0x48
  resp->payload.minfo.params.arg = (void *)&tensor_w;
 8003f28:	ab11      	add	r3, sp, #68	; 0x44
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 8003f2a:	2200      	movs	r2, #0
  struct _encode_tensor_desc tensor_w = {
 8003f2c:	9013      	str	r0, [sp, #76]	; 0x4c
  resp->payload.minfo.params.arg = (void *)&tensor_w;
 8003f2e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
  aiPbMgrSendResp(req, resp, state);
 8003f32:	4621      	mov	r1, r4
 8003f34:	4630      	mov	r0, r6
  struct _encode_tensor_desc tensor_w = {
 8003f36:	e9cd 2c10 	strd	r2, ip, [sp, #64]	; 0x40
  aiPbMgrSendResp(req, resp, state);
 8003f3a:	f7fe ffb5 	bl	8002ea8 <aiPbMgrSendResp>
        ctx->inputs_in_activations, ctx->outputs_in_activations);
  else
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
        EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
}
 8003f3e:	b022      	add	sp, #136	; 0x88
 8003f40:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    return EnumTools_AI_GHS;
 8003f44:	2306      	movs	r3, #6
 8003f46:	e76a      	b.n	8003e1e <aiPbCmdNNInfo+0x8a>
    return EnumTools_AI_HTC;
 8003f48:	2305      	movs	r3, #5
 8003f4a:	e768      	b.n	8003e1e <aiPbCmdNNInfo+0x8a>
    return EnumTools_AI_IAR;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e766      	b.n	8003e1e <aiPbCmdNNInfo+0x8a>
    return EnumTools_AI_MDK_6;
 8003f50:	2304      	movs	r3, #4
 8003f52:	e764      	b.n	8003e1e <aiPbCmdNNInfo+0x8a>
  ai_size size_acts = 0;
 8003f54:	4663      	mov	r3, ip
 8003f56:	e7bd      	b.n	8003ed4 <aiPbCmdNNInfo+0x140>
  ai_size size_params = 0;
 8003f58:	4603      	mov	r3, r0
 8003f5a:	e7dd      	b.n	8003f18 <aiPbCmdNNInfo+0x184>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	461a      	mov	r2, r3
 8003f62:	4621      	mov	r1, r4
 8003f64:	4630      	mov	r0, r6
 8003f66:	f7fe fff3 	bl	8002f50 <aiPbMgrSendAck>
}
 8003f6a:	e7e8      	b.n	8003f3e <aiPbCmdNNInfo+0x1aa>
 8003f6c:	08003a65 	.word	0x08003a65
 8003f70:	08002e41 	.word	0x08002e41
 8003f74:	0800cc6b 	.word	0x0800cc6b
 8003f78:	0800cc70 	.word	0x0800cc70
 8003f7c:	08003975 	.word	0x08003975

08003f80 <_print_debug>:
{
 8003f80:	b40e      	push	{r1, r2, r3}
 8003f82:	b517      	push	{r0, r1, r2, r4, lr}
  if (!debug)
 8003f84:	b178      	cbz	r0, 8003fa6 <_print_debug+0x26>
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 8003f86:	4c0f      	ldr	r4, [pc, #60]	; (8003fc4 <_print_debug+0x44>)
 8003f88:	9a05      	ldr	r2, [sp, #20]
  va_start(ap, fmt);
 8003f8a:	ab06      	add	r3, sp, #24
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 8003f8c:	2150      	movs	r1, #80	; 0x50
 8003f8e:	4620      	mov	r0, r4
  va_start(ap, fmt);
 8003f90:	9301      	str	r3, [sp, #4]
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 8003f92:	f7ff fb0b 	bl	80035ac <lc_vsnprint>
      _print_buffer[s] = 0;
 8003f96:	2100      	movs	r1, #0
 8003f98:	1823      	adds	r3, r4, r0
  while (s) {
 8003f9a:	b948      	cbnz	r0, 8003fb0 <_print_debug+0x30>
  aiPbMgrSendLogV2(EnumState_S_WAITING, 1, &_print_buffer[0]);
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	4a09      	ldr	r2, [pc, #36]	; (8003fc4 <_print_debug+0x44>)
 8003fa0:	4608      	mov	r0, r1
 8003fa2:	f7fe fff5 	bl	8002f90 <aiPbMgrSendLogV2>
}
 8003fa6:	b003      	add	sp, #12
 8003fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fac:	b003      	add	sp, #12
 8003fae:	4770      	bx	lr
    if ((_print_buffer[s] == '\n') || (_print_buffer[s] == '\r'))
 8003fb0:	781a      	ldrb	r2, [r3, #0]
 8003fb2:	2a0a      	cmp	r2, #10
 8003fb4:	d001      	beq.n	8003fba <_print_debug+0x3a>
 8003fb6:	2a0d      	cmp	r2, #13
 8003fb8:	d100      	bne.n	8003fbc <_print_debug+0x3c>
      _print_buffer[s] = 0;
 8003fba:	7019      	strb	r1, [r3, #0]
    s--;
 8003fbc:	3801      	subs	r0, #1
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	e7eb      	b.n	8003f9a <_print_debug+0x1a>
 8003fc2:	bf00      	nop
 8003fc4:	200014b0 	.word	0x200014b0

08003fc8 <aiPbCmdNNRun>:
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
}


void aiPbCmdNNRun(const reqMsg *req, respMsg *resp, void *param)
{
 8003fc8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8003fcc:	ed2d 8b02 	vpush	{d8}
 8003fd0:	4605      	mov	r5, r0
 8003fd2:	b0a2      	sub	sp, #136	; 0x88
 8003fd4:	460e      	mov	r6, r1
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8003fd6:	f3ef 8014 	mrs	r0, CONTROL
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8003fda:	f3ef 8108 	mrs	r1, MSP
  ai_buffer *ai_input;
  ai_buffer *ai_output;

  UNUSED(param);

  MON_STACK_INIT();
 8003fde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fe2:	f7ff fb43 	bl	800366c <stackMonInit>

  /* 0 - Check if requested c-name model is available -------------- */
  ctx = aiExecCtx(req->name, -1);
 8003fe6:	f04f 31ff 	mov.w	r1, #4294967295
 8003fea:	f105 000c 	add.w	r0, r5, #12
 8003fee:	f7ff fd8f 	bl	8003b10 <aiExecCtx>
  if (!ctx) {
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	b910      	cbnz	r0, 8003ffc <aiPbCmdNNRun+0x34>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003ff6:	2304      	movs	r3, #4

  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
  if (batch != 1) {
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
        "ai_mnetwork_run");
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	e1a4      	b.n	8004346 <aiPbCmdNNRun+0x37e>
  _set_context(req, ctx);
 8003ffc:	68a8      	ldr	r0, [r5, #8]
  ctx->emit_intermediate_data = false;
 8003ffe:	2300      	movs	r3, #0
 8004000:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
  if ((req->param & EnumRunParam_P_RUN_MODE_PER_LAYER_WITH_DATA) ==
 8004004:	0743      	lsls	r3, r0, #29
  if ((req->param & EnumRunParam_P_RUN_MODE_PER_LAYER) ==
 8004006:	bf53      	iteet	pl
 8004008:	f3c0 0340 	ubfxpl	r3, r0, #1, #1
    ctx->observer_is_enabled = true;
 800400c:	f240 1301 	movwmi	r3, #257	; 0x101
 8004010:	f8a4 3092 	strhmi.w	r3, [r4, #146]	; 0x92
 8004014:	f884 3092 	strbpl.w	r3, [r4, #146]	; 0x92
  ctx->direct_write = req->param & EnumRunParam_P_RUN_CONF_DIRECT_WRITE?true:false;
 8004018:	f3c0 2380 	ubfx	r3, r0, #10, #1
 800401c:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  ctx->simple_value = req->param & EnumRunParam_P_RUN_CONF_CONST_VALUE?true:false;
 8004020:	f3c0 2340 	ubfx	r3, r0, #9, #1
 8004024:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
  net_obs_ctx.no_data = true;
 8004028:	4bcd      	ldr	r3, [pc, #820]	; (8004360 <aiPbCmdNNRun+0x398>)
 800402a:	f894 1092 	ldrb.w	r1, [r4, #146]	; 0x92
 800402e:	7019      	strb	r1, [r3, #0]
  if (ctx->emit_intermediate_data) {
 8004030:	f894 1093 	ldrb.w	r1, [r4, #147]	; 0x93
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 8004034:	f3c0 2000 	ubfx	r0, r0, #8, #1
  net_obs_ctx.no_data = true;
 8004038:	2201      	movs	r2, #1
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 800403a:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
  net_obs_ctx.no_data = true;
 800403e:	751a      	strb	r2, [r3, #20]
  if (ctx->emit_intermediate_data) {
 8004040:	b111      	cbz	r1, 8004048 <aiPbCmdNNRun+0x80>
    net_obs_ctx.is_enabled = true;
 8004042:	701a      	strb	r2, [r3, #0]
    net_obs_ctx.no_data = false;
 8004044:	2200      	movs	r2, #0
 8004046:	751a      	strb	r2, [r3, #20]
  net_obs_ctx.tcom = 0ULL;
 8004048:	f04f 0800 	mov.w	r8, #0
 800404c:	f04f 0900 	mov.w	r9, #0
  net_obs_ctx.n_cb_in  = 0;
 8004050:	f04f 0a00 	mov.w	sl, #0
  net_obs_ctx.tcom = 0ULL;
 8004054:	e9c3 8906 	strd	r8, r9, [r3, #24]
  net_obs_ctx.tnodes = 0ULL;
 8004058:	e9c3 8908 	strd	r8, r9, [r3, #32]
  net_obs_ctx.n_cb_out = 0;
 800405c:	e9c3 aa01 	strd	sl, sl, [r3, #4]
  ctx->obs_ctx = &net_obs_ctx;
 8004060:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  ai_output = ctx->report.outputs;
 8004064:	e9d4 9311 	ldrd	r9, r3, [r4, #68]	; 0x44
  PB_LC_PRINT(ctx->debug, "RUN: c-model=%s rtid=%d\r\n", ctx->report.model_name, _AI_RUNTIME_ID);
 8004068:	68a2      	ldr	r2, [r4, #8]
 800406a:	49be      	ldr	r1, [pc, #760]	; (8004364 <aiPbCmdNNRun+0x39c>)
  ai_output = ctx->report.outputs;
 800406c:	9306      	str	r3, [sp, #24]
  PB_LC_PRINT(ctx->debug, "RUN: c-model=%s rtid=%d\r\n", ctx->report.model_name, _AI_RUNTIME_ID);
 800406e:	2301      	movs	r3, #1
 8004070:	f7ff ff86 	bl	8003f80 <_print_debug>
  PB_LC_PRINT(ctx->debug, "RUN:  observer=%d/%d, simple_value=%d, direct_write=%d\r\n",
 8004074:	f894 1095 	ldrb.w	r1, [r4, #149]	; 0x95
 8004078:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
 800407c:	f894 2092 	ldrb.w	r2, [r4, #146]	; 0x92
 8004080:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
 8004084:	9101      	str	r1, [sp, #4]
 8004086:	f894 1094 	ldrb.w	r1, [r4, #148]	; 0x94
 800408a:	9100      	str	r1, [sp, #0]
 800408c:	49b6      	ldr	r1, [pc, #728]	; (8004368 <aiPbCmdNNRun+0x3a0>)
 800408e:	f7ff ff77 	bl	8003f80 <_print_debug>
  PB_LC_PRINT(ctx->debug, "RUN: Waiting data (%d bytes).. opt=0x%x, param=0x%x\r\n",
 8004092:	4648      	mov	r0, r9
 8004094:	f894 8096 	ldrb.w	r8, [r4, #150]	; 0x96
 8004098:	f7ff fd2c 	bl	8003af4 <_get_buffer_size>
 800409c:	68ab      	ldr	r3, [r5, #8]
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	4602      	mov	r2, r0
 80040a2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80040a4:	49b1      	ldr	r1, [pc, #708]	; (800436c <aiPbCmdNNRun+0x3a4>)
 80040a6:	4640      	mov	r0, r8
 80040a8:	f7ff ff6a 	bl	8003f80 <_print_debug>
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 80040ac:	4648      	mov	r0, r9
 80040ae:	f7ff fd21 	bl	8003af4 <_get_buffer_size>
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 80040b2:	2201      	movs	r2, #1
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 80040b4:	4603      	mov	r3, r0
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 80040b6:	4631      	mov	r1, r6
 80040b8:	4628      	mov	r0, r5
 80040ba:	f8cd a000 	str.w	sl, [sp]
 80040be:	f7fe ff47 	bl	8002f50 <aiPbMgrSendAck>
  tick = port_hal_get_tick();
 80040c2:	f7fd f9a5 	bl	8001410 <HAL_GetTick>
 80040c6:	46c8      	mov	r8, r9
 80040c8:	9007      	str	r0, [sp, #28]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 80040ca:	f8cd a014 	str.w	sl, [sp, #20]
 80040ce:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 80040d2:	9a05      	ldr	r2, [sp, #20]
 80040d4:	4293      	cmp	r3, r2
 80040d6:	f300 80fa 	bgt.w	80042ce <aiPbCmdNNRun+0x306>
  tick = port_hal_get_tick() - tick;
 80040da:	f7fd f999 	bl	8001410 <HAL_GetTick>
  PB_LC_PRINT(ctx->debug, "RUN: %d ticks to download %d input(s)\r\n", tick, ctx->report.n_inputs);
 80040de:	9a07      	ldr	r2, [sp, #28]
 80040e0:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 80040e4:	49a2      	ldr	r1, [pc, #648]	; (8004370 <aiPbCmdNNRun+0x3a8>)
 80040e6:	1a82      	subs	r2, r0, r2
 80040e8:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
 80040ec:	f7ff ff48 	bl	8003f80 <_print_debug>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 80040f0:	f8d4 8098 	ldr.w	r8, [r4, #152]	; 0x98
  if (obs_ctx->is_enabled == false)
 80040f4:	f898 3000 	ldrb.w	r3, [r8]
 80040f8:	b193      	cbz	r3, 8004120 <aiPbCmdNNRun+0x158>
  if (ctx->handle == AI_HANDLE_NULL)
 80040fa:	6820      	ldr	r0, [r4, #0]
 80040fc:	b180      	cbz	r0, 8004120 <aiPbCmdNNRun+0x158>
  ai_mnetwork_get_private_handle(ctx->handle,
 80040fe:	a90e      	add	r1, sp, #56	; 0x38
  obs_ctx->cresp = cresp;
 8004100:	e9c8 5603 	strd	r5, r6, [r8, #12]
  ai_mnetwork_get_private_handle(ctx->handle,
 8004104:	aa14      	add	r2, sp, #80	; 0x50
 8004106:	f000 fbdb 	bl	80048c0 <ai_mnetwork_get_private_handle>
  obs_ctx->plt_ctx.on_node = aiOnExecNode_cb;
 800410a:	4b9a      	ldr	r3, [pc, #616]	; (8004374 <aiPbCmdNNRun+0x3ac>)
  obs_ctx->plt_ctx.cookie = (ai_handle)ctx;
 800410c:	e9c8 340a 	strd	r3, r4, [r8, #40]	; 0x28
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 8004110:	2306      	movs	r3, #6
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 8004112:	980e      	ldr	r0, [sp, #56]	; 0x38
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 8004114:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 8004118:	f108 0128 	add.w	r1, r8, #40	; 0x28
 800411c:	f003 f822 	bl	8007164 <ai_platform_observer_register_s>
  MON_ALLOC_ENABLE();
 8004120:	f8df a270 	ldr.w	sl, [pc, #624]	; 8004394 <aiPbCmdNNRun+0x3cc>
  MON_ALLOC_RESET();
 8004124:	f7ff fbf2 	bl	800390c <_mon_alloc_reset>
  MON_ALLOC_ENABLE();
 8004128:	f8da 3000 	ldr.w	r3, [sl]
  PB_LC_PRINT(ctx->debug, "RUN: Processing.. current tick=%lu\r\n", (uint32_t)port_hal_get_tick());
 800412c:	f894 8096 	ldrb.w	r8, [r4, #150]	; 0x96
  MON_ALLOC_ENABLE();
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	f8ca 3000 	str.w	r3, [sl]
  PB_LC_PRINT(ctx->debug, "RUN: Processing.. current tick=%lu\r\n", (uint32_t)port_hal_get_tick());
 8004138:	f7fd f96a 	bl	8001410 <HAL_GetTick>
 800413c:	498e      	ldr	r1, [pc, #568]	; (8004378 <aiPbCmdNNRun+0x3b0>)
 800413e:	4602      	mov	r2, r0
 8004140:	4640      	mov	r0, r8
 8004142:	f7ff ff1d 	bl	8003f80 <_print_debug>
 8004146:	f3ef 8308 	mrs	r3, MSP
  MON_STACK_CHECK0();
 800414a:	f8df 824c 	ldr.w	r8, [pc, #588]	; 8004398 <aiPbCmdNNRun+0x3d0>
 800414e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8004152:	429a      	cmp	r2, r3
 8004154:	d004      	beq.n	8004160 <aiPbCmdNNRun+0x198>
 8004156:	f3ef 8108 	mrs	r1, MSP
 800415a:	4888      	ldr	r0, [pc, #544]	; (800437c <aiPbCmdNNRun+0x3b4>)
 800415c:	f7ff fa14 	bl	8003588 <lc_print>
  MON_STACK_MARK();
 8004160:	f898 3004 	ldrb.w	r3, [r8, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	f040 8149 	bne.w	80043fc <aiPbCmdNNRun+0x434>
  tick = port_hal_get_tick();
 800416a:	f7fd f951 	bl	8001410 <HAL_GetTick>
 800416e:	4683      	mov	fp, r0
  cyclesCounterStart();
 8004170:	f7ff fc8a 	bl	8003a88 <cyclesCounterStart>
  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
 8004174:	9a06      	ldr	r2, [sp, #24]
 8004176:	6820      	ldr	r0, [r4, #0]
 8004178:	4649      	mov	r1, r9
 800417a:	f000 fb90 	bl	800489e <ai_mnetwork_run>
  if (batch != 1) {
 800417e:	2801      	cmp	r0, #1
 8004180:	f040 814b 	bne.w	800441a <aiPbCmdNNRun+0x452>
        EnumError_E_GENERIC, EnumError_E_GENERIC);
    return;
  }
  tend = cyclesCounterEnd();
 8004184:	f7ff fc90 	bl	8003aa8 <cyclesCounterEnd>
 8004188:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  tick = port_hal_get_tick() - tick;
 800418c:	f7fd f940 	bl	8001410 <HAL_GetTick>

  MON_ALLOC_DISABLE();
 8004190:	f8da 3000 	ldr.w	r3, [sl]
  MON_STACK_EVALUATE();
 8004194:	f898 c004 	ldrb.w	ip, [r8, #4]
  tick = port_hal_get_tick() - tick;
 8004198:	eba0 020b 	sub.w	r2, r0, fp
  MON_ALLOC_DISABLE();
 800419c:	f023 0301 	bic.w	r3, r3, #1
  MON_STACK_EVALUATE();
 80041a0:	2000      	movs	r0, #0
  MON_ALLOC_DISABLE();
 80041a2:	f8ca 3000 	str.w	r3, [sl]
  MON_STACK_EVALUATE();
 80041a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80041aa:	f1bc 0f00 	cmp.w	ip, #0
 80041ae:	d029      	beq.n	8004204 <aiPbCmdNNRun+0x23c>
 80041b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80041b4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80041b8:	eba1 0b03 	sub.w	fp, r1, r3
 80041bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80041c0:	3303      	adds	r3, #3
 80041c2:	f023 0303 	bic.w	r3, r3, #3
 80041c6:	f103 0e20 	add.w	lr, r3, #32
 80041ca:	f853 9b04 	ldr.w	r9, [r3], #4
 80041ce:	f1b9 3fde 	cmp.w	r9, #3739147998	; 0xdededede
 80041d2:	bf18      	it	ne
 80041d4:	4660      	movne	r0, ip
 80041d6:	4573      	cmp	r3, lr
 80041d8:	d1f7      	bne.n	80041ca <aiPbCmdNNRun+0x202>
 80041da:	2800      	cmp	r0, #0
 80041dc:	f040 812a 	bne.w	8004434 <aiPbCmdNNRun+0x46c>
 80041e0:	2020      	movs	r0, #32
 80041e2:	f8d8 e018 	ldr.w	lr, [r8, #24]
 80041e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80041ea:	6819      	ldr	r1, [r3, #0]
 80041ec:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80041f0:	f1b1 3fde 	cmp.w	r1, #3739147998	; 0xdededede
 80041f4:	d102      	bne.n	80041fc <aiPbCmdNNRun+0x234>
 80041f6:	4573      	cmp	r3, lr
 80041f8:	f0c0 8117 	bcc.w	800442a <aiPbCmdNNRun+0x462>
 80041fc:	ebab 0100 	sub.w	r1, fp, r0
 8004200:	f8c8 1008 	str.w	r1, [r8, #8]

  tend = aiObserverAdjustInferenceTime(ctx, tend);
 8004204:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    }
    if ((i + 1) == ctx->report.n_outputs) {
      state = EnumState_S_DONE;
      flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
    }
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 8004208:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 8004380 <aiPbCmdNNRun+0x3b8>
  tend = obs_ctx->tcom + obs_ctx->tnodes + tend;
 800420c:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
 8004210:	e9d0 c008 	ldrd	ip, r0, [r0, #32]
 8004214:	eb13 030c 	adds.w	r3, r3, ip
 8004218:	eb41 0100 	adc.w	r1, r1, r0
 800421c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800421e:	18c0      	adds	r0, r0, r3
 8004220:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004222:	eb41 0303 	adc.w	r3, r1, r3
  tend = aiObserverAdjustInferenceTime(ctx, tend);
 8004226:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
  PB_LC_PRINT(ctx->debug, "RUN: Processing done. delta_tick=%lu\r\n", tick);
 800422a:	4956      	ldr	r1, [pc, #344]	; (8004384 <aiPbCmdNNRun+0x3bc>)
 800422c:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
 8004230:	f7ff fea6 	bl	8003f80 <_print_debug>
  PB_LC_PRINT(ctx->debug, "RUN:  used stack/heap=%d/%d\r\n", (int)io_stack.susage, (int)io_malloc.used);
 8004234:	f8da 3018 	ldr.w	r3, [sl, #24]
 8004238:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800423c:	4952      	ldr	r1, [pc, #328]	; (8004388 <aiPbCmdNNRun+0x3c0>)
 800423e:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
 8004242:	f7ff fe9d 	bl	8003f80 <_print_debug>
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 8004246:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800424a:	f7ff fa77 	bl	800373c <dwtCyclesToFloatMs>
 800424e:	f8da 1018 	ldr.w	r1, [sl, #24]
 8004252:	9113      	str	r1, [sp, #76]	; 0x4c
  if (ctx->observer_is_enabled)
 8004254:	f894 1092 	ldrb.w	r1, [r4, #146]	; 0x92
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 8004258:	ed8d 0a0e 	vstr	s0, [sp, #56]	; 0x38
 800425c:	f04f 0900 	mov.w	r9, #0
    perf.stack_usage = -1;
 8004260:	4549      	cmp	r1, r9
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 8004262:	ab0c      	add	r3, sp, #48	; 0x30
 8004264:	9311      	str	r3, [sp, #68]	; 0x44
 8004266:	f8d8 3008 	ldr.w	r3, [r8, #8]
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 800426a:	f8cd 9000 	str.w	r9, [sp]
    perf.stack_usage = -1;
 800426e:	bf18      	it	ne
 8004270:	f04f 33ff 	movne.w	r3, #4294967295
 8004274:	9312      	str	r3, [sp, #72]	; 0x48
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 8004276:	ab0e      	add	r3, sp, #56	; 0x38
 8004278:	e9cd 9301 	strd	r9, r3, [sp, #4]
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 800427c:	2202      	movs	r2, #2
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 800427e:	68a3      	ldr	r3, [r4, #8]
 8004280:	4631      	mov	r1, r6
 8004282:	4628      	mov	r0, r5
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 8004284:	e9cd 920f 	strd	r9, r2, [sp, #60]	; 0x3c
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 8004288:	f7fe fed4 	bl	8003034 <aiPbMgrSendOperator>
  PB_LC_PRINT(ctx->debug, "RUN: send %d output tensors\r\n", ctx->report.n_outputs);
 800428c:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8004290:	493e      	ldr	r1, [pc, #248]	; (800438c <aiPbCmdNNRun+0x3c4>)
 8004292:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
 8004296:	f7ff fe73 	bl	8003f80 <_print_debug>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 800429a:	f8dd a018 	ldr.w	sl, [sp, #24]
 800429e:	46c8      	mov	r8, r9
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 80042a0:	f240 2902 	movw	r9, #514	; 0x202
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80042a4:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 80042a8:	4542      	cmp	r2, r8
 80042aa:	f300 80d1 	bgt.w	8004450 <aiPbCmdNNRun+0x488>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 80042ae:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
  if (obs_ctx->is_enabled == false)
 80042b2:	782b      	ldrb	r3, [r5, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d04b      	beq.n	8004350 <aiPbCmdNNRun+0x388>
  ai_mnetwork_get_private_handle(ctx->handle, &net_hdl, &pparams);
 80042b8:	a90b      	add	r1, sp, #44	; 0x2c
 80042ba:	6820      	ldr	r0, [r4, #0]
 80042bc:	aa14      	add	r2, sp, #80	; 0x50
 80042be:	f000 faff 	bl	80048c0 <ai_mnetwork_get_private_handle>
  ai_platform_observer_unregister_s(net_hdl, &obs_ctx->plt_ctx);
 80042c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80042c4:	f105 0128 	add.w	r1, r5, #40	; 0x28
 80042c8:	f002 ff88 	bl	80071dc <ai_platform_observer_unregister_s>
  return 0;
 80042cc:	e040      	b.n	8004350 <aiPbCmdNNRun+0x388>
    if ((i + 1) == ctx->report.n_inputs)
 80042ce:	9a05      	ldr	r2, [sp, #20]
 80042d0:	3201      	adds	r2, #1
      state = EnumState_S_PROCESSING;
 80042d2:	429a      	cmp	r2, r3
 80042d4:	bf14      	ite	ne
 80042d6:	2301      	movne	r3, #1
 80042d8:	2302      	moveq	r3, #2
    batch += _get_buffer_size(&ai_input[i]);
 80042da:	4640      	mov	r0, r8
      state = EnumState_S_PROCESSING;
 80042dc:	ee08 3a10 	vmov	s16, r3
    if ((i + 1) == ctx->report.n_inputs)
 80042e0:	9205      	str	r2, [sp, #20]
    batch += _get_buffer_size(&ai_input[i]);
 80042e2:	f7ff fc07 	bl	8003af4 <_get_buffer_size>
  aiPbData data = { 0, _get_buffer_size(buffer), (uintptr_t)buffer->data, 0};
 80042e6:	2300      	movs	r3, #0
 80042e8:	4640      	mov	r0, r8
    res = receive_ai_data(req, resp, state, &ai_input[i], ctx->simple_value, ctx->direct_write);
 80042ea:	f894 b094 	ldrb.w	fp, [r4, #148]	; 0x94
 80042ee:	f894 a095 	ldrb.w	sl, [r4, #149]	; 0x95
  aiPbData data = { 0, _get_buffer_size(buffer), (uintptr_t)buffer->data, 0};
 80042f2:	9314      	str	r3, [sp, #80]	; 0x50
 80042f4:	f7ff fbfe 	bl	8003af4 <_get_buffer_size>
 80042f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80042fc:	9316      	str	r3, [sp, #88]	; 0x58
 80042fe:	2300      	movs	r3, #0
 8004300:	9015      	str	r0, [sp, #84]	; 0x54
 8004302:	9317      	str	r3, [sp, #92]	; 0x5c
  if ((simple_value) || (direct_write))
 8004304:	f1bb 0f00 	cmp.w	fp, #0
 8004308:	d102      	bne.n	8004310 <aiPbCmdNNRun+0x348>
 800430a:	f1ba 0f00 	cmp.w	sl, #0
 800430e:	d011      	beq.n	8004334 <aiPbCmdNNRun+0x36c>
    data.size = _get_element_size(buffer);
 8004310:	f8d8 1000 	ldr.w	r1, [r8]
  if (is_binary)
 8004314:	4a1e      	ldr	r2, [pc, #120]	; (8004390 <aiPbCmdNNRun+0x3c8>)
 8004316:	f021 437e 	bic.w	r3, r1, #4261412864	; 0xfe000000
 800431a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800431e:	4293      	cmp	r3, r2
 8004320:	d01b      	beq.n	800435a <aiPbCmdNNRun+0x392>
  return (size_t)AI_BUFFER_BYTE_SIZE(1, buffer->format);
 8004322:	2001      	movs	r0, #1
 8004324:	f002 f822 	bl	800636c <ai_buffer_get_byte_size>
    data.size = _get_element_size(buffer);
 8004328:	9015      	str	r0, [sp, #84]	; 0x54
  if (direct_write)
 800432a:	f1ba 0f00 	cmp.w	sl, #0
 800432e:	d001      	beq.n	8004334 <aiPbCmdNNRun+0x36c>
    data.addr = (uintptr_t)&temp;
 8004330:	ab0e      	add	r3, sp, #56	; 0x38
 8004332:	9316      	str	r3, [sp, #88]	; 0x58
  aiPbMgrReceiveData(&data);
 8004334:	a814      	add	r0, sp, #80	; 0x50
 8004336:	f7fe fe63 	bl	8003000 <aiPbMgrReceiveData>
  if (data.nb_read != data.size) {
 800433a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800433c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800433e:	4293      	cmp	r3, r2
 8004340:	d02c      	beq.n	800439c <aiPbCmdNNRun+0x3d4>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8004342:	2201      	movs	r2, #1
 8004344:	9200      	str	r2, [sp, #0]
 8004346:	2204      	movs	r2, #4
 8004348:	4631      	mov	r1, r6
 800434a:	4628      	mov	r0, r5
 800434c:	f7fe fe00 	bl	8002f50 <aiPbMgrSendAck>
  }

  aiObserverUnbind(ctx);
}
 8004350:	b022      	add	sp, #136	; 0x88
 8004352:	ecbd 8b02 	vpop	{d8}
 8004356:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    return 4;
 800435a:	2004      	movs	r0, #4
 800435c:	e7e4      	b.n	8004328 <aiPbCmdNNRun+0x360>
 800435e:	bf00      	nop
 8004360:	200015a0 	.word	0x200015a0
 8004364:	0800cc77 	.word	0x0800cc77
 8004368:	0800cc91 	.word	0x0800cc91
 800436c:	0800ccca 	.word	0x0800ccca
 8004370:	0800cd00 	.word	0x0800cd00
 8004374:	08003bd9 	.word	0x08003bd9
 8004378:	0800cd28 	.word	0x0800cd28
 800437c:	0800cd4d 	.word	0x0800cd4d
 8004380:	00000000 	.word	0x00000000
 8004384:	0800ce1e 	.word	0x0800ce1e
 8004388:	0800ce45 	.word	0x0800ce45
 800438c:	0800ce63 	.word	0x0800ce63
 8004390:	000400c0 	.word	0x000400c0
 8004394:	20001474 	.word	0x20001474
 8004398:	20001490 	.word	0x20001490
  if ((simple_value) && (!direct_write))/* broadcast the value */
 800439c:	f1bb 0f00 	cmp.w	fp, #0
 80043a0:	d10d      	bne.n	80043be <aiPbCmdNNRun+0x3f6>
    aiPbMgrSendAck(req, resp, state, data.size, EnumError_E_NONE);
 80043a2:	2300      	movs	r3, #0
 80043a4:	ee18 2a10 	vmov	r2, s16
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	4631      	mov	r1, r6
 80043ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80043ae:	4628      	mov	r0, r5
 80043b0:	f7fe fdce 	bl	8002f50 <aiPbMgrSendAck>
      aiPbMgrWaitAck();
 80043b4:	f108 081c 	add.w	r8, r8, #28
 80043b8:	f7fe fdd4 	bl	8002f64 <aiPbMgrWaitAck>
    if (res != true)
 80043bc:	e687      	b.n	80040ce <aiPbCmdNNRun+0x106>
  if ((simple_value) && (!direct_write))/* broadcast the value */
 80043be:	f1ba 0f00 	cmp.w	sl, #0
 80043c2:	d1ee      	bne.n	80043a2 <aiPbCmdNNRun+0x3da>
      const uintptr_t r_ptr = (uintptr_t)buffer->data;
 80043c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 80043c8:	f04f 0a01 	mov.w	sl, #1
      uintptr_t w_ptr = r_ptr + el_s;
 80043cc:	eb01 0b02 	add.w	fp, r1, r2
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 80043d0:	4640      	mov	r0, r8
 80043d2:	e9cd 2108 	strd	r2, r1, [sp, #32]
 80043d6:	f7ff fb8d 	bl	8003af4 <_get_buffer_size>
 80043da:	9a08      	ldr	r2, [sp, #32]
 80043dc:	fbb0 f0f2 	udiv	r0, r0, r2
 80043e0:	4582      	cmp	sl, r0
 80043e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80043e4:	d2dd      	bcs.n	80043a2 <aiPbCmdNNRun+0x3da>
        memcpy((void *)w_ptr, (void *)r_ptr, el_s);
 80043e6:	4658      	mov	r0, fp
 80043e8:	e9cd 1208 	strd	r1, r2, [sp, #32]
 80043ec:	f006 fa73 	bl	800a8d6 <memcpy>
        w_ptr += el_s;
 80043f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 80043f2:	9908      	ldr	r1, [sp, #32]
        w_ptr += el_s;
 80043f4:	4493      	add	fp, r2
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 80043f6:	f10a 0a01 	add.w	sl, sl, #1
 80043fa:	e7e9      	b.n	80043d0 <aiPbCmdNNRun+0x408>
  MON_STACK_MARK();
 80043fc:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8004400:	3303      	adds	r3, #3
 8004402:	f023 0303 	bic.w	r3, r3, #3
 8004406:	f04f 31de 	mov.w	r1, #3739147998	; 0xdededede
 800440a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800440e:	4293      	cmp	r3, r2
 8004410:	f4bf aeab 	bcs.w	800416a <aiPbCmdNNRun+0x1a2>
 8004414:	f843 1b04 	str.w	r1, [r3], #4
 8004418:	e7f7      	b.n	800440a <aiPbCmdNNRun+0x442>
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
 800441a:	6820      	ldr	r0, [r4, #0]
 800441c:	f000 fa13 	bl	8004846 <ai_mnetwork_get_error>
 8004420:	491a      	ldr	r1, [pc, #104]	; (800448c <aiPbCmdNNRun+0x4c4>)
 8004422:	f7fe fe81 	bl	8003128 <aiLogErr>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8004426:	230a      	movs	r3, #10
 8004428:	e5e6      	b.n	8003ff8 <aiPbCmdNNRun+0x30>
  MON_STACK_EVALUATE();
 800442a:	3004      	adds	r0, #4
 800442c:	3304      	adds	r3, #4
 800442e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004432:	e6da      	b.n	80041ea <aiPbCmdNNRun+0x222>
 8004434:	f04f 33ff 	mov.w	r3, #4294967295
 8004438:	4815      	ldr	r0, [pc, #84]	; (8004490 <aiPbCmdNNRun+0x4c8>)
 800443a:	9205      	str	r2, [sp, #20]
 800443c:	4659      	mov	r1, fp
 800443e:	f8c8 3008 	str.w	r3, [r8, #8]
 8004442:	f7ff f8a1 	bl	8003588 <lc_print>
 8004446:	4813      	ldr	r0, [pc, #76]	; (8004494 <aiPbCmdNNRun+0x4cc>)
 8004448:	f7ff f89e 	bl	8003588 <lc_print>
 800444c:	9a05      	ldr	r2, [sp, #20]
 800444e:	e6d9      	b.n	8004204 <aiPbCmdNNRun+0x23c>
    if (req->param & EnumRunParam_P_RUN_MODE_PERF) {
 8004450:	68ab      	ldr	r3, [r5, #8]
    if ((i + 1) == ctx->report.n_outputs) {
 8004452:	f108 0801 	add.w	r8, r8, #1
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 8004456:	f013 0f08 	tst.w	r3, #8
 800445a:	bf0c      	ite	eq
 800445c:	2302      	moveq	r3, #2
 800445e:	464b      	movne	r3, r9
    if ((i + 1) == ctx->report.n_outputs) {
 8004460:	4590      	cmp	r8, r2
      flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
 8004462:	bf08      	it	eq
 8004464:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 8004468:	f04f 0100 	mov.w	r1, #0
 800446c:	e9cd 3100 	strd	r3, r1, [sp]
      state = EnumState_S_DONE;
 8004470:	bf08      	it	eq
 8004472:	2203      	moveq	r2, #3
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 8004474:	4653      	mov	r3, sl
    EnumState state = EnumState_S_PROCESSING;
 8004476:	bf18      	it	ne
 8004478:	2202      	movne	r2, #2
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 800447a:	eeb0 0a48 	vmov.f32	s0, s16
 800447e:	4631      	mov	r1, r6
 8004480:	4628      	mov	r0, r5
 8004482:	f7ff fb6f 	bl	8003b64 <send_ai_io_tensor.isra.0>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8004486:	f10a 0a1c 	add.w	sl, sl, #28
 800448a:	e70b      	b.n	80042a4 <aiPbCmdNNRun+0x2dc>
 800448c:	0800cd91 	.word	0x0800cd91
 8004490:	0800cda1 	.word	0x0800cda1
 8004494:	0800cdc5 	.word	0x0800cdc5

08004498 <aiValidationInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiValidationInit(void)
{
 8004498:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LC_PRINT("\r\n#\r\n");
 800449a:	4c1f      	ldr	r4, [pc, #124]	; (8004518 <aiValidationInit+0x80>)
  port_dwt_reset();
 800449c:	4e1f      	ldr	r6, [pc, #124]	; (800451c <aiValidationInit+0x84>)
 800449e:	f204 2016 	addw	r0, r4, #534	; 0x216
 80044a2:	f7ff f871 	bl	8003588 <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 80044a6:	2301      	movs	r3, #1
 80044a8:	f504 7107 	add.w	r1, r4, #540	; 0x21c
 80044ac:	2207      	movs	r2, #7
 80044ae:	f204 202a 	addw	r0, r4, #554	; 0x22a
 80044b2:	f7ff f869 	bl	8003588 <lc_print>
 80044b6:	2500      	movs	r5, #0
  LC_PRINT("#\r\n");
 80044b8:	f204 2037 	addw	r0, r4, #567	; 0x237
 80044bc:	f7ff f864 	bl	8003588 <lc_print>

  systemSettingLog();
 80044c0:	f7ff f98e 	bl	80037e0 <systemSettingLog>
  port_dwt_init();
 80044c4:	f000 f924 	bl	8004710 <port_dwt_init_imp>
  port_dwt_reset();
 80044c8:	6075      	str	r5, [r6, #4]
  port_hal_delay(100);
 80044ca:	2064      	movs	r0, #100	; 0x64
 80044cc:	f7fc ffa6 	bl	800141c <HAL_Delay>
  st = port_dwt_get_cycles();
 80044d0:	6870      	ldr	r0, [r6, #4]
  dwtCyclesToTime(st/100, &t);
 80044d2:	466a      	mov	r2, sp
 80044d4:	2664      	movs	r6, #100	; 0x64
 80044d6:	4629      	mov	r1, r5
 80044d8:	fbb0 f0f6 	udiv	r0, r0, r6
 80044dc:	f7ff f8f2 	bl	80036c4 <dwtCyclesToTime>
  LC_PRINT(" Timestamp    : SysTick + DWT (delay(1)=%d.%03d ms)\r\n",
 80044e0:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 80044e4:	9a03      	ldr	r2, [sp, #12]
 80044e6:	fb06 3101 	mla	r1, r6, r1, r3
 80044ea:	f204 203b 	addw	r0, r4, #571	; 0x23b
 80044ee:	f7ff f84b 	bl	8003588 <lc_print>
  dwtCyclesToTime(UINT32_MAX, &t);
 80044f2:	466a      	mov	r2, sp
 80044f4:	2100      	movs	r1, #0
 80044f6:	f04f 30ff 	mov.w	r0, #4294967295
 80044fa:	f7ff f8e3 	bl	80036c4 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 80044fe:	9a01      	ldr	r2, [sp, #4]
 8004500:	9b02      	ldr	r3, [sp, #8]
 8004502:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004506:	fb01 3302 	mla	r3, r1, r2, r3
 800450a:	4a05      	ldr	r2, [pc, #20]	; (8004520 <aiValidationInit+0x88>)
 800450c:	6013      	str	r3, [r2, #0]
  port_dwt_init();
 800450e:	f000 f8ff 	bl	8004710 <port_dwt_init_imp>

  cyclesCounterInit();

  return 0;
}
 8004512:	4628      	mov	r0, r5
 8004514:	b004      	add	sp, #16
 8004516:	bd70      	pop	{r4, r5, r6, pc}
 8004518:	0800cc6b 	.word	0x0800cc6b
 800451c:	e0001000 	.word	0xe0001000
 8004520:	20001468 	.word	0x20001468

08004524 <aiValidationProcess>:

int aiValidationProcess(void)
{
 8004524:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8004528:	4c67      	ldr	r4, [pc, #412]	; (80046c8 <aiValidationProcess+0x1a4>)
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 800452a:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8004704 <aiValidationProcess+0x1e0>
      ctx->report.outputs[i].data = AI_HANDLE_PTR(data_outs[i]);
 800452e:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 8004708 <aiValidationProcess+0x1e4>
  aiPlatformVersion();
 8004532:	f7fe fde3 	bl	80030fc <aiPlatformVersion>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8004536:	2500      	movs	r5, #0
  LC_PRINT("Discovering the network(s)...\r\n");
 8004538:	4864      	ldr	r0, [pc, #400]	; (80046cc <aiValidationProcess+0x1a8>)
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 800453a:	f844 5b08 	str.w	r5, [r4], #8
  LC_PRINT("Discovering the network(s)...\r\n");
 800453e:	f7ff f823 	bl	8003588 <lc_print>
  idx = 0;
 8004542:	46a8      	mov	r8, r5
  int res = -1;
 8004544:	f04f 35ff 	mov.w	r5, #4294967295
    nn_name = ai_mnetwork_find(NULL, idx);
 8004548:	4641      	mov	r1, r8
 800454a:	2000      	movs	r0, #0
 800454c:	f000 f920 	bl	8004790 <ai_mnetwork_find>
    if (nn_name) {
 8004550:	4606      	mov	r6, r0
 8004552:	b1b0      	cbz	r0, 8004582 <aiValidationProcess+0x5e>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 8004554:	4601      	mov	r1, r0
 8004556:	4648      	mov	r0, r9
 8004558:	f7ff f816 	bl	8003588 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 800455c:	485c      	ldr	r0, [pc, #368]	; (80046d0 <aiValidationProcess+0x1ac>)
 800455e:	4631      	mov	r1, r6
 8004560:	f7ff f812 	bl	8003588 <lc_print>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 8004564:	2200      	movs	r2, #0
 8004566:	f1a4 0108 	sub.w	r1, r4, #8
 800456a:	4630      	mov	r0, r6
 800456c:	f000 f91e 	bl	80047ac <ai_mnetwork_create>
  if (err.type) {
 8004570:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 8004574:	d017      	beq.n	80045a6 <aiValidationProcess+0x82>
    aiLogErr(err, "ai_mnetwork_create");
 8004576:	4957      	ldr	r1, [pc, #348]	; (80046d4 <aiValidationProcess+0x1b0>)
 8004578:	f7fe fdd6 	bl	8003128 <aiLogErr>
        nn_name = NULL;
 800457c:	2600      	movs	r6, #0
    return -1;
 800457e:	f04f 35ff 	mov.w	r5, #4294967295
    idx++;
 8004582:	f108 0801 	add.w	r8, r8, #1
  } while (nn_name);
 8004586:	34a0      	adds	r4, #160	; 0xa0
 8004588:	2e00      	cmp	r6, #0
 800458a:	d1dd      	bne.n	8004548 <aiValidationProcess+0x24>
  int r;

  r = aiInit();
  if (r) {
 800458c:	2d00      	cmp	r5, #0
 800458e:	d077      	beq.n	8004680 <aiValidationProcess+0x15c>
    LC_PRINT("\r\nE:  aiInit() r=%d\r\n", r);
 8004590:	4851      	ldr	r0, [pc, #324]	; (80046d8 <aiValidationProcess+0x1b4>)
 8004592:	4629      	mov	r1, r5
 8004594:	f7fe fff8 	bl	8003588 <lc_print>
    port_hal_delay(2000);
 8004598:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800459c:	f7fc ff3e 	bl	800141c <HAL_Delay>
  do {
    r = aiPbMgrWaitAndProcess();
  } while (r==0);

  return r;
}
 80045a0:	4628      	mov	r0, r5
 80045a2:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  LC_PRINT("Initializing the network\r\n");
 80045a6:	484d      	ldr	r0, [pc, #308]	; (80046dc <aiValidationProcess+0x1b8>)
 80045a8:	f7fe ffee 	bl	8003588 <lc_print>
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 80045ac:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80045b0:	4621      	mov	r1, r4
 80045b2:	f000 f93d 	bl	8004830 <ai_mnetwork_get_report>
 80045b6:	4683      	mov	fp, r0
    err = ai_mnetwork_get_error(ctx->handle);
 80045b8:	f854 0c08 	ldr.w	r0, [r4, #-8]
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 80045bc:	f1bb 0f00 	cmp.w	fp, #0
 80045c0:	d10e      	bne.n	80045e0 <aiValidationProcess+0xbc>
    err = ai_mnetwork_get_error(ctx->handle);
 80045c2:	f000 f940 	bl	8004846 <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 80045c6:	4946      	ldr	r1, [pc, #280]	; (80046e0 <aiValidationProcess+0x1bc>)
 80045c8:	f7fe fdae 	bl	8003128 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 80045cc:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80045d0:	f000 f916 	bl	8004800 <ai_mnetwork_destroy>
        nn_name = NULL;
 80045d4:	465e      	mov	r6, fp
    ctx->handle = AI_HANDLE_NULL;
 80045d6:	f844 bc08 	str.w	fp, [r4, #-8]
    return -2;
 80045da:	f06f 0501 	mvn.w	r5, #1
 80045de:	e7d0      	b.n	8004582 <aiValidationProcess+0x5e>
  if (!ai_mnetwork_init(ctx->handle)) {
 80045e0:	f000 f93e 	bl	8004860 <ai_mnetwork_init>
 80045e4:	4683      	mov	fp, r0
 80045e6:	b980      	cbnz	r0, 800460a <aiValidationProcess+0xe6>
    err = ai_mnetwork_get_error(ctx->handle);
 80045e8:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80045ec:	f000 f92b 	bl	8004846 <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 80045f0:	493c      	ldr	r1, [pc, #240]	; (80046e4 <aiValidationProcess+0x1c0>)
 80045f2:	f7fe fd99 	bl	8003128 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 80045f6:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80045fa:	f000 f901 	bl	8004800 <ai_mnetwork_destroy>
        nn_name = NULL;
 80045fe:	465e      	mov	r6, fp
    ctx->handle = AI_HANDLE_NULL;
 8004600:	f844 bc08 	str.w	fp, [r4, #-8]
    return -4;
 8004604:	f06f 0503 	mvn.w	r5, #3
 8004608:	e7bb      	b.n	8004582 <aiValidationProcess+0x5e>
  if (ai_mnetwork_get_report(ctx->handle,
 800460a:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800460e:	4621      	mov	r1, r4
 8004610:	f000 f90e 	bl	8004830 <ai_mnetwork_get_report>
 8004614:	4683      	mov	fp, r0
 8004616:	b1b0      	cbz	r0, 8004646 <aiValidationProcess+0x122>
    aiPrintNetworkInfo(&ctx->report);
 8004618:	4620      	mov	r0, r4
 800461a:	f7fe fe93 	bl	8003344 <aiPrintNetworkInfo>
      ctx->report.inputs[i].data = AI_HANDLE_PTR(data_ins[i]);
 800461e:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 800470c <aiValidationProcess+0x1e8>
  ctx->inputs_in_activations = false;
 8004622:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
  ctx->outputs_in_activations = false;
 8004626:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 800462a:	4628      	mov	r0, r5
    if (!ctx->report.inputs[i].data)
 800462c:	211c      	movs	r1, #28
      ctx->inputs_in_activations = true;
 800462e:	2501      	movs	r5, #1
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8004630:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8004632:	4298      	cmp	r0, r3
 8004634:	db0a      	blt.n	800464c <aiValidationProcess+0x128>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8004636:	2300      	movs	r3, #0
    if (!ctx->report.outputs[i].data)
 8004638:	201c      	movs	r0, #28
      ctx->outputs_in_activations = true;
 800463a:	2501      	movs	r5, #1
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 800463c:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 800463e:	4293      	cmp	r3, r2
 8004640:	db11      	blt.n	8004666 <aiValidationProcess+0x142>
      res = aiBootstrap(&net_exec_ctx[idx], nn_name);
 8004642:	2500      	movs	r5, #0
 8004644:	e79d      	b.n	8004582 <aiValidationProcess+0x5e>
    err = ai_mnetwork_get_error(ctx->handle);
 8004646:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800464a:	e7ba      	b.n	80045c2 <aiValidationProcess+0x9e>
    if (!ctx->report.inputs[i].data)
 800464c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800464e:	fb01 3300 	mla	r3, r1, r0, r3
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	b922      	cbnz	r2, 8004660 <aiValidationProcess+0x13c>
      ctx->report.inputs[i].data = AI_HANDLE_PTR(data_ins[i]);
 8004656:	f85c 2020 	ldr.w	r2, [ip, r0, lsl #2]
 800465a:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 800465c:	3001      	adds	r0, #1
 800465e:	e7e7      	b.n	8004630 <aiValidationProcess+0x10c>
      ctx->inputs_in_activations = true;
 8004660:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
 8004664:	e7fa      	b.n	800465c <aiValidationProcess+0x138>
    if (!ctx->report.outputs[i].data)
 8004666:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004668:	fb00 2203 	mla	r2, r0, r3, r2
 800466c:	6851      	ldr	r1, [r2, #4]
 800466e:	b921      	cbnz	r1, 800467a <aiValidationProcess+0x156>
      ctx->report.outputs[i].data = AI_HANDLE_PTR(data_outs[i]);
 8004670:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
 8004674:	6051      	str	r1, [r2, #4]
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8004676:	3301      	adds	r3, #1
 8004678:	e7e0      	b.n	800463c <aiValidationProcess+0x118>
      ctx->outputs_in_activations = true;
 800467a:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
 800467e:	e7fa      	b.n	8004676 <aiValidationProcess+0x152>
    LC_PRINT("\r\n");
 8004680:	4819      	ldr	r0, [pc, #100]	; (80046e8 <aiValidationProcess+0x1c4>)
 8004682:	f7fe ff81 	bl	8003588 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 8004686:	4819      	ldr	r0, [pc, #100]	; (80046ec <aiValidationProcess+0x1c8>)
 8004688:	f7fe ff7e 	bl	8003588 <lc_print>
    LC_PRINT("| READY to receive a CMD from the HOST... |\r\n");
 800468c:	4818      	ldr	r0, [pc, #96]	; (80046f0 <aiValidationProcess+0x1cc>)
 800468e:	f7fe ff7b 	bl	8003588 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 8004692:	4816      	ldr	r0, [pc, #88]	; (80046ec <aiValidationProcess+0x1c8>)
 8004694:	f7fe ff78 	bl	8003588 <lc_print>
    LC_PRINT("\r\n");
 8004698:	4813      	ldr	r0, [pc, #76]	; (80046e8 <aiValidationProcess+0x1c4>)
 800469a:	f7fe ff75 	bl	8003588 <lc_print>
    LC_PRINT("# Note: At this point, default ASCII-base terminal should be closed\r\n");
 800469e:	4815      	ldr	r0, [pc, #84]	; (80046f4 <aiValidationProcess+0x1d0>)
 80046a0:	f7fe ff72 	bl	8003588 <lc_print>
    LC_PRINT("# and a serial COM interface should be used\r\n");
 80046a4:	4814      	ldr	r0, [pc, #80]	; (80046f8 <aiValidationProcess+0x1d4>)
 80046a6:	f7fe ff6f 	bl	8003588 <lc_print>
    LC_PRINT("# (i.e. Python ai_runner module). Protocol version = %d.%d\r\n",
 80046aa:	4814      	ldr	r0, [pc, #80]	; (80046fc <aiValidationProcess+0x1d8>)
 80046ac:	2201      	movs	r2, #1
 80046ae:	2103      	movs	r1, #3
 80046b0:	f7fe ff6a 	bl	8003588 <lc_print>
  aiPbMgrInit(pbCmdFuncTab);
 80046b4:	4812      	ldr	r0, [pc, #72]	; (8004700 <aiValidationProcess+0x1dc>)
 80046b6:	f7fe fb63 	bl	8002d80 <aiPbMgrInit>
    r = aiPbMgrWaitAndProcess();
 80046ba:	f7fe fc07 	bl	8002ecc <aiPbMgrWaitAndProcess>
  } while (r==0);
 80046be:	4605      	mov	r5, r0
 80046c0:	2800      	cmp	r0, #0
 80046c2:	d0fa      	beq.n	80046ba <aiValidationProcess+0x196>
 80046c4:	e76c      	b.n	80045a0 <aiValidationProcess+0x7c>
 80046c6:	bf00      	nop
 80046c8:	20001500 	.word	0x20001500
 80046cc:	0800cedc 	.word	0x0800cedc
 80046d0:	0800cf13 	.word	0x0800cf13
 80046d4:	0800cf31 	.word	0x0800cf31
 80046d8:	0800cf85 	.word	0x0800cf85
 80046dc:	0800cf44 	.word	0x0800cf44
 80046e0:	0800cf5f 	.word	0x0800cf5f
 80046e4:	0800cf74 	.word	0x0800cf74
 80046e8:	0800cf9b 	.word	0x0800cf9b
 80046ec:	0800cf9e 	.word	0x0800cf9e
 80046f0:	0800cfcc 	.word	0x0800cfcc
 80046f4:	0800cffa 	.word	0x0800cffa
 80046f8:	0800d040 	.word	0x0800d040
 80046fc:	0800d06e 	.word	0x0800d06e
 8004700:	20000010 	.word	0x20000010
 8004704:	0800cefc 	.word	0x0800cefc
 8004708:	20000054 	.word	0x20000054
 800470c:	20000050 	.word	0x20000050

08004710 <port_dwt_init_imp>:

#if defined(HAS_DWT_CTRL) && HAS_DWT_CTRL == 1

void port_dwt_init_imp()
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004710:	4a07      	ldr	r2, [pc, #28]	; (8004730 <port_dwt_init_imp+0x20>)
 8004712:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8004716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800471a:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif
  DWT->CYCCNT = 0;
 800471e:	4b05      	ldr	r3, [pc, #20]	; (8004734 <port_dwt_init_imp+0x24>)
 8004720:	2200      	movs	r2, #0
 8004722:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]
}
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	e000ed00 	.word	0xe000ed00
 8004734:	e0001000 	.word	0xe0001000

08004738 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8004738:	4b05      	ldr	r3, [pc, #20]	; (8004750 <ai_mnetwork_handle+0x18>)
 800473a:	b120      	cbz	r0, 8004746 <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 800473c:	4298      	cmp	r0, r3
 800473e:	bf0c      	ite	eq
 8004740:	4618      	moveq	r0, r3
 8004742:	2000      	movne	r0, #0
 8004744:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8004746:	681a      	ldr	r2, [r3, #0]
            return inst;
 8004748:	2a00      	cmp	r2, #0
 800474a:	bf08      	it	eq
 800474c:	4618      	moveq	r0, r3
}
 800474e:	4770      	bx	lr
 8004750:	200015e8 	.word	0x200015e8

08004754 <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 8004754:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 8004756:	4604      	mov	r4, r0
 8004758:	b160      	cbz	r0, 8004774 <ai_mnetwork_is_valid.constprop.0+0x20>
 800475a:	f7fb fd89 	bl	8000270 <strlen>
 800475e:	2807      	cmp	r0, #7
 8004760:	4602      	mov	r2, r0
 8004762:	d107      	bne.n	8004774 <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8004764:	4804      	ldr	r0, [pc, #16]	; (8004778 <ai_mnetwork_is_valid.constprop.0+0x24>)
 8004766:	4621      	mov	r1, r4
 8004768:	f006 f81b 	bl	800a7a2 <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 800476c:	fab0 f080 	clz	r0, r0
 8004770:	0940      	lsrs	r0, r0, #5
}
 8004772:	bd10      	pop	{r4, pc}
    return false;
 8004774:	2000      	movs	r0, #0
 8004776:	e7fc      	b.n	8004772 <ai_mnetwork_is_valid.constprop.0+0x1e>
 8004778:	0800d16e 	.word	0x0800d16e

0800477c <MX_X_CUBE_AI_Init>:
{
 800477c:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 800477e:	f7fc fd2f 	bl	80011e0 <MX_USART1_UART_Init>
}
 8004782:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiValidationInit();
 8004786:	f7ff be87 	b.w	8004498 <aiValidationInit>

0800478a <MX_X_CUBE_AI_Process>:
    aiValidationProcess();
 800478a:	f7ff becb 	b.w	8004524 <aiValidationProcess>
	...

08004790 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8004790:	b510      	push	{r4, lr}
 8004792:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 8004794:	f7ff ffde 	bl	8004754 <ai_mnetwork_is_valid.constprop.0>
 8004798:	b920      	cbnz	r0, 80047a4 <ai_mnetwork_find+0x14>
        else {
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
 800479a:	2c00      	cmp	r4, #0
 800479c:	4802      	ldr	r0, [pc, #8]	; (80047a8 <ai_mnetwork_find+0x18>)
 800479e:	bf18      	it	ne
 80047a0:	2000      	movne	r0, #0
}
 80047a2:	bd10      	pop	{r4, pc}
            return entry->name;
 80047a4:	4800      	ldr	r0, [pc, #0]	; (80047a8 <ai_mnetwork_find+0x18>)
 80047a6:	e7fc      	b.n	80047a2 <ai_mnetwork_find+0x12>
 80047a8:	0800d16e 	.word	0x0800d16e

080047ac <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 80047ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047ae:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 80047b0:	2000      	movs	r0, #0
{
 80047b2:	9201      	str	r2, [sp, #4]
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 80047b4:	f7ff ffc0 	bl	8004738 <ai_mnetwork_handle>
{
 80047b8:	460d      	mov	r5, r1

    if (!inst) {
 80047ba:	4604      	mov	r4, r0
 80047bc:	b1e0      	cbz	r0, 80047f8 <ai_mnetwork_create+0x4c>
        return err;
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry)) {
 80047be:	4630      	mov	r0, r6
 80047c0:	f7ff ffc8 	bl	8004754 <ai_mnetwork_is_valid.constprop.0>
 80047c4:	9901      	ldr	r1, [sp, #4]
 80047c6:	b910      	cbnz	r0, 80047ce <ai_mnetwork_create+0x22>
 80047c8:	2214      	movs	r2, #20
 80047ca:	2310      	movs	r3, #16
 80047cc:	e00d      	b.n	80047ea <ai_mnetwork_create+0x3e>
    }

    if (network_config == NULL)
        err = found->ai_create(network, found->config);
    else
        err = found->ai_create(network, network_config);
 80047ce:	4628      	mov	r0, r5
 80047d0:	f000 fbe0 	bl	8004f94 <ai_network_create>
 80047d4:	b2c2      	uxtb	r2, r0
 80047d6:	f3c0 2317 	ubfx	r3, r0, #8, #24
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 80047da:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 80047de:	d104      	bne.n	80047ea <ai_mnetwork_create+0x3e>
        inst->entry = found;
 80047e0:	4906      	ldr	r1, [pc, #24]	; (80047fc <ai_mnetwork_create+0x50>)
 80047e2:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 80047e4:	6829      	ldr	r1, [r5, #0]
 80047e6:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 80047e8:	602c      	str	r4, [r5, #0]
        return err;
 80047ea:	2000      	movs	r0, #0
 80047ec:	f362 0007 	bfi	r0, r2, #0, #8
 80047f0:	f363 201f 	bfi	r0, r3, #8, #24
    }

    return err;
}
 80047f4:	b002      	add	sp, #8
 80047f6:	bd70      	pop	{r4, r5, r6, pc}
 80047f8:	2231      	movs	r2, #49	; 0x31
 80047fa:	e7e6      	b.n	80047ca <ai_mnetwork_create+0x1e>
 80047fc:	0800d178 	.word	0x0800d178

08004800 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8004800:	b538      	push	{r3, r4, r5, lr}
 8004802:	4604      	mov	r4, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004804:	f7ff ff98 	bl	8004738 <ai_mnetwork_handle>
    if (inn) {
 8004808:	4605      	mov	r5, r0
 800480a:	b160      	cbz	r0, 8004826 <ai_mnetwork_destroy+0x26>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 800480c:	6803      	ldr	r3, [r0, #0]
 800480e:	6840      	ldr	r0, [r0, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	4798      	blx	r3
        if (hdl != inn->handle) {
 8004814:	686b      	ldr	r3, [r5, #4]
 8004816:	4283      	cmp	r3, r0
 8004818:	d005      	beq.n	8004826 <ai_mnetwork_destroy+0x26>
        if ((inst) && (&gnetworks[i] == inst)) {
 800481a:	4b04      	ldr	r3, [pc, #16]	; (800482c <ai_mnetwork_destroy+0x2c>)
 800481c:	429d      	cmp	r5, r3
 800481e:	f04f 0400 	mov.w	r4, #0
 8004822:	d100      	bne.n	8004826 <ai_mnetwork_destroy+0x26>
            gnetworks[i].entry = NULL;
 8004824:	602c      	str	r4, [r5, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
        }
    }
    return network;
}
 8004826:	4620      	mov	r0, r4
 8004828:	bd38      	pop	{r3, r4, r5, pc}
 800482a:	bf00      	nop
 800482c:	200015e8 	.word	0x200015e8

08004830 <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 8004830:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004832:	f7ff ff81 	bl	8004738 <ai_mnetwork_handle>
    if (inn)
 8004836:	b128      	cbz	r0, 8004844 <ai_mnetwork_get_report+0x14>
        return inn->entry->ai_get_report(inn->handle, report);
 8004838:	6802      	ldr	r2, [r0, #0]
 800483a:	6840      	ldr	r0, [r0, #4]
 800483c:	68d2      	ldr	r2, [r2, #12]
    else
        return false;
}
 800483e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_report(inn->handle, report);
 8004842:	4710      	bx	r2
}
 8004844:	bd10      	pop	{r4, pc}

08004846 <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 8004846:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004848:	f7ff ff76 	bl	8004738 <ai_mnetwork_handle>
    if (inn)
 800484c:	b128      	cbz	r0, 800485a <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 800484e:	6803      	ldr	r3, [r0, #0]
 8004850:	6840      	ldr	r0, [r0, #4]
 8004852:	695b      	ldr	r3, [r3, #20]
    else
        return err;
}
 8004854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 8004858:	4718      	bx	r3
}
 800485a:	f241 0014 	movw	r0, #4116	; 0x1014
 800485e:	bd10      	pop	{r4, pc}

08004860 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 8004860:	b530      	push	{r4, r5, lr}
 8004862:	b08f      	sub	sp, #60	; 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004864:	f7ff ff68 	bl	8004738 <ai_mnetwork_handle>
    if (inn) {
 8004868:	4604      	mov	r4, r0
 800486a:	b168      	cbz	r0, 8004888 <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 800486c:	6803      	ldr	r3, [r0, #0]
 800486e:	4668      	mov	r0, sp
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 8004874:	2500      	movs	r5, #0
 8004876:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 800487a:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 800487c:	42aa      	cmp	r2, r5
 800487e:	dc05      	bgt.n	800488c <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	6860      	ldr	r0, [r4, #4]
 8004884:	4669      	mov	r1, sp
 8004886:	4798      	blx	r3
    }
    else
        return false;
}
 8004888:	b00f      	add	sp, #60	; 0x3c
 800488a:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	4629      	mov	r1, r5
 8004890:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8004894:	a803      	add	r0, sp, #12
 8004896:	f001 fd7b 	bl	8006390 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 800489a:	3501      	adds	r5, #1
 800489c:	e7eb      	b.n	8004876 <ai_mnetwork_init+0x16>

0800489e <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 800489e:	b513      	push	{r0, r1, r4, lr}
 80048a0:	9201      	str	r2, [sp, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80048a2:	f7ff ff49 	bl	8004738 <ai_mnetwork_handle>
    if (inn)
 80048a6:	4603      	mov	r3, r0
 80048a8:	b140      	cbz	r0, 80048bc <ai_mnetwork_run+0x1e>
        return inn->entry->ai_run(inn->handle, input, output);
 80048aa:	6800      	ldr	r0, [r0, #0]
 80048ac:	9a01      	ldr	r2, [sp, #4]
 80048ae:	6a04      	ldr	r4, [r0, #32]
 80048b0:	6858      	ldr	r0, [r3, #4]
 80048b2:	4623      	mov	r3, r4
    else
        return 0;
}
 80048b4:	b002      	add	sp, #8
 80048b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 80048ba:	4718      	bx	r3
}
 80048bc:	b002      	add	sp, #8
 80048be:	bd10      	pop	{r4, pc}

080048c0 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 80048c0:	b538      	push	{r3, r4, r5, lr}
 80048c2:	4615      	mov	r5, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 80048c4:	f7ff ff38 	bl	8004738 <ai_mnetwork_handle>
     if (inn && phandle && pparams) {
 80048c8:	b188      	cbz	r0, 80048ee <ai_mnetwork_get_private_handle+0x2e>
 80048ca:	b181      	cbz	r1, 80048ee <ai_mnetwork_get_private_handle+0x2e>
 80048cc:	b17d      	cbz	r5, 80048ee <ai_mnetwork_get_private_handle+0x2e>
         *phandle = inn->handle;
 80048ce:	6843      	ldr	r3, [r0, #4]
 80048d0:	600b      	str	r3, [r1, #0]
         *pparams = inn->params;
 80048d2:	f100 0408 	add.w	r4, r0, #8
 80048d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048e6:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 80048ea:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 80048ec:	bd38      	pop	{r3, r4, r5, pc}
         return -1;
 80048ee:	f04f 30ff 	mov.w	r0, #4294967295
 80048f2:	e7fb      	b.n	80048ec <ai_mnetwork_get_private_handle+0x2c>

080048f4 <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 80048f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 80048f8:	6896      	ldr	r6, [r2, #8]
{
 80048fa:	b091      	sub	sp, #68	; 0x44
  buf[idx--] = 0;
 80048fc:	2500      	movs	r5, #0
  if (specifier->flags & FLAG_IS_SIGNED) {
 80048fe:	f016 0304 	ands.w	r3, r6, #4
{
 8004902:	4614      	mov	r4, r2
  buf[idx--] = 0;
 8004904:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 8004908:	d028      	beq.n	800495c <_write_number+0x68>
    if ((int64_t)number < 0) {
 800490a:	42a9      	cmp	r1, r5
 800490c:	da07      	bge.n	800491e <_write_number+0x2a>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 800490e:	6813      	ldr	r3, [r2, #0]
      number = -number;
 8004910:	4240      	negs	r0, r0
      specifier->width -= 1;
 8004912:	f103 33ff 	add.w	r3, r3, #4294967295
      number = -number;
 8004916:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 800491a:	6013      	str	r3, [r2, #0]
      sign_neg = '-';
 800491c:	252d      	movs	r5, #45	; 0x2d
 800491e:	f016 0f08 	tst.w	r6, #8
 8004922:	bf14      	ite	ne
 8004924:	f04f 0841 	movne.w	r8, #65	; 0x41
 8004928:	f04f 0861 	moveq.w	r8, #97	; 0x61
 800492c:	f10d 093f 	add.w	r9, sp, #63	; 0x3f
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004930:	273e      	movs	r7, #62	; 0x3e
    if (specifier->flags & FLAG_HEX) {
 8004932:	f006 0a10 	and.w	sl, r6, #16
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004936:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 800493a:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 800493e:	f1ba 0f00 	cmp.w	sl, #0
 8004942:	d033      	beq.n	80049ac <_write_number+0xb8>
      chr = number & 0x0F;
 8004944:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 8004948:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 800494a:	2b09      	cmp	r3, #9
      t = number >> 4;
 800494c:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8004950:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004954:	d906      	bls.n	8004964 <_write_number+0x70>
 8004956:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 8004958:	b2db      	uxtb	r3, r3
 800495a:	e004      	b.n	8004966 <_write_number+0x72>
  char sign_neg = 0;
 800495c:	461d      	mov	r5, r3
 800495e:	e7de      	b.n	800491e <_write_number+0x2a>
    }
    number = t;
    buf[idx--] = chr;
 8004960:	4617      	mov	r7, r2
 8004962:	e7ea      	b.n	800493a <_write_number+0x46>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004964:	3330      	adds	r3, #48	; 0x30
    buf[idx--] = chr;
 8004966:	f809 3d01 	strb.w	r3, [r9, #-1]!
    count++;
  } while (number);
 800496a:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 800496e:	f107 32ff 	add.w	r2, r7, #4294967295
    count++;
 8004972:	f1c7 0b3f 	rsb	fp, r7, #63	; 0x3f
  } while (number);
 8004976:	d1f3      	bne.n	8004960 <_write_number+0x6c>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 8004978:	f006 0101 	and.w	r1, r6, #1
 800497c:	b155      	cbz	r5, 8004994 <_write_number+0xa0>
 800497e:	b949      	cbnz	r1, 8004994 <_write_number+0xa0>
    buf[idx--] = sign_neg;
 8004980:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8004984:	eb0d 0203 	add.w	r2, sp, r3
 8004988:	232d      	movs	r3, #45	; 0x2d
 800498a:	f802 3c40 	strb.w	r3, [r2, #-64]
    count++;
 800498e:	f1c7 0b40 	rsb	fp, r7, #64	; 0x40
    buf[idx--] = sign_neg;
 8004992:	1eba      	subs	r2, r7, #2
 8004994:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	bf14      	ite	ne
 800499a:	2130      	movne	r1, #48	; 0x30
 800499c:	2120      	moveq	r1, #32
 800499e:	f006 0602 	and.w	r6, r6, #2
 80049a2:	455b      	cmp	r3, fp
 80049a4:	dd13      	ble.n	80049ce <_write_number+0xda>
 80049a6:	b166      	cbz	r6, 80049c2 <_write_number+0xce>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 80049a8:	b9a5      	cbnz	r5, 80049d4 <_write_number+0xe0>
 80049aa:	e01c      	b.n	80049e6 <_write_number+0xf2>
      t = number / 10;
 80049ac:	220a      	movs	r2, #10
 80049ae:	2300      	movs	r3, #0
 80049b0:	f7fc fa08 	bl	8000dc4 <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 80049b4:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 80049b8:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80049bc:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80049c0:	e7ca      	b.n	8004958 <_write_number+0x64>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 80049c2:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 80049c6:	f10b 0b01 	add.w	fp, fp, #1
 80049ca:	3a01      	subs	r2, #1
 80049cc:	e7e9      	b.n	80049a2 <_write_number+0xae>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 80049ce:	b155      	cbz	r5, 80049e6 <_write_number+0xf2>
 80049d0:	455b      	cmp	r3, fp
 80049d2:	d108      	bne.n	80049e6 <_write_number+0xf2>
    buf[idx--] = sign_neg;
 80049d4:	f102 0340 	add.w	r3, r2, #64	; 0x40
 80049d8:	446b      	add	r3, sp
 80049da:	212d      	movs	r1, #45	; 0x2d
 80049dc:	f803 1c40 	strb.w	r1, [r3, #-64]
    count++;
 80049e0:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 80049e4:	3a01      	subs	r2, #1
  }

  idx++;


  for(int i = 0; i < count; i++) {
 80049e6:	eb0d 0602 	add.w	r6, sp, r2
 80049ea:	2500      	movs	r5, #0
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 80049ec:	68e3      	ldr	r3, [r4, #12]
 80049ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80049f2:	6920      	ldr	r0, [r4, #16]
  for(int i = 0; i < count; i++) {
 80049f4:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 80049f6:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 80049f8:	45ab      	cmp	fp, r5
 80049fa:	d1f7      	bne.n	80049ec <_write_number+0xf8>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 80049fc:	68a3      	ldr	r3, [r4, #8]
 80049fe:	079b      	lsls	r3, r3, #30
 8004a00:	d408      	bmi.n	8004a14 <_write_number+0x120>
      _WRITE_C(' ');
    }
  }

  return count;
}
 8004a02:	4628      	mov	r0, r5
 8004a04:	b011      	add	sp, #68	; 0x44
 8004a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 8004a0a:	68e3      	ldr	r3, [r4, #12]
 8004a0c:	6920      	ldr	r0, [r4, #16]
 8004a0e:	2120      	movs	r1, #32
 8004a10:	4798      	blx	r3
 8004a12:	3501      	adds	r5, #1
    while (count < specifier->width) {
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	42ab      	cmp	r3, r5
 8004a18:	dcf7      	bgt.n	8004a0a <_write_number+0x116>
 8004a1a:	e7f2      	b.n	8004a02 <_write_number+0x10e>

08004a1c <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 8004a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a20:	ed2d 8b02 	vpush	{d8}
 8004a24:	ee08 1a10 	vmov	s16, r1
 8004a28:	b09d      	sub	sp, #116	; 0x74
 8004a2a:	4682      	mov	sl, r0
 8004a2c:	461c      	mov	r4, r3
  char c, t;
  int count = 0;
 8004a2e:	f04f 0b00 	mov.w	fp, #0
  return *(*fmtP)++;
 8004a32:	4613      	mov	r3, r2
 8004a34:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004a38:	9301      	str	r3, [sp, #4]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 8004a3a:	b929      	cbnz	r1, 8004a48 <vlc_print+0x2c>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 8004a3c:	4658      	mov	r0, fp
 8004a3e:	b01d      	add	sp, #116	; 0x74
 8004a40:	ecbd 8b02 	vpop	{d8}
 8004a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 8004a48:	290a      	cmp	r1, #10
 8004a4a:	d105      	bne.n	8004a58 <vlc_print+0x3c>
      putc_fct(user, c);
 8004a4c:	ee18 0a10 	vmov	r0, s16
 8004a50:	47d0      	blx	sl
      count++;
 8004a52:	f10b 0b01 	add.w	fp, fp, #1
 8004a56:	e10c      	b.n	8004c72 <vlc_print+0x256>
    else if (c == '%')
 8004a58:	2925      	cmp	r1, #37	; 0x25
 8004a5a:	d1f7      	bne.n	8004a4c <vlc_print+0x30>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004a62:	e9cd 3a09 	strd	r3, sl, [sp, #36]	; 0x24
 8004a66:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8004a6a:	461e      	mov	r6, r3
 8004a6c:	461f      	mov	r7, r3
 8004a6e:	461a      	mov	r2, r3
 8004a70:	469c      	mov	ip, r3
 8004a72:	4618      	mov	r0, r3
      int long_type = 0;
 8004a74:	9302      	str	r3, [sp, #8]
      bool has_precision = false;
 8004a76:	469e      	mov	lr, r3
 8004a78:	f04f 080a 	mov.w	r8, #10
  return *(*fmtP)++;
 8004a7c:	9d01      	ldr	r5, [sp, #4]
 8004a7e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8004a82:	9501      	str	r5, [sp, #4]
        if (!c)
 8004a84:	b321      	cbz	r1, 8004ad0 <vlc_print+0xb4>
        else if (c == '0')
 8004a86:	2939      	cmp	r1, #57	; 0x39
 8004a88:	d814      	bhi.n	8004ab4 <vlc_print+0x98>
 8004a8a:	292c      	cmp	r1, #44	; 0x2c
 8004a8c:	d91d      	bls.n	8004aca <vlc_print+0xae>
 8004a8e:	f1a1 052d 	sub.w	r5, r1, #45	; 0x2d
 8004a92:	2d0c      	cmp	r5, #12
 8004a94:	d810      	bhi.n	8004ab8 <vlc_print+0x9c>
 8004a96:	e8df f015 	tbh	[pc, r5, lsl #1]
 8004a9a:	0048      	.short	0x0048
 8004a9c:	000f0210 	.word	0x000f0210
 8004aa0:	004b0033 	.word	0x004b0033
 8004aa4:	004b004b 	.word	0x004b004b
 8004aa8:	004b004b 	.word	0x004b004b
 8004aac:	004b004b 	.word	0x004b004b
 8004ab0:	004b004b 	.word	0x004b004b
 8004ab4:	296c      	cmp	r1, #108	; 0x6c
 8004ab6:	d045      	beq.n	8004b44 <vlc_print+0x128>
          switch(c)
 8004ab8:	2978      	cmp	r1, #120	; 0x78
 8004aba:	d809      	bhi.n	8004ad0 <vlc_print+0xb4>
 8004abc:	2962      	cmp	r1, #98	; 0x62
 8004abe:	d845      	bhi.n	8004b4c <vlc_print+0x130>
 8004ac0:	2946      	cmp	r1, #70	; 0x46
 8004ac2:	f000 8118 	beq.w	8004cf6 <vlc_print+0x2da>
 8004ac6:	2958      	cmp	r1, #88	; 0x58
 8004ac8:	d074      	beq.n	8004bb4 <vlc_print+0x198>
 8004aca:	2925      	cmp	r1, #37	; 0x25
 8004acc:	f000 8093 	beq.w	8004bf6 <vlc_print+0x1da>
 8004ad0:	b103      	cbz	r3, 8004ad4 <vlc_print+0xb8>
 8004ad2:	9609      	str	r6, [sp, #36]	; 0x24
 8004ad4:	b107      	cbz	r7, 8004ad8 <vlc_print+0xbc>
 8004ad6:	9208      	str	r2, [sp, #32]
 8004ad8:	f1bc 0f00 	cmp.w	ip, #0
 8004adc:	d000      	beq.n	8004ae0 <vlc_print+0xc4>
 8004ade:	9007      	str	r0, [sp, #28]
        putc_fct(user, '<');
 8004ae0:	ee18 0a10 	vmov	r0, s16
 8004ae4:	213c      	movs	r1, #60	; 0x3c
 8004ae6:	47d0      	blx	sl
        putc_fct(user, '!');
 8004ae8:	ee18 0a10 	vmov	r0, s16
 8004aec:	2121      	movs	r1, #33	; 0x21
 8004aee:	47d0      	blx	sl
        putc_fct(user, '>');
 8004af0:	ee18 0a10 	vmov	r0, s16
 8004af4:	213e      	movs	r1, #62	; 0x3e
 8004af6:	47d0      	blx	sl
        va_arg(vl, signed long);
 8004af8:	3404      	adds	r4, #4
        count += 3;
 8004afa:	f10b 0b03 	add.w	fp, fp, #3
        error = false;
 8004afe:	e0b8      	b.n	8004c72 <vlc_print+0x256>
          if (!specifier.width && !specifier.precision) {
 8004b00:	ea50 0102 	orrs.w	r1, r0, r2
 8004b04:	d105      	bne.n	8004b12 <vlc_print+0xf6>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8004b06:	f046 0601 	orr.w	r6, r6, #1
 8004b0a:	460a      	mov	r2, r1
 8004b0c:	4608      	mov	r0, r1
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e7b4      	b.n	8004a7c <vlc_print+0x60>
          } else if (has_precision) {
 8004b12:	f1be 0f00 	cmp.w	lr, #0
 8004b16:	d003      	beq.n	8004b20 <vlc_print+0x104>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004b18:	fb08 f202 	mul.w	r2, r8, r2
 8004b1c:	4677      	mov	r7, lr
 8004b1e:	e7ad      	b.n	8004a7c <vlc_print+0x60>
            specifier.width = specifier.width * 10 + (c - '0');
 8004b20:	fb08 f000 	mul.w	r0, r8, r0
            specifier.width = specifier.width * 10 + (c - '0');
 8004b24:	f04f 0c01 	mov.w	ip, #1
 8004b28:	e7a8      	b.n	8004a7c <vlc_print+0x60>
          specifier.flags |= FLAG_NEG_PAD;
 8004b2a:	f046 0602 	orr.w	r6, r6, #2
 8004b2e:	e7ee      	b.n	8004b0e <vlc_print+0xf2>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004b30:	3930      	subs	r1, #48	; 0x30
          if (has_precision) {
 8004b32:	f1be 0f00 	cmp.w	lr, #0
 8004b36:	d002      	beq.n	8004b3e <vlc_print+0x122>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004b38:	fb08 1202 	mla	r2, r8, r2, r1
 8004b3c:	e7ee      	b.n	8004b1c <vlc_print+0x100>
            specifier.width = specifier.width * 10 + (c - '0');
 8004b3e:	fb08 1000 	mla	r0, r8, r0, r1
 8004b42:	e7ef      	b.n	8004b24 <vlc_print+0x108>
          long_type += 1;
 8004b44:	9902      	ldr	r1, [sp, #8]
 8004b46:	3101      	adds	r1, #1
 8004b48:	9102      	str	r1, [sp, #8]
 8004b4a:	e797      	b.n	8004a7c <vlc_print+0x60>
          switch(c)
 8004b4c:	3963      	subs	r1, #99	; 0x63
 8004b4e:	2915      	cmp	r1, #21
 8004b50:	d8be      	bhi.n	8004ad0 <vlc_print+0xb4>
 8004b52:	f20f 0e08 	addw	lr, pc, #8
 8004b56:	f85e f021 	ldr.w	pc, [lr, r1, lsl #2]
 8004b5a:	bf00      	nop
 8004b5c:	08004c0b 	.word	0x08004c0b
 8004b60:	08004ccd 	.word	0x08004ccd
 8004b64:	08004ad1 	.word	0x08004ad1
 8004b68:	08004cf7 	.word	0x08004cf7
 8004b6c:	08004ad1 	.word	0x08004ad1
 8004b70:	08004ad1 	.word	0x08004ad1
 8004b74:	08004ccd 	.word	0x08004ccd
 8004b78:	08004ad1 	.word	0x08004ad1
 8004b7c:	08004ad1 	.word	0x08004ad1
 8004b80:	08004ad1 	.word	0x08004ad1
 8004b84:	08004ad1 	.word	0x08004ad1
 8004b88:	08004ad1 	.word	0x08004ad1
 8004b8c:	08004ad1 	.word	0x08004ad1
 8004b90:	08004cb7 	.word	0x08004cb7
 8004b94:	08004ad1 	.word	0x08004ad1
 8004b98:	08004ad1 	.word	0x08004ad1
 8004b9c:	08004c21 	.word	0x08004c21
 8004ba0:	08004ad1 	.word	0x08004ad1
 8004ba4:	08004ec1 	.word	0x08004ec1
 8004ba8:	08004ad1 	.word	0x08004ad1
 8004bac:	08004ad1 	.word	0x08004ad1
 8004bb0:	08004bcf 	.word	0x08004bcf
 8004bb4:	b103      	cbz	r3, 8004bb8 <vlc_print+0x19c>
 8004bb6:	9609      	str	r6, [sp, #36]	; 0x24
 8004bb8:	b107      	cbz	r7, 8004bbc <vlc_print+0x1a0>
 8004bba:	9208      	str	r2, [sp, #32]
 8004bbc:	f1bc 0f00 	cmp.w	ip, #0
 8004bc0:	d000      	beq.n	8004bc4 <vlc_print+0x1a8>
 8004bc2:	9007      	str	r0, [sp, #28]
            specifier.flags |= FLAG_CAPS;
 8004bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bc6:	f043 0308 	orr.w	r3, r3, #8
 8004bca:	9309      	str	r3, [sp, #36]	; 0x24
 8004bcc:	e007      	b.n	8004bde <vlc_print+0x1c2>
 8004bce:	b103      	cbz	r3, 8004bd2 <vlc_print+0x1b6>
 8004bd0:	9609      	str	r6, [sp, #36]	; 0x24
 8004bd2:	b107      	cbz	r7, 8004bd6 <vlc_print+0x1ba>
 8004bd4:	9208      	str	r2, [sp, #32]
 8004bd6:	f1bc 0f00 	cmp.w	ip, #0
 8004bda:	d000      	beq.n	8004bde <vlc_print+0x1c2>
 8004bdc:	9007      	str	r0, [sp, #28]
            specifier.flags |= FLAG_HEX;
 8004bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 8004be0:	f854 0b04 	ldr.w	r0, [r4], #4
            specifier.flags |= FLAG_HEX;
 8004be4:	f043 0310 	orr.w	r3, r3, #16
            count += _write_number(val, &specifier);
 8004be8:	aa07      	add	r2, sp, #28
 8004bea:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 8004bec:	9309      	str	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 8004bee:	f7ff fe81 	bl	80048f4 <_write_number>
 8004bf2:	4483      	add	fp, r0
            break;
 8004bf4:	e03d      	b.n	8004c72 <vlc_print+0x256>
 8004bf6:	b103      	cbz	r3, 8004bfa <vlc_print+0x1de>
 8004bf8:	9609      	str	r6, [sp, #36]	; 0x24
 8004bfa:	b107      	cbz	r7, 8004bfe <vlc_print+0x1e2>
 8004bfc:	9208      	str	r2, [sp, #32]
 8004bfe:	f1bc 0f00 	cmp.w	ip, #0
 8004c02:	d000      	beq.n	8004c06 <vlc_print+0x1ea>
 8004c04:	9007      	str	r0, [sp, #28]
            putc_fct(user, c);
 8004c06:	2125      	movs	r1, #37	; 0x25
 8004c08:	e720      	b.n	8004a4c <vlc_print+0x30>
 8004c0a:	b103      	cbz	r3, 8004c0e <vlc_print+0x1f2>
 8004c0c:	9609      	str	r6, [sp, #36]	; 0x24
 8004c0e:	b107      	cbz	r7, 8004c12 <vlc_print+0x1f6>
 8004c10:	9208      	str	r2, [sp, #32]
 8004c12:	f1bc 0f00 	cmp.w	ip, #0
 8004c16:	d000      	beq.n	8004c1a <vlc_print+0x1fe>
 8004c18:	9007      	str	r0, [sp, #28]
            putc_fct(user, t);
 8004c1a:	f814 1b04 	ldrb.w	r1, [r4], #4
 8004c1e:	e715      	b.n	8004a4c <vlc_print+0x30>
 8004c20:	b103      	cbz	r3, 8004c24 <vlc_print+0x208>
 8004c22:	9609      	str	r6, [sp, #36]	; 0x24
 8004c24:	b107      	cbz	r7, 8004c28 <vlc_print+0x20c>
 8004c26:	9208      	str	r2, [sp, #32]
 8004c28:	f1bc 0f00 	cmp.w	ip, #0
 8004c2c:	d000      	beq.n	8004c30 <vlc_print+0x214>
 8004c2e:	9007      	str	r0, [sp, #28]
            if (!str) str = "(null)";
 8004c30:	4baa      	ldr	r3, [pc, #680]	; (8004edc <vlc_print+0x4c0>)
            str = va_arg(vl, char*);
 8004c32:	f854 9b04 	ldr.w	r9, [r4], #4
            if (!str) str = "(null)";
 8004c36:	f1b9 0f00 	cmp.w	r9, #0
 8004c3a:	bf08      	it	eq
 8004c3c:	4699      	moveq	r9, r3
  int len = strlen(str);
 8004c3e:	4648      	mov	r0, r9
 8004c40:	f7fb fb16 	bl	8000270 <strlen>
  if (specifier->precision) {
 8004c44:	9b08      	ldr	r3, [sp, #32]
  int len = strlen(str);
 8004c46:	4607      	mov	r7, r0
  if (specifier->precision) {
 8004c48:	b113      	cbz	r3, 8004c50 <vlc_print+0x234>
    len = (len > specifier->precision)?specifier->precision:len;
 8004c4a:	4298      	cmp	r0, r3
 8004c4c:	bfa8      	it	ge
 8004c4e:	461f      	movge	r7, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 8004c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c52:	f013 0802 	ands.w	r8, r3, #2
 8004c56:	d018      	beq.n	8004c8a <vlc_print+0x26e>
  int count = 0;
 8004c58:	2600      	movs	r6, #0
 8004c5a:	464a      	mov	r2, r9
  for (int i = 0; i < len; i++) {
 8004c5c:	eba2 0309 	sub.w	r3, r2, r9
 8004c60:	429f      	cmp	r7, r3
 8004c62:	dc14      	bgt.n	8004c8e <vlc_print+0x272>
 8004c64:	2f00      	cmp	r7, #0
 8004c66:	bfa8      	it	ge
 8004c68:	19f6      	addge	r6, r6, r7
  if (specifier->flags & FLAG_NEG_PAD) {
 8004c6a:	f1b8 0f00 	cmp.w	r8, #0
 8004c6e:	d120      	bne.n	8004cb2 <vlc_print+0x296>
            count += _write_string(str, &specifier);
 8004c70:	44b3      	add	fp, r6
            break;
 8004c72:	9a01      	ldr	r2, [sp, #4]
 8004c74:	e6dd      	b.n	8004a32 <vlc_print+0x16>
      _WRITE_C(' ');
 8004c76:	ee18 0a10 	vmov	r0, s16
 8004c7a:	2120      	movs	r1, #32
 8004c7c:	47d0      	blx	sl
 8004c7e:	3601      	adds	r6, #1
    for(int i = len; i < specifier->width; i++) {
 8004c80:	9a07      	ldr	r2, [sp, #28]
 8004c82:	19bb      	adds	r3, r7, r6
 8004c84:	429a      	cmp	r2, r3
 8004c86:	dcf6      	bgt.n	8004c76 <vlc_print+0x25a>
 8004c88:	e7e7      	b.n	8004c5a <vlc_print+0x23e>
  int count = 0;
 8004c8a:	4646      	mov	r6, r8
 8004c8c:	e7f8      	b.n	8004c80 <vlc_print+0x264>
    _WRITE_C(*str++);
 8004c8e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004c92:	9202      	str	r2, [sp, #8]
 8004c94:	ee18 0a10 	vmov	r0, s16
 8004c98:	47d0      	blx	sl
 8004c9a:	9a02      	ldr	r2, [sp, #8]
  for (int i = 0; i < len; i++) {
 8004c9c:	e7de      	b.n	8004c5c <vlc_print+0x240>
      _WRITE_C(' ');
 8004c9e:	ee18 0a10 	vmov	r0, s16
 8004ca2:	2120      	movs	r1, #32
 8004ca4:	47d0      	blx	sl
 8004ca6:	3601      	adds	r6, #1
    for(int i = len; i < specifier->width; i++) {
 8004ca8:	9a07      	ldr	r2, [sp, #28]
 8004caa:	19bb      	adds	r3, r7, r6
 8004cac:	429a      	cmp	r2, r3
 8004cae:	dcf6      	bgt.n	8004c9e <vlc_print+0x282>
 8004cb0:	e7de      	b.n	8004c70 <vlc_print+0x254>
 8004cb2:	1bbf      	subs	r7, r7, r6
 8004cb4:	e7f8      	b.n	8004ca8 <vlc_print+0x28c>
 8004cb6:	b103      	cbz	r3, 8004cba <vlc_print+0x29e>
 8004cb8:	9609      	str	r6, [sp, #36]	; 0x24
 8004cba:	b107      	cbz	r7, 8004cbe <vlc_print+0x2a2>
 8004cbc:	9208      	str	r2, [sp, #32]
            specifier.flags |= FLAG_ZERO_EXTEND;
 8004cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cc0:	f043 0301 	orr.w	r3, r3, #1
 8004cc4:	9309      	str	r3, [sp, #36]	; 0x24
            specifier.width = 8;
 8004cc6:	2308      	movs	r3, #8
 8004cc8:	9307      	str	r3, [sp, #28]
 8004cca:	e77b      	b.n	8004bc4 <vlc_print+0x1a8>
 8004ccc:	b103      	cbz	r3, 8004cd0 <vlc_print+0x2b4>
 8004cce:	9609      	str	r6, [sp, #36]	; 0x24
 8004cd0:	b107      	cbz	r7, 8004cd4 <vlc_print+0x2b8>
 8004cd2:	9208      	str	r2, [sp, #32]
 8004cd4:	f1bc 0f00 	cmp.w	ip, #0
 8004cd8:	d000      	beq.n	8004cdc <vlc_print+0x2c0>
 8004cda:	9007      	str	r0, [sp, #28]
            specifier.flags |= FLAG_IS_SIGNED;
 8004cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cde:	f043 0304 	orr.w	r3, r3, #4
 8004ce2:	9309      	str	r3, [sp, #36]	; 0x24
                val = va_arg(vl, signed int);
 8004ce4:	6820      	ldr	r0, [r4, #0]
            val = va_arg(vl, unsigned int);
 8004ce6:	1d26      	adds	r6, r4, #4
                val = va_arg(vl, signed int);
 8004ce8:	17c1      	asrs	r1, r0, #31
            count += _write_number(val, &specifier);
 8004cea:	aa07      	add	r2, sp, #28
 8004cec:	f7ff fe02 	bl	80048f4 <_write_number>
            break;
 8004cf0:	4634      	mov	r4, r6
            count += _write_number(val, &specifier);
 8004cf2:	4483      	add	fp, r0
            break;
 8004cf4:	e7bd      	b.n	8004c72 <vlc_print+0x256>
 8004cf6:	b103      	cbz	r3, 8004cfa <vlc_print+0x2de>
 8004cf8:	9609      	str	r6, [sp, #36]	; 0x24
 8004cfa:	b107      	cbz	r7, 8004cfe <vlc_print+0x2e2>
 8004cfc:	9208      	str	r2, [sp, #32]
 8004cfe:	f1bc 0f00 	cmp.w	ip, #0
 8004d02:	d000      	beq.n	8004d06 <vlc_print+0x2ea>
 8004d04:	9007      	str	r0, [sp, #28]
            dbl = va_arg(vl, double);
 8004d06:	3407      	adds	r4, #7
 8004d08:	f024 0407 	bic.w	r4, r4, #7
 8004d0c:	ecb4 7b02 	vldmia	r4!, {d7}
            if (specifier.precision == 0)
 8004d10:	9b08      	ldr	r3, [sp, #32]
            dbl = va_arg(vl, double);
 8004d12:	ed8d 7b02 	vstr	d7, [sp, #8]
            if (specifier.precision == 0)
 8004d16:	b90b      	cbnz	r3, 8004d1c <vlc_print+0x300>
              specifier.precision = 6;
 8004d18:	2306      	movs	r3, #6
 8004d1a:	9308      	str	r3, [sp, #32]
  for (int i=0;i <specifier->precision; i++)
 8004d1c:	9e08      	ldr	r6, [sp, #32]
  double mul = 1.0;
 8004d1e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8004ee8 <vlc_print+0x4cc>
  for (int i=0;i <specifier->precision; i++)
 8004d22:	2700      	movs	r7, #0
  double mul = 1.0;
 8004d24:	f04f 0800 	mov.w	r8, #0
  for (int i=0;i <specifier->precision; i++)
 8004d28:	42b7      	cmp	r7, r6
    mul *= 10;
 8004d2a:	f04f 0200 	mov.w	r2, #0
  for (int i=0;i <specifier->precision; i++)
 8004d2e:	f2c0 80b0 	blt.w	8004e92 <vlc_print+0x476>
  if (is_signed)
 8004d32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d36:	2300      	movs	r3, #0
 8004d38:	f7fb fed0 	bl	8000adc <__aeabi_dcmplt>
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	f000 80b1 	beq.w	8004ea4 <vlc_print+0x488>
    number = -number;
 8004d42:	9b02      	ldr	r3, [sp, #8]
 8004d44:	9304      	str	r3, [sp, #16]
 8004d46:	9b03      	ldr	r3, [sp, #12]
 8004d48:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004d4c:	9305      	str	r3, [sp, #20]
  number += (half_ / mul);
 8004d4e:	4642      	mov	r2, r8
 8004d50:	464b      	mov	r3, r9
 8004d52:	4963      	ldr	r1, [pc, #396]	; (8004ee0 <vlc_print+0x4c4>)
 8004d54:	2000      	movs	r0, #0
 8004d56:	f7fb fd79 	bl	800084c <__aeabi_ddiv>
 8004d5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d5e:	f7fb fa95 	bl	800028c <__adddf3>
  val = (uint64_t)(number * mul);
 8004d62:	4642      	mov	r2, r8
 8004d64:	464b      	mov	r3, r9
 8004d66:	f7fb fc47 	bl	80005f8 <__aeabi_dmul>
 8004d6a:	f7fc f843 	bl	8000df4 <__aeabi_d2ulz>
  uint32_t count = 0;
 8004d6e:	2700      	movs	r7, #0
  val = (uint64_t)(number * mul);
 8004d70:	4602      	mov	r2, r0
  uint32_t idx = sizeof(buf) - 1;
 8004d72:	f04f 083f 	mov.w	r8, #63	; 0x3f
    uint64_t t = val / 10;
 8004d76:	4691      	mov	r9, r2
 8004d78:	2300      	movs	r3, #0
 8004d7a:	220a      	movs	r2, #10
 8004d7c:	4648      	mov	r0, r9
 8004d7e:	460d      	mov	r5, r1
 8004d80:	f7fc f820 	bl	8000dc4 <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 8004d84:	f109 0e30 	add.w	lr, r9, #48	; 0x30
 8004d88:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    uint64_t t = val / 10;
 8004d8c:	4602      	mov	r2, r0
    chr = (val - t * 10) + '0';
 8004d8e:	ebae 0043 	sub.w	r0, lr, r3, lsl #1
    buf[idx--] = chr;
 8004d92:	f108 0370 	add.w	r3, r8, #112	; 0x70
 8004d96:	446b      	add	r3, sp
 8004d98:	f108 3cff 	add.w	ip, r8, #4294967295
 8004d9c:	f803 0c40 	strb.w	r0, [r3, #-64]
    count++;
 8004da0:	1c7b      	adds	r3, r7, #1
    if (count == specifier->precision) {
 8004da2:	429e      	cmp	r6, r3
      buf[idx--] = '.';
 8004da4:	bf01      	itttt	eq
 8004da6:	f10c 0370 	addeq.w	r3, ip, #112	; 0x70
 8004daa:	eb0d 0c03 	addeq.w	ip, sp, r3
 8004dae:	232e      	moveq	r3, #46	; 0x2e
 8004db0:	f1a8 0802 	subeq.w	r8, r8, #2
 8004db4:	bf07      	ittee	eq
 8004db6:	f80c 3c40 	strbeq.w	r3, [ip, #-64]
      count++;
 8004dba:	3702      	addeq	r7, #2
    count++;
 8004dbc:	461f      	movne	r7, r3
    buf[idx--] = chr;
 8004dbe:	46e0      	movne	r8, ip
  } while (val);
 8004dc0:	f1b9 0f0a 	cmp.w	r9, #10
 8004dc4:	f175 0900 	sbcs.w	r9, r5, #0
 8004dc8:	d2d5      	bcs.n	8004d76 <vlc_print+0x35a>
    buf[idx--] = '0';
 8004dca:	42b7      	cmp	r7, r6
 8004dcc:	f1c6 0001 	rsb	r0, r6, #1
 8004dd0:	4438      	add	r0, r7
 8004dd2:	f04f 0130 	mov.w	r1, #48	; 0x30
 8004dd6:	bf88      	it	hi
 8004dd8:	2001      	movhi	r0, #1
 8004dda:	eba6 0907 	sub.w	r9, r6, r7
 8004dde:	eb0d 0301 	add.w	r3, sp, r1
 8004de2:	bf88      	it	hi
 8004de4:	f04f 0900 	movhi.w	r9, #0
 8004de8:	4440      	add	r0, r8
 8004dea:	4418      	add	r0, r3
 8004dec:	464a      	mov	r2, r9
 8004dee:	f005 fcd0 	bl	800a792 <memset>
 8004df2:	1bbb      	subs	r3, r7, r6
 8004df4:	42b7      	cmp	r7, r6
 8004df6:	bf88      	it	hi
 8004df8:	2300      	movhi	r3, #0
 8004dfa:	444f      	add	r7, r9
  if (count == specifier->precision) {
 8004dfc:	42be      	cmp	r6, r7
 8004dfe:	4498      	add	r8, r3
 8004e00:	f106 0601 	add.w	r6, r6, #1
 8004e04:	d108      	bne.n	8004e18 <vlc_print+0x3fc>
    buf[idx--] = '.';
 8004e06:	f108 0370 	add.w	r3, r8, #112	; 0x70
 8004e0a:	446b      	add	r3, sp
 8004e0c:	222e      	movs	r2, #46	; 0x2e
 8004e0e:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8004e12:	4637      	mov	r7, r6
    buf[idx--] = '.';
 8004e14:	f108 38ff 	add.w	r8, r8, #4294967295
  if (count == specifier->precision + 1)
 8004e18:	42be      	cmp	r6, r7
 8004e1a:	d108      	bne.n	8004e2e <vlc_print+0x412>
    buf[idx--] = '0';
 8004e1c:	f108 0370 	add.w	r3, r8, #112	; 0x70
 8004e20:	446b      	add	r3, sp
 8004e22:	2230      	movs	r2, #48	; 0x30
 8004e24:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8004e28:	3701      	adds	r7, #1
    buf[idx--] = '0';
 8004e2a:	f108 38ff 	add.w	r8, r8, #4294967295
  if (is_signed) {
 8004e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e32:	2200      	movs	r2, #0
 8004e34:	2300      	movs	r3, #0
 8004e36:	f7fb fe51 	bl	8000adc <__aeabi_dcmplt>
 8004e3a:	b140      	cbz	r0, 8004e4e <vlc_print+0x432>
    buf[idx--] = '-';
 8004e3c:	f108 0370 	add.w	r3, r8, #112	; 0x70
 8004e40:	446b      	add	r3, sp
 8004e42:	222d      	movs	r2, #45	; 0x2d
 8004e44:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8004e48:	3701      	adds	r7, #1
    buf[idx--] = '-';
 8004e4a:	f108 38ff 	add.w	r8, r8, #4294967295
  while (count < specifier->width) {
 8004e4e:	9e07      	ldr	r6, [sp, #28]
    buf[idx--] = ' ';
 8004e50:	42b7      	cmp	r7, r6
 8004e52:	f1c6 0001 	rsb	r0, r6, #1
 8004e56:	4438      	add	r0, r7
 8004e58:	bf88      	it	hi
 8004e5a:	2001      	movhi	r0, #1
 8004e5c:	eba6 0907 	sub.w	r9, r6, r7
 8004e60:	ab0c      	add	r3, sp, #48	; 0x30
 8004e62:	bf88      	it	hi
 8004e64:	f04f 0900 	movhi.w	r9, #0
 8004e68:	4440      	add	r0, r8
 8004e6a:	464a      	mov	r2, r9
 8004e6c:	4418      	add	r0, r3
 8004e6e:	2120      	movs	r1, #32
 8004e70:	f005 fc8f 	bl	800a792 <memset>
 8004e74:	1bbb      	subs	r3, r7, r6
 8004e76:	42b7      	cmp	r7, r6
 8004e78:	bf88      	it	hi
 8004e7a:	2300      	movhi	r3, #0
 8004e7c:	4443      	add	r3, r8
 8004e7e:	aa0c      	add	r2, sp, #48	; 0x30
 8004e80:	444f      	add	r7, r9
  for(int i = 0; i < count; i++) {
 8004e82:	eb02 0803 	add.w	r8, r2, r3
 8004e86:	443b      	add	r3, r7
 8004e88:	189e      	adds	r6, r3, r2
 8004e8a:	4546      	cmp	r6, r8
 8004e8c:	d10f      	bne.n	8004eae <vlc_print+0x492>
            count += _write_double(dbl, &specifier);
 8004e8e:	44bb      	add	fp, r7
            break;
 8004e90:	e6ef      	b.n	8004c72 <vlc_print+0x256>
    mul *= 10;
 8004e92:	4640      	mov	r0, r8
 8004e94:	4649      	mov	r1, r9
 8004e96:	4b13      	ldr	r3, [pc, #76]	; (8004ee4 <vlc_print+0x4c8>)
 8004e98:	f7fb fbae 	bl	80005f8 <__aeabi_dmul>
  for (int i=0;i <specifier->precision; i++)
 8004e9c:	3701      	adds	r7, #1
    mul *= 10;
 8004e9e:	4680      	mov	r8, r0
 8004ea0:	4689      	mov	r9, r1
  for (int i=0;i <specifier->precision; i++)
 8004ea2:	e741      	b.n	8004d28 <vlc_print+0x30c>
 8004ea4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004ea8:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004eac:	e74f      	b.n	8004d4e <vlc_print+0x332>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8004eae:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8004eb2:	ee18 0a10 	vmov	r0, s16
 8004eb6:	47d0      	blx	sl
  for(int i = 0; i < count; i++) {
 8004eb8:	e7e7      	b.n	8004e8a <vlc_print+0x46e>
        if (!c)
 8004eba:	f04f 0e01 	mov.w	lr, #1
 8004ebe:	e5dd      	b.n	8004a7c <vlc_print+0x60>
 8004ec0:	b103      	cbz	r3, 8004ec4 <vlc_print+0x4a8>
 8004ec2:	9609      	str	r6, [sp, #36]	; 0x24
 8004ec4:	b107      	cbz	r7, 8004ec8 <vlc_print+0x4ac>
 8004ec6:	9208      	str	r2, [sp, #32]
 8004ec8:	f1bc 0f00 	cmp.w	ip, #0
 8004ecc:	d000      	beq.n	8004ed0 <vlc_print+0x4b4>
 8004ece:	9007      	str	r0, [sp, #28]
            val = va_arg(vl, unsigned int);
 8004ed0:	4626      	mov	r6, r4
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	f856 0b04 	ldr.w	r0, [r6], #4
 8004ed8:	e707      	b.n	8004cea <vlc_print+0x2ce>
 8004eda:	bf00      	nop
 8004edc:	0800d1a4 	.word	0x0800d1a4
 8004ee0:	3fe00000 	.word	0x3fe00000
 8004ee4:	40240000 	.word	0x40240000
 8004ee8:	3ff00000 	.word	0x3ff00000

08004eec <ai_network_get_report>:


AI_API_ENTRY
ai_bool ai_network_get_report(
  ai_handle network, ai_network_report* report)
{
 8004eec:	b570      	push	{r4, r5, r6, lr}
 8004eee:	b0a2      	sub	sp, #136	; 0x88
 8004ef0:	4606      	mov	r6, r0
 8004ef2:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8004ef4:	f001 fbda 	bl	80066ac <ai_platform_context_acquire>
 8004ef8:	4604      	mov	r4, r0

  if (report && net_ctx)
 8004efa:	2d00      	cmp	r5, #0
 8004efc:	d035      	beq.n	8004f6a <ai_network_get_report+0x7e>
 8004efe:	2800      	cmp	r0, #0
 8004f00:	d030      	beq.n	8004f64 <ai_network_get_report+0x78>
  {
    ai_network_report r = {
 8004f02:	2278      	movs	r2, #120	; 0x78
 8004f04:	2100      	movs	r1, #0
 8004f06:	a804      	add	r0, sp, #16
 8004f08:	f005 fc43 	bl	800a792 <memset>
 8004f0c:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <ai_network_get_report+0x84>)
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	4b18      	ldr	r3, [pc, #96]	; (8004f74 <ai_network_get_report+0x88>)
 8004f12:	9301      	str	r3, [sp, #4]
 8004f14:	4b18      	ldr	r3, [pc, #96]	; (8004f78 <ai_network_get_report+0x8c>)
 8004f16:	9302      	str	r3, [sp, #8]
 8004f18:	4b18      	ldr	r3, [pc, #96]	; (8004f7c <ai_network_get_report+0x90>)
 8004f1a:	9303      	str	r3, [sp, #12]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8004f1c:	f001 fb80 	bl	8006620 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8004f20:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 8004f22:	f001 fb81 	bl	8006628 <ai_platform_runtime_get_version>
    ai_network_report r = {
 8004f26:	4b16      	ldr	r3, [pc, #88]	; (8004f80 <ai_network_get_report+0x94>)
 8004f28:	9306      	str	r3, [sp, #24]
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	f88d 301c 	strb.w	r3, [sp, #28]
      .runtime_version   = ai_platform_runtime_get_version(),
 8004f30:	9005      	str	r0, [sp, #20]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8004f32:	f001 fb8f 	bl	8006654 <ai_platform_api_get_version>
 8004f36:	9009      	str	r0, [sp, #36]	; 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8004f38:	f001 fba2 	bl	8006680 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 8004f3c:	4a11      	ldr	r2, [pc, #68]	; (8004f84 <ai_network_get_report+0x98>)
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8004f3e:	900a      	str	r0, [sp, #40]	; 0x28
    ai_network_report r = {
 8004f40:	2300      	movs	r3, #0
 8004f42:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004f46:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <ai_network_get_report+0x9c>)
 8004f48:	9311      	str	r3, [sp, #68]	; 0x44
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0xea6d9ecd,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8004f4a:	4669      	mov	r1, sp
    ai_network_report r = {
 8004f4c:	4b0f      	ldr	r3, [pc, #60]	; (8004f8c <ai_network_get_report+0xa0>)
 8004f4e:	9320      	str	r3, [sp, #128]	; 0x80
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8004f50:	4630      	mov	r0, r6
 8004f52:	f001 fbc5 	bl	80066e0 <ai_platform_api_get_network_report>
 8004f56:	4604      	mov	r4, r0
 8004f58:	b120      	cbz	r0, 8004f64 <ai_network_get_report+0x78>

    *report = r;
 8004f5a:	2288      	movs	r2, #136	; 0x88
 8004f5c:	4669      	mov	r1, sp
 8004f5e:	4628      	mov	r0, r5
 8004f60:	f005 fcb9 	bl	800a8d6 <memcpy>
    return true;
  }
  return false;
}
 8004f64:	4620      	mov	r0, r4
 8004f66:	b022      	add	sp, #136	; 0x88
 8004f68:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8004f6a:	462c      	mov	r4, r5
 8004f6c:	e7fa      	b.n	8004f64 <ai_network_get_report+0x78>
 8004f6e:	bf00      	nop
 8004f70:	0800d16e 	.word	0x0800d16e
 8004f74:	0800d1ab 	.word	0x0800d1ab
 8004f78:	0800d1ce 	.word	0x0800d1ce
 8004f7c:	0800d1e7 	.word	0x0800d1e7
 8004f80:	08020969 	.word	0x08020969
 8004f84:	0008b26b 	.word	0x0008b26b
 8004f88:	a1facade 	.word	0xa1facade
 8004f8c:	ea6d9ecd 	.word	0xea6d9ecd

08004f90 <ai_network_get_error>:


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8004f90:	f001 bb94 	b.w	80066bc <ai_platform_network_get_error>

08004f94 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004f94:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8004f96:	2305      	movs	r3, #5
 8004f98:	2200      	movs	r2, #0
 8004f9a:	e9cd 3200 	strd	r3, r2, [sp]
 8004f9e:	4a03      	ldr	r2, [pc, #12]	; (8004fac <ai_network_create+0x18>)
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	f001 fd4d 	bl	8006a40 <ai_platform_network_create>
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004fa6:	b003      	add	sp, #12
 8004fa8:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fac:	20000e80 	.word	0x20000e80

08004fb0 <ai_network_destroy>:


AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8004fb0:	f001 bd88 	b.w	8006ac4 <ai_platform_network_destroy>

08004fb4 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8004fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb8:	4606      	mov	r6, r0
 8004fba:	460f      	mov	r7, r1
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8004fbc:	f001 fd94 	bl	8006ae8 <ai_platform_network_init>
  ai_bool ok = true;

  if (!net_ctx) return false;
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	f000 80e1 	beq.w	800518a <ai_network_init+0x1d6>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8004fc8:	f8df 8254 	ldr.w	r8, [pc, #596]	; 8005220 <ai_network_init+0x26c>
 8004fcc:	463a      	mov	r2, r7
 8004fce:	2101      	movs	r1, #1
 8004fd0:	4640      	mov	r0, r8
 8004fd2:	f001 fa5b 	bl	800648c <ai_platform_get_weights_map>
 8004fd6:	4605      	mov	r5, r0
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	f000 80d8 	beq.w	800518e <ai_network_init+0x1da>
    conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fde:	4a72      	ldr	r2, [pc, #456]	; (80051a8 <ai_network_init+0x1f4>)
 8004fe0:	6813      	ldr	r3, [r2, #0]
 8004fe2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fe6:	6013      	str	r3, [r2, #0]
    conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8004fe8:	f8d8 3000 	ldr.w	r3, [r8]
    conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8004fec:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ff0:	4a6e      	ldr	r2, [pc, #440]	; (80051ac <ai_network_init+0x1f8>)
 8004ff2:	6811      	ldr	r1, [r2, #0]
 8004ff4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004ff8:	6011      	str	r1, [r2, #0]
    conv2d_bias_array.data = AI_PTR(g_network_weights_map[0] + 108);
 8004ffa:	f103 016c 	add.w	r1, r3, #108	; 0x6c
    conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 108);
 8004ffe:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005002:	4a6b      	ldr	r2, [pc, #428]	; (80051b0 <ai_network_init+0x1fc>)
 8005004:	6811      	ldr	r1, [r2, #0]
 8005006:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800500a:	6011      	str	r1, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 120);
 800500c:	f103 0178 	add.w	r1, r3, #120	; 0x78
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 120);
 8005010:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005014:	4a67      	ldr	r2, [pc, #412]	; (80051b4 <ai_network_init+0x200>)
 8005016:	6811      	ldr	r1, [r2, #0]
 8005018:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800501c:	6011      	str	r1, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 1848);
 800501e:	f503 61e7 	add.w	r1, r3, #1848	; 0x738
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1848);
 8005022:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8005026:	4a64      	ldr	r2, [pc, #400]	; (80051b8 <ai_network_init+0x204>)
 8005028:	6811      	ldr	r1, [r2, #0]
 800502a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800502e:	6011      	str	r1, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 1912);
 8005030:	f503 61ef 	add.w	r1, r3, #1912	; 0x778
    conv2d_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 1912);
 8005034:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8005038:	4a60      	ldr	r2, [pc, #384]	; (80051bc <ai_network_init+0x208>)
 800503a:	6811      	ldr	r1, [r2, #0]
 800503c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005040:	6011      	str	r1, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 20344);
 8005042:	f503 419e 	add.w	r1, r3, #20224	; 0x4f00
 8005046:	3178      	adds	r1, #120	; 0x78
    conv2d_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 20344);
 8005048:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800504c:	4a5c      	ldr	r2, [pc, #368]	; (80051c0 <ai_network_init+0x20c>)
 800504e:	6811      	ldr	r1, [r2, #0]
 8005050:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005054:	6011      	str	r1, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 20472);
 8005056:	f503 419f 	add.w	r1, r3, #20352	; 0x4f80
 800505a:	3178      	adds	r1, #120	; 0x78
    conv2d_3_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 20472);
 800505c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8005060:	4a58      	ldr	r2, [pc, #352]	; (80051c4 <ai_network_init+0x210>)
 8005062:	6811      	ldr	r1, [r2, #0]
 8005064:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005068:	6011      	str	r1, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 75768);
 800506a:	f503 3193 	add.w	r1, r3, #75264	; 0x12600
 800506e:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
    conv2d_3_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 75768);
 8005072:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8005076:	4a54      	ldr	r2, [pc, #336]	; (80051c8 <ai_network_init+0x214>)
 8005078:	6811      	ldr	r1, [r2, #0]
 800507a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800507e:	6011      	str	r1, [r2, #0]
    dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 75960);
 8005080:	f503 3194 	add.w	r1, r3, #75776	; 0x12800
 8005084:	31b8      	adds	r1, #184	; 0xb8
    dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 75960);
 8005086:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800508a:	4a50      	ldr	r2, [pc, #320]	; (80051cc <ai_network_init+0x218>)
 800508c:	6811      	ldr	r1, [r2, #0]
    dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 77496);
 800508e:	f503 3397 	add.w	r3, r3, #77312	; 0x12e00
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8005092:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005096:	6011      	str	r1, [r2, #0]
    dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 77496);
 8005098:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
    dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 77496);
 800509c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80050a0:	4a4b      	ldr	r2, [pc, #300]	; (80051d0 <ai_network_init+0x21c>)
 80050a2:	6811      	ldr	r1, [r2, #0]
 80050a4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80050a8:	6011      	str	r1, [r2, #0]
    dense_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 77528);
 80050aa:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
    dense_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 77528);
 80050ae:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80050b2:	4a48      	ldr	r2, [pc, #288]	; (80051d4 <ai_network_init+0x220>)
    dense_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 77592);
 80050b4:	f503 738c 	add.w	r3, r3, #280	; 0x118
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80050b8:	6811      	ldr	r1, [r2, #0]
    dense_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 77592);
 80050ba:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80050be:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80050c2:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 80050c4:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8005224 <ai_network_init+0x270>
 80050c8:	463a      	mov	r2, r7
 80050ca:	2101      	movs	r1, #1
 80050cc:	4640      	mov	r0, r8
 80050ce:	f001 fa31 	bl	8006534 <ai_platform_get_activations_map>
 80050d2:	4607      	mov	r7, r0
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d060      	beq.n	800519a <ai_network_init+0x1e6>
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 17032);
 80050d8:	f8d8 3000 	ldr.w	r3, [r8]
 80050dc:	493e      	ldr	r1, [pc, #248]	; (80051d8 <ai_network_init+0x224>)
 80050de:	f503 4285 	add.w	r2, r3, #17024	; 0x4280
 80050e2:	3208      	adds	r2, #8
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 17032);
 80050e4:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 25144);
 80050e8:	493c      	ldr	r1, [pc, #240]	; (80051dc <ai_network_init+0x228>)
 80050ea:	f503 42c4 	add.w	r2, r3, #25088	; 0x6200
 80050ee:	3238      	adds	r2, #56	; 0x38
    conv2d_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 25144);
 80050f0:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 356);
 80050f4:	493a      	ldr	r1, [pc, #232]	; (80051e0 <ai_network_init+0x22c>)
 80050f6:	f503 72b2 	add.w	r2, r3, #356	; 0x164
    conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 356);
 80050fa:	e9c1 2202 	strd	r2, r2, [r1, #8]
    activation_output_array.data = AI_PTR(g_network_activations_map[0] + 356);
 80050fe:	4939      	ldr	r1, [pc, #228]	; (80051e4 <ai_network_init+0x230>)
    activation_output_array.data_start = AI_PTR(g_network_activations_map[0] + 356);
 8005100:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 24692);
 8005104:	4938      	ldr	r1, [pc, #224]	; (80051e8 <ai_network_init+0x234>)
 8005106:	f503 42c0 	add.w	r2, r3, #24576	; 0x6000
 800510a:	3274      	adds	r2, #116	; 0x74
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 24692);
 800510c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 24800);
 8005110:	4936      	ldr	r1, [pc, #216]	; (80051ec <ai_network_init+0x238>)
 8005112:	f503 42c1 	add.w	r2, r3, #24704	; 0x6080
 8005116:	3260      	adds	r2, #96	; 0x60
    conv2d_1_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 24800);
 8005118:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800511c:	4a34      	ldr	r2, [pc, #208]	; (80051f0 <ai_network_init+0x23c>)
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800511e:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_2_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 7488);
 8005122:	4a34      	ldr	r2, [pc, #208]	; (80051f4 <ai_network_init+0x240>)
 8005124:	f503 51ea 	add.w	r1, r3, #7488	; 0x1d40
    conv2d_2_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 7488);
 8005128:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 8064);
 800512c:	4a32      	ldr	r2, [pc, #200]	; (80051f8 <ai_network_init+0x244>)
 800512e:	f503 51fc 	add.w	r1, r3, #8064	; 0x1f80
    conv2d_2_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 8064);
 8005132:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[0] + 8576);
 8005136:	4a31      	ldr	r2, [pc, #196]	; (80051fc <ai_network_init+0x248>)
 8005138:	f503 5106 	add.w	r1, r3, #8576	; 0x2180
    conv2d_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 8576);
 800513c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005140:	4a2f      	ldr	r2, [pc, #188]	; (8005200 <ai_network_init+0x24c>)
    conv2d_3_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005142:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_3_output_array.data = AI_PTR(g_network_activations_map[0] + 1152);
 8005146:	4a2f      	ldr	r2, [pc, #188]	; (8005204 <ai_network_init+0x250>)
 8005148:	f503 6190 	add.w	r1, r3, #1152	; 0x480
    conv2d_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1152);
 800514c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    activation_3_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005150:	4a2d      	ldr	r2, [pc, #180]	; (8005208 <ai_network_init+0x254>)
    activation_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005152:	e9c2 3302 	strd	r3, r3, [r2, #8]
    global_average_pooling2d_pool_output_array.data = AI_PTR(g_network_activations_map[0] + 960);
 8005156:	4a2d      	ldr	r2, [pc, #180]	; (800520c <ai_network_init+0x258>)
 8005158:	f503 7170 	add.w	r1, r3, #960	; 0x3c0
    global_average_pooling2d_pool_output_array.data_start = AI_PTR(g_network_activations_map[0] + 960);
 800515c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005160:	4a2b      	ldr	r2, [pc, #172]	; (8005210 <ai_network_init+0x25c>)
    dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005162:	e9c2 3302 	strd	r3, r3, [r2, #8]
    activation_4_output_array.data = AI_PTR(g_network_activations_map[0] + 32);
 8005166:	4a2b      	ldr	r2, [pc, #172]	; (8005214 <ai_network_init+0x260>)
 8005168:	f103 0120 	add.w	r1, r3, #32
    activation_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 32);
 800516c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005170:	4a29      	ldr	r2, [pc, #164]	; (8005218 <ai_network_init+0x264>)
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005172:	e9c2 3302 	strd	r3, r3, [r2, #8]
    activation_5_output_array.data = AI_PTR(g_network_activations_map[0] + 8);
 8005176:	4a29      	ldr	r2, [pc, #164]	; (800521c <ai_network_init+0x268>)
 8005178:	3308      	adds	r3, #8
    activation_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 8);
 800517a:	e9c2 3302 	strd	r3, r3, [r2, #8]
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 800517e:	4630      	mov	r0, r6
 8005180:	f001 fd80 	bl	8006c84 <ai_platform_network_post_init>
 8005184:	4038      	ands	r0, r7
 8005186:	4005      	ands	r5, r0
 8005188:	b2e8      	uxtb	r0, r5

  return ok;
}
 800518a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800518e:	2212      	movs	r2, #18
 8005190:	2130      	movs	r1, #48	; 0x30
 8005192:	4620      	mov	r0, r4
 8005194:	f001 fa9e 	bl	80066d4 <ai_platform_network_set_error>
  return false;
 8005198:	e794      	b.n	80050c4 <ai_network_init+0x110>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800519a:	2213      	movs	r2, #19
 800519c:	2130      	movs	r1, #48	; 0x30
 800519e:	4620      	mov	r0, r4
 80051a0:	f001 fa98 	bl	80066d4 <ai_platform_network_set_error>
  return false;
 80051a4:	e7eb      	b.n	800517e <ai_network_init+0x1ca>
 80051a6:	bf00      	nop
 80051a8:	20000d30 	.word	0x20000d30
 80051ac:	20000c68 	.word	0x20000c68
 80051b0:	20000a0c 	.word	0x20000a0c
 80051b4:	200008fc 	.word	0x200008fc
 80051b8:	20000b48 	.word	0x20000b48
 80051bc:	20000a38 	.word	0x20000a38
 80051c0:	20000c3c 	.word	0x20000c3c
 80051c4:	20000b74 	.word	0x20000b74
 80051c8:	20000e70 	.word	0x20000e70
 80051cc:	20000dfc 	.word	0x20000dfc
 80051d0:	20000dd0 	.word	0x20000dd0
 80051d4:	20000d5c 	.word	0x20000d5c
 80051d8:	20000f4c 	.word	0x20000f4c
 80051dc:	20000d04 	.word	0x20000d04
 80051e0:	20000cd8 	.word	0x20000cd8
 80051e4:	200008d0 	.word	0x200008d0
 80051e8:	200009b4 	.word	0x200009b4
 80051ec:	200009e0 	.word	0x200009e0
 80051f0:	20000988 	.word	0x20000988
 80051f4:	20000af0 	.word	0x20000af0
 80051f8:	20000b1c 	.word	0x20000b1c
 80051fc:	20000ac4 	.word	0x20000ac4
 8005200:	20000c10 	.word	0x20000c10
 8005204:	20000be4 	.word	0x20000be4
 8005208:	200007ec 	.word	0x200007ec
 800520c:	20000f20 	.word	0x20000f20
 8005210:	20000e44 	.word	0x20000e44
 8005214:	20000838 	.word	0x20000838
 8005218:	20000da4 	.word	0x20000da4
 800521c:	20000884 	.word	0x20000884
 8005220:	20007b6c 	.word	0x20007b6c
 8005224:	20007b68 	.word	0x20007b68

08005228 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8005228:	f001 bd5c 	b.w	8006ce4 <ai_platform_network_process>

0800522c <ai_network_forward>:


AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 800522c:	2200      	movs	r2, #0
 800522e:	f001 bd59 	b.w	8006ce4 <ai_platform_network_process>
	...

08005234 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8005234:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 8005236:	4603      	mov	r3, r0
{
 8005238:	b085      	sub	sp, #20
  if (!params) return false;
 800523a:	b170      	cbz	r0, 800525a <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 800523c:	4c08      	ldr	r4, [pc, #32]	; (8005260 <ai_network_data_params_get+0x2c>)
 800523e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005242:	466a      	mov	r2, sp
 8005244:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8005248:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800524c:	ad02      	add	r5, sp, #8
 800524e:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8005252:	4629      	mov	r1, r5
 8005254:	4618      	mov	r0, r3
 8005256:	f001 f9c1 	bl	80065dc <ai_platform_bind_network_params>
}
 800525a:	b005      	add	sp, #20
 800525c:	bd30      	pop	{r4, r5, pc}
 800525e:	bf00      	nop
 8005260:	0800d0ec 	.word	0x0800d0ec

08005264 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
    iter->start = fields;
    iter->pos = fields;
    iter->required_field_index = 0;
 8005264:	2300      	movs	r3, #0
    iter->dest_struct = dest_struct;
 8005266:	e9c0 3202 	strd	r3, r2, [r0, #8]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 800526a:	888b      	ldrh	r3, [r1, #4]
 800526c:	441a      	add	r2, r3
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 800526e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 8005272:	6102      	str	r2, [r0, #16]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8005274:	441a      	add	r2, r3
    iter->pos = fields;
 8005276:	e9c0 1100 	strd	r1, r1, [r0]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 800527a:	6142      	str	r2, [r0, #20]
    
    return (iter->pos->tag != 0);
 800527c:	8808      	ldrh	r0, [r1, #0]
}
 800527e:	3800      	subs	r0, #0
 8005280:	bf18      	it	ne
 8005282:	2001      	movne	r0, #1
 8005284:	4770      	bx	lr

08005286 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
    const pb_field_t *prev_field = iter->pos;
 8005286:	6841      	ldr	r1, [r0, #4]

    if (prev_field->tag == 0)
 8005288:	880a      	ldrh	r2, [r1, #0]
{
 800528a:	b570      	push	{r4, r5, r6, lr}
 800528c:	4603      	mov	r3, r0
    if (prev_field->tag == 0)
 800528e:	2a00      	cmp	r2, #0
 8005290:	d035      	beq.n	80052fe <pb_field_iter_next+0x78>
        return false;
    }
    
    iter->pos++;
    
    if (iter->pos->tag == 0)
 8005292:	8a0c      	ldrh	r4, [r1, #16]
    iter->pos++;
 8005294:	f101 0210 	add.w	r2, r1, #16
 8005298:	6042      	str	r2, [r0, #4]
    if (iter->pos->tag == 0)
 800529a:	b92c      	cbnz	r4, 80052a8 <pb_field_iter_next+0x22>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
 800529c:	68c2      	ldr	r2, [r0, #12]
 800529e:	6801      	ldr	r1, [r0, #0]
 80052a0:	f7ff ffe0 	bl	8005264 <pb_field_iter_begin>
        return false;
 80052a4:	4620      	mov	r0, r4
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
        return true;
    }
}
 80052a6:	bd70      	pop	{r4, r5, r6, pc}
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 80052a8:	7888      	ldrb	r0, [r1, #2]
        size_t prev_size = prev_field->data_size;
 80052aa:	890a      	ldrh	r2, [r1, #8]
            iter->pos->data_offset == PB_SIZE_MAX)
 80052ac:	8a8c      	ldrh	r4, [r1, #20]
 80052ae:	f000 0630 	and.w	r6, r0, #48	; 0x30
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 80052b2:	2e30      	cmp	r6, #48	; 0x30
 80052b4:	d10a      	bne.n	80052cc <pb_field_iter_next+0x46>
 80052b6:	7c8d      	ldrb	r5, [r1, #18]
 80052b8:	f005 0530 	and.w	r5, r5, #48	; 0x30
 80052bc:	2d30      	cmp	r5, #48	; 0x30
 80052be:	d118      	bne.n	80052f2 <pb_field_iter_next+0x6c>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 80052c0:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80052c4:	42ac      	cmp	r4, r5
 80052c6:	d114      	bne.n	80052f2 <pb_field_iter_next+0x6c>
            return true;
 80052c8:	2001      	movs	r0, #1
 80052ca:	e7ec      	b.n	80052a6 <pb_field_iter_next+0x20>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 80052cc:	f000 05f0 	and.w	r5, r0, #240	; 0xf0
 80052d0:	2d20      	cmp	r5, #32
 80052d2:	d10e      	bne.n	80052f2 <pb_field_iter_next+0x6c>
            prev_size *= prev_field->array_size;
 80052d4:	8948      	ldrh	r0, [r1, #10]
 80052d6:	4342      	muls	r2, r0
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
 80052d8:	b916      	cbnz	r6, 80052e0 <pb_field_iter_next+0x5a>
            iter->required_field_index++;
 80052da:	6898      	ldr	r0, [r3, #8]
 80052dc:	3001      	adds	r0, #1
 80052de:	6098      	str	r0, [r3, #8]
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 80052e0:	4414      	add	r4, r2
 80052e2:	691a      	ldr	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 80052e4:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 80052e8:	4422      	add	r2, r4
 80052ea:	611a      	str	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 80052ec:	440a      	add	r2, r1
 80052ee:	615a      	str	r2, [r3, #20]
        return true;
 80052f0:	e7ea      	b.n	80052c8 <pb_field_iter_next+0x42>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
 80052f2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
            prev_size = sizeof(void*);
 80052f6:	2880      	cmp	r0, #128	; 0x80
 80052f8:	bf08      	it	eq
 80052fa:	2204      	moveq	r2, #4
 80052fc:	e7ec      	b.n	80052d8 <pb_field_iter_next+0x52>
        return false;
 80052fe:	4610      	mov	r0, r2
 8005300:	e7d1      	b.n	80052a6 <pb_field_iter_next+0x20>

08005302 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 8005302:	b570      	push	{r4, r5, r6, lr}
    const pb_field_t *start = iter->pos;
 8005304:	6846      	ldr	r6, [r0, #4]
{
 8005306:	4604      	mov	r4, r0
 8005308:	460d      	mov	r5, r1
    
    do {
        if (iter->pos->tag == tag &&
 800530a:	6863      	ldr	r3, [r4, #4]
 800530c:	881a      	ldrh	r2, [r3, #0]
 800530e:	42aa      	cmp	r2, r5
 8005310:	d104      	bne.n	800531c <pb_field_iter_find+0x1a>
 8005312:	789b      	ldrb	r3, [r3, #2]
 8005314:	f003 030f 	and.w	r3, r3, #15
 8005318:	2b08      	cmp	r3, #8
 800531a:	d107      	bne.n	800532c <pb_field_iter_find+0x2a>
        {
            /* Found the wanted field */
            return true;
        }
        
        (void)pb_field_iter_next(iter);
 800531c:	4620      	mov	r0, r4
 800531e:	f7ff ffb2 	bl	8005286 <pb_field_iter_next>
    } while (iter->pos != start);
 8005322:	6863      	ldr	r3, [r4, #4]
 8005324:	42b3      	cmp	r3, r6
 8005326:	d1f0      	bne.n	800530a <pb_field_iter_find+0x8>
    
    /* Searched all the way back to start, and found nothing. */
    return false;
 8005328:	2000      	movs	r0, #0
}
 800532a:	bd70      	pop	{r4, r5, r6, pc}
            return true;
 800532c:	2001      	movs	r0, #1
 800532e:	e7fc      	b.n	800532a <pb_field_iter_find+0x28>

08005330 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8005330:	b510      	push	{r4, lr}
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8005332:	6844      	ldr	r4, [r0, #4]
    stream->state = (pb_byte_t*)stream->state + count;
 8005334:	18a3      	adds	r3, r4, r2
 8005336:	6043      	str	r3, [r0, #4]
    
    if (buf != NULL)
 8005338:	b939      	cbnz	r1, 800534a <buf_read+0x1a>
        for (i = 0; i < count; i++)
            buf[i] = source[i];
    }
    
    return true;
}
 800533a:	2001      	movs	r0, #1
 800533c:	bd10      	pop	{r4, pc}
            buf[i] = source[i];
 800533e:	5ce0      	ldrb	r0, [r4, r3]
 8005340:	54c8      	strb	r0, [r1, r3]
        for (i = 0; i < count; i++)
 8005342:	3301      	adds	r3, #1
 8005344:	4293      	cmp	r3, r2
 8005346:	d1fa      	bne.n	800533e <buf_read+0xe>
 8005348:	e7f7      	b.n	800533a <buf_read+0xa>
 800534a:	2300      	movs	r3, #0
 800534c:	e7fa      	b.n	8005344 <buf_read+0x14>

0800534e <pb_field_set_to_default>:
    return false;
}

/* Initialize message fields to default values, recursively */
static void pb_field_set_to_default(pb_field_iter_t *iter)
{
 800534e:	b570      	push	{r4, r5, r6, lr}
    pb_type_t type;
    type = iter->pos->type;
 8005350:	6845      	ldr	r5, [r0, #4]
 8005352:	78aa      	ldrb	r2, [r5, #2]
    
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8005354:	f002 060f 	and.w	r6, r2, #15
 8005358:	2e08      	cmp	r6, #8
{
 800535a:	b086      	sub	sp, #24
 800535c:	4603      	mov	r3, r0
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 800535e:	d11f      	bne.n	80053a0 <pb_field_set_to_default+0x52>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 8005360:	6903      	ldr	r3, [r0, #16]
 8005362:	681c      	ldr	r4, [r3, #0]
        while (ext != NULL)
        {
            pb_field_iter_t ext_iter;
            ext->found = false;
 8005364:	2600      	movs	r6, #0
        while (ext != NULL)
 8005366:	b90c      	cbnz	r4, 800536c <pb_field_set_to_default+0x1e>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }
}
 8005368:	b006      	add	sp, #24
 800536a:	bd70      	pop	{r4, r5, r6, pc}
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800536c:	6823      	ldr	r3, [r4, #0]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 800536e:	6862      	ldr	r2, [r4, #4]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8005370:	689d      	ldr	r5, [r3, #8]
            ext->found = false;
 8005372:	7326      	strb	r6, [r4, #12]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8005374:	4629      	mov	r1, r5
 8005376:	4668      	mov	r0, sp
 8005378:	f7ff ff74 	bl	8005264 <pb_field_iter_begin>
    iter->pData = extension->dest;
 800537c:	6863      	ldr	r3, [r4, #4]
 800537e:	9304      	str	r3, [sp, #16]
    iter->pSize = &extension->found;
 8005380:	f104 030c 	add.w	r3, r4, #12
 8005384:	9305      	str	r3, [sp, #20]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005386:	78ab      	ldrb	r3, [r5, #2]
 8005388:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800538c:	2b80      	cmp	r3, #128	; 0x80
        iter->pData = &extension->dest;
 800538e:	bf08      	it	eq
 8005390:	1d23      	addeq	r3, r4, #4
            pb_field_set_to_default(&ext_iter);
 8005392:	4668      	mov	r0, sp
        iter->pData = &extension->dest;
 8005394:	bf08      	it	eq
 8005396:	9304      	streq	r3, [sp, #16]
            pb_field_set_to_default(&ext_iter);
 8005398:	f7ff ffd9 	bl	800534e <pb_field_set_to_default>
            ext = ext->next;
 800539c:	68a4      	ldr	r4, [r4, #8]
 800539e:	e7e2      	b.n	8005366 <pb_field_set_to_default+0x18>
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80053a0:	f012 01c0 	ands.w	r1, r2, #192	; 0xc0
 80053a4:	d125      	bne.n	80053f2 <pb_field_set_to_default+0xa4>
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && iter->pSize != iter->pData)
 80053a6:	f002 0030 	and.w	r0, r2, #48	; 0x30
 80053aa:	2810      	cmp	r0, #16
 80053ac:	d10f      	bne.n	80053ce <pb_field_set_to_default+0x80>
 80053ae:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
 80053b2:	4282      	cmp	r2, r0
 80053b4:	d000      	beq.n	80053b8 <pb_field_set_to_default+0x6a>
            *(bool*)iter->pSize = false;
 80053b6:	7011      	strb	r1, [r2, #0]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 80053b8:	2e07      	cmp	r6, #7
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 80053ba:	68ec      	ldr	r4, [r5, #12]
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 80053bc:	6918      	ldr	r0, [r3, #16]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 80053be:	d10b      	bne.n	80053d8 <pb_field_set_to_default+0x8a>
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 80053c0:	4601      	mov	r1, r0
 80053c2:	4620      	mov	r0, r4
}
 80053c4:	b006      	add	sp, #24
 80053c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 80053ca:	f000 b81a 	b.w	8005402 <pb_message_set_to_defaults>
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80053ce:	0690      	lsls	r0, r2, #26
 80053d0:	d5f2      	bpl.n	80053b8 <pb_field_set_to_default+0x6a>
            *(pb_size_t*)iter->pSize = 0;
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	8019      	strh	r1, [r3, #0]
}
 80053d6:	e7c7      	b.n	8005368 <pb_field_set_to_default+0x1a>
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 80053d8:	892a      	ldrh	r2, [r5, #8]
 80053da:	4621      	mov	r1, r4
            else if (iter->pos->ptr != NULL)
 80053dc:	b124      	cbz	r4, 80053e8 <pb_field_set_to_default+0x9a>
}
 80053de:	b006      	add	sp, #24
 80053e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 80053e4:	f005 ba77 	b.w	800a8d6 <memcpy>
}
 80053e8:	b006      	add	sp, #24
 80053ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memset(iter->pData, 0, iter->pos->data_size);
 80053ee:	f005 b9d0 	b.w	800a792 <memset>
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 80053f2:	2980      	cmp	r1, #128	; 0x80
 80053f4:	d1b8      	bne.n	8005368 <pb_field_set_to_default+0x1a>
        *(void**)iter->pData = NULL;
 80053f6:	6900      	ldr	r0, [r0, #16]
 80053f8:	2100      	movs	r1, #0
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80053fa:	0692      	lsls	r2, r2, #26
        *(void**)iter->pData = NULL;
 80053fc:	6001      	str	r1, [r0, #0]
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80053fe:	d5b3      	bpl.n	8005368 <pb_field_set_to_default+0x1a>
 8005400:	e7e7      	b.n	80053d2 <pb_field_set_to_default+0x84>

08005402 <pb_message_set_to_defaults>:

static void pb_message_set_to_defaults(const pb_field_t fields[], void *dest_struct)
{
 8005402:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005404:	460a      	mov	r2, r1
    pb_field_iter_t iter;

    if (!pb_field_iter_begin(&iter, fields, dest_struct))
 8005406:	4601      	mov	r1, r0
 8005408:	4668      	mov	r0, sp
 800540a:	f7ff ff2b 	bl	8005264 <pb_field_iter_begin>
 800540e:	b130      	cbz	r0, 800541e <pb_message_set_to_defaults+0x1c>
        return; /* Empty message type */
    
    do
    {
        pb_field_set_to_default(&iter);
 8005410:	4668      	mov	r0, sp
 8005412:	f7ff ff9c 	bl	800534e <pb_field_set_to_default>
    } while (pb_field_iter_next(&iter));
 8005416:	4668      	mov	r0, sp
 8005418:	f7ff ff35 	bl	8005286 <pb_field_iter_next>
 800541c:	e7f7      	b.n	800540e <pb_message_set_to_defaults+0xc>
}
 800541e:	b007      	add	sp, #28
 8005420:	f85d fb04 	ldr.w	pc, [sp], #4

08005424 <pb_readbyte>:
    if (stream->bytes_left == 0)
 8005424:	6883      	ldr	r3, [r0, #8]
{
 8005426:	b510      	push	{r4, lr}
 8005428:	4604      	mov	r4, r0
    if (stream->bytes_left == 0)
 800542a:	b90b      	cbnz	r3, 8005430 <pb_readbyte+0xc>
        PB_RETURN_ERROR(stream, "end-of-stream");
 800542c:	2000      	movs	r0, #0
}
 800542e:	bd10      	pop	{r4, pc}
    if (!stream->callback(stream, buf, 1))
 8005430:	6803      	ldr	r3, [r0, #0]
 8005432:	2201      	movs	r2, #1
 8005434:	4798      	blx	r3
 8005436:	2800      	cmp	r0, #0
 8005438:	d0f8      	beq.n	800542c <pb_readbyte+0x8>
    stream->bytes_left--;
 800543a:	68a3      	ldr	r3, [r4, #8]
 800543c:	3b01      	subs	r3, #1
 800543e:	60a3      	str	r3, [r4, #8]
    return true;    
 8005440:	e7f5      	b.n	800542e <pb_readbyte+0xa>

08005442 <pb_decode_varint32_eof>:
{
 8005442:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005446:	4688      	mov	r8, r1
    if (!pb_readbyte(stream, &byte))
 8005448:	f10d 0107 	add.w	r1, sp, #7
{
 800544c:	4607      	mov	r7, r0
 800544e:	4614      	mov	r4, r2
    if (!pb_readbyte(stream, &byte))
 8005450:	f7ff ffe8 	bl	8005424 <pb_readbyte>
 8005454:	4606      	mov	r6, r0
 8005456:	b958      	cbnz	r0, 8005470 <pb_decode_varint32_eof+0x2e>
        if (stream->bytes_left == 0)
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	b123      	cbz	r3, 8005466 <pb_decode_varint32_eof+0x24>
        return false;
 800545c:	2600      	movs	r6, #0
}
 800545e:	4630      	mov	r0, r6
 8005460:	b002      	add	sp, #8
 8005462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (eof)
 8005466:	2c00      	cmp	r4, #0
 8005468:	d0f8      	beq.n	800545c <pb_decode_varint32_eof+0x1a>
                *eof = true;
 800546a:	2301      	movs	r3, #1
 800546c:	7023      	strb	r3, [r4, #0]
 800546e:	e7f6      	b.n	800545e <pb_decode_varint32_eof+0x1c>
    if ((byte & 0x80) == 0)
 8005470:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8005474:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8005478:	2b00      	cmp	r3, #0
 800547a:	da21      	bge.n	80054c0 <pb_decode_varint32_eof+0x7e>
        result = byte & 0x7F;
 800547c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
        uint_fast8_t bitpos = 7;
 8005480:	2507      	movs	r5, #7
            if (!pb_readbyte(stream, &byte))
 8005482:	f10d 0107 	add.w	r1, sp, #7
 8005486:	4638      	mov	r0, r7
 8005488:	f7ff ffcc 	bl	8005424 <pb_readbyte>
 800548c:	2800      	cmp	r0, #0
 800548e:	d0e5      	beq.n	800545c <pb_decode_varint32_eof+0x1a>
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 8005490:	f89d 3007 	ldrb.w	r3, [sp, #7]
            if (bitpos >= 32)
 8005494:	2d1f      	cmp	r5, #31
 8005496:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800549a:	d914      	bls.n	80054c6 <pb_decode_varint32_eof+0x84>
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 800549c:	2d3f      	cmp	r5, #63	; 0x3f
 800549e:	bf34      	ite	cc
 80054a0:	21ff      	movcc	r1, #255	; 0xff
 80054a2:	2101      	movcs	r1, #1
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 80054a4:	b11a      	cbz	r2, 80054ae <pb_decode_varint32_eof+0x6c>
 80054a6:	2c00      	cmp	r4, #0
 80054a8:	dad8      	bge.n	800545c <pb_decode_varint32_eof+0x1a>
 80054aa:	4299      	cmp	r1, r3
 80054ac:	d1d6      	bne.n	800545c <pb_decode_varint32_eof+0x1a>
        } while (byte & 0x80);
 80054ae:	061a      	lsls	r2, r3, #24
            bitpos = (uint_fast8_t)(bitpos + 7);
 80054b0:	f105 0507 	add.w	r5, r5, #7
        } while (byte & 0x80);
 80054b4:	d4e5      	bmi.n	8005482 <pb_decode_varint32_eof+0x40>
        if (bitpos == 35 && (byte & 0x70) != 0)
 80054b6:	2d23      	cmp	r5, #35	; 0x23
 80054b8:	d102      	bne.n	80054c0 <pb_decode_varint32_eof+0x7e>
 80054ba:	f013 0f70 	tst.w	r3, #112	; 0x70
 80054be:	d1cd      	bne.n	800545c <pb_decode_varint32_eof+0x1a>
   *dest = result;
 80054c0:	f8c8 4000 	str.w	r4, [r8]
   return true;
 80054c4:	e7cb      	b.n	800545e <pb_decode_varint32_eof+0x1c>
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 80054c6:	40aa      	lsls	r2, r5
 80054c8:	4314      	orrs	r4, r2
 80054ca:	e7f0      	b.n	80054ae <pb_decode_varint32_eof+0x6c>

080054cc <pb_read>:
{
 80054cc:	b530      	push	{r4, r5, lr}
 80054ce:	4604      	mov	r4, r0
 80054d0:	b085      	sub	sp, #20
 80054d2:	4615      	mov	r5, r2
	if (buf == NULL && stream->callback != buf_read)
 80054d4:	b9a9      	cbnz	r1, 8005502 <pb_read+0x36>
 80054d6:	6802      	ldr	r2, [r0, #0]
 80054d8:	4b11      	ldr	r3, [pc, #68]	; (8005520 <pb_read+0x54>)
 80054da:	429a      	cmp	r2, r3
 80054dc:	d011      	beq.n	8005502 <pb_read+0x36>
		while (count > 16)
 80054de:	2d10      	cmp	r5, #16
 80054e0:	d806      	bhi.n	80054f0 <pb_read+0x24>
		return pb_read(stream, tmp, count);
 80054e2:	462a      	mov	r2, r5
 80054e4:	4669      	mov	r1, sp
 80054e6:	4620      	mov	r0, r4
 80054e8:	f7ff fff0 	bl	80054cc <pb_read>
}
 80054ec:	b005      	add	sp, #20
 80054ee:	bd30      	pop	{r4, r5, pc}
			if (!pb_read(stream, tmp, 16))
 80054f0:	2210      	movs	r2, #16
 80054f2:	4669      	mov	r1, sp
 80054f4:	4620      	mov	r0, r4
 80054f6:	f7ff ffe9 	bl	80054cc <pb_read>
 80054fa:	2800      	cmp	r0, #0
 80054fc:	d0f6      	beq.n	80054ec <pb_read+0x20>
			count -= 16;
 80054fe:	3d10      	subs	r5, #16
 8005500:	e7ed      	b.n	80054de <pb_read+0x12>
    if (stream->bytes_left < count)
 8005502:	68a3      	ldr	r3, [r4, #8]
 8005504:	42ab      	cmp	r3, r5
 8005506:	d201      	bcs.n	800550c <pb_read+0x40>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8005508:	2000      	movs	r0, #0
 800550a:	e7ef      	b.n	80054ec <pb_read+0x20>
    if (!stream->callback(stream, buf, count))
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	462a      	mov	r2, r5
 8005510:	4620      	mov	r0, r4
 8005512:	4798      	blx	r3
 8005514:	2800      	cmp	r0, #0
 8005516:	d0f7      	beq.n	8005508 <pb_read+0x3c>
    stream->bytes_left -= count;
 8005518:	68a3      	ldr	r3, [r4, #8]
 800551a:	1b5b      	subs	r3, r3, r5
 800551c:	60a3      	str	r3, [r4, #8]
    return true;
 800551e:	e7e5      	b.n	80054ec <pb_read+0x20>
 8005520:	08005331 	.word	0x08005331

08005524 <pb_decode_varint32>:
    return pb_decode_varint32_eof(stream, dest, NULL);
 8005524:	2200      	movs	r2, #0
 8005526:	f7ff bf8c 	b.w	8005442 <pb_decode_varint32_eof>

0800552a <pb_dec_fixed_length_bytes>:
        return false;
    return status;
}

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 800552a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800552c:	460f      	mov	r7, r1
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 800552e:	a901      	add	r1, sp, #4
{
 8005530:	4606      	mov	r6, r0
 8005532:	4615      	mov	r5, r2
    if (!pb_decode_varint32(stream, &size))
 8005534:	f7ff fff6 	bl	8005524 <pb_decode_varint32>
 8005538:	4604      	mov	r4, r0
 800553a:	b140      	cbz	r0, 800554e <pb_dec_fixed_length_bytes+0x24>
        return false;

    if (size > PB_SIZE_MAX)
 800553c:	9901      	ldr	r1, [sp, #4]
 800553e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005542:	d210      	bcs.n	8005566 <pb_dec_fixed_length_bytes+0x3c>
        PB_RETURN_ERROR(stream, "bytes overflow");

    if (size == 0)
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(dest, 0, field->data_size);
 8005544:	893a      	ldrh	r2, [r7, #8]
    if (size == 0)
 8005546:	b929      	cbnz	r1, 8005554 <pb_dec_fixed_length_bytes+0x2a>
        memset(dest, 0, field->data_size);
 8005548:	4628      	mov	r0, r5
 800554a:	f005 f922 	bl	800a792 <memset>

    if (size != field->data_size)
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");

    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
}
 800554e:	4620      	mov	r0, r4
 8005550:	b003      	add	sp, #12
 8005552:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (size != field->data_size)
 8005554:	428a      	cmp	r2, r1
 8005556:	d106      	bne.n	8005566 <pb_dec_fixed_length_bytes+0x3c>
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 8005558:	4629      	mov	r1, r5
 800555a:	4630      	mov	r0, r6
}
 800555c:	b003      	add	sp, #12
 800555e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 8005562:	f7ff bfb3 	b.w	80054cc <pb_read>
        return false;
 8005566:	2400      	movs	r4, #0
 8005568:	e7f1      	b.n	800554e <pb_dec_fixed_length_bytes+0x24>

0800556a <pb_dec_string>:
{
 800556a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800556e:	460f      	mov	r7, r1
    if (!pb_decode_varint32(stream, &size))
 8005570:	a901      	add	r1, sp, #4
{
 8005572:	4680      	mov	r8, r0
 8005574:	4616      	mov	r6, r2
    if (!pb_decode_varint32(stream, &size))
 8005576:	f7ff ffd5 	bl	8005524 <pb_decode_varint32>
 800557a:	b1a0      	cbz	r0, 80055a6 <pb_dec_string+0x3c>
    alloc_size = size + 1;
 800557c:	9c01      	ldr	r4, [sp, #4]
 800557e:	1c62      	adds	r2, r4, #1
 8005580:	f04f 0500 	mov.w	r5, #0
 8005584:	d204      	bcs.n	8005590 <pb_dec_string+0x26>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005586:	78bb      	ldrb	r3, [r7, #2]
 8005588:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800558c:	2b80      	cmp	r3, #128	; 0x80
 800558e:	d101      	bne.n	8005594 <pb_dec_string+0x2a>
        return false;
 8005590:	4628      	mov	r0, r5
 8005592:	e008      	b.n	80055a6 <pb_dec_string+0x3c>
        if (alloc_size > field->data_size)
 8005594:	893b      	ldrh	r3, [r7, #8]
 8005596:	4293      	cmp	r3, r2
 8005598:	d3fa      	bcc.n	8005590 <pb_dec_string+0x26>
    status = pb_read(stream, (pb_byte_t*)dest, size);
 800559a:	4622      	mov	r2, r4
 800559c:	4631      	mov	r1, r6
 800559e:	4640      	mov	r0, r8
 80055a0:	f7ff ff94 	bl	80054cc <pb_read>
    *((pb_byte_t*)dest + size) = 0;
 80055a4:	5535      	strb	r5, [r6, r4]
}
 80055a6:	b002      	add	sp, #8
 80055a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080055ac <pb_dec_bytes>:
{
 80055ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055ae:	460d      	mov	r5, r1
    if (!pb_decode_varint32(stream, &size))
 80055b0:	a901      	add	r1, sp, #4
{
 80055b2:	4606      	mov	r6, r0
 80055b4:	4614      	mov	r4, r2
    if (!pb_decode_varint32(stream, &size))
 80055b6:	f7ff ffb5 	bl	8005524 <pb_decode_varint32>
 80055ba:	b1b0      	cbz	r0, 80055ea <pb_dec_bytes+0x3e>
    if (size > PB_SIZE_MAX)
 80055bc:	9a01      	ldr	r2, [sp, #4]
 80055be:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80055c2:	d212      	bcs.n	80055ea <pb_dec_bytes+0x3e>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80055c4:	78ab      	ldrb	r3, [r5, #2]
 80055c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055ca:	2b80      	cmp	r3, #128	; 0x80
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 80055cc:	f102 0102 	add.w	r1, r2, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80055d0:	d00b      	beq.n	80055ea <pb_dec_bytes+0x3e>
        if (alloc_size > field->data_size)
 80055d2:	892b      	ldrh	r3, [r5, #8]
 80055d4:	428b      	cmp	r3, r1
 80055d6:	d308      	bcc.n	80055ea <pb_dec_bytes+0x3e>
    bdest->size = (pb_size_t)size;
 80055d8:	4621      	mov	r1, r4
    return pb_read(stream, bdest->bytes, size);
 80055da:	4630      	mov	r0, r6
    bdest->size = (pb_size_t)size;
 80055dc:	f821 2b02 	strh.w	r2, [r1], #2
}
 80055e0:	b002      	add	sp, #8
 80055e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_read(stream, bdest->bytes, size);
 80055e6:	f7ff bf71 	b.w	80054cc <pb_read>
}
 80055ea:	2000      	movs	r0, #0
 80055ec:	b002      	add	sp, #8
 80055ee:	bd70      	pop	{r4, r5, r6, pc}

080055f0 <pb_decode_varint>:
{
 80055f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint64_t result = 0;
 80055f4:	2500      	movs	r5, #0
{
 80055f6:	4680      	mov	r8, r0
 80055f8:	460e      	mov	r6, r1
    uint64_t result = 0;
 80055fa:	462f      	mov	r7, r5
    uint_fast8_t bitpos = 0;
 80055fc:	462c      	mov	r4, r5
        if (!pb_readbyte(stream, &byte))
 80055fe:	f10d 0107 	add.w	r1, sp, #7
 8005602:	4640      	mov	r0, r8
 8005604:	f7ff ff0e 	bl	8005424 <pb_readbyte>
 8005608:	b1c0      	cbz	r0, 800563c <pb_decode_varint+0x4c>
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 800560a:	f89d c007 	ldrb.w	ip, [sp, #7]
 800560e:	f1a4 0320 	sub.w	r3, r4, #32
 8005612:	f00c 027f 	and.w	r2, ip, #127	; 0x7f
 8005616:	f1c4 0120 	rsb	r1, r4, #32
 800561a:	fa02 f303 	lsl.w	r3, r2, r3
 800561e:	fa22 f101 	lsr.w	r1, r2, r1
 8005622:	430b      	orrs	r3, r1
 8005624:	40a2      	lsls	r2, r4
    } while (byte & 0x80);
 8005626:	f01c 0f80 	tst.w	ip, #128	; 0x80
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 800562a:	ea45 0502 	orr.w	r5, r5, r2
 800562e:	ea47 0703 	orr.w	r7, r7, r3
        bitpos = (uint_fast8_t)(bitpos + 7);
 8005632:	f104 0407 	add.w	r4, r4, #7
    } while (byte & 0x80);
 8005636:	d104      	bne.n	8005642 <pb_decode_varint+0x52>
    *dest = result;
 8005638:	e9c6 5700 	strd	r5, r7, [r6]
}
 800563c:	b002      	add	sp, #8
 800563e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (bitpos >= 64)
 8005642:	2c46      	cmp	r4, #70	; 0x46
 8005644:	d1db      	bne.n	80055fe <pb_decode_varint+0xe>
            PB_RETURN_ERROR(stream, "varint overflow");
 8005646:	2000      	movs	r0, #0
 8005648:	e7f8      	b.n	800563c <pb_decode_varint+0x4c>

0800564a <pb_dec_uvarint>:
{
 800564a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800564c:	460d      	mov	r5, r1
    if (!pb_decode_varint(stream, &value))
 800564e:	4669      	mov	r1, sp
{
 8005650:	4614      	mov	r4, r2
    if (!pb_decode_varint(stream, &value))
 8005652:	f7ff ffcd 	bl	80055f0 <pb_decode_varint>
 8005656:	b170      	cbz	r0, 8005676 <pb_dec_uvarint+0x2c>
    if (field->data_size == sizeof(pb_uint64_t))
 8005658:	892b      	ldrh	r3, [r5, #8]
 800565a:	2b08      	cmp	r3, #8
 800565c:	d10d      	bne.n	800567a <pb_dec_uvarint+0x30>
        clamped = *(pb_uint64_t*)dest = value;
 800565e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005662:	e9c4 3200 	strd	r3, r2, [r4]
    if (clamped != value)
 8005666:	e9dd 0100 	ldrd	r0, r1, [sp]
 800566a:	4291      	cmp	r1, r2
 800566c:	bf08      	it	eq
 800566e:	4298      	cmpeq	r0, r3
 8005670:	bf0c      	ite	eq
 8005672:	2001      	moveq	r0, #1
 8005674:	2000      	movne	r0, #0
}
 8005676:	b003      	add	sp, #12
 8005678:	bd30      	pop	{r4, r5, pc}
    else if (field->data_size == sizeof(uint32_t))
 800567a:	2b04      	cmp	r3, #4
 800567c:	d103      	bne.n	8005686 <pb_dec_uvarint+0x3c>
        clamped = *(uint32_t*)dest = (uint32_t)value;
 800567e:	9b00      	ldr	r3, [sp, #0]
 8005680:	6023      	str	r3, [r4, #0]
 8005682:	2200      	movs	r2, #0
 8005684:	e7ef      	b.n	8005666 <pb_dec_uvarint+0x1c>
    else if (field->data_size == sizeof(uint_least16_t))
 8005686:	2b02      	cmp	r3, #2
 8005688:	d103      	bne.n	8005692 <pb_dec_uvarint+0x48>
        clamped = *(uint_least16_t*)dest = (uint_least16_t)value;
 800568a:	9b00      	ldr	r3, [sp, #0]
 800568c:	8023      	strh	r3, [r4, #0]
 800568e:	b29b      	uxth	r3, r3
 8005690:	e7f7      	b.n	8005682 <pb_dec_uvarint+0x38>
    else if (field->data_size == sizeof(uint_least8_t))
 8005692:	2b01      	cmp	r3, #1
 8005694:	d104      	bne.n	80056a0 <pb_dec_uvarint+0x56>
        clamped = *(uint_least8_t*)dest = (uint_least8_t)value;
 8005696:	9b00      	ldr	r3, [sp, #0]
 8005698:	7023      	strb	r3, [r4, #0]
 800569a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800569e:	e7f0      	b.n	8005682 <pb_dec_uvarint+0x38>
        return false;
 80056a0:	2000      	movs	r0, #0
 80056a2:	e7e8      	b.n	8005676 <pb_dec_uvarint+0x2c>

080056a4 <pb_dec_varint>:
{
 80056a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056a6:	460d      	mov	r5, r1
    if (!pb_decode_varint(stream, &value))
 80056a8:	4669      	mov	r1, sp
{
 80056aa:	4614      	mov	r4, r2
    if (!pb_decode_varint(stream, &value))
 80056ac:	f7ff ffa0 	bl	80055f0 <pb_decode_varint>
 80056b0:	b130      	cbz	r0, 80056c0 <pb_dec_varint+0x1c>
    if (field->data_size == sizeof(pb_int64_t))
 80056b2:	892b      	ldrh	r3, [r5, #8]
 80056b4:	2b08      	cmp	r3, #8
        svalue = (pb_int64_t)value;
 80056b6:	e9dd 1200 	ldrd	r1, r2, [sp]
    if (field->data_size == sizeof(pb_int64_t))
 80056ba:	d103      	bne.n	80056c4 <pb_dec_varint+0x20>
        clamped = *(pb_int64_t*)dest = svalue;
 80056bc:	e9c4 1200 	strd	r1, r2, [r4]
}
 80056c0:	b003      	add	sp, #12
 80056c2:	bd30      	pop	{r4, r5, pc}
    else if (field->data_size == sizeof(int32_t))
 80056c4:	2b04      	cmp	r3, #4
        svalue = (int32_t)value;
 80056c6:	ea4f 70e1 	mov.w	r0, r1, asr #31
    else if (field->data_size == sizeof(int32_t))
 80056ca:	d109      	bne.n	80056e0 <pb_dec_varint+0x3c>
        clamped = *(int32_t*)dest = (int32_t)svalue;
 80056cc:	6021      	str	r1, [r4, #0]
 80056ce:	460b      	mov	r3, r1
 80056d0:	4602      	mov	r2, r0
    if (clamped != svalue)
 80056d2:	4282      	cmp	r2, r0
 80056d4:	bf08      	it	eq
 80056d6:	428b      	cmpeq	r3, r1
 80056d8:	bf0c      	ite	eq
 80056da:	2001      	moveq	r0, #1
 80056dc:	2000      	movne	r0, #0
 80056de:	e7ef      	b.n	80056c0 <pb_dec_varint+0x1c>
    else if (field->data_size == sizeof(int_least16_t))
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d103      	bne.n	80056ec <pb_dec_varint+0x48>
        clamped = *(int_least16_t*)dest = (int_least16_t)svalue;
 80056e4:	b20b      	sxth	r3, r1
 80056e6:	8023      	strh	r3, [r4, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 80056e8:	17da      	asrs	r2, r3, #31
 80056ea:	e7f2      	b.n	80056d2 <pb_dec_varint+0x2e>
    else if (field->data_size == sizeof(int_least8_t))
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d102      	bne.n	80056f6 <pb_dec_varint+0x52>
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 80056f0:	b24b      	sxtb	r3, r1
 80056f2:	7023      	strb	r3, [r4, #0]
 80056f4:	e7f8      	b.n	80056e8 <pb_dec_varint+0x44>
        return false;
 80056f6:	2000      	movs	r0, #0
 80056f8:	e7e2      	b.n	80056c0 <pb_dec_varint+0x1c>

080056fa <pb_decode_tag>:
{
 80056fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056fc:	461d      	mov	r5, r3
    *eof = false;
 80056fe:	2300      	movs	r3, #0
 8005700:	702b      	strb	r3, [r5, #0]
{
 8005702:	460e      	mov	r6, r1
    *wire_type = (pb_wire_type_t) 0;
 8005704:	700b      	strb	r3, [r1, #0]
{
 8005706:	4617      	mov	r7, r2
    *tag = 0;
 8005708:	6013      	str	r3, [r2, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 800570a:	a901      	add	r1, sp, #4
 800570c:	462a      	mov	r2, r5
 800570e:	f7ff fe98 	bl	8005442 <pb_decode_varint32_eof>
 8005712:	b120      	cbz	r0, 800571e <pb_decode_tag+0x24>
    if (temp == 0)
 8005714:	9c01      	ldr	r4, [sp, #4]
 8005716:	b924      	cbnz	r4, 8005722 <pb_decode_tag+0x28>
        *eof = true; /* Special feature: allow 0-terminated messages. */
 8005718:	2301      	movs	r3, #1
 800571a:	702b      	strb	r3, [r5, #0]
        return false;
 800571c:	4620      	mov	r0, r4
}
 800571e:	b003      	add	sp, #12
 8005720:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *tag = temp >> 3;
 8005722:	08e3      	lsrs	r3, r4, #3
    *wire_type = (pb_wire_type_t)(temp & 7);
 8005724:	f004 0407 	and.w	r4, r4, #7
    *tag = temp >> 3;
 8005728:	603b      	str	r3, [r7, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 800572a:	7034      	strb	r4, [r6, #0]
    return true;
 800572c:	e7f7      	b.n	800571e <pb_decode_tag+0x24>

0800572e <pb_skip_field>:
{
 800572e:	b513      	push	{r0, r1, r4, lr}
 8005730:	4604      	mov	r4, r0
    switch (wire_type)
 8005732:	2905      	cmp	r1, #5
 8005734:	d821      	bhi.n	800577a <pb_skip_field+0x4c>
 8005736:	e8df f001 	tbb	[pc, r1]
 800573a:	0f03      	.short	0x0f03
 800573c:	1e202017 	.word	0x1e202017
        if (!pb_read(stream, &byte, 1))
 8005740:	2201      	movs	r2, #1
 8005742:	a901      	add	r1, sp, #4
 8005744:	4620      	mov	r0, r4
 8005746:	f7ff fec1 	bl	80054cc <pb_read>
 800574a:	b118      	cbz	r0, 8005754 <pb_skip_field+0x26>
    } while (byte & 0x80);
 800574c:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	dbf5      	blt.n	8005740 <pb_skip_field+0x12>
}
 8005754:	b002      	add	sp, #8
 8005756:	bd10      	pop	{r4, pc}
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8005758:	2208      	movs	r2, #8
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 800575a:	2100      	movs	r1, #0
 800575c:	4620      	mov	r0, r4
}
 800575e:	b002      	add	sp, #8
 8005760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8005764:	f7ff beb2 	b.w	80054cc <pb_read>
    if (!pb_decode_varint32(stream, &length))
 8005768:	a901      	add	r1, sp, #4
 800576a:	f7ff fedb 	bl	8005524 <pb_decode_varint32>
 800576e:	2800      	cmp	r0, #0
 8005770:	d0f0      	beq.n	8005754 <pb_skip_field+0x26>
    return pb_read(stream, NULL, length);
 8005772:	9a01      	ldr	r2, [sp, #4]
 8005774:	e7f1      	b.n	800575a <pb_skip_field+0x2c>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8005776:	2204      	movs	r2, #4
 8005778:	e7ef      	b.n	800575a <pb_skip_field+0x2c>
    switch (wire_type)
 800577a:	2000      	movs	r0, #0
 800577c:	e7ea      	b.n	8005754 <pb_skip_field+0x26>

0800577e <pb_make_string_substream>:
{
 800577e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005780:	460d      	mov	r5, r1
    if (!pb_decode_varint32(stream, &size))
 8005782:	a901      	add	r1, sp, #4
{
 8005784:	4604      	mov	r4, r0
    if (!pb_decode_varint32(stream, &size))
 8005786:	f7ff fecd 	bl	8005524 <pb_decode_varint32>
 800578a:	4603      	mov	r3, r0
 800578c:	b918      	cbnz	r0, 8005796 <pb_make_string_substream+0x18>
        return false;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	b003      	add	sp, #12
 8005794:	bd30      	pop	{r4, r5, pc}
    *substream = *stream;
 8005796:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800579a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if (substream->bytes_left < size)
 800579e:	9901      	ldr	r1, [sp, #4]
 80057a0:	428a      	cmp	r2, r1
 80057a2:	d3f4      	bcc.n	800578e <pb_make_string_substream+0x10>
    substream->bytes_left = size;
 80057a4:	60a9      	str	r1, [r5, #8]
    stream->bytes_left -= size;
 80057a6:	68a2      	ldr	r2, [r4, #8]
 80057a8:	1a52      	subs	r2, r2, r1
 80057aa:	60a2      	str	r2, [r4, #8]
    return true;
 80057ac:	e7f0      	b.n	8005790 <pb_make_string_substream+0x12>

080057ae <pb_close_string_substream>:
    if (substream->bytes_left) {
 80057ae:	688a      	ldr	r2, [r1, #8]
{
 80057b0:	b538      	push	{r3, r4, r5, lr}
 80057b2:	4605      	mov	r5, r0
 80057b4:	460c      	mov	r4, r1
    if (substream->bytes_left) {
 80057b6:	b91a      	cbnz	r2, 80057c0 <pb_close_string_substream+0x12>
    stream->state = substream->state;
 80057b8:	6863      	ldr	r3, [r4, #4]
 80057ba:	606b      	str	r3, [r5, #4]
    return true;
 80057bc:	2001      	movs	r0, #1
}
 80057be:	bd38      	pop	{r3, r4, r5, pc}
        if (!pb_read(substream, NULL, substream->bytes_left))
 80057c0:	2100      	movs	r1, #0
 80057c2:	4620      	mov	r0, r4
 80057c4:	f7ff fe82 	bl	80054cc <pb_read>
 80057c8:	2800      	cmp	r0, #0
 80057ca:	d1f5      	bne.n	80057b8 <pb_close_string_substream+0xa>
 80057cc:	e7f7      	b.n	80057be <pb_close_string_substream+0x10>
	...

080057d0 <decode_field>:
{
 80057d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057d4:	460b      	mov	r3, r1
    switch (PB_ATYPE(iter->pos->type))
 80057d6:	6851      	ldr	r1, [r2, #4]
{
 80057d8:	4615      	mov	r5, r2
    switch (PB_ATYPE(iter->pos->type))
 80057da:	788a      	ldrb	r2, [r1, #2]
 80057dc:	f012 04c0 	ands.w	r4, r2, #192	; 0xc0
{
 80057e0:	b087      	sub	sp, #28
 80057e2:	4606      	mov	r6, r0
    switch (PB_ATYPE(iter->pos->type))
 80057e4:	d003      	beq.n	80057ee <decode_field+0x1e>
 80057e6:	2c40      	cmp	r4, #64	; 0x40
 80057e8:	d070      	beq.n	80058cc <decode_field+0xfc>
                    PB_RETURN_ERROR(stream, "array overflow");
 80057ea:	2400      	movs	r4, #0
 80057ec:	e00c      	b.n	8005808 <decode_field+0x38>
    func = PB_DECODERS[PB_LTYPE(type)];
 80057ee:	f002 0c0f 	and.w	ip, r2, #15
 80057f2:	4f62      	ldr	r7, [pc, #392]	; (800597c <decode_field+0x1ac>)
 80057f4:	f002 0230 	and.w	r2, r2, #48	; 0x30
    switch (PB_HTYPE(type))
 80057f8:	2a20      	cmp	r2, #32
    func = PB_DECODERS[PB_LTYPE(type)];
 80057fa:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
    switch (PB_HTYPE(type))
 80057fe:	d02a      	beq.n	8005856 <decode_field+0x86>
 8005800:	d806      	bhi.n	8005810 <decode_field+0x40>
 8005802:	b1d2      	cbz	r2, 800583a <decode_field+0x6a>
 8005804:	2a10      	cmp	r2, #16
 8005806:	d01e      	beq.n	8005846 <decode_field+0x76>
}
 8005808:	4620      	mov	r0, r4
 800580a:	b007      	add	sp, #28
 800580c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch (PB_HTYPE(type))
 8005810:	2a30      	cmp	r2, #48	; 0x30
 8005812:	d1f9      	bne.n	8005808 <decode_field+0x38>
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 8005814:	696b      	ldr	r3, [r5, #20]
 8005816:	880a      	ldrh	r2, [r1, #0]
 8005818:	801a      	strh	r2, [r3, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 800581a:	f1bc 0f07 	cmp.w	ip, #7
 800581e:	d109      	bne.n	8005834 <decode_field+0x64>
                memset(iter->pData, 0, iter->pos->data_size);
 8005820:	890a      	ldrh	r2, [r1, #8]
 8005822:	6928      	ldr	r0, [r5, #16]
 8005824:	4621      	mov	r1, r4
 8005826:	f004 ffb4 	bl	800a792 <memset>
                pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);
 800582a:	686b      	ldr	r3, [r5, #4]
 800582c:	6929      	ldr	r1, [r5, #16]
 800582e:	68d8      	ldr	r0, [r3, #12]
 8005830:	f7ff fde7 	bl	8005402 <pb_message_set_to_defaults>
            return func(stream, iter->pos, iter->pData);
 8005834:	692a      	ldr	r2, [r5, #16]
 8005836:	6869      	ldr	r1, [r5, #4]
 8005838:	e00b      	b.n	8005852 <decode_field+0x82>
            return func(stream, iter->pos, iter->pData);
 800583a:	692a      	ldr	r2, [r5, #16]
            return func(stream, iter->pos, iter->pData);
 800583c:	463b      	mov	r3, r7
}
 800583e:	b007      	add	sp, #28
 8005840:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return func(stream, iter->pos, iter->pData);
 8005844:	4718      	bx	r3
            if (iter->pSize != iter->pData)
 8005846:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800584a:	4293      	cmp	r3, r2
                *(bool*)iter->pSize = true;
 800584c:	bf1c      	itt	ne
 800584e:	2001      	movne	r0, #1
 8005850:	7018      	strbne	r0, [r3, #0]
            return func(stream, iter->pos, iter->pData);
 8005852:	4630      	mov	r0, r6
 8005854:	e7f2      	b.n	800583c <decode_field+0x6c>
            if (wire_type == PB_WT_STRING
 8005856:	2b02      	cmp	r3, #2
            if (iter->pSize != iter->pData)
 8005858:	f8d5 8014 	ldr.w	r8, [r5, #20]
            if (wire_type == PB_WT_STRING
 800585c:	d129      	bne.n	80058b2 <decode_field+0xe2>
                && PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 800585e:	f1bc 0f04 	cmp.w	ip, #4
 8005862:	d826      	bhi.n	80058b2 <decode_field+0xe2>
                if (!pb_make_string_substream(stream, &substream))
 8005864:	a903      	add	r1, sp, #12
 8005866:	f7ff ff8a 	bl	800577e <pb_make_string_substream>
 800586a:	4604      	mov	r4, r0
 800586c:	2800      	cmp	r0, #0
 800586e:	d0bc      	beq.n	80057ea <decode_field+0x1a>
                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
 8005870:	9b05      	ldr	r3, [sp, #20]
 8005872:	b12b      	cbz	r3, 8005880 <decode_field+0xb0>
 8005874:	6869      	ldr	r1, [r5, #4]
 8005876:	f8b8 3000 	ldrh.w	r3, [r8]
 800587a:	894a      	ldrh	r2, [r1, #10]
 800587c:	429a      	cmp	r2, r3
 800587e:	d809      	bhi.n	8005894 <decode_field+0xc4>
                if (substream.bytes_left != 0)
 8005880:	9b05      	ldr	r3, [sp, #20]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1b1      	bne.n	80057ea <decode_field+0x1a>
                if (!pb_close_string_substream(stream, &substream))
 8005886:	a903      	add	r1, sp, #12
 8005888:	4630      	mov	r0, r6
 800588a:	f7ff ff90 	bl	80057ae <pb_close_string_substream>
 800588e:	2800      	cmp	r0, #0
 8005890:	d1ba      	bne.n	8005808 <decode_field+0x38>
 8005892:	e7aa      	b.n	80057ea <decode_field+0x1a>
                    void *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8005894:	8908      	ldrh	r0, [r1, #8]
 8005896:	692a      	ldr	r2, [r5, #16]
                    if (!func(&substream, iter->pos, pItem))
 8005898:	fb03 2200 	mla	r2, r3, r0, r2
 800589c:	a803      	add	r0, sp, #12
 800589e:	47b8      	blx	r7
 80058a0:	b128      	cbz	r0, 80058ae <decode_field+0xde>
                    (*size)++;
 80058a2:	f8b8 3000 	ldrh.w	r3, [r8]
 80058a6:	3301      	adds	r3, #1
 80058a8:	f8a8 3000 	strh.w	r3, [r8]
 80058ac:	e7e0      	b.n	8005870 <decode_field+0xa0>
                        status = false;
 80058ae:	4604      	mov	r4, r0
 80058b0:	e7e6      	b.n	8005880 <decode_field+0xb0>
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 80058b2:	f8b8 3000 	ldrh.w	r3, [r8]
 80058b6:	692a      	ldr	r2, [r5, #16]
 80058b8:	8908      	ldrh	r0, [r1, #8]
                if ((*size)++ >= iter->pos->array_size)
 80058ba:	1c5c      	adds	r4, r3, #1
 80058bc:	f8a8 4000 	strh.w	r4, [r8]
 80058c0:	894c      	ldrh	r4, [r1, #10]
 80058c2:	429c      	cmp	r4, r3
 80058c4:	d991      	bls.n	80057ea <decode_field+0x1a>
                return func(stream, iter->pos, pItem);
 80058c6:	fb03 2200 	mla	r2, r3, r0, r2
 80058ca:	e7c2      	b.n	8005852 <decode_field+0x82>
    pb_callback_t *pCallback = (pb_callback_t*)iter->pData;
 80058cc:	692f      	ldr	r7, [r5, #16]
    if (pCallback == NULL || pCallback->funcs.decode == NULL)
 80058ce:	b10f      	cbz	r7, 80058d4 <decode_field+0x104>
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	b932      	cbnz	r2, 80058e2 <decode_field+0x112>
        return pb_skip_field(stream, wire_type);
 80058d4:	4619      	mov	r1, r3
 80058d6:	4630      	mov	r0, r6
}
 80058d8:	b007      	add	sp, #28
 80058da:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return pb_skip_field(stream, wire_type);
 80058de:	f7ff bf26 	b.w	800572e <pb_skip_field>
    if (wire_type == PB_WT_STRING)
 80058e2:	2b02      	cmp	r3, #2
    void **arg = &(pCallback->arg);
 80058e4:	f107 0804 	add.w	r8, r7, #4
    if (wire_type == PB_WT_STRING)
 80058e8:	d116      	bne.n	8005918 <decode_field+0x148>
        if (!pb_make_string_substream(stream, &substream))
 80058ea:	a903      	add	r1, sp, #12
 80058ec:	f7ff ff47 	bl	800577e <pb_make_string_substream>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	f43f af7a 	beq.w	80057ea <decode_field+0x1a>
            if (!pCallback->funcs.decode(&substream, iter->pos, arg))
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6869      	ldr	r1, [r5, #4]
 80058fa:	4642      	mov	r2, r8
 80058fc:	a803      	add	r0, sp, #12
 80058fe:	4798      	blx	r3
 8005900:	2800      	cmp	r0, #0
 8005902:	f43f af72 	beq.w	80057ea <decode_field+0x1a>
        } while (substream.bytes_left);
 8005906:	9b05      	ldr	r3, [sp, #20]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1f4      	bne.n	80058f6 <decode_field+0x126>
        if (!pb_close_string_substream(stream, &substream))
 800590c:	a903      	add	r1, sp, #12
 800590e:	4630      	mov	r0, r6
 8005910:	f7ff ff4d 	bl	80057ae <pb_close_string_substream>
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8005914:	4604      	mov	r4, r0
 8005916:	e777      	b.n	8005808 <decode_field+0x38>
    switch (wire_type)
 8005918:	2b01      	cmp	r3, #1
 800591a:	d021      	beq.n	8005960 <decode_field+0x190>
 800591c:	2b05      	cmp	r3, #5
 800591e:	d027      	beq.n	8005970 <decode_field+0x1a0>
 8005920:	2b00      	cmp	r3, #0
 8005922:	f47f af62 	bne.w	80057ea <decode_field+0x1a>
 8005926:	461c      	mov	r4, r3
 8005928:	46e9      	mov	r9, sp
                (*size)++;
 800592a:	3401      	adds	r4, #1
                if (*size > max_size) return false;
 800592c:	2c0b      	cmp	r4, #11
 800592e:	f43f af5c 	beq.w	80057ea <decode_field+0x1a>
                if (!pb_read(stream, buf, 1)) return false;
 8005932:	2201      	movs	r2, #1
 8005934:	4649      	mov	r1, r9
 8005936:	4630      	mov	r0, r6
 8005938:	f7ff fdc8 	bl	80054cc <pb_read>
 800593c:	2800      	cmp	r0, #0
 800593e:	f43f af54 	beq.w	80057ea <decode_field+0x1a>
            } while (*buf++ & 0x80);
 8005942:	f919 3b01 	ldrsb.w	r3, [r9], #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	dbef      	blt.n	800592a <decode_field+0x15a>
        substream = pb_istream_from_buffer(buffer, size);
 800594a:	4b0d      	ldr	r3, [pc, #52]	; (8005980 <decode_field+0x1b0>)
 800594c:	9303      	str	r3, [sp, #12]
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 800594e:	6869      	ldr	r1, [r5, #4]
 8005950:	683b      	ldr	r3, [r7, #0]
        substream = pb_istream_from_buffer(buffer, size);
 8005952:	f8cd d010 	str.w	sp, [sp, #16]
 8005956:	9405      	str	r4, [sp, #20]
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8005958:	4642      	mov	r2, r8
 800595a:	a803      	add	r0, sp, #12
 800595c:	4798      	blx	r3
 800595e:	e7d9      	b.n	8005914 <decode_field+0x144>
            return pb_read(stream, buf, 8);
 8005960:	2208      	movs	r2, #8
 8005962:	4669      	mov	r1, sp
 8005964:	f7ff fdb2 	bl	80054cc <pb_read>
            *size = 8;
 8005968:	2408      	movs	r4, #8
        if (!read_raw_value(stream, wire_type, buffer, &size))
 800596a:	2800      	cmp	r0, #0
 800596c:	d1ed      	bne.n	800594a <decode_field+0x17a>
 800596e:	e73c      	b.n	80057ea <decode_field+0x1a>
            return pb_read(stream, buf, 4);
 8005970:	2204      	movs	r2, #4
 8005972:	4669      	mov	r1, sp
 8005974:	f7ff fdaa 	bl	80054cc <pb_read>
            *size = 4;
 8005978:	2404      	movs	r4, #4
            return pb_read(stream, buf, 4);
 800597a:	e7f6      	b.n	800596a <decode_field+0x19a>
 800597c:	08020180 	.word	0x08020180
 8005980:	08005331 	.word	0x08005331

08005984 <pb_decode_noinit>:
{
 8005984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005988:	b091      	sub	sp, #68	; 0x44
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 800598a:	2400      	movs	r4, #0
{
 800598c:	4605      	mov	r5, r0
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 800598e:	a804      	add	r0, sp, #16
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 8005990:	e9cd 4402 	strd	r4, r4, [sp, #8]
    pb_size_t fixed_count_size = 0;
 8005994:	f8ad 4002 	strh.w	r4, [sp, #2]
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 8005998:	f7ff fc64 	bl	8005264 <pb_field_iter_begin>
    uint32_t extension_range_start = 0;
 800599c:	46a0      	mov	r8, r4
    while (stream->bytes_left)
 800599e:	68ab      	ldr	r3, [r5, #8]
 80059a0:	b9e3      	cbnz	r3, 80059dc <pb_decode_noinit+0x58>
    if (fixed_count_field != NULL &&
 80059a2:	b124      	cbz	r4, 80059ae <pb_decode_noinit+0x2a>
 80059a4:	8962      	ldrh	r2, [r4, #10]
 80059a6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d122      	bne.n	80059f4 <pb_decode_noinit+0x70>
            last_type = iter.pos->type;
 80059ae:	e9dd 3405 	ldrd	r3, r4, [sp, #20]
        } while (pb_field_iter_next(&iter));
 80059b2:	a804      	add	r0, sp, #16
            last_type = iter.pos->type;
 80059b4:	789d      	ldrb	r5, [r3, #2]
        } while (pb_field_iter_next(&iter));
 80059b6:	f7ff fc66 	bl	8005286 <pb_field_iter_next>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	d1f7      	bne.n	80059ae <pb_decode_noinit+0x2a>
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.pos->tag != 0)
 80059be:	f015 0f30 	tst.w	r5, #48	; 0x30
 80059c2:	d103      	bne.n	80059cc <pb_decode_noinit+0x48>
 80059c4:	9b05      	ldr	r3, [sp, #20]
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	b103      	cbz	r3, 80059cc <pb_decode_noinit+0x48>
            req_field_count++;
 80059ca:	3401      	adds	r4, #1
        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 80059cc:	2c40      	cmp	r4, #64	; 0x40
 80059ce:	f200 80bc 	bhi.w	8005b4a <pb_decode_noinit+0x1c6>
        if (req_field_count > 0)
 80059d2:	2c00      	cmp	r4, #0
 80059d4:	f040 80ba 	bne.w	8005b4c <pb_decode_noinit+0x1c8>
    return true;
 80059d8:	2001      	movs	r0, #1
 80059da:	e00c      	b.n	80059f6 <pb_decode_noinit+0x72>
        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 80059dc:	f10d 0301 	add.w	r3, sp, #1
 80059e0:	aa01      	add	r2, sp, #4
 80059e2:	4669      	mov	r1, sp
 80059e4:	4628      	mov	r0, r5
 80059e6:	f7ff fe88 	bl	80056fa <pb_decode_tag>
 80059ea:	b938      	cbnz	r0, 80059fc <pb_decode_noinit+0x78>
            if (eof)
 80059ec:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1d6      	bne.n	80059a2 <pb_decode_noinit+0x1e>
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 80059f4:	2000      	movs	r0, #0
}
 80059f6:	b011      	add	sp, #68	; 0x44
 80059f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!pb_field_iter_find(&iter, tag))
 80059fc:	9f01      	ldr	r7, [sp, #4]
 80059fe:	a804      	add	r0, sp, #16
 8005a00:	4639      	mov	r1, r7
 8005a02:	f7ff fc7e 	bl	8005302 <pb_field_iter_find>
 8005a06:	2800      	cmp	r0, #0
 8005a08:	d152      	bne.n	8005ab0 <pb_decode_noinit+0x12c>
            if (tag >= extension_range_start)
 8005a0a:	4547      	cmp	r7, r8
 8005a0c:	f0c0 80a5 	bcc.w	8005b5a <pb_decode_noinit+0x1d6>
    const pb_field_t *start = iter->pos;
 8005a10:	9e05      	ldr	r6, [sp, #20]
        if (PB_LTYPE(iter->pos->type) == PB_LTYPE_EXTENSION)
 8005a12:	9a05      	ldr	r2, [sp, #20]
 8005a14:	7893      	ldrb	r3, [r2, #2]
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	2b08      	cmp	r3, #8
 8005a1c:	f000 80a6 	beq.w	8005b6c <pb_decode_noinit+0x1e8>
        (void)pb_field_iter_next(iter);
 8005a20:	a804      	add	r0, sp, #16
 8005a22:	f7ff fc30 	bl	8005286 <pb_field_iter_next>
    } while (iter->pos != start);
 8005a26:	9b05      	ldr	r3, [sp, #20]
 8005a28:	429e      	cmp	r6, r3
 8005a2a:	d1f2      	bne.n	8005a12 <pb_decode_noinit+0x8e>
                    extension_range_start = (uint32_t)-1;
 8005a2c:	f04f 38ff 	mov.w	r8, #4294967295
                if (tag >= extension_range_start)
 8005a30:	4547      	cmp	r7, r8
                    if (!decode_extension(stream, tag, wire_type, &iter))
 8005a32:	f89d b000 	ldrb.w	fp, [sp]
                if (tag >= extension_range_start)
 8005a36:	f0c0 8090 	bcc.w	8005b5a <pb_decode_noinit+0x1d6>
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8005a3a:	9a08      	ldr	r2, [sp, #32]
                    size_t pos = stream->bytes_left;
 8005a3c:	f8d5 9008 	ldr.w	r9, [r5, #8]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8005a40:	6816      	ldr	r6, [r2, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8005a42:	68aa      	ldr	r2, [r5, #8]
 8005a44:	2e00      	cmp	r6, #0
 8005a46:	f000 8085 	beq.w	8005b54 <pb_decode_noinit+0x1d0>
 8005a4a:	4591      	cmp	r9, r2
 8005a4c:	d1a7      	bne.n	800599e <pb_decode_noinit+0x1a>
        if (extension->type->decode)
 8005a4e:	6832      	ldr	r2, [r6, #0]
 8005a50:	f8d2 a000 	ldr.w	sl, [r2]
 8005a54:	f1ba 0f00 	cmp.w	sl, #0
 8005a58:	d008      	beq.n	8005a6c <pb_decode_noinit+0xe8>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8005a5a:	465b      	mov	r3, fp
 8005a5c:	463a      	mov	r2, r7
 8005a5e:	4631      	mov	r1, r6
 8005a60:	4628      	mov	r0, r5
 8005a62:	47d0      	blx	sl
        if (!status)
 8005a64:	2800      	cmp	r0, #0
 8005a66:	d0c5      	beq.n	80059f4 <pb_decode_noinit+0x70>
        extension = extension->next;
 8005a68:	68b6      	ldr	r6, [r6, #8]
 8005a6a:	e7ea      	b.n	8005a42 <pb_decode_noinit+0xbe>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8005a6c:	f8d2 a008 	ldr.w	sl, [r2, #8]
    if (field->tag != tag)
 8005a70:	f8ba 2000 	ldrh.w	r2, [sl]
 8005a74:	4297      	cmp	r7, r2
 8005a76:	d1f7      	bne.n	8005a68 <pb_decode_noinit+0xe4>
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8005a78:	6872      	ldr	r2, [r6, #4]
 8005a7a:	4651      	mov	r1, sl
 8005a7c:	a80a      	add	r0, sp, #40	; 0x28
 8005a7e:	f7ff fbf1 	bl	8005264 <pb_field_iter_begin>
    iter->pData = extension->dest;
 8005a82:	6872      	ldr	r2, [r6, #4]
 8005a84:	920e      	str	r2, [sp, #56]	; 0x38
    iter->pSize = &extension->found;
 8005a86:	f106 020c 	add.w	r2, r6, #12
 8005a8a:	920f      	str	r2, [sp, #60]	; 0x3c
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005a8c:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8005a90:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8005a94:	2a80      	cmp	r2, #128	; 0x80
        iter->pData = &extension->dest;
 8005a96:	bf08      	it	eq
 8005a98:	1d32      	addeq	r2, r6, #4
    extension->found = true;
 8005a9a:	f04f 0301 	mov.w	r3, #1
        iter->pData = &extension->dest;
 8005a9e:	bf08      	it	eq
 8005aa0:	920e      	streq	r2, [sp, #56]	; 0x38
    return decode_field(stream, wire_type, &iter);
 8005aa2:	4659      	mov	r1, fp
    extension->found = true;
 8005aa4:	7333      	strb	r3, [r6, #12]
    return decode_field(stream, wire_type, &iter);
 8005aa6:	aa0a      	add	r2, sp, #40	; 0x28
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	f7ff fe91 	bl	80057d0 <decode_field>
 8005aae:	e7d9      	b.n	8005a64 <pb_decode_noinit+0xe0>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REPEATED
 8005ab0:	9a05      	ldr	r2, [sp, #20]
 8005ab2:	7893      	ldrb	r3, [r2, #2]
 8005ab4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	d119      	bne.n	8005af0 <pb_decode_noinit+0x16c>
            && iter.pSize == iter.pData)
 8005abc:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
 8005ac0:	4299      	cmp	r1, r3
 8005ac2:	d10e      	bne.n	8005ae2 <pb_decode_noinit+0x15e>
            if (fixed_count_field != iter.pos) {
 8005ac4:	42a2      	cmp	r2, r4
 8005ac6:	d008      	beq.n	8005ada <pb_decode_noinit+0x156>
                if (fixed_count_field != NULL &&
 8005ac8:	b124      	cbz	r4, 8005ad4 <pb_decode_noinit+0x150>
 8005aca:	8961      	ldrh	r1, [r4, #10]
 8005acc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005ad0:	4299      	cmp	r1, r3
 8005ad2:	d18f      	bne.n	80059f4 <pb_decode_noinit+0x70>
                fixed_count_size = 0;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f8ad 3002 	strh.w	r3, [sp, #2]
            iter.pSize = &fixed_count_size;
 8005ada:	f10d 0302 	add.w	r3, sp, #2
 8005ade:	9309      	str	r3, [sp, #36]	; 0x24
 8005ae0:	4614      	mov	r4, r2
        if (!decode_field(stream, wire_type, &iter))
 8005ae2:	f89d 1000 	ldrb.w	r1, [sp]
 8005ae6:	aa04      	add	r2, sp, #16
 8005ae8:	4628      	mov	r0, r5
 8005aea:	f7ff fe71 	bl	80057d0 <decode_field>
 8005aee:	e039      	b.n	8005b64 <pb_decode_noinit+0x1e0>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REQUIRED
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1f6      	bne.n	8005ae2 <pb_decode_noinit+0x15e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8005af4:	9a06      	ldr	r2, [sp, #24]
 8005af6:	2a3f      	cmp	r2, #63	; 0x3f
 8005af8:	d8f3      	bhi.n	8005ae2 <pb_decode_noinit+0x15e>
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8005afa:	0951      	lsrs	r1, r2, #5
 8005afc:	ab10      	add	r3, sp, #64	; 0x40
 8005afe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8005b02:	f002 021f 	and.w	r2, r2, #31
 8005b06:	2301      	movs	r3, #1
 8005b08:	4093      	lsls	r3, r2
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8005b0a:	f851 2c38 	ldr.w	r2, [r1, #-56]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	f841 3c38 	str.w	r3, [r1, #-56]
 8005b14:	e7e5      	b.n	8005ae2 <pb_decode_noinit+0x15e>
                if (fields_seen[i] != allbits)
 8005b16:	f851 0b04 	ldr.w	r0, [r1], #4
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	f47f af6a 	bne.w	80059f4 <pb_decode_noinit+0x70>
            for (i = 0; i < (req_field_count >> 5); i++)
 8005b20:	3201      	adds	r2, #1
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d1f7      	bne.n	8005b16 <pb_decode_noinit+0x192>
            if ((req_field_count & 31) != 0)
 8005b26:	f014 041f 	ands.w	r4, r4, #31
 8005b2a:	f43f af55 	beq.w	80059d8 <pb_decode_noinit+0x54>
                if (fields_seen[req_field_count >> 5] !=
 8005b2e:	aa10      	add	r2, sp, #64	; 0x40
 8005b30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                    (allbits >> (32 - (req_field_count & 31))))
 8005b34:	f1c4 0420 	rsb	r4, r4, #32
                if (fields_seen[req_field_count >> 5] !=
 8005b38:	f853 3c38 	ldr.w	r3, [r3, #-56]
                    (allbits >> (32 - (req_field_count & 31))))
 8005b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b40:	40e0      	lsrs	r0, r4
                if (fields_seen[req_field_count >> 5] !=
 8005b42:	1ac3      	subs	r3, r0, r3
 8005b44:	4258      	negs	r0, r3
 8005b46:	4158      	adcs	r0, r3
 8005b48:	e755      	b.n	80059f6 <pb_decode_noinit+0x72>
            req_field_count = PB_MAX_REQUIRED_FIELDS;
 8005b4a:	2440      	movs	r4, #64	; 0x40
            for (i = 0; i < (req_field_count >> 5); i++)
 8005b4c:	0963      	lsrs	r3, r4, #5
 8005b4e:	a902      	add	r1, sp, #8
 8005b50:	2200      	movs	r2, #0
 8005b52:	e7e6      	b.n	8005b22 <pb_decode_noinit+0x19e>
                    if (pos != stream->bytes_left)
 8005b54:	4591      	cmp	r9, r2
 8005b56:	f47f af22 	bne.w	800599e <pb_decode_noinit+0x1a>
            if (!pb_skip_field(stream, wire_type))
 8005b5a:	f89d 1000 	ldrb.w	r1, [sp]
 8005b5e:	4628      	mov	r0, r5
 8005b60:	f7ff fde5 	bl	800572e <pb_skip_field>
        if (!decode_field(stream, wire_type, &iter))
 8005b64:	2800      	cmp	r0, #0
 8005b66:	f47f af1a 	bne.w	800599e <pb_decode_noinit+0x1a>
 8005b6a:	e743      	b.n	80059f4 <pb_decode_noinit+0x70>
                    extension_range_start = iter.pos->tag;
 8005b6c:	f8b2 8000 	ldrh.w	r8, [r2]
 8005b70:	e75e      	b.n	8005a30 <pb_decode_noinit+0xac>

08005b72 <pb_decode>:
{
 8005b72:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b74:	460c      	mov	r4, r1
 8005b76:	4605      	mov	r5, r0
    pb_message_set_to_defaults(fields, dest_struct);
 8005b78:	4611      	mov	r1, r2
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	9201      	str	r2, [sp, #4]
 8005b7e:	f7ff fc40 	bl	8005402 <pb_message_set_to_defaults>
    status = pb_decode_noinit(stream, fields, dest_struct);
 8005b82:	9a01      	ldr	r2, [sp, #4]
 8005b84:	4621      	mov	r1, r4
 8005b86:	4628      	mov	r0, r5
}
 8005b88:	b003      	add	sp, #12
 8005b8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    status = pb_decode_noinit(stream, fields, dest_struct);
 8005b8e:	f7ff bef9 	b.w	8005984 <pb_decode_noinit>

08005b92 <pb_dec_submessage>:
{
 8005b92:	b570      	push	{r4, r5, r6, lr}
 8005b94:	b086      	sub	sp, #24
    const pb_field_t* submsg_fields = (const pb_field_t*)field->ptr;
 8005b96:	68ce      	ldr	r6, [r1, #12]
{
 8005b98:	9201      	str	r2, [sp, #4]
 8005b9a:	460c      	mov	r4, r1
    if (!pb_make_string_substream(stream, &substream))
 8005b9c:	a903      	add	r1, sp, #12
{
 8005b9e:	4605      	mov	r5, r0
    if (!pb_make_string_substream(stream, &substream))
 8005ba0:	f7ff fded 	bl	800577e <pb_make_string_substream>
 8005ba4:	b188      	cbz	r0, 8005bca <pb_dec_submessage+0x38>
    if (field->ptr == NULL)
 8005ba6:	68e3      	ldr	r3, [r4, #12]
 8005ba8:	b17b      	cbz	r3, 8005bca <pb_dec_submessage+0x38>
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8005baa:	78a3      	ldrb	r3, [r4, #2]
 8005bac:	9a01      	ldr	r2, [sp, #4]
 8005bae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005bb2:	2b20      	cmp	r3, #32
        status = pb_decode(&substream, submsg_fields, dest);
 8005bb4:	4631      	mov	r1, r6
 8005bb6:	a803      	add	r0, sp, #12
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8005bb8:	d10b      	bne.n	8005bd2 <pb_dec_submessage+0x40>
        status = pb_decode(&substream, submsg_fields, dest);
 8005bba:	f7ff ffda 	bl	8005b72 <pb_decode>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 8005bbe:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 8005bc0:	a903      	add	r1, sp, #12
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	f7ff fdf3 	bl	80057ae <pb_close_string_substream>
 8005bc8:	b900      	cbnz	r0, 8005bcc <pb_dec_submessage+0x3a>
        return false;
 8005bca:	2400      	movs	r4, #0
}
 8005bcc:	4620      	mov	r0, r4
 8005bce:	b006      	add	sp, #24
 8005bd0:	bd70      	pop	{r4, r5, r6, pc}
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 8005bd2:	f7ff fed7 	bl	8005984 <pb_decode_noinit>
 8005bd6:	e7f2      	b.n	8005bbe <pb_dec_submessage+0x2c>

08005bd8 <pb_decode_delimited>:
{
 8005bd8:	b530      	push	{r4, r5, lr}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	460c      	mov	r4, r1
    if (!pb_make_string_substream(stream, &substream))
 8005bde:	a903      	add	r1, sp, #12
{
 8005be0:	4605      	mov	r5, r0
 8005be2:	9201      	str	r2, [sp, #4]
    if (!pb_make_string_substream(stream, &substream))
 8005be4:	f7ff fdcb 	bl	800577e <pb_make_string_substream>
 8005be8:	b150      	cbz	r0, 8005c00 <pb_decode_delimited+0x28>
    status = pb_decode(&substream, fields, dest_struct);
 8005bea:	4621      	mov	r1, r4
 8005bec:	9a01      	ldr	r2, [sp, #4]
 8005bee:	a803      	add	r0, sp, #12
 8005bf0:	f7ff ffbf 	bl	8005b72 <pb_decode>
    if (!pb_close_string_substream(stream, &substream))
 8005bf4:	a903      	add	r1, sp, #12
    status = pb_decode(&substream, fields, dest_struct);
 8005bf6:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	f7ff fdd8 	bl	80057ae <pb_close_string_substream>
 8005bfe:	b900      	cbnz	r0, 8005c02 <pb_decode_delimited+0x2a>
        return false;
 8005c00:	2400      	movs	r4, #0
}
 8005c02:	4620      	mov	r0, r4
 8005c04:	b007      	add	sp, #28
 8005c06:	bd30      	pop	{r4, r5, pc}

08005c08 <pb_decode_svarint>:
{
 8005c08:	b513      	push	{r0, r1, r4, lr}
 8005c0a:	460c      	mov	r4, r1
    if (!pb_decode_varint(stream, &value))
 8005c0c:	4669      	mov	r1, sp
 8005c0e:	f7ff fcef 	bl	80055f0 <pb_decode_varint>
 8005c12:	b160      	cbz	r0, 8005c2e <pb_decode_svarint+0x26>
    if (value & 1)
 8005c14:	e9dd 1300 	ldrd	r1, r3, [sp]
        *dest = (pb_int64_t)(~(value >> 1));
 8005c18:	084a      	lsrs	r2, r1, #1
 8005c1a:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
    if (value & 1)
 8005c1e:	07c9      	lsls	r1, r1, #31
        *dest = (pb_int64_t)(~(value >> 1));
 8005c20:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8005c24:	bf44      	itt	mi
 8005c26:	43d2      	mvnmi	r2, r2
 8005c28:	43db      	mvnmi	r3, r3
        *dest = (pb_int64_t)(value >> 1);
 8005c2a:	e9c4 2300 	strd	r2, r3, [r4]
}
 8005c2e:	b002      	add	sp, #8
 8005c30:	bd10      	pop	{r4, pc}

08005c32 <pb_dec_svarint>:
{
 8005c32:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c34:	460d      	mov	r5, r1
    if (!pb_decode_svarint(stream, &value))
 8005c36:	4669      	mov	r1, sp
{
 8005c38:	4614      	mov	r4, r2
    if (!pb_decode_svarint(stream, &value))
 8005c3a:	f7ff ffe5 	bl	8005c08 <pb_decode_svarint>
 8005c3e:	b170      	cbz	r0, 8005c5e <pb_dec_svarint+0x2c>
    if (field->data_size == sizeof(pb_int64_t))
 8005c40:	892b      	ldrh	r3, [r5, #8]
 8005c42:	2b08      	cmp	r3, #8
 8005c44:	d10d      	bne.n	8005c62 <pb_dec_svarint+0x30>
        clamped = *(pb_int64_t*)dest = value;
 8005c46:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005c4a:	e9c4 3200 	strd	r3, r2, [r4]
    if (clamped != value)
 8005c4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c52:	4291      	cmp	r1, r2
 8005c54:	bf08      	it	eq
 8005c56:	4298      	cmpeq	r0, r3
 8005c58:	bf0c      	ite	eq
 8005c5a:	2001      	moveq	r0, #1
 8005c5c:	2000      	movne	r0, #0
}
 8005c5e:	b003      	add	sp, #12
 8005c60:	bd30      	pop	{r4, r5, pc}
    else if (field->data_size == sizeof(int32_t))
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	d103      	bne.n	8005c6e <pb_dec_svarint+0x3c>
        clamped = *(int32_t*)dest = (int32_t)value;
 8005c66:	9b00      	ldr	r3, [sp, #0]
 8005c68:	6023      	str	r3, [r4, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 8005c6a:	17da      	asrs	r2, r3, #31
 8005c6c:	e7ef      	b.n	8005c4e <pb_dec_svarint+0x1c>
    else if (field->data_size == sizeof(int_least16_t))
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d103      	bne.n	8005c7a <pb_dec_svarint+0x48>
        clamped = *(int_least16_t*)dest = (int_least16_t)value;
 8005c72:	f9bd 3000 	ldrsh.w	r3, [sp]
 8005c76:	8023      	strh	r3, [r4, #0]
 8005c78:	e7f7      	b.n	8005c6a <pb_dec_svarint+0x38>
    else if (field->data_size == sizeof(int_least8_t))
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d103      	bne.n	8005c86 <pb_dec_svarint+0x54>
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 8005c7e:	f99d 3000 	ldrsb.w	r3, [sp]
 8005c82:	7023      	strb	r3, [r4, #0]
 8005c84:	e7f1      	b.n	8005c6a <pb_dec_svarint+0x38>
        return false;
 8005c86:	2000      	movs	r0, #0
 8005c88:	e7e9      	b.n	8005c5e <pb_dec_svarint+0x2c>

08005c8a <pb_decode_fixed32>:
{
 8005c8a:	b513      	push	{r0, r1, r4, lr}
    if (!pb_read(stream, bytes, 4))
 8005c8c:	2204      	movs	r2, #4
{
 8005c8e:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 4))
 8005c90:	eb0d 0102 	add.w	r1, sp, r2
 8005c94:	f7ff fc1a 	bl	80054cc <pb_read>
 8005c98:	b108      	cbz	r0, 8005c9e <pb_decode_fixed32+0x14>
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 8005c9a:	9b01      	ldr	r3, [sp, #4]
 8005c9c:	6023      	str	r3, [r4, #0]
}
 8005c9e:	b002      	add	sp, #8
 8005ca0:	bd10      	pop	{r4, pc}

08005ca2 <pb_dec_fixed32>:
    return pb_decode_fixed32(stream, dest);
 8005ca2:	4611      	mov	r1, r2
 8005ca4:	f7ff bff1 	b.w	8005c8a <pb_decode_fixed32>

08005ca8 <pb_decode_fixed64>:
{
 8005ca8:	b513      	push	{r0, r1, r4, lr}
    if (!pb_read(stream, bytes, 8))
 8005caa:	2208      	movs	r2, #8
{
 8005cac:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 8))
 8005cae:	4669      	mov	r1, sp
 8005cb0:	f7ff fc0c 	bl	80054cc <pb_read>
 8005cb4:	b118      	cbz	r0, 8005cbe <pb_decode_fixed64+0x16>
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 8005cb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cba:	e9c4 2300 	strd	r2, r3, [r4]
}
 8005cbe:	b002      	add	sp, #8
 8005cc0:	bd10      	pop	{r4, pc}

08005cc2 <pb_dec_fixed64>:
    return pb_decode_fixed64(stream, dest);
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	f7ff bff0 	b.w	8005ca8 <pb_decode_fixed64>

08005cc8 <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
{
 8005cc8:	b510      	push	{r4, lr}
 8005cca:	460a      	mov	r2, r1
    pb_type_t type = field->type;
 8005ccc:	7881      	ldrb	r1, [r0, #2]
    const void *pSize = (const char*)pData + field->size_offset;

    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 8005cce:	f011 0330 	ands.w	r3, r1, #48	; 0x30
{
 8005cd2:	b086      	sub	sp, #24
    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 8005cd4:	d03f      	beq.n	8005d56 <pb_check_proto3_default_value+0x8e>
    {
        /* Required proto2 fields inside proto3 submessage, pretty rare case */
        return false;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8005cd6:	2b20      	cmp	r3, #32
    const void *pSize = (const char*)pData + field->size_offset;
 8005cd8:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8005cdc:	d104      	bne.n	8005ce8 <pb_check_proto3_default_value+0x20>
        return *(const pb_size_t*)pSize == 0;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    {
        /* Oneof fields */
        return *(const pb_size_t*)pSize == 0;
 8005cde:	5b10      	ldrh	r0, [r2, r4]
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    {
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)pData;
            return bytes->size == 0;
 8005ce0:	fab0 f080 	clz	r0, r0
 8005ce4:	0940      	lsrs	r0, r0, #5
 8005ce6:	e007      	b.n	8005cf8 <pb_check_proto3_default_value+0x30>
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8005ce8:	2b30      	cmp	r3, #48	; 0x30
 8005cea:	d0f8      	beq.n	8005cde <pb_check_proto3_default_value+0x16>
    else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 8005cec:	2b10      	cmp	r3, #16
 8005cee:	d105      	bne.n	8005cfc <pb_check_proto3_default_value+0x34>
 8005cf0:	b124      	cbz	r4, 8005cfc <pb_check_proto3_default_value+0x34>
        return *(const bool*)pSize == false;
 8005cf2:	5d10      	ldrb	r0, [r2, r4]
 8005cf4:	f080 0001 	eor.w	r0, r0, #1
	        }
	    }

	    return true;
	}
}
 8005cf8:	b006      	add	sp, #24
 8005cfa:	bd10      	pop	{r4, pc}
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8005cfc:	f011 0fc0 	tst.w	r1, #192	; 0xc0
 8005d00:	d005      	beq.n	8005d0e <pb_check_proto3_default_value+0x46>
 8005d02:	8903      	ldrh	r3, [r0, #8]
 8005d04:	4413      	add	r3, r2
	    for (i = 0; i < field->data_size; i++)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d121      	bne.n	8005d4e <pb_check_proto3_default_value+0x86>
	    return true;
 8005d0a:	2001      	movs	r0, #1
 8005d0c:	e7f4      	b.n	8005cf8 <pb_check_proto3_default_value+0x30>
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 8005d0e:	f001 030f 	and.w	r3, r1, #15
 8005d12:	2b05      	cmp	r3, #5
 8005d14:	d101      	bne.n	8005d1a <pb_check_proto3_default_value+0x52>
            return bytes->size == 0;
 8005d16:	8810      	ldrh	r0, [r2, #0]
 8005d18:	e7e2      	b.n	8005ce0 <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 8005d1a:	2b06      	cmp	r3, #6
 8005d1c:	d101      	bne.n	8005d22 <pb_check_proto3_default_value+0x5a>
            return *(const char*)pData == '\0';
 8005d1e:	7810      	ldrb	r0, [r2, #0]
 8005d20:	e7de      	b.n	8005ce0 <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 8005d22:	2b09      	cmp	r3, #9
 8005d24:	d101      	bne.n	8005d2a <pb_check_proto3_default_value+0x62>
            return field->data_size == 0;
 8005d26:	8900      	ldrh	r0, [r0, #8]
 8005d28:	e7da      	b.n	8005ce0 <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8005d2a:	2b07      	cmp	r3, #7
 8005d2c:	d1e9      	bne.n	8005d02 <pb_check_proto3_default_value+0x3a>
            if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 8005d2e:	68c1      	ldr	r1, [r0, #12]
 8005d30:	4668      	mov	r0, sp
 8005d32:	f7ff fa97 	bl	8005264 <pb_field_iter_begin>
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d0e7      	beq.n	8005d0a <pb_check_proto3_default_value+0x42>
                    if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 8005d3a:	9904      	ldr	r1, [sp, #16]
 8005d3c:	9801      	ldr	r0, [sp, #4]
 8005d3e:	f7ff ffc3 	bl	8005cc8 <pb_check_proto3_default_value>
 8005d42:	2800      	cmp	r0, #0
 8005d44:	d0d8      	beq.n	8005cf8 <pb_check_proto3_default_value+0x30>
                } while (pb_field_iter_next(&iter));
 8005d46:	4668      	mov	r0, sp
 8005d48:	f7ff fa9d 	bl	8005286 <pb_field_iter_next>
 8005d4c:	e7f3      	b.n	8005d36 <pb_check_proto3_default_value+0x6e>
	        if (p[i] != 0)
 8005d4e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005d52:	2900      	cmp	r1, #0
 8005d54:	d0d7      	beq.n	8005d06 <pb_check_proto3_default_value+0x3e>
        return false;
 8005d56:	2000      	movs	r0, #0
 8005d58:	e7ce      	b.n	8005cf8 <pb_check_proto3_default_value+0x30>

08005d5a <pb_write>:
{
 8005d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (stream->callback != NULL)
 8005d5c:	6806      	ldr	r6, [r0, #0]
        if (stream->bytes_written + count > stream->max_size)
 8005d5e:	68c3      	ldr	r3, [r0, #12]
{
 8005d60:	4604      	mov	r4, r0
 8005d62:	4615      	mov	r5, r2
    if (stream->callback != NULL)
 8005d64:	b926      	cbnz	r6, 8005d70 <pb_write+0x16>
    stream->bytes_written += count;
 8005d66:	68e3      	ldr	r3, [r4, #12]
 8005d68:	442b      	add	r3, r5
 8005d6a:	60e3      	str	r3, [r4, #12]
    return true;
 8005d6c:	2001      	movs	r0, #1
}
 8005d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (stream->bytes_written + count > stream->max_size)
 8005d70:	6887      	ldr	r7, [r0, #8]
 8005d72:	4413      	add	r3, r2
 8005d74:	429f      	cmp	r7, r3
 8005d76:	d201      	bcs.n	8005d7c <pb_write+0x22>
            PB_RETURN_ERROR(stream, "stream full");
 8005d78:	2000      	movs	r0, #0
 8005d7a:	e7f8      	b.n	8005d6e <pb_write+0x14>
        if (!stream->callback(stream, buf, count))
 8005d7c:	47b0      	blx	r6
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d1f1      	bne.n	8005d66 <pb_write+0xc>
 8005d82:	e7f9      	b.n	8005d78 <pb_write+0x1e>

08005d84 <pb_encode_varint>:
  return pb_write(stream, buffer, i);
}
#endif

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 8005d84:	b5f0      	push	{r4, r5, r6, r7, lr}
    pb_byte_t buffer[10];
    size_t i = 0;
    
    if (value <= 0x7F)
 8005d86:	2a80      	cmp	r2, #128	; 0x80
 8005d88:	f173 0100 	sbcs.w	r1, r3, #0
{
 8005d8c:	b085      	sub	sp, #20
 8005d8e:	4605      	mov	r5, r0
    if (value <= 0x7F)
 8005d90:	d207      	bcs.n	8005da2 <pb_encode_varint+0x1e>
    {
        pb_byte_t v = (pb_byte_t)value;
 8005d92:	f88d 2004 	strb.w	r2, [sp, #4]
        return pb_write(stream, &v, 1);
 8005d96:	a901      	add	r1, sp, #4
 8005d98:	2201      	movs	r2, #1
        value >>= 7;
        i++;
    }
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
    
    return pb_write(stream, buffer, i);
 8005d9a:	f7ff ffde 	bl	8005d5a <pb_write>
}
 8005d9e:	b005      	add	sp, #20
 8005da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005da2:	ae01      	add	r6, sp, #4
    size_t i = 0;
 8005da4:	2400      	movs	r4, #0
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 8005da6:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8005daa:	f806 1b01 	strb.w	r1, [r6], #1
        value >>= 7;
 8005dae:	09d1      	lsrs	r1, r2, #7
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 8005db0:	b2d0      	uxtb	r0, r2
        value >>= 7;
 8005db2:	ea41 6243 	orr.w	r2, r1, r3, lsl #25
 8005db6:	09db      	lsrs	r3, r3, #7
    while (value)
 8005db8:	ea52 0703 	orrs.w	r7, r2, r3
 8005dbc:	4621      	mov	r1, r4
        i++;
 8005dbe:	f104 0401 	add.w	r4, r4, #1
    while (value)
 8005dc2:	d1f0      	bne.n	8005da6 <pb_encode_varint+0x22>
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 8005dc4:	f101 0310 	add.w	r3, r1, #16
 8005dc8:	446b      	add	r3, sp
 8005dca:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8005dce:	f803 2c0c 	strb.w	r2, [r3, #-12]
    return pb_write(stream, buffer, i);
 8005dd2:	a901      	add	r1, sp, #4
 8005dd4:	4622      	mov	r2, r4
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	e7df      	b.n	8005d9a <pb_encode_varint+0x16>

08005dda <pb_enc_uvarint>:

static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    pb_uint64_t value = 0;
    
    if (field->data_size == sizeof(uint_least8_t))
 8005dda:	890b      	ldrh	r3, [r1, #8]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d104      	bne.n	8005dea <pb_enc_uvarint+0x10>
        value = *(const uint_least8_t*)src;
 8005de0:	7811      	ldrb	r1, [r2, #0]
    else if (field->data_size == sizeof(uint_least16_t))
        value = *(const uint_least16_t*)src;
 8005de2:	2300      	movs	r3, #0
    else if (field->data_size == sizeof(pb_uint64_t))
        value = *(const pb_uint64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_varint(stream, value);
 8005de4:	460a      	mov	r2, r1
 8005de6:	f7ff bfcd 	b.w	8005d84 <pb_encode_varint>
    else if (field->data_size == sizeof(uint_least16_t))
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d101      	bne.n	8005df2 <pb_enc_uvarint+0x18>
        value = *(const uint_least16_t*)src;
 8005dee:	8811      	ldrh	r1, [r2, #0]
 8005df0:	e7f7      	b.n	8005de2 <pb_enc_uvarint+0x8>
    else if (field->data_size == sizeof(uint32_t))
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d101      	bne.n	8005dfa <pb_enc_uvarint+0x20>
        value = *(const uint32_t*)src;
 8005df6:	6811      	ldr	r1, [r2, #0]
 8005df8:	e7f3      	b.n	8005de2 <pb_enc_uvarint+0x8>
    else if (field->data_size == sizeof(pb_uint64_t))
 8005dfa:	2b08      	cmp	r3, #8
 8005dfc:	d102      	bne.n	8005e04 <pb_enc_uvarint+0x2a>
        value = *(const pb_uint64_t*)src;
 8005dfe:	e9d2 1300 	ldrd	r1, r3, [r2]
 8005e02:	e7ef      	b.n	8005de4 <pb_enc_uvarint+0xa>
}
 8005e04:	2000      	movs	r0, #0
 8005e06:	4770      	bx	lr

08005e08 <pb_enc_varint>:
{
 8005e08:	4613      	mov	r3, r2
    if (field->data_size == sizeof(int_least8_t))
 8005e0a:	890a      	ldrh	r2, [r1, #8]
 8005e0c:	2a01      	cmp	r2, #1
 8005e0e:	d104      	bne.n	8005e1a <pb_enc_varint+0x12>
        value = *(const int_least8_t*)src;
 8005e10:	f993 2000 	ldrsb.w	r2, [r3]
        value = *(const int_least16_t*)src;
 8005e14:	17d3      	asrs	r3, r2, #31
      return pb_encode_varint(stream, (pb_uint64_t)value);
 8005e16:	f7ff bfb5 	b.w	8005d84 <pb_encode_varint>
    else if (field->data_size == sizeof(int_least16_t))
 8005e1a:	2a02      	cmp	r2, #2
 8005e1c:	d102      	bne.n	8005e24 <pb_enc_varint+0x1c>
        value = *(const int_least16_t*)src;
 8005e1e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005e22:	e7f7      	b.n	8005e14 <pb_enc_varint+0xc>
    else if (field->data_size == sizeof(int32_t))
 8005e24:	2a04      	cmp	r2, #4
 8005e26:	d101      	bne.n	8005e2c <pb_enc_varint+0x24>
        value = *(const int32_t*)src;
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	e7f3      	b.n	8005e14 <pb_enc_varint+0xc>
    else if (field->data_size == sizeof(pb_int64_t))
 8005e2c:	2a08      	cmp	r2, #8
 8005e2e:	d102      	bne.n	8005e36 <pb_enc_varint+0x2e>
        value = *(const pb_int64_t*)src;
 8005e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e34:	e7ef      	b.n	8005e16 <pb_enc_varint+0xe>
}
 8005e36:	2000      	movs	r0, #0
 8005e38:	4770      	bx	lr

08005e3a <pb_encode_svarint>:
        zigzagged = ~((pb_uint64_t)value << 1);
 8005e3a:	1892      	adds	r2, r2, r2
 8005e3c:	eb43 0103 	adc.w	r1, r3, r3
    return pb_encode_varint(stream, zigzagged);
 8005e40:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
 8005e44:	ea81 73e3 	eor.w	r3, r1, r3, asr #31
 8005e48:	f7ff bf9c 	b.w	8005d84 <pb_encode_varint>

08005e4c <pb_enc_svarint>:

static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8005e4c:	4613      	mov	r3, r2
    pb_int64_t value = 0;
    
    if (field->data_size == sizeof(int_least8_t))
 8005e4e:	890a      	ldrh	r2, [r1, #8]
 8005e50:	2a01      	cmp	r2, #1
 8005e52:	d104      	bne.n	8005e5e <pb_enc_svarint+0x12>
        value = *(const int_least8_t*)src;
 8005e54:	f993 2000 	ldrsb.w	r2, [r3]
    else if (field->data_size == sizeof(int_least16_t))
        value = *(const int_least16_t*)src;
 8005e58:	17d3      	asrs	r3, r2, #31
    else if (field->data_size == sizeof(pb_int64_t))
        value = *(const pb_int64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_svarint(stream, value);
 8005e5a:	f7ff bfee 	b.w	8005e3a <pb_encode_svarint>
    else if (field->data_size == sizeof(int_least16_t))
 8005e5e:	2a02      	cmp	r2, #2
 8005e60:	d102      	bne.n	8005e68 <pb_enc_svarint+0x1c>
        value = *(const int_least16_t*)src;
 8005e62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005e66:	e7f7      	b.n	8005e58 <pb_enc_svarint+0xc>
    else if (field->data_size == sizeof(int32_t))
 8005e68:	2a04      	cmp	r2, #4
 8005e6a:	d101      	bne.n	8005e70 <pb_enc_svarint+0x24>
        value = *(const int32_t*)src;
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	e7f3      	b.n	8005e58 <pb_enc_svarint+0xc>
    else if (field->data_size == sizeof(pb_int64_t))
 8005e70:	2a08      	cmp	r2, #8
 8005e72:	d102      	bne.n	8005e7a <pb_enc_svarint+0x2e>
        value = *(const pb_int64_t*)src;
 8005e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e78:	e7ef      	b.n	8005e5a <pb_enc_svarint+0xe>
}
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	4770      	bx	lr

08005e7e <pb_encode_fixed32>:
{
 8005e7e:	b507      	push	{r0, r1, r2, lr}
    return pb_write(stream, bytes, 4);
 8005e80:	2204      	movs	r2, #4
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8005e82:	680b      	ldr	r3, [r1, #0]
 8005e84:	9301      	str	r3, [sp, #4]
    return pb_write(stream, bytes, 4);
 8005e86:	eb0d 0102 	add.w	r1, sp, r2
 8005e8a:	f7ff ff66 	bl	8005d5a <pb_write>
}
 8005e8e:	b003      	add	sp, #12
 8005e90:	f85d fb04 	ldr.w	pc, [sp], #4

08005e94 <pb_enc_fixed32>:
}

static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
 8005e94:	4611      	mov	r1, r2
 8005e96:	f7ff bff2 	b.w	8005e7e <pb_encode_fixed32>

08005e9a <pb_encode_fixed64>:
{
 8005e9a:	b507      	push	{r0, r1, r2, lr}
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8005e9c:	e9d1 2300 	ldrd	r2, r3, [r1]
 8005ea0:	9200      	str	r2, [sp, #0]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 8005ea2:	0a1a      	lsrs	r2, r3, #8
 8005ea4:	f88d 2005 	strb.w	r2, [sp, #5]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 8005ea8:	0c1a      	lsrs	r2, r3, #16
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 8005eaa:	f88d 3004 	strb.w	r3, [sp, #4]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 8005eae:	f88d 2006 	strb.w	r2, [sp, #6]
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 8005eb2:	0e1b      	lsrs	r3, r3, #24
    return pb_write(stream, bytes, 8);
 8005eb4:	2208      	movs	r2, #8
 8005eb6:	4669      	mov	r1, sp
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 8005eb8:	f88d 3007 	strb.w	r3, [sp, #7]
    return pb_write(stream, bytes, 8);
 8005ebc:	f7ff ff4d 	bl	8005d5a <pb_write>
}
 8005ec0:	b003      	add	sp, #12
 8005ec2:	f85d fb04 	ldr.w	pc, [sp], #4

08005ec6 <pb_enc_fixed64>:
    return pb_encode_fixed64(stream, src);
 8005ec6:	4611      	mov	r1, r2
 8005ec8:	f7ff bfe7 	b.w	8005e9a <pb_encode_fixed64>

08005ecc <pb_encode_tag>:
{
 8005ecc:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
 8005ece:	0f5b      	lsrs	r3, r3, #29
 8005ed0:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
 8005ed4:	f7ff bf56 	b.w	8005d84 <pb_encode_varint>

08005ed8 <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
 8005ed8:	788b      	ldrb	r3, [r1, #2]
 8005eda:	f003 030f 	and.w	r3, r3, #15
 8005ede:	2b09      	cmp	r3, #9
 8005ee0:	d811      	bhi.n	8005f06 <pb_encode_tag_for_field+0x2e>
 8005ee2:	e8df f003 	tbb	[pc, r3]
 8005ee6:	0e0e      	.short	0x0e0e
 8005ee8:	0c0a050e 	.word	0x0c0a050e
 8005eec:	0c100c0c 	.word	0x0c100c0c
 8005ef0:	2305      	movs	r3, #5
    return pb_encode_tag(stream, wiretype, field->tag);
 8005ef2:	880a      	ldrh	r2, [r1, #0]
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	f7ff bfe9 	b.w	8005ecc <pb_encode_tag>
            wiretype = PB_WT_64BIT;
 8005efa:	2301      	movs	r3, #1
            break;
 8005efc:	e7f9      	b.n	8005ef2 <pb_encode_tag_for_field+0x1a>
            wiretype = PB_WT_STRING;
 8005efe:	2302      	movs	r3, #2
            break;
 8005f00:	e7f7      	b.n	8005ef2 <pb_encode_tag_for_field+0x1a>
            wiretype = PB_WT_VARINT;
 8005f02:	2300      	movs	r3, #0
 8005f04:	e7f5      	b.n	8005ef2 <pb_encode_tag_for_field+0x1a>
}
 8005f06:	2000      	movs	r0, #0
 8005f08:	4770      	bx	lr
	...

08005f0c <encode_field>:
{
 8005f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f10:	4615      	mov	r5, r2
    switch (PB_ATYPE(field->type))
 8005f12:	788a      	ldrb	r2, [r1, #2]
 8005f14:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
 8005f18:	2b40      	cmp	r3, #64	; 0x40
{
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	4606      	mov	r6, r0
 8005f1e:	460c      	mov	r4, r1
    switch (PB_ATYPE(field->type))
 8005f20:	f000 80d2 	beq.w	80060c8 <encode_field+0x1bc>
 8005f24:	0653      	lsls	r3, r2, #25
 8005f26:	d41b      	bmi.n	8005f60 <encode_field+0x54>
    func = PB_ENCODERS[PB_LTYPE(field->type)];
 8005f28:	4b6a      	ldr	r3, [pc, #424]	; (80060d4 <encode_field+0x1c8>)
 8005f2a:	f002 010f 	and.w	r1, r2, #15
 8005f2e:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    if (field->size_offset)
 8005f32:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8005f36:	b1bb      	cbz	r3, 8005f68 <encode_field+0x5c>
        pSize = (const char*)pData + field->size_offset;
 8005f38:	442b      	add	r3, r5
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005f3a:	78a2      	ldrb	r2, [r4, #2]
 8005f3c:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
 8005f40:	2880      	cmp	r0, #128	; 0x80
 8005f42:	d105      	bne.n	8005f50 <encode_field+0x44>
        pData = *(const void* const*)pData;
 8005f44:	682d      	ldr	r5, [r5, #0]
        implicit_has = (pData != NULL);
 8005f46:	1e29      	subs	r1, r5, #0
 8005f48:	bf18      	it	ne
 8005f4a:	2101      	movne	r1, #1
 8005f4c:	f88d 1007 	strb.w	r1, [sp, #7]
    switch (PB_HTYPE(field->type))
 8005f50:	f002 0130 	and.w	r1, r2, #48	; 0x30
 8005f54:	2920      	cmp	r1, #32
 8005f56:	d036      	beq.n	8005fc6 <encode_field+0xba>
 8005f58:	d819      	bhi.n	8005f8e <encode_field+0x82>
 8005f5a:	b1f9      	cbz	r1, 8005f9c <encode_field+0x90>
 8005f5c:	2910      	cmp	r1, #16
 8005f5e:	d02d      	beq.n	8005fbc <encode_field+0xb0>
    switch (PB_ATYPE(field->type))
 8005f60:	2000      	movs	r0, #0
}
 8005f62:	b006      	add	sp, #24
 8005f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 8005f68:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8005f6c:	2a10      	cmp	r2, #16
 8005f6e:	d10a      	bne.n	8005f86 <encode_field+0x7a>
        implicit_has = !pb_check_proto3_default_value(field, pData);
 8005f70:	4629      	mov	r1, r5
 8005f72:	4620      	mov	r0, r4
 8005f74:	f7ff fea8 	bl	8005cc8 <pb_check_proto3_default_value>
 8005f78:	f080 0001 	eor.w	r0, r0, #1
 8005f7c:	f88d 0007 	strb.w	r0, [sp, #7]
    const void *pSize = &implicit_has;
 8005f80:	f10d 0307 	add.w	r3, sp, #7
 8005f84:	e7d9      	b.n	8005f3a <encode_field+0x2e>
        implicit_has = true;
 8005f86:	2301      	movs	r3, #1
 8005f88:	f88d 3007 	strb.w	r3, [sp, #7]
 8005f8c:	e7f8      	b.n	8005f80 <encode_field+0x74>
    switch (PB_HTYPE(field->type))
 8005f8e:	2930      	cmp	r1, #48	; 0x30
 8005f90:	d1e6      	bne.n	8005f60 <encode_field+0x54>
            if (*(const pb_size_t*)pSize == field->tag)
 8005f92:	881a      	ldrh	r2, [r3, #0]
 8005f94:	8823      	ldrh	r3, [r4, #0]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d113      	bne.n	8005fc2 <encode_field+0xb6>
 8005f9a:	e001      	b.n	8005fa0 <encode_field+0x94>
            if (!pData)
 8005f9c:	2d00      	cmp	r5, #0
 8005f9e:	d0df      	beq.n	8005f60 <encode_field+0x54>
                if (!pb_encode_tag_for_field(stream, field))
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	f7ff ff98 	bl	8005ed8 <pb_encode_tag_for_field>
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	d0d9      	beq.n	8005f60 <encode_field+0x54>
                if (!func(stream, field, pData))
 8005fac:	462a      	mov	r2, r5
 8005fae:	4621      	mov	r1, r4
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	463b      	mov	r3, r7
}
 8005fb4:	b006      	add	sp, #24
 8005fb6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (!callback->funcs.encode(stream, field, arg))
 8005fba:	4718      	bx	r3
            if (*(const bool*)pSize)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1ee      	bne.n	8005fa0 <encode_field+0x94>
    return true;
 8005fc2:	2001      	movs	r0, #1
 8005fc4:	e7cd      	b.n	8005f62 <encode_field+0x56>
            if (field->size_offset != 0) {
 8005fc6:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8005fca:	b359      	cbz	r1, 8006024 <encode_field+0x118>
                count = *(const pb_size_t*)pSize;
 8005fcc:	f8b3 8000 	ldrh.w	r8, [r3]
    if (count == 0)
 8005fd0:	f1b8 0f00 	cmp.w	r8, #0
 8005fd4:	d0f5      	beq.n	8005fc2 <encode_field+0xb6>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 8005fd6:	2880      	cmp	r0, #128	; 0x80
 8005fd8:	d002      	beq.n	8005fe0 <encode_field+0xd4>
 8005fda:	8963      	ldrh	r3, [r4, #10]
 8005fdc:	4598      	cmp	r8, r3
 8005fde:	d8bf      	bhi.n	8005f60 <encode_field+0x54>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8005fe0:	f002 020f 	and.w	r2, r2, #15
 8005fe4:	2a04      	cmp	r2, #4
 8005fe6:	d84c      	bhi.n	8006082 <encode_field+0x176>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 8005fe8:	8822      	ldrh	r2, [r4, #0]
 8005fea:	2102      	movs	r1, #2
 8005fec:	4630      	mov	r0, r6
 8005fee:	f7ff ff6d 	bl	8005ecc <pb_encode_tag>
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	d0b4      	beq.n	8005f60 <encode_field+0x54>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 8005ff6:	78a3      	ldrb	r3, [r4, #2]
 8005ff8:	f003 030f 	and.w	r3, r3, #15
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d114      	bne.n	800602a <encode_field+0x11e>
            size = 4 * count;
 8006000:	ea4f 0988 	mov.w	r9, r8, lsl #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8006004:	464a      	mov	r2, r9
 8006006:	2300      	movs	r3, #0
 8006008:	4630      	mov	r0, r6
 800600a:	f7ff febb 	bl	8005d84 <pb_encode_varint>
 800600e:	2800      	cmp	r0, #0
 8006010:	d0a6      	beq.n	8005f60 <encode_field+0x54>
        if (stream->callback == NULL)
 8006012:	6831      	ldr	r1, [r6, #0]
 8006014:	bb29      	cbnz	r1, 8006062 <encode_field+0x156>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8006016:	464a      	mov	r2, r9
 8006018:	4630      	mov	r0, r6
}
 800601a:	b006      	add	sp, #24
 800601c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8006020:	f7ff be9b 	b.w	8005d5a <pb_write>
                count = field->array_size;
 8006024:	f8b4 800a 	ldrh.w	r8, [r4, #10]
 8006028:	e7d2      	b.n	8005fd0 <encode_field+0xc4>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 800602a:	2b04      	cmp	r3, #4
 800602c:	d102      	bne.n	8006034 <encode_field+0x128>
            size = 8 * count;
 800602e:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8006032:	e7e7      	b.n	8006004 <encode_field+0xf8>
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 8006034:	2210      	movs	r2, #16
 8006036:	2100      	movs	r1, #0
 8006038:	a802      	add	r0, sp, #8
 800603a:	f004 fbaa 	bl	800a792 <memset>
 800603e:	46aa      	mov	sl, r5
            for (i = 0; i < count; i++)
 8006040:	f04f 0900 	mov.w	r9, #0
                if (!func(&sizestream, field, p))
 8006044:	4652      	mov	r2, sl
 8006046:	4621      	mov	r1, r4
 8006048:	a802      	add	r0, sp, #8
 800604a:	47b8      	blx	r7
 800604c:	2800      	cmp	r0, #0
 800604e:	d088      	beq.n	8005f62 <encode_field+0x56>
                p = (const char*)p + field->data_size;
 8006050:	8923      	ldrh	r3, [r4, #8]
            for (i = 0; i < count; i++)
 8006052:	f109 0901 	add.w	r9, r9, #1
 8006056:	45c8      	cmp	r8, r9
                p = (const char*)p + field->data_size;
 8006058:	449a      	add	sl, r3
            for (i = 0; i < count; i++)
 800605a:	d8f3      	bhi.n	8006044 <encode_field+0x138>
            size = sizestream.bytes_written;
 800605c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006060:	e7d0      	b.n	8006004 <encode_field+0xf8>
        for (i = 0; i < count; i++)
 8006062:	f04f 0900 	mov.w	r9, #0
            if (!func(stream, field, p))
 8006066:	462a      	mov	r2, r5
 8006068:	4621      	mov	r1, r4
 800606a:	4630      	mov	r0, r6
 800606c:	47b8      	blx	r7
 800606e:	2800      	cmp	r0, #0
 8006070:	f43f af76 	beq.w	8005f60 <encode_field+0x54>
            p = (const char*)p + field->data_size;
 8006074:	8923      	ldrh	r3, [r4, #8]
        for (i = 0; i < count; i++)
 8006076:	f109 0901 	add.w	r9, r9, #1
 800607a:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 800607c:	441d      	add	r5, r3
        for (i = 0; i < count; i++)
 800607e:	d8f2      	bhi.n	8006066 <encode_field+0x15a>
 8006080:	e79f      	b.n	8005fc2 <encode_field+0xb6>
        for (i = 0; i < count; i++)
 8006082:	f04f 0900 	mov.w	r9, #0
            if (!pb_encode_tag_for_field(stream, field))
 8006086:	4621      	mov	r1, r4
 8006088:	4630      	mov	r0, r6
 800608a:	f7ff ff25 	bl	8005ed8 <pb_encode_tag_for_field>
 800608e:	2800      	cmp	r0, #0
 8006090:	f43f af66 	beq.w	8005f60 <encode_field+0x54>
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8006094:	78a3      	ldrb	r3, [r4, #2]
 8006096:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800609a:	2a80      	cmp	r2, #128	; 0x80
 800609c:	d112      	bne.n	80060c4 <encode_field+0x1b8>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800609e:	f003 030f 	and.w	r3, r3, #15
 80060a2:	3b05      	subs	r3, #5
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d80d      	bhi.n	80060c4 <encode_field+0x1b8>
                if (!func(stream, field, *(const void* const*)p))
 80060a8:	682a      	ldr	r2, [r5, #0]
                if (!func(stream, field, p))
 80060aa:	4621      	mov	r1, r4
 80060ac:	4630      	mov	r0, r6
 80060ae:	47b8      	blx	r7
 80060b0:	2800      	cmp	r0, #0
 80060b2:	f43f af55 	beq.w	8005f60 <encode_field+0x54>
            p = (const char*)p + field->data_size;
 80060b6:	8923      	ldrh	r3, [r4, #8]
        for (i = 0; i < count; i++)
 80060b8:	f109 0901 	add.w	r9, r9, #1
 80060bc:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 80060be:	441d      	add	r5, r3
        for (i = 0; i < count; i++)
 80060c0:	d8e1      	bhi.n	8006086 <encode_field+0x17a>
 80060c2:	e77e      	b.n	8005fc2 <encode_field+0xb6>
                if (!func(stream, field, p))
 80060c4:	462a      	mov	r2, r5
 80060c6:	e7f0      	b.n	80060aa <encode_field+0x19e>
    if (callback->funcs.encode != NULL)
 80060c8:	682b      	ldr	r3, [r5, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f43f af79 	beq.w	8005fc2 <encode_field+0xb6>
        if (!callback->funcs.encode(stream, field, arg))
 80060d0:	1d2a      	adds	r2, r5, #4
 80060d2:	e76f      	b.n	8005fb4 <encode_field+0xa8>
 80060d4:	080201a8 	.word	0x080201a8

080060d8 <pb_encode>:
{
 80060d8:	b530      	push	{r4, r5, lr}
 80060da:	b087      	sub	sp, #28
 80060dc:	4605      	mov	r5, r0
    if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 80060de:	4668      	mov	r0, sp
 80060e0:	f7ff f8c0 	bl	8005264 <pb_field_iter_begin>
 80060e4:	b910      	cbnz	r0, 80060ec <pb_encode+0x14>
        return true; /* Empty message type */
 80060e6:	2001      	movs	r0, #1
}
 80060e8:	b007      	add	sp, #28
 80060ea:	bd30      	pop	{r4, r5, pc}
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 80060ec:	9901      	ldr	r1, [sp, #4]
            if (!encode_extension_field(stream, iter.pos, iter.pData))
 80060ee:	9a04      	ldr	r2, [sp, #16]
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 80060f0:	788b      	ldrb	r3, [r1, #2]
 80060f2:	f003 030f 	and.w	r3, r3, #15
 80060f6:	2b08      	cmp	r3, #8
 80060f8:	d11c      	bne.n	8006134 <pb_encode+0x5c>
    const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 80060fa:	6814      	ldr	r4, [r2, #0]
    while (extension)
 80060fc:	b91c      	cbnz	r4, 8006106 <pb_encode+0x2e>
    } while (pb_field_iter_next(&iter));
 80060fe:	4668      	mov	r0, sp
 8006100:	f7ff f8c1 	bl	8005286 <pb_field_iter_next>
 8006104:	e7ee      	b.n	80060e4 <pb_encode+0xc>
        if (extension->type->encode)
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	b12a      	cbz	r2, 8006118 <pb_encode+0x40>
            status = extension->type->encode(stream, extension);
 800610c:	4621      	mov	r1, r4
 800610e:	4628      	mov	r0, r5
 8006110:	4790      	blx	r2
        if (!status)
 8006112:	b968      	cbnz	r0, 8006130 <pb_encode+0x58>
                return false;
 8006114:	2000      	movs	r0, #0
 8006116:	e7e7      	b.n	80060e8 <pb_encode+0x10>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8006118:	6899      	ldr	r1, [r3, #8]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800611a:	788b      	ldrb	r3, [r1, #2]
 800611c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006120:	2b80      	cmp	r3, #128	; 0x80
        return encode_field(stream, field, extension->dest);
 8006122:	bf14      	ite	ne
 8006124:	6862      	ldrne	r2, [r4, #4]
        return encode_field(stream, field, &extension->dest);
 8006126:	1d22      	addeq	r2, r4, #4
        return encode_field(stream, field, extension->dest);
 8006128:	4628      	mov	r0, r5
 800612a:	f7ff feef 	bl	8005f0c <encode_field>
 800612e:	e7f0      	b.n	8006112 <pb_encode+0x3a>
        extension = extension->next;
 8006130:	68a4      	ldr	r4, [r4, #8]
 8006132:	e7e3      	b.n	80060fc <pb_encode+0x24>
            if (!encode_field(stream, iter.pos, iter.pData))
 8006134:	4628      	mov	r0, r5
 8006136:	f7ff fee9 	bl	8005f0c <encode_field>
 800613a:	2800      	cmp	r0, #0
 800613c:	d1df      	bne.n	80060fe <pb_encode+0x26>
 800613e:	e7e9      	b.n	8006114 <pb_encode+0x3c>

08006140 <pb_encode_string>:
{
 8006140:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8006142:	2300      	movs	r3, #0
{
 8006144:	4604      	mov	r4, r0
 8006146:	9101      	str	r1, [sp, #4]
 8006148:	4615      	mov	r5, r2
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800614a:	f7ff fe1b 	bl	8005d84 <pb_encode_varint>
 800614e:	b138      	cbz	r0, 8006160 <pb_encode_string+0x20>
    return pb_write(stream, buffer, size);
 8006150:	9901      	ldr	r1, [sp, #4]
 8006152:	462a      	mov	r2, r5
 8006154:	4620      	mov	r0, r4
}
 8006156:	b003      	add	sp, #12
 8006158:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return pb_write(stream, buffer, size);
 800615c:	f7ff bdfd 	b.w	8005d5a <pb_write>
}
 8006160:	b003      	add	sp, #12
 8006162:	bd30      	pop	{r4, r5, pc}

08006164 <pb_enc_fixed_length_bytes>:
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8006164:	4613      	mov	r3, r2
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 8006166:	890a      	ldrh	r2, [r1, #8]
 8006168:	4619      	mov	r1, r3
 800616a:	f7ff bfe9 	b.w	8006140 <pb_encode_string>

0800616e <pb_enc_string>:
{
 800616e:	b410      	push	{r4}
    size_t max_size = field->data_size;
 8006170:	890b      	ldrh	r3, [r1, #8]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8006172:	7889      	ldrb	r1, [r1, #2]
 8006174:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    size_t max_size = field->data_size;
 8006178:	2980      	cmp	r1, #128	; 0x80
 800617a:	bf08      	it	eq
 800617c:	f04f 33ff 	moveq.w	r3, #4294967295
    if (src == NULL)
 8006180:	4611      	mov	r1, r2
 8006182:	b122      	cbz	r2, 800618e <pb_enc_string+0x20>
    size_t size = 0;
 8006184:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
 8006186:	429a      	cmp	r2, r3
 8006188:	d001      	beq.n	800618e <pb_enc_string+0x20>
 800618a:	5c8c      	ldrb	r4, [r1, r2]
 800618c:	b91c      	cbnz	r4, 8006196 <pb_enc_string+0x28>
}
 800618e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pb_encode_string(stream, (const pb_byte_t*)src, size);
 8006192:	f7ff bfd5 	b.w	8006140 <pb_encode_string>
            size++;
 8006196:	3201      	adds	r2, #1
            p++;
 8006198:	e7f5      	b.n	8006186 <pb_enc_string+0x18>

0800619a <pb_enc_bytes>:
{
 800619a:	b430      	push	{r4, r5}
 800619c:	460c      	mov	r4, r1
 800619e:	4605      	mov	r5, r0
    if (src == NULL)
 80061a0:	4611      	mov	r1, r2
 80061a2:	b912      	cbnz	r2, 80061aa <pb_enc_bytes+0x10>
}
 80061a4:	bc30      	pop	{r4, r5}
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 80061a6:	f7ff bfcb 	b.w	8006140 <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80061aa:	78a3      	ldrb	r3, [r4, #2]
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 80061ac:	8812      	ldrh	r2, [r2, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80061ae:	f013 00c0 	ands.w	r0, r3, #192	; 0xc0
 80061b2:	d103      	bne.n	80061bc <pb_enc_bytes+0x22>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 80061b4:	8924      	ldrh	r4, [r4, #8]
 80061b6:	1c93      	adds	r3, r2, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80061b8:	42a3      	cmp	r3, r4
 80061ba:	d802      	bhi.n	80061c2 <pb_enc_bytes+0x28>
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 80061bc:	3102      	adds	r1, #2
 80061be:	4628      	mov	r0, r5
 80061c0:	e7f0      	b.n	80061a4 <pb_enc_bytes+0xa>
}
 80061c2:	bc30      	pop	{r4, r5}
 80061c4:	4770      	bx	lr

080061c6 <pb_encode_submessage>:
{
 80061c6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80061ca:	460e      	mov	r6, r1
 80061cc:	4617      	mov	r7, r2
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 80061ce:	2100      	movs	r1, #0
 80061d0:	2210      	movs	r2, #16
{
 80061d2:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 80061d4:	4668      	mov	r0, sp
 80061d6:	f004 fadc 	bl	800a792 <memset>
    if (!pb_encode(&substream, fields, src_struct))
 80061da:	463a      	mov	r2, r7
 80061dc:	4631      	mov	r1, r6
 80061de:	4668      	mov	r0, sp
 80061e0:	f7ff ff7a 	bl	80060d8 <pb_encode>
 80061e4:	b348      	cbz	r0, 800623a <pb_encode_submessage+0x74>
    size = substream.bytes_written;
 80061e6:	9d03      	ldr	r5, [sp, #12]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80061e8:	f04f 0800 	mov.w	r8, #0
 80061ec:	462a      	mov	r2, r5
 80061ee:	4643      	mov	r3, r8
 80061f0:	4620      	mov	r0, r4
 80061f2:	f7ff fdc7 	bl	8005d84 <pb_encode_varint>
 80061f6:	b300      	cbz	r0, 800623a <pb_encode_submessage+0x74>
    if (stream->callback == NULL)
 80061f8:	6821      	ldr	r1, [r4, #0]
 80061fa:	b931      	cbnz	r1, 800620a <pb_encode_submessage+0x44>
        return pb_write(stream, NULL, size); /* Just sizing */
 80061fc:	462a      	mov	r2, r5
 80061fe:	4620      	mov	r0, r4
 8006200:	f7ff fdab 	bl	8005d5a <pb_write>
}
 8006204:	b004      	add	sp, #16
 8006206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->bytes_written + size > stream->max_size)
 800620a:	68e2      	ldr	r2, [r4, #12]
 800620c:	68a3      	ldr	r3, [r4, #8]
 800620e:	442a      	add	r2, r5
 8006210:	429a      	cmp	r2, r3
 8006212:	d812      	bhi.n	800623a <pb_encode_submessage+0x74>
    substream.state = stream->state;
 8006214:	6863      	ldr	r3, [r4, #4]
    substream.callback = stream->callback;
 8006216:	9100      	str	r1, [sp, #0]
    status = pb_encode(&substream, fields, src_struct);
 8006218:	463a      	mov	r2, r7
 800621a:	4631      	mov	r1, r6
 800621c:	4668      	mov	r0, sp
    substream.max_size = size;
 800621e:	e9cd 3501 	strd	r3, r5, [sp, #4]
    substream.bytes_written = 0;
 8006222:	f8cd 800c 	str.w	r8, [sp, #12]
    status = pb_encode(&substream, fields, src_struct);
 8006226:	f7ff ff57 	bl	80060d8 <pb_encode>
    stream->bytes_written += substream.bytes_written;
 800622a:	9a03      	ldr	r2, [sp, #12]
 800622c:	68e3      	ldr	r3, [r4, #12]
 800622e:	4413      	add	r3, r2
 8006230:	60e3      	str	r3, [r4, #12]
    if (substream.bytes_written != size)
 8006232:	42aa      	cmp	r2, r5
    stream->state = substream.state;
 8006234:	9b01      	ldr	r3, [sp, #4]
 8006236:	6063      	str	r3, [r4, #4]
    if (substream.bytes_written != size)
 8006238:	d0e4      	beq.n	8006204 <pb_encode_submessage+0x3e>
        PB_RETURN_ERROR(stream, "submsg size changed");
 800623a:	2000      	movs	r0, #0
 800623c:	e7e2      	b.n	8006204 <pb_encode_submessage+0x3e>

0800623e <pb_enc_submessage>:
    if (field->ptr == NULL)
 800623e:	68c9      	ldr	r1, [r1, #12]
 8006240:	b109      	cbz	r1, 8006246 <pb_enc_submessage+0x8>
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 8006242:	f7ff bfc0 	b.w	80061c6 <pb_encode_submessage>
}
 8006246:	4608      	mov	r0, r1
 8006248:	4770      	bx	lr
	...

0800624c <stai_runtime_get_info>:
 800624c:	b170      	cbz	r0, 800626c <stai_runtime_get_info+0x20>
 800624e:	b410      	push	{r4}
 8006250:	4c08      	ldr	r4, [pc, #32]	; (8006274 <stai_runtime_get_info+0x28>)
 8006252:	4684      	mov	ip, r0
 8006254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006256:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800625a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800625e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8006262:	2300      	movs	r3, #0
 8006264:	4618      	mov	r0, r3
 8006266:	f85d 4b04 	ldr.w	r4, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	4b02      	ldr	r3, [pc, #8]	; (8006278 <stai_runtime_get_info+0x2c>)
 800626e:	4618      	mov	r0, r3
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	080206e4 	.word	0x080206e4
 8006278:	00020001 	.word	0x00020001

0800627c <ai_version_get>:
 800627c:	0212      	lsls	r2, r2, #8
 800627e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006282:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8006286:	4770      	bx	lr

08006288 <ai_platform_version_get>:
 8006288:	0e02      	lsrs	r2, r0, #24
 800628a:	2300      	movs	r3, #0
 800628c:	f362 0307 	bfi	r3, r2, #0, #8
 8006290:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8006294:	f362 230f 	bfi	r3, r2, #8, #8
 8006298:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800629c:	f360 4317 	bfi	r3, r0, #16, #8
 80062a0:	b082      	sub	sp, #8
 80062a2:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 80062a6:	b002      	add	sp, #8
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop

080062ac <get_tensor_size>:
 80062ac:	b111      	cbz	r1, 80062b4 <get_tensor_size+0x8>
 80062ae:	6983      	ldr	r3, [r0, #24]
 80062b0:	6858      	ldr	r0, [r3, #4]
 80062b2:	4770      	bx	lr
 80062b4:	6883      	ldr	r3, [r0, #8]
 80062b6:	0a1b      	lsrs	r3, r3, #8
 80062b8:	d00a      	beq.n	80062d0 <get_tensor_size+0x24>
 80062ba:	68c1      	ldr	r1, [r0, #12]
 80062bc:	2001      	movs	r0, #1
 80062be:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80062c2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80062c6:	4299      	cmp	r1, r3
 80062c8:	fb02 f000 	mul.w	r0, r2, r0
 80062cc:	d1f9      	bne.n	80062c2 <get_tensor_size+0x16>
 80062ce:	4770      	bx	lr
 80062d0:	2001      	movs	r0, #1
 80062d2:	4770      	bx	lr

080062d4 <get_tensor_byte_size>:
 80062d4:	b410      	push	{r4}
 80062d6:	6983      	ldr	r3, [r0, #24]
 80062d8:	68c4      	ldr	r4, [r0, #12]
 80062da:	6941      	ldr	r1, [r0, #20]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68e0      	ldr	r0, [r4, #12]
 80062e0:	4a07      	ldr	r2, [pc, #28]	; (8006300 <get_tensor_byte_size+0x2c>)
 80062e2:	68c9      	ldr	r1, [r1, #12]
 80062e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062e8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80062ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80062f0:	fb01 f000 	mul.w	r0, r1, r0
 80062f4:	4293      	cmp	r3, r2
 80062f6:	bf04      	itt	eq
 80062f8:	3007      	addeq	r0, #7
 80062fa:	08c0      	lsreq	r0, r0, #3
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	000400c0 	.word	0x000400c0

08006304 <ai_buffer_get_size>:
 8006304:	b378      	cbz	r0, 8006366 <ai_buffer_get_size+0x62>
 8006306:	b410      	push	{r4}
 8006308:	6803      	ldr	r3, [r0, #0]
 800630a:	4a17      	ldr	r2, [pc, #92]	; (8006368 <ai_buffer_get_size+0x64>)
 800630c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006310:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006314:	4293      	cmp	r3, r2
 8006316:	d01e      	beq.n	8006356 <ai_buffer_get_size+0x52>
 8006318:	6984      	ldr	r4, [r0, #24]
 800631a:	6862      	ldr	r2, [r4, #4]
 800631c:	7d03      	ldrb	r3, [r0, #20]
 800631e:	6941      	ldr	r1, [r0, #20]
 8006320:	f1a3 0301 	sub.w	r3, r3, #1
 8006324:	fab3 f383 	clz	r3, r3
 8006328:	095b      	lsrs	r3, r3, #5
 800632a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800632e:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8006332:	da0b      	bge.n	800634c <ai_buffer_get_size+0x48>
 8006334:	2b01      	cmp	r3, #1
 8006336:	d102      	bne.n	800633e <ai_buffer_get_size+0x3a>
 8006338:	2802      	cmp	r0, #2
 800633a:	d007      	beq.n	800634c <ai_buffer_get_size+0x48>
 800633c:	2302      	movs	r3, #2
 800633e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8006342:	3301      	adds	r3, #1
 8006344:	4298      	cmp	r0, r3
 8006346:	fb01 f202 	mul.w	r2, r1, r2
 800634a:	d1f3      	bne.n	8006334 <ai_buffer_get_size+0x30>
 800634c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8006350:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	2900      	cmp	r1, #0
 8006358:	d0de      	beq.n	8006318 <ai_buffer_get_size+0x14>
 800635a:	6984      	ldr	r4, [r0, #24]
 800635c:	6862      	ldr	r2, [r4, #4]
 800635e:	321f      	adds	r2, #31
 8006360:	f022 021f 	bic.w	r2, r2, #31
 8006364:	e7da      	b.n	800631c <ai_buffer_get_size+0x18>
 8006366:	4770      	bx	lr
 8006368:	000400c0 	.word	0x000400c0

0800636c <ai_buffer_get_byte_size>:
 800636c:	b128      	cbz	r0, 800637a <ai_buffer_get_byte_size+0xe>
 800636e:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 8006372:	fb01 f000 	mul.w	r0, r1, r0
 8006376:	3007      	adds	r0, #7
 8006378:	08c0      	lsrs	r0, r0, #3
 800637a:	4770      	bx	lr

0800637c <ai_buffer_array_sane>:
 800637c:	b138      	cbz	r0, 800638e <ai_buffer_array_sane+0x12>
 800637e:	6843      	ldr	r3, [r0, #4]
 8006380:	b123      	cbz	r3, 800638c <ai_buffer_array_sane+0x10>
 8006382:	8840      	ldrh	r0, [r0, #2]
 8006384:	3800      	subs	r0, #0
 8006386:	bf18      	it	ne
 8006388:	2001      	movne	r0, #1
 800638a:	4770      	bx	lr
 800638c:	4618      	mov	r0, r3
 800638e:	4770      	bx	lr

08006390 <ai_buffer_array_item_set_address>:
 8006390:	b150      	cbz	r0, 80063a8 <ai_buffer_array_item_set_address+0x18>
 8006392:	6843      	ldr	r3, [r0, #4]
 8006394:	b14b      	cbz	r3, 80063aa <ai_buffer_array_item_set_address+0x1a>
 8006396:	8840      	ldrh	r0, [r0, #2]
 8006398:	b900      	cbnz	r0, 800639c <ai_buffer_array_item_set_address+0xc>
 800639a:	4770      	bx	lr
 800639c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80063a0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80063a4:	2001      	movs	r0, #1
 80063a6:	605a      	str	r2, [r3, #4]
 80063a8:	4770      	bx	lr
 80063aa:	4618      	mov	r0, r3
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop

080063b0 <_platform_observer_node_exec_cb>:
 80063b0:	2a00      	cmp	r2, #0
 80063b2:	d061      	beq.n	8006478 <_platform_observer_node_exec_cb+0xc8>
 80063b4:	b570      	push	{r4, r5, r6, lr}
 80063b6:	6815      	ldr	r5, [r2, #0]
 80063b8:	b084      	sub	sp, #16
 80063ba:	4614      	mov	r4, r2
 80063bc:	2d00      	cmp	r5, #0
 80063be:	d05d      	beq.n	800647c <_platform_observer_node_exec_cb+0xcc>
 80063c0:	8993      	ldrh	r3, [r2, #12]
 80063c2:	89d2      	ldrh	r2, [r2, #14]
 80063c4:	fab3 fc83 	clz	ip, r3
 80063c8:	3a01      	subs	r2, #1
 80063ca:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80063ce:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 80063d2:	429a      	cmp	r2, r3
 80063d4:	460e      	mov	r6, r1
 80063d6:	bf08      	it	eq
 80063d8:	f44c 7c00 	orreq.w	ip, ip, #512	; 0x200
 80063dc:	b300      	cbz	r0, 8006420 <_platform_observer_node_exec_cb+0x70>
 80063de:	2801      	cmp	r0, #1
 80063e0:	d04f      	beq.n	8006482 <_platform_observer_node_exec_cb+0xd2>
 80063e2:	2802      	cmp	r0, #2
 80063e4:	d031      	beq.n	800644a <_platform_observer_node_exec_cb+0x9a>
 80063e6:	2803      	cmp	r0, #3
 80063e8:	d117      	bne.n	800641a <_platform_observer_node_exec_cb+0x6a>
 80063ea:	68a2      	ldr	r2, [r4, #8]
 80063ec:	0752      	lsls	r2, r2, #29
 80063ee:	d512      	bpl.n	8006416 <_platform_observer_node_exec_cb+0x66>
 80063f0:	6922      	ldr	r2, [r4, #16]
 80063f2:	f8ad 3000 	strh.w	r3, [sp]
 80063f6:	8853      	ldrh	r3, [r2, #2]
 80063f8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80063fc:	8813      	ldrh	r3, [r2, #0]
 80063fe:	f8ad 3002 	strh.w	r3, [sp, #2]
 8006402:	6992      	ldr	r2, [r2, #24]
 8006404:	6860      	ldr	r0, [r4, #4]
 8006406:	2300      	movs	r3, #0
 8006408:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800640c:	f04c 0104 	orr.w	r1, ip, #4
 8006410:	466a      	mov	r2, sp
 8006412:	47a8      	blx	r5
 8006414:	89a3      	ldrh	r3, [r4, #12]
 8006416:	3301      	adds	r3, #1
 8006418:	81a3      	strh	r3, [r4, #12]
 800641a:	2000      	movs	r0, #0
 800641c:	b004      	add	sp, #16
 800641e:	bd70      	pop	{r4, r5, r6, pc}
 8006420:	68a2      	ldr	r2, [r4, #8]
 8006422:	07d2      	lsls	r2, r2, #31
 8006424:	d5f7      	bpl.n	8006416 <_platform_observer_node_exec_cb+0x66>
 8006426:	f8ad 3000 	strh.w	r3, [sp]
 800642a:	8873      	ldrh	r3, [r6, #2]
 800642c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8006430:	8833      	ldrh	r3, [r6, #0]
 8006432:	f8ad 3002 	strh.w	r3, [sp, #2]
 8006436:	69b3      	ldr	r3, [r6, #24]
 8006438:	9002      	str	r0, [sp, #8]
 800643a:	9303      	str	r3, [sp, #12]
 800643c:	6860      	ldr	r0, [r4, #4]
 800643e:	466a      	mov	r2, sp
 8006440:	f04c 0101 	orr.w	r1, ip, #1
 8006444:	47a8      	blx	r5
 8006446:	89a3      	ldrh	r3, [r4, #12]
 8006448:	e7e5      	b.n	8006416 <_platform_observer_node_exec_cb+0x66>
 800644a:	68a2      	ldr	r2, [r4, #8]
 800644c:	6121      	str	r1, [r4, #16]
 800644e:	0791      	lsls	r1, r2, #30
 8006450:	d5e3      	bpl.n	800641a <_platform_observer_node_exec_cb+0x6a>
 8006452:	f8ad 3000 	strh.w	r3, [sp]
 8006456:	8873      	ldrh	r3, [r6, #2]
 8006458:	f8ad 3004 	strh.w	r3, [sp, #4]
 800645c:	69b3      	ldr	r3, [r6, #24]
 800645e:	8832      	ldrh	r2, [r6, #0]
 8006460:	6860      	ldr	r0, [r4, #4]
 8006462:	f8ad 2002 	strh.w	r2, [sp, #2]
 8006466:	2400      	movs	r4, #0
 8006468:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800646c:	f04c 0102 	orr.w	r1, ip, #2
 8006470:	466a      	mov	r2, sp
 8006472:	47a8      	blx	r5
 8006474:	4620      	mov	r0, r4
 8006476:	e7d1      	b.n	800641c <_platform_observer_node_exec_cb+0x6c>
 8006478:	2001      	movs	r0, #1
 800647a:	4770      	bx	lr
 800647c:	2001      	movs	r0, #1
 800647e:	b004      	add	sp, #16
 8006480:	bd70      	pop	{r4, r5, r6, pc}
 8006482:	2000      	movs	r0, #0
 8006484:	6121      	str	r1, [r4, #16]
 8006486:	81a0      	strh	r0, [r4, #12]
 8006488:	b004      	add	sp, #16
 800648a:	bd70      	pop	{r4, r5, r6, pc}

0800648c <ai_platform_get_weights_map>:
 800648c:	2a00      	cmp	r2, #0
 800648e:	d037      	beq.n	8006500 <ai_platform_get_weights_map+0x74>
 8006490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006492:	4604      	mov	r4, r0
 8006494:	b1a0      	cbz	r0, 80064c0 <ai_platform_get_weights_map+0x34>
 8006496:	460f      	mov	r7, r1
 8006498:	b191      	cbz	r1, 80064c0 <ai_platform_get_weights_map+0x34>
 800649a:	4b25      	ldr	r3, [pc, #148]	; (8006530 <ai_platform_get_weights_map+0xa4>)
 800649c:	6810      	ldr	r0, [r2, #0]
 800649e:	4298      	cmp	r0, r3
 80064a0:	4615      	mov	r5, r2
 80064a2:	d00f      	beq.n	80064c4 <ai_platform_get_weights_map+0x38>
 80064a4:	6855      	ldr	r5, [r2, #4]
 80064a6:	b15d      	cbz	r5, 80064c0 <ai_platform_get_weights_map+0x34>
 80064a8:	682e      	ldr	r6, [r5, #0]
 80064aa:	429e      	cmp	r6, r3
 80064ac:	d02a      	beq.n	8006504 <ai_platform_get_weights_map+0x78>
 80064ae:	f1a1 0001 	sub.w	r0, r1, #1
 80064b2:	6025      	str	r5, [r4, #0]
 80064b4:	fab0 f080 	clz	r0, r0
 80064b8:	0940      	lsrs	r0, r0, #5
 80064ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064bc:	42a7      	cmp	r7, r4
 80064be:	d034      	beq.n	800652a <ai_platform_get_weights_map+0x9e>
 80064c0:	2000      	movs	r0, #0
 80064c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064c4:	1d10      	adds	r0, r2, #4
 80064c6:	f7ff ff59 	bl	800637c <ai_buffer_array_sane>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	d0f8      	beq.n	80064c0 <ai_platform_get_weights_map+0x34>
 80064ce:	88eb      	ldrh	r3, [r5, #6]
 80064d0:	429f      	cmp	r7, r3
 80064d2:	d1f5      	bne.n	80064c0 <ai_platform_get_weights_map+0x34>
 80064d4:	f04f 0c00 	mov.w	ip, #0
 80064d8:	1f20      	subs	r0, r4, #4
 80064da:	46e6      	mov	lr, ip
 80064dc:	68ab      	ldr	r3, [r5, #8]
 80064de:	4463      	add	r3, ip
 80064e0:	f10c 0c1c 	add.w	ip, ip, #28
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	b12b      	cbz	r3, 80064f4 <ai_platform_get_weights_map+0x68>
 80064e8:	f10e 0e01 	add.w	lr, lr, #1
 80064ec:	4577      	cmp	r7, lr
 80064ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80064f2:	d1f3      	bne.n	80064dc <ai_platform_get_weights_map+0x50>
 80064f4:	eba7 000e 	sub.w	r0, r7, lr
 80064f8:	fab0 f080 	clz	r0, r0
 80064fc:	0940      	lsrs	r0, r0, #5
 80064fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006500:	2000      	movs	r0, #0
 8006502:	4770      	bx	lr
 8006504:	1f20      	subs	r0, r4, #4
 8006506:	462a      	mov	r2, r5
 8006508:	2400      	movs	r4, #0
 800650a:	e000      	b.n	800650e <ai_platform_get_weights_map+0x82>
 800650c:	461c      	mov	r4, r3
 800650e:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8006512:	42b3      	cmp	r3, r6
 8006514:	d0d2      	beq.n	80064bc <ai_platform_get_weights_map+0x30>
 8006516:	f840 3f04 	str.w	r3, [r0, #4]!
 800651a:	1c63      	adds	r3, r4, #1
 800651c:	429f      	cmp	r7, r3
 800651e:	d1f5      	bne.n	800650c <ai_platform_get_weights_map+0x80>
 8006520:	3402      	adds	r4, #2
 8006522:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8006526:	42b3      	cmp	r3, r6
 8006528:	d1ca      	bne.n	80064c0 <ai_platform_get_weights_map+0x34>
 800652a:	2001      	movs	r0, #1
 800652c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800652e:	bf00      	nop
 8006530:	a1facade 	.word	0xa1facade

08006534 <ai_platform_get_activations_map>:
 8006534:	2a00      	cmp	r2, #0
 8006536:	d038      	beq.n	80065aa <ai_platform_get_activations_map+0x76>
 8006538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653a:	4604      	mov	r4, r0
 800653c:	b1a0      	cbz	r0, 8006568 <ai_platform_get_activations_map+0x34>
 800653e:	460f      	mov	r7, r1
 8006540:	b191      	cbz	r1, 8006568 <ai_platform_get_activations_map+0x34>
 8006542:	4b25      	ldr	r3, [pc, #148]	; (80065d8 <ai_platform_get_activations_map+0xa4>)
 8006544:	6810      	ldr	r0, [r2, #0]
 8006546:	4298      	cmp	r0, r3
 8006548:	4615      	mov	r5, r2
 800654a:	d00f      	beq.n	800656c <ai_platform_get_activations_map+0x38>
 800654c:	6a15      	ldr	r5, [r2, #32]
 800654e:	b15d      	cbz	r5, 8006568 <ai_platform_get_activations_map+0x34>
 8006550:	682e      	ldr	r6, [r5, #0]
 8006552:	429e      	cmp	r6, r3
 8006554:	d02b      	beq.n	80065ae <ai_platform_get_activations_map+0x7a>
 8006556:	f1a1 0001 	sub.w	r0, r1, #1
 800655a:	6025      	str	r5, [r4, #0]
 800655c:	fab0 f080 	clz	r0, r0
 8006560:	0940      	lsrs	r0, r0, #5
 8006562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006564:	42a7      	cmp	r7, r4
 8006566:	d035      	beq.n	80065d4 <ai_platform_get_activations_map+0xa0>
 8006568:	2000      	movs	r0, #0
 800656a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800656c:	f102 000c 	add.w	r0, r2, #12
 8006570:	f7ff ff04 	bl	800637c <ai_buffer_array_sane>
 8006574:	2800      	cmp	r0, #0
 8006576:	d0f7      	beq.n	8006568 <ai_platform_get_activations_map+0x34>
 8006578:	89eb      	ldrh	r3, [r5, #14]
 800657a:	429f      	cmp	r7, r3
 800657c:	d1f4      	bne.n	8006568 <ai_platform_get_activations_map+0x34>
 800657e:	f04f 0c00 	mov.w	ip, #0
 8006582:	1f20      	subs	r0, r4, #4
 8006584:	46e6      	mov	lr, ip
 8006586:	692b      	ldr	r3, [r5, #16]
 8006588:	4463      	add	r3, ip
 800658a:	f10c 0c1c 	add.w	ip, ip, #28
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	b12b      	cbz	r3, 800659e <ai_platform_get_activations_map+0x6a>
 8006592:	f10e 0e01 	add.w	lr, lr, #1
 8006596:	4577      	cmp	r7, lr
 8006598:	f840 3f04 	str.w	r3, [r0, #4]!
 800659c:	d1f3      	bne.n	8006586 <ai_platform_get_activations_map+0x52>
 800659e:	eba7 000e 	sub.w	r0, r7, lr
 80065a2:	fab0 f080 	clz	r0, r0
 80065a6:	0940      	lsrs	r0, r0, #5
 80065a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065aa:	2000      	movs	r0, #0
 80065ac:	4770      	bx	lr
 80065ae:	1f20      	subs	r0, r4, #4
 80065b0:	462a      	mov	r2, r5
 80065b2:	2400      	movs	r4, #0
 80065b4:	e000      	b.n	80065b8 <ai_platform_get_activations_map+0x84>
 80065b6:	461c      	mov	r4, r3
 80065b8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80065bc:	42b3      	cmp	r3, r6
 80065be:	d0d1      	beq.n	8006564 <ai_platform_get_activations_map+0x30>
 80065c0:	f840 3f04 	str.w	r3, [r0, #4]!
 80065c4:	1c63      	adds	r3, r4, #1
 80065c6:	429f      	cmp	r7, r3
 80065c8:	d1f5      	bne.n	80065b6 <ai_platform_get_activations_map+0x82>
 80065ca:	3402      	adds	r4, #2
 80065cc:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80065d0:	42b3      	cmp	r3, r6
 80065d2:	d1c9      	bne.n	8006568 <ai_platform_get_activations_map+0x34>
 80065d4:	2001      	movs	r0, #1
 80065d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065d8:	a1facade 	.word	0xa1facade

080065dc <ai_platform_bind_network_params>:
 80065dc:	b1a0      	cbz	r0, 8006608 <ai_platform_bind_network_params+0x2c>
 80065de:	b1b1      	cbz	r1, 800660e <ai_platform_bind_network_params+0x32>
 80065e0:	b1c2      	cbz	r2, 8006614 <ai_platform_bind_network_params+0x38>
 80065e2:	b410      	push	{r4}
 80065e4:	4603      	mov	r3, r0
 80065e6:	4c0d      	ldr	r4, [pc, #52]	; (800661c <ai_platform_bind_network_params+0x40>)
 80065e8:	f843 4b04 	str.w	r4, [r3], #4
 80065ec:	f100 0c0c 	add.w	ip, r0, #12
 80065f0:	c903      	ldmia	r1, {r0, r1}
 80065f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80065f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80065fa:	e88c 0003 	stmia.w	ip, {r0, r1}
 80065fe:	2301      	movs	r3, #1
 8006600:	4618      	mov	r0, r3
 8006602:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	4603      	mov	r3, r0
 800660a:	4618      	mov	r0, r3
 800660c:	4770      	bx	lr
 800660e:	460b      	mov	r3, r1
 8006610:	4618      	mov	r0, r3
 8006612:	4770      	bx	lr
 8006614:	4613      	mov	r3, r2
 8006616:	4618      	mov	r0, r3
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	a1facade 	.word	0xa1facade

08006620 <ai_platform_runtime_get_revision>:
 8006620:	4800      	ldr	r0, [pc, #0]	; (8006624 <ai_platform_runtime_get_revision+0x4>)
 8006622:	4770      	bx	lr
 8006624:	080206fc 	.word	0x080206fc

08006628 <ai_platform_runtime_get_version>:
 8006628:	4b09      	ldr	r3, [pc, #36]	; (8006650 <ai_platform_runtime_get_version+0x28>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2000      	movs	r0, #0
 800662e:	b2da      	uxtb	r2, r3
 8006630:	f362 0007 	bfi	r0, r2, #0, #8
 8006634:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006638:	f362 200f 	bfi	r0, r2, #8, #8
 800663c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006640:	f362 4017 	bfi	r0, r2, #16, #8
 8006644:	0e1b      	lsrs	r3, r3, #24
 8006646:	b082      	sub	sp, #8
 8006648:	f363 601f 	bfi	r0, r3, #24, #8
 800664c:	b002      	add	sp, #8
 800664e:	4770      	bx	lr
 8006650:	08020700 	.word	0x08020700

08006654 <ai_platform_api_get_version>:
 8006654:	4b09      	ldr	r3, [pc, #36]	; (800667c <ai_platform_api_get_version+0x28>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2000      	movs	r0, #0
 800665a:	b2da      	uxtb	r2, r3
 800665c:	f362 0007 	bfi	r0, r2, #0, #8
 8006660:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006664:	f362 200f 	bfi	r0, r2, #8, #8
 8006668:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800666c:	f362 4017 	bfi	r0, r2, #16, #8
 8006670:	0e1b      	lsrs	r3, r3, #24
 8006672:	b082      	sub	sp, #8
 8006674:	f363 601f 	bfi	r0, r3, #24, #8
 8006678:	b002      	add	sp, #8
 800667a:	4770      	bx	lr
 800667c:	08020704 	.word	0x08020704

08006680 <ai_platform_interface_api_get_version>:
 8006680:	4b09      	ldr	r3, [pc, #36]	; (80066a8 <ai_platform_interface_api_get_version+0x28>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2000      	movs	r0, #0
 8006686:	b2da      	uxtb	r2, r3
 8006688:	f362 0007 	bfi	r0, r2, #0, #8
 800668c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006690:	f362 200f 	bfi	r0, r2, #8, #8
 8006694:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006698:	f362 4017 	bfi	r0, r2, #16, #8
 800669c:	0e1b      	lsrs	r3, r3, #24
 800669e:	b082      	sub	sp, #8
 80066a0:	f363 601f 	bfi	r0, r3, #24, #8
 80066a4:	b002      	add	sp, #8
 80066a6:	4770      	bx	lr
 80066a8:	08020708 	.word	0x08020708

080066ac <ai_platform_context_acquire>:
 80066ac:	6802      	ldr	r2, [r0, #0]
 80066ae:	4b02      	ldr	r3, [pc, #8]	; (80066b8 <ai_platform_context_acquire+0xc>)
 80066b0:	4393      	bics	r3, r2
 80066b2:	bf18      	it	ne
 80066b4:	2000      	movne	r0, #0
 80066b6:	4770      	bx	lr
 80066b8:	a1c00100 	.word	0xa1c00100

080066bc <ai_platform_network_get_error>:
 80066bc:	4b04      	ldr	r3, [pc, #16]	; (80066d0 <ai_platform_network_get_error+0x14>)
 80066be:	6802      	ldr	r2, [r0, #0]
 80066c0:	4393      	bics	r3, r2
 80066c2:	d102      	bne.n	80066ca <ai_platform_network_get_error+0xe>
 80066c4:	300c      	adds	r0, #12
 80066c6:	f000 bda3 	b.w	8007210 <core_get_error>
 80066ca:	f241 0010 	movw	r0, #4112	; 0x1010
 80066ce:	4770      	bx	lr
 80066d0:	a1c00100 	.word	0xa1c00100

080066d4 <ai_platform_network_set_error>:
 80066d4:	b110      	cbz	r0, 80066dc <ai_platform_network_set_error+0x8>
 80066d6:	300c      	adds	r0, #12
 80066d8:	f000 bda0 	b.w	800721c <core_set_error>
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop

080066e0 <ai_platform_api_get_network_report>:
 80066e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e4:	4ba5      	ldr	r3, [pc, #660]	; (800697c <ai_platform_api_get_network_report+0x29c>)
 80066e6:	6802      	ldr	r2, [r0, #0]
 80066e8:	b089      	sub	sp, #36	; 0x24
 80066ea:	4393      	bics	r3, r2
 80066ec:	9002      	str	r0, [sp, #8]
 80066ee:	9103      	str	r1, [sp, #12]
 80066f0:	d164      	bne.n	80067bc <ai_platform_api_get_network_report+0xdc>
 80066f2:	2900      	cmp	r1, #0
 80066f4:	d075      	beq.n	80067e2 <ai_platform_api_get_network_report+0x102>
 80066f6:	2400      	movs	r4, #0
 80066f8:	67cc      	str	r4, [r1, #124]	; 0x7c
 80066fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80066fc:	b143      	cbz	r3, 8006710 <ai_platform_api_get_network_report+0x30>
 80066fe:	3401      	adds	r4, #1
 8006700:	67cc      	str	r4, [r1, #124]	; 0x7c
 8006702:	691a      	ldr	r2, [r3, #16]
 8006704:	429a      	cmp	r2, r3
 8006706:	d003      	beq.n	8006710 <ai_platform_api_get_network_report+0x30>
 8006708:	b112      	cbz	r2, 8006710 <ai_platform_api_get_network_report+0x30>
 800670a:	4613      	mov	r3, r2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1f6      	bne.n	80066fe <ai_platform_api_get_network_report+0x1e>
 8006710:	2c00      	cmp	r4, #0
 8006712:	f000 812b 	beq.w	800696c <ai_platform_api_get_network_report+0x28c>
 8006716:	9a02      	ldr	r2, [sp, #8]
 8006718:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 800671a:	2b00      	cmp	r3, #0
 800671c:	d053      	beq.n	80067c6 <ai_platform_api_get_network_report+0xe6>
 800671e:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8006722:	f1ba 0f00 	cmp.w	sl, #0
 8006726:	d04e      	beq.n	80067c6 <ai_platform_api_get_network_report+0xe6>
 8006728:	f04f 0b00 	mov.w	fp, #0
 800672c:	465d      	mov	r5, fp
 800672e:	e015      	b.n	800675c <ai_platform_api_get_network_report+0x7c>
 8006730:	00e9      	lsls	r1, r5, #3
 8006732:	2201      	movs	r2, #1
 8006734:	507a      	str	r2, [r7, r1]
 8006736:	69b1      	ldr	r1, [r6, #24]
 8006738:	6849      	ldr	r1, [r1, #4]
 800673a:	60a3      	str	r3, [r4, #8]
 800673c:	f04f 0201 	mov.w	r2, #1
 8006740:	7522      	strb	r2, [r4, #20]
 8006742:	6963      	ldr	r3, [r4, #20]
 8006744:	6121      	str	r1, [r4, #16]
 8006746:	f369 231f 	bfi	r3, r9, #8, #24
 800674a:	e9c4 0c00 	strd	r0, ip, [r4]
 800674e:	e9c4 3805 	strd	r3, r8, [r4, #20]
 8006752:	2200      	movs	r2, #0
 8006754:	60e2      	str	r2, [r4, #12]
 8006756:	3501      	adds	r5, #1
 8006758:	f10b 0b1c 	add.w	fp, fp, #28
 800675c:	f8ba 3000 	ldrh.w	r3, [sl]
 8006760:	42ab      	cmp	r3, r5
 8006762:	b2aa      	uxth	r2, r5
 8006764:	d942      	bls.n	80067ec <ai_platform_api_get_network_report+0x10c>
 8006766:	f8da 3004 	ldr.w	r3, [sl, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d03e      	beq.n	80067ec <ai_platform_api_get_network_report+0x10c>
 800676e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006772:	2e00      	cmp	r6, #0
 8006774:	d03a      	beq.n	80067ec <ai_platform_api_get_network_report+0x10c>
 8006776:	f8da 3008 	ldr.w	r3, [sl, #8]
 800677a:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800677e:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8006782:	69b3      	ldr	r3, [r6, #24]
 8006784:	6818      	ldr	r0, [r3, #0]
 8006786:	68b3      	ldr	r3, [r6, #8]
 8006788:	00ea      	lsls	r2, r5, #3
 800678a:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800678e:	9201      	str	r2, [sp, #4]
 8006790:	f003 f92e 	bl	80099f0 <ai_array_to_buffer_fmt>
 8006794:	69b1      	ldr	r1, [r6, #24]
 8006796:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800679a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800679e:	445c      	add	r4, fp
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d0c9      	beq.n	8006738 <ai_platform_api_get_network_report+0x58>
 80067a4:	2100      	movs	r1, #0
 80067a6:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80067aa:	6831      	ldr	r1, [r6, #0]
 80067ac:	6059      	str	r1, [r3, #4]
 80067ae:	b111      	cbz	r1, 80067b6 <ai_platform_api_get_network_report+0xd6>
 80067b0:	8849      	ldrh	r1, [r1, #2]
 80067b2:	2900      	cmp	r1, #0
 80067b4:	d1bc      	bne.n	8006730 <ai_platform_api_get_network_report+0x50>
 80067b6:	69b1      	ldr	r1, [r6, #24]
 80067b8:	2300      	movs	r3, #0
 80067ba:	e7bd      	b.n	8006738 <ai_platform_api_get_network_report+0x58>
 80067bc:	2400      	movs	r4, #0
 80067be:	4620      	mov	r0, r4
 80067c0:	b009      	add	sp, #36	; 0x24
 80067c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c6:	9b03      	ldr	r3, [sp, #12]
 80067c8:	9802      	ldr	r0, [sp, #8]
 80067ca:	2400      	movs	r4, #0
 80067cc:	63dc      	str	r4, [r3, #60]	; 0x3c
 80067ce:	871c      	strh	r4, [r3, #56]	; 0x38
 80067d0:	2218      	movs	r2, #24
 80067d2:	2112      	movs	r1, #18
 80067d4:	300c      	adds	r0, #12
 80067d6:	f000 fd21 	bl	800721c <core_set_error>
 80067da:	4620      	mov	r0, r4
 80067dc:	b009      	add	sp, #36	; 0x24
 80067de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e2:	460c      	mov	r4, r1
 80067e4:	4620      	mov	r0, r4
 80067e6:	b009      	add	sp, #36	; 0x24
 80067e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ec:	2a00      	cmp	r2, #0
 80067ee:	d0ea      	beq.n	80067c6 <ai_platform_api_get_network_report+0xe6>
 80067f0:	f8da 3008 	ldr.w	r3, [sl, #8]
 80067f4:	9903      	ldr	r1, [sp, #12]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	63cb      	str	r3, [r1, #60]	; 0x3c
 80067fa:	9b02      	ldr	r3, [sp, #8]
 80067fc:	870a      	strh	r2, [r1, #56]	; 0x38
 80067fe:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8006800:	2b01      	cmp	r3, #1
 8006802:	f240 80a5 	bls.w	8006950 <ai_platform_api_get_network_report+0x270>
 8006806:	9b02      	ldr	r3, [sp, #8]
 8006808:	f04f 0900 	mov.w	r9, #0
 800680c:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8006810:	464d      	mov	r5, r9
 8006812:	46cb      	mov	fp, r9
 8006814:	e016      	b.n	8006844 <ai_platform_api_get_network_report+0x164>
 8006816:	2201      	movs	r2, #1
 8006818:	f84a 200e 	str.w	r2, [sl, lr]
 800681c:	69b1      	ldr	r1, [r6, #24]
 800681e:	684a      	ldr	r2, [r1, #4]
 8006820:	60a3      	str	r3, [r4, #8]
 8006822:	9b01      	ldr	r3, [sp, #4]
 8006824:	61a3      	str	r3, [r4, #24]
 8006826:	f04f 0301 	mov.w	r3, #1
 800682a:	7523      	strb	r3, [r4, #20]
 800682c:	6963      	ldr	r3, [r4, #20]
 800682e:	6122      	str	r2, [r4, #16]
 8006830:	e9c4 0c00 	strd	r0, ip, [r4]
 8006834:	f367 231f 	bfi	r3, r7, #8, #24
 8006838:	f8c4 b00c 	str.w	fp, [r4, #12]
 800683c:	3501      	adds	r5, #1
 800683e:	f109 091c 	add.w	r9, r9, #28
 8006842:	6163      	str	r3, [r4, #20]
 8006844:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006848:	42ab      	cmp	r3, r5
 800684a:	b2aa      	uxth	r2, r5
 800684c:	d927      	bls.n	800689e <ai_platform_api_get_network_report+0x1be>
 800684e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006852:	b323      	cbz	r3, 800689e <ai_platform_api_get_network_report+0x1be>
 8006854:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006858:	b30e      	cbz	r6, 800689e <ai_platform_api_get_network_report+0x1be>
 800685a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800685e:	68b7      	ldr	r7, [r6, #8]
 8006860:	e9d3 4a01 	ldrd	r4, sl, [r3, #4]
 8006864:	69b3      	ldr	r3, [r6, #24]
 8006866:	6818      	ldr	r0, [r3, #0]
 8006868:	68f3      	ldr	r3, [r6, #12]
 800686a:	9301      	str	r3, [sp, #4]
 800686c:	f003 f8c0 	bl	80099f0 <ai_array_to_buffer_fmt>
 8006870:	69b1      	ldr	r1, [r6, #24]
 8006872:	eb0a 03c5 	add.w	r3, sl, r5, lsl #3
 8006876:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800687a:	444c      	add	r4, r9
 800687c:	f3c7 2717 	ubfx	r7, r7, #8, #24
 8006880:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d0ca      	beq.n	800681e <ai_platform_api_get_network_report+0x13e>
 8006888:	f84a b035 	str.w	fp, [sl, r5, lsl #3]
 800688c:	6831      	ldr	r1, [r6, #0]
 800688e:	6059      	str	r1, [r3, #4]
 8006890:	b111      	cbz	r1, 8006898 <ai_platform_api_get_network_report+0x1b8>
 8006892:	8849      	ldrh	r1, [r1, #2]
 8006894:	2900      	cmp	r1, #0
 8006896:	d1be      	bne.n	8006816 <ai_platform_api_get_network_report+0x136>
 8006898:	69b1      	ldr	r1, [r6, #24]
 800689a:	2300      	movs	r3, #0
 800689c:	e7bf      	b.n	800681e <ai_platform_api_get_network_report+0x13e>
 800689e:	2a00      	cmp	r2, #0
 80068a0:	d056      	beq.n	8006950 <ai_platform_api_get_network_report+0x270>
 80068a2:	9902      	ldr	r1, [sp, #8]
 80068a4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80068a8:	f101 0628 	add.w	r6, r1, #40	; 0x28
 80068ac:	9903      	ldr	r1, [sp, #12]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	640b      	str	r3, [r1, #64]	; 0x40
 80068b2:	874a      	strh	r2, [r1, #58]	; 0x3a
 80068b4:	4630      	mov	r0, r6
 80068b6:	f7ff fd61 	bl	800637c <ai_buffer_array_sane>
 80068ba:	4604      	mov	r4, r0
 80068bc:	b968      	cbnz	r0, 80068da <ai_platform_api_get_network_report+0x1fa>
 80068be:	4630      	mov	r0, r6
 80068c0:	f7ff fd5c 	bl	800637c <ai_buffer_array_sane>
 80068c4:	b148      	cbz	r0, 80068da <ai_platform_api_get_network_report+0x1fa>
 80068c6:	9b02      	ldr	r3, [sp, #8]
 80068c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ca:	b133      	cbz	r3, 80068da <ai_platform_api_get_network_report+0x1fa>
 80068cc:	9802      	ldr	r0, [sp, #8]
 80068ce:	2213      	movs	r2, #19
 80068d0:	2111      	movs	r1, #17
 80068d2:	300c      	adds	r0, #12
 80068d4:	f000 fca2 	bl	800721c <core_set_error>
 80068d8:	e771      	b.n	80067be <ai_platform_api_get_network_report+0xde>
 80068da:	9d02      	ldr	r5, [sp, #8]
 80068dc:	f105 0720 	add.w	r7, r5, #32
 80068e0:	4638      	mov	r0, r7
 80068e2:	f7ff fd4b 	bl	800637c <ai_buffer_array_sane>
 80068e6:	4604      	mov	r4, r0
 80068e8:	b960      	cbnz	r0, 8006904 <ai_platform_api_get_network_report+0x224>
 80068ea:	4638      	mov	r0, r7
 80068ec:	f7ff fd46 	bl	800637c <ai_buffer_array_sane>
 80068f0:	b140      	cbz	r0, 8006904 <ai_platform_api_get_network_report+0x224>
 80068f2:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 80068f4:	b133      	cbz	r3, 8006904 <ai_platform_api_get_network_report+0x224>
 80068f6:	9802      	ldr	r0, [sp, #8]
 80068f8:	2212      	movs	r2, #18
 80068fa:	2111      	movs	r1, #17
 80068fc:	300c      	adds	r0, #12
 80068fe:	f000 fc8d 	bl	800721c <core_set_error>
 8006902:	e75c      	b.n	80067be <ai_platform_api_get_network_report+0xde>
 8006904:	9a02      	ldr	r2, [sp, #8]
 8006906:	9c03      	ldr	r4, [sp, #12]
 8006908:	6853      	ldr	r3, [r2, #4]
 800690a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800690e:	4b1c      	ldr	r3, [pc, #112]	; (8006980 <ai_platform_api_get_network_report+0x2a0>)
 8006910:	6123      	str	r3, [r4, #16]
 8006912:	f240 1309 	movw	r3, #265	; 0x109
 8006916:	6163      	str	r3, [r4, #20]
 8006918:	f240 2c01 	movw	ip, #513	; 0x201
 800691c:	f240 5301 	movw	r3, #1281	; 0x501
 8006920:	e9c4 c309 	strd	ip, r3, [r4, #36]	; 0x24
 8006924:	6890      	ldr	r0, [r2, #8]
 8006926:	f7ff fcaf 	bl	8006288 <ai_platform_version_get>
 800692a:	4b16      	ldr	r3, [pc, #88]	; (8006984 <ai_platform_api_get_network_report+0x2a4>)
 800692c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800692e:	6220      	str	r0, [r4, #32]
 8006930:	429a      	cmp	r2, r3
 8006932:	d129      	bne.n	8006988 <ai_platform_api_get_network_report+0x2a8>
 8006934:	e896 0003 	ldmia.w	r6, {r0, r1}
 8006938:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800693c:	e882 0003 	stmia.w	r2, {r0, r1}
 8006940:	e897 0003 	ldmia.w	r7, {r0, r1}
 8006944:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8006948:	e883 0003 	stmia.w	r3, {r0, r1}
 800694c:	2401      	movs	r4, #1
 800694e:	e736      	b.n	80067be <ai_platform_api_get_network_report+0xde>
 8006950:	9b03      	ldr	r3, [sp, #12]
 8006952:	9802      	ldr	r0, [sp, #8]
 8006954:	2400      	movs	r4, #0
 8006956:	641c      	str	r4, [r3, #64]	; 0x40
 8006958:	875c      	strh	r4, [r3, #58]	; 0x3a
 800695a:	2218      	movs	r2, #24
 800695c:	2113      	movs	r1, #19
 800695e:	300c      	adds	r0, #12
 8006960:	f000 fc5c 	bl	800721c <core_set_error>
 8006964:	4620      	mov	r0, r4
 8006966:	b009      	add	sp, #36	; 0x24
 8006968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800696c:	9802      	ldr	r0, [sp, #8]
 800696e:	2218      	movs	r2, #24
 8006970:	2111      	movs	r1, #17
 8006972:	300c      	adds	r0, #12
 8006974:	f000 fc52 	bl	800721c <core_set_error>
 8006978:	e721      	b.n	80067be <ai_platform_api_get_network_report+0xde>
 800697a:	bf00      	nop
 800697c:	a1c00100 	.word	0xa1c00100
 8006980:	080206fc 	.word	0x080206fc
 8006984:	a1facade 	.word	0xa1facade
 8006988:	9903      	ldr	r1, [sp, #12]
 800698a:	4b2b      	ldr	r3, [pc, #172]	; (8006a38 <ai_platform_api_get_network_report+0x358>)
 800698c:	2200      	movs	r2, #0
 800698e:	e9c1 2212 	strd	r2, r2, [r1, #72]	; 0x48
 8006992:	e9c1 2214 	strd	r2, r2, [r1, #80]	; 0x50
 8006996:	4a29      	ldr	r2, [pc, #164]	; (8006a3c <ai_platform_api_get_network_report+0x35c>)
 8006998:	644a      	str	r2, [r1, #68]	; 0x44
 800699a:	f10d 0c10 	add.w	ip, sp, #16
 800699e:	f240 4201 	movw	r2, #1025	; 0x401
 80069a2:	f8c1 c05c 	str.w	ip, [r1, #92]	; 0x5c
 80069a6:	658a      	str	r2, [r1, #88]	; 0x58
 80069a8:	f101 0844 	add.w	r8, r1, #68	; 0x44
 80069ac:	f101 0960 	add.w	r9, r1, #96	; 0x60
 80069b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80069b2:	4645      	mov	r5, r8
 80069b4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80069b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069ba:	464c      	mov	r4, r9
 80069bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80069c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80069c6:	4630      	mov	r0, r6
 80069c8:	f7ff fcd8 	bl	800637c <ai_buffer_array_sane>
 80069cc:	b998      	cbnz	r0, 80069f6 <ai_platform_api_get_network_report+0x316>
 80069ce:	4638      	mov	r0, r7
 80069d0:	f7ff fcd4 	bl	800637c <ai_buffer_array_sane>
 80069d4:	b908      	cbnz	r0, 80069da <ai_platform_api_get_network_report+0x2fa>
 80069d6:	2401      	movs	r4, #1
 80069d8:	e6f1      	b.n	80067be <ai_platform_api_get_network_report+0xde>
 80069da:	4638      	mov	r0, r7
 80069dc:	f7ff fcce 	bl	800637c <ai_buffer_array_sane>
 80069e0:	b1b8      	cbz	r0, 8006a12 <ai_platform_api_get_network_report+0x332>
 80069e2:	9b02      	ldr	r3, [sp, #8]
 80069e4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80069e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069e8:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 80069ec:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80069f0:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 80069f4:	e7ef      	b.n	80069d6 <ai_platform_api_get_network_report+0x2f6>
 80069f6:	4630      	mov	r0, r6
 80069f8:	f7ff fcc0 	bl	800637c <ai_buffer_array_sane>
 80069fc:	b190      	cbz	r0, 8006a24 <ai_platform_api_get_network_report+0x344>
 80069fe:	9b02      	ldr	r3, [sp, #8]
 8006a00:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8006a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a04:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8006a08:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006a0c:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8006a10:	e7dd      	b.n	80069ce <ai_platform_api_get_network_report+0x2ee>
 8006a12:	4604      	mov	r4, r0
 8006a14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a16:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8006a1a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006a1e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8006a22:	deff      	udf	#255	; 0xff
 8006a24:	4604      	mov	r4, r0
 8006a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a28:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8006a2c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006a30:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8006a34:	deff      	udf	#255	; 0xff
 8006a36:	bf00      	nop
 8006a38:	0800d0fc 	.word	0x0800d0fc
 8006a3c:	00040440 	.word	0x00040440

08006a40 <ai_platform_network_create>:
 8006a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a44:	b083      	sub	sp, #12
 8006a46:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 8006a4a:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8006a4e:	b320      	cbz	r0, 8006a9a <ai_platform_network_create+0x5a>
 8006a50:	6002      	str	r2, [r0, #0]
 8006a52:	4616      	mov	r6, r2
 8006a54:	461f      	mov	r7, r3
 8006a56:	4604      	mov	r4, r0
 8006a58:	f000 fbd8 	bl	800720c <core_init>
 8006a5c:	b970      	cbnz	r0, 8006a7c <ai_platform_network_create+0x3c>
 8006a5e:	2530      	movs	r5, #48	; 0x30
 8006a60:	2300      	movs	r3, #0
 8006a62:	6023      	str	r3, [r4, #0]
 8006a64:	2410      	movs	r4, #16
 8006a66:	4642      	mov	r2, r8
 8006a68:	4649      	mov	r1, r9
 8006a6a:	4638      	mov	r0, r7
 8006a6c:	f7ff fc06 	bl	800627c <ai_version_get>
 8006a70:	60b0      	str	r0, [r6, #8]
 8006a72:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8006a76:	b003      	add	sp, #12
 8006a78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	4649      	mov	r1, r9
 8006a80:	4638      	mov	r0, r7
 8006a82:	f7ff fbfb 	bl	800627c <ai_version_get>
 8006a86:	2200      	movs	r2, #0
 8006a88:	4605      	mov	r5, r0
 8006a8a:	2105      	movs	r1, #5
 8006a8c:	2001      	movs	r0, #1
 8006a8e:	f7ff fbf5 	bl	800627c <ai_version_get>
 8006a92:	4285      	cmp	r5, r0
 8006a94:	d008      	beq.n	8006aa8 <ai_platform_network_create+0x68>
 8006a96:	2501      	movs	r5, #1
 8006a98:	e7e2      	b.n	8006a60 <ai_platform_network_create+0x20>
 8006a9a:	2510      	movs	r5, #16
 8006a9c:	462c      	mov	r4, r5
 8006a9e:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8006aa2:	b003      	add	sp, #12
 8006aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006aa8:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <ai_platform_network_create+0x80>)
 8006aaa:	9301      	str	r3, [sp, #4]
 8006aac:	a801      	add	r0, sp, #4
 8006aae:	f000 fbc1 	bl	8007234 <ai_check_custom_types>
 8006ab2:	b110      	cbz	r0, 8006aba <ai_platform_network_create+0x7a>
 8006ab4:	2400      	movs	r4, #0
 8006ab6:	4625      	mov	r5, r4
 8006ab8:	e7d5      	b.n	8006a66 <ai_platform_network_create+0x26>
 8006aba:	2502      	movs	r5, #2
 8006abc:	e7d0      	b.n	8006a60 <ai_platform_network_create+0x20>
 8006abe:	bf00      	nop
 8006ac0:	84048403 	.word	0x84048403

08006ac4 <ai_platform_network_destroy>:
 8006ac4:	b508      	push	{r3, lr}
 8006ac6:	4a07      	ldr	r2, [pc, #28]	; (8006ae4 <ai_platform_network_destroy+0x20>)
 8006ac8:	6801      	ldr	r1, [r0, #0]
 8006aca:	ea01 0c02 	and.w	ip, r1, r2
 8006ace:	438a      	bics	r2, r1
 8006ad0:	d102      	bne.n	8006ad8 <ai_platform_network_destroy+0x14>
 8006ad2:	4561      	cmp	r1, ip
 8006ad4:	d001      	beq.n	8006ada <ai_platform_network_destroy+0x16>
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	bd08      	pop	{r3, pc}
 8006ada:	f000 fc41 	bl	8007360 <ai_layers_destroy_all>
 8006ade:	2000      	movs	r0, #0
 8006ae0:	bd08      	pop	{r3, pc}
 8006ae2:	bf00      	nop
 8006ae4:	a1c00100 	.word	0xa1c00100

08006ae8 <ai_platform_network_init>:
 8006ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aec:	4b63      	ldr	r3, [pc, #396]	; (8006c7c <ai_platform_network_init+0x194>)
 8006aee:	6802      	ldr	r2, [r0, #0]
 8006af0:	4393      	bics	r3, r2
 8006af2:	b083      	sub	sp, #12
 8006af4:	d156      	bne.n	8006ba4 <ai_platform_network_init+0xbc>
 8006af6:	4604      	mov	r4, r0
 8006af8:	460f      	mov	r7, r1
 8006afa:	2900      	cmp	r1, #0
 8006afc:	f000 80a9 	beq.w	8006c52 <ai_platform_network_init+0x16a>
 8006b00:	680b      	ldr	r3, [r1, #0]
 8006b02:	495f      	ldr	r1, [pc, #380]	; (8006c80 <ai_platform_network_init+0x198>)
 8006b04:	428b      	cmp	r3, r1
 8006b06:	d113      	bne.n	8006b30 <ai_platform_network_init+0x48>
 8006b08:	495c      	ldr	r1, [pc, #368]	; (8006c7c <ai_platform_network_init+0x194>)
 8006b0a:	89bd      	ldrh	r5, [r7, #12]
 8006b0c:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 8006b10:	f8d7 8010 	ldr.w	r8, [r7, #16]
 8006b14:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 8006b18:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 8006b1c:	68be      	ldr	r6, [r7, #8]
 8006b1e:	428a      	cmp	r2, r1
 8006b20:	d02c      	beq.n	8006b7c <ai_platform_network_init+0x94>
 8006b22:	2303      	movs	r3, #3
 8006b24:	6123      	str	r3, [r4, #16]
 8006b26:	4627      	mov	r7, r4
 8006b28:	4638      	mov	r0, r7
 8006b2a:	b003      	add	sp, #12
 8006b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b30:	2101      	movs	r1, #1
 8006b32:	4638      	mov	r0, r7
 8006b34:	9301      	str	r3, [sp, #4]
 8006b36:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8006b3a:	f7ff fbe3 	bl	8006304 <ai_buffer_get_size>
 8006b3e:	f107 081c 	add.w	r8, r7, #28
 8006b42:	4605      	mov	r5, r0
 8006b44:	2101      	movs	r1, #1
 8006b46:	4640      	mov	r0, r8
 8006b48:	463e      	mov	r6, r7
 8006b4a:	6a3f      	ldr	r7, [r7, #32]
 8006b4c:	f7ff fbda 	bl	8006304 <ai_buffer_get_size>
 8006b50:	2d00      	cmp	r5, #0
 8006b52:	9b01      	ldr	r3, [sp, #4]
 8006b54:	bf0a      	itet	eq
 8006b56:	46a9      	moveq	r9, r5
 8006b58:	f04f 0901 	movne.w	r9, #1
 8006b5c:	462e      	moveq	r6, r5
 8006b5e:	b330      	cbz	r0, 8006bae <ai_platform_network_init+0xc6>
 8006b60:	2f00      	cmp	r7, #0
 8006b62:	f000 8084 	beq.w	8006c6e <ai_platform_network_init+0x186>
 8006b66:	f04f 0a01 	mov.w	sl, #1
 8006b6a:	f1bb 0f00 	cmp.w	fp, #0
 8006b6e:	d021      	beq.n	8006bb4 <ai_platform_network_init+0xcc>
 8006b70:	2500      	movs	r5, #0
 8006b72:	6822      	ldr	r2, [r4, #0]
 8006b74:	4941      	ldr	r1, [pc, #260]	; (8006c7c <ai_platform_network_init+0x194>)
 8006b76:	428a      	cmp	r2, r1
 8006b78:	46ab      	mov	fp, r5
 8006b7a:	d1d2      	bne.n	8006b22 <ai_platform_network_init+0x3a>
 8006b7c:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8006b7e:	454a      	cmp	r2, r9
 8006b80:	4a3f      	ldr	r2, [pc, #252]	; (8006c80 <ai_platform_network_init+0x198>)
 8006b82:	d221      	bcs.n	8006bc8 <ai_platform_network_init+0xe0>
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d15c      	bne.n	8006c42 <ai_platform_network_init+0x15a>
 8006b88:	6266      	str	r6, [r4, #36]	; 0x24
 8006b8a:	f8a4 9022 	strh.w	r9, [r4, #34]	; 0x22
 8006b8e:	f8a4 b020 	strh.w	fp, [r4, #32]
 8006b92:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 8006b96:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
 8006b9a:	8525      	strh	r5, [r4, #40]	; 0x28
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f000 fb73 	bl	8007288 <ai_layers_init_all>
 8006ba2:	e7be      	b.n	8006b22 <ai_platform_network_init+0x3a>
 8006ba4:	2700      	movs	r7, #0
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	b003      	add	sp, #12
 8006baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bae:	4680      	mov	r8, r0
 8006bb0:	4682      	mov	sl, r0
 8006bb2:	e7da      	b.n	8006b6a <ai_platform_network_init+0x82>
 8006bb4:	2d00      	cmp	r5, #0
 8006bb6:	d0dc      	beq.n	8006b72 <ai_platform_network_init+0x8a>
 8006bb8:	2212      	movs	r2, #18
 8006bba:	2110      	movs	r1, #16
 8006bbc:	f104 000c 	add.w	r0, r4, #12
 8006bc0:	f000 fb2c 	bl	800721c <core_set_error>
 8006bc4:	465f      	mov	r7, fp
 8006bc6:	e7af      	b.n	8006b28 <ai_platform_network_init+0x40>
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d0dd      	beq.n	8006b88 <ai_platform_network_init+0xa0>
 8006bcc:	f1b9 0f00 	cmp.w	r9, #0
 8006bd0:	d018      	beq.n	8006c04 <ai_platform_network_init+0x11c>
 8006bd2:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	f8cd 9004 	str.w	r9, [sp, #4]
 8006bdc:	2700      	movs	r7, #0
 8006bde:	4699      	mov	r9, r3
 8006be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006be2:	eb06 0e07 	add.w	lr, r6, r7
 8006be6:	eb03 0c07 	add.w	ip, r3, r7
 8006bea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006bee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006bf2:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8006bf6:	371c      	adds	r7, #28
 8006bf8:	45b9      	cmp	r9, r7
 8006bfa:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8006bfe:	d1ef      	bne.n	8006be0 <ai_platform_network_init+0xf8>
 8006c00:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006c04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006c06:	f8a4 9022 	strh.w	r9, [r4, #34]	; 0x22
 8006c0a:	4553      	cmp	r3, sl
 8006c0c:	f8a4 b020 	strh.w	fp, [r4, #32]
 8006c10:	d325      	bcc.n	8006c5e <ai_platform_network_init+0x176>
 8006c12:	f1ba 0f00 	cmp.w	sl, #0
 8006c16:	d0be      	beq.n	8006b96 <ai_platform_network_init+0xae>
 8006c18:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 8006c1c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8006c20:	f04f 0c00 	mov.w	ip, #0
 8006c24:	eb08 070c 	add.w	r7, r8, ip
 8006c28:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006c2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c2c:	4466      	add	r6, ip
 8006c2e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006c30:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8006c34:	f10c 0c1c 	add.w	ip, ip, #28
 8006c38:	45f4      	cmp	ip, lr
 8006c3a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8006c3e:	d1f1      	bne.n	8006c24 <ai_platform_network_init+0x13c>
 8006c40:	e7a9      	b.n	8006b96 <ai_platform_network_init+0xae>
 8006c42:	2212      	movs	r2, #18
 8006c44:	2116      	movs	r1, #22
 8006c46:	f104 000c 	add.w	r0, r4, #12
 8006c4a:	f000 fae7 	bl	800721c <core_set_error>
 8006c4e:	2700      	movs	r7, #0
 8006c50:	e76a      	b.n	8006b28 <ai_platform_network_init+0x40>
 8006c52:	2211      	movs	r2, #17
 8006c54:	2110      	movs	r1, #16
 8006c56:	300c      	adds	r0, #12
 8006c58:	f000 fae0 	bl	800721c <core_set_error>
 8006c5c:	e764      	b.n	8006b28 <ai_platform_network_init+0x40>
 8006c5e:	2213      	movs	r2, #19
 8006c60:	2116      	movs	r1, #22
 8006c62:	f104 000c 	add.w	r0, r4, #12
 8006c66:	f000 fad9 	bl	800721c <core_set_error>
 8006c6a:	2700      	movs	r7, #0
 8006c6c:	e75c      	b.n	8006b28 <ai_platform_network_init+0x40>
 8006c6e:	2213      	movs	r2, #19
 8006c70:	2110      	movs	r1, #16
 8006c72:	f104 000c 	add.w	r0, r4, #12
 8006c76:	f000 fad1 	bl	800721c <core_set_error>
 8006c7a:	e755      	b.n	8006b28 <ai_platform_network_init+0x40>
 8006c7c:	a1c00100 	.word	0xa1c00100
 8006c80:	a1facade 	.word	0xa1facade

08006c84 <ai_platform_network_post_init>:
 8006c84:	b538      	push	{r3, r4, r5, lr}
 8006c86:	4b16      	ldr	r3, [pc, #88]	; (8006ce0 <ai_platform_network_post_init+0x5c>)
 8006c88:	6802      	ldr	r2, [r0, #0]
 8006c8a:	ea02 0103 	and.w	r1, r2, r3
 8006c8e:	4393      	bics	r3, r2
 8006c90:	d108      	bne.n	8006ca4 <ai_platform_network_post_init+0x20>
 8006c92:	6903      	ldr	r3, [r0, #16]
 8006c94:	f013 0502 	ands.w	r5, r3, #2
 8006c98:	4604      	mov	r4, r0
 8006c9a:	d005      	beq.n	8006ca8 <ai_platform_network_post_init+0x24>
 8006c9c:	428a      	cmp	r2, r1
 8006c9e:	d00a      	beq.n	8006cb6 <ai_platform_network_post_init+0x32>
 8006ca0:	2001      	movs	r0, #1
 8006ca2:	bd38      	pop	{r3, r4, r5, pc}
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}
 8006ca8:	2210      	movs	r2, #16
 8006caa:	2111      	movs	r1, #17
 8006cac:	300c      	adds	r0, #12
 8006cae:	f000 fab5 	bl	800721c <core_set_error>
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	bd38      	pop	{r3, r4, r5, pc}
 8006cb6:	f000 faf5 	bl	80072a4 <ai_layers_post_init_all>
 8006cba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d0ef      	beq.n	8006ca0 <ai_platform_network_post_init+0x1c>
 8006cc0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8006cc2:	e008      	b.n	8006cd6 <ai_platform_network_post_init+0x52>
 8006cc4:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	; 0x40
 8006cc8:	4798      	blx	r3
 8006cca:	692b      	ldr	r3, [r5, #16]
 8006ccc:	42ab      	cmp	r3, r5
 8006cce:	d0e7      	beq.n	8006ca0 <ai_platform_network_post_init+0x1c>
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0e5      	beq.n	8006ca0 <ai_platform_network_post_init+0x1c>
 8006cd4:	461d      	mov	r5, r3
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	2000      	movs	r0, #0
 8006cda:	2d00      	cmp	r5, #0
 8006cdc:	d1f2      	bne.n	8006cc4 <ai_platform_network_post_init+0x40>
 8006cde:	e7df      	b.n	8006ca0 <ai_platform_network_post_init+0x1c>
 8006ce0:	a1c00100 	.word	0xa1c00100

08006ce4 <ai_platform_network_process>:
 8006ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce8:	4bb5      	ldr	r3, [pc, #724]	; (8006fc0 <ai_platform_network_process+0x2dc>)
 8006cea:	4605      	mov	r5, r0
 8006cec:	6800      	ldr	r0, [r0, #0]
 8006cee:	b085      	sub	sp, #20
 8006cf0:	4383      	bics	r3, r0
 8006cf2:	9202      	str	r2, [sp, #8]
 8006cf4:	f040 8140 	bne.w	8006f78 <ai_platform_network_process+0x294>
 8006cf8:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f000 8125 	beq.w	8006f4a <ai_platform_network_process+0x266>
 8006d00:	692b      	ldr	r3, [r5, #16]
 8006d02:	f8d5 a034 	ldr.w	sl, [r5, #52]	; 0x34
 8006d06:	f003 0303 	and.w	r3, r3, #3
 8006d0a:	2700      	movs	r7, #0
 8006d0c:	2b03      	cmp	r3, #3
 8006d0e:	61af      	str	r7, [r5, #24]
 8006d10:	f040 8137 	bne.w	8006f82 <ai_platform_network_process+0x29e>
 8006d14:	2900      	cmp	r1, #0
 8006d16:	f000 811e 	beq.w	8006f56 <ai_platform_network_process+0x272>
 8006d1a:	f1ba 0f00 	cmp.w	sl, #0
 8006d1e:	f000 811a 	beq.w	8006f56 <ai_platform_network_process+0x272>
 8006d22:	f8ba 3000 	ldrh.w	r3, [sl]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f000 8115 	beq.w	8006f56 <ai_platform_network_process+0x272>
 8006d2c:	698b      	ldr	r3, [r1, #24]
 8006d2e:	9503      	str	r5, [sp, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	9301      	str	r3, [sp, #4]
 8006d34:	460e      	mov	r6, r1
 8006d36:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d072      	beq.n	8006e24 <ai_platform_network_process+0x140>
 8006d3e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8006d42:	2c00      	cmp	r4, #0
 8006d44:	d06e      	beq.n	8006e24 <ai_platform_network_process+0x140>
 8006d46:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006d4a:	f8d3 9000 	ldr.w	r9, [r3]
 8006d4e:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8006d52:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8006d56:	f000 81d3 	beq.w	8007100 <ai_platform_network_process+0x41c>
 8006d5a:	69a3      	ldr	r3, [r4, #24]
 8006d5c:	2101      	movs	r1, #1
 8006d5e:	4630      	mov	r0, r6
 8006d60:	685d      	ldr	r5, [r3, #4]
 8006d62:	f7ff facf 	bl	8006304 <ai_buffer_get_size>
 8006d66:	4285      	cmp	r5, r0
 8006d68:	f0c0 8116 	bcc.w	8006f98 <ai_platform_network_process+0x2b4>
 8006d6c:	68e0      	ldr	r0, [r4, #12]
 8006d6e:	69b1      	ldr	r1, [r6, #24]
 8006d70:	68c2      	ldr	r2, [r0, #12]
 8006d72:	68cb      	ldr	r3, [r1, #12]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	f040 810f 	bne.w	8006f98 <ai_platform_network_process+0x2b4>
 8006d7a:	6882      	ldr	r2, [r0, #8]
 8006d7c:	688b      	ldr	r3, [r1, #8]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	f040 810a 	bne.w	8006f98 <ai_platform_network_process+0x2b4>
 8006d84:	6842      	ldr	r2, [r0, #4]
 8006d86:	684b      	ldr	r3, [r1, #4]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	f040 8105 	bne.w	8006f98 <ai_platform_network_process+0x2b4>
 8006d8e:	69a3      	ldr	r3, [r4, #24]
 8006d90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d94:	f002 fec4 	bl	8009b20 <ai_array_get_data_byte_size>
 8006d98:	4605      	mov	r5, r0
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f7ff fa9a 	bl	80062d4 <get_tensor_byte_size>
 8006da0:	4285      	cmp	r5, r0
 8006da2:	f0c0 80f9 	bcc.w	8006f98 <ai_platform_network_process+0x2b4>
 8006da6:	69a3      	ldr	r3, [r4, #24]
 8006da8:	6818      	ldr	r0, [r3, #0]
 8006daa:	f002 fe21 	bl	80099f0 <ai_array_to_buffer_fmt>
 8006dae:	6833      	ldr	r3, [r6, #0]
 8006db0:	4058      	eors	r0, r3
 8006db2:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8006db6:	f040 81a5 	bne.w	8007104 <ai_platform_network_process+0x420>
 8006dba:	6873      	ldr	r3, [r6, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 819f 	beq.w	8007100 <ai_platform_network_process+0x41c>
 8006dc2:	69b3      	ldr	r3, [r6, #24]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 81a5 	beq.w	8007116 <ai_platform_network_process+0x432>
 8006dcc:	9a01      	ldr	r2, [sp, #4]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	bf38      	it	cc
 8006dd2:	461a      	movcc	r2, r3
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	9201      	str	r2, [sp, #4]
 8006dd8:	f7ff fa7c 	bl	80062d4 <get_tensor_byte_size>
 8006ddc:	f8c8 0008 	str.w	r0, [r8, #8]
 8006de0:	69b3      	ldr	r3, [r6, #24]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	fb00 f303 	mul.w	r3, r0, r3
 8006de8:	f8c8 300c 	str.w	r3, [r8, #12]
 8006dec:	6871      	ldr	r1, [r6, #4]
 8006dee:	f8c8 1004 	str.w	r1, [r8, #4]
 8006df2:	440b      	add	r3, r1
 8006df4:	f849 300b 	str.w	r3, [r9, fp]
 8006df8:	69a0      	ldr	r0, [r4, #24]
 8006dfa:	6803      	ldr	r3, [r0, #0]
 8006dfc:	009a      	lsls	r2, r3, #2
 8006dfe:	f107 0701 	add.w	r7, r7, #1
 8006e02:	f106 061c 	add.w	r6, r6, #28
 8006e06:	f100 80b1 	bmi.w	8006f6c <ai_platform_network_process+0x288>
 8006e0a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006e0e:	1a9b      	subs	r3, r3, r2
 8006e10:	4419      	add	r1, r3
 8006e12:	6081      	str	r1, [r0, #8]
 8006e14:	69a3      	ldr	r3, [r4, #24]
 8006e16:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006e1a:	60da      	str	r2, [r3, #12]
 8006e1c:	f8ba 3000 	ldrh.w	r3, [sl]
 8006e20:	42bb      	cmp	r3, r7
 8006e22:	d888      	bhi.n	8006d36 <ai_platform_network_process+0x52>
 8006e24:	9d03      	ldr	r5, [sp, #12]
 8006e26:	9b02      	ldr	r3, [sp, #8]
 8006e28:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f000 817c 	beq.w	8007128 <ai_platform_network_process+0x444>
 8006e30:	2a01      	cmp	r2, #1
 8006e32:	f240 80bd 	bls.w	8006fb0 <ai_platform_network_process+0x2cc>
 8006e36:	f8d5 8034 	ldr.w	r8, [r5, #52]	; 0x34
 8006e3a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 80b6 	beq.w	8006fb0 <ai_platform_network_process+0x2cc>
 8006e44:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006e48:	2700      	movs	r7, #0
 8006e4a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f000 80bd 	beq.w	8006fce <ai_platform_network_process+0x2ea>
 8006e54:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8006e58:	2e00      	cmp	r6, #0
 8006e5a:	f000 80b8 	beq.w	8006fce <ai_platform_network_process+0x2ea>
 8006e5e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006e62:	681c      	ldr	r4, [r3, #0]
 8006e64:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 8006e68:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8006e6c:	f000 8160 	beq.w	8007130 <ai_platform_network_process+0x44c>
 8006e70:	69b3      	ldr	r3, [r6, #24]
 8006e72:	2101      	movs	r1, #1
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	9302      	str	r3, [sp, #8]
 8006e78:	4658      	mov	r0, fp
 8006e7a:	f7ff fa43 	bl	8006304 <ai_buffer_get_size>
 8006e7e:	9b02      	ldr	r3, [sp, #8]
 8006e80:	4283      	cmp	r3, r0
 8006e82:	f0c0 8095 	bcc.w	8006fb0 <ai_platform_network_process+0x2cc>
 8006e86:	68f0      	ldr	r0, [r6, #12]
 8006e88:	f8db 1018 	ldr.w	r1, [fp, #24]
 8006e8c:	68c2      	ldr	r2, [r0, #12]
 8006e8e:	68cb      	ldr	r3, [r1, #12]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	f040 808d 	bne.w	8006fb0 <ai_platform_network_process+0x2cc>
 8006e96:	6882      	ldr	r2, [r0, #8]
 8006e98:	688b      	ldr	r3, [r1, #8]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	f040 8088 	bne.w	8006fb0 <ai_platform_network_process+0x2cc>
 8006ea0:	6842      	ldr	r2, [r0, #4]
 8006ea2:	684b      	ldr	r3, [r1, #4]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	f040 8083 	bne.w	8006fb0 <ai_platform_network_process+0x2cc>
 8006eaa:	69b3      	ldr	r3, [r6, #24]
 8006eac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006eb0:	f002 fe36 	bl	8009b20 <ai_array_get_data_byte_size>
 8006eb4:	9002      	str	r0, [sp, #8]
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f7ff fa0c 	bl	80062d4 <get_tensor_byte_size>
 8006ebc:	9b02      	ldr	r3, [sp, #8]
 8006ebe:	4283      	cmp	r3, r0
 8006ec0:	d376      	bcc.n	8006fb0 <ai_platform_network_process+0x2cc>
 8006ec2:	69b3      	ldr	r3, [r6, #24]
 8006ec4:	6818      	ldr	r0, [r3, #0]
 8006ec6:	f002 fd93 	bl	80099f0 <ai_array_to_buffer_fmt>
 8006eca:	f8db 3000 	ldr.w	r3, [fp]
 8006ece:	4058      	eors	r0, r3
 8006ed0:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8006ed4:	f040 8134 	bne.w	8007140 <ai_platform_network_process+0x45c>
 8006ed8:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 8127 	beq.w	8007130 <ai_platform_network_process+0x44c>
 8006ee2:	f8db 3018 	ldr.w	r3, [fp, #24]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f000 8133 	beq.w	8007154 <ai_platform_network_process+0x470>
 8006eee:	9a01      	ldr	r2, [sp, #4]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	bf38      	it	cc
 8006ef4:	461a      	movcc	r2, r3
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	9201      	str	r2, [sp, #4]
 8006efa:	f7ff f9eb 	bl	80062d4 <get_tensor_byte_size>
 8006efe:	f8c9 0008 	str.w	r0, [r9, #8]
 8006f02:	f8db 3018 	ldr.w	r3, [fp, #24]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	fb00 f303 	mul.w	r3, r0, r3
 8006f0c:	f8c9 300c 	str.w	r3, [r9, #12]
 8006f10:	f8db 1004 	ldr.w	r1, [fp, #4]
 8006f14:	f8c9 1004 	str.w	r1, [r9, #4]
 8006f18:	440b      	add	r3, r1
 8006f1a:	f844 300a 	str.w	r3, [r4, sl]
 8006f1e:	69b0      	ldr	r0, [r6, #24]
 8006f20:	6803      	ldr	r3, [r0, #0]
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	f107 0701 	add.w	r7, r7, #1
 8006f28:	f10b 0b1c 	add.w	fp, fp, #28
 8006f2c:	d44a      	bmi.n	8006fc4 <ai_platform_network_process+0x2e0>
 8006f2e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006f32:	1a9b      	subs	r3, r3, r2
 8006f34:	4419      	add	r1, r3
 8006f36:	6081      	str	r1, [r0, #8]
 8006f38:	69b3      	ldr	r3, [r6, #24]
 8006f3a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8006f3e:	60da      	str	r2, [r3, #12]
 8006f40:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006f44:	42bb      	cmp	r3, r7
 8006f46:	d880      	bhi.n	8006e4a <ai_platform_network_process+0x166>
 8006f48:	e041      	b.n	8006fce <ai_platform_network_process+0x2ea>
 8006f4a:	692a      	ldr	r2, [r5, #16]
 8006f4c:	61ab      	str	r3, [r5, #24]
 8006f4e:	f002 0203 	and.w	r2, r2, #3
 8006f52:	2a03      	cmp	r2, #3
 8006f54:	d115      	bne.n	8006f82 <ai_platform_network_process+0x29e>
 8006f56:	2217      	movs	r2, #23
 8006f58:	2112      	movs	r1, #18
 8006f5a:	f105 000c 	add.w	r0, r5, #12
 8006f5e:	f000 f95d 	bl	800721c <core_set_error>
 8006f62:	2400      	movs	r4, #0
 8006f64:	4620      	mov	r0, r4
 8006f66:	b005      	add	sp, #20
 8006f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f6c:	f8ba 3000 	ldrh.w	r3, [sl]
 8006f70:	429f      	cmp	r7, r3
 8006f72:	f4ff aee0 	bcc.w	8006d36 <ai_platform_network_process+0x52>
 8006f76:	e755      	b.n	8006e24 <ai_platform_network_process+0x140>
 8006f78:	2400      	movs	r4, #0
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	b005      	add	sp, #20
 8006f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f82:	2230      	movs	r2, #48	; 0x30
 8006f84:	2111      	movs	r1, #17
 8006f86:	f105 000c 	add.w	r0, r5, #12
 8006f8a:	f000 f947 	bl	800721c <core_set_error>
 8006f8e:	2400      	movs	r4, #0
 8006f90:	4620      	mov	r0, r4
 8006f92:	b005      	add	sp, #20
 8006f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f98:	9d03      	ldr	r5, [sp, #12]
 8006f9a:	2218      	movs	r2, #24
 8006f9c:	2112      	movs	r1, #18
 8006f9e:	f105 000c 	add.w	r0, r5, #12
 8006fa2:	f000 f93b 	bl	800721c <core_set_error>
 8006fa6:	2400      	movs	r4, #0
 8006fa8:	4620      	mov	r0, r4
 8006faa:	b005      	add	sp, #20
 8006fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb0:	2218      	movs	r2, #24
 8006fb2:	2113      	movs	r1, #19
 8006fb4:	f105 000c 	add.w	r0, r5, #12
 8006fb8:	f000 f930 	bl	800721c <core_set_error>
 8006fbc:	2400      	movs	r4, #0
 8006fbe:	e7d1      	b.n	8006f64 <ai_platform_network_process+0x280>
 8006fc0:	a1c00100 	.word	0xa1c00100
 8006fc4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006fc8:	429f      	cmp	r7, r3
 8006fca:	f4ff af3e 	bcc.w	8006e4a <ai_platform_network_process+0x166>
 8006fce:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006fd2:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 8006fd4:	832b      	strh	r3, [r5, #24]
 8006fd6:	2a00      	cmp	r2, #0
 8006fd8:	f040 808c 	bne.w	80070f4 <ai_platform_network_process+0x410>
 8006fdc:	4616      	mov	r6, r2
 8006fde:	4617      	mov	r7, r2
 8006fe0:	8b6c      	ldrh	r4, [r5, #26]
 8006fe2:	429c      	cmp	r4, r3
 8006fe4:	bf38      	it	cc
 8006fe6:	46ab      	movcc	fp, r5
 8006fe8:	d2bc      	bcs.n	8006f64 <ai_platform_network_process+0x280>
 8006fea:	2e00      	cmp	r6, #0
 8006fec:	d030      	beq.n	8007050 <ai_platform_network_process+0x36c>
 8006fee:	f04f 0800 	mov.w	r8, #0
 8006ff2:	e014      	b.n	800701e <ai_platform_network_process+0x33a>
 8006ff4:	6882      	ldr	r2, [r0, #8]
 8006ff6:	68c5      	ldr	r5, [r0, #12]
 8006ff8:	6863      	ldr	r3, [r4, #4]
 8006ffa:	1b52      	subs	r2, r2, r5
 8006ffc:	4413      	add	r3, r2
 8006ffe:	6083      	str	r3, [r0, #8]
 8007000:	698b      	ldr	r3, [r1, #24]
 8007002:	6862      	ldr	r2, [r4, #4]
 8007004:	60da      	str	r2, [r3, #12]
 8007006:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800700a:	f859 200a 	ldr.w	r2, [r9, sl]
 800700e:	440b      	add	r3, r1
 8007010:	4293      	cmp	r3, r2
 8007012:	bf24      	itt	cs
 8007014:	68e3      	ldrcs	r3, [r4, #12]
 8007016:	1ad3      	subcs	r3, r2, r3
 8007018:	6063      	str	r3, [r4, #4]
 800701a:	f108 0801 	add.w	r8, r8, #1
 800701e:	8833      	ldrh	r3, [r6, #0]
 8007020:	4543      	cmp	r3, r8
 8007022:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8007026:	d913      	bls.n	8007050 <ai_platform_network_process+0x36c>
 8007028:	6873      	ldr	r3, [r6, #4]
 800702a:	b18b      	cbz	r3, 8007050 <ai_platform_network_process+0x36c>
 800702c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8007030:	b171      	cbz	r1, 8007050 <ai_platform_network_process+0x36c>
 8007032:	6988      	ldr	r0, [r1, #24]
 8007034:	68b2      	ldr	r2, [r6, #8]
 8007036:	6803      	ldr	r3, [r0, #0]
 8007038:	f8d2 9000 	ldr.w	r9, [r2]
 800703c:	009d      	lsls	r5, r3, #2
 800703e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8007042:	d5d7      	bpl.n	8006ff4 <ai_platform_network_process+0x310>
 8007044:	6881      	ldr	r1, [r0, #8]
 8007046:	68a2      	ldr	r2, [r4, #8]
 8007048:	6860      	ldr	r0, [r4, #4]
 800704a:	f002 fc4b 	bl	80098e4 <st_int8_copy>
 800704e:	e7da      	b.n	8007006 <ai_platform_network_process+0x322>
 8007050:	4658      	mov	r0, fp
 8007052:	f000 f93b 	bl	80072cc <ai_layers_forward_all>
 8007056:	2f00      	cmp	r7, #0
 8007058:	d03d      	beq.n	80070d6 <ai_platform_network_process+0x3f2>
 800705a:	2400      	movs	r4, #0
 800705c:	e016      	b.n	800708c <ai_platform_network_process+0x3a8>
 800705e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8007062:	f859 100a 	ldr.w	r1, [r9, sl]
 8007066:	4413      	add	r3, r2
 8007068:	428b      	cmp	r3, r1
 800706a:	bf24      	itt	cs
 800706c:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8007070:	1acb      	subcs	r3, r1, r3
 8007072:	f8c8 3004 	str.w	r3, [r8, #4]
 8007076:	6981      	ldr	r1, [r0, #24]
 8007078:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800707c:	1b52      	subs	r2, r2, r5
 800707e:	4413      	add	r3, r2
 8007080:	608b      	str	r3, [r1, #8]
 8007082:	6983      	ldr	r3, [r0, #24]
 8007084:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007088:	60da      	str	r2, [r3, #12]
 800708a:	3401      	adds	r4, #1
 800708c:	883b      	ldrh	r3, [r7, #0]
 800708e:	42a3      	cmp	r3, r4
 8007090:	d921      	bls.n	80070d6 <ai_platform_network_process+0x3f2>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	b1fb      	cbz	r3, 80070d6 <ai_platform_network_process+0x3f2>
 8007096:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800709a:	b1e0      	cbz	r0, 80070d6 <ai_platform_network_process+0x3f2>
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	6983      	ldr	r3, [r0, #24]
 80070a0:	f8d2 9000 	ldr.w	r9, [r2]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	0092      	lsls	r2, r2, #2
 80070a8:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80070ac:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80070b0:	d5d5      	bpl.n	800705e <ai_platform_network_process+0x37a>
 80070b2:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 80070b6:	6898      	ldr	r0, [r3, #8]
 80070b8:	f002 fc14 	bl	80098e4 <st_int8_copy>
 80070bc:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80070c0:	f859 200a 	ldr.w	r2, [r9, sl]
 80070c4:	440b      	add	r3, r1
 80070c6:	4293      	cmp	r3, r2
 80070c8:	bf24      	itt	cs
 80070ca:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80070ce:	1ad3      	subcs	r3, r2, r3
 80070d0:	f8c8 3004 	str.w	r3, [r8, #4]
 80070d4:	e7d9      	b.n	800708a <ai_platform_network_process+0x3a6>
 80070d6:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 80070da:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 80070de:	3401      	adds	r4, #1
 80070e0:	b2a4      	uxth	r4, r4
 80070e2:	42a3      	cmp	r3, r4
 80070e4:	f8ab 401a 	strh.w	r4, [fp, #26]
 80070e8:	f63f af7f 	bhi.w	8006fea <ai_platform_network_process+0x306>
 80070ec:	4620      	mov	r0, r4
 80070ee:	b005      	add	sp, #20
 80070f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f4:	2a01      	cmp	r2, #1
 80070f6:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 80070f8:	d02a      	beq.n	8007150 <ai_platform_network_process+0x46c>
 80070fa:	f106 070c 	add.w	r7, r6, #12
 80070fe:	e76f      	b.n	8006fe0 <ai_platform_network_process+0x2fc>
 8007100:	9d03      	ldr	r5, [sp, #12]
 8007102:	e728      	b.n	8006f56 <ai_platform_network_process+0x272>
 8007104:	9d03      	ldr	r5, [sp, #12]
 8007106:	2219      	movs	r2, #25
 8007108:	2112      	movs	r1, #18
 800710a:	f105 000c 	add.w	r0, r5, #12
 800710e:	f000 f885 	bl	800721c <core_set_error>
 8007112:	2400      	movs	r4, #0
 8007114:	e726      	b.n	8006f64 <ai_platform_network_process+0x280>
 8007116:	9d03      	ldr	r5, [sp, #12]
 8007118:	4604      	mov	r4, r0
 800711a:	2221      	movs	r2, #33	; 0x21
 800711c:	2112      	movs	r1, #18
 800711e:	f105 000c 	add.w	r0, r5, #12
 8007122:	f000 f87b 	bl	800721c <core_set_error>
 8007126:	e71d      	b.n	8006f64 <ai_platform_network_process+0x280>
 8007128:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800712c:	832b      	strh	r3, [r5, #24]
 800712e:	e752      	b.n	8006fd6 <ai_platform_network_process+0x2f2>
 8007130:	2217      	movs	r2, #23
 8007132:	2113      	movs	r1, #19
 8007134:	f105 000c 	add.w	r0, r5, #12
 8007138:	f000 f870 	bl	800721c <core_set_error>
 800713c:	2400      	movs	r4, #0
 800713e:	e711      	b.n	8006f64 <ai_platform_network_process+0x280>
 8007140:	2219      	movs	r2, #25
 8007142:	2113      	movs	r1, #19
 8007144:	f105 000c 	add.w	r0, r5, #12
 8007148:	f000 f868 	bl	800721c <core_set_error>
 800714c:	2400      	movs	r4, #0
 800714e:	e709      	b.n	8006f64 <ai_platform_network_process+0x280>
 8007150:	2700      	movs	r7, #0
 8007152:	e745      	b.n	8006fe0 <ai_platform_network_process+0x2fc>
 8007154:	4604      	mov	r4, r0
 8007156:	2221      	movs	r2, #33	; 0x21
 8007158:	2113      	movs	r1, #19
 800715a:	f105 000c 	add.w	r0, r5, #12
 800715e:	f000 f85d 	bl	800721c <core_set_error>
 8007162:	e6ff      	b.n	8006f64 <ai_platform_network_process+0x280>

08007164 <ai_platform_observer_register_s>:
 8007164:	4b1b      	ldr	r3, [pc, #108]	; (80071d4 <ai_platform_observer_register_s+0x70>)
 8007166:	6802      	ldr	r2, [r0, #0]
 8007168:	4393      	bics	r3, r2
 800716a:	d129      	bne.n	80071c0 <ai_platform_observer_register_s+0x5c>
 800716c:	b510      	push	{r4, lr}
 800716e:	4686      	mov	lr, r0
 8007170:	460c      	mov	r4, r1
 8007172:	b1f1      	cbz	r1, 80071b2 <ai_platform_observer_register_s+0x4e>
 8007174:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007176:	bb2b      	cbnz	r3, 80071c4 <ai_platform_observer_register_s+0x60>
 8007178:	81cb      	strh	r3, [r1, #14]
 800717a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800717c:	f04f 0c01 	mov.w	ip, #1
 8007180:	e008      	b.n	8007194 <ai_platform_observer_register_s+0x30>
 8007182:	f8a4 c00e 	strh.w	ip, [r4, #14]
 8007186:	691a      	ldr	r2, [r3, #16]
 8007188:	429a      	cmp	r2, r3
 800718a:	fa1f fc81 	uxth.w	ip, r1
 800718e:	d005      	beq.n	800719c <ai_platform_observer_register_s+0x38>
 8007190:	b122      	cbz	r2, 800719c <ai_platform_observer_register_s+0x38>
 8007192:	4613      	mov	r3, r2
 8007194:	f10c 0101 	add.w	r1, ip, #1
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1f2      	bne.n	8007182 <ai_platform_observer_register_s+0x1e>
 800719c:	7a23      	ldrb	r3, [r4, #8]
 800719e:	4a0e      	ldr	r2, [pc, #56]	; (80071d8 <ai_platform_observer_register_s+0x74>)
 80071a0:	2100      	movs	r1, #0
 80071a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071a6:	81a1      	strh	r1, [r4, #12]
 80071a8:	60a3      	str	r3, [r4, #8]
 80071aa:	e9ce 2410 	strd	r2, r4, [lr, #64]	; 0x40
 80071ae:	2001      	movs	r0, #1
 80071b0:	bd10      	pop	{r4, pc}
 80071b2:	2211      	movs	r2, #17
 80071b4:	2110      	movs	r1, #16
 80071b6:	300c      	adds	r0, #12
 80071b8:	f000 f830 	bl	800721c <core_set_error>
 80071bc:	4620      	mov	r0, r4
 80071be:	bd10      	pop	{r4, pc}
 80071c0:	2000      	movs	r0, #0
 80071c2:	4770      	bx	lr
 80071c4:	2240      	movs	r2, #64	; 0x40
 80071c6:	2111      	movs	r1, #17
 80071c8:	300c      	adds	r0, #12
 80071ca:	f000 f827 	bl	800721c <core_set_error>
 80071ce:	2000      	movs	r0, #0
 80071d0:	bd10      	pop	{r4, pc}
 80071d2:	bf00      	nop
 80071d4:	a1c00100 	.word	0xa1c00100
 80071d8:	080063b1 	.word	0x080063b1

080071dc <ai_platform_observer_unregister_s>:
 80071dc:	4b0a      	ldr	r3, [pc, #40]	; (8007208 <ai_platform_observer_unregister_s+0x2c>)
 80071de:	6802      	ldr	r2, [r0, #0]
 80071e0:	4393      	bics	r3, r2
 80071e2:	d10e      	bne.n	8007202 <ai_platform_observer_unregister_s+0x26>
 80071e4:	b510      	push	{r4, lr}
 80071e6:	460c      	mov	r4, r1
 80071e8:	b121      	cbz	r1, 80071f4 <ai_platform_observer_unregister_s+0x18>
 80071ea:	2300      	movs	r3, #0
 80071ec:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
 80071f0:	2001      	movs	r0, #1
 80071f2:	bd10      	pop	{r4, pc}
 80071f4:	2211      	movs	r2, #17
 80071f6:	2110      	movs	r1, #16
 80071f8:	300c      	adds	r0, #12
 80071fa:	f000 f80f 	bl	800721c <core_set_error>
 80071fe:	4620      	mov	r0, r4
 8007200:	bd10      	pop	{r4, pc}
 8007202:	2000      	movs	r0, #0
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	a1c00100 	.word	0xa1c00100

0800720c <core_init>:
 800720c:	2001      	movs	r0, #1
 800720e:	4770      	bx	lr

08007210 <core_get_error>:
 8007210:	4603      	mov	r3, r0
 8007212:	2200      	movs	r2, #0
 8007214:	6800      	ldr	r0, [r0, #0]
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop

0800721c <core_set_error>:
 800721c:	4603      	mov	r3, r0
 800721e:	7800      	ldrb	r0, [r0, #0]
 8007220:	b108      	cbz	r0, 8007226 <core_set_error+0xa>
 8007222:	2000      	movs	r0, #0
 8007224:	4770      	bx	lr
 8007226:	7019      	strb	r1, [r3, #0]
 8007228:	6819      	ldr	r1, [r3, #0]
 800722a:	f362 211f 	bfi	r1, r2, #8, #24
 800722e:	2001      	movs	r0, #1
 8007230:	6019      	str	r1, [r3, #0]
 8007232:	4770      	bx	lr

08007234 <ai_check_custom_types>:
 8007234:	b082      	sub	sp, #8
 8007236:	4b13      	ldr	r3, [pc, #76]	; (8007284 <ai_check_custom_types+0x50>)
 8007238:	9301      	str	r3, [sp, #4]
 800723a:	b118      	cbz	r0, 8007244 <ai_check_custom_types+0x10>
 800723c:	7803      	ldrb	r3, [r0, #0]
 800723e:	2b03      	cmp	r3, #3
 8007240:	d002      	beq.n	8007248 <ai_check_custom_types+0x14>
 8007242:	2000      	movs	r0, #0
 8007244:	b002      	add	sp, #8
 8007246:	4770      	bx	lr
 8007248:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800724c:	4293      	cmp	r3, r2
 800724e:	d004      	beq.n	800725a <ai_check_custom_types+0x26>
 8007250:	2001      	movs	r0, #1
 8007252:	f080 0001 	eor.w	r0, r0, #1
 8007256:	b002      	add	sp, #8
 8007258:	4770      	bx	lr
 800725a:	7842      	ldrb	r2, [r0, #1]
 800725c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007260:	429a      	cmp	r2, r3
 8007262:	f100 0001 	add.w	r0, r0, #1
 8007266:	d1f3      	bne.n	8007250 <ai_check_custom_types+0x1c>
 8007268:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800726c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007270:	429a      	cmp	r2, r3
 8007272:	d1ed      	bne.n	8007250 <ai_check_custom_types+0x1c>
 8007274:	7842      	ldrb	r2, [r0, #1]
 8007276:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800727a:	429a      	cmp	r2, r3
 800727c:	d1e8      	bne.n	8007250 <ai_check_custom_types+0x1c>
 800727e:	2000      	movs	r0, #0
 8007280:	e7e7      	b.n	8007252 <ai_check_custom_types+0x1e>
 8007282:	bf00      	nop
 8007284:	84048403 	.word	0x84048403

08007288 <ai_layers_init_all>:
 8007288:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800728a:	2100      	movs	r1, #0
 800728c:	b143      	cbz	r3, 80072a0 <ai_layers_init_all+0x18>
 800728e:	691a      	ldr	r2, [r3, #16]
 8007290:	60d8      	str	r0, [r3, #12]
 8007292:	429a      	cmp	r2, r3
 8007294:	f101 0101 	add.w	r1, r1, #1
 8007298:	d002      	beq.n	80072a0 <ai_layers_init_all+0x18>
 800729a:	b10a      	cbz	r2, 80072a0 <ai_layers_init_all+0x18>
 800729c:	4613      	mov	r3, r2
 800729e:	e7f5      	b.n	800728c <ai_layers_init_all+0x4>
 80072a0:	4608      	mov	r0, r1
 80072a2:	4770      	bx	lr

080072a4 <ai_layers_post_init_all>:
 80072a4:	b538      	push	{r3, r4, r5, lr}
 80072a6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80072a8:	2500      	movs	r5, #0
 80072aa:	b16c      	cbz	r4, 80072c8 <ai_layers_post_init_all+0x24>
 80072ac:	6863      	ldr	r3, [r4, #4]
 80072ae:	07db      	lsls	r3, r3, #31
 80072b0:	d504      	bpl.n	80072bc <ai_layers_post_init_all+0x18>
 80072b2:	6a23      	ldr	r3, [r4, #32]
 80072b4:	4620      	mov	r0, r4
 80072b6:	b10b      	cbz	r3, 80072bc <ai_layers_post_init_all+0x18>
 80072b8:	4798      	blx	r3
 80072ba:	3501      	adds	r5, #1
 80072bc:	6923      	ldr	r3, [r4, #16]
 80072be:	42a3      	cmp	r3, r4
 80072c0:	d002      	beq.n	80072c8 <ai_layers_post_init_all+0x24>
 80072c2:	b10b      	cbz	r3, 80072c8 <ai_layers_post_init_all+0x24>
 80072c4:	461c      	mov	r4, r3
 80072c6:	e7f0      	b.n	80072aa <ai_layers_post_init_all+0x6>
 80072c8:	4628      	mov	r0, r5
 80072ca:	bd38      	pop	{r3, r4, r5, pc}

080072cc <ai_layers_forward_all>:
 80072cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d0:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 80072d4:	4604      	mov	r4, r0
 80072d6:	f1b8 0f00 	cmp.w	r8, #0
 80072da:	d02b      	beq.n	8007334 <ai_layers_forward_all+0x68>
 80072dc:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80072de:	63c1      	str	r1, [r0, #60]	; 0x3c
 80072e0:	b321      	cbz	r1, 800732c <ai_layers_forward_all+0x60>
 80072e2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80072e4:	2001      	movs	r0, #1
 80072e6:	47c0      	blx	r8
 80072e8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 80072ea:	b1fe      	cbz	r6, 800732c <ai_layers_forward_all+0x60>
 80072ec:	2700      	movs	r7, #0
 80072ee:	4631      	mov	r1, r6
 80072f0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80072f2:	2002      	movs	r0, #2
 80072f4:	47c0      	blx	r8
 80072f6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80072f8:	4628      	mov	r0, r5
 80072fa:	696b      	ldr	r3, [r5, #20]
 80072fc:	4798      	blx	r3
 80072fe:	692e      	ldr	r6, [r5, #16]
 8007300:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007302:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007304:	42b5      	cmp	r5, r6
 8007306:	f04f 0003 	mov.w	r0, #3
 800730a:	d007      	beq.n	800731c <ai_layers_forward_all+0x50>
 800730c:	47c0      	blx	r8
 800730e:	3701      	adds	r7, #1
 8007310:	63e6      	str	r6, [r4, #60]	; 0x3c
 8007312:	2e00      	cmp	r6, #0
 8007314:	d1eb      	bne.n	80072ee <ai_layers_forward_all+0x22>
 8007316:	4638      	mov	r0, r7
 8007318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800731c:	2003      	movs	r0, #3
 800731e:	47c0      	blx	r8
 8007320:	2300      	movs	r3, #0
 8007322:	3701      	adds	r7, #1
 8007324:	63e3      	str	r3, [r4, #60]	; 0x3c
 8007326:	4638      	mov	r0, r7
 8007328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800732c:	2700      	movs	r7, #0
 800732e:	4638      	mov	r0, r7
 8007330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007334:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8007336:	63c5      	str	r5, [r0, #60]	; 0x3c
 8007338:	2d00      	cmp	r5, #0
 800733a:	d0f7      	beq.n	800732c <ai_layers_forward_all+0x60>
 800733c:	4647      	mov	r7, r8
 800733e:	696b      	ldr	r3, [r5, #20]
 8007340:	4628      	mov	r0, r5
 8007342:	4798      	blx	r3
 8007344:	462b      	mov	r3, r5
 8007346:	692d      	ldr	r5, [r5, #16]
 8007348:	429d      	cmp	r5, r3
 800734a:	d004      	beq.n	8007356 <ai_layers_forward_all+0x8a>
 800734c:	63e5      	str	r5, [r4, #60]	; 0x3c
 800734e:	3701      	adds	r7, #1
 8007350:	2d00      	cmp	r5, #0
 8007352:	d1f4      	bne.n	800733e <ai_layers_forward_all+0x72>
 8007354:	e7df      	b.n	8007316 <ai_layers_forward_all+0x4a>
 8007356:	2300      	movs	r3, #0
 8007358:	63e3      	str	r3, [r4, #60]	; 0x3c
 800735a:	3701      	adds	r7, #1
 800735c:	e7db      	b.n	8007316 <ai_layers_forward_all+0x4a>
 800735e:	bf00      	nop

08007360 <ai_layers_destroy_all>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8007364:	2500      	movs	r5, #0
 8007366:	b16c      	cbz	r4, 8007384 <ai_layers_destroy_all+0x24>
 8007368:	6863      	ldr	r3, [r4, #4]
 800736a:	075b      	lsls	r3, r3, #29
 800736c:	d504      	bpl.n	8007378 <ai_layers_destroy_all+0x18>
 800736e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007370:	4620      	mov	r0, r4
 8007372:	b10b      	cbz	r3, 8007378 <ai_layers_destroy_all+0x18>
 8007374:	4798      	blx	r3
 8007376:	3501      	adds	r5, #1
 8007378:	6923      	ldr	r3, [r4, #16]
 800737a:	42a3      	cmp	r3, r4
 800737c:	d002      	beq.n	8007384 <ai_layers_destroy_all+0x24>
 800737e:	b10b      	cbz	r3, 8007384 <ai_layers_destroy_all+0x24>
 8007380:	461c      	mov	r4, r3
 8007382:	e7f0      	b.n	8007366 <ai_layers_destroy_all+0x6>
 8007384:	4628      	mov	r0, r5
 8007386:	bd38      	pop	{r3, r4, r5, pc}

08007388 <forward_conv2d_if32of32wf32>:
 8007388:	6983      	ldr	r3, [r0, #24]
 800738a:	881a      	ldrh	r2, [r3, #0]
 800738c:	2a00      	cmp	r2, #0
 800738e:	f000 80af 	beq.w	80074f0 <forward_conv2d_if32of32wf32+0x168>
 8007392:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007396:	f8d3 e004 	ldr.w	lr, [r3, #4]
 800739a:	f8de 3004 	ldr.w	r3, [lr, #4]
 800739e:	b0a3      	sub	sp, #140	; 0x8c
 80073a0:	4607      	mov	r7, r0
 80073a2:	b103      	cbz	r3, 80073a6 <forward_conv2d_if32of32wf32+0x1e>
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2a01      	cmp	r2, #1
 80073a8:	f000 80dc 	beq.w	8007564 <forward_conv2d_if32of32wf32+0x1dc>
 80073ac:	f8de 0010 	ldr.w	r0, [lr, #16]
 80073b0:	b100      	cbz	r0, 80073b4 <forward_conv2d_if32of32wf32+0x2c>
 80073b2:	6800      	ldr	r0, [r0, #0]
 80073b4:	2a02      	cmp	r2, #2
 80073b6:	f000 809d 	beq.w	80074f4 <forward_conv2d_if32of32wf32+0x16c>
 80073ba:	f8de 501c 	ldr.w	r5, [lr, #28]
 80073be:	2d00      	cmp	r5, #0
 80073c0:	f000 80c9 	beq.w	8007556 <forward_conv2d_if32of32wf32+0x1ce>
 80073c4:	f8be 1018 	ldrh.w	r1, [lr, #24]
 80073c8:	682c      	ldr	r4, [r5, #0]
 80073ca:	2901      	cmp	r1, #1
 80073cc:	f240 80c5 	bls.w	800755a <forward_conv2d_if32of32wf32+0x1d2>
 80073d0:	686d      	ldr	r5, [r5, #4]
 80073d2:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80073dc:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80073e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80073e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80073e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80073ea:	9315      	str	r3, [sp, #84]	; 0x54
 80073ec:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80073f0:	9316      	str	r3, [sp, #88]	; 0x58
 80073f2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80073f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80073f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80073fc:	9318      	str	r3, [sp, #96]	; 0x60
 80073fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007402:	9319      	str	r3, [sp, #100]	; 0x64
 8007404:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007406:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 8007408:	931a      	str	r3, [sp, #104]	; 0x68
 800740a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800740c:	68e1      	ldr	r1, [r4, #12]
 800740e:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8007412:	931b      	str	r3, [sp, #108]	; 0x6c
 8007414:	e9d7 a40c 	ldrd	sl, r4, [r7, #48]	; 0x30
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	9320      	str	r3, [sp, #128]	; 0x80
 800741c:	8833      	ldrh	r3, [r6, #0]
 800741e:	931c      	str	r3, [sp, #112]	; 0x70
 8007420:	88b3      	ldrh	r3, [r6, #4]
 8007422:	931d      	str	r3, [sp, #116]	; 0x74
 8007424:	fa1f f38a 	uxth.w	r3, sl
 8007428:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
 800742c:	931e      	str	r3, [sp, #120]	; 0x78
 800742e:	b2a3      	uxth	r3, r4
 8007430:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8007434:	931f      	str	r3, [sp, #124]	; 0x7c
 8007436:	b10d      	cbz	r5, 800743c <forward_conv2d_if32of32wf32+0xb4>
 8007438:	69ad      	ldr	r5, [r5, #24]
 800743a:	68ad      	ldr	r5, [r5, #8]
 800743c:	6980      	ldr	r0, [r0, #24]
 800743e:	b2a4      	uxth	r4, r4
 8007440:	fa1f f38a 	uxth.w	r3, sl
 8007444:	3c01      	subs	r4, #1
 8007446:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800744a:	1e70      	subs	r0, r6, #1
 800744c:	3b01      	subs	r3, #1
 800744e:	fb00 6404 	mla	r4, r0, r4, r6
 8007452:	1e78      	subs	r0, r7, #1
 8007454:	fb00 7303 	mla	r3, r0, r3, r7
 8007458:	2a03      	cmp	r2, #3
 800745a:	9314      	str	r3, [sp, #80]	; 0x50
 800745c:	d07f      	beq.n	800755e <forward_conv2d_if32of32wf32+0x1d6>
 800745e:	f8de 3028 	ldr.w	r3, [lr, #40]	; 0x28
 8007462:	2b00      	cmp	r3, #0
 8007464:	d049      	beq.n	80074fa <forward_conv2d_if32of32wf32+0x172>
 8007466:	f8d3 8000 	ldr.w	r8, [r3]
 800746a:	f1b8 0f00 	cmp.w	r8, #0
 800746e:	d003      	beq.n	8007478 <forward_conv2d_if32of32wf32+0xf0>
 8007470:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8007474:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8007478:	6858      	ldr	r0, [r3, #4]
 800747a:	2800      	cmp	r0, #0
 800747c:	d03e      	beq.n	80074fc <forward_conv2d_if32of32wf32+0x174>
 800747e:	6983      	ldr	r3, [r0, #24]
 8007480:	f8dc e000 	ldr.w	lr, [ip]
 8007484:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8007488:	f3ce 4243 	ubfx	r2, lr, #17, #4
 800748c:	f46f 7388 	mvn.w	r3, #272	; 0x110
 8007490:	4113      	asrs	r3, r2
 8007492:	07db      	lsls	r3, r3, #31
 8007494:	d553      	bpl.n	800753e <forward_conv2d_if32of32wf32+0x1b6>
 8007496:	f1b9 0f00 	cmp.w	r9, #0
 800749a:	bf18      	it	ne
 800749c:	4649      	movne	r1, r9
 800749e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074a0:	930c      	str	r3, [sp, #48]	; 0x30
 80074a2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80074a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80074a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80074a8:	930a      	str	r3, [sp, #40]	; 0x28
 80074aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80074ac:	940d      	str	r4, [sp, #52]	; 0x34
 80074ae:	e9cd 6308 	strd	r6, r3, [sp, #32]
 80074b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80074b4:	9306      	str	r3, [sp, #24]
 80074b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074b8:	9305      	str	r3, [sp, #20]
 80074ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80074bc:	9304      	str	r3, [sp, #16]
 80074be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074c0:	9303      	str	r3, [sp, #12]
 80074c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074c4:	9302      	str	r3, [sp, #8]
 80074c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80074c8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80074ca:	9707      	str	r7, [sp, #28]
 80074cc:	e9cd 8300 	strd	r8, r3, [sp]
 80074d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80074d2:	9311      	str	r3, [sp, #68]	; 0x44
 80074d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80074d6:	9310      	str	r3, [sp, #64]	; 0x40
 80074d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80074da:	930f      	str	r3, [sp, #60]	; 0x3c
 80074dc:	460a      	mov	r2, r1
 80074de:	462b      	mov	r3, r5
 80074e0:	4651      	mov	r1, sl
 80074e2:	4658      	mov	r0, fp
 80074e4:	940e      	str	r4, [sp, #56]	; 0x38
 80074e6:	f000 fc15 	bl	8007d14 <forward_lite_conv2d_if32of32wf32>
 80074ea:	b023      	add	sp, #140	; 0x8c
 80074ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f0:	6853      	ldr	r3, [r2, #4]
 80074f2:	deff      	udf	#255	; 0xff
 80074f4:	2300      	movs	r3, #0
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	deff      	udf	#255	; 0xff
 80074fa:	4698      	mov	r8, r3
 80074fc:	f8dc e000 	ldr.w	lr, [ip]
 8007500:	f46f 7088 	mvn.w	r0, #272	; 0x110
 8007504:	f3ce 4343 	ubfx	r3, lr, #17, #4
 8007508:	4118      	asrs	r0, r3
 800750a:	f010 0001 	ands.w	r0, r0, #1
 800750e:	d1c6      	bne.n	800749e <forward_conv2d_if32of32wf32+0x116>
 8007510:	f3ce 13c6 	ubfx	r3, lr, #7, #7
 8007514:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8007518:	f3ce 5e41 	ubfx	lr, lr, #21, #2
 800751c:	fa43 f30e 	asr.w	r3, r3, lr
 8007520:	b29b      	uxth	r3, r3
 8007522:	2a00      	cmp	r2, #0
 8007524:	d0bb      	beq.n	800749e <forward_conv2d_if32of32wf32+0x116>
 8007526:	4681      	mov	r9, r0
 8007528:	6980      	ldr	r0, [r0, #24]
 800752a:	9121      	str	r1, [sp, #132]	; 0x84
 800752c:	6840      	ldr	r0, [r0, #4]
 800752e:	9001      	str	r0, [sp, #4]
 8007530:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007532:	9000      	str	r0, [sp, #0]
 8007534:	4648      	mov	r0, r9
 8007536:	f001 fda9 	bl	800908c <lite_decompress_ilutof32>
 800753a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800753c:	e7ab      	b.n	8007496 <forward_conv2d_if32of32wf32+0x10e>
 800753e:	f3ce 13c6 	ubfx	r3, lr, #7, #7
 8007542:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8007546:	f3ce 5e41 	ubfx	lr, lr, #21, #2
 800754a:	fa43 f30e 	asr.w	r3, r3, lr
 800754e:	b29b      	uxth	r3, r3
 8007550:	2a00      	cmp	r2, #0
 8007552:	d0a0      	beq.n	8007496 <forward_conv2d_if32of32wf32+0x10e>
 8007554:	e7e8      	b.n	8007528 <forward_conv2d_if32of32wf32+0x1a0>
 8007556:	462c      	mov	r4, r5
 8007558:	e73b      	b.n	80073d2 <forward_conv2d_if32of32wf32+0x4a>
 800755a:	2500      	movs	r5, #0
 800755c:	e739      	b.n	80073d2 <forward_conv2d_if32of32wf32+0x4a>
 800755e:	2300      	movs	r3, #0
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	deff      	udf	#255	; 0xff
 8007564:	2300      	movs	r3, #0
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	deff      	udf	#255	; 0xff
 800756a:	bf00      	nop

0800756c <forward_conv2d_if32of32wf32_nl_pool>:
 800756c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007570:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8007574:	b0c3      	sub	sp, #268	; 0x10c
 8007576:	f8bc 3000 	ldrh.w	r3, [ip]
 800757a:	9321      	str	r3, [sp, #132]	; 0x84
 800757c:	2b00      	cmp	r3, #0
 800757e:	f000 8139 	beq.w	80077f4 <forward_conv2d_if32of32wf32_nl_pool+0x288>
 8007582:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8007586:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800758a:	4604      	mov	r4, r0
 800758c:	f1ba 0f00 	cmp.w	sl, #0
 8007590:	d001      	beq.n	8007596 <forward_conv2d_if32of32wf32_nl_pool+0x2a>
 8007592:	f8da a000 	ldr.w	sl, [sl]
 8007596:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007598:	2a01      	cmp	r2, #1
 800759a:	f000 812a 	beq.w	80077f2 <forward_conv2d_if32of32wf32_nl_pool+0x286>
 800759e:	f8d3 9010 	ldr.w	r9, [r3, #16]
 80075a2:	f1b9 0f00 	cmp.w	r9, #0
 80075a6:	d001      	beq.n	80075ac <forward_conv2d_if32of32wf32_nl_pool+0x40>
 80075a8:	f8d9 9000 	ldr.w	r9, [r9]
 80075ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80075ae:	2a02      	cmp	r2, #2
 80075b0:	f000 811f 	beq.w	80077f2 <forward_conv2d_if32of32wf32_nl_pool+0x286>
 80075b4:	f8d3 801c 	ldr.w	r8, [r3, #28]
 80075b8:	8b1b      	ldrh	r3, [r3, #24]
 80075ba:	f1b8 0f00 	cmp.w	r8, #0
 80075be:	f000 812d 	beq.w	800781c <forward_conv2d_if32of32wf32_nl_pool+0x2b0>
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	f8d8 b000 	ldr.w	fp, [r8]
 80075c8:	f240 812e 	bls.w	8007828 <forward_conv2d_if32of32wf32_nl_pool+0x2bc>
 80075cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80075d0:	9341      	str	r3, [sp, #260]	; 0x104
 80075d2:	f8d8 8008 	ldr.w	r8, [r8, #8]
 80075d6:	f8da 200c 	ldr.w	r2, [sl, #12]
 80075da:	f8d9 100c 	ldr.w	r1, [r9, #12]
 80075de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075e0:	f8db e00c 	ldr.w	lr, [fp, #12]
 80075e4:	9022      	str	r0, [sp, #136]	; 0x88
 80075e6:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 80075ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80075ec:	9031      	str	r0, [sp, #196]	; 0xc4
 80075ee:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
 80075f2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80075f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075f6:	f8de 7004 	ldr.w	r7, [lr, #4]
 80075fa:	9032      	str	r0, [sp, #200]	; 0xc8
 80075fc:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8007600:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8007604:	9527      	str	r5, [sp, #156]	; 0x9c
 8007606:	9628      	str	r6, [sp, #160]	; 0xa0
 8007608:	681d      	ldr	r5, [r3, #0]
 800760a:	685e      	ldr	r6, [r3, #4]
 800760c:	972b      	str	r7, [sp, #172]	; 0xac
 800760e:	9134      	str	r1, [sp, #208]	; 0xd0
 8007610:	f8de 7008 	ldr.w	r7, [lr, #8]
 8007614:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 8007618:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800761c:	9529      	str	r5, [sp, #164]	; 0xa4
 800761e:	962a      	str	r6, [sp, #168]	; 0xa8
 8007620:	9730      	str	r7, [sp, #192]	; 0xc0
 8007622:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	; 0x30
 8007626:	9033      	str	r0, [sp, #204]	; 0xcc
 8007628:	9123      	str	r1, [sp, #140]	; 0x8c
 800762a:	9224      	str	r2, [sp, #144]	; 0x90
 800762c:	689a      	ldr	r2, [r3, #8]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	932f      	str	r3, [sp, #188]	; 0xbc
 8007632:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8007636:	9339      	str	r3, [sp, #228]	; 0xe4
 8007638:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
 800763c:	922e      	str	r2, [sp, #184]	; 0xb8
 800763e:	933c      	str	r3, [sp, #240]	; 0xf0
 8007640:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007642:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
 8007646:	933d      	str	r3, [sp, #244]	; 0xf4
 8007648:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 800764c:	933e      	str	r3, [sp, #248]	; 0xf8
 800764e:	f9b2 3000 	ldrsh.w	r3, [r2]
 8007652:	933f      	str	r3, [sp, #252]	; 0xfc
 8007654:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8007658:	9340      	str	r3, [sp, #256]	; 0x100
 800765a:	6a23      	ldr	r3, [r4, #32]
 800765c:	9322      	str	r3, [sp, #136]	; 0x88
 800765e:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 8007662:	9335      	str	r3, [sp, #212]	; 0xd4
 8007664:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
 8007668:	9336      	str	r3, [sp, #216]	; 0xd8
 800766a:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 800766e:	9337      	str	r3, [sp, #220]	; 0xdc
 8007670:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 8007674:	9338      	str	r3, [sp, #224]	; 0xe0
 8007676:	b2ab      	uxth	r3, r5
 8007678:	933a      	str	r3, [sp, #232]	; 0xe8
 800767a:	b2b3      	uxth	r3, r6
 800767c:	933b      	str	r3, [sp, #236]	; 0xec
 800767e:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 8007682:	9325      	str	r3, [sp, #148]	; 0x94
 8007684:	b23b      	sxth	r3, r7
 8007686:	9326      	str	r3, [sp, #152]	; 0x98
 8007688:	f1b8 0f00 	cmp.w	r8, #0
 800768c:	f000 80b4 	beq.w	80077f8 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 8007690:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 80b8 	beq.w	800780a <forward_conv2d_if32of32wf32_nl_pool+0x29e>
 800769a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	9322      	str	r3, [sp, #136]	; 0x88
 80076a2:	f002 fa15 	bl	8009ad0 <ai_array_get_byte_size>
 80076a6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80076aa:	902d      	str	r0, [sp, #180]	; 0xb4
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f000 80be 	beq.w	800782e <forward_conv2d_if32of32wf32_nl_pool+0x2c2>
 80076b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076b6:	f002 fa0b 	bl	8009ad0 <ai_array_get_byte_size>
 80076ba:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80076be:	902c      	str	r0, [sp, #176]	; 0xb0
 80076c0:	f8bc 3000 	ldrh.w	r3, [ip]
 80076c4:	9321      	str	r3, [sp, #132]	; 0x84
 80076c6:	f8da 1018 	ldr.w	r1, [sl, #24]
 80076ca:	f8d9 8018 	ldr.w	r8, [r9, #24]
 80076ce:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80076d0:	6888      	ldr	r0, [r1, #8]
 80076d2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80076d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80076d8:	f8bd 909c 	ldrh.w	r9, [sp, #156]	; 0x9c
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	f8db 2018 	ldr.w	r2, [fp, #24]
 80076e2:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80076e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076e8:	f8bd e0a0 	ldrh.w	lr, [sp, #160]	; 0xa0
 80076ec:	f8d4 a05c 	ldr.w	sl, [r4, #92]	; 0x5c
 80076f0:	6892      	ldr	r2, [r2, #8]
 80076f2:	f107 38ff 	add.w	r8, r7, #4294967295
 80076f6:	b2ad      	uxth	r5, r5
 80076f8:	9f2b      	ldr	r7, [sp, #172]	; 0xac
 80076fa:	3d01      	subs	r5, #1
 80076fc:	fb15 7508 	smlabb	r5, r5, r8, r7
 8007700:	fa0f f885 	sxth.w	r8, r5
 8007704:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8007706:	9f30      	ldr	r7, [sp, #192]	; 0xc0
 8007708:	b2b6      	uxth	r6, r6
 800770a:	3d01      	subs	r5, #1
 800770c:	3e01      	subs	r6, #1
 800770e:	fb16 7605 	smlabb	r6, r6, r5, r7
 8007712:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8007714:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 8007716:	eba5 0508 	sub.w	r5, r5, r8
 800771a:	fa15 f587 	uxtah	r5, r5, r7
 800771e:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
 8007720:	fa15 f587 	uxtah	r5, r5, r7
 8007724:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8007726:	fb95 f5f9 	sdiv	r5, r5, r9
 800772a:	b236      	sxth	r6, r6
 800772c:	eba7 0906 	sub.w	r9, r7, r6
 8007730:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 8007732:	fa19 f987 	uxtah	r9, r9, r7
 8007736:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8007738:	3501      	adds	r5, #1
 800773a:	2b03      	cmp	r3, #3
 800773c:	fa19 f987 	uxtah	r9, r9, r7
 8007740:	b22d      	sxth	r5, r5
 8007742:	fb99 f9fe 	sdiv	r9, r9, lr
 8007746:	f109 0e01 	add.w	lr, r9, #1
 800774a:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
 800774e:	f9b4 4048 	ldrsh.w	r4, [r4, #72]	; 0x48
 8007752:	d94e      	bls.n	80077f2 <forward_conv2d_if32of32wf32_nl_pool+0x286>
 8007754:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8007758:	f8d7 c028 	ldr.w	ip, [r7, #40]	; 0x28
 800775c:	f1bc 0f00 	cmp.w	ip, #0
 8007760:	d070      	beq.n	8007844 <forward_conv2d_if32of32wf32_nl_pool+0x2d8>
 8007762:	f8dc 7000 	ldr.w	r7, [ip]
 8007766:	b10f      	cbz	r7, 800776c <forward_conv2d_if32of32wf32_nl_pool+0x200>
 8007768:	69bf      	ldr	r7, [r7, #24]
 800776a:	68bf      	ldr	r7, [r7, #8]
 800776c:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800776e:	931f      	str	r3, [sp, #124]	; 0x7c
 8007770:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8007772:	931e      	str	r3, [sp, #120]	; 0x78
 8007774:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8007776:	931d      	str	r3, [sp, #116]	; 0x74
 8007778:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800777a:	9513      	str	r5, [sp, #76]	; 0x4c
 800777c:	e9cd 431b 	strd	r4, r3, [sp, #108]	; 0x6c
 8007780:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8007782:	960e      	str	r6, [sp, #56]	; 0x38
 8007784:	e9cd a319 	strd	sl, r3, [sp, #100]	; 0x64
 8007788:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800778a:	9318      	str	r3, [sp, #96]	; 0x60
 800778c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800778e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007790:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007792:	e9cd 9315 	strd	r9, r3, [sp, #84]	; 0x54
 8007796:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8007798:	9312      	str	r3, [sp, #72]	; 0x48
 800779a:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800779c:	9311      	str	r3, [sp, #68]	; 0x44
 800779e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80077a0:	e9cd 830f 	strd	r8, r3, [sp, #60]	; 0x3c
 80077a4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80077a6:	930d      	str	r3, [sp, #52]	; 0x34
 80077a8:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80077aa:	930c      	str	r3, [sp, #48]	; 0x30
 80077ac:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80077ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80077b0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80077b2:	930a      	str	r3, [sp, #40]	; 0x28
 80077b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80077b6:	9309      	str	r3, [sp, #36]	; 0x24
 80077b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80077ba:	9308      	str	r3, [sp, #32]
 80077bc:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80077be:	9307      	str	r3, [sp, #28]
 80077c0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80077c2:	9306      	str	r3, [sp, #24]
 80077c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80077c6:	9305      	str	r3, [sp, #20]
 80077c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80077ca:	9304      	str	r3, [sp, #16]
 80077cc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80077ce:	9303      	str	r3, [sp, #12]
 80077d0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80077d2:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80077d6:	fa0f f48e 	sxth.w	r4, lr
 80077da:	9414      	str	r4, [sp, #80]	; 0x50
 80077dc:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80077e0:	69a4      	ldr	r4, [r4, #24]
 80077e2:	68a4      	ldr	r4, [r4, #8]
 80077e4:	9400      	str	r4, [sp, #0]
 80077e6:	465b      	mov	r3, fp
 80077e8:	f000 fd5a 	bl	80082a0 <forward_lite_conv2d_if32of32wf32_pool>
 80077ec:	b043      	add	sp, #268	; 0x10c
 80077ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f2:	2300      	movs	r3, #0
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	deff      	udf	#255	; 0xff
 80077f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077fa:	b10b      	cbz	r3, 8007800 <forward_conv2d_if32of32wf32_nl_pool+0x294>
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	9322      	str	r3, [sp, #136]	; 0x88
 8007800:	2301      	movs	r3, #1
 8007802:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
 8007806:	932c      	str	r3, [sp, #176]	; 0xb0
 8007808:	e75d      	b.n	80076c6 <forward_conv2d_if32of32wf32_nl_pool+0x15a>
 800780a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800780c:	b10b      	cbz	r3, 8007812 <forward_conv2d_if32of32wf32_nl_pool+0x2a6>
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	9322      	str	r3, [sp, #136]	; 0x88
 8007812:	2301      	movs	r3, #1
 8007814:	2200      	movs	r2, #0
 8007816:	e9cd 322c 	strd	r3, r2, [sp, #176]	; 0xb0
 800781a:	e754      	b.n	80076c6 <forward_conv2d_if32of32wf32_nl_pool+0x15a>
 800781c:	2b01      	cmp	r3, #1
 800781e:	d90e      	bls.n	800783e <forward_conv2d_if32of32wf32_nl_pool+0x2d2>
 8007820:	f8cd 8104 	str.w	r8, [sp, #260]	; 0x104
 8007824:	46c3      	mov	fp, r8
 8007826:	e6d6      	b.n	80075d6 <forward_conv2d_if32of32wf32_nl_pool+0x6a>
 8007828:	2300      	movs	r3, #0
 800782a:	9341      	str	r3, [sp, #260]	; 0x104
 800782c:	e6d1      	b.n	80075d2 <forward_conv2d_if32of32wf32_nl_pool+0x66>
 800782e:	2301      	movs	r3, #1
 8007830:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8007834:	932c      	str	r3, [sp, #176]	; 0xb0
 8007836:	f8bc 3000 	ldrh.w	r3, [ip]
 800783a:	9321      	str	r3, [sp, #132]	; 0x84
 800783c:	e743      	b.n	80076c6 <forward_conv2d_if32of32wf32_nl_pool+0x15a>
 800783e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007842:	deff      	udf	#255	; 0xff
 8007844:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8007848:	deff      	udf	#255	; 0xff
 800784a:	bf00      	nop

0800784c <forward_dense>:
 800784c:	6982      	ldr	r2, [r0, #24]
 800784e:	8813      	ldrh	r3, [r2, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d043      	beq.n	80078dc <forward_dense+0x90>
 8007854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007858:	6855      	ldr	r5, [r2, #4]
 800785a:	6869      	ldr	r1, [r5, #4]
 800785c:	b08e      	sub	sp, #56	; 0x38
 800785e:	b101      	cbz	r1, 8007862 <forward_dense+0x16>
 8007860:	6809      	ldr	r1, [r1, #0]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d069      	beq.n	800793a <forward_dense+0xee>
 8007866:	692a      	ldr	r2, [r5, #16]
 8007868:	b102      	cbz	r2, 800786c <forward_dense+0x20>
 800786a:	6812      	ldr	r2, [r2, #0]
 800786c:	2b02      	cmp	r3, #2
 800786e:	d061      	beq.n	8007934 <forward_dense+0xe8>
 8007870:	69ec      	ldr	r4, [r5, #28]
 8007872:	2c00      	cmp	r4, #0
 8007874:	d057      	beq.n	8007926 <forward_dense+0xda>
 8007876:	8b2e      	ldrh	r6, [r5, #24]
 8007878:	6820      	ldr	r0, [r4, #0]
 800787a:	2e01      	cmp	r6, #1
 800787c:	d955      	bls.n	800792a <forward_dense+0xde>
 800787e:	6864      	ldr	r4, [r4, #4]
 8007880:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8007884:	68cf      	ldr	r7, [r1, #12]
 8007886:	68d0      	ldr	r0, [r2, #12]
 8007888:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800788c:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8007890:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 8007894:	f8d9 0000 	ldr.w	r0, [r9]
 8007898:	2b03      	cmp	r3, #3
 800789a:	fb06 f807 	mul.w	r8, r6, r7
 800789e:	f020 4c7e 	bic.w	ip, r0, #4261412864	; 0xfe000000
 80078a2:	d044      	beq.n	800792e <forward_dense+0xe2>
 80078a4:	6aad      	ldr	r5, [r5, #40]	; 0x28
 80078a6:	b11d      	cbz	r5, 80078b0 <forward_dense+0x64>
 80078a8:	682d      	ldr	r5, [r5, #0]
 80078aa:	b10d      	cbz	r5, 80078b0 <forward_dense+0x64>
 80078ac:	69ab      	ldr	r3, [r5, #24]
 80078ae:	689d      	ldr	r5, [r3, #8]
 80078b0:	6992      	ldr	r2, [r2, #24]
 80078b2:	698b      	ldr	r3, [r1, #24]
 80078b4:	6890      	ldr	r0, [r2, #8]
 80078b6:	6899      	ldr	r1, [r3, #8]
 80078b8:	b10c      	cbz	r4, 80078be <forward_dense+0x72>
 80078ba:	69a3      	ldr	r3, [r4, #24]
 80078bc:	689c      	ldr	r4, [r3, #8]
 80078be:	4b20      	ldr	r3, [pc, #128]	; (8007940 <forward_dense+0xf4>)
 80078c0:	459c      	cmp	ip, r3
 80078c2:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 80078c6:	d023      	beq.n	8007910 <forward_dense+0xc4>
 80078c8:	4e1e      	ldr	r6, [pc, #120]	; (8007944 <forward_dense+0xf8>)
 80078ca:	45b4      	cmp	ip, r6
 80078cc:	d015      	beq.n	80078fa <forward_dense+0xae>
 80078ce:	f5a3 039c 	sub.w	r3, r3, #5111808	; 0x4e0000
 80078d2:	459c      	cmp	ip, r3
 80078d4:	d004      	beq.n	80078e0 <forward_dense+0x94>
 80078d6:	b00e      	add	sp, #56	; 0x38
 80078d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	deff      	udf	#255	; 0xff
 80078e0:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80078e4:	a807      	add	r0, sp, #28
 80078e6:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 80078ea:	e9cd e80c 	strd	lr, r8, [sp, #48]	; 0x30
 80078ee:	9209      	str	r2, [sp, #36]	; 0x24
 80078f0:	f001 fc26 	bl	8009140 <forward_lite_dense_if32of32wf32>
 80078f4:	b00e      	add	sp, #56	; 0x38
 80078f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078fa:	e9cd e803 	strd	lr, r8, [sp, #12]
 80078fe:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8007902:	9500      	str	r5, [sp, #0]
 8007904:	464b      	mov	r3, r9
 8007906:	f001 fd75 	bl	80093f4 <forward_lite_dense_if32of32wf32_lut4>
 800790a:	b00e      	add	sp, #56	; 0x38
 800790c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007910:	e9cd e803 	strd	lr, r8, [sp, #12]
 8007914:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8007918:	9500      	str	r5, [sp, #0]
 800791a:	464b      	mov	r3, r9
 800791c:	f001 fe92 	bl	8009644 <forward_lite_dense_if32of32wf32_lut8>
 8007920:	b00e      	add	sp, #56	; 0x38
 8007922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007926:	4620      	mov	r0, r4
 8007928:	e7aa      	b.n	8007880 <forward_dense+0x34>
 800792a:	2400      	movs	r4, #0
 800792c:	e7a8      	b.n	8007880 <forward_dense+0x34>
 800792e:	2300      	movs	r3, #0
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	deff      	udf	#255	; 0xff
 8007934:	2300      	movs	r3, #0
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	deff      	udf	#255	; 0xff
 800793a:	2300      	movs	r3, #0
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	deff      	udf	#255	; 0xff
 8007940:	01d01040 	.word	0x01d01040
 8007944:	01e81040 	.word	0x01e81040

08007948 <forward_relu>:
 8007948:	6982      	ldr	r2, [r0, #24]
 800794a:	8813      	ldrh	r3, [r2, #0]
 800794c:	b323      	cbz	r3, 8007998 <forward_relu+0x50>
 800794e:	6851      	ldr	r1, [r2, #4]
 8007950:	684a      	ldr	r2, [r1, #4]
 8007952:	b102      	cbz	r2, 8007956 <forward_relu+0xe>
 8007954:	6812      	ldr	r2, [r2, #0]
 8007956:	2b01      	cmp	r3, #1
 8007958:	f000 808d 	beq.w	8007a76 <forward_relu+0x12e>
 800795c:	b470      	push	{r4, r5, r6}
 800795e:	6909      	ldr	r1, [r1, #16]
 8007960:	b101      	cbz	r1, 8007964 <forward_relu+0x1c>
 8007962:	6809      	ldr	r1, [r1, #0]
 8007964:	69c6      	ldr	r6, [r0, #28]
 8007966:	b1ce      	cbz	r6, 800799c <forward_relu+0x54>
 8007968:	6873      	ldr	r3, [r6, #4]
 800796a:	6988      	ldr	r0, [r1, #24]
 800796c:	6991      	ldr	r1, [r2, #24]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d044      	beq.n	80079fc <forward_relu+0xb4>
 8007972:	6893      	ldr	r3, [r2, #8]
 8007974:	6880      	ldr	r0, [r0, #8]
 8007976:	6889      	ldr	r1, [r1, #8]
 8007978:	0a1b      	lsrs	r3, r3, #8
 800797a:	d073      	beq.n	8007a64 <forward_relu+0x11c>
 800797c:	68d5      	ldr	r5, [r2, #12]
 800797e:	2201      	movs	r2, #1
 8007980:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007984:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8007988:	429d      	cmp	r5, r3
 800798a:	fb04 f202 	mul.w	r2, r4, r2
 800798e:	d1f9      	bne.n	8007984 <forward_relu+0x3c>
 8007990:	68b3      	ldr	r3, [r6, #8]
 8007992:	bc70      	pop	{r4, r5, r6}
 8007994:	f001 b8d4 	b.w	8008b40 <forward_lite_nl_relu_generic_if32of32_kernel>
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	deff      	udf	#255	; 0xff
 800799c:	6893      	ldr	r3, [r2, #8]
 800799e:	6989      	ldr	r1, [r1, #24]
 80079a0:	6990      	ldr	r0, [r2, #24]
 80079a2:	6889      	ldr	r1, [r1, #8]
 80079a4:	6884      	ldr	r4, [r0, #8]
 80079a6:	0a1b      	lsrs	r3, r3, #8
 80079a8:	d05e      	beq.n	8007a68 <forward_relu+0x120>
 80079aa:	68d5      	ldr	r5, [r2, #12]
 80079ac:	2201      	movs	r2, #1
 80079ae:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80079b2:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 80079b6:	429d      	cmp	r5, r3
 80079b8:	fb00 f202 	mul.w	r2, r0, r2
 80079bc:	d1f9      	bne.n	80079b2 <forward_relu+0x6a>
 80079be:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 80079c2:	3b01      	subs	r3, #1
 80079c4:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80079c8:	4294      	cmp	r4, r2
 80079ca:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80079ce:	d813      	bhi.n	80079f8 <forward_relu+0xb0>
 80079d0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8007a7c <forward_relu+0x134>
 80079d4:	3204      	adds	r2, #4
 80079d6:	3104      	adds	r1, #4
 80079d8:	4613      	mov	r3, r2
 80079da:	ed72 7a01 	vldmdb	r2!, {s15}
 80079de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80079e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e6:	f1a3 0308 	sub.w	r3, r3, #8
 80079ea:	bfb8      	it	lt
 80079ec:	eef0 7a47 	vmovlt.f32	s15, s14
 80079f0:	429c      	cmp	r4, r3
 80079f2:	ed61 7a01 	vstmdb	r1!, {s15}
 80079f6:	d9ef      	bls.n	80079d8 <forward_relu+0x90>
 80079f8:	bc70      	pop	{r4, r5, r6}
 80079fa:	4770      	bx	lr
 80079fc:	688c      	ldr	r4, [r1, #8]
 80079fe:	6891      	ldr	r1, [r2, #8]
 8007a00:	6880      	ldr	r0, [r0, #8]
 8007a02:	0a09      	lsrs	r1, r1, #8
 8007a04:	d032      	beq.n	8007a6c <forward_relu+0x124>
 8007a06:	68d5      	ldr	r5, [r2, #12]
 8007a08:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8007a0c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007a10:	4295      	cmp	r5, r2
 8007a12:	fb01 f303 	mul.w	r3, r1, r3
 8007a16:	d1f9      	bne.n	8007a0c <forward_relu+0xc4>
 8007a18:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8007a1c:	3a01      	subs	r2, #1
 8007a1e:	68b1      	ldr	r1, [r6, #8]
 8007a20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a24:	429c      	cmp	r4, r3
 8007a26:	ed91 7a00 	vldr	s14, [r1]
 8007a2a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8007a2e:	d8e3      	bhi.n	80079f8 <forward_relu+0xb0>
 8007a30:	2500      	movs	r5, #0
 8007a32:	3304      	adds	r3, #4
 8007a34:	1d02      	adds	r2, r0, #4
 8007a36:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007a3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a42:	f1a3 0104 	sub.w	r1, r3, #4
 8007a46:	f1a3 0308 	sub.w	r3, r3, #8
 8007a4a:	d405      	bmi.n	8007a58 <forward_relu+0x110>
 8007a4c:	429c      	cmp	r4, r3
 8007a4e:	f842 5d04 	str.w	r5, [r2, #-4]!
 8007a52:	d8d1      	bhi.n	80079f8 <forward_relu+0xb0>
 8007a54:	460b      	mov	r3, r1
 8007a56:	e7ee      	b.n	8007a36 <forward_relu+0xee>
 8007a58:	429c      	cmp	r4, r3
 8007a5a:	ed62 7a01 	vstmdb	r2!, {s15}
 8007a5e:	d8cb      	bhi.n	80079f8 <forward_relu+0xb0>
 8007a60:	460b      	mov	r3, r1
 8007a62:	e7e8      	b.n	8007a36 <forward_relu+0xee>
 8007a64:	2201      	movs	r2, #1
 8007a66:	e793      	b.n	8007990 <forward_relu+0x48>
 8007a68:	4622      	mov	r2, r4
 8007a6a:	e7b1      	b.n	80079d0 <forward_relu+0x88>
 8007a6c:	68b2      	ldr	r2, [r6, #8]
 8007a6e:	4623      	mov	r3, r4
 8007a70:	ed92 7a00 	vldr	s14, [r2]
 8007a74:	e7dc      	b.n	8007a30 <forward_relu+0xe8>
 8007a76:	2300      	movs	r3, #0
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	deff      	udf	#255	; 0xff
 8007a7c:	00000000 	.word	0x00000000

08007a80 <forward_sm>:
 8007a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a84:	6982      	ldr	r2, [r0, #24]
 8007a86:	8813      	ldrh	r3, [r2, #0]
 8007a88:	b383      	cbz	r3, 8007aec <forward_sm+0x6c>
 8007a8a:	6852      	ldr	r2, [r2, #4]
 8007a8c:	6855      	ldr	r5, [r2, #4]
 8007a8e:	b105      	cbz	r5, 8007a92 <forward_sm+0x12>
 8007a90:	682d      	ldr	r5, [r5, #0]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d029      	beq.n	8007aea <forward_sm+0x6a>
 8007a96:	6913      	ldr	r3, [r2, #16]
 8007a98:	b363      	cbz	r3, 8007af4 <forward_sm+0x74>
 8007a9a:	681e      	ldr	r6, [r3, #0]
 8007a9c:	68a9      	ldr	r1, [r5, #8]
 8007a9e:	68ec      	ldr	r4, [r5, #12]
 8007aa0:	68f3      	ldr	r3, [r6, #12]
 8007aa2:	6867      	ldr	r7, [r4, #4]
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	0a09      	lsrs	r1, r1, #8
 8007aa8:	d022      	beq.n	8007af0 <forward_sm+0x70>
 8007aaa:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007aae:	2301      	movs	r3, #1
 8007ab0:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 8007ab4:	428c      	cmp	r4, r1
 8007ab6:	fb00 f303 	mul.w	r3, r0, r3
 8007aba:	d1f9      	bne.n	8007ab0 <forward_sm+0x30>
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	69a8      	ldr	r0, [r5, #24]
 8007ac0:	69b1      	ldr	r1, [r6, #24]
 8007ac2:	6884      	ldr	r4, [r0, #8]
 8007ac4:	688e      	ldr	r6, [r1, #8]
 8007ac6:	18e5      	adds	r5, r4, r3
 8007ac8:	42ac      	cmp	r4, r5
 8007aca:	d20c      	bcs.n	8007ae6 <forward_sm+0x66>
 8007acc:	ea4f 0882 	mov.w	r8, r2, lsl #2
 8007ad0:	ea4f 0987 	mov.w	r9, r7, lsl #2
 8007ad4:	4621      	mov	r1, r4
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	463a      	mov	r2, r7
 8007ada:	444c      	add	r4, r9
 8007adc:	f000 ffe6 	bl	8008aac <forward_lite_nl_softmax_if32of32_kernel>
 8007ae0:	42a5      	cmp	r5, r4
 8007ae2:	4446      	add	r6, r8
 8007ae4:	d8f6      	bhi.n	8007ad4 <forward_sm+0x54>
 8007ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aea:	2300      	movs	r3, #0
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	deff      	udf	#255	; 0xff
 8007af0:	2304      	movs	r3, #4
 8007af2:	e7e4      	b.n	8007abe <forward_sm+0x3e>
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	deff      	udf	#255	; 0xff

08007af8 <forward_ap>:
 8007af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007afc:	6983      	ldr	r3, [r0, #24]
 8007afe:	b09b      	sub	sp, #108	; 0x6c
 8007b00:	881a      	ldrh	r2, [r3, #0]
 8007b02:	900f      	str	r0, [sp, #60]	; 0x3c
 8007b04:	2a00      	cmp	r2, #0
 8007b06:	f000 80f8 	beq.w	8007cfa <forward_ap+0x202>
 8007b0a:	6859      	ldr	r1, [r3, #4]
 8007b0c:	684b      	ldr	r3, [r1, #4]
 8007b0e:	b103      	cbz	r3, 8007b12 <forward_ap+0x1a>
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2a01      	cmp	r2, #1
 8007b14:	f000 80f9 	beq.w	8007d0a <forward_ap+0x212>
 8007b18:	690a      	ldr	r2, [r1, #16]
 8007b1a:	2a00      	cmp	r2, #0
 8007b1c:	f000 80f8 	beq.w	8007d10 <forward_ap+0x218>
 8007b20:	6811      	ldr	r1, [r2, #0]
 8007b22:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007b24:	68ca      	ldr	r2, [r1, #12]
 8007b26:	6989      	ldr	r1, [r1, #24]
 8007b28:	68d4      	ldr	r4, [r2, #12]
 8007b2a:	6895      	ldr	r5, [r2, #8]
 8007b2c:	688a      	ldr	r2, [r1, #8]
 8007b2e:	68d9      	ldr	r1, [r3, #12]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	9204      	str	r2, [sp, #16]
 8007b34:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	9315      	str	r3, [sp, #84]	; 0x54
 8007b3a:	e9d1 7c02 	ldrd	r7, ip, [r1, #8]
 8007b3e:	e9d2 3600 	ldrd	r3, r6, [r2]
 8007b42:	6a02      	ldr	r2, [r0, #32]
 8007b44:	970a      	str	r7, [sp, #40]	; 0x28
 8007b46:	920b      	str	r2, [sp, #44]	; 0x2c
 8007b48:	684f      	ldr	r7, [r1, #4]
 8007b4a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007b4c:	69c1      	ldr	r1, [r0, #28]
 8007b4e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8007b50:	9013      	str	r0, [sp, #76]	; 0x4c
 8007b52:	4258      	negs	r0, r3
 8007b54:	9410      	str	r4, [sp, #64]	; 0x40
 8007b56:	9509      	str	r5, [sp, #36]	; 0x24
 8007b58:	9614      	str	r6, [sp, #80]	; 0x50
 8007b5a:	9111      	str	r1, [sp, #68]	; 0x44
 8007b5c:	9212      	str	r2, [sp, #72]	; 0x48
 8007b5e:	9003      	str	r0, [sp, #12]
 8007b60:	2c00      	cmp	r4, #0
 8007b62:	f000 80c7 	beq.w	8007cf4 <forward_ap+0x1fc>
 8007b66:	eb0c 0003 	add.w	r0, ip, r3
 8007b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b6e:	9005      	str	r0, [sp, #20]
 8007b70:	fb07 f303 	mul.w	r3, r7, r3
 8007b74:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8007b78:	fb02 f301 	mul.w	r3, r2, r1
 8007b7c:	ea4f 0a87 	mov.w	sl, r7, lsl #2
 8007b80:	9316      	str	r3, [sp, #88]	; 0x58
 8007b82:	4273      	negs	r3, r6
 8007b84:	9317      	str	r3, [sp, #92]	; 0x5c
 8007b86:	fb05 f30a 	mul.w	r3, r5, sl
 8007b8a:	9319      	str	r3, [sp, #100]	; 0x64
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b92:	930c      	str	r3, [sp, #48]	; 0x30
 8007b94:	463d      	mov	r5, r7
 8007b96:	9b03      	ldr	r3, [sp, #12]
 8007b98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b9a:	9805      	ldr	r0, [sp, #20]
 8007b9c:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8007ba0:	4281      	cmp	r1, r0
 8007ba2:	bf94      	ite	ls
 8007ba4:	185b      	addls	r3, r3, r1
 8007ba6:	181b      	addhi	r3, r3, r0
 8007ba8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007baa:	920e      	str	r2, [sp, #56]	; 0x38
 8007bac:	9301      	str	r3, [sp, #4]
 8007bae:	2900      	cmp	r1, #0
 8007bb0:	f000 8092 	beq.w	8007cd8 <forward_ap+0x1e0>
 8007bb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	fb00 f102 	mul.w	r1, r0, r2
 8007bbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007bbe:	9318      	str	r3, [sp, #96]	; 0x60
 8007bc0:	9b04      	ldr	r3, [sp, #16]
 8007bc2:	9108      	str	r1, [sp, #32]
 8007bc4:	1882      	adds	r2, r0, r2
 8007bc6:	eb03 010a 	add.w	r1, r3, sl
 8007bca:	9207      	str	r2, [sp, #28]
 8007bcc:	4698      	mov	r8, r3
 8007bce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	930d      	str	r3, [sp, #52]	; 0x34
 8007bd4:	2a00      	cmp	r2, #0
 8007bd6:	bfac      	ite	ge
 8007bd8:	9b08      	ldrge	r3, [sp, #32]
 8007bda:	9c08      	ldrlt	r4, [sp, #32]
 8007bdc:	9206      	str	r2, [sp, #24]
 8007bde:	bfa8      	it	ge
 8007be0:	189c      	addge	r4, r3, r2
 8007be2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007be4:	9806      	ldr	r0, [sp, #24]
 8007be6:	9e07      	ldr	r6, [sp, #28]
 8007be8:	fb04 340a 	mla	r4, r4, sl, r3
 8007bec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bee:	bfb8      	it	lt
 8007bf0:	2200      	movlt	r2, #0
 8007bf2:	42b3      	cmp	r3, r6
 8007bf4:	bf94      	ite	ls
 8007bf6:	18c0      	addls	r0, r0, r3
 8007bf8:	1980      	addhi	r0, r0, r6
 8007bfa:	eba2 0e00 	sub.w	lr, r2, r0
 8007bfe:	1a82      	subs	r2, r0, r2
 8007c00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c02:	9200      	str	r2, [sp, #0]
 8007c04:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007c06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c0a:	fb02 fe0e 	mul.w	lr, r2, lr
 8007c0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	bf08      	it	eq
 8007c14:	4672      	moveq	r2, lr
 8007c16:	9202      	str	r2, [sp, #8]
 8007c18:	9b01      	ldr	r3, [sp, #4]
 8007c1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	dd49      	ble.n	8007cb4 <forward_ap+0x1bc>
 8007c20:	9b00      	ldr	r3, [sp, #0]
 8007c22:	4694      	mov	ip, r2
 8007c24:	fb0a 4003 	mla	r0, sl, r3, r4
 8007c28:	2201      	movs	r2, #1
 8007c2a:	2700      	movs	r7, #0
 8007c2c:	9b00      	ldr	r3, [sp, #0]
 8007c2e:	441f      	add	r7, r3
 8007c30:	45be      	cmp	lr, r7
 8007c32:	d064      	beq.n	8007cfe <forward_ap+0x206>
 8007c34:	42a0      	cmp	r0, r4
 8007c36:	bf88      	it	hi
 8007c38:	2600      	movhi	r6, #0
 8007c3a:	d932      	bls.n	8007ca2 <forward_ap+0x1aa>
 8007c3c:	4623      	mov	r3, r4
 8007c3e:	eb0a 0b04 	add.w	fp, sl, r4
 8007c42:	b145      	cbz	r5, 8007c56 <forward_ap+0x15e>
 8007c44:	2a00      	cmp	r2, #0
 8007c46:	d05e      	beq.n	8007d06 <forward_ap+0x20e>
 8007c48:	4642      	mov	r2, r8
 8007c4a:	ecf3 7a01 	vldmia	r3!, {s15}
 8007c4e:	459b      	cmp	fp, r3
 8007c50:	ece2 7a01 	vstmia	r2!, {s15}
 8007c54:	d1f9      	bne.n	8007c4a <forward_ap+0x152>
 8007c56:	46a3      	mov	fp, r4
 8007c58:	44d3      	add	fp, sl
 8007c5a:	4558      	cmp	r0, fp
 8007c5c:	d910      	bls.n	8007c80 <forward_ap+0x188>
 8007c5e:	2d00      	cmp	r5, #0
 8007c60:	d0fa      	beq.n	8007c58 <forward_ap+0x160>
 8007c62:	4643      	mov	r3, r8
 8007c64:	465a      	mov	r2, fp
 8007c66:	ed93 7a00 	vldr	s14, [r3]
 8007c6a:	ecf2 7a01 	vldmia	r2!, {s15}
 8007c6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c72:	ece3 7a01 	vstmia	r3!, {s15}
 8007c76:	428b      	cmp	r3, r1
 8007c78:	d1f5      	bne.n	8007c66 <forward_ap+0x16e>
 8007c7a:	44d3      	add	fp, sl
 8007c7c:	4558      	cmp	r0, fp
 8007c7e:	d8ee      	bhi.n	8007c5e <forward_ap+0x166>
 8007c80:	b17e      	cbz	r6, 8007ca2 <forward_ap+0x1aa>
 8007c82:	ee07 6a90 	vmov	s15, r6
 8007c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c8e:	b145      	cbz	r5, 8007ca2 <forward_ap+0x1aa>
 8007c90:	4643      	mov	r3, r8
 8007c92:	edd3 7a00 	vldr	s15, [r3]
 8007c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c9a:	ece3 7a01 	vstmia	r3!, {s15}
 8007c9e:	4299      	cmp	r1, r3
 8007ca0:	d1f7      	bne.n	8007c92 <forward_ap+0x19a>
 8007ca2:	9b01      	ldr	r3, [sp, #4]
 8007ca4:	f10c 0c01 	add.w	ip, ip, #1
 8007ca8:	4563      	cmp	r3, ip
 8007caa:	444c      	add	r4, r9
 8007cac:	4448      	add	r0, r9
 8007cae:	f04f 0200 	mov.w	r2, #0
 8007cb2:	d1bb      	bne.n	8007c2c <forward_ap+0x134>
 8007cb4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007cb6:	9c07      	ldr	r4, [sp, #28]
 8007cb8:	9a06      	ldr	r2, [sp, #24]
 8007cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cbc:	4402      	add	r2, r0
 8007cbe:	1a20      	subs	r0, r4, r0
 8007cc0:	9007      	str	r0, [sp, #28]
 8007cc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	4298      	cmp	r0, r3
 8007cc8:	930d      	str	r3, [sp, #52]	; 0x34
 8007cca:	44d0      	add	r8, sl
 8007ccc:	4451      	add	r1, sl
 8007cce:	d181      	bne.n	8007bd4 <forward_ap+0xdc>
 8007cd0:	9b04      	ldr	r3, [sp, #16]
 8007cd2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007cd4:	4413      	add	r3, r2
 8007cd6:	9304      	str	r3, [sp, #16]
 8007cd8:	9a03      	ldr	r2, [sp, #12]
 8007cda:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007cdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cde:	440a      	add	r2, r1
 8007ce0:	9203      	str	r2, [sp, #12]
 8007ce2:	9a05      	ldr	r2, [sp, #20]
 8007ce4:	1a52      	subs	r2, r2, r1
 8007ce6:	9205      	str	r2, [sp, #20]
 8007ce8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007cea:	3301      	adds	r3, #1
 8007cec:	429a      	cmp	r2, r3
 8007cee:	930c      	str	r3, [sp, #48]	; 0x30
 8007cf0:	f47f af51 	bne.w	8007b96 <forward_ap+0x9e>
 8007cf4:	b01b      	add	sp, #108	; 0x6c
 8007cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cfa:	6853      	ldr	r3, [r2, #4]
 8007cfc:	deff      	udf	#255	; 0xff
 8007cfe:	42a0      	cmp	r0, r4
 8007d00:	9e02      	ldr	r6, [sp, #8]
 8007d02:	d89b      	bhi.n	8007c3c <forward_ap+0x144>
 8007d04:	e7bc      	b.n	8007c80 <forward_ap+0x188>
 8007d06:	46a3      	mov	fp, r4
 8007d08:	e7ab      	b.n	8007c62 <forward_ap+0x16a>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	deff      	udf	#255	; 0xff
 8007d10:	68d3      	ldr	r3, [r2, #12]
 8007d12:	deff      	udf	#255	; 0xff

08007d14 <forward_lite_conv2d_if32of32wf32>:
 8007d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d18:	ed2d 8b02 	vpush	{d8}
 8007d1c:	b0a1      	sub	sp, #132	; 0x84
 8007d1e:	4686      	mov	lr, r0
 8007d20:	910c      	str	r1, [sp, #48]	; 0x30
 8007d22:	f8bd 10d8 	ldrh.w	r1, [sp, #216]	; 0xd8
 8007d26:	901e      	str	r0, [sp, #120]	; 0x78
 8007d28:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8007d2a:	f8bd 40d4 	ldrh.w	r4, [sp, #212]	; 0xd4
 8007d2e:	f8bd 50dc 	ldrh.w	r5, [sp, #220]	; 0xdc
 8007d32:	f8bd 60e0 	ldrh.w	r6, [sp, #224]	; 0xe0
 8007d36:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d38:	424f      	negs	r7, r1
 8007d3a:	4694      	mov	ip, r2
 8007d3c:	930e      	str	r3, [sp, #56]	; 0x38
 8007d3e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8007d40:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8007d42:	9418      	str	r4, [sp, #96]	; 0x60
 8007d44:	9508      	str	r5, [sp, #32]
 8007d46:	961f      	str	r6, [sp, #124]	; 0x7c
 8007d48:	9711      	str	r7, [sp, #68]	; 0x44
 8007d4a:	2800      	cmp	r0, #0
 8007d4c:	f000 8177 	beq.w	800803e <forward_lite_conv2d_if32of32wf32+0x32a>
 8007d50:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8007d52:	910d      	str	r1, [sp, #52]	; 0x34
 8007d54:	fb00 f303 	mul.w	r3, r0, r3
 8007d58:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8007d5a:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8007d5c:	ed9f 8abf 	vldr	s16, [pc, #764]	; 800805c <forward_lite_conv2d_if32of32wf32+0x348>
 8007d60:	fb00 f303 	mul.w	r3, r0, r3
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d68:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8007d6a:	fb01 f102 	mul.w	r1, r1, r2
 8007d6e:	fb00 f303 	mul.w	r3, r0, r3
 8007d72:	0092      	lsls	r2, r2, #2
 8007d74:	9205      	str	r2, [sp, #20]
 8007d76:	fb06 f203 	mul.w	r2, r6, r3
 8007d7a:	fb07 f303 	mul.w	r3, r7, r3
 8007d7e:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 8007d82:	9312      	str	r3, [sp, #72]	; 0x48
 8007d84:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8007d86:	fb05 f303 	mul.w	r3, r5, r3
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	9306      	str	r3, [sp, #24]
 8007d8e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8007d90:	0089      	lsls	r1, r1, #2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	911a      	str	r1, [sp, #104]	; 0x68
 8007d96:	4261      	negs	r1, r4
 8007d98:	9307      	str	r3, [sp, #28]
 8007d9a:	fb03 f301 	mul.w	r3, r3, r1
 8007d9e:	0094      	lsls	r4, r2, #2
 8007da0:	9316      	str	r3, [sp, #88]	; 0x58
 8007da2:	f10c 4278 	add.w	r2, ip, #4160749568	; 0xf8000000
 8007da6:	2300      	movs	r3, #0
 8007da8:	9115      	str	r1, [sp, #84]	; 0x54
 8007daa:	941c      	str	r4, [sp, #112]	; 0x70
 8007dac:	9219      	str	r2, [sp, #100]	; 0x64
 8007dae:	9314      	str	r3, [sp, #80]	; 0x50
 8007db0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f2c0 8270 	blt.w	8008298 <forward_lite_conv2d_if32of32wf32+0x584>
 8007db8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007dba:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007dc0:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8007dc2:	440a      	add	r2, r1
 8007dc4:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8007dc6:	428a      	cmp	r2, r1
 8007dc8:	bf94      	ite	ls
 8007dca:	ebc3 0b02 	rsbls	fp, r3, r2
 8007dce:	ebc3 0b01 	rsbhi	fp, r3, r1
 8007dd2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8007dd4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007dd6:	2a00      	cmp	r2, #0
 8007dd8:	f000 8142 	beq.w	8008060 <forward_lite_conv2d_if32of32wf32+0x34c>
 8007ddc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007dde:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8007de2:	f0c0 813d 	bcc.w	8008060 <forward_lite_conv2d_if32of32wf32+0x34c>
 8007de6:	9a05      	ldr	r2, [sp, #20]
 8007de8:	188a      	adds	r2, r1, r2
 8007dea:	4291      	cmp	r1, r2
 8007dec:	921b      	str	r2, [sp, #108]	; 0x6c
 8007dee:	f080 8110 	bcs.w	8008012 <forward_lite_conv2d_if32of32wf32+0x2fe>
 8007df2:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8007df4:	fb02 f303 	mul.w	r3, r2, r3
 8007df8:	9309      	str	r3, [sp, #36]	; 0x24
 8007dfa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007dfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dfe:	4413      	add	r3, r2
 8007e00:	931d      	str	r3, [sp, #116]	; 0x74
 8007e02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e04:	9310      	str	r3, [sp, #64]	; 0x40
 8007e06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e08:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e0c:	930a      	str	r3, [sp, #40]	; 0x28
 8007e0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e10:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8007e12:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007e14:	f001 fd66 	bl	80098e4 <st_int8_copy>
 8007e18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f000 811a 	beq.w	8008054 <forward_lite_conv2d_if32of32wf32+0x340>
 8007e20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e22:	ecf3 1a01 	vldmia	r3!, {s3}
 8007e26:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e28:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 80e6 	beq.w	8007ffc <forward_lite_conv2d_if32of32wf32+0x2e8>
 8007e30:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e36:	9302      	str	r3, [sp, #8]
 8007e38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e3a:	9303      	str	r3, [sp, #12]
 8007e3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e3e:	9301      	str	r3, [sp, #4]
 8007e40:	2300      	movs	r3, #0
 8007e42:	9304      	str	r3, [sp, #16]
 8007e44:	9b01      	ldr	r3, [sp, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f2c0 80fe 	blt.w	8008048 <forward_lite_conv2d_if32of32wf32+0x334>
 8007e4c:	9902      	ldr	r1, [sp, #8]
 8007e4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e50:	2600      	movs	r6, #0
 8007e52:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8007e54:	9807      	ldr	r0, [sp, #28]
 8007e56:	9c00      	ldr	r4, [sp, #0]
 8007e58:	fb00 3202 	mla	r2, r0, r2, r3
 8007e5c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8007e5e:	4423      	add	r3, r4
 8007e60:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 8007e62:	42a3      	cmp	r3, r4
 8007e64:	bf94      	ite	ls
 8007e66:	ebc6 0603 	rsbls	r6, r6, r3
 8007e6a:	ebc6 0604 	rsbhi	r6, r6, r4
 8007e6e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8007e70:	eba3 0a06 	sub.w	sl, r3, r6
 8007e74:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8007e76:	f1bb 0f00 	cmp.w	fp, #0
 8007e7a:	eba4 0906 	sub.w	r9, r4, r6
 8007e7e:	eeb0 7a61 	vmov.f32	s14, s3
 8007e82:	fb03 f606 	mul.w	r6, r3, r6
 8007e86:	f340 80a1 	ble.w	8007fcc <forward_lite_conv2d_if32of32wf32+0x2b8>
 8007e8a:	f026 070f 	bic.w	r7, r6, #15
 8007e8e:	f107 38ff 	add.w	r8, r7, #4294967295
 8007e92:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8007e96:	f108 0801 	add.w	r8, r8, #1
 8007e9a:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 8007e9e:	fb00 fa0a 	mul.w	sl, r0, sl
 8007ea2:	fb00 f909 	mul.w	r9, r0, r9
 8007ea6:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8007eaa:	f04f 0c00 	mov.w	ip, #0
 8007eae:	2f00      	cmp	r7, #0
 8007eb0:	bfd8      	it	le
 8007eb2:	2000      	movle	r0, #0
 8007eb4:	dd70      	ble.n	8007f98 <forward_lite_conv2d_if32of32wf32+0x284>
 8007eb6:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8007eba:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8007ebe:	2400      	movs	r4, #0
 8007ec0:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8007ec4:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8007ec8:	ed10 6a10 	vldr	s12, [r0, #-64]	; 0xffffffc0
 8007ecc:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8007ed0:	ed50 4a0d 	vldr	s9, [r0, #-52]	; 0xffffffcc
 8007ed4:	ed10 5a0c 	vldr	s10, [r0, #-48]	; 0xffffffd0
 8007ed8:	ed10 3a0a 	vldr	s6, [r0, #-40]	; 0xffffffd8
 8007edc:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8007ee0:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 8007ee4:	ed50 0a06 	vldr	s1, [r0, #-24]	; 0xffffffe8
 8007ee8:	ed13 1a06 	vldr	s2, [r3, #-24]	; 0xffffffe8
 8007eec:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
 8007ef0:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8007ef4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007ef8:	ed50 5a0e 	vldr	s11, [r0, #-56]	; 0xffffffc8
 8007efc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007f00:	3410      	adds	r4, #16
 8007f02:	42bc      	cmp	r4, r7
 8007f04:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8007f08:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8007f0c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007f10:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8007f14:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8007f18:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8007f1c:	ed10 6a1b 	vldr	s12, [r0, #-108]	; 0xffffff94
 8007f20:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8007f24:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8007f28:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8007f2c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007f30:	ed10 5a18 	vldr	s10, [r0, #-96]	; 0xffffffa0
 8007f34:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8007f38:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007f3c:	ed10 6a17 	vldr	s12, [r0, #-92]	; 0xffffffa4
 8007f40:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8007f44:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007f48:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 8007f4c:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8007f50:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007f54:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 8007f58:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8007f5c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007f60:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 8007f64:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8007f68:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007f6c:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 8007f70:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8007f74:	eee0 7a81 	vfma.f32	s15, s1, s2
 8007f78:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007f7c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007f80:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007f84:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007f88:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007f8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f90:	db96      	blt.n	8007ec0 <forward_lite_conv2d_if32of32wf32+0x1ac>
 8007f92:	4471      	add	r1, lr
 8007f94:	4472      	add	r2, lr
 8007f96:	4640      	mov	r0, r8
 8007f98:	4286      	cmp	r6, r0
 8007f9a:	dd10      	ble.n	8007fbe <forward_lite_conv2d_if32of32wf32+0x2aa>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	460d      	mov	r5, r1
 8007fa0:	4614      	mov	r4, r2
 8007fa2:	ecf4 6a01 	vldmia	r4!, {s13}
 8007fa6:	ecf5 7a01 	vldmia	r5!, {s15}
 8007faa:	3301      	adds	r3, #1
 8007fac:	429e      	cmp	r6, r3
 8007fae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007fb2:	d1f6      	bne.n	8007fa2 <forward_lite_conv2d_if32of32wf32+0x28e>
 8007fb4:	1a30      	subs	r0, r6, r0
 8007fb6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8007fba:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8007fbe:	f10c 0c01 	add.w	ip, ip, #1
 8007fc2:	45e3      	cmp	fp, ip
 8007fc4:	4451      	add	r1, sl
 8007fc6:	444a      	add	r2, r9
 8007fc8:	f47f af71 	bne.w	8007eae <forward_lite_conv2d_if32of32wf32+0x19a>
 8007fcc:	9901      	ldr	r1, [sp, #4]
 8007fce:	9808      	ldr	r0, [sp, #32]
 8007fd0:	9a03      	ldr	r2, [sp, #12]
 8007fd2:	9b04      	ldr	r3, [sp, #16]
 8007fd4:	ed82 7a00 	vstr	s14, [r2]
 8007fd8:	4401      	add	r1, r0
 8007fda:	9101      	str	r1, [sp, #4]
 8007fdc:	9905      	ldr	r1, [sp, #20]
 8007fde:	440a      	add	r2, r1
 8007fe0:	9203      	str	r2, [sp, #12]
 8007fe2:	9a00      	ldr	r2, [sp, #0]
 8007fe4:	9906      	ldr	r1, [sp, #24]
 8007fe6:	1a12      	subs	r2, r2, r0
 8007fe8:	9200      	str	r2, [sp, #0]
 8007fea:	9a02      	ldr	r2, [sp, #8]
 8007fec:	440a      	add	r2, r1
 8007fee:	9202      	str	r2, [sp, #8]
 8007ff0:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	9304      	str	r3, [sp, #16]
 8007ff8:	f47f af24 	bne.w	8007e44 <forward_lite_conv2d_if32of32wf32+0x130>
 8007ffc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ffe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008000:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008002:	440a      	add	r2, r1
 8008004:	920a      	str	r2, [sp, #40]	; 0x28
 8008006:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008008:	3304      	adds	r3, #4
 800800a:	4293      	cmp	r3, r2
 800800c:	9310      	str	r3, [sp, #64]	; 0x40
 800800e:	f4ff aefe 	bcc.w	8007e0e <forward_lite_conv2d_if32of32wf32+0xfa>
 8008012:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008014:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008016:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008018:	440a      	add	r2, r1
 800801a:	920c      	str	r2, [sp, #48]	; 0x30
 800801c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800801e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008020:	440a      	add	r2, r1
 8008022:	9211      	str	r2, [sp, #68]	; 0x44
 8008024:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008026:	1a52      	subs	r2, r2, r1
 8008028:	920d      	str	r2, [sp, #52]	; 0x34
 800802a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800802c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800802e:	440a      	add	r2, r1
 8008030:	9212      	str	r2, [sp, #72]	; 0x48
 8008032:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8008034:	3301      	adds	r3, #1
 8008036:	429a      	cmp	r2, r3
 8008038:	9314      	str	r3, [sp, #80]	; 0x50
 800803a:	f47f aeb9 	bne.w	8007db0 <forward_lite_conv2d_if32of32wf32+0x9c>
 800803e:	b021      	add	sp, #132	; 0x84
 8008040:	ecbd 8b02 	vpop	{d8}
 8008044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008048:	9a00      	ldr	r2, [sp, #0]
 800804a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800804c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800804e:	4616      	mov	r6, r2
 8008050:	189a      	adds	r2, r3, r2
 8008052:	e6fe      	b.n	8007e52 <forward_lite_conv2d_if32of32wf32+0x13e>
 8008054:	eef0 1a48 	vmov.f32	s3, s16
 8008058:	e6e6      	b.n	8007e28 <forward_lite_conv2d_if32of32wf32+0x114>
 800805a:	bf00      	nop
 800805c:	00000000 	.word	0x00000000
 8008060:	9a05      	ldr	r2, [sp, #20]
 8008062:	188a      	adds	r2, r1, r2
 8008064:	4291      	cmp	r1, r2
 8008066:	921b      	str	r2, [sp, #108]	; 0x6c
 8008068:	d2d3      	bcs.n	8008012 <forward_lite_conv2d_if32of32wf32+0x2fe>
 800806a:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 800806c:	fb02 f303 	mul.w	r3, r2, r3
 8008070:	930a      	str	r3, [sp, #40]	; 0x28
 8008072:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008074:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008076:	4413      	add	r3, r2
 8008078:	931d      	str	r3, [sp, #116]	; 0x74
 800807a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800807c:	9310      	str	r3, [sp, #64]	; 0x40
 800807e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008080:	9313      	str	r3, [sp, #76]	; 0x4c
 8008082:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008084:	9309      	str	r3, [sp, #36]	; 0x24
 8008086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 80fc 	beq.w	8008286 <forward_lite_conv2d_if32of32wf32+0x572>
 800808e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008090:	ecf3 1a01 	vldmia	r3!, {s3}
 8008094:	9313      	str	r3, [sp, #76]	; 0x4c
 8008096:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 80e5 	beq.w	8008268 <forward_lite_conv2d_if32of32wf32+0x554>
 800809e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80080a4:	9302      	str	r3, [sp, #8]
 80080a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080a8:	9303      	str	r3, [sp, #12]
 80080aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080ac:	9301      	str	r3, [sp, #4]
 80080ae:	2300      	movs	r3, #0
 80080b0:	9304      	str	r3, [sp, #16]
 80080b2:	9b01      	ldr	r3, [sp, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f2c0 80e9 	blt.w	800828c <forward_lite_conv2d_if32of32wf32+0x578>
 80080ba:	9a02      	ldr	r2, [sp, #8]
 80080bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080be:	2400      	movs	r4, #0
 80080c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080c2:	9807      	ldr	r0, [sp, #28]
 80080c4:	9d00      	ldr	r5, [sp, #0]
 80080c6:	fb03 1300 	mla	r3, r3, r0, r1
 80080ca:	992f      	ldr	r1, [sp, #188]	; 0xbc
 80080cc:	4429      	add	r1, r5
 80080ce:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 80080d0:	42a9      	cmp	r1, r5
 80080d2:	bf94      	ite	ls
 80080d4:	ebc4 0401 	rsbls	r4, r4, r1
 80080d8:	ebc4 0405 	rsbhi	r4, r4, r5
 80080dc:	992f      	ldr	r1, [sp, #188]	; 0xbc
 80080de:	eba1 0a04 	sub.w	sl, r1, r4
 80080e2:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80080e4:	f1bb 0f00 	cmp.w	fp, #0
 80080e8:	eba5 0904 	sub.w	r9, r5, r4
 80080ec:	eeb0 7a61 	vmov.f32	s14, s3
 80080f0:	fb01 f404 	mul.w	r4, r1, r4
 80080f4:	f340 80a0 	ble.w	8008238 <forward_lite_conv2d_if32of32wf32+0x524>
 80080f8:	f024 0c0f 	bic.w	ip, r4, #15
 80080fc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8008100:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8008104:	f108 0801 	add.w	r8, r8, #1
 8008108:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 800810c:	fb00 fa0a 	mul.w	sl, r0, sl
 8008110:	fb00 f909 	mul.w	r9, r0, r9
 8008114:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8008118:	2700      	movs	r7, #0
 800811a:	f1bc 0f00 	cmp.w	ip, #0
 800811e:	bfd8      	it	le
 8008120:	2100      	movle	r1, #0
 8008122:	dd70      	ble.n	8008206 <forward_lite_conv2d_if32of32wf32+0x4f2>
 8008124:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8008128:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800812c:	2500      	movs	r5, #0
 800812e:	ed51 5a0f 	vldr	s11, [r1, #-60]	; 0xffffffc4
 8008132:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8008136:	ed10 6a10 	vldr	s12, [r0, #-64]	; 0xffffffc0
 800813a:	ed51 6a10 	vldr	s13, [r1, #-64]	; 0xffffffc0
 800813e:	ed50 4a0d 	vldr	s9, [r0, #-52]	; 0xffffffcc
 8008142:	ed10 5a0c 	vldr	s10, [r0, #-48]	; 0xffffffd0
 8008146:	ed10 3a0a 	vldr	s6, [r0, #-40]	; 0xffffffd8
 800814a:	ed51 3a0a 	vldr	s7, [r1, #-40]	; 0xffffffd8
 800814e:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 8008152:	ed50 0a06 	vldr	s1, [r0, #-24]	; 0xffffffe8
 8008156:	ed11 1a06 	vldr	s2, [r1, #-24]	; 0xffffffe8
 800815a:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
 800815e:	ed51 2a05 	vldr	s5, [r1, #-20]	; 0xffffffec
 8008162:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008166:	ed50 5a0e 	vldr	s11, [r0, #-56]	; 0xffffffc8
 800816a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800816e:	3510      	adds	r5, #16
 8008170:	4565      	cmp	r5, ip
 8008172:	ed11 6a0e 	vldr	s12, [r1, #-56]	; 0xffffffc8
 8008176:	ed51 6a0d 	vldr	s13, [r1, #-52]	; 0xffffffcc
 800817a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800817e:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8008182:	f101 0140 	add.w	r1, r1, #64	; 0x40
 8008186:	ed51 5a1c 	vldr	s11, [r1, #-112]	; 0xffffff90
 800818a:	ed10 6a1b 	vldr	s12, [r0, #-108]	; 0xffffff94
 800818e:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8008192:	ed51 6a1b 	vldr	s13, [r1, #-108]	; 0xffffff94
 8008196:	ed51 4a19 	vldr	s9, [r1, #-100]	; 0xffffff9c
 800819a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800819e:	ed10 5a18 	vldr	s10, [r0, #-96]	; 0xffffffa0
 80081a2:	ed51 5a18 	vldr	s11, [r1, #-96]	; 0xffffffa0
 80081a6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80081aa:	ed10 6a17 	vldr	s12, [r0, #-92]	; 0xffffffa4
 80081ae:	ed51 6a17 	vldr	s13, [r1, #-92]	; 0xffffffa4
 80081b2:	eee3 7a23 	vfma.f32	s15, s6, s7
 80081b6:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 80081ba:	ed51 3a14 	vldr	s7, [r1, #-80]	; 0xffffffb0
 80081be:	eee4 7a24 	vfma.f32	s15, s8, s9
 80081c2:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 80081c6:	ed51 4a13 	vldr	s9, [r1, #-76]	; 0xffffffb4
 80081ca:	eee5 7a25 	vfma.f32	s15, s10, s11
 80081ce:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 80081d2:	ed51 5a12 	vldr	s11, [r1, #-72]	; 0xffffffb8
 80081d6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80081da:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 80081de:	ed51 6a11 	vldr	s13, [r1, #-68]	; 0xffffffbc
 80081e2:	eee0 7a81 	vfma.f32	s15, s1, s2
 80081e6:	eee2 7a22 	vfma.f32	s15, s4, s5
 80081ea:	eee3 7a23 	vfma.f32	s15, s6, s7
 80081ee:	eee4 7a24 	vfma.f32	s15, s8, s9
 80081f2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80081f6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80081fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80081fe:	db96      	blt.n	800812e <forward_lite_conv2d_if32of32wf32+0x41a>
 8008200:	4472      	add	r2, lr
 8008202:	4473      	add	r3, lr
 8008204:	4641      	mov	r1, r8
 8008206:	428c      	cmp	r4, r1
 8008208:	dd10      	ble.n	800822c <forward_lite_conv2d_if32of32wf32+0x518>
 800820a:	4608      	mov	r0, r1
 800820c:	4616      	mov	r6, r2
 800820e:	461d      	mov	r5, r3
 8008210:	ecf5 6a01 	vldmia	r5!, {s13}
 8008214:	ecf6 7a01 	vldmia	r6!, {s15}
 8008218:	3001      	adds	r0, #1
 800821a:	4284      	cmp	r4, r0
 800821c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008220:	d1f6      	bne.n	8008210 <forward_lite_conv2d_if32of32wf32+0x4fc>
 8008222:	1a61      	subs	r1, r4, r1
 8008224:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8008228:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800822c:	3701      	adds	r7, #1
 800822e:	45bb      	cmp	fp, r7
 8008230:	4452      	add	r2, sl
 8008232:	444b      	add	r3, r9
 8008234:	f47f af71 	bne.w	800811a <forward_lite_conv2d_if32of32wf32+0x406>
 8008238:	9901      	ldr	r1, [sp, #4]
 800823a:	9808      	ldr	r0, [sp, #32]
 800823c:	9a03      	ldr	r2, [sp, #12]
 800823e:	9b04      	ldr	r3, [sp, #16]
 8008240:	ed82 7a00 	vstr	s14, [r2]
 8008244:	4401      	add	r1, r0
 8008246:	9101      	str	r1, [sp, #4]
 8008248:	9905      	ldr	r1, [sp, #20]
 800824a:	440a      	add	r2, r1
 800824c:	9203      	str	r2, [sp, #12]
 800824e:	9a00      	ldr	r2, [sp, #0]
 8008250:	9906      	ldr	r1, [sp, #24]
 8008252:	1a12      	subs	r2, r2, r0
 8008254:	9200      	str	r2, [sp, #0]
 8008256:	9a02      	ldr	r2, [sp, #8]
 8008258:	440a      	add	r2, r1
 800825a:	9202      	str	r2, [sp, #8]
 800825c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800825e:	3301      	adds	r3, #1
 8008260:	429a      	cmp	r2, r3
 8008262:	9304      	str	r3, [sp, #16]
 8008264:	f47f af25 	bne.w	80080b2 <forward_lite_conv2d_if32of32wf32+0x39e>
 8008268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800826a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800826c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800826e:	440a      	add	r2, r1
 8008270:	9209      	str	r2, [sp, #36]	; 0x24
 8008272:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008274:	3304      	adds	r3, #4
 8008276:	4293      	cmp	r3, r2
 8008278:	9310      	str	r3, [sp, #64]	; 0x40
 800827a:	f4bf aeca 	bcs.w	8008012 <forward_lite_conv2d_if32of32wf32+0x2fe>
 800827e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008280:	2b00      	cmp	r3, #0
 8008282:	f47f af04 	bne.w	800808e <forward_lite_conv2d_if32of32wf32+0x37a>
 8008286:	eef0 1a48 	vmov.f32	s3, s16
 800828a:	e704      	b.n	8008096 <forward_lite_conv2d_if32of32wf32+0x382>
 800828c:	9a00      	ldr	r2, [sp, #0]
 800828e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008290:	4614      	mov	r4, r2
 8008292:	4413      	add	r3, r2
 8008294:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008296:	e713      	b.n	80080c0 <forward_lite_conv2d_if32of32wf32+0x3ac>
 8008298:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800829a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800829c:	920b      	str	r2, [sp, #44]	; 0x2c
 800829e:	e58e      	b.n	8007dbe <forward_lite_conv2d_if32of32wf32+0xaa>

080082a0 <forward_lite_conv2d_if32of32wf32_pool>:
 80082a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a4:	ed2d 8b02 	vpush	{d8}
 80082a8:	b0c9      	sub	sp, #292	; 0x124
 80082aa:	4696      	mov	lr, r2
 80082ac:	f9bd 519c 	ldrsh.w	r5, [sp, #412]	; 0x19c
 80082b0:	9323      	str	r3, [sp, #140]	; 0x8c
 80082b2:	f9bd 31bc 	ldrsh.w	r3, [sp, #444]	; 0x1bc
 80082b6:	9137      	str	r1, [sp, #220]	; 0xdc
 80082b8:	f9bd 115c 	ldrsh.w	r1, [sp, #348]	; 0x15c
 80082bc:	9238      	str	r2, [sp, #224]	; 0xe0
 80082be:	fb05 f203 	mul.w	r2, r5, r3
 80082c2:	9129      	str	r1, [sp, #164]	; 0xa4
 80082c4:	460e      	mov	r6, r1
 80082c6:	fb01 f202 	mul.w	r2, r1, r2
 80082ca:	f9bd 1164 	ldrsh.w	r1, [sp, #356]	; 0x164
 80082ce:	f9bd 416c 	ldrsh.w	r4, [sp, #364]	; 0x16c
 80082d2:	f8bd c180 	ldrh.w	ip, [sp, #384]	; 0x180
 80082d6:	9142      	str	r1, [sp, #264]	; 0x108
 80082d8:	f9bd 1170 	ldrsh.w	r1, [sp, #368]	; 0x170
 80082dc:	f9bd 7160 	ldrsh.w	r7, [sp, #352]	; 0x160
 80082e0:	932d      	str	r3, [sp, #180]	; 0xb4
 80082e2:	942a      	str	r4, [sp, #168]	; 0xa8
 80082e4:	f9bd 3168 	ldrsh.w	r3, [sp, #360]	; 0x168
 80082e8:	f9bd 4158 	ldrsh.w	r4, [sp, #344]	; 0x158
 80082ec:	9113      	str	r1, [sp, #76]	; 0x4c
 80082ee:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 80082f2:	f8bd 1178 	ldrh.w	r1, [sp, #376]	; 0x178
 80082f6:	f8bd c184 	ldrh.w	ip, [sp, #388]	; 0x184
 80082fa:	9041      	str	r0, [sp, #260]	; 0x104
 80082fc:	9339      	str	r3, [sp, #228]	; 0xe4
 80082fe:	912b      	str	r1, [sp, #172]	; 0xac
 8008300:	f9bd 9174 	ldrsh.w	r9, [sp, #372]	; 0x174
 8008304:	950f      	str	r5, [sp, #60]	; 0x3c
 8008306:	4680      	mov	r8, r0
 8008308:	9418      	str	r4, [sp, #96]	; 0x60
 800830a:	f8bd 017c 	ldrh.w	r0, [sp, #380]	; 0x17c
 800830e:	9714      	str	r7, [sp, #80]	; 0x50
 8008310:	f8cd c0b0 	str.w	ip, [sp, #176]	; 0xb0
 8008314:	f9bd c188 	ldrsh.w	ip, [sp, #392]	; 0x188
 8008318:	f8cd c10c 	str.w	ip, [sp, #268]	; 0x10c
 800831c:	f9bd c1b8 	ldrsh.w	ip, [sp, #440]	; 0x1b8
 8008320:	f8cd c110 	str.w	ip, [sp, #272]	; 0x110
 8008324:	4243      	negs	r3, r0
 8008326:	f9bd c1c0 	ldrsh.w	ip, [sp, #448]	; 0x1c0
 800832a:	f8cd c114 	str.w	ip, [sp, #276]	; 0x114
 800832e:	931e      	str	r3, [sp, #120]	; 0x78
 8008330:	f9bd c1c4 	ldrsh.w	ip, [sp, #452]	; 0x1c4
 8008334:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8008336:	f8cd c0b8 	str.w	ip, [sp, #184]	; 0xb8
 800833a:	f9bd c1c8 	ldrsh.w	ip, [sp, #456]	; 0x1c8
 800833e:	f8cd c118 	str.w	ip, [sp, #280]	; 0x118
 8008342:	2b00      	cmp	r3, #0
 8008344:	f9bd c1cc 	ldrsh.w	ip, [sp, #460]	; 0x1cc
 8008348:	f9bd 11a0 	ldrsh.w	r1, [sp, #416]	; 0x1a0
 800834c:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 8008350:	f340 80a7 	ble.w	80084a2 <forward_lite_conv2d_if32of32wf32_pool+0x202>
 8008354:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008356:	ed9f 8a55 	vldr	s16, [pc, #340]	; 80084ac <forward_lite_conv2d_if32of32wf32_pool+0x20c>
 800835a:	fb03 f309 	mul.w	r3, r3, r9
 800835e:	fb04 f303 	mul.w	r3, r4, r3
 8008362:	3901      	subs	r1, #1
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	fa1f fc81 	uxth.w	ip, r1
 800836a:	4631      	mov	r1, r6
 800836c:	b2b6      	uxth	r6, r6
 800836e:	9324      	str	r3, [sp, #144]	; 0x90
 8008370:	1e73      	subs	r3, r6, #1
 8008372:	e9cd 0c20 	strd	r0, ip, [sp, #128]	; 0x80
 8008376:	b29b      	uxth	r3, r3
 8008378:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800837a:	963f      	str	r6, [sp, #252]	; 0xfc
 800837c:	3301      	adds	r3, #1
 800837e:	009e      	lsls	r6, r3, #2
 8008380:	fb00 f301 	mul.w	r3, r0, r1
 8008384:	fb05 f303 	mul.w	r3, r5, r3
 8008388:	0098      	lsls	r0, r3, #2
 800838a:	903d      	str	r0, [sp, #244]	; 0xf4
 800838c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800838e:	9635      	str	r6, [sp, #212]	; 0xd4
 8008390:	fb00 f307 	mul.w	r3, r0, r7
 8008394:	fb04 f303 	mul.w	r3, r4, r3
 8008398:	0098      	lsls	r0, r3, #2
 800839a:	9034      	str	r0, [sp, #208]	; 0xd0
 800839c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800839e:	0090      	lsls	r0, r2, #2
 80083a0:	9033      	str	r0, [sp, #204]	; 0xcc
 80083a2:	9854      	ldr	r0, [sp, #336]	; 0x150
 80083a4:	fb01 f303 	mul.w	r3, r1, r3
 80083a8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80083ac:	0098      	lsls	r0, r3, #2
 80083ae:	00a6      	lsls	r6, r4, #2
 80083b0:	903b      	str	r0, [sp, #236]	; 0xec
 80083b2:	981e      	ldr	r0, [sp, #120]	; 0x78
 80083b4:	9616      	str	r6, [sp, #88]	; 0x58
 80083b6:	fb07 f306 	mul.w	r3, r7, r6
 80083ba:	fb00 8703 	mla	r7, r0, r3, r8
 80083be:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80083c0:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80083c2:	9722      	str	r7, [sp, #136]	; 0x88
 80083c4:	425f      	negs	r7, r3
 80083c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083c8:	921f      	str	r2, [sp, #124]	; 0x7c
 80083ca:	fb05 f501 	mul.w	r5, r5, r1
 80083ce:	0089      	lsls	r1, r1, #2
 80083d0:	fb03 f304 	mul.w	r3, r3, r4
 80083d4:	9112      	str	r1, [sp, #72]	; 0x48
 80083d6:	4241      	negs	r1, r0
 80083d8:	009c      	lsls	r4, r3, #2
 80083da:	9125      	str	r1, [sp, #148]	; 0x94
 80083dc:	fb06 f107 	mul.w	r1, r6, r7
 80083e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80083e2:	9417      	str	r4, [sp, #92]	; 0x5c
 80083e4:	953c      	str	r5, [sp, #240]	; 0xf0
 80083e6:	2400      	movs	r4, #0
 80083e8:	9136      	str	r1, [sp, #216]	; 0xd8
 80083ea:	f10e 4578 	add.w	r5, lr, #4160749568	; 0xf8000000
 80083ee:	9954      	ldr	r1, [sp, #336]	; 0x150
 80083f0:	9731      	str	r7, [sp, #196]	; 0xc4
 80083f2:	9428      	str	r4, [sp, #160]	; 0xa0
 80083f4:	953a      	str	r5, [sp, #232]	; 0xe8
 80083f6:	911b      	str	r1, [sp, #108]	; 0x6c
 80083f8:	9332      	str	r3, [sp, #200]	; 0xc8
 80083fa:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
 80083fc:	932f      	str	r3, [sp, #188]	; 0xbc
 80083fe:	1e53      	subs	r3, r2, #1
 8008400:	9427      	str	r4, [sp, #156]	; 0x9c
 8008402:	9347      	str	r3, [sp, #284]	; 0x11c
 8008404:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008406:	3301      	adds	r3, #1
 8008408:	b21b      	sxth	r3, r3
 800840a:	2b00      	cmp	r3, #0
 800840c:	dc68      	bgt.n	80084e0 <forward_lite_conv2d_if32of32wf32_pool+0x240>
 800840e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008410:	041b      	lsls	r3, r3, #16
 8008412:	f100 81d4 	bmi.w	80087be <forward_lite_conv2d_if32of32wf32_pool+0x51e>
 8008416:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8008418:	981d      	ldr	r0, [sp, #116]	; 0x74
 800841a:	4282      	cmp	r2, r0
 800841c:	dc48      	bgt.n	80084b0 <forward_lite_conv2d_if32of32wf32_pool+0x210>
 800841e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008420:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8008422:	9108      	str	r1, [sp, #32]
 8008424:	3301      	adds	r3, #1
 8008426:	b21c      	sxth	r4, r3
 8008428:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800842a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800842c:	9e32      	ldr	r6, [sp, #200]	; 0xc8
 800842e:	9427      	str	r4, [sp, #156]	; 0x9c
 8008430:	18cb      	adds	r3, r1, r3
 8008432:	9337      	str	r3, [sp, #220]	; 0xdc
 8008434:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8008436:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008438:	440b      	add	r3, r1
 800843a:	931e      	str	r3, [sp, #120]	; 0x78
 800843c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800843e:	1a5b      	subs	r3, r3, r1
 8008440:	9320      	str	r3, [sp, #128]	; 0x80
 8008442:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8008444:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008446:	440b      	add	r3, r1
 8008448:	9322      	str	r3, [sp, #136]	; 0x88
 800844a:	b293      	uxth	r3, r2
 800844c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800844e:	9301      	str	r3, [sp, #4]
 8008450:	1a9b      	subs	r3, r3, r2
 8008452:	b29a      	uxth	r2, r3
 8008454:	b2bb      	uxth	r3, r7
 8008456:	1ac1      	subs	r1, r0, r3
 8008458:	9305      	str	r3, [sp, #20]
 800845a:	b20b      	sxth	r3, r1
 800845c:	931d      	str	r3, [sp, #116]	; 0x74
 800845e:	b2b3      	uxth	r3, r6
 8008460:	9303      	str	r3, [sp, #12]
 8008462:	2301      	movs	r3, #1
 8008464:	9307      	str	r3, [sp, #28]
 8008466:	f8bd 30e4 	ldrh.w	r3, [sp, #228]	; 0xe4
 800846a:	9306      	str	r3, [sp, #24]
 800846c:	f8bd 3114 	ldrh.w	r3, [sp, #276]	; 0x114
 8008470:	9304      	str	r3, [sp, #16]
 8008472:	f8bd 3118 	ldrh.w	r3, [sp, #280]	; 0x118
 8008476:	9302      	str	r3, [sp, #8]
 8008478:	f8bd 3110 	ldrh.w	r3, [sp, #272]	; 0x110
 800847c:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8008480:	9300      	str	r3, [sp, #0]
 8008482:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8008484:	9854      	ldr	r0, [sp, #336]	; 0x150
 8008486:	9d6d      	ldr	r5, [sp, #436]	; 0x1b4
 8008488:	47a8      	blx	r5
 800848a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800848c:	1bf3      	subs	r3, r6, r7
 800848e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008492:	b21b      	sxth	r3, r3
 8008494:	3a01      	subs	r2, #1
 8008496:	9332      	str	r3, [sp, #200]	; 0xc8
 8008498:	b293      	uxth	r3, r2
 800849a:	9321      	str	r3, [sp, #132]	; 0x84
 800849c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800849e:	42a3      	cmp	r3, r4
 80084a0:	dcb0      	bgt.n	8008404 <forward_lite_conv2d_if32of32wf32_pool+0x164>
 80084a2:	b049      	add	sp, #292	; 0x124
 80084a4:	ecbd 8b02 	vpop	{d8}
 80084a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ac:	00000000 	.word	0x00000000
 80084b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084b2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80084b4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80084b6:	3b01      	subs	r3, #1
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	9321      	str	r3, [sp, #132]	; 0x84
 80084bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80084be:	440a      	add	r2, r1
 80084c0:	1a5b      	subs	r3, r3, r1
 80084c2:	921e      	str	r2, [sp, #120]	; 0x78
 80084c4:	9320      	str	r3, [sp, #128]	; 0x80
 80084c6:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80084c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084ca:	4413      	add	r3, r2
 80084cc:	9322      	str	r3, [sp, #136]	; 0x88
 80084ce:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80084d0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80084d2:	4293      	cmp	r3, r2
 80084d4:	dde5      	ble.n	80084a2 <forward_lite_conv2d_if32of32wf32_pool+0x202>
 80084d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084d8:	3301      	adds	r3, #1
 80084da:	b21b      	sxth	r3, r3
 80084dc:	2b00      	cmp	r3, #0
 80084de:	dd96      	ble.n	800840e <forward_lite_conv2d_if32of32wf32_pool+0x16e>
 80084e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f2c0 82cc 	blt.w	8008a80 <forward_lite_conv2d_if32of32wf32_pool+0x7e0>
 80084e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084ea:	931c      	str	r3, [sp, #112]	; 0x70
 80084ec:	2300      	movs	r3, #0
 80084ee:	9920      	ldr	r1, [sp, #128]	; 0x80
 80084f0:	9a42      	ldr	r2, [sp, #264]	; 0x108
 80084f2:	440a      	add	r2, r1
 80084f4:	9943      	ldr	r1, [sp, #268]	; 0x10c
 80084f6:	428a      	cmp	r2, r1
 80084f8:	bfd4      	ite	le
 80084fa:	ebc3 0b02 	rsble	fp, r3, r2
 80084fe:	ebc3 0b01 	rsbgt	fp, r3, r1
 8008502:	9a55      	ldr	r2, [sp, #340]	; 0x154
 8008504:	2a00      	cmp	r2, #0
 8008506:	f000 819c 	beq.w	8008842 <forward_lite_conv2d_if32of32wf32_pool+0x5a2>
 800850a:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 800850c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8008510:	f0c0 8197 	bcc.w	8008842 <forward_lite_conv2d_if32of32wf32_pool+0x5a2>
 8008514:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8008516:	2a00      	cmp	r2, #0
 8008518:	f340 8117 	ble.w	800874a <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 800851c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800851e:	9936      	ldr	r1, [sp, #216]	; 0xd8
 8008520:	fb02 f303 	mul.w	r3, r2, r3
 8008524:	9319      	str	r3, [sp, #100]	; 0x64
 8008526:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8008528:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800852a:	9326      	str	r3, [sp, #152]	; 0x98
 800852c:	189a      	adds	r2, r3, r2
 800852e:	923e      	str	r2, [sp, #248]	; 0xf8
 8008530:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008532:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008534:	9330      	str	r3, [sp, #192]	; 0xc0
 8008536:	440a      	add	r2, r1
 8008538:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800853a:	9240      	str	r2, [sp, #256]	; 0x100
 800853c:	931a      	str	r3, [sp, #104]	; 0x68
 800853e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008540:	9955      	ldr	r1, [sp, #340]	; 0x154
 8008542:	981a      	ldr	r0, [sp, #104]	; 0x68
 8008544:	f001 f9ce 	bl	80098e4 <st_int8_copy>
 8008548:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 8134 	beq.w	80087b8 <forward_lite_conv2d_if32of32wf32_pool+0x518>
 8008550:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8008552:	ecf3 1a01 	vldmia	r3!, {s3}
 8008556:	9330      	str	r3, [sp, #192]	; 0xc0
 8008558:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800855a:	2b00      	cmp	r3, #0
 800855c:	f000 80ea 	beq.w	8008734 <forward_lite_conv2d_if32of32wf32_pool+0x494>
 8008560:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8008562:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008564:	189a      	adds	r2, r3, r2
 8008566:	920c      	str	r2, [sp, #48]	; 0x30
 8008568:	9a40      	ldr	r2, [sp, #256]	; 0x100
 800856a:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
 800856e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008570:	9310      	str	r3, [sp, #64]	; 0x40
 8008572:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8008574:	930b      	str	r3, [sp, #44]	; 0x2c
 8008576:	2300      	movs	r3, #0
 8008578:	9311      	str	r3, [sp, #68]	; 0x44
 800857a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800857c:	2b00      	cmp	r3, #0
 800857e:	f2c0 8115 	blt.w	80087ac <forward_lite_conv2d_if32of32wf32_pool+0x50c>
 8008582:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008584:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008586:	2600      	movs	r6, #0
 8008588:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800858a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800858c:	9c55      	ldr	r4, [sp, #340]	; 0x154
 800858e:	4298      	cmp	r0, r3
 8008590:	bf94      	ite	ls
 8008592:	ebc6 0600 	rsbls	r6, r6, r0
 8008596:	ebc6 0603 	rsbhi	r6, r6, r3
 800859a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800859c:	eba0 0906 	sub.w	r9, r0, r6
 80085a0:	fb02 4203 	mla	r2, r2, r3, r4
 80085a4:	9818      	ldr	r0, [sp, #96]	; 0x60
 80085a6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80085a8:	f1bb 0f00 	cmp.w	fp, #0
 80085ac:	eba4 0a06 	sub.w	sl, r4, r6
 80085b0:	eeb0 7a61 	vmov.f32	s14, s3
 80085b4:	fb00 f606 	mul.w	r6, r0, r6
 80085b8:	f340 80a1 	ble.w	80086fe <forward_lite_conv2d_if32of32wf32_pool+0x45e>
 80085bc:	f026 070f 	bic.w	r7, r6, #15
 80085c0:	f107 38ff 	add.w	r8, r7, #4294967295
 80085c4:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80085c8:	f108 0801 	add.w	r8, r8, #1
 80085cc:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 80085d0:	fb0a fa03 	mul.w	sl, sl, r3
 80085d4:	fb09 f903 	mul.w	r9, r9, r3
 80085d8:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80085dc:	f04f 0c00 	mov.w	ip, #0
 80085e0:	2f00      	cmp	r7, #0
 80085e2:	bfd8      	it	le
 80085e4:	2500      	movle	r5, #0
 80085e6:	dd70      	ble.n	80086ca <forward_lite_conv2d_if32of32wf32_pool+0x42a>
 80085e8:	f101 0040 	add.w	r0, r1, #64	; 0x40
 80085ec:	f102 0340 	add.w	r3, r2, #64	; 0x40
 80085f0:	2400      	movs	r4, #0
 80085f2:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 80085f6:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 80085fa:	ed10 6a10 	vldr	s12, [r0, #-64]	; 0xffffffc0
 80085fe:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8008602:	ed50 4a0d 	vldr	s9, [r0, #-52]	; 0xffffffcc
 8008606:	ed10 5a0c 	vldr	s10, [r0, #-48]	; 0xffffffd0
 800860a:	ed10 3a0a 	vldr	s6, [r0, #-40]	; 0xffffffd8
 800860e:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8008612:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 8008616:	ed50 0a06 	vldr	s1, [r0, #-24]	; 0xffffffe8
 800861a:	ed13 1a06 	vldr	s2, [r3, #-24]	; 0xffffffe8
 800861e:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
 8008622:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8008626:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800862a:	ed50 5a0e 	vldr	s11, [r0, #-56]	; 0xffffffc8
 800862e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008632:	3410      	adds	r4, #16
 8008634:	42bc      	cmp	r4, r7
 8008636:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 800863a:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 800863e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008642:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8008646:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800864a:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 800864e:	ed10 6a1b 	vldr	s12, [r0, #-108]	; 0xffffff94
 8008652:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8008656:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 800865a:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 800865e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008662:	ed10 5a18 	vldr	s10, [r0, #-96]	; 0xffffffa0
 8008666:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 800866a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800866e:	ed10 6a17 	vldr	s12, [r0, #-92]	; 0xffffffa4
 8008672:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8008676:	eee3 7a23 	vfma.f32	s15, s6, s7
 800867a:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 800867e:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8008682:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008686:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 800868a:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 800868e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008692:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 8008696:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 800869a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800869e:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 80086a2:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 80086a6:	eee0 7a81 	vfma.f32	s15, s1, s2
 80086aa:	eee2 7a22 	vfma.f32	s15, s4, s5
 80086ae:	eee3 7a23 	vfma.f32	s15, s6, s7
 80086b2:	eee4 7a24 	vfma.f32	s15, s8, s9
 80086b6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80086ba:	eee6 7a26 	vfma.f32	s15, s12, s13
 80086be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80086c2:	db96      	blt.n	80085f2 <forward_lite_conv2d_if32of32wf32_pool+0x352>
 80086c4:	4471      	add	r1, lr
 80086c6:	4472      	add	r2, lr
 80086c8:	4645      	mov	r5, r8
 80086ca:	42ae      	cmp	r6, r5
 80086cc:	dd10      	ble.n	80086f0 <forward_lite_conv2d_if32of32wf32_pool+0x450>
 80086ce:	462b      	mov	r3, r5
 80086d0:	460c      	mov	r4, r1
 80086d2:	4610      	mov	r0, r2
 80086d4:	ecf0 6a01 	vldmia	r0!, {s13}
 80086d8:	ecf4 7a01 	vldmia	r4!, {s15}
 80086dc:	3301      	adds	r3, #1
 80086de:	429e      	cmp	r6, r3
 80086e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80086e4:	d1f6      	bne.n	80086d4 <forward_lite_conv2d_if32of32wf32_pool+0x434>
 80086e6:	1b75      	subs	r5, r6, r5
 80086e8:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80086ec:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80086f0:	f10c 0c01 	add.w	ip, ip, #1
 80086f4:	45e3      	cmp	fp, ip
 80086f6:	4451      	add	r1, sl
 80086f8:	444a      	add	r2, r9
 80086fa:	f47f af71 	bne.w	80085e0 <forward_lite_conv2d_if32of32wf32_pool+0x340>
 80086fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008700:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008702:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008704:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008706:	ed81 7a00 	vstr	s14, [r1]
 800870a:	4410      	add	r0, r2
 800870c:	900b      	str	r0, [sp, #44]	; 0x2c
 800870e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008710:	4401      	add	r1, r0
 8008712:	9110      	str	r1, [sp, #64]	; 0x40
 8008714:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008716:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008718:	1a89      	subs	r1, r1, r2
 800871a:	910e      	str	r1, [sp, #56]	; 0x38
 800871c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800871e:	4401      	add	r1, r0
 8008720:	910d      	str	r1, [sp, #52]	; 0x34
 8008722:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008724:	1a8a      	subs	r2, r1, r2
 8008726:	920c      	str	r2, [sp, #48]	; 0x30
 8008728:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800872a:	3301      	adds	r3, #1
 800872c:	429a      	cmp	r2, r3
 800872e:	9311      	str	r3, [sp, #68]	; 0x44
 8008730:	f47f af23 	bne.w	800857a <forward_lite_conv2d_if32of32wf32_pool+0x2da>
 8008734:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008736:	9924      	ldr	r1, [sp, #144]	; 0x90
 8008738:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800873a:	440a      	add	r2, r1
 800873c:	921a      	str	r2, [sp, #104]	; 0x68
 800873e:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8008740:	3304      	adds	r3, #4
 8008742:	4293      	cmp	r3, r2
 8008744:	9326      	str	r3, [sp, #152]	; 0x98
 8008746:	f47f aefa 	bne.w	800853e <forward_lite_conv2d_if32of32wf32_pool+0x29e>
 800874a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800874c:	2b00      	cmp	r3, #0
 800874e:	dd28      	ble.n	80087a2 <forward_lite_conv2d_if32of32wf32_pool+0x502>
 8008750:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 8008752:	2b00      	cmp	r3, #0
 8008754:	f000 8198 	beq.w	8008a88 <forward_lite_conv2d_if32of32wf32_pool+0x7e8>
 8008758:	e9dd 6a6a 	ldrd	r6, sl, [sp, #424]	; 0x1a8
 800875c:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
 800875e:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 8008762:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 8008764:	f8dd b1b0 	ldr.w	fp, [sp, #432]	; 0x1b0
 8008768:	4699      	mov	r9, r3
 800876a:	2400      	movs	r4, #0
 800876c:	462b      	mov	r3, r5
 800876e:	463a      	mov	r2, r7
 8008770:	4455      	add	r5, sl
 8008772:	4641      	mov	r1, r8
 8008774:	4640      	mov	r0, r8
 8008776:	47c8      	blx	r9
 8008778:	1bab      	subs	r3, r5, r6
 800877a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800877c:	455b      	cmp	r3, fp
 800877e:	bfa8      	it	ge
 8008780:	4635      	movge	r5, r6
 8008782:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008784:	4490      	add	r8, r2
 8008786:	4543      	cmp	r3, r8
 8008788:	bf98      	it	ls
 800878a:	9b25      	ldrls	r3, [sp, #148]	; 0x94
 800878c:	f104 0401 	add.w	r4, r4, #1
 8008790:	bf98      	it	ls
 8008792:	4498      	addls	r8, r3
 8008794:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008796:	b224      	sxth	r4, r4
 8008798:	42a3      	cmp	r3, r4
 800879a:	d1e7      	bne.n	800876c <forward_lite_conv2d_if32of32wf32_pool+0x4cc>
 800879c:	952f      	str	r5, [sp, #188]	; 0xbc
 800879e:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
 80087a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80087a4:	3301      	adds	r3, #1
 80087a6:	b21b      	sxth	r3, r3
 80087a8:	931d      	str	r3, [sp, #116]	; 0x74
 80087aa:	e634      	b.n	8008416 <forward_lite_conv2d_if32of32wf32_pool+0x176>
 80087ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80087b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80087b2:	4616      	mov	r6, r2
 80087b4:	189a      	adds	r2, r3, r2
 80087b6:	e6e7      	b.n	8008588 <forward_lite_conv2d_if32of32wf32_pool+0x2e8>
 80087b8:	eef0 1a48 	vmov.f32	s3, s16
 80087bc:	e6cc      	b.n	8008558 <forward_lite_conv2d_if32of32wf32_pool+0x2b8>
 80087be:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 80087c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80087c2:	fb02 f303 	mul.w	r3, r2, r3
 80087c6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80087c8:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 80087cc:	9a54      	ldr	r2, [sp, #336]	; 0x150
 80087ce:	429a      	cmp	r2, r3
 80087d0:	bf84      	itt	hi
 80087d2:	9a33      	ldrhi	r2, [sp, #204]	; 0xcc
 80087d4:	189b      	addhi	r3, r3, r2
 80087d6:	9a54      	ldr	r2, [sp, #336]	; 0x150
 80087d8:	429a      	cmp	r2, r3
 80087da:	d217      	bcs.n	800880c <forward_lite_conv2d_if32of32wf32_pool+0x56c>
 80087dc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80087de:	991d      	ldr	r1, [sp, #116]	; 0x74
 80087e0:	428a      	cmp	r2, r1
 80087e2:	d013      	beq.n	800880c <forward_lite_conv2d_if32of32wf32_pool+0x56c>
 80087e4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d910      	bls.n	800880c <forward_lite_conv2d_if32of32wf32_pool+0x56c>
 80087ea:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80087ec:	461a      	mov	r2, r3
 80087ee:	f852 0b04 	ldr.w	r0, [r2], #4
 80087f2:	f841 0b04 	str.w	r0, [r1], #4
 80087f6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80087f8:	4290      	cmp	r0, r2
 80087fa:	d8f8      	bhi.n	80087ee <forward_lite_conv2d_if32of32wf32_pool+0x54e>
 80087fc:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	f023 0303 	bic.w	r3, r3, #3
 8008804:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008806:	3304      	adds	r3, #4
 8008808:	441a      	add	r2, r3
 800880a:	921b      	str	r2, [sp, #108]	; 0x6c
 800880c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800880e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8008810:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
 8008814:	983d      	ldr	r0, [sp, #244]	; 0xf4
 8008816:	440a      	add	r2, r1
 8008818:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800881a:	1ad2      	subs	r2, r2, r3
 800881c:	b212      	sxth	r2, r2
 800881e:	440b      	add	r3, r1
 8008820:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8008822:	9228      	str	r2, [sp, #160]	; 0xa0
 8008824:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008826:	4401      	add	r1, r0
 8008828:	b21b      	sxth	r3, r3
 800882a:	428a      	cmp	r2, r1
 800882c:	931d      	str	r3, [sp, #116]	; 0x74
 800882e:	911b      	str	r1, [sp, #108]	; 0x6c
 8008830:	460b      	mov	r3, r1
 8008832:	f63f adf0 	bhi.w	8008416 <forward_lite_conv2d_if32of32wf32_pool+0x176>
 8008836:	9925      	ldr	r1, [sp, #148]	; 0x94
 8008838:	440b      	add	r3, r1
 800883a:	429a      	cmp	r2, r3
 800883c:	d9fc      	bls.n	8008838 <forward_lite_conv2d_if32of32wf32_pool+0x598>
 800883e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008840:	e5e9      	b.n	8008416 <forward_lite_conv2d_if32of32wf32_pool+0x176>
 8008842:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8008844:	2a00      	cmp	r2, #0
 8008846:	dd80      	ble.n	800874a <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 8008848:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800884a:	9936      	ldr	r1, [sp, #216]	; 0xd8
 800884c:	fb02 f303 	mul.w	r3, r2, r3
 8008850:	931a      	str	r3, [sp, #104]	; 0x68
 8008852:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8008854:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008856:	9326      	str	r3, [sp, #152]	; 0x98
 8008858:	189a      	adds	r2, r3, r2
 800885a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800885c:	923e      	str	r2, [sp, #248]	; 0xf8
 800885e:	9330      	str	r3, [sp, #192]	; 0xc0
 8008860:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008862:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8008864:	9319      	str	r3, [sp, #100]	; 0x64
 8008866:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008868:	440a      	add	r2, r1
 800886a:	9240      	str	r2, [sp, #256]	; 0x100
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 80fe 	beq.w	8008a6e <forward_lite_conv2d_if32of32wf32_pool+0x7ce>
 8008872:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8008874:	ecf3 1a01 	vldmia	r3!, {s3}
 8008878:	9330      	str	r3, [sp, #192]	; 0xc0
 800887a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 80e7 	beq.w	8008a50 <forward_lite_conv2d_if32of32wf32_pool+0x7b0>
 8008882:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8008884:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008886:	189a      	adds	r2, r3, r2
 8008888:	920c      	str	r2, [sp, #48]	; 0x30
 800888a:	9a40      	ldr	r2, [sp, #256]	; 0x100
 800888c:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
 8008890:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008892:	9310      	str	r3, [sp, #64]	; 0x40
 8008894:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8008896:	930b      	str	r3, [sp, #44]	; 0x2c
 8008898:	2300      	movs	r3, #0
 800889a:	9311      	str	r3, [sp, #68]	; 0x44
 800889c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f2c0 80e8 	blt.w	8008a74 <forward_lite_conv2d_if32of32wf32_pool+0x7d4>
 80088a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088a6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80088a8:	2000      	movs	r0, #0
 80088aa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80088ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80088ae:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80088b0:	428c      	cmp	r4, r1
 80088b2:	bf94      	ite	ls
 80088b4:	ebc0 0004 	rsbls	r0, r0, r4
 80088b8:	ebc0 0001 	rsbhi	r0, r0, r1
 80088bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80088be:	eba4 0900 	sub.w	r9, r4, r0
 80088c2:	fb03 5301 	mla	r3, r3, r1, r5
 80088c6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80088c8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80088ca:	f1bb 0f00 	cmp.w	fp, #0
 80088ce:	eba5 0a00 	sub.w	sl, r5, r0
 80088d2:	eeb0 7a61 	vmov.f32	s14, s3
 80088d6:	fb04 f000 	mul.w	r0, r4, r0
 80088da:	f340 809e 	ble.w	8008a1a <forward_lite_conv2d_if32of32wf32_pool+0x77a>
 80088de:	f020 080f 	bic.w	r8, r0, #15
 80088e2:	f108 37ff 	add.w	r7, r8, #4294967295
 80088e6:	093f      	lsrs	r7, r7, #4
 80088e8:	3701      	adds	r7, #1
 80088ea:	01be      	lsls	r6, r7, #6
 80088ec:	fb0a fa01 	mul.w	sl, sl, r1
 80088f0:	fb09 f901 	mul.w	r9, r9, r1
 80088f4:	013f      	lsls	r7, r7, #4
 80088f6:	2400      	movs	r4, #0
 80088f8:	f1b8 0f00 	cmp.w	r8, #0
 80088fc:	bfd8      	it	le
 80088fe:	2100      	movle	r1, #0
 8008900:	dd72      	ble.n	80089e8 <forward_lite_conv2d_if32of32wf32_pool+0x748>
 8008902:	f102 0540 	add.w	r5, r2, #64	; 0x40
 8008906:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800890a:	f04f 0c00 	mov.w	ip, #0
 800890e:	ed51 5a0f 	vldr	s11, [r1, #-60]	; 0xffffffc4
 8008912:	ed55 7a0f 	vldr	s15, [r5, #-60]	; 0xffffffc4
 8008916:	ed15 6a10 	vldr	s12, [r5, #-64]	; 0xffffffc0
 800891a:	ed51 6a10 	vldr	s13, [r1, #-64]	; 0xffffffc0
 800891e:	ed55 4a0d 	vldr	s9, [r5, #-52]	; 0xffffffcc
 8008922:	ed15 5a0c 	vldr	s10, [r5, #-48]	; 0xffffffd0
 8008926:	ed15 3a0a 	vldr	s6, [r5, #-40]	; 0xffffffd8
 800892a:	ed51 3a0a 	vldr	s7, [r1, #-40]	; 0xffffffd8
 800892e:	ed15 4a09 	vldr	s8, [r5, #-36]	; 0xffffffdc
 8008932:	ed55 0a06 	vldr	s1, [r5, #-24]	; 0xffffffe8
 8008936:	ed11 1a06 	vldr	s2, [r1, #-24]	; 0xffffffe8
 800893a:	ed15 2a05 	vldr	s4, [r5, #-20]	; 0xffffffec
 800893e:	ed51 2a05 	vldr	s5, [r1, #-20]	; 0xffffffec
 8008942:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008946:	ed55 5a0e 	vldr	s11, [r5, #-56]	; 0xffffffc8
 800894a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800894e:	f10c 0c10 	add.w	ip, ip, #16
 8008952:	45e0      	cmp	r8, ip
 8008954:	ed11 6a0e 	vldr	s12, [r1, #-56]	; 0xffffffc8
 8008958:	ed51 6a0d 	vldr	s13, [r1, #-52]	; 0xffffffcc
 800895c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008960:	f105 0540 	add.w	r5, r5, #64	; 0x40
 8008964:	f101 0140 	add.w	r1, r1, #64	; 0x40
 8008968:	ed51 5a1c 	vldr	s11, [r1, #-112]	; 0xffffff90
 800896c:	ed15 6a1b 	vldr	s12, [r5, #-108]	; 0xffffff94
 8008970:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8008974:	ed51 6a1b 	vldr	s13, [r1, #-108]	; 0xffffff94
 8008978:	ed51 4a19 	vldr	s9, [r1, #-100]	; 0xffffff9c
 800897c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008980:	ed15 5a18 	vldr	s10, [r5, #-96]	; 0xffffffa0
 8008984:	ed51 5a18 	vldr	s11, [r1, #-96]	; 0xffffffa0
 8008988:	eee6 7a26 	vfma.f32	s15, s12, s13
 800898c:	ed15 6a17 	vldr	s12, [r5, #-92]	; 0xffffffa4
 8008990:	ed51 6a17 	vldr	s13, [r1, #-92]	; 0xffffffa4
 8008994:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008998:	ed15 3a14 	vldr	s6, [r5, #-80]	; 0xffffffb0
 800899c:	ed51 3a14 	vldr	s7, [r1, #-80]	; 0xffffffb0
 80089a0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80089a4:	ed15 4a13 	vldr	s8, [r5, #-76]	; 0xffffffb4
 80089a8:	ed51 4a13 	vldr	s9, [r1, #-76]	; 0xffffffb4
 80089ac:	eee5 7a25 	vfma.f32	s15, s10, s11
 80089b0:	ed15 5a12 	vldr	s10, [r5, #-72]	; 0xffffffb8
 80089b4:	ed51 5a12 	vldr	s11, [r1, #-72]	; 0xffffffb8
 80089b8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80089bc:	ed15 6a11 	vldr	s12, [r5, #-68]	; 0xffffffbc
 80089c0:	ed51 6a11 	vldr	s13, [r1, #-68]	; 0xffffffbc
 80089c4:	eee0 7a81 	vfma.f32	s15, s1, s2
 80089c8:	eee2 7a22 	vfma.f32	s15, s4, s5
 80089cc:	eee3 7a23 	vfma.f32	s15, s6, s7
 80089d0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80089d4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80089d8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80089dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80089e0:	dc95      	bgt.n	800890e <forward_lite_conv2d_if32of32wf32_pool+0x66e>
 80089e2:	4432      	add	r2, r6
 80089e4:	4433      	add	r3, r6
 80089e6:	4639      	mov	r1, r7
 80089e8:	4288      	cmp	r0, r1
 80089ea:	dd10      	ble.n	8008a0e <forward_lite_conv2d_if32of32wf32_pool+0x76e>
 80089ec:	460d      	mov	r5, r1
 80089ee:	4696      	mov	lr, r2
 80089f0:	469c      	mov	ip, r3
 80089f2:	ecfc 6a01 	vldmia	ip!, {s13}
 80089f6:	ecfe 7a01 	vldmia	lr!, {s15}
 80089fa:	3501      	adds	r5, #1
 80089fc:	42a8      	cmp	r0, r5
 80089fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a02:	d1f6      	bne.n	80089f2 <forward_lite_conv2d_if32of32wf32_pool+0x752>
 8008a04:	1a41      	subs	r1, r0, r1
 8008a06:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8008a0a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008a0e:	3401      	adds	r4, #1
 8008a10:	45a3      	cmp	fp, r4
 8008a12:	4452      	add	r2, sl
 8008a14:	444b      	add	r3, r9
 8008a16:	f47f af6f 	bne.w	80088f8 <forward_lite_conv2d_if32of32wf32_pool+0x658>
 8008a1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008a1c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008a1e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008a20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a22:	ed81 7a00 	vstr	s14, [r1]
 8008a26:	4410      	add	r0, r2
 8008a28:	900b      	str	r0, [sp, #44]	; 0x2c
 8008a2a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008a2c:	4401      	add	r1, r0
 8008a2e:	9110      	str	r1, [sp, #64]	; 0x40
 8008a30:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008a32:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008a34:	1a89      	subs	r1, r1, r2
 8008a36:	910e      	str	r1, [sp, #56]	; 0x38
 8008a38:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008a3a:	4401      	add	r1, r0
 8008a3c:	910d      	str	r1, [sp, #52]	; 0x34
 8008a3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008a40:	1a8a      	subs	r2, r1, r2
 8008a42:	920c      	str	r2, [sp, #48]	; 0x30
 8008a44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a46:	3301      	adds	r3, #1
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	9311      	str	r3, [sp, #68]	; 0x44
 8008a4c:	f47f af26 	bne.w	800889c <forward_lite_conv2d_if32of32wf32_pool+0x5fc>
 8008a50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008a52:	9924      	ldr	r1, [sp, #144]	; 0x90
 8008a54:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a56:	440a      	add	r2, r1
 8008a58:	9219      	str	r2, [sp, #100]	; 0x64
 8008a5a:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	9326      	str	r3, [sp, #152]	; 0x98
 8008a62:	f43f ae72 	beq.w	800874a <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 8008a66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f47f af02 	bne.w	8008872 <forward_lite_conv2d_if32of32wf32_pool+0x5d2>
 8008a6e:	eef0 1a48 	vmov.f32	s3, s16
 8008a72:	e702      	b.n	800887a <forward_lite_conv2d_if32of32wf32_pool+0x5da>
 8008a74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a76:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008a78:	4610      	mov	r0, r2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008a7e:	e714      	b.n	80088aa <forward_lite_conv2d_if32of32wf32_pool+0x60a>
 8008a80:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008a82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008a84:	921c      	str	r2, [sp, #112]	; 0x70
 8008a86:	e532      	b.n	80084ee <forward_lite_conv2d_if32of32wf32_pool+0x24e>
 8008a88:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008a8a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008a8c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8008a8e:	440a      	add	r2, r1
 8008a90:	4290      	cmp	r0, r2
 8008a92:	bf98      	it	ls
 8008a94:	9825      	ldrls	r0, [sp, #148]	; 0x94
 8008a96:	f103 0301 	add.w	r3, r3, #1
 8008a9a:	bf98      	it	ls
 8008a9c:	1812      	addls	r2, r2, r0
 8008a9e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008aa0:	b219      	sxth	r1, r3
 8008aa2:	4281      	cmp	r1, r0
 8008aa4:	dbf1      	blt.n	8008a8a <forward_lite_conv2d_if32of32wf32_pool+0x7ea>
 8008aa6:	921b      	str	r2, [sp, #108]	; 0x6c
 8008aa8:	e67b      	b.n	80087a2 <forward_lite_conv2d_if32of32wf32_pool+0x502>
 8008aaa:	bf00      	nop

08008aac <forward_lite_nl_softmax_if32of32_kernel>:
 8008aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab0:	2a01      	cmp	r2, #1
 8008ab2:	ed2d 8b02 	vpush	{d8}
 8008ab6:	4617      	mov	r7, r2
 8008ab8:	ed91 8a00 	vldr	s16, [r1]
 8008abc:	d937      	bls.n	8008b2e <forward_lite_nl_softmax_if32of32_kernel+0x82>
 8008abe:	1d0b      	adds	r3, r1, #4
 8008ac0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8008ac4:	ecf3 7a01 	vldmia	r3!, {s15}
 8008ac8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ad0:	bfb8      	it	lt
 8008ad2:	eeb0 8a67 	vmovlt.f32	s16, s15
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d1f4      	bne.n	8008ac4 <forward_lite_nl_softmax_if32of32_kernel+0x18>
 8008ada:	eddf 8a18 	vldr	s17, [pc, #96]	; 8008b3c <forward_lite_nl_softmax_if32of32_kernel+0x90>
 8008ade:	4606      	mov	r6, r0
 8008ae0:	460d      	mov	r5, r1
 8008ae2:	4680      	mov	r8, r0
 8008ae4:	2400      	movs	r4, #0
 8008ae6:	ecb5 0a01 	vldmia	r5!, {s0}
 8008aea:	ee30 0a48 	vsub.f32	s0, s0, s16
 8008aee:	f003 fd01 	bl	800c4f4 <expf>
 8008af2:	3401      	adds	r4, #1
 8008af4:	42a7      	cmp	r7, r4
 8008af6:	ee78 8a80 	vadd.f32	s17, s17, s0
 8008afa:	eca8 0a01 	vstmia	r8!, {s0}
 8008afe:	d8f2      	bhi.n	8008ae6 <forward_lite_nl_softmax_if32of32_kernel+0x3a>
 8008b00:	eef5 8a40 	vcmp.f32	s17, #0.0
 8008b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b08:	d00d      	beq.n	8008b26 <forward_lite_nl_softmax_if32of32_kernel+0x7a>
 8008b0a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008b0e:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8008b12:	2300      	movs	r3, #0
 8008b14:	3301      	adds	r3, #1
 8008b16:	429f      	cmp	r7, r3
 8008b18:	edd6 7a00 	vldr	s15, [r6]
 8008b1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b20:	ece6 7a01 	vstmia	r6!, {s15}
 8008b24:	d8f6      	bhi.n	8008b14 <forward_lite_nl_softmax_if32of32_kernel+0x68>
 8008b26:	ecbd 8b02 	vpop	{d8}
 8008b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b2e:	2a00      	cmp	r2, #0
 8008b30:	d1d3      	bne.n	8008ada <forward_lite_nl_softmax_if32of32_kernel+0x2e>
 8008b32:	ecbd 8b02 	vpop	{d8}
 8008b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b3a:	bf00      	nop
 8008b3c:	00000000 	.word	0x00000000

08008b40 <forward_lite_nl_relu_generic_if32of32_kernel>:
 8008b40:	edd3 6a02 	vldr	s13, [r3, #8]
 8008b44:	ed93 7a00 	vldr	s14, [r3]
 8008b48:	ed93 6a01 	vldr	s12, [r3, #4]
 8008b4c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8008b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b54:	d42a      	bmi.n	8008bac <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8008b56:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008b5a:	3a01      	subs	r2, #1
 8008b5c:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8008b60:	4561      	cmp	r1, ip
 8008b62:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8008b66:	d85d      	bhi.n	8008c24 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8008b68:	1d11      	adds	r1, r2, #4
 8008b6a:	f10c 0304 	add.w	r3, ip, #4
 8008b6e:	4408      	add	r0, r1
 8008b70:	ebac 0202 	sub.w	r2, ip, r2
 8008b74:	e00c      	b.n	8008b90 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8008b76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b7e:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8008b82:	db01      	blt.n	8008b88 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8008b84:	ee65 7a86 	vmul.f32	s15, s11, s12
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	ed60 7a01 	vstmdb	r0!, {s15}
 8008b8e:	d00c      	beq.n	8008baa <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 8008b90:	ed73 7a01 	vldmdb	r3!, {s15}
 8008b94:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b9c:	daeb      	bge.n	8008b76 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 8008b9e:	eef0 7a66 	vmov.f32	s15, s13
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	ed60 7a01 	vstmdb	r0!, {s15}
 8008ba8:	d1f2      	bne.n	8008b90 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8008baa:	4770      	bx	lr
 8008bac:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8008bb0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008bb4:	3a01      	subs	r2, #1
 8008bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bba:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8008bbe:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8008bc2:	d017      	beq.n	8008bf4 <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 8008bc4:	4561      	cmp	r1, ip
 8008bc6:	d82d      	bhi.n	8008c24 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8008bc8:	1d11      	adds	r1, r2, #4
 8008bca:	f10c 0304 	add.w	r3, ip, #4
 8008bce:	4401      	add	r1, r0
 8008bd0:	ebac 0202 	sub.w	r2, ip, r2
 8008bd4:	ed73 7a01 	vldmdb	r3!, {s15}
 8008bd8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008bdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008be4:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008be8:	d81d      	bhi.n	8008c26 <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 8008bea:	4293      	cmp	r3, r2
 8008bec:	ed61 6a01 	vstmdb	r1!, {s13}
 8008bf0:	d1f0      	bne.n	8008bd4 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 8008bf2:	4770      	bx	lr
 8008bf4:	4561      	cmp	r1, ip
 8008bf6:	d815      	bhi.n	8008c24 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8008bf8:	1d11      	adds	r1, r2, #4
 8008bfa:	b500      	push	{lr}
 8008bfc:	f10c 0304 	add.w	r3, ip, #4
 8008c00:	f04f 0e00 	mov.w	lr, #0
 8008c04:	4401      	add	r1, r0
 8008c06:	ebac 0202 	sub.w	r2, ip, r2
 8008c0a:	ed73 7a01 	vldmdb	r3!, {s15}
 8008c0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c16:	d40b      	bmi.n	8008c30 <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	f841 ed04 	str.w	lr, [r1, #-4]!
 8008c1e:	d1f4      	bne.n	8008c0a <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 8008c20:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c24:	4770      	bx	lr
 8008c26:	4293      	cmp	r3, r2
 8008c28:	ed61 7a01 	vstmdb	r1!, {s15}
 8008c2c:	d1d2      	bne.n	8008bd4 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 8008c2e:	4770      	bx	lr
 8008c30:	4293      	cmp	r3, r2
 8008c32:	ed61 7a01 	vstmdb	r1!, {s15}
 8008c36:	d1e8      	bne.n	8008c0a <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 8008c38:	e7f2      	b.n	8008c20 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 8008c3a:	bf00      	nop

08008c3c <pool_func_mp_array_f32>:
 8008c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c40:	b093      	sub	sp, #76	; 0x4c
 8008c42:	468b      	mov	fp, r1
 8008c44:	f8bd 1074 	ldrh.w	r1, [sp, #116]	; 0x74
 8008c48:	9101      	str	r1, [sp, #4]
 8008c4a:	f8bd 1080 	ldrh.w	r1, [sp, #128]	; 0x80
 8008c4e:	9105      	str	r1, [sp, #20]
 8008c50:	4691      	mov	r9, r2
 8008c52:	f8bd 1084 	ldrh.w	r1, [sp, #132]	; 0x84
 8008c56:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
 8008c5a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8008c5e:	9106      	str	r1, [sp, #24]
 8008c60:	4698      	mov	r8, r3
 8008c62:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 8008c66:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
 8008c6a:	9404      	str	r4, [sp, #16]
 8008c6c:	9102      	str	r1, [sp, #8]
 8008c6e:	ea52 0403 	orrs.w	r4, r2, r3
 8008c72:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 8008c76:	9103      	str	r1, [sp, #12]
 8008c78:	4682      	mov	sl, r0
 8008c7a:	d10b      	bne.n	8008c94 <pool_func_mp_array_f32+0x58>
 8008c7c:	9904      	ldr	r1, [sp, #16]
 8008c7e:	9d02      	ldr	r5, [sp, #8]
 8008c80:	9e05      	ldr	r6, [sp, #20]
 8008c82:	eba1 000b 	sub.w	r0, r1, fp
 8008c86:	3801      	subs	r0, #1
 8008c88:	1e69      	subs	r1, r5, #1
 8008c8a:	fb11 0106 	smlabb	r1, r1, r6, r0
 8008c8e:	0408      	lsls	r0, r1, #16
 8008c90:	f100 8083 	bmi.w	8008d9a <pool_func_mp_array_f32+0x15e>
 8008c94:	9903      	ldr	r1, [sp, #12]
 8008c96:	2900      	cmp	r1, #0
 8008c98:	d07c      	beq.n	8008d94 <pool_func_mp_array_f32+0x158>
 8008c9a:	9902      	ldr	r1, [sp, #8]
 8008c9c:	2900      	cmp	r1, #0
 8008c9e:	d079      	beq.n	8008d94 <pool_func_mp_array_f32+0x158>
 8008ca0:	f1b8 0f00 	cmp.w	r8, #0
 8008ca4:	d076      	beq.n	8008d94 <pool_func_mp_array_f32+0x158>
 8008ca6:	f1b8 0f01 	cmp.w	r8, #1
 8008caa:	9901      	ldr	r1, [sp, #4]
 8008cac:	f040 80e3 	bne.w	8008e76 <pool_func_mp_array_f32+0x23a>
 8008cb0:	1a8a      	subs	r2, r1, r2
 8008cb2:	9904      	ldr	r1, [sp, #16]
 8008cb4:	1ac9      	subs	r1, r1, r3
 8008cb6:	425b      	negs	r3, r3
 8008cb8:	b292      	uxth	r2, r2
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	9207      	str	r2, [sp, #28]
 8008cbe:	930c      	str	r3, [sp, #48]	; 0x30
 8008cc0:	b28a      	uxth	r2, r1
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	920b      	str	r2, [sp, #44]	; 0x2c
 8008cc6:	9308      	str	r3, [sp, #32]
 8008cc8:	9a02      	ldr	r2, [sp, #8]
 8008cca:	fb02 f303 	mul.w	r3, r2, r3
 8008cce:	9309      	str	r3, [sp, #36]	; 0x24
 8008cd0:	9a07      	ldr	r2, [sp, #28]
 8008cd2:	9b01      	ldr	r3, [sp, #4]
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	b21b      	sxth	r3, r3
 8008cd8:	930a      	str	r3, [sp, #40]	; 0x28
 8008cda:	e9dd 830b 	ldrd	r8, r3, [sp, #44]	; 0x2c
 8008cde:	f04f 0c00 	mov.w	ip, #0
 8008ce2:	9304      	str	r3, [sp, #16]
 8008ce4:	b217      	sxth	r7, r2
 8008ce6:	46e6      	mov	lr, ip
 8008ce8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cec:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 8008cf0:	eddf 7aac 	vldr	s15, [pc, #688]	; 8008fa4 <pool_func_mp_array_f32+0x368>
 8008cf4:	428f      	cmp	r7, r1
 8008cf6:	449e      	add	lr, r3
 8008cf8:	fa0f f088 	sxth.w	r0, r8
 8008cfc:	dd28      	ble.n	8008d50 <pool_func_mp_array_f32+0x114>
 8008cfe:	ea00 75e0 	and.w	r5, r0, r0, asr #31
 8008d02:	4286      	cmp	r6, r0
 8008d04:	da20      	bge.n	8008d48 <pool_func_mp_array_f32+0x10c>
 8008d06:	2900      	cmp	r1, #0
 8008d08:	fb0b f401 	mul.w	r4, fp, r1
 8008d0c:	db1c      	blt.n	8008d48 <pool_func_mp_array_f32+0x10c>
 8008d0e:	4549      	cmp	r1, r9
 8008d10:	da1a      	bge.n	8008d48 <pool_func_mp_array_f32+0x10c>
 8008d12:	2e00      	cmp	r6, #0
 8008d14:	4633      	mov	r3, r6
 8008d16:	da05      	bge.n	8008d24 <pool_func_mp_array_f32+0xe8>
 8008d18:	3301      	adds	r3, #1
 8008d1a:	b21b      	sxth	r3, r3
 8008d1c:	429d      	cmp	r5, r3
 8008d1e:	dcfb      	bgt.n	8008d18 <pool_func_mp_array_f32+0xdc>
 8008d20:	4283      	cmp	r3, r0
 8008d22:	da11      	bge.n	8008d48 <pool_func_mp_array_f32+0x10c>
 8008d24:	18e2      	adds	r2, r4, r3
 8008d26:	459b      	cmp	fp, r3
 8008d28:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8008d2c:	dd08      	ble.n	8008d40 <pool_func_mp_array_f32+0x104>
 8008d2e:	ed92 7a00 	vldr	s14, [r2]
 8008d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d3a:	bfb8      	it	lt
 8008d3c:	eef0 7a47 	vmovlt.f32	s15, s14
 8008d40:	3301      	adds	r3, #1
 8008d42:	b21b      	sxth	r3, r3
 8008d44:	4283      	cmp	r3, r0
 8008d46:	dbed      	blt.n	8008d24 <pool_func_mp_array_f32+0xe8>
 8008d48:	3101      	adds	r1, #1
 8008d4a:	b209      	sxth	r1, r1
 8008d4c:	42b9      	cmp	r1, r7
 8008d4e:	dbd8      	blt.n	8008d02 <pool_func_mp_array_f32+0xc6>
 8008d50:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008d52:	9a05      	ldr	r2, [sp, #20]
 8008d54:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 8008d58:	9b04      	ldr	r3, [sp, #16]
 8008d5a:	edce 7a00 	vstr	s15, [lr]
 8008d5e:	4413      	add	r3, r2
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	f10c 0c01 	add.w	ip, ip, #1
 8008d66:	9304      	str	r3, [sp, #16]
 8008d68:	9b02      	ldr	r3, [sp, #8]
 8008d6a:	fa0f fc8c 	sxth.w	ip, ip
 8008d6e:	4490      	add	r8, r2
 8008d70:	4563      	cmp	r3, ip
 8008d72:	fa1f f888 	uxth.w	r8, r8
 8008d76:	46e6      	mov	lr, ip
 8008d78:	dcb6      	bgt.n	8008ce8 <pool_func_mp_array_f32+0xac>
 8008d7a:	9b08      	ldr	r3, [sp, #32]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	b21a      	sxth	r2, r3
 8008d80:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8008d84:	440b      	add	r3, r1
 8008d86:	9903      	ldr	r1, [sp, #12]
 8008d88:	9208      	str	r2, [sp, #32]
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	4291      	cmp	r1, r2
 8008d8e:	9307      	str	r3, [sp, #28]
 8008d90:	4613      	mov	r3, r2
 8008d92:	dc99      	bgt.n	8008cc8 <pool_func_mp_array_f32+0x8c>
 8008d94:	b013      	add	sp, #76	; 0x4c
 8008d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9a:	9901      	ldr	r1, [sp, #4]
 8008d9c:	9e03      	ldr	r6, [sp, #12]
 8008d9e:	9f06      	ldr	r7, [sp, #24]
 8008da0:	eba1 0009 	sub.w	r0, r1, r9
 8008da4:	3801      	subs	r0, #1
 8008da6:	1e71      	subs	r1, r6, #1
 8008da8:	fb11 0107 	smlabb	r1, r1, r7, r0
 8008dac:	0409      	lsls	r1, r1, #16
 8008dae:	f57f af71 	bpl.w	8008c94 <pool_func_mp_array_f32+0x58>
 8008db2:	2e00      	cmp	r6, #0
 8008db4:	d0ee      	beq.n	8008d94 <pool_func_mp_array_f32+0x158>
 8008db6:	2d00      	cmp	r5, #0
 8008db8:	d0ec      	beq.n	8008d94 <pool_func_mp_array_f32+0x158>
 8008dba:	f1b8 0f00 	cmp.w	r8, #0
 8008dbe:	d0e9      	beq.n	8008d94 <pool_func_mp_array_f32+0x158>
 8008dc0:	f1b8 0f01 	cmp.w	r8, #1
 8008dc4:	f040 80f0 	bne.w	8008fa8 <pool_func_mp_array_f32+0x36c>
 8008dc8:	46a1      	mov	r9, r4
 8008dca:	9407      	str	r4, [sp, #28]
 8008dcc:	46a0      	mov	r8, r4
 8008dce:	9b02      	ldr	r3, [sp, #8]
 8008dd0:	f8dd e010 	ldr.w	lr, [sp, #16]
 8008dd4:	fb03 f308 	mul.w	r3, r3, r8
 8008dd8:	2600      	movs	r6, #0
 8008dda:	9309      	str	r3, [sp, #36]	; 0x24
 8008ddc:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
 8008de0:	fa0f f389 	sxth.w	r3, r9
 8008de4:	9308      	str	r3, [sp, #32]
 8008de6:	46b4      	mov	ip, r6
 8008de8:	4637      	mov	r7, r6
 8008dea:	9c08      	ldr	r4, [sp, #32]
 8008dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dee:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8008fa4 <pool_func_mp_array_f32+0x368>
 8008df2:	4544      	cmp	r4, r8
 8008df4:	441f      	add	r7, r3
 8008df6:	b235      	sxth	r5, r6
 8008df8:	fa0f f08e 	sxth.w	r0, lr
 8008dfc:	da17      	bge.n	8008e2e <pool_func_mp_array_f32+0x1f2>
 8008dfe:	4285      	cmp	r5, r0
 8008e00:	da11      	bge.n	8008e26 <pool_func_mp_array_f32+0x1ea>
 8008e02:	fb04 520b 	mla	r2, r4, fp, r5
 8008e06:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8008e0a:	462b      	mov	r3, r5
 8008e0c:	ecb2 7a01 	vldmia	r2!, {s14}
 8008e10:	3301      	adds	r3, #1
 8008e12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e1a:	b219      	sxth	r1, r3
 8008e1c:	bfb8      	it	lt
 8008e1e:	eef0 7a47 	vmovlt.f32	s15, s14
 8008e22:	4281      	cmp	r1, r0
 8008e24:	dbf2      	blt.n	8008e0c <pool_func_mp_array_f32+0x1d0>
 8008e26:	3401      	adds	r4, #1
 8008e28:	b224      	sxth	r4, r4
 8008e2a:	4544      	cmp	r4, r8
 8008e2c:	dbe7      	blt.n	8008dfe <pool_func_mp_array_f32+0x1c2>
 8008e2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008e30:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008e34:	9b05      	ldr	r3, [sp, #20]
 8008e36:	edc7 7a00 	vstr	s15, [r7]
 8008e3a:	449e      	add	lr, r3
 8008e3c:	441e      	add	r6, r3
 8008e3e:	f10c 0c01 	add.w	ip, ip, #1
 8008e42:	9b02      	ldr	r3, [sp, #8]
 8008e44:	fa0f fc8c 	sxth.w	ip, ip
 8008e48:	4563      	cmp	r3, ip
 8008e4a:	fa1f fe8e 	uxth.w	lr, lr
 8008e4e:	b2b6      	uxth	r6, r6
 8008e50:	4667      	mov	r7, ip
 8008e52:	dcca      	bgt.n	8008dea <pool_func_mp_array_f32+0x1ae>
 8008e54:	9b07      	ldr	r3, [sp, #28]
 8008e56:	9906      	ldr	r1, [sp, #24]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	b21a      	sxth	r2, r3
 8008e5c:	9b01      	ldr	r3, [sp, #4]
 8008e5e:	9207      	str	r2, [sp, #28]
 8008e60:	440b      	add	r3, r1
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	9301      	str	r3, [sp, #4]
 8008e66:	9b03      	ldr	r3, [sp, #12]
 8008e68:	4489      	add	r9, r1
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	fa1f f989 	uxth.w	r9, r9
 8008e70:	4690      	mov	r8, r2
 8008e72:	dcac      	bgt.n	8008dce <pool_func_mp_array_f32+0x192>
 8008e74:	e78e      	b.n	8008d94 <pool_func_mp_array_f32+0x158>
 8008e76:	1a88      	subs	r0, r1, r2
 8008e78:	9904      	ldr	r1, [sp, #16]
 8008e7a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008e7e:	1ac9      	subs	r1, r1, r3
 8008e80:	4252      	negs	r2, r2
 8008e82:	425b      	negs	r3, r3
 8008e84:	b292      	uxth	r2, r2
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	b280      	uxth	r0, r0
 8008e8a:	9208      	str	r2, [sp, #32]
 8008e8c:	9311      	str	r3, [sp, #68]	; 0x44
 8008e8e:	b28a      	uxth	r2, r1
 8008e90:	2300      	movs	r3, #0
 8008e92:	9007      	str	r0, [sp, #28]
 8008e94:	9210      	str	r2, [sp, #64]	; 0x40
 8008e96:	930c      	str	r3, [sp, #48]	; 0x30
 8008e98:	9a02      	ldr	r2, [sp, #8]
 8008e9a:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8008e9e:	fb03 f302 	mul.w	r3, r3, r2
 8008ea2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8008ea6:	920b      	str	r2, [sp, #44]	; 0x2c
 8008ea8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008eaa:	930f      	str	r3, [sp, #60]	; 0x3c
 8008eac:	9201      	str	r2, [sp, #4]
 8008eae:	2300      	movs	r3, #0
 8008eb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008eb2:	930d      	str	r3, [sp, #52]	; 0x34
 8008eb4:	9204      	str	r2, [sp, #16]
 8008eb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008eb8:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8008ebc:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	fb08 f303 	mul.w	r3, r8, r3
 8008ec6:	f04f 0e00 	mov.w	lr, #0
 8008eca:	930a      	str	r3, [sp, #40]	; 0x28
 8008ecc:	4676      	mov	r6, lr
 8008ece:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 8008ed2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ed4:	eddf 7a33 	vldr	s15, [pc, #204]	; 8008fa4 <pool_func_mp_array_f32+0x368>
 8008ed8:	4549      	cmp	r1, r9
 8008eda:	da2f      	bge.n	8008f3c <pool_func_mp_array_f32+0x300>
 8008edc:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8008ee0:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8008ee4:	45a4      	cmp	ip, r4
 8008ee6:	da23      	bge.n	8008f30 <pool_func_mp_array_f32+0x2f4>
 8008ee8:	2900      	cmp	r1, #0
 8008eea:	fb0b f501 	mul.w	r5, fp, r1
 8008eee:	db1f      	blt.n	8008f30 <pool_func_mp_array_f32+0x2f4>
 8008ef0:	4571      	cmp	r1, lr
 8008ef2:	da1d      	bge.n	8008f30 <pool_func_mp_array_f32+0x2f4>
 8008ef4:	f1bc 0f00 	cmp.w	ip, #0
 8008ef8:	4663      	mov	r3, ip
 8008efa:	da05      	bge.n	8008f08 <pool_func_mp_array_f32+0x2cc>
 8008efc:	3301      	adds	r3, #1
 8008efe:	b21b      	sxth	r3, r3
 8008f00:	429f      	cmp	r7, r3
 8008f02:	dcfb      	bgt.n	8008efc <pool_func_mp_array_f32+0x2c0>
 8008f04:	42a3      	cmp	r3, r4
 8008f06:	da13      	bge.n	8008f30 <pool_func_mp_array_f32+0x2f4>
 8008f08:	18ea      	adds	r2, r5, r3
 8008f0a:	fb08 6202 	mla	r2, r8, r2, r6
 8008f0e:	1c58      	adds	r0, r3, #1
 8008f10:	459b      	cmp	fp, r3
 8008f12:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8008f16:	b203      	sxth	r3, r0
 8008f18:	dd08      	ble.n	8008f2c <pool_func_mp_array_f32+0x2f0>
 8008f1a:	ed92 7a00 	vldr	s14, [r2]
 8008f1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f26:	bfb8      	it	lt
 8008f28:	eef0 7a47 	vmovlt.f32	s15, s14
 8008f2c:	42a3      	cmp	r3, r4
 8008f2e:	dbeb      	blt.n	8008f08 <pool_func_mp_array_f32+0x2cc>
 8008f30:	3101      	adds	r1, #1
 8008f32:	b209      	sxth	r1, r1
 8008f34:	4549      	cmp	r1, r9
 8008f36:	dbd5      	blt.n	8008ee4 <pool_func_mp_array_f32+0x2a8>
 8008f38:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8008f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f40:	f10e 0e01 	add.w	lr, lr, #1
 8008f44:	4433      	add	r3, r6
 8008f46:	fa0f fe8e 	sxth.w	lr, lr
 8008f4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f4e:	45c6      	cmp	lr, r8
 8008f50:	edc3 7a00 	vstr	s15, [r3]
 8008f54:	4676      	mov	r6, lr
 8008f56:	dbbc      	blt.n	8008ed2 <pool_func_mp_array_f32+0x296>
 8008f58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f5a:	9a01      	ldr	r2, [sp, #4]
 8008f5c:	9805      	ldr	r0, [sp, #20]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	4402      	add	r2, r0
 8008f62:	b219      	sxth	r1, r3
 8008f64:	b292      	uxth	r2, r2
 8008f66:	9b04      	ldr	r3, [sp, #16]
 8008f68:	9201      	str	r2, [sp, #4]
 8008f6a:	9a02      	ldr	r2, [sp, #8]
 8008f6c:	910d      	str	r1, [sp, #52]	; 0x34
 8008f6e:	4403      	add	r3, r0
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	428a      	cmp	r2, r1
 8008f74:	9304      	str	r3, [sp, #16]
 8008f76:	460b      	mov	r3, r1
 8008f78:	dc9d      	bgt.n	8008eb6 <pool_func_mp_array_f32+0x27a>
 8008f7a:	e9dd 0206 	ldrd	r0, r2, [sp, #24]
 8008f7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f80:	4402      	add	r2, r0
 8008f82:	3301      	adds	r3, #1
 8008f84:	b219      	sxth	r1, r3
 8008f86:	b292      	uxth	r2, r2
 8008f88:	9b08      	ldr	r3, [sp, #32]
 8008f8a:	9207      	str	r2, [sp, #28]
 8008f8c:	9a03      	ldr	r2, [sp, #12]
 8008f8e:	910c      	str	r1, [sp, #48]	; 0x30
 8008f90:	4403      	add	r3, r0
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	428a      	cmp	r2, r1
 8008f96:	9308      	str	r3, [sp, #32]
 8008f98:	460b      	mov	r3, r1
 8008f9a:	f73f af7d 	bgt.w	8008e98 <pool_func_mp_array_f32+0x25c>
 8008f9e:	b013      	add	sp, #76	; 0x4c
 8008fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa4:	cf000000 	.word	0xcf000000
 8008fa8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8008fac:	46a4      	mov	ip, r4
 8008fae:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8008fb2:	9407      	str	r4, [sp, #28]
 8008fb4:	4623      	mov	r3, r4
 8008fb6:	9a02      	ldr	r2, [sp, #8]
 8008fb8:	f8dd e010 	ldr.w	lr, [sp, #16]
 8008fbc:	fb03 f302 	mul.w	r3, r3, r2
 8008fc0:	930a      	str	r3, [sp, #40]	; 0x28
 8008fc2:	fa0f f38c 	sxth.w	r3, ip
 8008fc6:	2400      	movs	r4, #0
 8008fc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fca:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8008fce:	9308      	str	r3, [sp, #32]
 8008fd0:	4627      	mov	r7, r4
 8008fd2:	4623      	mov	r3, r4
 8008fd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fd6:	4413      	add	r3, r2
 8008fd8:	fb08 f303 	mul.w	r3, r8, r3
 8008fdc:	2600      	movs	r6, #0
 8008fde:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe0:	fa0f fb84 	sxth.w	fp, r4
 8008fe4:	fa0f f08e 	sxth.w	r0, lr
 8008fe8:	4635      	mov	r5, r6
 8008fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fec:	9a08      	ldr	r2, [sp, #32]
 8008fee:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 8008fa4 <pool_func_mp_array_f32+0x368>
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	da20      	bge.n	8009038 <pool_func_mp_array_f32+0x3fc>
 8008ff6:	469a      	mov	sl, r3
 8008ff8:	4583      	cmp	fp, r0
 8008ffa:	da16      	bge.n	800902a <pool_func_mp_array_f32+0x3ee>
 8008ffc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ffe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009000:	fb03 b30a 	mla	r3, r3, sl, fp
 8009004:	fb08 5303 	mla	r3, r8, r3, r5
 8009008:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800900c:	465a      	mov	r2, fp
 800900e:	ed93 7a00 	vldr	s14, [r3]
 8009012:	3201      	adds	r2, #1
 8009014:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800901c:	b211      	sxth	r1, r2
 800901e:	bfb8      	it	lt
 8009020:	eef0 7a47 	vmovlt.f32	s15, s14
 8009024:	4281      	cmp	r1, r0
 8009026:	444b      	add	r3, r9
 8009028:	dbf1      	blt.n	800900e <pool_func_mp_array_f32+0x3d2>
 800902a:	9b08      	ldr	r3, [sp, #32]
 800902c:	f10a 0a01 	add.w	sl, sl, #1
 8009030:	fa0f fa8a 	sxth.w	sl, sl
 8009034:	459a      	cmp	sl, r3
 8009036:	dbdf      	blt.n	8008ff8 <pool_func_mp_array_f32+0x3bc>
 8009038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800903a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800903c:	3601      	adds	r6, #1
 800903e:	442b      	add	r3, r5
 8009040:	b236      	sxth	r6, r6
 8009042:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009046:	4546      	cmp	r6, r8
 8009048:	edc3 7a00 	vstr	s15, [r3]
 800904c:	4635      	mov	r5, r6
 800904e:	dbcc      	blt.n	8008fea <pool_func_mp_array_f32+0x3ae>
 8009050:	9b05      	ldr	r3, [sp, #20]
 8009052:	9a02      	ldr	r2, [sp, #8]
 8009054:	3701      	adds	r7, #1
 8009056:	b23f      	sxth	r7, r7
 8009058:	449e      	add	lr, r3
 800905a:	441c      	add	r4, r3
 800905c:	42ba      	cmp	r2, r7
 800905e:	fa1f fe8e 	uxth.w	lr, lr
 8009062:	b2a4      	uxth	r4, r4
 8009064:	463b      	mov	r3, r7
 8009066:	dcb5      	bgt.n	8008fd4 <pool_func_mp_array_f32+0x398>
 8009068:	9b07      	ldr	r3, [sp, #28]
 800906a:	9906      	ldr	r1, [sp, #24]
 800906c:	3301      	adds	r3, #1
 800906e:	b21a      	sxth	r2, r3
 8009070:	9b01      	ldr	r3, [sp, #4]
 8009072:	9207      	str	r2, [sp, #28]
 8009074:	440b      	add	r3, r1
 8009076:	448c      	add	ip, r1
 8009078:	9903      	ldr	r1, [sp, #12]
 800907a:	b29b      	uxth	r3, r3
 800907c:	4291      	cmp	r1, r2
 800907e:	9301      	str	r3, [sp, #4]
 8009080:	fa1f fc8c 	uxth.w	ip, ip
 8009084:	4613      	mov	r3, r2
 8009086:	dc96      	bgt.n	8008fb6 <pool_func_mp_array_f32+0x37a>
 8009088:	e684      	b.n	8008d94 <pool_func_mp_array_f32+0x158>
 800908a:	bf00      	nop

0800908c <lite_decompress_ilutof32>:
 800908c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009090:	9d08      	ldr	r5, [sp, #32]
 8009092:	2b04      	cmp	r3, #4
 8009094:	ea4f 0685 	mov.w	r6, r5, lsl #2
 8009098:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800909c:	d015      	beq.n	80090ca <lite_decompress_ilutof32+0x3e>
 800909e:	2b08      	cmp	r3, #8
 80090a0:	d110      	bne.n	80090c4 <lite_decompress_ilutof32+0x38>
 80090a2:	42a8      	cmp	r0, r5
 80090a4:	bf38      	it	cc
 80090a6:	460c      	movcc	r4, r1
 80090a8:	d20c      	bcs.n	80090c4 <lite_decompress_ilutof32+0x38>
 80090aa:	f814 3b01 	ldrb.w	r3, [r4], #1
 80090ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f840 3b04 	str.w	r3, [r0], #4
 80090b8:	4285      	cmp	r5, r0
 80090ba:	d8f6      	bhi.n	80090aa <lite_decompress_ilutof32+0x1e>
 80090bc:	3e01      	subs	r6, #1
 80090be:	eb01 0696 	add.w	r6, r1, r6, lsr #2
 80090c2:	1c71      	adds	r1, r6, #1
 80090c4:	4608      	mov	r0, r1
 80090c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090ca:	9b07      	ldr	r3, [sp, #28]
 80090cc:	085e      	lsrs	r6, r3, #1
 80090ce:	f003 0701 	and.w	r7, r3, #1
 80090d2:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 80090d6:	f106 38ff 	add.w	r8, r6, #4294967295
 80090da:	42a8      	cmp	r0, r5
 80090dc:	d2f2      	bcs.n	80090c4 <lite_decompress_ilutof32+0x38>
 80090de:	b33e      	cbz	r6, 8009130 <lite_decompress_ilutof32+0xa4>
 80090e0:	f100 0e08 	add.w	lr, r0, #8
 80090e4:	f101 3cff 	add.w	ip, r1, #4294967295
 80090e8:	eb01 0408 	add.w	r4, r1, r8
 80090ec:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 80090f0:	091b      	lsrs	r3, r3, #4
 80090f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80090f6:	f10e 0e08 	add.w	lr, lr, #8
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f84e 3c10 	str.w	r3, [lr, #-16]
 8009100:	f89c 3000 	ldrb.w	r3, [ip]
 8009104:	f003 030f 	and.w	r3, r3, #15
 8009108:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800910c:	4564      	cmp	r4, ip
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f84e 3c0c 	str.w	r3, [lr, #-12]
 8009114:	d1ea      	bne.n	80090ec <lite_decompress_ilutof32+0x60>
 8009116:	4431      	add	r1, r6
 8009118:	4448      	add	r0, r9
 800911a:	2f00      	cmp	r7, #0
 800911c:	d0dd      	beq.n	80090da <lite_decompress_ilutof32+0x4e>
 800911e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009122:	091b      	lsrs	r3, r3, #4
 8009124:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f840 3b04 	str.w	r3, [r0], #4
 800912e:	e7d4      	b.n	80090da <lite_decompress_ilutof32+0x4e>
 8009130:	2f00      	cmp	r7, #0
 8009132:	d1f4      	bne.n	800911e <lite_decompress_ilutof32+0x92>
 8009134:	42a8      	cmp	r0, r5
 8009136:	d3fd      	bcc.n	8009134 <lite_decompress_ilutof32+0xa8>
 8009138:	4608      	mov	r0, r1
 800913a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800913e:	bf00      	nop

08009140 <forward_lite_dense_if32of32wf32>:
 8009140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009144:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8009148:	6801      	ldr	r1, [r0, #0]
 800914a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800914e:	fb02 f303 	mul.w	r3, r2, r3
 8009152:	b083      	sub	sp, #12
 8009154:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009158:	4299      	cmp	r1, r3
 800915a:	9100      	str	r1, [sp, #0]
 800915c:	9301      	str	r3, [sp, #4]
 800915e:	f080 811e 	bcs.w	800939e <forward_lite_dense_if32of32wf32+0x25e>
 8009162:	6904      	ldr	r4, [r0, #16]
 8009164:	4607      	mov	r7, r0
 8009166:	0096      	lsls	r6, r2, #2
 8009168:	9b00      	ldr	r3, [sp, #0]
 800916a:	68bd      	ldr	r5, [r7, #8]
 800916c:	eb03 0e06 	add.w	lr, r3, r6
 8009170:	459e      	cmp	lr, r3
 8009172:	461e      	mov	r6, r3
 8009174:	f240 8104 	bls.w	8009380 <forward_lite_dense_if32of32wf32+0x240>
 8009178:	f1a4 0c10 	sub.w	ip, r4, #16
 800917c:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8009180:	f10c 0c01 	add.w	ip, ip, #1
 8009184:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8009188:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800918c:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8009190:	2c0f      	cmp	r4, #15
 8009192:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80093f0 <forward_lite_dense_if32of32wf32+0x2b0>
 8009196:	f240 8105 	bls.w	80093a4 <forward_lite_dense_if32of32wf32+0x264>
 800919a:	f108 0240 	add.w	r2, r8, #64	; 0x40
 800919e:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80091a2:	4621      	mov	r1, r4
 80091a4:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 80091a8:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 80091ac:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 80091b0:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 80091b4:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 80091b8:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 80091bc:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 80091c0:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 80091c4:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 80091c8:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 80091cc:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 80091d0:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 80091d4:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 80091d8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80091dc:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 80091e0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80091e4:	3910      	subs	r1, #16
 80091e6:	290f      	cmp	r1, #15
 80091e8:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 80091ec:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 80091f0:	eee5 7a86 	vfma.f32	s15, s11, s12
 80091f4:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80091f8:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80091fc:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8009200:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8009204:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8009208:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 800920c:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8009210:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009214:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8009218:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 800921c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009220:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8009224:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8009228:	eee3 7a23 	vfma.f32	s15, s6, s7
 800922c:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8009230:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8009234:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009238:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800923c:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8009240:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009244:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8009248:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 800924c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009250:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8009254:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8009258:	eee1 7a21 	vfma.f32	s15, s2, s3
 800925c:	eee2 7a22 	vfma.f32	s15, s4, s5
 8009260:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009264:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009268:	eee5 7a25 	vfma.f32	s15, s10, s11
 800926c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009270:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009274:	d896      	bhi.n	80091a4 <forward_lite_dense_if32of32wf32+0x64>
 8009276:	eb05 020b 	add.w	r2, r5, fp
 800927a:	f004 010f 	and.w	r1, r4, #15
 800927e:	4663      	mov	r3, ip
 8009280:	2903      	cmp	r1, #3
 8009282:	d95f      	bls.n	8009344 <forward_lite_dense_if32of32wf32+0x204>
 8009284:	edd2 6a01 	vldr	s13, [r2, #4]
 8009288:	edd3 7a01 	vldr	s15, [r3, #4]
 800928c:	ed93 6a00 	vldr	s12, [r3]
 8009290:	ed93 5a02 	vldr	s10, [r3, #8]
 8009294:	edd2 5a02 	vldr	s11, [r2, #8]
 8009298:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800929c:	edd2 6a00 	vldr	s13, [r2]
 80092a0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80092a4:	1f08      	subs	r0, r1, #4
 80092a6:	2803      	cmp	r0, #3
 80092a8:	ed93 6a03 	vldr	s12, [r3, #12]
 80092ac:	edd2 6a03 	vldr	s13, [r2, #12]
 80092b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092b4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80092b8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80092bc:	eeb0 7a67 	vmov.f32	s14, s15
 80092c0:	d938      	bls.n	8009334 <forward_lite_dense_if32of32wf32+0x1f4>
 80092c2:	edd2 6a05 	vldr	s13, [r2, #20]
 80092c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80092ca:	ed93 6a04 	vldr	s12, [r3, #16]
 80092ce:	ed93 5a06 	vldr	s10, [r3, #24]
 80092d2:	edd2 5a06 	vldr	s11, [r2, #24]
 80092d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80092da:	edd2 6a04 	vldr	s13, [r2, #16]
 80092de:	eee6 7a26 	vfma.f32	s15, s12, s13
 80092e2:	f1a1 0a08 	sub.w	sl, r1, #8
 80092e6:	f1ba 0f03 	cmp.w	sl, #3
 80092ea:	ed93 6a07 	vldr	s12, [r3, #28]
 80092ee:	edd2 6a07 	vldr	s13, [r2, #28]
 80092f2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80092f6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80092fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80092fe:	d919      	bls.n	8009334 <forward_lite_dense_if32of32wf32+0x1f4>
 8009300:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8009304:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8009308:	ed92 6a08 	vldr	s12, [r2, #32]
 800930c:	ed92 5a0a 	vldr	s10, [r2, #40]	; 0x28
 8009310:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 8009314:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009318:	edd3 6a08 	vldr	s13, [r3, #32]
 800931c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009320:	ed92 6a0b 	vldr	s12, [r2, #44]	; 0x2c
 8009324:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8009328:	eee5 7a25 	vfma.f32	s15, s10, s11
 800932c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009330:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009334:	0880      	lsrs	r0, r0, #2
 8009336:	3001      	adds	r0, #1
 8009338:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800933c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8009340:	f001 0103 	and.w	r1, r1, #3
 8009344:	b1a9      	cbz	r1, 8009372 <forward_lite_dense_if32of32wf32+0x232>
 8009346:	edd3 6a00 	vldr	s13, [r3]
 800934a:	edd2 7a00 	vldr	s15, [r2]
 800934e:	3901      	subs	r1, #1
 8009350:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009354:	d00d      	beq.n	8009372 <forward_lite_dense_if32of32wf32+0x232>
 8009356:	edd3 6a01 	vldr	s13, [r3, #4]
 800935a:	edd2 7a01 	vldr	s15, [r2, #4]
 800935e:	2901      	cmp	r1, #1
 8009360:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009364:	d005      	beq.n	8009372 <forward_lite_dense_if32of32wf32+0x232>
 8009366:	edd2 6a02 	vldr	s13, [r2, #8]
 800936a:	edd3 7a02 	vldr	s15, [r3, #8]
 800936e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009372:	444d      	add	r5, r9
 8009374:	eca6 7a01 	vstmia	r6!, {s14}
 8009378:	45b6      	cmp	lr, r6
 800937a:	f63f af09 	bhi.w	8009190 <forward_lite_dense_if32of32wf32+0x50>
 800937e:	697a      	ldr	r2, [r7, #20]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	b99b      	cbnz	r3, 80093ac <forward_lite_dense_if32of32wf32+0x26c>
 8009384:	9b00      	ldr	r3, [sp, #0]
 8009386:	9901      	ldr	r1, [sp, #4]
 8009388:	693c      	ldr	r4, [r7, #16]
 800938a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800938e:	4299      	cmp	r1, r3
 8009390:	9300      	str	r3, [sp, #0]
 8009392:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8009396:	ea4f 0682 	mov.w	r6, r2, lsl #2
 800939a:	f63f aee5 	bhi.w	8009168 <forward_lite_dense_if32of32wf32+0x28>
 800939e:	b003      	add	sp, #12
 80093a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a4:	4621      	mov	r1, r4
 80093a6:	462a      	mov	r2, r5
 80093a8:	4643      	mov	r3, r8
 80093aa:	e769      	b.n	8009280 <forward_lite_dense_if32of32wf32+0x140>
 80093ac:	2a00      	cmp	r2, #0
 80093ae:	d0e9      	beq.n	8009384 <forward_lite_dense_if32of32wf32+0x244>
 80093b0:	9a00      	ldr	r2, [sp, #0]
 80093b2:	ed93 7a00 	vldr	s14, [r3]
 80093b6:	edd2 7a00 	vldr	s15, [r2]
 80093ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80093be:	4613      	mov	r3, r2
 80093c0:	edc2 7a00 	vstr	s15, [r2]
 80093c4:	697a      	ldr	r2, [r7, #20]
 80093c6:	2a01      	cmp	r2, #1
 80093c8:	d9dc      	bls.n	8009384 <forward_lite_dense_if32of32wf32+0x244>
 80093ca:	1d19      	adds	r1, r3, #4
 80093cc:	2301      	movs	r3, #1
 80093ce:	68fa      	ldr	r2, [r7, #12]
 80093d0:	ed91 7a00 	vldr	s14, [r1]
 80093d4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80093d8:	edd2 7a00 	vldr	s15, [r2]
 80093dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80093e0:	3301      	adds	r3, #1
 80093e2:	ece1 7a01 	vstmia	r1!, {s15}
 80093e6:	697a      	ldr	r2, [r7, #20]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d8f0      	bhi.n	80093ce <forward_lite_dense_if32of32wf32+0x28e>
 80093ec:	e7ca      	b.n	8009384 <forward_lite_dense_if32of32wf32+0x244>
 80093ee:	bf00      	nop
 80093f0:	00000000 	.word	0x00000000

080093f4 <forward_lite_dense_if32of32wf32_lut4>:
 80093f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f8:	b08d      	sub	sp, #52	; 0x34
 80093fa:	4605      	mov	r5, r0
 80093fc:	9005      	str	r0, [sp, #20]
 80093fe:	920a      	str	r2, [sp, #40]	; 0x28
 8009400:	4618      	mov	r0, r3
 8009402:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
 8009406:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8009408:	fb02 f303 	mul.w	r3, r2, r3
 800940c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009410:	460c      	mov	r4, r1
 8009412:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8009414:	9308      	str	r3, [sp, #32]
 8009416:	b126      	cbz	r6, 8009422 <forward_lite_dense_if32of32wf32_lut4+0x2e>
 8009418:	2240      	movs	r2, #64	; 0x40
 800941a:	4631      	mov	r1, r6
 800941c:	f000 fa62 	bl	80098e4 <st_int8_copy>
 8009420:	4630      	mov	r0, r6
 8009422:	9b05      	ldr	r3, [sp, #20]
 8009424:	9a08      	ldr	r2, [sp, #32]
 8009426:	4293      	cmp	r3, r2
 8009428:	f080 80f5 	bcs.w	8009616 <forward_lite_dense_if32of32wf32_lut4+0x222>
 800942c:	08eb      	lsrs	r3, r5, #3
 800942e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009430:	9301      	str	r3, [sp, #4]
 8009432:	f005 0101 	and.w	r1, r5, #1
 8009436:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	0092      	lsls	r2, r2, #2
 800943e:	f025 0801 	bic.w	r8, r5, #1
 8009442:	9102      	str	r1, [sp, #8]
 8009444:	9304      	str	r3, [sp, #16]
 8009446:	00a9      	lsls	r1, r5, #2
 8009448:	9b05      	ldr	r3, [sp, #20]
 800944a:	9207      	str	r2, [sp, #28]
 800944c:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8009450:	9109      	str	r1, [sp, #36]	; 0x24
 8009452:	f104 0b20 	add.w	fp, r4, #32
 8009456:	920b      	str	r2, [sp, #44]	; 0x2c
 8009458:	9a07      	ldr	r2, [sp, #28]
 800945a:	eb03 0902 	add.w	r9, r3, r2
 800945e:	4599      	cmp	r9, r3
 8009460:	f1ab 0220 	sub.w	r2, fp, #32
 8009464:	9206      	str	r2, [sp, #24]
 8009466:	f240 80d9 	bls.w	800961c <forward_lite_dense_if32of32wf32_lut4+0x228>
 800946a:	469e      	mov	lr, r3
 800946c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800946e:	f108 33ff 	add.w	r3, r8, #4294967295
 8009472:	9303      	str	r3, [sp, #12]
 8009474:	9b01      	ldr	r3, [sp, #4]
 8009476:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8009640 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800947a:	2b00      	cmp	r3, #0
 800947c:	f000 80b2 	beq.w	80095e4 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8009480:	9b04      	ldr	r3, [sp, #16]
 8009482:	18d5      	adds	r5, r2, r3
 8009484:	465b      	mov	r3, fp
 8009486:	7814      	ldrb	r4, [r2, #0]
 8009488:	ed53 2a07 	vldr	s5, [r3, #-28]	; 0xffffffe4
 800948c:	7851      	ldrb	r1, [r2, #1]
 800948e:	ed53 3a08 	vldr	s7, [r3, #-32]	; 0xffffffe0
 8009492:	ed13 4a06 	vldr	s8, [r3, #-24]	; 0xffffffe8
 8009496:	ed53 4a05 	vldr	s9, [r3, #-20]	; 0xffffffec
 800949a:	ed13 5a04 	vldr	s10, [r3, #-16]
 800949e:	ed53 5a03 	vldr	s11, [r3, #-12]
 80094a2:	ed13 6a02 	vldr	s12, [r3, #-8]
 80094a6:	ed53 6a01 	vldr	s13, [r3, #-4]
 80094aa:	f004 060f 	and.w	r6, r4, #15
 80094ae:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80094b2:	edd6 7a00 	vldr	s15, [r6]
 80094b6:	0924      	lsrs	r4, r4, #4
 80094b8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80094bc:	ed94 3a00 	vldr	s6, [r4]
 80094c0:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80094c4:	090c      	lsrs	r4, r1, #4
 80094c6:	eee3 7a23 	vfma.f32	s15, s6, s7
 80094ca:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80094ce:	f001 010f 	and.w	r1, r1, #15
 80094d2:	edd4 3a00 	vldr	s7, [r4]
 80094d6:	7894      	ldrb	r4, [r2, #2]
 80094d8:	eee3 7a84 	vfma.f32	s15, s7, s8
 80094dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80094e0:	0926      	lsrs	r6, r4, #4
 80094e2:	ed91 4a00 	vldr	s8, [r1]
 80094e6:	78d1      	ldrb	r1, [r2, #3]
 80094e8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80094ec:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80094f0:	f004 040f 	and.w	r4, r4, #15
 80094f4:	edd6 4a00 	vldr	s9, [r6]
 80094f8:	eee4 7a85 	vfma.f32	s15, s9, s10
 80094fc:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8009500:	3204      	adds	r2, #4
 8009502:	ed94 5a00 	vldr	s10, [r4]
 8009506:	090c      	lsrs	r4, r1, #4
 8009508:	eee5 7a25 	vfma.f32	s15, s10, s11
 800950c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8009510:	f001 010f 	and.w	r1, r1, #15
 8009514:	edd4 5a00 	vldr	s11, [r4]
 8009518:	eee5 7a86 	vfma.f32	s15, s11, s12
 800951c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009520:	42aa      	cmp	r2, r5
 8009522:	ed91 6a00 	vldr	s12, [r1]
 8009526:	eee6 7a26 	vfma.f32	s15, s12, s13
 800952a:	f103 0320 	add.w	r3, r3, #32
 800952e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009532:	d1a8      	bne.n	8009486 <forward_lite_dense_if32of32wf32_lut4+0x92>
 8009534:	4656      	mov	r6, sl
 8009536:	4546      	cmp	r6, r8
 8009538:	d258      	bcs.n	80095ec <forward_lite_dense_if32of32wf32_lut4+0x1f8>
 800953a:	9b03      	ldr	r3, [sp, #12]
 800953c:	1b9c      	subs	r4, r3, r6
 800953e:	08e7      	lsrs	r7, r4, #3
 8009540:	f106 0208 	add.w	r2, r6, #8
 8009544:	1e69      	subs	r1, r5, #1
 8009546:	eb05 04d4 	add.w	r4, r5, r4, lsr #3
 800954a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800954e:	ed52 5a01 	vldr	s11, [r2, #-4]
 8009552:	ed52 6a02 	vldr	s13, [r2, #-8]
 8009556:	f003 0c0f 	and.w	ip, r3, #15
 800955a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800955e:	eddc 7a00 	vldr	s15, [ip]
 8009562:	091b      	lsrs	r3, r3, #4
 8009564:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009568:	ed93 6a00 	vldr	s12, [r3]
 800956c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009570:	42a1      	cmp	r1, r4
 8009572:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009576:	f102 0208 	add.w	r2, r2, #8
 800957a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800957e:	d1e4      	bne.n	800954a <forward_lite_dense_if32of32wf32_lut4+0x156>
 8009580:	3701      	adds	r7, #1
 8009582:	19ea      	adds	r2, r5, r7
 8009584:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8009588:	9b02      	ldr	r3, [sp, #8]
 800958a:	b30b      	cbz	r3, 80095d0 <forward_lite_dense_if32of32wf32_lut4+0x1dc>
 800958c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009590:	edd6 7a00 	vldr	s15, [r6]
 8009594:	091b      	lsrs	r3, r3, #4
 8009596:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800959a:	edd3 6a00 	vldr	s13, [r3]
 800959e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80095a2:	ecae 7a01 	vstmia	lr!, {s14}
 80095a6:	45f1      	cmp	r9, lr
 80095a8:	f63f af64 	bhi.w	8009474 <forward_lite_dense_if32of32wf32_lut4+0x80>
 80095ac:	9b05      	ldr	r3, [sp, #20]
 80095ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095b0:	1899      	adds	r1, r3, r2
 80095b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095b4:	b9e3      	cbnz	r3, 80095f0 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 80095b6:	9b08      	ldr	r3, [sp, #32]
 80095b8:	428b      	cmp	r3, r1
 80095ba:	d92c      	bls.n	8009616 <forward_lite_dense_if32of32wf32_lut4+0x222>
 80095bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095be:	4498      	add	r8, r3
 80095c0:	449a      	add	sl, r3
 80095c2:	449b      	add	fp, r3
 80095c4:	9b05      	ldr	r3, [sp, #20]
 80095c6:	4599      	cmp	r9, r3
 80095c8:	d92a      	bls.n	8009620 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 80095ca:	9105      	str	r1, [sp, #20]
 80095cc:	460b      	mov	r3, r1
 80095ce:	e743      	b.n	8009458 <forward_lite_dense_if32of32wf32_lut4+0x64>
 80095d0:	ecae 7a01 	vstmia	lr!, {s14}
 80095d4:	45f1      	cmp	r9, lr
 80095d6:	d9e9      	bls.n	80095ac <forward_lite_dense_if32of32wf32_lut4+0x1b8>
 80095d8:	9b01      	ldr	r3, [sp, #4]
 80095da:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009640 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f47f af4e 	bne.w	8009480 <forward_lite_dense_if32of32wf32_lut4+0x8c>
 80095e4:	9e06      	ldr	r6, [sp, #24]
 80095e6:	4546      	cmp	r6, r8
 80095e8:	4615      	mov	r5, r2
 80095ea:	d3a6      	bcc.n	800953a <forward_lite_dense_if32of32wf32_lut4+0x146>
 80095ec:	462a      	mov	r2, r5
 80095ee:	e7cb      	b.n	8009588 <forward_lite_dense_if32of32wf32_lut4+0x194>
 80095f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d0df      	beq.n	80095b6 <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 80095f6:	9b07      	ldr	r3, [sp, #28]
 80095f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80095fa:	1acb      	subs	r3, r1, r3
 80095fc:	edd3 7a00 	vldr	s15, [r3]
 8009600:	ecb2 7a01 	vldmia	r2!, {s14}
 8009604:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009608:	ece3 7a01 	vstmia	r3!, {s15}
 800960c:	428b      	cmp	r3, r1
 800960e:	d1f5      	bne.n	80095fc <forward_lite_dense_if32of32wf32_lut4+0x208>
 8009610:	9b08      	ldr	r3, [sp, #32]
 8009612:	428b      	cmp	r3, r1
 8009614:	d8d2      	bhi.n	80095bc <forward_lite_dense_if32of32wf32_lut4+0x1c8>
 8009616:	b00d      	add	sp, #52	; 0x34
 8009618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800961c:	4619      	mov	r1, r3
 800961e:	e7c8      	b.n	80095b2 <forward_lite_dense_if32of32wf32_lut4+0x1be>
 8009620:	9b07      	ldr	r3, [sp, #28]
 8009622:	1acb      	subs	r3, r1, r3
 8009624:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009626:	461a      	mov	r2, r3
 8009628:	ed92 7a00 	vldr	s14, [r2]
 800962c:	ecf0 7a01 	vldmia	r0!, {s15}
 8009630:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009634:	ece2 7a01 	vstmia	r2!, {s15}
 8009638:	428a      	cmp	r2, r1
 800963a:	d1f5      	bne.n	8009628 <forward_lite_dense_if32of32wf32_lut4+0x234>
 800963c:	e7f2      	b.n	8009624 <forward_lite_dense_if32of32wf32_lut4+0x230>
 800963e:	bf00      	nop
 8009640:	00000000 	.word	0x00000000

08009644 <forward_lite_dense_if32of32wf32_lut8>:
 8009644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009648:	b087      	sub	sp, #28
 800964a:	460f      	mov	r7, r1
 800964c:	9204      	str	r2, [sp, #16]
 800964e:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	; 0x4c
 8009652:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8009654:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8009656:	fb01 f202 	mul.w	r2, r1, r2
 800965a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800965e:	4605      	mov	r5, r0
 8009660:	9202      	str	r2, [sp, #8]
 8009662:	b136      	cbz	r6, 8009672 <forward_lite_dense_if32of32wf32_lut8+0x2e>
 8009664:	4618      	mov	r0, r3
 8009666:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800966a:	4631      	mov	r1, r6
 800966c:	f000 f93a 	bl	80098e4 <st_int8_copy>
 8009670:	4633      	mov	r3, r6
 8009672:	9a02      	ldr	r2, [sp, #8]
 8009674:	4295      	cmp	r5, r2
 8009676:	f080 80f9 	bcs.w	800986c <forward_lite_dense_if32of32wf32_lut8+0x228>
 800967a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800967c:	0092      	lsls	r2, r2, #2
 800967e:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8009682:	9201      	str	r2, [sp, #4]
 8009684:	9205      	str	r2, [sp, #20]
 8009686:	462a      	mov	r2, r5
 8009688:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 800968c:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 8009690:	464d      	mov	r5, r9
 8009692:	4691      	mov	r9, r2
 8009694:	9a01      	ldr	r2, [sp, #4]
 8009696:	eb09 0e02 	add.w	lr, r9, r2
 800969a:	00a1      	lsls	r1, r4, #2
 800969c:	3720      	adds	r7, #32
 800969e:	45ce      	cmp	lr, r9
 80096a0:	f004 0007 	and.w	r0, r4, #7
 80096a4:	9103      	str	r1, [sp, #12]
 80096a6:	f1a7 0b20 	sub.w	fp, r7, #32
 80096aa:	f240 80c8 	bls.w	800983e <forward_lite_dense_if32of32wf32_lut8+0x1fa>
 80096ae:	9a04      	ldr	r2, [sp, #16]
 80096b0:	46cc      	mov	ip, r9
 80096b2:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800989c <forward_lite_dense_if32of32wf32_lut8+0x258>
 80096b6:	2d00      	cmp	r5, #0
 80096b8:	f000 80dd 	beq.w	8009876 <forward_lite_dense_if32of32wf32_lut8+0x232>
 80096bc:	eb02 060a 	add.w	r6, r2, sl
 80096c0:	4639      	mov	r1, r7
 80096c2:	7854      	ldrb	r4, [r2, #1]
 80096c4:	ed11 3a07 	vldr	s6, [r1, #-28]	; 0xffffffe4
 80096c8:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 80096cc:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 80096d0:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 80096d4:	ed11 5a04 	vldr	s10, [r1, #-16]
 80096d8:	ed51 5a03 	vldr	s11, [r1, #-12]
 80096dc:	ed11 6a02 	vldr	s12, [r1, #-8]
 80096e0:	ed51 6a01 	vldr	s13, [r1, #-4]
 80096e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80096e8:	edd4 7a00 	vldr	s15, [r4]
 80096ec:	7814      	ldrb	r4, [r2, #0]
 80096ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80096f2:	ee67 7a83 	vmul.f32	s15, s15, s6
 80096f6:	ed94 3a00 	vldr	s6, [r4]
 80096fa:	7894      	ldrb	r4, [r2, #2]
 80096fc:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009700:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009704:	3208      	adds	r2, #8
 8009706:	edd4 3a00 	vldr	s7, [r4]
 800970a:	f812 4c05 	ldrb.w	r4, [r2, #-5]
 800970e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009712:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009716:	3120      	adds	r1, #32
 8009718:	ed94 4a00 	vldr	s8, [r4]
 800971c:	f812 4c04 	ldrb.w	r4, [r2, #-4]
 8009720:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009724:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009728:	edd4 4a00 	vldr	s9, [r4]
 800972c:	f812 4c03 	ldrb.w	r4, [r2, #-3]
 8009730:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009734:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009738:	ed94 5a00 	vldr	s10, [r4]
 800973c:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 8009740:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009744:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009748:	edd4 5a00 	vldr	s11, [r4]
 800974c:	f812 4c01 	ldrb.w	r4, [r2, #-1]
 8009750:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009754:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009758:	42b2      	cmp	r2, r6
 800975a:	ed94 6a00 	vldr	s12, [r4]
 800975e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009762:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009766:	d1ac      	bne.n	80096c2 <forward_lite_dense_if32of32wf32_lut8+0x7e>
 8009768:	4642      	mov	r2, r8
 800976a:	2800      	cmp	r0, #0
 800976c:	f000 8081 	beq.w	8009872 <forward_lite_dense_if32of32wf32_lut8+0x22e>
 8009770:	7831      	ldrb	r1, [r6, #0]
 8009772:	edd2 7a00 	vldr	s15, [r2]
 8009776:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800977a:	edd1 6a00 	vldr	s13, [r1]
 800977e:	2801      	cmp	r0, #1
 8009780:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009784:	d03f      	beq.n	8009806 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8009786:	7871      	ldrb	r1, [r6, #1]
 8009788:	edd2 7a01 	vldr	s15, [r2, #4]
 800978c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8009790:	edd1 6a00 	vldr	s13, [r1]
 8009794:	2802      	cmp	r0, #2
 8009796:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800979a:	d034      	beq.n	8009806 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800979c:	78b1      	ldrb	r1, [r6, #2]
 800979e:	edd2 7a02 	vldr	s15, [r2, #8]
 80097a2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80097a6:	edd1 6a00 	vldr	s13, [r1]
 80097aa:	2803      	cmp	r0, #3
 80097ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80097b0:	d029      	beq.n	8009806 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 80097b2:	78f1      	ldrb	r1, [r6, #3]
 80097b4:	edd2 6a03 	vldr	s13, [r2, #12]
 80097b8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80097bc:	edd1 7a00 	vldr	s15, [r1]
 80097c0:	2804      	cmp	r0, #4
 80097c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80097c6:	d01e      	beq.n	8009806 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 80097c8:	7931      	ldrb	r1, [r6, #4]
 80097ca:	edd2 6a04 	vldr	s13, [r2, #16]
 80097ce:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80097d2:	edd1 7a00 	vldr	s15, [r1]
 80097d6:	2805      	cmp	r0, #5
 80097d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80097dc:	d013      	beq.n	8009806 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 80097de:	7971      	ldrb	r1, [r6, #5]
 80097e0:	edd2 6a05 	vldr	s13, [r2, #20]
 80097e4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80097e8:	edd1 7a00 	vldr	s15, [r1]
 80097ec:	2806      	cmp	r0, #6
 80097ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80097f2:	d008      	beq.n	8009806 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 80097f4:	edd2 7a06 	vldr	s15, [r2, #24]
 80097f8:	79b2      	ldrb	r2, [r6, #6]
 80097fa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80097fe:	edd2 6a00 	vldr	s13, [r2]
 8009802:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009806:	1832      	adds	r2, r6, r0
 8009808:	ecac 7a01 	vstmia	ip!, {s14}
 800980c:	45e6      	cmp	lr, ip
 800980e:	f63f af50 	bhi.w	80096b2 <forward_lite_dense_if32of32wf32_lut8+0x6e>
 8009812:	9a05      	ldr	r2, [sp, #20]
 8009814:	eb09 0402 	add.w	r4, r9, r2
 8009818:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800981a:	b9a2      	cbnz	r2, 8009846 <forward_lite_dense_if32of32wf32_lut8+0x202>
 800981c:	9a02      	ldr	r2, [sp, #8]
 800981e:	42a2      	cmp	r2, r4
 8009820:	d924      	bls.n	800986c <forward_lite_dense_if32of32wf32_lut8+0x228>
 8009822:	9a03      	ldr	r2, [sp, #12]
 8009824:	45ce      	cmp	lr, r9
 8009826:	4490      	add	r8, r2
 8009828:	4417      	add	r7, r2
 800982a:	d927      	bls.n	800987c <forward_lite_dense_if32of32wf32_lut8+0x238>
 800982c:	9a01      	ldr	r2, [sp, #4]
 800982e:	46a1      	mov	r9, r4
 8009830:	eb09 0e02 	add.w	lr, r9, r2
 8009834:	45ce      	cmp	lr, r9
 8009836:	f1a7 0b20 	sub.w	fp, r7, #32
 800983a:	f63f af38 	bhi.w	80096ae <forward_lite_dense_if32of32wf32_lut8+0x6a>
 800983e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009840:	464c      	mov	r4, r9
 8009842:	2a00      	cmp	r2, #0
 8009844:	d0ea      	beq.n	800981c <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 8009846:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009848:	2a00      	cmp	r2, #0
 800984a:	d0e7      	beq.n	800981c <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 800984c:	9a01      	ldr	r2, [sp, #4]
 800984e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009850:	1aa2      	subs	r2, r4, r2
 8009852:	edd2 7a00 	vldr	s15, [r2]
 8009856:	ecb1 7a01 	vldmia	r1!, {s14}
 800985a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800985e:	ece2 7a01 	vstmia	r2!, {s15}
 8009862:	4294      	cmp	r4, r2
 8009864:	d1f5      	bne.n	8009852 <forward_lite_dense_if32of32wf32_lut8+0x20e>
 8009866:	9a02      	ldr	r2, [sp, #8]
 8009868:	42a2      	cmp	r2, r4
 800986a:	d8da      	bhi.n	8009822 <forward_lite_dense_if32of32wf32_lut8+0x1de>
 800986c:	b007      	add	sp, #28
 800986e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009872:	4632      	mov	r2, r6
 8009874:	e7c8      	b.n	8009808 <forward_lite_dense_if32of32wf32_lut8+0x1c4>
 8009876:	4616      	mov	r6, r2
 8009878:	465a      	mov	r2, fp
 800987a:	e776      	b.n	800976a <forward_lite_dense_if32of32wf32_lut8+0x126>
 800987c:	9b01      	ldr	r3, [sp, #4]
 800987e:	1ae3      	subs	r3, r4, r3
 8009880:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009882:	461a      	mov	r2, r3
 8009884:	ed92 7a00 	vldr	s14, [r2]
 8009888:	ecf1 7a01 	vldmia	r1!, {s15}
 800988c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009890:	ece2 7a01 	vstmia	r2!, {s15}
 8009894:	42a2      	cmp	r2, r4
 8009896:	d1f5      	bne.n	8009884 <forward_lite_dense_if32of32wf32_lut8+0x240>
 8009898:	e7f2      	b.n	8009880 <forward_lite_dense_if32of32wf32_lut8+0x23c>
 800989a:	bf00      	nop
 800989c:	00000000 	.word	0x00000000

080098a0 <forward_lite_nl_relu_if32of32>:
 80098a0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80098a4:	3a01      	subs	r2, #1
 80098a6:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 80098aa:	4561      	cmp	r1, ip
 80098ac:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80098b0:	d814      	bhi.n	80098dc <forward_lite_nl_relu_if32of32+0x3c>
 80098b2:	1d11      	adds	r1, r2, #4
 80098b4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80098e0 <forward_lite_nl_relu_if32of32+0x40>
 80098b8:	f10c 0304 	add.w	r3, ip, #4
 80098bc:	4408      	add	r0, r1
 80098be:	ebac 0202 	sub.w	r2, ip, r2
 80098c2:	ed73 7a01 	vldmdb	r3!, {s15}
 80098c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80098ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ce:	bfb8      	it	lt
 80098d0:	eef0 7a47 	vmovlt.f32	s15, s14
 80098d4:	4293      	cmp	r3, r2
 80098d6:	ed60 7a01 	vstmdb	r0!, {s15}
 80098da:	d1f2      	bne.n	80098c2 <forward_lite_nl_relu_if32of32+0x22>
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	00000000 	.word	0x00000000

080098e4 <st_int8_copy>:
 80098e4:	4288      	cmp	r0, r1
 80098e6:	d056      	beq.n	8009996 <st_int8_copy+0xb2>
 80098e8:	2a00      	cmp	r2, #0
 80098ea:	d054      	beq.n	8009996 <st_int8_copy+0xb2>
 80098ec:	4288      	cmp	r0, r1
 80098ee:	d353      	bcc.n	8009998 <st_int8_copy+0xb4>
 80098f0:	078b      	lsls	r3, r1, #30
 80098f2:	d102      	bne.n	80098fa <st_int8_copy+0x16>
 80098f4:	e009      	b.n	800990a <st_int8_copy+0x26>
 80098f6:	2a00      	cmp	r2, #0
 80098f8:	d05b      	beq.n	80099b2 <st_int8_copy+0xce>
 80098fa:	f910 3b01 	ldrsb.w	r3, [r0], #1
 80098fe:	f801 3b01 	strb.w	r3, [r1], #1
 8009902:	078b      	lsls	r3, r1, #30
 8009904:	f102 32ff 	add.w	r2, r2, #4294967295
 8009908:	d1f5      	bne.n	80098f6 <st_int8_copy+0x12>
 800990a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800990e:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8009912:	d068      	beq.n	80099e6 <st_int8_copy+0x102>
 8009914:	ea40 0301 	orr.w	r3, r0, r1
 8009918:	075b      	lsls	r3, r3, #29
 800991a:	d14b      	bne.n	80099b4 <st_int8_copy+0xd0>
 800991c:	f1be 0f01 	cmp.w	lr, #1
 8009920:	d048      	beq.n	80099b4 <st_int8_copy+0xd0>
 8009922:	f100 0310 	add.w	r3, r0, #16
 8009926:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800992a:	f101 0c10 	add.w	ip, r1, #16
 800992e:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8009932:	ed13 6b04 	vldr	d6, [r3, #-16]
 8009936:	ed13 7b02 	vldr	d7, [r3, #-8]
 800993a:	3310      	adds	r3, #16
 800993c:	4573      	cmp	r3, lr
 800993e:	ed0c 6b04 	vstr	d6, [ip, #-16]
 8009942:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8009946:	f10c 0c10 	add.w	ip, ip, #16
 800994a:	d1f2      	bne.n	8009932 <st_int8_copy+0x4e>
 800994c:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8009950:	4421      	add	r1, r4
 8009952:	4420      	add	r0, r4
 8009954:	f002 0203 	and.w	r2, r2, #3
 8009958:	b16b      	cbz	r3, 8009976 <st_int8_copy+0x92>
 800995a:	6804      	ldr	r4, [r0, #0]
 800995c:	600c      	str	r4, [r1, #0]
 800995e:	1e5c      	subs	r4, r3, #1
 8009960:	d005      	beq.n	800996e <st_int8_copy+0x8a>
 8009962:	6845      	ldr	r5, [r0, #4]
 8009964:	604d      	str	r5, [r1, #4]
 8009966:	2c01      	cmp	r4, #1
 8009968:	bf1c      	itt	ne
 800996a:	6884      	ldrne	r4, [r0, #8]
 800996c:	608c      	strne	r4, [r1, #8]
 800996e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009972:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8009976:	b162      	cbz	r2, 8009992 <st_int8_copy+0xae>
 8009978:	f990 3000 	ldrsb.w	r3, [r0]
 800997c:	700b      	strb	r3, [r1, #0]
 800997e:	3a01      	subs	r2, #1
 8009980:	d007      	beq.n	8009992 <st_int8_copy+0xae>
 8009982:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8009986:	704b      	strb	r3, [r1, #1]
 8009988:	2a01      	cmp	r2, #1
 800998a:	bf1c      	itt	ne
 800998c:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8009990:	708b      	strbne	r3, [r1, #2]
 8009992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009996:	4770      	bx	lr
 8009998:	1883      	adds	r3, r0, r2
 800999a:	428b      	cmp	r3, r1
 800999c:	d9a8      	bls.n	80098f0 <st_int8_copy+0xc>
 800999e:	4283      	cmp	r3, r0
 80099a0:	440a      	add	r2, r1
 80099a2:	d9f8      	bls.n	8009996 <st_int8_copy+0xb2>
 80099a4:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 80099a8:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80099ac:	4283      	cmp	r3, r0
 80099ae:	d1f9      	bne.n	80099a4 <st_int8_copy+0xc0>
 80099b0:	4770      	bx	lr
 80099b2:	4770      	bx	lr
 80099b4:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80099b8:	460b      	mov	r3, r1
 80099ba:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 80099be:	4684      	mov	ip, r0
 80099c0:	f8dc 7000 	ldr.w	r7, [ip]
 80099c4:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80099c8:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80099cc:	f8dc 800c 	ldr.w	r8, [ip, #12]
 80099d0:	f8c3 800c 	str.w	r8, [r3, #12]
 80099d4:	601f      	str	r7, [r3, #0]
 80099d6:	605e      	str	r6, [r3, #4]
 80099d8:	609d      	str	r5, [r3, #8]
 80099da:	3310      	adds	r3, #16
 80099dc:	459e      	cmp	lr, r3
 80099de:	f10c 0c10 	add.w	ip, ip, #16
 80099e2:	d1ed      	bne.n	80099c0 <st_int8_copy+0xdc>
 80099e4:	e7b2      	b.n	800994c <st_int8_copy+0x68>
 80099e6:	0893      	lsrs	r3, r2, #2
 80099e8:	f002 0203 	and.w	r2, r2, #3
 80099ec:	e7b4      	b.n	8009958 <st_int8_copy+0x74>
 80099ee:	bf00      	nop

080099f0 <ai_array_to_buffer_fmt>:
 80099f0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d053      	beq.n	8009aa0 <ai_array_to_buffer_fmt+0xb0>
 80099f8:	4a2c      	ldr	r2, [pc, #176]	; (8009aac <ai_array_to_buffer_fmt+0xbc>)
 80099fa:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d010      	beq.n	8009a24 <ai_array_to_buffer_fmt+0x34>
 8009a02:	dc21      	bgt.n	8009a48 <ai_array_to_buffer_fmt+0x58>
 8009a04:	4a2a      	ldr	r2, [pc, #168]	; (8009ab0 <ai_array_to_buffer_fmt+0xc0>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d00c      	beq.n	8009a24 <ai_array_to_buffer_fmt+0x34>
 8009a0a:	dd0f      	ble.n	8009a2c <ai_array_to_buffer_fmt+0x3c>
 8009a0c:	4a29      	ldr	r2, [pc, #164]	; (8009ab4 <ai_array_to_buffer_fmt+0xc4>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d008      	beq.n	8009a24 <ai_array_to_buffer_fmt+0x34>
 8009a12:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d004      	beq.n	8009a24 <ai_array_to_buffer_fmt+0x34>
 8009a1a:	4a27      	ldr	r2, [pc, #156]	; (8009ab8 <ai_array_to_buffer_fmt+0xc8>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	bf0c      	ite	eq
 8009a20:	4613      	moveq	r3, r2
 8009a22:	2340      	movne	r3, #64	; 0x40
 8009a24:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009a28:	4318      	orrs	r0, r3
 8009a2a:	4770      	bx	lr
 8009a2c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d0f7      	beq.n	8009a24 <ai_array_to_buffer_fmt+0x34>
 8009a34:	dd2a      	ble.n	8009a8c <ai_array_to_buffer_fmt+0x9c>
 8009a36:	4a21      	ldr	r2, [pc, #132]	; (8009abc <ai_array_to_buffer_fmt+0xcc>)
 8009a38:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	bf0c      	ite	eq
 8009a40:	4613      	moveq	r3, r2
 8009a42:	2340      	movne	r3, #64	; 0x40
 8009a44:	4318      	orrs	r0, r3
 8009a46:	4770      	bx	lr
 8009a48:	4a1d      	ldr	r2, [pc, #116]	; (8009ac0 <ai_array_to_buffer_fmt+0xd0>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d0ea      	beq.n	8009a24 <ai_array_to_buffer_fmt+0x34>
 8009a4e:	dd0f      	ble.n	8009a70 <ai_array_to_buffer_fmt+0x80>
 8009a50:	4a1c      	ldr	r2, [pc, #112]	; (8009ac4 <ai_array_to_buffer_fmt+0xd4>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d0e6      	beq.n	8009a24 <ai_array_to_buffer_fmt+0x34>
 8009a56:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d0e2      	beq.n	8009a24 <ai_array_to_buffer_fmt+0x34>
 8009a5e:	4a1a      	ldr	r2, [pc, #104]	; (8009ac8 <ai_array_to_buffer_fmt+0xd8>)
 8009a60:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009a64:	4293      	cmp	r3, r2
 8009a66:	bf0c      	ite	eq
 8009a68:	4613      	moveq	r3, r2
 8009a6a:	2340      	movne	r3, #64	; 0x40
 8009a6c:	4318      	orrs	r0, r3
 8009a6e:	4770      	bx	lr
 8009a70:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d0d5      	beq.n	8009a24 <ai_array_to_buffer_fmt+0x34>
 8009a78:	3207      	adds	r2, #7
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d0d2      	beq.n	8009a24 <ai_array_to_buffer_fmt+0x34>
 8009a7e:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 8009a82:	4293      	cmp	r3, r2
 8009a84:	bf0c      	ite	eq
 8009a86:	4613      	moveq	r3, r2
 8009a88:	2340      	movne	r3, #64	; 0x40
 8009a8a:	e7cb      	b.n	8009a24 <ai_array_to_buffer_fmt+0x34>
 8009a8c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d0c7      	beq.n	8009a24 <ai_array_to_buffer_fmt+0x34>
 8009a94:	3280      	adds	r2, #128	; 0x80
 8009a96:	4293      	cmp	r3, r2
 8009a98:	bf0c      	ite	eq
 8009a9a:	4613      	moveq	r3, r2
 8009a9c:	2340      	movne	r3, #64	; 0x40
 8009a9e:	e7c1      	b.n	8009a24 <ai_array_to_buffer_fmt+0x34>
 8009aa0:	4b0a      	ldr	r3, [pc, #40]	; (8009acc <ai_array_to_buffer_fmt+0xdc>)
 8009aa2:	4003      	ands	r3, r0
 8009aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009aa8:	e7bc      	b.n	8009a24 <ai_array_to_buffer_fmt+0x34>
 8009aaa:	bf00      	nop
 8009aac:	00840040 	.word	0x00840040
 8009ab0:	00040840 	.word	0x00040840
 8009ab4:	00041040 	.word	0x00041040
 8009ab8:	0004084f 	.word	0x0004084f
 8009abc:	00040447 	.word	0x00040447
 8009ac0:	00840840 	.word	0x00840840
 8009ac4:	00841040 	.word	0x00841040
 8009ac8:	0084084f 	.word	0x0084084f
 8009acc:	00803fff 	.word	0x00803fff

08009ad0 <ai_array_get_byte_size>:
 8009ad0:	b319      	cbz	r1, 8009b1a <ai_array_get_byte_size+0x4a>
 8009ad2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8009ad6:	fb01 f303 	mul.w	r3, r1, r3
 8009ada:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8009ade:	3307      	adds	r3, #7
 8009ae0:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8009ae4:	f023 0307 	bic.w	r3, r3, #7
 8009ae8:	2a04      	cmp	r2, #4
 8009aea:	ea4f 10e0 	mov.w	r0, r0, asr #7
 8009aee:	fa23 f101 	lsr.w	r1, r3, r1
 8009af2:	d00b      	beq.n	8009b0c <ai_array_get_byte_size+0x3c>
 8009af4:	2a08      	cmp	r2, #8
 8009af6:	d002      	beq.n	8009afe <ai_array_get_byte_size+0x2e>
 8009af8:	3107      	adds	r1, #7
 8009afa:	08c8      	lsrs	r0, r1, #3
 8009afc:	4770      	bx	lr
 8009afe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009b02:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8009b06:	3107      	adds	r1, #7
 8009b08:	08c8      	lsrs	r0, r1, #3
 8009b0a:	4770      	bx	lr
 8009b0c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009b10:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8009b14:	3107      	adds	r1, #7
 8009b16:	08c8      	lsrs	r0, r1, #3
 8009b18:	4770      	bx	lr
 8009b1a:	4608      	mov	r0, r1
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop

08009b20 <ai_array_get_data_byte_size>:
 8009b20:	b169      	cbz	r1, 8009b3e <ai_array_get_data_byte_size+0x1e>
 8009b22:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8009b26:	fb03 f101 	mul.w	r1, r3, r1
 8009b2a:	1dcb      	adds	r3, r1, #7
 8009b2c:	f023 0307 	bic.w	r3, r3, #7
 8009b30:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8009b34:	fa23 f000 	lsr.w	r0, r3, r0
 8009b38:	3007      	adds	r0, #7
 8009b3a:	08c0      	lsrs	r0, r0, #3
 8009b3c:	4770      	bx	lr
 8009b3e:	4608      	mov	r0, r1
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop

08009b44 <malloc>:
 8009b44:	4b02      	ldr	r3, [pc, #8]	; (8009b50 <malloc+0xc>)
 8009b46:	4601      	mov	r1, r0
 8009b48:	6818      	ldr	r0, [r3, #0]
 8009b4a:	f000 b82b 	b.w	8009ba4 <_malloc_r>
 8009b4e:	bf00      	nop
 8009b50:	2000100c 	.word	0x2000100c

08009b54 <free>:
 8009b54:	4b02      	ldr	r3, [pc, #8]	; (8009b60 <free+0xc>)
 8009b56:	4601      	mov	r1, r0
 8009b58:	6818      	ldr	r0, [r3, #0]
 8009b5a:	f001 bd47 	b.w	800b5ec <_free_r>
 8009b5e:	bf00      	nop
 8009b60:	2000100c 	.word	0x2000100c

08009b64 <sbrk_aligned>:
 8009b64:	b570      	push	{r4, r5, r6, lr}
 8009b66:	4e0e      	ldr	r6, [pc, #56]	; (8009ba0 <sbrk_aligned+0x3c>)
 8009b68:	460c      	mov	r4, r1
 8009b6a:	6831      	ldr	r1, [r6, #0]
 8009b6c:	4605      	mov	r5, r0
 8009b6e:	b911      	cbnz	r1, 8009b76 <sbrk_aligned+0x12>
 8009b70:	f000 fe62 	bl	800a838 <_sbrk_r>
 8009b74:	6030      	str	r0, [r6, #0]
 8009b76:	4621      	mov	r1, r4
 8009b78:	4628      	mov	r0, r5
 8009b7a:	f000 fe5d 	bl	800a838 <_sbrk_r>
 8009b7e:	1c43      	adds	r3, r0, #1
 8009b80:	d00a      	beq.n	8009b98 <sbrk_aligned+0x34>
 8009b82:	1cc4      	adds	r4, r0, #3
 8009b84:	f024 0403 	bic.w	r4, r4, #3
 8009b88:	42a0      	cmp	r0, r4
 8009b8a:	d007      	beq.n	8009b9c <sbrk_aligned+0x38>
 8009b8c:	1a21      	subs	r1, r4, r0
 8009b8e:	4628      	mov	r0, r5
 8009b90:	f000 fe52 	bl	800a838 <_sbrk_r>
 8009b94:	3001      	adds	r0, #1
 8009b96:	d101      	bne.n	8009b9c <sbrk_aligned+0x38>
 8009b98:	f04f 34ff 	mov.w	r4, #4294967295
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ba0:	20007b74 	.word	0x20007b74

08009ba4 <_malloc_r>:
 8009ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ba8:	1ccd      	adds	r5, r1, #3
 8009baa:	f025 0503 	bic.w	r5, r5, #3
 8009bae:	3508      	adds	r5, #8
 8009bb0:	2d0c      	cmp	r5, #12
 8009bb2:	bf38      	it	cc
 8009bb4:	250c      	movcc	r5, #12
 8009bb6:	2d00      	cmp	r5, #0
 8009bb8:	4607      	mov	r7, r0
 8009bba:	db01      	blt.n	8009bc0 <_malloc_r+0x1c>
 8009bbc:	42a9      	cmp	r1, r5
 8009bbe:	d905      	bls.n	8009bcc <_malloc_r+0x28>
 8009bc0:	230c      	movs	r3, #12
 8009bc2:	603b      	str	r3, [r7, #0]
 8009bc4:	2600      	movs	r6, #0
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009ca0 <_malloc_r+0xfc>
 8009bd0:	f000 f868 	bl	8009ca4 <__malloc_lock>
 8009bd4:	f8d8 3000 	ldr.w	r3, [r8]
 8009bd8:	461c      	mov	r4, r3
 8009bda:	bb5c      	cbnz	r4, 8009c34 <_malloc_r+0x90>
 8009bdc:	4629      	mov	r1, r5
 8009bde:	4638      	mov	r0, r7
 8009be0:	f7ff ffc0 	bl	8009b64 <sbrk_aligned>
 8009be4:	1c43      	adds	r3, r0, #1
 8009be6:	4604      	mov	r4, r0
 8009be8:	d155      	bne.n	8009c96 <_malloc_r+0xf2>
 8009bea:	f8d8 4000 	ldr.w	r4, [r8]
 8009bee:	4626      	mov	r6, r4
 8009bf0:	2e00      	cmp	r6, #0
 8009bf2:	d145      	bne.n	8009c80 <_malloc_r+0xdc>
 8009bf4:	2c00      	cmp	r4, #0
 8009bf6:	d048      	beq.n	8009c8a <_malloc_r+0xe6>
 8009bf8:	6823      	ldr	r3, [r4, #0]
 8009bfa:	4631      	mov	r1, r6
 8009bfc:	4638      	mov	r0, r7
 8009bfe:	eb04 0903 	add.w	r9, r4, r3
 8009c02:	f000 fe19 	bl	800a838 <_sbrk_r>
 8009c06:	4581      	cmp	r9, r0
 8009c08:	d13f      	bne.n	8009c8a <_malloc_r+0xe6>
 8009c0a:	6821      	ldr	r1, [r4, #0]
 8009c0c:	1a6d      	subs	r5, r5, r1
 8009c0e:	4629      	mov	r1, r5
 8009c10:	4638      	mov	r0, r7
 8009c12:	f7ff ffa7 	bl	8009b64 <sbrk_aligned>
 8009c16:	3001      	adds	r0, #1
 8009c18:	d037      	beq.n	8009c8a <_malloc_r+0xe6>
 8009c1a:	6823      	ldr	r3, [r4, #0]
 8009c1c:	442b      	add	r3, r5
 8009c1e:	6023      	str	r3, [r4, #0]
 8009c20:	f8d8 3000 	ldr.w	r3, [r8]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d038      	beq.n	8009c9a <_malloc_r+0xf6>
 8009c28:	685a      	ldr	r2, [r3, #4]
 8009c2a:	42a2      	cmp	r2, r4
 8009c2c:	d12b      	bne.n	8009c86 <_malloc_r+0xe2>
 8009c2e:	2200      	movs	r2, #0
 8009c30:	605a      	str	r2, [r3, #4]
 8009c32:	e00f      	b.n	8009c54 <_malloc_r+0xb0>
 8009c34:	6822      	ldr	r2, [r4, #0]
 8009c36:	1b52      	subs	r2, r2, r5
 8009c38:	d41f      	bmi.n	8009c7a <_malloc_r+0xd6>
 8009c3a:	2a0b      	cmp	r2, #11
 8009c3c:	d917      	bls.n	8009c6e <_malloc_r+0xca>
 8009c3e:	1961      	adds	r1, r4, r5
 8009c40:	42a3      	cmp	r3, r4
 8009c42:	6025      	str	r5, [r4, #0]
 8009c44:	bf18      	it	ne
 8009c46:	6059      	strne	r1, [r3, #4]
 8009c48:	6863      	ldr	r3, [r4, #4]
 8009c4a:	bf08      	it	eq
 8009c4c:	f8c8 1000 	streq.w	r1, [r8]
 8009c50:	5162      	str	r2, [r4, r5]
 8009c52:	604b      	str	r3, [r1, #4]
 8009c54:	4638      	mov	r0, r7
 8009c56:	f104 060b 	add.w	r6, r4, #11
 8009c5a:	f000 f829 	bl	8009cb0 <__malloc_unlock>
 8009c5e:	f026 0607 	bic.w	r6, r6, #7
 8009c62:	1d23      	adds	r3, r4, #4
 8009c64:	1af2      	subs	r2, r6, r3
 8009c66:	d0ae      	beq.n	8009bc6 <_malloc_r+0x22>
 8009c68:	1b9b      	subs	r3, r3, r6
 8009c6a:	50a3      	str	r3, [r4, r2]
 8009c6c:	e7ab      	b.n	8009bc6 <_malloc_r+0x22>
 8009c6e:	42a3      	cmp	r3, r4
 8009c70:	6862      	ldr	r2, [r4, #4]
 8009c72:	d1dd      	bne.n	8009c30 <_malloc_r+0x8c>
 8009c74:	f8c8 2000 	str.w	r2, [r8]
 8009c78:	e7ec      	b.n	8009c54 <_malloc_r+0xb0>
 8009c7a:	4623      	mov	r3, r4
 8009c7c:	6864      	ldr	r4, [r4, #4]
 8009c7e:	e7ac      	b.n	8009bda <_malloc_r+0x36>
 8009c80:	4634      	mov	r4, r6
 8009c82:	6876      	ldr	r6, [r6, #4]
 8009c84:	e7b4      	b.n	8009bf0 <_malloc_r+0x4c>
 8009c86:	4613      	mov	r3, r2
 8009c88:	e7cc      	b.n	8009c24 <_malloc_r+0x80>
 8009c8a:	230c      	movs	r3, #12
 8009c8c:	603b      	str	r3, [r7, #0]
 8009c8e:	4638      	mov	r0, r7
 8009c90:	f000 f80e 	bl	8009cb0 <__malloc_unlock>
 8009c94:	e797      	b.n	8009bc6 <_malloc_r+0x22>
 8009c96:	6025      	str	r5, [r4, #0]
 8009c98:	e7dc      	b.n	8009c54 <_malloc_r+0xb0>
 8009c9a:	605b      	str	r3, [r3, #4]
 8009c9c:	deff      	udf	#255	; 0xff
 8009c9e:	bf00      	nop
 8009ca0:	20007b70 	.word	0x20007b70

08009ca4 <__malloc_lock>:
 8009ca4:	4801      	ldr	r0, [pc, #4]	; (8009cac <__malloc_lock+0x8>)
 8009ca6:	f000 be14 	b.w	800a8d2 <__retarget_lock_acquire_recursive>
 8009caa:	bf00      	nop
 8009cac:	20007cb8 	.word	0x20007cb8

08009cb0 <__malloc_unlock>:
 8009cb0:	4801      	ldr	r0, [pc, #4]	; (8009cb8 <__malloc_unlock+0x8>)
 8009cb2:	f000 be0f 	b.w	800a8d4 <__retarget_lock_release_recursive>
 8009cb6:	bf00      	nop
 8009cb8:	20007cb8 	.word	0x20007cb8

08009cbc <__cvt>:
 8009cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc0:	ec55 4b10 	vmov	r4, r5, d0
 8009cc4:	2d00      	cmp	r5, #0
 8009cc6:	460e      	mov	r6, r1
 8009cc8:	4619      	mov	r1, r3
 8009cca:	462b      	mov	r3, r5
 8009ccc:	bfbb      	ittet	lt
 8009cce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009cd2:	461d      	movlt	r5, r3
 8009cd4:	2300      	movge	r3, #0
 8009cd6:	232d      	movlt	r3, #45	; 0x2d
 8009cd8:	700b      	strb	r3, [r1, #0]
 8009cda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cdc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009ce0:	4691      	mov	r9, r2
 8009ce2:	f023 0820 	bic.w	r8, r3, #32
 8009ce6:	bfbc      	itt	lt
 8009ce8:	4622      	movlt	r2, r4
 8009cea:	4614      	movlt	r4, r2
 8009cec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009cf0:	d005      	beq.n	8009cfe <__cvt+0x42>
 8009cf2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009cf6:	d100      	bne.n	8009cfa <__cvt+0x3e>
 8009cf8:	3601      	adds	r6, #1
 8009cfa:	2102      	movs	r1, #2
 8009cfc:	e000      	b.n	8009d00 <__cvt+0x44>
 8009cfe:	2103      	movs	r1, #3
 8009d00:	ab03      	add	r3, sp, #12
 8009d02:	9301      	str	r3, [sp, #4]
 8009d04:	ab02      	add	r3, sp, #8
 8009d06:	9300      	str	r3, [sp, #0]
 8009d08:	ec45 4b10 	vmov	d0, r4, r5
 8009d0c:	4653      	mov	r3, sl
 8009d0e:	4632      	mov	r2, r6
 8009d10:	f000 fe7a 	bl	800aa08 <_dtoa_r>
 8009d14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009d18:	4607      	mov	r7, r0
 8009d1a:	d102      	bne.n	8009d22 <__cvt+0x66>
 8009d1c:	f019 0f01 	tst.w	r9, #1
 8009d20:	d022      	beq.n	8009d68 <__cvt+0xac>
 8009d22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d26:	eb07 0906 	add.w	r9, r7, r6
 8009d2a:	d110      	bne.n	8009d4e <__cvt+0x92>
 8009d2c:	783b      	ldrb	r3, [r7, #0]
 8009d2e:	2b30      	cmp	r3, #48	; 0x30
 8009d30:	d10a      	bne.n	8009d48 <__cvt+0x8c>
 8009d32:	2200      	movs	r2, #0
 8009d34:	2300      	movs	r3, #0
 8009d36:	4620      	mov	r0, r4
 8009d38:	4629      	mov	r1, r5
 8009d3a:	f7f6 fec5 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d3e:	b918      	cbnz	r0, 8009d48 <__cvt+0x8c>
 8009d40:	f1c6 0601 	rsb	r6, r6, #1
 8009d44:	f8ca 6000 	str.w	r6, [sl]
 8009d48:	f8da 3000 	ldr.w	r3, [sl]
 8009d4c:	4499      	add	r9, r3
 8009d4e:	2200      	movs	r2, #0
 8009d50:	2300      	movs	r3, #0
 8009d52:	4620      	mov	r0, r4
 8009d54:	4629      	mov	r1, r5
 8009d56:	f7f6 feb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d5a:	b108      	cbz	r0, 8009d60 <__cvt+0xa4>
 8009d5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009d60:	2230      	movs	r2, #48	; 0x30
 8009d62:	9b03      	ldr	r3, [sp, #12]
 8009d64:	454b      	cmp	r3, r9
 8009d66:	d307      	bcc.n	8009d78 <__cvt+0xbc>
 8009d68:	9b03      	ldr	r3, [sp, #12]
 8009d6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d6c:	1bdb      	subs	r3, r3, r7
 8009d6e:	4638      	mov	r0, r7
 8009d70:	6013      	str	r3, [r2, #0]
 8009d72:	b004      	add	sp, #16
 8009d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d78:	1c59      	adds	r1, r3, #1
 8009d7a:	9103      	str	r1, [sp, #12]
 8009d7c:	701a      	strb	r2, [r3, #0]
 8009d7e:	e7f0      	b.n	8009d62 <__cvt+0xa6>

08009d80 <__exponent>:
 8009d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d82:	4603      	mov	r3, r0
 8009d84:	2900      	cmp	r1, #0
 8009d86:	bfb8      	it	lt
 8009d88:	4249      	neglt	r1, r1
 8009d8a:	f803 2b02 	strb.w	r2, [r3], #2
 8009d8e:	bfb4      	ite	lt
 8009d90:	222d      	movlt	r2, #45	; 0x2d
 8009d92:	222b      	movge	r2, #43	; 0x2b
 8009d94:	2909      	cmp	r1, #9
 8009d96:	7042      	strb	r2, [r0, #1]
 8009d98:	dd2a      	ble.n	8009df0 <__exponent+0x70>
 8009d9a:	f10d 0207 	add.w	r2, sp, #7
 8009d9e:	4617      	mov	r7, r2
 8009da0:	260a      	movs	r6, #10
 8009da2:	4694      	mov	ip, r2
 8009da4:	fb91 f5f6 	sdiv	r5, r1, r6
 8009da8:	fb06 1415 	mls	r4, r6, r5, r1
 8009dac:	3430      	adds	r4, #48	; 0x30
 8009dae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009db2:	460c      	mov	r4, r1
 8009db4:	2c63      	cmp	r4, #99	; 0x63
 8009db6:	f102 32ff 	add.w	r2, r2, #4294967295
 8009dba:	4629      	mov	r1, r5
 8009dbc:	dcf1      	bgt.n	8009da2 <__exponent+0x22>
 8009dbe:	3130      	adds	r1, #48	; 0x30
 8009dc0:	f1ac 0402 	sub.w	r4, ip, #2
 8009dc4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009dc8:	1c41      	adds	r1, r0, #1
 8009dca:	4622      	mov	r2, r4
 8009dcc:	42ba      	cmp	r2, r7
 8009dce:	d30a      	bcc.n	8009de6 <__exponent+0x66>
 8009dd0:	f10d 0209 	add.w	r2, sp, #9
 8009dd4:	eba2 020c 	sub.w	r2, r2, ip
 8009dd8:	42bc      	cmp	r4, r7
 8009dda:	bf88      	it	hi
 8009ddc:	2200      	movhi	r2, #0
 8009dde:	4413      	add	r3, r2
 8009de0:	1a18      	subs	r0, r3, r0
 8009de2:	b003      	add	sp, #12
 8009de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009de6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009dea:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009dee:	e7ed      	b.n	8009dcc <__exponent+0x4c>
 8009df0:	2330      	movs	r3, #48	; 0x30
 8009df2:	3130      	adds	r1, #48	; 0x30
 8009df4:	7083      	strb	r3, [r0, #2]
 8009df6:	70c1      	strb	r1, [r0, #3]
 8009df8:	1d03      	adds	r3, r0, #4
 8009dfa:	e7f1      	b.n	8009de0 <__exponent+0x60>

08009dfc <_printf_float>:
 8009dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e00:	ed2d 8b02 	vpush	{d8}
 8009e04:	b08d      	sub	sp, #52	; 0x34
 8009e06:	460c      	mov	r4, r1
 8009e08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009e0c:	4616      	mov	r6, r2
 8009e0e:	461f      	mov	r7, r3
 8009e10:	4605      	mov	r5, r0
 8009e12:	f000 fcd9 	bl	800a7c8 <_localeconv_r>
 8009e16:	f8d0 a000 	ldr.w	sl, [r0]
 8009e1a:	4650      	mov	r0, sl
 8009e1c:	f7f6 fa28 	bl	8000270 <strlen>
 8009e20:	2300      	movs	r3, #0
 8009e22:	930a      	str	r3, [sp, #40]	; 0x28
 8009e24:	6823      	ldr	r3, [r4, #0]
 8009e26:	9305      	str	r3, [sp, #20]
 8009e28:	f8d8 3000 	ldr.w	r3, [r8]
 8009e2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009e30:	3307      	adds	r3, #7
 8009e32:	f023 0307 	bic.w	r3, r3, #7
 8009e36:	f103 0208 	add.w	r2, r3, #8
 8009e3a:	f8c8 2000 	str.w	r2, [r8]
 8009e3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e46:	9307      	str	r3, [sp, #28]
 8009e48:	f8cd 8018 	str.w	r8, [sp, #24]
 8009e4c:	ee08 0a10 	vmov	s16, r0
 8009e50:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009e54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e58:	4b9e      	ldr	r3, [pc, #632]	; (800a0d4 <_printf_float+0x2d8>)
 8009e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e5e:	f7f6 fe65 	bl	8000b2c <__aeabi_dcmpun>
 8009e62:	bb88      	cbnz	r0, 8009ec8 <_printf_float+0xcc>
 8009e64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e68:	4b9a      	ldr	r3, [pc, #616]	; (800a0d4 <_printf_float+0x2d8>)
 8009e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e6e:	f7f6 fe3f 	bl	8000af0 <__aeabi_dcmple>
 8009e72:	bb48      	cbnz	r0, 8009ec8 <_printf_float+0xcc>
 8009e74:	2200      	movs	r2, #0
 8009e76:	2300      	movs	r3, #0
 8009e78:	4640      	mov	r0, r8
 8009e7a:	4649      	mov	r1, r9
 8009e7c:	f7f6 fe2e 	bl	8000adc <__aeabi_dcmplt>
 8009e80:	b110      	cbz	r0, 8009e88 <_printf_float+0x8c>
 8009e82:	232d      	movs	r3, #45	; 0x2d
 8009e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e88:	4a93      	ldr	r2, [pc, #588]	; (800a0d8 <_printf_float+0x2dc>)
 8009e8a:	4b94      	ldr	r3, [pc, #592]	; (800a0dc <_printf_float+0x2e0>)
 8009e8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009e90:	bf94      	ite	ls
 8009e92:	4690      	movls	r8, r2
 8009e94:	4698      	movhi	r8, r3
 8009e96:	2303      	movs	r3, #3
 8009e98:	6123      	str	r3, [r4, #16]
 8009e9a:	9b05      	ldr	r3, [sp, #20]
 8009e9c:	f023 0304 	bic.w	r3, r3, #4
 8009ea0:	6023      	str	r3, [r4, #0]
 8009ea2:	f04f 0900 	mov.w	r9, #0
 8009ea6:	9700      	str	r7, [sp, #0]
 8009ea8:	4633      	mov	r3, r6
 8009eaa:	aa0b      	add	r2, sp, #44	; 0x2c
 8009eac:	4621      	mov	r1, r4
 8009eae:	4628      	mov	r0, r5
 8009eb0:	f000 f9da 	bl	800a268 <_printf_common>
 8009eb4:	3001      	adds	r0, #1
 8009eb6:	f040 8090 	bne.w	8009fda <_printf_float+0x1de>
 8009eba:	f04f 30ff 	mov.w	r0, #4294967295
 8009ebe:	b00d      	add	sp, #52	; 0x34
 8009ec0:	ecbd 8b02 	vpop	{d8}
 8009ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec8:	4642      	mov	r2, r8
 8009eca:	464b      	mov	r3, r9
 8009ecc:	4640      	mov	r0, r8
 8009ece:	4649      	mov	r1, r9
 8009ed0:	f7f6 fe2c 	bl	8000b2c <__aeabi_dcmpun>
 8009ed4:	b140      	cbz	r0, 8009ee8 <_printf_float+0xec>
 8009ed6:	464b      	mov	r3, r9
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	bfbc      	itt	lt
 8009edc:	232d      	movlt	r3, #45	; 0x2d
 8009ede:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009ee2:	4a7f      	ldr	r2, [pc, #508]	; (800a0e0 <_printf_float+0x2e4>)
 8009ee4:	4b7f      	ldr	r3, [pc, #508]	; (800a0e4 <_printf_float+0x2e8>)
 8009ee6:	e7d1      	b.n	8009e8c <_printf_float+0x90>
 8009ee8:	6863      	ldr	r3, [r4, #4]
 8009eea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009eee:	9206      	str	r2, [sp, #24]
 8009ef0:	1c5a      	adds	r2, r3, #1
 8009ef2:	d13f      	bne.n	8009f74 <_printf_float+0x178>
 8009ef4:	2306      	movs	r3, #6
 8009ef6:	6063      	str	r3, [r4, #4]
 8009ef8:	9b05      	ldr	r3, [sp, #20]
 8009efa:	6861      	ldr	r1, [r4, #4]
 8009efc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009f00:	2300      	movs	r3, #0
 8009f02:	9303      	str	r3, [sp, #12]
 8009f04:	ab0a      	add	r3, sp, #40	; 0x28
 8009f06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009f0a:	ab09      	add	r3, sp, #36	; 0x24
 8009f0c:	ec49 8b10 	vmov	d0, r8, r9
 8009f10:	9300      	str	r3, [sp, #0]
 8009f12:	6022      	str	r2, [r4, #0]
 8009f14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009f18:	4628      	mov	r0, r5
 8009f1a:	f7ff fecf 	bl	8009cbc <__cvt>
 8009f1e:	9b06      	ldr	r3, [sp, #24]
 8009f20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f22:	2b47      	cmp	r3, #71	; 0x47
 8009f24:	4680      	mov	r8, r0
 8009f26:	d108      	bne.n	8009f3a <_printf_float+0x13e>
 8009f28:	1cc8      	adds	r0, r1, #3
 8009f2a:	db02      	blt.n	8009f32 <_printf_float+0x136>
 8009f2c:	6863      	ldr	r3, [r4, #4]
 8009f2e:	4299      	cmp	r1, r3
 8009f30:	dd41      	ble.n	8009fb6 <_printf_float+0x1ba>
 8009f32:	f1ab 0302 	sub.w	r3, fp, #2
 8009f36:	fa5f fb83 	uxtb.w	fp, r3
 8009f3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009f3e:	d820      	bhi.n	8009f82 <_printf_float+0x186>
 8009f40:	3901      	subs	r1, #1
 8009f42:	465a      	mov	r2, fp
 8009f44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009f48:	9109      	str	r1, [sp, #36]	; 0x24
 8009f4a:	f7ff ff19 	bl	8009d80 <__exponent>
 8009f4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f50:	1813      	adds	r3, r2, r0
 8009f52:	2a01      	cmp	r2, #1
 8009f54:	4681      	mov	r9, r0
 8009f56:	6123      	str	r3, [r4, #16]
 8009f58:	dc02      	bgt.n	8009f60 <_printf_float+0x164>
 8009f5a:	6822      	ldr	r2, [r4, #0]
 8009f5c:	07d2      	lsls	r2, r2, #31
 8009f5e:	d501      	bpl.n	8009f64 <_printf_float+0x168>
 8009f60:	3301      	adds	r3, #1
 8009f62:	6123      	str	r3, [r4, #16]
 8009f64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d09c      	beq.n	8009ea6 <_printf_float+0xaa>
 8009f6c:	232d      	movs	r3, #45	; 0x2d
 8009f6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f72:	e798      	b.n	8009ea6 <_printf_float+0xaa>
 8009f74:	9a06      	ldr	r2, [sp, #24]
 8009f76:	2a47      	cmp	r2, #71	; 0x47
 8009f78:	d1be      	bne.n	8009ef8 <_printf_float+0xfc>
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d1bc      	bne.n	8009ef8 <_printf_float+0xfc>
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e7b9      	b.n	8009ef6 <_printf_float+0xfa>
 8009f82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009f86:	d118      	bne.n	8009fba <_printf_float+0x1be>
 8009f88:	2900      	cmp	r1, #0
 8009f8a:	6863      	ldr	r3, [r4, #4]
 8009f8c:	dd0b      	ble.n	8009fa6 <_printf_float+0x1aa>
 8009f8e:	6121      	str	r1, [r4, #16]
 8009f90:	b913      	cbnz	r3, 8009f98 <_printf_float+0x19c>
 8009f92:	6822      	ldr	r2, [r4, #0]
 8009f94:	07d0      	lsls	r0, r2, #31
 8009f96:	d502      	bpl.n	8009f9e <_printf_float+0x1a2>
 8009f98:	3301      	adds	r3, #1
 8009f9a:	440b      	add	r3, r1
 8009f9c:	6123      	str	r3, [r4, #16]
 8009f9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009fa0:	f04f 0900 	mov.w	r9, #0
 8009fa4:	e7de      	b.n	8009f64 <_printf_float+0x168>
 8009fa6:	b913      	cbnz	r3, 8009fae <_printf_float+0x1b2>
 8009fa8:	6822      	ldr	r2, [r4, #0]
 8009faa:	07d2      	lsls	r2, r2, #31
 8009fac:	d501      	bpl.n	8009fb2 <_printf_float+0x1b6>
 8009fae:	3302      	adds	r3, #2
 8009fb0:	e7f4      	b.n	8009f9c <_printf_float+0x1a0>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e7f2      	b.n	8009f9c <_printf_float+0x1a0>
 8009fb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fbc:	4299      	cmp	r1, r3
 8009fbe:	db05      	blt.n	8009fcc <_printf_float+0x1d0>
 8009fc0:	6823      	ldr	r3, [r4, #0]
 8009fc2:	6121      	str	r1, [r4, #16]
 8009fc4:	07d8      	lsls	r0, r3, #31
 8009fc6:	d5ea      	bpl.n	8009f9e <_printf_float+0x1a2>
 8009fc8:	1c4b      	adds	r3, r1, #1
 8009fca:	e7e7      	b.n	8009f9c <_printf_float+0x1a0>
 8009fcc:	2900      	cmp	r1, #0
 8009fce:	bfd4      	ite	le
 8009fd0:	f1c1 0202 	rsble	r2, r1, #2
 8009fd4:	2201      	movgt	r2, #1
 8009fd6:	4413      	add	r3, r2
 8009fd8:	e7e0      	b.n	8009f9c <_printf_float+0x1a0>
 8009fda:	6823      	ldr	r3, [r4, #0]
 8009fdc:	055a      	lsls	r2, r3, #21
 8009fde:	d407      	bmi.n	8009ff0 <_printf_float+0x1f4>
 8009fe0:	6923      	ldr	r3, [r4, #16]
 8009fe2:	4642      	mov	r2, r8
 8009fe4:	4631      	mov	r1, r6
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	47b8      	blx	r7
 8009fea:	3001      	adds	r0, #1
 8009fec:	d12c      	bne.n	800a048 <_printf_float+0x24c>
 8009fee:	e764      	b.n	8009eba <_printf_float+0xbe>
 8009ff0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ff4:	f240 80e0 	bls.w	800a1b8 <_printf_float+0x3bc>
 8009ff8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	2300      	movs	r3, #0
 800a000:	f7f6 fd62 	bl	8000ac8 <__aeabi_dcmpeq>
 800a004:	2800      	cmp	r0, #0
 800a006:	d034      	beq.n	800a072 <_printf_float+0x276>
 800a008:	4a37      	ldr	r2, [pc, #220]	; (800a0e8 <_printf_float+0x2ec>)
 800a00a:	2301      	movs	r3, #1
 800a00c:	4631      	mov	r1, r6
 800a00e:	4628      	mov	r0, r5
 800a010:	47b8      	blx	r7
 800a012:	3001      	adds	r0, #1
 800a014:	f43f af51 	beq.w	8009eba <_printf_float+0xbe>
 800a018:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a01c:	429a      	cmp	r2, r3
 800a01e:	db02      	blt.n	800a026 <_printf_float+0x22a>
 800a020:	6823      	ldr	r3, [r4, #0]
 800a022:	07d8      	lsls	r0, r3, #31
 800a024:	d510      	bpl.n	800a048 <_printf_float+0x24c>
 800a026:	ee18 3a10 	vmov	r3, s16
 800a02a:	4652      	mov	r2, sl
 800a02c:	4631      	mov	r1, r6
 800a02e:	4628      	mov	r0, r5
 800a030:	47b8      	blx	r7
 800a032:	3001      	adds	r0, #1
 800a034:	f43f af41 	beq.w	8009eba <_printf_float+0xbe>
 800a038:	f04f 0800 	mov.w	r8, #0
 800a03c:	f104 091a 	add.w	r9, r4, #26
 800a040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a042:	3b01      	subs	r3, #1
 800a044:	4543      	cmp	r3, r8
 800a046:	dc09      	bgt.n	800a05c <_printf_float+0x260>
 800a048:	6823      	ldr	r3, [r4, #0]
 800a04a:	079b      	lsls	r3, r3, #30
 800a04c:	f100 8107 	bmi.w	800a25e <_printf_float+0x462>
 800a050:	68e0      	ldr	r0, [r4, #12]
 800a052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a054:	4298      	cmp	r0, r3
 800a056:	bfb8      	it	lt
 800a058:	4618      	movlt	r0, r3
 800a05a:	e730      	b.n	8009ebe <_printf_float+0xc2>
 800a05c:	2301      	movs	r3, #1
 800a05e:	464a      	mov	r2, r9
 800a060:	4631      	mov	r1, r6
 800a062:	4628      	mov	r0, r5
 800a064:	47b8      	blx	r7
 800a066:	3001      	adds	r0, #1
 800a068:	f43f af27 	beq.w	8009eba <_printf_float+0xbe>
 800a06c:	f108 0801 	add.w	r8, r8, #1
 800a070:	e7e6      	b.n	800a040 <_printf_float+0x244>
 800a072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a074:	2b00      	cmp	r3, #0
 800a076:	dc39      	bgt.n	800a0ec <_printf_float+0x2f0>
 800a078:	4a1b      	ldr	r2, [pc, #108]	; (800a0e8 <_printf_float+0x2ec>)
 800a07a:	2301      	movs	r3, #1
 800a07c:	4631      	mov	r1, r6
 800a07e:	4628      	mov	r0, r5
 800a080:	47b8      	blx	r7
 800a082:	3001      	adds	r0, #1
 800a084:	f43f af19 	beq.w	8009eba <_printf_float+0xbe>
 800a088:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a08c:	4313      	orrs	r3, r2
 800a08e:	d102      	bne.n	800a096 <_printf_float+0x29a>
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	07d9      	lsls	r1, r3, #31
 800a094:	d5d8      	bpl.n	800a048 <_printf_float+0x24c>
 800a096:	ee18 3a10 	vmov	r3, s16
 800a09a:	4652      	mov	r2, sl
 800a09c:	4631      	mov	r1, r6
 800a09e:	4628      	mov	r0, r5
 800a0a0:	47b8      	blx	r7
 800a0a2:	3001      	adds	r0, #1
 800a0a4:	f43f af09 	beq.w	8009eba <_printf_float+0xbe>
 800a0a8:	f04f 0900 	mov.w	r9, #0
 800a0ac:	f104 0a1a 	add.w	sl, r4, #26
 800a0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0b2:	425b      	negs	r3, r3
 800a0b4:	454b      	cmp	r3, r9
 800a0b6:	dc01      	bgt.n	800a0bc <_printf_float+0x2c0>
 800a0b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0ba:	e792      	b.n	8009fe2 <_printf_float+0x1e6>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	4652      	mov	r2, sl
 800a0c0:	4631      	mov	r1, r6
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	47b8      	blx	r7
 800a0c6:	3001      	adds	r0, #1
 800a0c8:	f43f aef7 	beq.w	8009eba <_printf_float+0xbe>
 800a0cc:	f109 0901 	add.w	r9, r9, #1
 800a0d0:	e7ee      	b.n	800a0b0 <_printf_float+0x2b4>
 800a0d2:	bf00      	nop
 800a0d4:	7fefffff 	.word	0x7fefffff
 800a0d8:	0802070c 	.word	0x0802070c
 800a0dc:	08020710 	.word	0x08020710
 800a0e0:	08020714 	.word	0x08020714
 800a0e4:	08020718 	.word	0x08020718
 800a0e8:	0800d1e5 	.word	0x0800d1e5
 800a0ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	bfa8      	it	ge
 800a0f4:	461a      	movge	r2, r3
 800a0f6:	2a00      	cmp	r2, #0
 800a0f8:	4691      	mov	r9, r2
 800a0fa:	dc37      	bgt.n	800a16c <_printf_float+0x370>
 800a0fc:	f04f 0b00 	mov.w	fp, #0
 800a100:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a104:	f104 021a 	add.w	r2, r4, #26
 800a108:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a10a:	9305      	str	r3, [sp, #20]
 800a10c:	eba3 0309 	sub.w	r3, r3, r9
 800a110:	455b      	cmp	r3, fp
 800a112:	dc33      	bgt.n	800a17c <_printf_float+0x380>
 800a114:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a118:	429a      	cmp	r2, r3
 800a11a:	db3b      	blt.n	800a194 <_printf_float+0x398>
 800a11c:	6823      	ldr	r3, [r4, #0]
 800a11e:	07da      	lsls	r2, r3, #31
 800a120:	d438      	bmi.n	800a194 <_printf_float+0x398>
 800a122:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a126:	eba2 0903 	sub.w	r9, r2, r3
 800a12a:	9b05      	ldr	r3, [sp, #20]
 800a12c:	1ad2      	subs	r2, r2, r3
 800a12e:	4591      	cmp	r9, r2
 800a130:	bfa8      	it	ge
 800a132:	4691      	movge	r9, r2
 800a134:	f1b9 0f00 	cmp.w	r9, #0
 800a138:	dc35      	bgt.n	800a1a6 <_printf_float+0x3aa>
 800a13a:	f04f 0800 	mov.w	r8, #0
 800a13e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a142:	f104 0a1a 	add.w	sl, r4, #26
 800a146:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a14a:	1a9b      	subs	r3, r3, r2
 800a14c:	eba3 0309 	sub.w	r3, r3, r9
 800a150:	4543      	cmp	r3, r8
 800a152:	f77f af79 	ble.w	800a048 <_printf_float+0x24c>
 800a156:	2301      	movs	r3, #1
 800a158:	4652      	mov	r2, sl
 800a15a:	4631      	mov	r1, r6
 800a15c:	4628      	mov	r0, r5
 800a15e:	47b8      	blx	r7
 800a160:	3001      	adds	r0, #1
 800a162:	f43f aeaa 	beq.w	8009eba <_printf_float+0xbe>
 800a166:	f108 0801 	add.w	r8, r8, #1
 800a16a:	e7ec      	b.n	800a146 <_printf_float+0x34a>
 800a16c:	4613      	mov	r3, r2
 800a16e:	4631      	mov	r1, r6
 800a170:	4642      	mov	r2, r8
 800a172:	4628      	mov	r0, r5
 800a174:	47b8      	blx	r7
 800a176:	3001      	adds	r0, #1
 800a178:	d1c0      	bne.n	800a0fc <_printf_float+0x300>
 800a17a:	e69e      	b.n	8009eba <_printf_float+0xbe>
 800a17c:	2301      	movs	r3, #1
 800a17e:	4631      	mov	r1, r6
 800a180:	4628      	mov	r0, r5
 800a182:	9205      	str	r2, [sp, #20]
 800a184:	47b8      	blx	r7
 800a186:	3001      	adds	r0, #1
 800a188:	f43f ae97 	beq.w	8009eba <_printf_float+0xbe>
 800a18c:	9a05      	ldr	r2, [sp, #20]
 800a18e:	f10b 0b01 	add.w	fp, fp, #1
 800a192:	e7b9      	b.n	800a108 <_printf_float+0x30c>
 800a194:	ee18 3a10 	vmov	r3, s16
 800a198:	4652      	mov	r2, sl
 800a19a:	4631      	mov	r1, r6
 800a19c:	4628      	mov	r0, r5
 800a19e:	47b8      	blx	r7
 800a1a0:	3001      	adds	r0, #1
 800a1a2:	d1be      	bne.n	800a122 <_printf_float+0x326>
 800a1a4:	e689      	b.n	8009eba <_printf_float+0xbe>
 800a1a6:	9a05      	ldr	r2, [sp, #20]
 800a1a8:	464b      	mov	r3, r9
 800a1aa:	4442      	add	r2, r8
 800a1ac:	4631      	mov	r1, r6
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	47b8      	blx	r7
 800a1b2:	3001      	adds	r0, #1
 800a1b4:	d1c1      	bne.n	800a13a <_printf_float+0x33e>
 800a1b6:	e680      	b.n	8009eba <_printf_float+0xbe>
 800a1b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1ba:	2a01      	cmp	r2, #1
 800a1bc:	dc01      	bgt.n	800a1c2 <_printf_float+0x3c6>
 800a1be:	07db      	lsls	r3, r3, #31
 800a1c0:	d53a      	bpl.n	800a238 <_printf_float+0x43c>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	4642      	mov	r2, r8
 800a1c6:	4631      	mov	r1, r6
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	47b8      	blx	r7
 800a1cc:	3001      	adds	r0, #1
 800a1ce:	f43f ae74 	beq.w	8009eba <_printf_float+0xbe>
 800a1d2:	ee18 3a10 	vmov	r3, s16
 800a1d6:	4652      	mov	r2, sl
 800a1d8:	4631      	mov	r1, r6
 800a1da:	4628      	mov	r0, r5
 800a1dc:	47b8      	blx	r7
 800a1de:	3001      	adds	r0, #1
 800a1e0:	f43f ae6b 	beq.w	8009eba <_printf_float+0xbe>
 800a1e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a1f0:	f7f6 fc6a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1f4:	b9d8      	cbnz	r0, 800a22e <_printf_float+0x432>
 800a1f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a1fa:	f108 0201 	add.w	r2, r8, #1
 800a1fe:	4631      	mov	r1, r6
 800a200:	4628      	mov	r0, r5
 800a202:	47b8      	blx	r7
 800a204:	3001      	adds	r0, #1
 800a206:	d10e      	bne.n	800a226 <_printf_float+0x42a>
 800a208:	e657      	b.n	8009eba <_printf_float+0xbe>
 800a20a:	2301      	movs	r3, #1
 800a20c:	4652      	mov	r2, sl
 800a20e:	4631      	mov	r1, r6
 800a210:	4628      	mov	r0, r5
 800a212:	47b8      	blx	r7
 800a214:	3001      	adds	r0, #1
 800a216:	f43f ae50 	beq.w	8009eba <_printf_float+0xbe>
 800a21a:	f108 0801 	add.w	r8, r8, #1
 800a21e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a220:	3b01      	subs	r3, #1
 800a222:	4543      	cmp	r3, r8
 800a224:	dcf1      	bgt.n	800a20a <_printf_float+0x40e>
 800a226:	464b      	mov	r3, r9
 800a228:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a22c:	e6da      	b.n	8009fe4 <_printf_float+0x1e8>
 800a22e:	f04f 0800 	mov.w	r8, #0
 800a232:	f104 0a1a 	add.w	sl, r4, #26
 800a236:	e7f2      	b.n	800a21e <_printf_float+0x422>
 800a238:	2301      	movs	r3, #1
 800a23a:	4642      	mov	r2, r8
 800a23c:	e7df      	b.n	800a1fe <_printf_float+0x402>
 800a23e:	2301      	movs	r3, #1
 800a240:	464a      	mov	r2, r9
 800a242:	4631      	mov	r1, r6
 800a244:	4628      	mov	r0, r5
 800a246:	47b8      	blx	r7
 800a248:	3001      	adds	r0, #1
 800a24a:	f43f ae36 	beq.w	8009eba <_printf_float+0xbe>
 800a24e:	f108 0801 	add.w	r8, r8, #1
 800a252:	68e3      	ldr	r3, [r4, #12]
 800a254:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a256:	1a5b      	subs	r3, r3, r1
 800a258:	4543      	cmp	r3, r8
 800a25a:	dcf0      	bgt.n	800a23e <_printf_float+0x442>
 800a25c:	e6f8      	b.n	800a050 <_printf_float+0x254>
 800a25e:	f04f 0800 	mov.w	r8, #0
 800a262:	f104 0919 	add.w	r9, r4, #25
 800a266:	e7f4      	b.n	800a252 <_printf_float+0x456>

0800a268 <_printf_common>:
 800a268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a26c:	4616      	mov	r6, r2
 800a26e:	4699      	mov	r9, r3
 800a270:	688a      	ldr	r2, [r1, #8]
 800a272:	690b      	ldr	r3, [r1, #16]
 800a274:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a278:	4293      	cmp	r3, r2
 800a27a:	bfb8      	it	lt
 800a27c:	4613      	movlt	r3, r2
 800a27e:	6033      	str	r3, [r6, #0]
 800a280:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a284:	4607      	mov	r7, r0
 800a286:	460c      	mov	r4, r1
 800a288:	b10a      	cbz	r2, 800a28e <_printf_common+0x26>
 800a28a:	3301      	adds	r3, #1
 800a28c:	6033      	str	r3, [r6, #0]
 800a28e:	6823      	ldr	r3, [r4, #0]
 800a290:	0699      	lsls	r1, r3, #26
 800a292:	bf42      	ittt	mi
 800a294:	6833      	ldrmi	r3, [r6, #0]
 800a296:	3302      	addmi	r3, #2
 800a298:	6033      	strmi	r3, [r6, #0]
 800a29a:	6825      	ldr	r5, [r4, #0]
 800a29c:	f015 0506 	ands.w	r5, r5, #6
 800a2a0:	d106      	bne.n	800a2b0 <_printf_common+0x48>
 800a2a2:	f104 0a19 	add.w	sl, r4, #25
 800a2a6:	68e3      	ldr	r3, [r4, #12]
 800a2a8:	6832      	ldr	r2, [r6, #0]
 800a2aa:	1a9b      	subs	r3, r3, r2
 800a2ac:	42ab      	cmp	r3, r5
 800a2ae:	dc26      	bgt.n	800a2fe <_printf_common+0x96>
 800a2b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a2b4:	1e13      	subs	r3, r2, #0
 800a2b6:	6822      	ldr	r2, [r4, #0]
 800a2b8:	bf18      	it	ne
 800a2ba:	2301      	movne	r3, #1
 800a2bc:	0692      	lsls	r2, r2, #26
 800a2be:	d42b      	bmi.n	800a318 <_printf_common+0xb0>
 800a2c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2c4:	4649      	mov	r1, r9
 800a2c6:	4638      	mov	r0, r7
 800a2c8:	47c0      	blx	r8
 800a2ca:	3001      	adds	r0, #1
 800a2cc:	d01e      	beq.n	800a30c <_printf_common+0xa4>
 800a2ce:	6823      	ldr	r3, [r4, #0]
 800a2d0:	6922      	ldr	r2, [r4, #16]
 800a2d2:	f003 0306 	and.w	r3, r3, #6
 800a2d6:	2b04      	cmp	r3, #4
 800a2d8:	bf02      	ittt	eq
 800a2da:	68e5      	ldreq	r5, [r4, #12]
 800a2dc:	6833      	ldreq	r3, [r6, #0]
 800a2de:	1aed      	subeq	r5, r5, r3
 800a2e0:	68a3      	ldr	r3, [r4, #8]
 800a2e2:	bf0c      	ite	eq
 800a2e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2e8:	2500      	movne	r5, #0
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	bfc4      	itt	gt
 800a2ee:	1a9b      	subgt	r3, r3, r2
 800a2f0:	18ed      	addgt	r5, r5, r3
 800a2f2:	2600      	movs	r6, #0
 800a2f4:	341a      	adds	r4, #26
 800a2f6:	42b5      	cmp	r5, r6
 800a2f8:	d11a      	bne.n	800a330 <_printf_common+0xc8>
 800a2fa:	2000      	movs	r0, #0
 800a2fc:	e008      	b.n	800a310 <_printf_common+0xa8>
 800a2fe:	2301      	movs	r3, #1
 800a300:	4652      	mov	r2, sl
 800a302:	4649      	mov	r1, r9
 800a304:	4638      	mov	r0, r7
 800a306:	47c0      	blx	r8
 800a308:	3001      	adds	r0, #1
 800a30a:	d103      	bne.n	800a314 <_printf_common+0xac>
 800a30c:	f04f 30ff 	mov.w	r0, #4294967295
 800a310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a314:	3501      	adds	r5, #1
 800a316:	e7c6      	b.n	800a2a6 <_printf_common+0x3e>
 800a318:	18e1      	adds	r1, r4, r3
 800a31a:	1c5a      	adds	r2, r3, #1
 800a31c:	2030      	movs	r0, #48	; 0x30
 800a31e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a322:	4422      	add	r2, r4
 800a324:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a328:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a32c:	3302      	adds	r3, #2
 800a32e:	e7c7      	b.n	800a2c0 <_printf_common+0x58>
 800a330:	2301      	movs	r3, #1
 800a332:	4622      	mov	r2, r4
 800a334:	4649      	mov	r1, r9
 800a336:	4638      	mov	r0, r7
 800a338:	47c0      	blx	r8
 800a33a:	3001      	adds	r0, #1
 800a33c:	d0e6      	beq.n	800a30c <_printf_common+0xa4>
 800a33e:	3601      	adds	r6, #1
 800a340:	e7d9      	b.n	800a2f6 <_printf_common+0x8e>
	...

0800a344 <_printf_i>:
 800a344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a348:	7e0f      	ldrb	r7, [r1, #24]
 800a34a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a34c:	2f78      	cmp	r7, #120	; 0x78
 800a34e:	4691      	mov	r9, r2
 800a350:	4680      	mov	r8, r0
 800a352:	460c      	mov	r4, r1
 800a354:	469a      	mov	sl, r3
 800a356:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a35a:	d807      	bhi.n	800a36c <_printf_i+0x28>
 800a35c:	2f62      	cmp	r7, #98	; 0x62
 800a35e:	d80a      	bhi.n	800a376 <_printf_i+0x32>
 800a360:	2f00      	cmp	r7, #0
 800a362:	f000 80d4 	beq.w	800a50e <_printf_i+0x1ca>
 800a366:	2f58      	cmp	r7, #88	; 0x58
 800a368:	f000 80c0 	beq.w	800a4ec <_printf_i+0x1a8>
 800a36c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a370:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a374:	e03a      	b.n	800a3ec <_printf_i+0xa8>
 800a376:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a37a:	2b15      	cmp	r3, #21
 800a37c:	d8f6      	bhi.n	800a36c <_printf_i+0x28>
 800a37e:	a101      	add	r1, pc, #4	; (adr r1, 800a384 <_printf_i+0x40>)
 800a380:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a384:	0800a3dd 	.word	0x0800a3dd
 800a388:	0800a3f1 	.word	0x0800a3f1
 800a38c:	0800a36d 	.word	0x0800a36d
 800a390:	0800a36d 	.word	0x0800a36d
 800a394:	0800a36d 	.word	0x0800a36d
 800a398:	0800a36d 	.word	0x0800a36d
 800a39c:	0800a3f1 	.word	0x0800a3f1
 800a3a0:	0800a36d 	.word	0x0800a36d
 800a3a4:	0800a36d 	.word	0x0800a36d
 800a3a8:	0800a36d 	.word	0x0800a36d
 800a3ac:	0800a36d 	.word	0x0800a36d
 800a3b0:	0800a4f5 	.word	0x0800a4f5
 800a3b4:	0800a41d 	.word	0x0800a41d
 800a3b8:	0800a4af 	.word	0x0800a4af
 800a3bc:	0800a36d 	.word	0x0800a36d
 800a3c0:	0800a36d 	.word	0x0800a36d
 800a3c4:	0800a517 	.word	0x0800a517
 800a3c8:	0800a36d 	.word	0x0800a36d
 800a3cc:	0800a41d 	.word	0x0800a41d
 800a3d0:	0800a36d 	.word	0x0800a36d
 800a3d4:	0800a36d 	.word	0x0800a36d
 800a3d8:	0800a4b7 	.word	0x0800a4b7
 800a3dc:	682b      	ldr	r3, [r5, #0]
 800a3de:	1d1a      	adds	r2, r3, #4
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	602a      	str	r2, [r5, #0]
 800a3e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e09f      	b.n	800a530 <_printf_i+0x1ec>
 800a3f0:	6820      	ldr	r0, [r4, #0]
 800a3f2:	682b      	ldr	r3, [r5, #0]
 800a3f4:	0607      	lsls	r7, r0, #24
 800a3f6:	f103 0104 	add.w	r1, r3, #4
 800a3fa:	6029      	str	r1, [r5, #0]
 800a3fc:	d501      	bpl.n	800a402 <_printf_i+0xbe>
 800a3fe:	681e      	ldr	r6, [r3, #0]
 800a400:	e003      	b.n	800a40a <_printf_i+0xc6>
 800a402:	0646      	lsls	r6, r0, #25
 800a404:	d5fb      	bpl.n	800a3fe <_printf_i+0xba>
 800a406:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a40a:	2e00      	cmp	r6, #0
 800a40c:	da03      	bge.n	800a416 <_printf_i+0xd2>
 800a40e:	232d      	movs	r3, #45	; 0x2d
 800a410:	4276      	negs	r6, r6
 800a412:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a416:	485a      	ldr	r0, [pc, #360]	; (800a580 <_printf_i+0x23c>)
 800a418:	230a      	movs	r3, #10
 800a41a:	e012      	b.n	800a442 <_printf_i+0xfe>
 800a41c:	682b      	ldr	r3, [r5, #0]
 800a41e:	6820      	ldr	r0, [r4, #0]
 800a420:	1d19      	adds	r1, r3, #4
 800a422:	6029      	str	r1, [r5, #0]
 800a424:	0605      	lsls	r5, r0, #24
 800a426:	d501      	bpl.n	800a42c <_printf_i+0xe8>
 800a428:	681e      	ldr	r6, [r3, #0]
 800a42a:	e002      	b.n	800a432 <_printf_i+0xee>
 800a42c:	0641      	lsls	r1, r0, #25
 800a42e:	d5fb      	bpl.n	800a428 <_printf_i+0xe4>
 800a430:	881e      	ldrh	r6, [r3, #0]
 800a432:	4853      	ldr	r0, [pc, #332]	; (800a580 <_printf_i+0x23c>)
 800a434:	2f6f      	cmp	r7, #111	; 0x6f
 800a436:	bf0c      	ite	eq
 800a438:	2308      	moveq	r3, #8
 800a43a:	230a      	movne	r3, #10
 800a43c:	2100      	movs	r1, #0
 800a43e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a442:	6865      	ldr	r5, [r4, #4]
 800a444:	60a5      	str	r5, [r4, #8]
 800a446:	2d00      	cmp	r5, #0
 800a448:	bfa2      	ittt	ge
 800a44a:	6821      	ldrge	r1, [r4, #0]
 800a44c:	f021 0104 	bicge.w	r1, r1, #4
 800a450:	6021      	strge	r1, [r4, #0]
 800a452:	b90e      	cbnz	r6, 800a458 <_printf_i+0x114>
 800a454:	2d00      	cmp	r5, #0
 800a456:	d04b      	beq.n	800a4f0 <_printf_i+0x1ac>
 800a458:	4615      	mov	r5, r2
 800a45a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a45e:	fb03 6711 	mls	r7, r3, r1, r6
 800a462:	5dc7      	ldrb	r7, [r0, r7]
 800a464:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a468:	4637      	mov	r7, r6
 800a46a:	42bb      	cmp	r3, r7
 800a46c:	460e      	mov	r6, r1
 800a46e:	d9f4      	bls.n	800a45a <_printf_i+0x116>
 800a470:	2b08      	cmp	r3, #8
 800a472:	d10b      	bne.n	800a48c <_printf_i+0x148>
 800a474:	6823      	ldr	r3, [r4, #0]
 800a476:	07de      	lsls	r6, r3, #31
 800a478:	d508      	bpl.n	800a48c <_printf_i+0x148>
 800a47a:	6923      	ldr	r3, [r4, #16]
 800a47c:	6861      	ldr	r1, [r4, #4]
 800a47e:	4299      	cmp	r1, r3
 800a480:	bfde      	ittt	le
 800a482:	2330      	movle	r3, #48	; 0x30
 800a484:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a488:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a48c:	1b52      	subs	r2, r2, r5
 800a48e:	6122      	str	r2, [r4, #16]
 800a490:	f8cd a000 	str.w	sl, [sp]
 800a494:	464b      	mov	r3, r9
 800a496:	aa03      	add	r2, sp, #12
 800a498:	4621      	mov	r1, r4
 800a49a:	4640      	mov	r0, r8
 800a49c:	f7ff fee4 	bl	800a268 <_printf_common>
 800a4a0:	3001      	adds	r0, #1
 800a4a2:	d14a      	bne.n	800a53a <_printf_i+0x1f6>
 800a4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a8:	b004      	add	sp, #16
 800a4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ae:	6823      	ldr	r3, [r4, #0]
 800a4b0:	f043 0320 	orr.w	r3, r3, #32
 800a4b4:	6023      	str	r3, [r4, #0]
 800a4b6:	4833      	ldr	r0, [pc, #204]	; (800a584 <_printf_i+0x240>)
 800a4b8:	2778      	movs	r7, #120	; 0x78
 800a4ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a4be:	6823      	ldr	r3, [r4, #0]
 800a4c0:	6829      	ldr	r1, [r5, #0]
 800a4c2:	061f      	lsls	r7, r3, #24
 800a4c4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a4c8:	d402      	bmi.n	800a4d0 <_printf_i+0x18c>
 800a4ca:	065f      	lsls	r7, r3, #25
 800a4cc:	bf48      	it	mi
 800a4ce:	b2b6      	uxthmi	r6, r6
 800a4d0:	07df      	lsls	r7, r3, #31
 800a4d2:	bf48      	it	mi
 800a4d4:	f043 0320 	orrmi.w	r3, r3, #32
 800a4d8:	6029      	str	r1, [r5, #0]
 800a4da:	bf48      	it	mi
 800a4dc:	6023      	strmi	r3, [r4, #0]
 800a4de:	b91e      	cbnz	r6, 800a4e8 <_printf_i+0x1a4>
 800a4e0:	6823      	ldr	r3, [r4, #0]
 800a4e2:	f023 0320 	bic.w	r3, r3, #32
 800a4e6:	6023      	str	r3, [r4, #0]
 800a4e8:	2310      	movs	r3, #16
 800a4ea:	e7a7      	b.n	800a43c <_printf_i+0xf8>
 800a4ec:	4824      	ldr	r0, [pc, #144]	; (800a580 <_printf_i+0x23c>)
 800a4ee:	e7e4      	b.n	800a4ba <_printf_i+0x176>
 800a4f0:	4615      	mov	r5, r2
 800a4f2:	e7bd      	b.n	800a470 <_printf_i+0x12c>
 800a4f4:	682b      	ldr	r3, [r5, #0]
 800a4f6:	6826      	ldr	r6, [r4, #0]
 800a4f8:	6961      	ldr	r1, [r4, #20]
 800a4fa:	1d18      	adds	r0, r3, #4
 800a4fc:	6028      	str	r0, [r5, #0]
 800a4fe:	0635      	lsls	r5, r6, #24
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	d501      	bpl.n	800a508 <_printf_i+0x1c4>
 800a504:	6019      	str	r1, [r3, #0]
 800a506:	e002      	b.n	800a50e <_printf_i+0x1ca>
 800a508:	0670      	lsls	r0, r6, #25
 800a50a:	d5fb      	bpl.n	800a504 <_printf_i+0x1c0>
 800a50c:	8019      	strh	r1, [r3, #0]
 800a50e:	2300      	movs	r3, #0
 800a510:	6123      	str	r3, [r4, #16]
 800a512:	4615      	mov	r5, r2
 800a514:	e7bc      	b.n	800a490 <_printf_i+0x14c>
 800a516:	682b      	ldr	r3, [r5, #0]
 800a518:	1d1a      	adds	r2, r3, #4
 800a51a:	602a      	str	r2, [r5, #0]
 800a51c:	681d      	ldr	r5, [r3, #0]
 800a51e:	6862      	ldr	r2, [r4, #4]
 800a520:	2100      	movs	r1, #0
 800a522:	4628      	mov	r0, r5
 800a524:	f7f5 fe54 	bl	80001d0 <memchr>
 800a528:	b108      	cbz	r0, 800a52e <_printf_i+0x1ea>
 800a52a:	1b40      	subs	r0, r0, r5
 800a52c:	6060      	str	r0, [r4, #4]
 800a52e:	6863      	ldr	r3, [r4, #4]
 800a530:	6123      	str	r3, [r4, #16]
 800a532:	2300      	movs	r3, #0
 800a534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a538:	e7aa      	b.n	800a490 <_printf_i+0x14c>
 800a53a:	6923      	ldr	r3, [r4, #16]
 800a53c:	462a      	mov	r2, r5
 800a53e:	4649      	mov	r1, r9
 800a540:	4640      	mov	r0, r8
 800a542:	47d0      	blx	sl
 800a544:	3001      	adds	r0, #1
 800a546:	d0ad      	beq.n	800a4a4 <_printf_i+0x160>
 800a548:	6823      	ldr	r3, [r4, #0]
 800a54a:	079b      	lsls	r3, r3, #30
 800a54c:	d413      	bmi.n	800a576 <_printf_i+0x232>
 800a54e:	68e0      	ldr	r0, [r4, #12]
 800a550:	9b03      	ldr	r3, [sp, #12]
 800a552:	4298      	cmp	r0, r3
 800a554:	bfb8      	it	lt
 800a556:	4618      	movlt	r0, r3
 800a558:	e7a6      	b.n	800a4a8 <_printf_i+0x164>
 800a55a:	2301      	movs	r3, #1
 800a55c:	4632      	mov	r2, r6
 800a55e:	4649      	mov	r1, r9
 800a560:	4640      	mov	r0, r8
 800a562:	47d0      	blx	sl
 800a564:	3001      	adds	r0, #1
 800a566:	d09d      	beq.n	800a4a4 <_printf_i+0x160>
 800a568:	3501      	adds	r5, #1
 800a56a:	68e3      	ldr	r3, [r4, #12]
 800a56c:	9903      	ldr	r1, [sp, #12]
 800a56e:	1a5b      	subs	r3, r3, r1
 800a570:	42ab      	cmp	r3, r5
 800a572:	dcf2      	bgt.n	800a55a <_printf_i+0x216>
 800a574:	e7eb      	b.n	800a54e <_printf_i+0x20a>
 800a576:	2500      	movs	r5, #0
 800a578:	f104 0619 	add.w	r6, r4, #25
 800a57c:	e7f5      	b.n	800a56a <_printf_i+0x226>
 800a57e:	bf00      	nop
 800a580:	0802071c 	.word	0x0802071c
 800a584:	0802072d 	.word	0x0802072d

0800a588 <std>:
 800a588:	2300      	movs	r3, #0
 800a58a:	b510      	push	{r4, lr}
 800a58c:	4604      	mov	r4, r0
 800a58e:	e9c0 3300 	strd	r3, r3, [r0]
 800a592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a596:	6083      	str	r3, [r0, #8]
 800a598:	8181      	strh	r1, [r0, #12]
 800a59a:	6643      	str	r3, [r0, #100]	; 0x64
 800a59c:	81c2      	strh	r2, [r0, #14]
 800a59e:	6183      	str	r3, [r0, #24]
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	2208      	movs	r2, #8
 800a5a4:	305c      	adds	r0, #92	; 0x5c
 800a5a6:	f000 f8f4 	bl	800a792 <memset>
 800a5aa:	4b0d      	ldr	r3, [pc, #52]	; (800a5e0 <std+0x58>)
 800a5ac:	6263      	str	r3, [r4, #36]	; 0x24
 800a5ae:	4b0d      	ldr	r3, [pc, #52]	; (800a5e4 <std+0x5c>)
 800a5b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5b2:	4b0d      	ldr	r3, [pc, #52]	; (800a5e8 <std+0x60>)
 800a5b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5b6:	4b0d      	ldr	r3, [pc, #52]	; (800a5ec <std+0x64>)
 800a5b8:	6323      	str	r3, [r4, #48]	; 0x30
 800a5ba:	4b0d      	ldr	r3, [pc, #52]	; (800a5f0 <std+0x68>)
 800a5bc:	6224      	str	r4, [r4, #32]
 800a5be:	429c      	cmp	r4, r3
 800a5c0:	d006      	beq.n	800a5d0 <std+0x48>
 800a5c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a5c6:	4294      	cmp	r4, r2
 800a5c8:	d002      	beq.n	800a5d0 <std+0x48>
 800a5ca:	33d0      	adds	r3, #208	; 0xd0
 800a5cc:	429c      	cmp	r4, r3
 800a5ce:	d105      	bne.n	800a5dc <std+0x54>
 800a5d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a5d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5d8:	f000 b97a 	b.w	800a8d0 <__retarget_lock_init_recursive>
 800a5dc:	bd10      	pop	{r4, pc}
 800a5de:	bf00      	nop
 800a5e0:	0800a70d 	.word	0x0800a70d
 800a5e4:	0800a72f 	.word	0x0800a72f
 800a5e8:	0800a767 	.word	0x0800a767
 800a5ec:	0800a78b 	.word	0x0800a78b
 800a5f0:	20007b78 	.word	0x20007b78

0800a5f4 <stdio_exit_handler>:
 800a5f4:	4a02      	ldr	r2, [pc, #8]	; (800a600 <stdio_exit_handler+0xc>)
 800a5f6:	4903      	ldr	r1, [pc, #12]	; (800a604 <stdio_exit_handler+0x10>)
 800a5f8:	4803      	ldr	r0, [pc, #12]	; (800a608 <stdio_exit_handler+0x14>)
 800a5fa:	f000 b869 	b.w	800a6d0 <_fwalk_sglue>
 800a5fe:	bf00      	nop
 800a600:	20000fb4 	.word	0x20000fb4
 800a604:	0800be89 	.word	0x0800be89
 800a608:	20000fc0 	.word	0x20000fc0

0800a60c <cleanup_stdio>:
 800a60c:	6841      	ldr	r1, [r0, #4]
 800a60e:	4b0c      	ldr	r3, [pc, #48]	; (800a640 <cleanup_stdio+0x34>)
 800a610:	4299      	cmp	r1, r3
 800a612:	b510      	push	{r4, lr}
 800a614:	4604      	mov	r4, r0
 800a616:	d001      	beq.n	800a61c <cleanup_stdio+0x10>
 800a618:	f001 fc36 	bl	800be88 <_fflush_r>
 800a61c:	68a1      	ldr	r1, [r4, #8]
 800a61e:	4b09      	ldr	r3, [pc, #36]	; (800a644 <cleanup_stdio+0x38>)
 800a620:	4299      	cmp	r1, r3
 800a622:	d002      	beq.n	800a62a <cleanup_stdio+0x1e>
 800a624:	4620      	mov	r0, r4
 800a626:	f001 fc2f 	bl	800be88 <_fflush_r>
 800a62a:	68e1      	ldr	r1, [r4, #12]
 800a62c:	4b06      	ldr	r3, [pc, #24]	; (800a648 <cleanup_stdio+0x3c>)
 800a62e:	4299      	cmp	r1, r3
 800a630:	d004      	beq.n	800a63c <cleanup_stdio+0x30>
 800a632:	4620      	mov	r0, r4
 800a634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a638:	f001 bc26 	b.w	800be88 <_fflush_r>
 800a63c:	bd10      	pop	{r4, pc}
 800a63e:	bf00      	nop
 800a640:	20007b78 	.word	0x20007b78
 800a644:	20007be0 	.word	0x20007be0
 800a648:	20007c48 	.word	0x20007c48

0800a64c <global_stdio_init.part.0>:
 800a64c:	b510      	push	{r4, lr}
 800a64e:	4b0b      	ldr	r3, [pc, #44]	; (800a67c <global_stdio_init.part.0+0x30>)
 800a650:	4c0b      	ldr	r4, [pc, #44]	; (800a680 <global_stdio_init.part.0+0x34>)
 800a652:	4a0c      	ldr	r2, [pc, #48]	; (800a684 <global_stdio_init.part.0+0x38>)
 800a654:	601a      	str	r2, [r3, #0]
 800a656:	4620      	mov	r0, r4
 800a658:	2200      	movs	r2, #0
 800a65a:	2104      	movs	r1, #4
 800a65c:	f7ff ff94 	bl	800a588 <std>
 800a660:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a664:	2201      	movs	r2, #1
 800a666:	2109      	movs	r1, #9
 800a668:	f7ff ff8e 	bl	800a588 <std>
 800a66c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a670:	2202      	movs	r2, #2
 800a672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a676:	2112      	movs	r1, #18
 800a678:	f7ff bf86 	b.w	800a588 <std>
 800a67c:	20007cb0 	.word	0x20007cb0
 800a680:	20007b78 	.word	0x20007b78
 800a684:	0800a5f5 	.word	0x0800a5f5

0800a688 <__sfp_lock_acquire>:
 800a688:	4801      	ldr	r0, [pc, #4]	; (800a690 <__sfp_lock_acquire+0x8>)
 800a68a:	f000 b922 	b.w	800a8d2 <__retarget_lock_acquire_recursive>
 800a68e:	bf00      	nop
 800a690:	20007cb9 	.word	0x20007cb9

0800a694 <__sfp_lock_release>:
 800a694:	4801      	ldr	r0, [pc, #4]	; (800a69c <__sfp_lock_release+0x8>)
 800a696:	f000 b91d 	b.w	800a8d4 <__retarget_lock_release_recursive>
 800a69a:	bf00      	nop
 800a69c:	20007cb9 	.word	0x20007cb9

0800a6a0 <__sinit>:
 800a6a0:	b510      	push	{r4, lr}
 800a6a2:	4604      	mov	r4, r0
 800a6a4:	f7ff fff0 	bl	800a688 <__sfp_lock_acquire>
 800a6a8:	6a23      	ldr	r3, [r4, #32]
 800a6aa:	b11b      	cbz	r3, 800a6b4 <__sinit+0x14>
 800a6ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6b0:	f7ff bff0 	b.w	800a694 <__sfp_lock_release>
 800a6b4:	4b04      	ldr	r3, [pc, #16]	; (800a6c8 <__sinit+0x28>)
 800a6b6:	6223      	str	r3, [r4, #32]
 800a6b8:	4b04      	ldr	r3, [pc, #16]	; (800a6cc <__sinit+0x2c>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d1f5      	bne.n	800a6ac <__sinit+0xc>
 800a6c0:	f7ff ffc4 	bl	800a64c <global_stdio_init.part.0>
 800a6c4:	e7f2      	b.n	800a6ac <__sinit+0xc>
 800a6c6:	bf00      	nop
 800a6c8:	0800a60d 	.word	0x0800a60d
 800a6cc:	20007cb0 	.word	0x20007cb0

0800a6d0 <_fwalk_sglue>:
 800a6d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6d4:	4607      	mov	r7, r0
 800a6d6:	4688      	mov	r8, r1
 800a6d8:	4614      	mov	r4, r2
 800a6da:	2600      	movs	r6, #0
 800a6dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6e0:	f1b9 0901 	subs.w	r9, r9, #1
 800a6e4:	d505      	bpl.n	800a6f2 <_fwalk_sglue+0x22>
 800a6e6:	6824      	ldr	r4, [r4, #0]
 800a6e8:	2c00      	cmp	r4, #0
 800a6ea:	d1f7      	bne.n	800a6dc <_fwalk_sglue+0xc>
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6f2:	89ab      	ldrh	r3, [r5, #12]
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d907      	bls.n	800a708 <_fwalk_sglue+0x38>
 800a6f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	d003      	beq.n	800a708 <_fwalk_sglue+0x38>
 800a700:	4629      	mov	r1, r5
 800a702:	4638      	mov	r0, r7
 800a704:	47c0      	blx	r8
 800a706:	4306      	orrs	r6, r0
 800a708:	3568      	adds	r5, #104	; 0x68
 800a70a:	e7e9      	b.n	800a6e0 <_fwalk_sglue+0x10>

0800a70c <__sread>:
 800a70c:	b510      	push	{r4, lr}
 800a70e:	460c      	mov	r4, r1
 800a710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a714:	f000 f87e 	bl	800a814 <_read_r>
 800a718:	2800      	cmp	r0, #0
 800a71a:	bfab      	itete	ge
 800a71c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a71e:	89a3      	ldrhlt	r3, [r4, #12]
 800a720:	181b      	addge	r3, r3, r0
 800a722:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a726:	bfac      	ite	ge
 800a728:	6563      	strge	r3, [r4, #84]	; 0x54
 800a72a:	81a3      	strhlt	r3, [r4, #12]
 800a72c:	bd10      	pop	{r4, pc}

0800a72e <__swrite>:
 800a72e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a732:	461f      	mov	r7, r3
 800a734:	898b      	ldrh	r3, [r1, #12]
 800a736:	05db      	lsls	r3, r3, #23
 800a738:	4605      	mov	r5, r0
 800a73a:	460c      	mov	r4, r1
 800a73c:	4616      	mov	r6, r2
 800a73e:	d505      	bpl.n	800a74c <__swrite+0x1e>
 800a740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a744:	2302      	movs	r3, #2
 800a746:	2200      	movs	r2, #0
 800a748:	f000 f852 	bl	800a7f0 <_lseek_r>
 800a74c:	89a3      	ldrh	r3, [r4, #12]
 800a74e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a752:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a756:	81a3      	strh	r3, [r4, #12]
 800a758:	4632      	mov	r2, r6
 800a75a:	463b      	mov	r3, r7
 800a75c:	4628      	mov	r0, r5
 800a75e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a762:	f000 b879 	b.w	800a858 <_write_r>

0800a766 <__sseek>:
 800a766:	b510      	push	{r4, lr}
 800a768:	460c      	mov	r4, r1
 800a76a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a76e:	f000 f83f 	bl	800a7f0 <_lseek_r>
 800a772:	1c43      	adds	r3, r0, #1
 800a774:	89a3      	ldrh	r3, [r4, #12]
 800a776:	bf15      	itete	ne
 800a778:	6560      	strne	r0, [r4, #84]	; 0x54
 800a77a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a77e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a782:	81a3      	strheq	r3, [r4, #12]
 800a784:	bf18      	it	ne
 800a786:	81a3      	strhne	r3, [r4, #12]
 800a788:	bd10      	pop	{r4, pc}

0800a78a <__sclose>:
 800a78a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a78e:	f000 b81f 	b.w	800a7d0 <_close_r>

0800a792 <memset>:
 800a792:	4402      	add	r2, r0
 800a794:	4603      	mov	r3, r0
 800a796:	4293      	cmp	r3, r2
 800a798:	d100      	bne.n	800a79c <memset+0xa>
 800a79a:	4770      	bx	lr
 800a79c:	f803 1b01 	strb.w	r1, [r3], #1
 800a7a0:	e7f9      	b.n	800a796 <memset+0x4>

0800a7a2 <strncmp>:
 800a7a2:	b510      	push	{r4, lr}
 800a7a4:	b16a      	cbz	r2, 800a7c2 <strncmp+0x20>
 800a7a6:	3901      	subs	r1, #1
 800a7a8:	1884      	adds	r4, r0, r2
 800a7aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7ae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d103      	bne.n	800a7be <strncmp+0x1c>
 800a7b6:	42a0      	cmp	r0, r4
 800a7b8:	d001      	beq.n	800a7be <strncmp+0x1c>
 800a7ba:	2a00      	cmp	r2, #0
 800a7bc:	d1f5      	bne.n	800a7aa <strncmp+0x8>
 800a7be:	1ad0      	subs	r0, r2, r3
 800a7c0:	bd10      	pop	{r4, pc}
 800a7c2:	4610      	mov	r0, r2
 800a7c4:	e7fc      	b.n	800a7c0 <strncmp+0x1e>
	...

0800a7c8 <_localeconv_r>:
 800a7c8:	4800      	ldr	r0, [pc, #0]	; (800a7cc <_localeconv_r+0x4>)
 800a7ca:	4770      	bx	lr
 800a7cc:	20001100 	.word	0x20001100

0800a7d0 <_close_r>:
 800a7d0:	b538      	push	{r3, r4, r5, lr}
 800a7d2:	4d06      	ldr	r5, [pc, #24]	; (800a7ec <_close_r+0x1c>)
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	4608      	mov	r0, r1
 800a7da:	602b      	str	r3, [r5, #0]
 800a7dc:	f001 ffbe 	bl	800c75c <_close>
 800a7e0:	1c43      	adds	r3, r0, #1
 800a7e2:	d102      	bne.n	800a7ea <_close_r+0x1a>
 800a7e4:	682b      	ldr	r3, [r5, #0]
 800a7e6:	b103      	cbz	r3, 800a7ea <_close_r+0x1a>
 800a7e8:	6023      	str	r3, [r4, #0]
 800a7ea:	bd38      	pop	{r3, r4, r5, pc}
 800a7ec:	20007cb4 	.word	0x20007cb4

0800a7f0 <_lseek_r>:
 800a7f0:	b538      	push	{r3, r4, r5, lr}
 800a7f2:	4d07      	ldr	r5, [pc, #28]	; (800a810 <_lseek_r+0x20>)
 800a7f4:	4604      	mov	r4, r0
 800a7f6:	4608      	mov	r0, r1
 800a7f8:	4611      	mov	r1, r2
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	602a      	str	r2, [r5, #0]
 800a7fe:	461a      	mov	r2, r3
 800a800:	f001 ffd4 	bl	800c7ac <_lseek>
 800a804:	1c43      	adds	r3, r0, #1
 800a806:	d102      	bne.n	800a80e <_lseek_r+0x1e>
 800a808:	682b      	ldr	r3, [r5, #0]
 800a80a:	b103      	cbz	r3, 800a80e <_lseek_r+0x1e>
 800a80c:	6023      	str	r3, [r4, #0]
 800a80e:	bd38      	pop	{r3, r4, r5, pc}
 800a810:	20007cb4 	.word	0x20007cb4

0800a814 <_read_r>:
 800a814:	b538      	push	{r3, r4, r5, lr}
 800a816:	4d07      	ldr	r5, [pc, #28]	; (800a834 <_read_r+0x20>)
 800a818:	4604      	mov	r4, r0
 800a81a:	4608      	mov	r0, r1
 800a81c:	4611      	mov	r1, r2
 800a81e:	2200      	movs	r2, #0
 800a820:	602a      	str	r2, [r5, #0]
 800a822:	461a      	mov	r2, r3
 800a824:	f001 ffca 	bl	800c7bc <_read>
 800a828:	1c43      	adds	r3, r0, #1
 800a82a:	d102      	bne.n	800a832 <_read_r+0x1e>
 800a82c:	682b      	ldr	r3, [r5, #0]
 800a82e:	b103      	cbz	r3, 800a832 <_read_r+0x1e>
 800a830:	6023      	str	r3, [r4, #0]
 800a832:	bd38      	pop	{r3, r4, r5, pc}
 800a834:	20007cb4 	.word	0x20007cb4

0800a838 <_sbrk_r>:
 800a838:	b538      	push	{r3, r4, r5, lr}
 800a83a:	4d06      	ldr	r5, [pc, #24]	; (800a854 <_sbrk_r+0x1c>)
 800a83c:	2300      	movs	r3, #0
 800a83e:	4604      	mov	r4, r0
 800a840:	4608      	mov	r0, r1
 800a842:	602b      	str	r3, [r5, #0]
 800a844:	f7f6 fd4e 	bl	80012e4 <_sbrk>
 800a848:	1c43      	adds	r3, r0, #1
 800a84a:	d102      	bne.n	800a852 <_sbrk_r+0x1a>
 800a84c:	682b      	ldr	r3, [r5, #0]
 800a84e:	b103      	cbz	r3, 800a852 <_sbrk_r+0x1a>
 800a850:	6023      	str	r3, [r4, #0]
 800a852:	bd38      	pop	{r3, r4, r5, pc}
 800a854:	20007cb4 	.word	0x20007cb4

0800a858 <_write_r>:
 800a858:	b538      	push	{r3, r4, r5, lr}
 800a85a:	4d07      	ldr	r5, [pc, #28]	; (800a878 <_write_r+0x20>)
 800a85c:	4604      	mov	r4, r0
 800a85e:	4608      	mov	r0, r1
 800a860:	4611      	mov	r1, r2
 800a862:	2200      	movs	r2, #0
 800a864:	602a      	str	r2, [r5, #0]
 800a866:	461a      	mov	r2, r3
 800a868:	f7f8 fe56 	bl	8003518 <_write>
 800a86c:	1c43      	adds	r3, r0, #1
 800a86e:	d102      	bne.n	800a876 <_write_r+0x1e>
 800a870:	682b      	ldr	r3, [r5, #0]
 800a872:	b103      	cbz	r3, 800a876 <_write_r+0x1e>
 800a874:	6023      	str	r3, [r4, #0]
 800a876:	bd38      	pop	{r3, r4, r5, pc}
 800a878:	20007cb4 	.word	0x20007cb4

0800a87c <__errno>:
 800a87c:	4b01      	ldr	r3, [pc, #4]	; (800a884 <__errno+0x8>)
 800a87e:	6818      	ldr	r0, [r3, #0]
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	2000100c 	.word	0x2000100c

0800a888 <__libc_init_array>:
 800a888:	b570      	push	{r4, r5, r6, lr}
 800a88a:	4d0d      	ldr	r5, [pc, #52]	; (800a8c0 <__libc_init_array+0x38>)
 800a88c:	4c0d      	ldr	r4, [pc, #52]	; (800a8c4 <__libc_init_array+0x3c>)
 800a88e:	1b64      	subs	r4, r4, r5
 800a890:	10a4      	asrs	r4, r4, #2
 800a892:	2600      	movs	r6, #0
 800a894:	42a6      	cmp	r6, r4
 800a896:	d109      	bne.n	800a8ac <__libc_init_array+0x24>
 800a898:	4d0b      	ldr	r5, [pc, #44]	; (800a8c8 <__libc_init_array+0x40>)
 800a89a:	4c0c      	ldr	r4, [pc, #48]	; (800a8cc <__libc_init_array+0x44>)
 800a89c:	f001 ff98 	bl	800c7d0 <_init>
 800a8a0:	1b64      	subs	r4, r4, r5
 800a8a2:	10a4      	asrs	r4, r4, #2
 800a8a4:	2600      	movs	r6, #0
 800a8a6:	42a6      	cmp	r6, r4
 800a8a8:	d105      	bne.n	800a8b6 <__libc_init_array+0x2e>
 800a8aa:	bd70      	pop	{r4, r5, r6, pc}
 800a8ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8b0:	4798      	blx	r3
 800a8b2:	3601      	adds	r6, #1
 800a8b4:	e7ee      	b.n	800a894 <__libc_init_array+0xc>
 800a8b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ba:	4798      	blx	r3
 800a8bc:	3601      	adds	r6, #1
 800a8be:	e7f2      	b.n	800a8a6 <__libc_init_array+0x1e>
 800a8c0:	08020a9c 	.word	0x08020a9c
 800a8c4:	08020a9c 	.word	0x08020a9c
 800a8c8:	08020a9c 	.word	0x08020a9c
 800a8cc:	08020aa0 	.word	0x08020aa0

0800a8d0 <__retarget_lock_init_recursive>:
 800a8d0:	4770      	bx	lr

0800a8d2 <__retarget_lock_acquire_recursive>:
 800a8d2:	4770      	bx	lr

0800a8d4 <__retarget_lock_release_recursive>:
 800a8d4:	4770      	bx	lr

0800a8d6 <memcpy>:
 800a8d6:	440a      	add	r2, r1
 800a8d8:	4291      	cmp	r1, r2
 800a8da:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8de:	d100      	bne.n	800a8e2 <memcpy+0xc>
 800a8e0:	4770      	bx	lr
 800a8e2:	b510      	push	{r4, lr}
 800a8e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8ec:	4291      	cmp	r1, r2
 800a8ee:	d1f9      	bne.n	800a8e4 <memcpy+0xe>
 800a8f0:	bd10      	pop	{r4, pc}

0800a8f2 <quorem>:
 800a8f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f6:	6903      	ldr	r3, [r0, #16]
 800a8f8:	690c      	ldr	r4, [r1, #16]
 800a8fa:	42a3      	cmp	r3, r4
 800a8fc:	4607      	mov	r7, r0
 800a8fe:	db7e      	blt.n	800a9fe <quorem+0x10c>
 800a900:	3c01      	subs	r4, #1
 800a902:	f101 0814 	add.w	r8, r1, #20
 800a906:	f100 0514 	add.w	r5, r0, #20
 800a90a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a90e:	9301      	str	r3, [sp, #4]
 800a910:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a914:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a918:	3301      	adds	r3, #1
 800a91a:	429a      	cmp	r2, r3
 800a91c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a920:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a924:	fbb2 f6f3 	udiv	r6, r2, r3
 800a928:	d331      	bcc.n	800a98e <quorem+0x9c>
 800a92a:	f04f 0e00 	mov.w	lr, #0
 800a92e:	4640      	mov	r0, r8
 800a930:	46ac      	mov	ip, r5
 800a932:	46f2      	mov	sl, lr
 800a934:	f850 2b04 	ldr.w	r2, [r0], #4
 800a938:	b293      	uxth	r3, r2
 800a93a:	fb06 e303 	mla	r3, r6, r3, lr
 800a93e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a942:	0c1a      	lsrs	r2, r3, #16
 800a944:	b29b      	uxth	r3, r3
 800a946:	ebaa 0303 	sub.w	r3, sl, r3
 800a94a:	f8dc a000 	ldr.w	sl, [ip]
 800a94e:	fa13 f38a 	uxtah	r3, r3, sl
 800a952:	fb06 220e 	mla	r2, r6, lr, r2
 800a956:	9300      	str	r3, [sp, #0]
 800a958:	9b00      	ldr	r3, [sp, #0]
 800a95a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a95e:	b292      	uxth	r2, r2
 800a960:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a964:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a968:	f8bd 3000 	ldrh.w	r3, [sp]
 800a96c:	4581      	cmp	r9, r0
 800a96e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a972:	f84c 3b04 	str.w	r3, [ip], #4
 800a976:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a97a:	d2db      	bcs.n	800a934 <quorem+0x42>
 800a97c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a980:	b92b      	cbnz	r3, 800a98e <quorem+0x9c>
 800a982:	9b01      	ldr	r3, [sp, #4]
 800a984:	3b04      	subs	r3, #4
 800a986:	429d      	cmp	r5, r3
 800a988:	461a      	mov	r2, r3
 800a98a:	d32c      	bcc.n	800a9e6 <quorem+0xf4>
 800a98c:	613c      	str	r4, [r7, #16]
 800a98e:	4638      	mov	r0, r7
 800a990:	f001 f8f4 	bl	800bb7c <__mcmp>
 800a994:	2800      	cmp	r0, #0
 800a996:	db22      	blt.n	800a9de <quorem+0xec>
 800a998:	3601      	adds	r6, #1
 800a99a:	4629      	mov	r1, r5
 800a99c:	2000      	movs	r0, #0
 800a99e:	f858 2b04 	ldr.w	r2, [r8], #4
 800a9a2:	f8d1 c000 	ldr.w	ip, [r1]
 800a9a6:	b293      	uxth	r3, r2
 800a9a8:	1ac3      	subs	r3, r0, r3
 800a9aa:	0c12      	lsrs	r2, r2, #16
 800a9ac:	fa13 f38c 	uxtah	r3, r3, ip
 800a9b0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a9b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9be:	45c1      	cmp	r9, r8
 800a9c0:	f841 3b04 	str.w	r3, [r1], #4
 800a9c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a9c8:	d2e9      	bcs.n	800a99e <quorem+0xac>
 800a9ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9d2:	b922      	cbnz	r2, 800a9de <quorem+0xec>
 800a9d4:	3b04      	subs	r3, #4
 800a9d6:	429d      	cmp	r5, r3
 800a9d8:	461a      	mov	r2, r3
 800a9da:	d30a      	bcc.n	800a9f2 <quorem+0x100>
 800a9dc:	613c      	str	r4, [r7, #16]
 800a9de:	4630      	mov	r0, r6
 800a9e0:	b003      	add	sp, #12
 800a9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e6:	6812      	ldr	r2, [r2, #0]
 800a9e8:	3b04      	subs	r3, #4
 800a9ea:	2a00      	cmp	r2, #0
 800a9ec:	d1ce      	bne.n	800a98c <quorem+0x9a>
 800a9ee:	3c01      	subs	r4, #1
 800a9f0:	e7c9      	b.n	800a986 <quorem+0x94>
 800a9f2:	6812      	ldr	r2, [r2, #0]
 800a9f4:	3b04      	subs	r3, #4
 800a9f6:	2a00      	cmp	r2, #0
 800a9f8:	d1f0      	bne.n	800a9dc <quorem+0xea>
 800a9fa:	3c01      	subs	r4, #1
 800a9fc:	e7eb      	b.n	800a9d6 <quorem+0xe4>
 800a9fe:	2000      	movs	r0, #0
 800aa00:	e7ee      	b.n	800a9e0 <quorem+0xee>
 800aa02:	0000      	movs	r0, r0
 800aa04:	0000      	movs	r0, r0
	...

0800aa08 <_dtoa_r>:
 800aa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa0c:	ed2d 8b04 	vpush	{d8-d9}
 800aa10:	69c5      	ldr	r5, [r0, #28]
 800aa12:	b093      	sub	sp, #76	; 0x4c
 800aa14:	ed8d 0b02 	vstr	d0, [sp, #8]
 800aa18:	ec57 6b10 	vmov	r6, r7, d0
 800aa1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aa20:	9107      	str	r1, [sp, #28]
 800aa22:	4604      	mov	r4, r0
 800aa24:	920a      	str	r2, [sp, #40]	; 0x28
 800aa26:	930d      	str	r3, [sp, #52]	; 0x34
 800aa28:	b975      	cbnz	r5, 800aa48 <_dtoa_r+0x40>
 800aa2a:	2010      	movs	r0, #16
 800aa2c:	f7f8 fdce 	bl	80035cc <__wrap_malloc>
 800aa30:	4602      	mov	r2, r0
 800aa32:	61e0      	str	r0, [r4, #28]
 800aa34:	b920      	cbnz	r0, 800aa40 <_dtoa_r+0x38>
 800aa36:	4bae      	ldr	r3, [pc, #696]	; (800acf0 <_dtoa_r+0x2e8>)
 800aa38:	21ef      	movs	r1, #239	; 0xef
 800aa3a:	48ae      	ldr	r0, [pc, #696]	; (800acf4 <_dtoa_r+0x2ec>)
 800aa3c:	f001 fa4c 	bl	800bed8 <__assert_func>
 800aa40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aa44:	6005      	str	r5, [r0, #0]
 800aa46:	60c5      	str	r5, [r0, #12]
 800aa48:	69e3      	ldr	r3, [r4, #28]
 800aa4a:	6819      	ldr	r1, [r3, #0]
 800aa4c:	b151      	cbz	r1, 800aa64 <_dtoa_r+0x5c>
 800aa4e:	685a      	ldr	r2, [r3, #4]
 800aa50:	604a      	str	r2, [r1, #4]
 800aa52:	2301      	movs	r3, #1
 800aa54:	4093      	lsls	r3, r2
 800aa56:	608b      	str	r3, [r1, #8]
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f000 fe53 	bl	800b704 <_Bfree>
 800aa5e:	69e3      	ldr	r3, [r4, #28]
 800aa60:	2200      	movs	r2, #0
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	1e3b      	subs	r3, r7, #0
 800aa66:	bfbb      	ittet	lt
 800aa68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aa6c:	9303      	strlt	r3, [sp, #12]
 800aa6e:	2300      	movge	r3, #0
 800aa70:	2201      	movlt	r2, #1
 800aa72:	bfac      	ite	ge
 800aa74:	f8c8 3000 	strge.w	r3, [r8]
 800aa78:	f8c8 2000 	strlt.w	r2, [r8]
 800aa7c:	4b9e      	ldr	r3, [pc, #632]	; (800acf8 <_dtoa_r+0x2f0>)
 800aa7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800aa82:	ea33 0308 	bics.w	r3, r3, r8
 800aa86:	d11b      	bne.n	800aac0 <_dtoa_r+0xb8>
 800aa88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa8a:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa8e:	6013      	str	r3, [r2, #0]
 800aa90:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800aa94:	4333      	orrs	r3, r6
 800aa96:	f000 8593 	beq.w	800b5c0 <_dtoa_r+0xbb8>
 800aa9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa9c:	b963      	cbnz	r3, 800aab8 <_dtoa_r+0xb0>
 800aa9e:	4b97      	ldr	r3, [pc, #604]	; (800acfc <_dtoa_r+0x2f4>)
 800aaa0:	e027      	b.n	800aaf2 <_dtoa_r+0xea>
 800aaa2:	4b97      	ldr	r3, [pc, #604]	; (800ad00 <_dtoa_r+0x2f8>)
 800aaa4:	9300      	str	r3, [sp, #0]
 800aaa6:	3308      	adds	r3, #8
 800aaa8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aaaa:	6013      	str	r3, [r2, #0]
 800aaac:	9800      	ldr	r0, [sp, #0]
 800aaae:	b013      	add	sp, #76	; 0x4c
 800aab0:	ecbd 8b04 	vpop	{d8-d9}
 800aab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aab8:	4b90      	ldr	r3, [pc, #576]	; (800acfc <_dtoa_r+0x2f4>)
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	3303      	adds	r3, #3
 800aabe:	e7f3      	b.n	800aaa8 <_dtoa_r+0xa0>
 800aac0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aac4:	2200      	movs	r2, #0
 800aac6:	ec51 0b17 	vmov	r0, r1, d7
 800aaca:	eeb0 8a47 	vmov.f32	s16, s14
 800aace:	eef0 8a67 	vmov.f32	s17, s15
 800aad2:	2300      	movs	r3, #0
 800aad4:	f7f5 fff8 	bl	8000ac8 <__aeabi_dcmpeq>
 800aad8:	4681      	mov	r9, r0
 800aada:	b160      	cbz	r0, 800aaf6 <_dtoa_r+0xee>
 800aadc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aade:	2301      	movs	r3, #1
 800aae0:	6013      	str	r3, [r2, #0]
 800aae2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f000 8568 	beq.w	800b5ba <_dtoa_r+0xbb2>
 800aaea:	4b86      	ldr	r3, [pc, #536]	; (800ad04 <_dtoa_r+0x2fc>)
 800aaec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aaee:	6013      	str	r3, [r2, #0]
 800aaf0:	3b01      	subs	r3, #1
 800aaf2:	9300      	str	r3, [sp, #0]
 800aaf4:	e7da      	b.n	800aaac <_dtoa_r+0xa4>
 800aaf6:	aa10      	add	r2, sp, #64	; 0x40
 800aaf8:	a911      	add	r1, sp, #68	; 0x44
 800aafa:	4620      	mov	r0, r4
 800aafc:	eeb0 0a48 	vmov.f32	s0, s16
 800ab00:	eef0 0a68 	vmov.f32	s1, s17
 800ab04:	f001 f8e0 	bl	800bcc8 <__d2b>
 800ab08:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ab0c:	4682      	mov	sl, r0
 800ab0e:	2d00      	cmp	r5, #0
 800ab10:	d07f      	beq.n	800ac12 <_dtoa_r+0x20a>
 800ab12:	ee18 3a90 	vmov	r3, s17
 800ab16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab1a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ab1e:	ec51 0b18 	vmov	r0, r1, d8
 800ab22:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ab26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ab2a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ab2e:	4619      	mov	r1, r3
 800ab30:	2200      	movs	r2, #0
 800ab32:	4b75      	ldr	r3, [pc, #468]	; (800ad08 <_dtoa_r+0x300>)
 800ab34:	f7f5 fba8 	bl	8000288 <__aeabi_dsub>
 800ab38:	a367      	add	r3, pc, #412	; (adr r3, 800acd8 <_dtoa_r+0x2d0>)
 800ab3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3e:	f7f5 fd5b 	bl	80005f8 <__aeabi_dmul>
 800ab42:	a367      	add	r3, pc, #412	; (adr r3, 800ace0 <_dtoa_r+0x2d8>)
 800ab44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab48:	f7f5 fba0 	bl	800028c <__adddf3>
 800ab4c:	4606      	mov	r6, r0
 800ab4e:	4628      	mov	r0, r5
 800ab50:	460f      	mov	r7, r1
 800ab52:	f7f5 fce7 	bl	8000524 <__aeabi_i2d>
 800ab56:	a364      	add	r3, pc, #400	; (adr r3, 800ace8 <_dtoa_r+0x2e0>)
 800ab58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5c:	f7f5 fd4c 	bl	80005f8 <__aeabi_dmul>
 800ab60:	4602      	mov	r2, r0
 800ab62:	460b      	mov	r3, r1
 800ab64:	4630      	mov	r0, r6
 800ab66:	4639      	mov	r1, r7
 800ab68:	f7f5 fb90 	bl	800028c <__adddf3>
 800ab6c:	4606      	mov	r6, r0
 800ab6e:	460f      	mov	r7, r1
 800ab70:	f7f5 fff2 	bl	8000b58 <__aeabi_d2iz>
 800ab74:	2200      	movs	r2, #0
 800ab76:	4683      	mov	fp, r0
 800ab78:	2300      	movs	r3, #0
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	4639      	mov	r1, r7
 800ab7e:	f7f5 ffad 	bl	8000adc <__aeabi_dcmplt>
 800ab82:	b148      	cbz	r0, 800ab98 <_dtoa_r+0x190>
 800ab84:	4658      	mov	r0, fp
 800ab86:	f7f5 fccd 	bl	8000524 <__aeabi_i2d>
 800ab8a:	4632      	mov	r2, r6
 800ab8c:	463b      	mov	r3, r7
 800ab8e:	f7f5 ff9b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab92:	b908      	cbnz	r0, 800ab98 <_dtoa_r+0x190>
 800ab94:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab98:	f1bb 0f16 	cmp.w	fp, #22
 800ab9c:	d857      	bhi.n	800ac4e <_dtoa_r+0x246>
 800ab9e:	4b5b      	ldr	r3, [pc, #364]	; (800ad0c <_dtoa_r+0x304>)
 800aba0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba8:	ec51 0b18 	vmov	r0, r1, d8
 800abac:	f7f5 ff96 	bl	8000adc <__aeabi_dcmplt>
 800abb0:	2800      	cmp	r0, #0
 800abb2:	d04e      	beq.n	800ac52 <_dtoa_r+0x24a>
 800abb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800abb8:	2300      	movs	r3, #0
 800abba:	930c      	str	r3, [sp, #48]	; 0x30
 800abbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abbe:	1b5b      	subs	r3, r3, r5
 800abc0:	1e5a      	subs	r2, r3, #1
 800abc2:	bf45      	ittet	mi
 800abc4:	f1c3 0301 	rsbmi	r3, r3, #1
 800abc8:	9305      	strmi	r3, [sp, #20]
 800abca:	2300      	movpl	r3, #0
 800abcc:	2300      	movmi	r3, #0
 800abce:	9206      	str	r2, [sp, #24]
 800abd0:	bf54      	ite	pl
 800abd2:	9305      	strpl	r3, [sp, #20]
 800abd4:	9306      	strmi	r3, [sp, #24]
 800abd6:	f1bb 0f00 	cmp.w	fp, #0
 800abda:	db3c      	blt.n	800ac56 <_dtoa_r+0x24e>
 800abdc:	9b06      	ldr	r3, [sp, #24]
 800abde:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800abe2:	445b      	add	r3, fp
 800abe4:	9306      	str	r3, [sp, #24]
 800abe6:	2300      	movs	r3, #0
 800abe8:	9308      	str	r3, [sp, #32]
 800abea:	9b07      	ldr	r3, [sp, #28]
 800abec:	2b09      	cmp	r3, #9
 800abee:	d868      	bhi.n	800acc2 <_dtoa_r+0x2ba>
 800abf0:	2b05      	cmp	r3, #5
 800abf2:	bfc4      	itt	gt
 800abf4:	3b04      	subgt	r3, #4
 800abf6:	9307      	strgt	r3, [sp, #28]
 800abf8:	9b07      	ldr	r3, [sp, #28]
 800abfa:	f1a3 0302 	sub.w	r3, r3, #2
 800abfe:	bfcc      	ite	gt
 800ac00:	2500      	movgt	r5, #0
 800ac02:	2501      	movle	r5, #1
 800ac04:	2b03      	cmp	r3, #3
 800ac06:	f200 8085 	bhi.w	800ad14 <_dtoa_r+0x30c>
 800ac0a:	e8df f003 	tbb	[pc, r3]
 800ac0e:	3b2e      	.short	0x3b2e
 800ac10:	5839      	.short	0x5839
 800ac12:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ac16:	441d      	add	r5, r3
 800ac18:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ac1c:	2b20      	cmp	r3, #32
 800ac1e:	bfc1      	itttt	gt
 800ac20:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ac24:	fa08 f803 	lslgt.w	r8, r8, r3
 800ac28:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ac2c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ac30:	bfd6      	itet	le
 800ac32:	f1c3 0320 	rsble	r3, r3, #32
 800ac36:	ea48 0003 	orrgt.w	r0, r8, r3
 800ac3a:	fa06 f003 	lslle.w	r0, r6, r3
 800ac3e:	f7f5 fc61 	bl	8000504 <__aeabi_ui2d>
 800ac42:	2201      	movs	r2, #1
 800ac44:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ac48:	3d01      	subs	r5, #1
 800ac4a:	920e      	str	r2, [sp, #56]	; 0x38
 800ac4c:	e76f      	b.n	800ab2e <_dtoa_r+0x126>
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e7b3      	b.n	800abba <_dtoa_r+0x1b2>
 800ac52:	900c      	str	r0, [sp, #48]	; 0x30
 800ac54:	e7b2      	b.n	800abbc <_dtoa_r+0x1b4>
 800ac56:	9b05      	ldr	r3, [sp, #20]
 800ac58:	eba3 030b 	sub.w	r3, r3, fp
 800ac5c:	9305      	str	r3, [sp, #20]
 800ac5e:	f1cb 0300 	rsb	r3, fp, #0
 800ac62:	9308      	str	r3, [sp, #32]
 800ac64:	2300      	movs	r3, #0
 800ac66:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac68:	e7bf      	b.n	800abea <_dtoa_r+0x1e2>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	dc52      	bgt.n	800ad1a <_dtoa_r+0x312>
 800ac74:	2301      	movs	r3, #1
 800ac76:	9301      	str	r3, [sp, #4]
 800ac78:	9304      	str	r3, [sp, #16]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	920a      	str	r2, [sp, #40]	; 0x28
 800ac7e:	e00b      	b.n	800ac98 <_dtoa_r+0x290>
 800ac80:	2301      	movs	r3, #1
 800ac82:	e7f3      	b.n	800ac6c <_dtoa_r+0x264>
 800ac84:	2300      	movs	r3, #0
 800ac86:	9309      	str	r3, [sp, #36]	; 0x24
 800ac88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac8a:	445b      	add	r3, fp
 800ac8c:	9301      	str	r3, [sp, #4]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	9304      	str	r3, [sp, #16]
 800ac94:	bfb8      	it	lt
 800ac96:	2301      	movlt	r3, #1
 800ac98:	69e0      	ldr	r0, [r4, #28]
 800ac9a:	2100      	movs	r1, #0
 800ac9c:	2204      	movs	r2, #4
 800ac9e:	f102 0614 	add.w	r6, r2, #20
 800aca2:	429e      	cmp	r6, r3
 800aca4:	d93d      	bls.n	800ad22 <_dtoa_r+0x31a>
 800aca6:	6041      	str	r1, [r0, #4]
 800aca8:	4620      	mov	r0, r4
 800acaa:	f000 fceb 	bl	800b684 <_Balloc>
 800acae:	9000      	str	r0, [sp, #0]
 800acb0:	2800      	cmp	r0, #0
 800acb2:	d139      	bne.n	800ad28 <_dtoa_r+0x320>
 800acb4:	4b16      	ldr	r3, [pc, #88]	; (800ad10 <_dtoa_r+0x308>)
 800acb6:	4602      	mov	r2, r0
 800acb8:	f240 11af 	movw	r1, #431	; 0x1af
 800acbc:	e6bd      	b.n	800aa3a <_dtoa_r+0x32>
 800acbe:	2301      	movs	r3, #1
 800acc0:	e7e1      	b.n	800ac86 <_dtoa_r+0x27e>
 800acc2:	2501      	movs	r5, #1
 800acc4:	2300      	movs	r3, #0
 800acc6:	9307      	str	r3, [sp, #28]
 800acc8:	9509      	str	r5, [sp, #36]	; 0x24
 800acca:	f04f 33ff 	mov.w	r3, #4294967295
 800acce:	9301      	str	r3, [sp, #4]
 800acd0:	9304      	str	r3, [sp, #16]
 800acd2:	2200      	movs	r2, #0
 800acd4:	2312      	movs	r3, #18
 800acd6:	e7d1      	b.n	800ac7c <_dtoa_r+0x274>
 800acd8:	636f4361 	.word	0x636f4361
 800acdc:	3fd287a7 	.word	0x3fd287a7
 800ace0:	8b60c8b3 	.word	0x8b60c8b3
 800ace4:	3fc68a28 	.word	0x3fc68a28
 800ace8:	509f79fb 	.word	0x509f79fb
 800acec:	3fd34413 	.word	0x3fd34413
 800acf0:	0802074b 	.word	0x0802074b
 800acf4:	08020762 	.word	0x08020762
 800acf8:	7ff00000 	.word	0x7ff00000
 800acfc:	08020747 	.word	0x08020747
 800ad00:	0802073e 	.word	0x0802073e
 800ad04:	0800d1e6 	.word	0x0800d1e6
 800ad08:	3ff80000 	.word	0x3ff80000
 800ad0c:	08020850 	.word	0x08020850
 800ad10:	080207ba 	.word	0x080207ba
 800ad14:	2301      	movs	r3, #1
 800ad16:	9309      	str	r3, [sp, #36]	; 0x24
 800ad18:	e7d7      	b.n	800acca <_dtoa_r+0x2c2>
 800ad1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad1c:	9301      	str	r3, [sp, #4]
 800ad1e:	9304      	str	r3, [sp, #16]
 800ad20:	e7ba      	b.n	800ac98 <_dtoa_r+0x290>
 800ad22:	3101      	adds	r1, #1
 800ad24:	0052      	lsls	r2, r2, #1
 800ad26:	e7ba      	b.n	800ac9e <_dtoa_r+0x296>
 800ad28:	69e3      	ldr	r3, [r4, #28]
 800ad2a:	9a00      	ldr	r2, [sp, #0]
 800ad2c:	601a      	str	r2, [r3, #0]
 800ad2e:	9b04      	ldr	r3, [sp, #16]
 800ad30:	2b0e      	cmp	r3, #14
 800ad32:	f200 80a8 	bhi.w	800ae86 <_dtoa_r+0x47e>
 800ad36:	2d00      	cmp	r5, #0
 800ad38:	f000 80a5 	beq.w	800ae86 <_dtoa_r+0x47e>
 800ad3c:	f1bb 0f00 	cmp.w	fp, #0
 800ad40:	dd38      	ble.n	800adb4 <_dtoa_r+0x3ac>
 800ad42:	4bc0      	ldr	r3, [pc, #768]	; (800b044 <_dtoa_r+0x63c>)
 800ad44:	f00b 020f 	and.w	r2, fp, #15
 800ad48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad4c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ad50:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ad54:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ad58:	d019      	beq.n	800ad8e <_dtoa_r+0x386>
 800ad5a:	4bbb      	ldr	r3, [pc, #748]	; (800b048 <_dtoa_r+0x640>)
 800ad5c:	ec51 0b18 	vmov	r0, r1, d8
 800ad60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad64:	f7f5 fd72 	bl	800084c <__aeabi_ddiv>
 800ad68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad6c:	f008 080f 	and.w	r8, r8, #15
 800ad70:	2503      	movs	r5, #3
 800ad72:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b048 <_dtoa_r+0x640>
 800ad76:	f1b8 0f00 	cmp.w	r8, #0
 800ad7a:	d10a      	bne.n	800ad92 <_dtoa_r+0x38a>
 800ad7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad80:	4632      	mov	r2, r6
 800ad82:	463b      	mov	r3, r7
 800ad84:	f7f5 fd62 	bl	800084c <__aeabi_ddiv>
 800ad88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad8c:	e02b      	b.n	800ade6 <_dtoa_r+0x3de>
 800ad8e:	2502      	movs	r5, #2
 800ad90:	e7ef      	b.n	800ad72 <_dtoa_r+0x36a>
 800ad92:	f018 0f01 	tst.w	r8, #1
 800ad96:	d008      	beq.n	800adaa <_dtoa_r+0x3a2>
 800ad98:	4630      	mov	r0, r6
 800ad9a:	4639      	mov	r1, r7
 800ad9c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ada0:	f7f5 fc2a 	bl	80005f8 <__aeabi_dmul>
 800ada4:	3501      	adds	r5, #1
 800ada6:	4606      	mov	r6, r0
 800ada8:	460f      	mov	r7, r1
 800adaa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800adae:	f109 0908 	add.w	r9, r9, #8
 800adb2:	e7e0      	b.n	800ad76 <_dtoa_r+0x36e>
 800adb4:	f000 809f 	beq.w	800aef6 <_dtoa_r+0x4ee>
 800adb8:	f1cb 0600 	rsb	r6, fp, #0
 800adbc:	4ba1      	ldr	r3, [pc, #644]	; (800b044 <_dtoa_r+0x63c>)
 800adbe:	4fa2      	ldr	r7, [pc, #648]	; (800b048 <_dtoa_r+0x640>)
 800adc0:	f006 020f 	and.w	r2, r6, #15
 800adc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adcc:	ec51 0b18 	vmov	r0, r1, d8
 800add0:	f7f5 fc12 	bl	80005f8 <__aeabi_dmul>
 800add4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800add8:	1136      	asrs	r6, r6, #4
 800adda:	2300      	movs	r3, #0
 800addc:	2502      	movs	r5, #2
 800adde:	2e00      	cmp	r6, #0
 800ade0:	d17e      	bne.n	800aee0 <_dtoa_r+0x4d8>
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d1d0      	bne.n	800ad88 <_dtoa_r+0x380>
 800ade6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ade8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800adec:	2b00      	cmp	r3, #0
 800adee:	f000 8084 	beq.w	800aefa <_dtoa_r+0x4f2>
 800adf2:	4b96      	ldr	r3, [pc, #600]	; (800b04c <_dtoa_r+0x644>)
 800adf4:	2200      	movs	r2, #0
 800adf6:	4640      	mov	r0, r8
 800adf8:	4649      	mov	r1, r9
 800adfa:	f7f5 fe6f 	bl	8000adc <__aeabi_dcmplt>
 800adfe:	2800      	cmp	r0, #0
 800ae00:	d07b      	beq.n	800aefa <_dtoa_r+0x4f2>
 800ae02:	9b04      	ldr	r3, [sp, #16]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d078      	beq.n	800aefa <_dtoa_r+0x4f2>
 800ae08:	9b01      	ldr	r3, [sp, #4]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	dd39      	ble.n	800ae82 <_dtoa_r+0x47a>
 800ae0e:	4b90      	ldr	r3, [pc, #576]	; (800b050 <_dtoa_r+0x648>)
 800ae10:	2200      	movs	r2, #0
 800ae12:	4640      	mov	r0, r8
 800ae14:	4649      	mov	r1, r9
 800ae16:	f7f5 fbef 	bl	80005f8 <__aeabi_dmul>
 800ae1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae1e:	9e01      	ldr	r6, [sp, #4]
 800ae20:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ae24:	3501      	adds	r5, #1
 800ae26:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	f7f5 fb7a 	bl	8000524 <__aeabi_i2d>
 800ae30:	4642      	mov	r2, r8
 800ae32:	464b      	mov	r3, r9
 800ae34:	f7f5 fbe0 	bl	80005f8 <__aeabi_dmul>
 800ae38:	4b86      	ldr	r3, [pc, #536]	; (800b054 <_dtoa_r+0x64c>)
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f7f5 fa26 	bl	800028c <__adddf3>
 800ae40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ae44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae48:	9303      	str	r3, [sp, #12]
 800ae4a:	2e00      	cmp	r6, #0
 800ae4c:	d158      	bne.n	800af00 <_dtoa_r+0x4f8>
 800ae4e:	4b82      	ldr	r3, [pc, #520]	; (800b058 <_dtoa_r+0x650>)
 800ae50:	2200      	movs	r2, #0
 800ae52:	4640      	mov	r0, r8
 800ae54:	4649      	mov	r1, r9
 800ae56:	f7f5 fa17 	bl	8000288 <__aeabi_dsub>
 800ae5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae5e:	4680      	mov	r8, r0
 800ae60:	4689      	mov	r9, r1
 800ae62:	f7f5 fe59 	bl	8000b18 <__aeabi_dcmpgt>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	f040 8296 	bne.w	800b398 <_dtoa_r+0x990>
 800ae6c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ae70:	4640      	mov	r0, r8
 800ae72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae76:	4649      	mov	r1, r9
 800ae78:	f7f5 fe30 	bl	8000adc <__aeabi_dcmplt>
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	f040 8289 	bne.w	800b394 <_dtoa_r+0x98c>
 800ae82:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ae86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f2c0 814e 	blt.w	800b12a <_dtoa_r+0x722>
 800ae8e:	f1bb 0f0e 	cmp.w	fp, #14
 800ae92:	f300 814a 	bgt.w	800b12a <_dtoa_r+0x722>
 800ae96:	4b6b      	ldr	r3, [pc, #428]	; (800b044 <_dtoa_r+0x63c>)
 800ae98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ae9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f280 80dc 	bge.w	800b060 <_dtoa_r+0x658>
 800aea8:	9b04      	ldr	r3, [sp, #16]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	f300 80d8 	bgt.w	800b060 <_dtoa_r+0x658>
 800aeb0:	f040 826f 	bne.w	800b392 <_dtoa_r+0x98a>
 800aeb4:	4b68      	ldr	r3, [pc, #416]	; (800b058 <_dtoa_r+0x650>)
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	4640      	mov	r0, r8
 800aeba:	4649      	mov	r1, r9
 800aebc:	f7f5 fb9c 	bl	80005f8 <__aeabi_dmul>
 800aec0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aec4:	f7f5 fe1e 	bl	8000b04 <__aeabi_dcmpge>
 800aec8:	9e04      	ldr	r6, [sp, #16]
 800aeca:	4637      	mov	r7, r6
 800aecc:	2800      	cmp	r0, #0
 800aece:	f040 8245 	bne.w	800b35c <_dtoa_r+0x954>
 800aed2:	9d00      	ldr	r5, [sp, #0]
 800aed4:	2331      	movs	r3, #49	; 0x31
 800aed6:	f805 3b01 	strb.w	r3, [r5], #1
 800aeda:	f10b 0b01 	add.w	fp, fp, #1
 800aede:	e241      	b.n	800b364 <_dtoa_r+0x95c>
 800aee0:	07f2      	lsls	r2, r6, #31
 800aee2:	d505      	bpl.n	800aef0 <_dtoa_r+0x4e8>
 800aee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aee8:	f7f5 fb86 	bl	80005f8 <__aeabi_dmul>
 800aeec:	3501      	adds	r5, #1
 800aeee:	2301      	movs	r3, #1
 800aef0:	1076      	asrs	r6, r6, #1
 800aef2:	3708      	adds	r7, #8
 800aef4:	e773      	b.n	800adde <_dtoa_r+0x3d6>
 800aef6:	2502      	movs	r5, #2
 800aef8:	e775      	b.n	800ade6 <_dtoa_r+0x3de>
 800aefa:	9e04      	ldr	r6, [sp, #16]
 800aefc:	465f      	mov	r7, fp
 800aefe:	e792      	b.n	800ae26 <_dtoa_r+0x41e>
 800af00:	9900      	ldr	r1, [sp, #0]
 800af02:	4b50      	ldr	r3, [pc, #320]	; (800b044 <_dtoa_r+0x63c>)
 800af04:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af08:	4431      	add	r1, r6
 800af0a:	9102      	str	r1, [sp, #8]
 800af0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af0e:	eeb0 9a47 	vmov.f32	s18, s14
 800af12:	eef0 9a67 	vmov.f32	s19, s15
 800af16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800af1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af1e:	2900      	cmp	r1, #0
 800af20:	d044      	beq.n	800afac <_dtoa_r+0x5a4>
 800af22:	494e      	ldr	r1, [pc, #312]	; (800b05c <_dtoa_r+0x654>)
 800af24:	2000      	movs	r0, #0
 800af26:	f7f5 fc91 	bl	800084c <__aeabi_ddiv>
 800af2a:	ec53 2b19 	vmov	r2, r3, d9
 800af2e:	f7f5 f9ab 	bl	8000288 <__aeabi_dsub>
 800af32:	9d00      	ldr	r5, [sp, #0]
 800af34:	ec41 0b19 	vmov	d9, r0, r1
 800af38:	4649      	mov	r1, r9
 800af3a:	4640      	mov	r0, r8
 800af3c:	f7f5 fe0c 	bl	8000b58 <__aeabi_d2iz>
 800af40:	4606      	mov	r6, r0
 800af42:	f7f5 faef 	bl	8000524 <__aeabi_i2d>
 800af46:	4602      	mov	r2, r0
 800af48:	460b      	mov	r3, r1
 800af4a:	4640      	mov	r0, r8
 800af4c:	4649      	mov	r1, r9
 800af4e:	f7f5 f99b 	bl	8000288 <__aeabi_dsub>
 800af52:	3630      	adds	r6, #48	; 0x30
 800af54:	f805 6b01 	strb.w	r6, [r5], #1
 800af58:	ec53 2b19 	vmov	r2, r3, d9
 800af5c:	4680      	mov	r8, r0
 800af5e:	4689      	mov	r9, r1
 800af60:	f7f5 fdbc 	bl	8000adc <__aeabi_dcmplt>
 800af64:	2800      	cmp	r0, #0
 800af66:	d164      	bne.n	800b032 <_dtoa_r+0x62a>
 800af68:	4642      	mov	r2, r8
 800af6a:	464b      	mov	r3, r9
 800af6c:	4937      	ldr	r1, [pc, #220]	; (800b04c <_dtoa_r+0x644>)
 800af6e:	2000      	movs	r0, #0
 800af70:	f7f5 f98a 	bl	8000288 <__aeabi_dsub>
 800af74:	ec53 2b19 	vmov	r2, r3, d9
 800af78:	f7f5 fdb0 	bl	8000adc <__aeabi_dcmplt>
 800af7c:	2800      	cmp	r0, #0
 800af7e:	f040 80b6 	bne.w	800b0ee <_dtoa_r+0x6e6>
 800af82:	9b02      	ldr	r3, [sp, #8]
 800af84:	429d      	cmp	r5, r3
 800af86:	f43f af7c 	beq.w	800ae82 <_dtoa_r+0x47a>
 800af8a:	4b31      	ldr	r3, [pc, #196]	; (800b050 <_dtoa_r+0x648>)
 800af8c:	ec51 0b19 	vmov	r0, r1, d9
 800af90:	2200      	movs	r2, #0
 800af92:	f7f5 fb31 	bl	80005f8 <__aeabi_dmul>
 800af96:	4b2e      	ldr	r3, [pc, #184]	; (800b050 <_dtoa_r+0x648>)
 800af98:	ec41 0b19 	vmov	d9, r0, r1
 800af9c:	2200      	movs	r2, #0
 800af9e:	4640      	mov	r0, r8
 800afa0:	4649      	mov	r1, r9
 800afa2:	f7f5 fb29 	bl	80005f8 <__aeabi_dmul>
 800afa6:	4680      	mov	r8, r0
 800afa8:	4689      	mov	r9, r1
 800afaa:	e7c5      	b.n	800af38 <_dtoa_r+0x530>
 800afac:	ec51 0b17 	vmov	r0, r1, d7
 800afb0:	f7f5 fb22 	bl	80005f8 <__aeabi_dmul>
 800afb4:	9b02      	ldr	r3, [sp, #8]
 800afb6:	9d00      	ldr	r5, [sp, #0]
 800afb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800afba:	ec41 0b19 	vmov	d9, r0, r1
 800afbe:	4649      	mov	r1, r9
 800afc0:	4640      	mov	r0, r8
 800afc2:	f7f5 fdc9 	bl	8000b58 <__aeabi_d2iz>
 800afc6:	4606      	mov	r6, r0
 800afc8:	f7f5 faac 	bl	8000524 <__aeabi_i2d>
 800afcc:	3630      	adds	r6, #48	; 0x30
 800afce:	4602      	mov	r2, r0
 800afd0:	460b      	mov	r3, r1
 800afd2:	4640      	mov	r0, r8
 800afd4:	4649      	mov	r1, r9
 800afd6:	f7f5 f957 	bl	8000288 <__aeabi_dsub>
 800afda:	f805 6b01 	strb.w	r6, [r5], #1
 800afde:	9b02      	ldr	r3, [sp, #8]
 800afe0:	429d      	cmp	r5, r3
 800afe2:	4680      	mov	r8, r0
 800afe4:	4689      	mov	r9, r1
 800afe6:	f04f 0200 	mov.w	r2, #0
 800afea:	d124      	bne.n	800b036 <_dtoa_r+0x62e>
 800afec:	4b1b      	ldr	r3, [pc, #108]	; (800b05c <_dtoa_r+0x654>)
 800afee:	ec51 0b19 	vmov	r0, r1, d9
 800aff2:	f7f5 f94b 	bl	800028c <__adddf3>
 800aff6:	4602      	mov	r2, r0
 800aff8:	460b      	mov	r3, r1
 800affa:	4640      	mov	r0, r8
 800affc:	4649      	mov	r1, r9
 800affe:	f7f5 fd8b 	bl	8000b18 <__aeabi_dcmpgt>
 800b002:	2800      	cmp	r0, #0
 800b004:	d173      	bne.n	800b0ee <_dtoa_r+0x6e6>
 800b006:	ec53 2b19 	vmov	r2, r3, d9
 800b00a:	4914      	ldr	r1, [pc, #80]	; (800b05c <_dtoa_r+0x654>)
 800b00c:	2000      	movs	r0, #0
 800b00e:	f7f5 f93b 	bl	8000288 <__aeabi_dsub>
 800b012:	4602      	mov	r2, r0
 800b014:	460b      	mov	r3, r1
 800b016:	4640      	mov	r0, r8
 800b018:	4649      	mov	r1, r9
 800b01a:	f7f5 fd5f 	bl	8000adc <__aeabi_dcmplt>
 800b01e:	2800      	cmp	r0, #0
 800b020:	f43f af2f 	beq.w	800ae82 <_dtoa_r+0x47a>
 800b024:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b026:	1e6b      	subs	r3, r5, #1
 800b028:	930f      	str	r3, [sp, #60]	; 0x3c
 800b02a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b02e:	2b30      	cmp	r3, #48	; 0x30
 800b030:	d0f8      	beq.n	800b024 <_dtoa_r+0x61c>
 800b032:	46bb      	mov	fp, r7
 800b034:	e04a      	b.n	800b0cc <_dtoa_r+0x6c4>
 800b036:	4b06      	ldr	r3, [pc, #24]	; (800b050 <_dtoa_r+0x648>)
 800b038:	f7f5 fade 	bl	80005f8 <__aeabi_dmul>
 800b03c:	4680      	mov	r8, r0
 800b03e:	4689      	mov	r9, r1
 800b040:	e7bd      	b.n	800afbe <_dtoa_r+0x5b6>
 800b042:	bf00      	nop
 800b044:	08020850 	.word	0x08020850
 800b048:	08020828 	.word	0x08020828
 800b04c:	3ff00000 	.word	0x3ff00000
 800b050:	40240000 	.word	0x40240000
 800b054:	401c0000 	.word	0x401c0000
 800b058:	40140000 	.word	0x40140000
 800b05c:	3fe00000 	.word	0x3fe00000
 800b060:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b064:	9d00      	ldr	r5, [sp, #0]
 800b066:	4642      	mov	r2, r8
 800b068:	464b      	mov	r3, r9
 800b06a:	4630      	mov	r0, r6
 800b06c:	4639      	mov	r1, r7
 800b06e:	f7f5 fbed 	bl	800084c <__aeabi_ddiv>
 800b072:	f7f5 fd71 	bl	8000b58 <__aeabi_d2iz>
 800b076:	9001      	str	r0, [sp, #4]
 800b078:	f7f5 fa54 	bl	8000524 <__aeabi_i2d>
 800b07c:	4642      	mov	r2, r8
 800b07e:	464b      	mov	r3, r9
 800b080:	f7f5 faba 	bl	80005f8 <__aeabi_dmul>
 800b084:	4602      	mov	r2, r0
 800b086:	460b      	mov	r3, r1
 800b088:	4630      	mov	r0, r6
 800b08a:	4639      	mov	r1, r7
 800b08c:	f7f5 f8fc 	bl	8000288 <__aeabi_dsub>
 800b090:	9e01      	ldr	r6, [sp, #4]
 800b092:	9f04      	ldr	r7, [sp, #16]
 800b094:	3630      	adds	r6, #48	; 0x30
 800b096:	f805 6b01 	strb.w	r6, [r5], #1
 800b09a:	9e00      	ldr	r6, [sp, #0]
 800b09c:	1bae      	subs	r6, r5, r6
 800b09e:	42b7      	cmp	r7, r6
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	d134      	bne.n	800b110 <_dtoa_r+0x708>
 800b0a6:	f7f5 f8f1 	bl	800028c <__adddf3>
 800b0aa:	4642      	mov	r2, r8
 800b0ac:	464b      	mov	r3, r9
 800b0ae:	4606      	mov	r6, r0
 800b0b0:	460f      	mov	r7, r1
 800b0b2:	f7f5 fd31 	bl	8000b18 <__aeabi_dcmpgt>
 800b0b6:	b9c8      	cbnz	r0, 800b0ec <_dtoa_r+0x6e4>
 800b0b8:	4642      	mov	r2, r8
 800b0ba:	464b      	mov	r3, r9
 800b0bc:	4630      	mov	r0, r6
 800b0be:	4639      	mov	r1, r7
 800b0c0:	f7f5 fd02 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0c4:	b110      	cbz	r0, 800b0cc <_dtoa_r+0x6c4>
 800b0c6:	9b01      	ldr	r3, [sp, #4]
 800b0c8:	07db      	lsls	r3, r3, #31
 800b0ca:	d40f      	bmi.n	800b0ec <_dtoa_r+0x6e4>
 800b0cc:	4651      	mov	r1, sl
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	f000 fb18 	bl	800b704 <_Bfree>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0d8:	702b      	strb	r3, [r5, #0]
 800b0da:	f10b 0301 	add.w	r3, fp, #1
 800b0de:	6013      	str	r3, [r2, #0]
 800b0e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f43f ace2 	beq.w	800aaac <_dtoa_r+0xa4>
 800b0e8:	601d      	str	r5, [r3, #0]
 800b0ea:	e4df      	b.n	800aaac <_dtoa_r+0xa4>
 800b0ec:	465f      	mov	r7, fp
 800b0ee:	462b      	mov	r3, r5
 800b0f0:	461d      	mov	r5, r3
 800b0f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0f6:	2a39      	cmp	r2, #57	; 0x39
 800b0f8:	d106      	bne.n	800b108 <_dtoa_r+0x700>
 800b0fa:	9a00      	ldr	r2, [sp, #0]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d1f7      	bne.n	800b0f0 <_dtoa_r+0x6e8>
 800b100:	9900      	ldr	r1, [sp, #0]
 800b102:	2230      	movs	r2, #48	; 0x30
 800b104:	3701      	adds	r7, #1
 800b106:	700a      	strb	r2, [r1, #0]
 800b108:	781a      	ldrb	r2, [r3, #0]
 800b10a:	3201      	adds	r2, #1
 800b10c:	701a      	strb	r2, [r3, #0]
 800b10e:	e790      	b.n	800b032 <_dtoa_r+0x62a>
 800b110:	4ba3      	ldr	r3, [pc, #652]	; (800b3a0 <_dtoa_r+0x998>)
 800b112:	2200      	movs	r2, #0
 800b114:	f7f5 fa70 	bl	80005f8 <__aeabi_dmul>
 800b118:	2200      	movs	r2, #0
 800b11a:	2300      	movs	r3, #0
 800b11c:	4606      	mov	r6, r0
 800b11e:	460f      	mov	r7, r1
 800b120:	f7f5 fcd2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b124:	2800      	cmp	r0, #0
 800b126:	d09e      	beq.n	800b066 <_dtoa_r+0x65e>
 800b128:	e7d0      	b.n	800b0cc <_dtoa_r+0x6c4>
 800b12a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b12c:	2a00      	cmp	r2, #0
 800b12e:	f000 80ca 	beq.w	800b2c6 <_dtoa_r+0x8be>
 800b132:	9a07      	ldr	r2, [sp, #28]
 800b134:	2a01      	cmp	r2, #1
 800b136:	f300 80ad 	bgt.w	800b294 <_dtoa_r+0x88c>
 800b13a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b13c:	2a00      	cmp	r2, #0
 800b13e:	f000 80a5 	beq.w	800b28c <_dtoa_r+0x884>
 800b142:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b146:	9e08      	ldr	r6, [sp, #32]
 800b148:	9d05      	ldr	r5, [sp, #20]
 800b14a:	9a05      	ldr	r2, [sp, #20]
 800b14c:	441a      	add	r2, r3
 800b14e:	9205      	str	r2, [sp, #20]
 800b150:	9a06      	ldr	r2, [sp, #24]
 800b152:	2101      	movs	r1, #1
 800b154:	441a      	add	r2, r3
 800b156:	4620      	mov	r0, r4
 800b158:	9206      	str	r2, [sp, #24]
 800b15a:	f000 fb89 	bl	800b870 <__i2b>
 800b15e:	4607      	mov	r7, r0
 800b160:	b165      	cbz	r5, 800b17c <_dtoa_r+0x774>
 800b162:	9b06      	ldr	r3, [sp, #24]
 800b164:	2b00      	cmp	r3, #0
 800b166:	dd09      	ble.n	800b17c <_dtoa_r+0x774>
 800b168:	42ab      	cmp	r3, r5
 800b16a:	9a05      	ldr	r2, [sp, #20]
 800b16c:	bfa8      	it	ge
 800b16e:	462b      	movge	r3, r5
 800b170:	1ad2      	subs	r2, r2, r3
 800b172:	9205      	str	r2, [sp, #20]
 800b174:	9a06      	ldr	r2, [sp, #24]
 800b176:	1aed      	subs	r5, r5, r3
 800b178:	1ad3      	subs	r3, r2, r3
 800b17a:	9306      	str	r3, [sp, #24]
 800b17c:	9b08      	ldr	r3, [sp, #32]
 800b17e:	b1f3      	cbz	r3, 800b1be <_dtoa_r+0x7b6>
 800b180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b182:	2b00      	cmp	r3, #0
 800b184:	f000 80a3 	beq.w	800b2ce <_dtoa_r+0x8c6>
 800b188:	2e00      	cmp	r6, #0
 800b18a:	dd10      	ble.n	800b1ae <_dtoa_r+0x7a6>
 800b18c:	4639      	mov	r1, r7
 800b18e:	4632      	mov	r2, r6
 800b190:	4620      	mov	r0, r4
 800b192:	f000 fc2d 	bl	800b9f0 <__pow5mult>
 800b196:	4652      	mov	r2, sl
 800b198:	4601      	mov	r1, r0
 800b19a:	4607      	mov	r7, r0
 800b19c:	4620      	mov	r0, r4
 800b19e:	f000 fb7d 	bl	800b89c <__multiply>
 800b1a2:	4651      	mov	r1, sl
 800b1a4:	4680      	mov	r8, r0
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	f000 faac 	bl	800b704 <_Bfree>
 800b1ac:	46c2      	mov	sl, r8
 800b1ae:	9b08      	ldr	r3, [sp, #32]
 800b1b0:	1b9a      	subs	r2, r3, r6
 800b1b2:	d004      	beq.n	800b1be <_dtoa_r+0x7b6>
 800b1b4:	4651      	mov	r1, sl
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	f000 fc1a 	bl	800b9f0 <__pow5mult>
 800b1bc:	4682      	mov	sl, r0
 800b1be:	2101      	movs	r1, #1
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	f000 fb55 	bl	800b870 <__i2b>
 800b1c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	4606      	mov	r6, r0
 800b1cc:	f340 8081 	ble.w	800b2d2 <_dtoa_r+0x8ca>
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	4601      	mov	r1, r0
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f000 fc0b 	bl	800b9f0 <__pow5mult>
 800b1da:	9b07      	ldr	r3, [sp, #28]
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	4606      	mov	r6, r0
 800b1e0:	dd7a      	ble.n	800b2d8 <_dtoa_r+0x8d0>
 800b1e2:	f04f 0800 	mov.w	r8, #0
 800b1e6:	6933      	ldr	r3, [r6, #16]
 800b1e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b1ec:	6918      	ldr	r0, [r3, #16]
 800b1ee:	f000 faf1 	bl	800b7d4 <__hi0bits>
 800b1f2:	f1c0 0020 	rsb	r0, r0, #32
 800b1f6:	9b06      	ldr	r3, [sp, #24]
 800b1f8:	4418      	add	r0, r3
 800b1fa:	f010 001f 	ands.w	r0, r0, #31
 800b1fe:	f000 8094 	beq.w	800b32a <_dtoa_r+0x922>
 800b202:	f1c0 0320 	rsb	r3, r0, #32
 800b206:	2b04      	cmp	r3, #4
 800b208:	f340 8085 	ble.w	800b316 <_dtoa_r+0x90e>
 800b20c:	9b05      	ldr	r3, [sp, #20]
 800b20e:	f1c0 001c 	rsb	r0, r0, #28
 800b212:	4403      	add	r3, r0
 800b214:	9305      	str	r3, [sp, #20]
 800b216:	9b06      	ldr	r3, [sp, #24]
 800b218:	4403      	add	r3, r0
 800b21a:	4405      	add	r5, r0
 800b21c:	9306      	str	r3, [sp, #24]
 800b21e:	9b05      	ldr	r3, [sp, #20]
 800b220:	2b00      	cmp	r3, #0
 800b222:	dd05      	ble.n	800b230 <_dtoa_r+0x828>
 800b224:	4651      	mov	r1, sl
 800b226:	461a      	mov	r2, r3
 800b228:	4620      	mov	r0, r4
 800b22a:	f000 fc3b 	bl	800baa4 <__lshift>
 800b22e:	4682      	mov	sl, r0
 800b230:	9b06      	ldr	r3, [sp, #24]
 800b232:	2b00      	cmp	r3, #0
 800b234:	dd05      	ble.n	800b242 <_dtoa_r+0x83a>
 800b236:	4631      	mov	r1, r6
 800b238:	461a      	mov	r2, r3
 800b23a:	4620      	mov	r0, r4
 800b23c:	f000 fc32 	bl	800baa4 <__lshift>
 800b240:	4606      	mov	r6, r0
 800b242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b244:	2b00      	cmp	r3, #0
 800b246:	d072      	beq.n	800b32e <_dtoa_r+0x926>
 800b248:	4631      	mov	r1, r6
 800b24a:	4650      	mov	r0, sl
 800b24c:	f000 fc96 	bl	800bb7c <__mcmp>
 800b250:	2800      	cmp	r0, #0
 800b252:	da6c      	bge.n	800b32e <_dtoa_r+0x926>
 800b254:	2300      	movs	r3, #0
 800b256:	4651      	mov	r1, sl
 800b258:	220a      	movs	r2, #10
 800b25a:	4620      	mov	r0, r4
 800b25c:	f000 fa74 	bl	800b748 <__multadd>
 800b260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b262:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b266:	4682      	mov	sl, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	f000 81b0 	beq.w	800b5ce <_dtoa_r+0xbc6>
 800b26e:	2300      	movs	r3, #0
 800b270:	4639      	mov	r1, r7
 800b272:	220a      	movs	r2, #10
 800b274:	4620      	mov	r0, r4
 800b276:	f000 fa67 	bl	800b748 <__multadd>
 800b27a:	9b01      	ldr	r3, [sp, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	4607      	mov	r7, r0
 800b280:	f300 8096 	bgt.w	800b3b0 <_dtoa_r+0x9a8>
 800b284:	9b07      	ldr	r3, [sp, #28]
 800b286:	2b02      	cmp	r3, #2
 800b288:	dc59      	bgt.n	800b33e <_dtoa_r+0x936>
 800b28a:	e091      	b.n	800b3b0 <_dtoa_r+0x9a8>
 800b28c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b28e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b292:	e758      	b.n	800b146 <_dtoa_r+0x73e>
 800b294:	9b04      	ldr	r3, [sp, #16]
 800b296:	1e5e      	subs	r6, r3, #1
 800b298:	9b08      	ldr	r3, [sp, #32]
 800b29a:	42b3      	cmp	r3, r6
 800b29c:	bfbf      	itttt	lt
 800b29e:	9b08      	ldrlt	r3, [sp, #32]
 800b2a0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b2a2:	9608      	strlt	r6, [sp, #32]
 800b2a4:	1af3      	sublt	r3, r6, r3
 800b2a6:	bfb4      	ite	lt
 800b2a8:	18d2      	addlt	r2, r2, r3
 800b2aa:	1b9e      	subge	r6, r3, r6
 800b2ac:	9b04      	ldr	r3, [sp, #16]
 800b2ae:	bfbc      	itt	lt
 800b2b0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b2b2:	2600      	movlt	r6, #0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	bfb7      	itett	lt
 800b2b8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b2bc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b2c0:	1a9d      	sublt	r5, r3, r2
 800b2c2:	2300      	movlt	r3, #0
 800b2c4:	e741      	b.n	800b14a <_dtoa_r+0x742>
 800b2c6:	9e08      	ldr	r6, [sp, #32]
 800b2c8:	9d05      	ldr	r5, [sp, #20]
 800b2ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b2cc:	e748      	b.n	800b160 <_dtoa_r+0x758>
 800b2ce:	9a08      	ldr	r2, [sp, #32]
 800b2d0:	e770      	b.n	800b1b4 <_dtoa_r+0x7ac>
 800b2d2:	9b07      	ldr	r3, [sp, #28]
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	dc19      	bgt.n	800b30c <_dtoa_r+0x904>
 800b2d8:	9b02      	ldr	r3, [sp, #8]
 800b2da:	b9bb      	cbnz	r3, 800b30c <_dtoa_r+0x904>
 800b2dc:	9b03      	ldr	r3, [sp, #12]
 800b2de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2e2:	b99b      	cbnz	r3, 800b30c <_dtoa_r+0x904>
 800b2e4:	9b03      	ldr	r3, [sp, #12]
 800b2e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b2ea:	0d1b      	lsrs	r3, r3, #20
 800b2ec:	051b      	lsls	r3, r3, #20
 800b2ee:	b183      	cbz	r3, 800b312 <_dtoa_r+0x90a>
 800b2f0:	9b05      	ldr	r3, [sp, #20]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	9305      	str	r3, [sp, #20]
 800b2f6:	9b06      	ldr	r3, [sp, #24]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	9306      	str	r3, [sp, #24]
 800b2fc:	f04f 0801 	mov.w	r8, #1
 800b300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b302:	2b00      	cmp	r3, #0
 800b304:	f47f af6f 	bne.w	800b1e6 <_dtoa_r+0x7de>
 800b308:	2001      	movs	r0, #1
 800b30a:	e774      	b.n	800b1f6 <_dtoa_r+0x7ee>
 800b30c:	f04f 0800 	mov.w	r8, #0
 800b310:	e7f6      	b.n	800b300 <_dtoa_r+0x8f8>
 800b312:	4698      	mov	r8, r3
 800b314:	e7f4      	b.n	800b300 <_dtoa_r+0x8f8>
 800b316:	d082      	beq.n	800b21e <_dtoa_r+0x816>
 800b318:	9a05      	ldr	r2, [sp, #20]
 800b31a:	331c      	adds	r3, #28
 800b31c:	441a      	add	r2, r3
 800b31e:	9205      	str	r2, [sp, #20]
 800b320:	9a06      	ldr	r2, [sp, #24]
 800b322:	441a      	add	r2, r3
 800b324:	441d      	add	r5, r3
 800b326:	9206      	str	r2, [sp, #24]
 800b328:	e779      	b.n	800b21e <_dtoa_r+0x816>
 800b32a:	4603      	mov	r3, r0
 800b32c:	e7f4      	b.n	800b318 <_dtoa_r+0x910>
 800b32e:	9b04      	ldr	r3, [sp, #16]
 800b330:	2b00      	cmp	r3, #0
 800b332:	dc37      	bgt.n	800b3a4 <_dtoa_r+0x99c>
 800b334:	9b07      	ldr	r3, [sp, #28]
 800b336:	2b02      	cmp	r3, #2
 800b338:	dd34      	ble.n	800b3a4 <_dtoa_r+0x99c>
 800b33a:	9b04      	ldr	r3, [sp, #16]
 800b33c:	9301      	str	r3, [sp, #4]
 800b33e:	9b01      	ldr	r3, [sp, #4]
 800b340:	b963      	cbnz	r3, 800b35c <_dtoa_r+0x954>
 800b342:	4631      	mov	r1, r6
 800b344:	2205      	movs	r2, #5
 800b346:	4620      	mov	r0, r4
 800b348:	f000 f9fe 	bl	800b748 <__multadd>
 800b34c:	4601      	mov	r1, r0
 800b34e:	4606      	mov	r6, r0
 800b350:	4650      	mov	r0, sl
 800b352:	f000 fc13 	bl	800bb7c <__mcmp>
 800b356:	2800      	cmp	r0, #0
 800b358:	f73f adbb 	bgt.w	800aed2 <_dtoa_r+0x4ca>
 800b35c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b35e:	9d00      	ldr	r5, [sp, #0]
 800b360:	ea6f 0b03 	mvn.w	fp, r3
 800b364:	f04f 0800 	mov.w	r8, #0
 800b368:	4631      	mov	r1, r6
 800b36a:	4620      	mov	r0, r4
 800b36c:	f000 f9ca 	bl	800b704 <_Bfree>
 800b370:	2f00      	cmp	r7, #0
 800b372:	f43f aeab 	beq.w	800b0cc <_dtoa_r+0x6c4>
 800b376:	f1b8 0f00 	cmp.w	r8, #0
 800b37a:	d005      	beq.n	800b388 <_dtoa_r+0x980>
 800b37c:	45b8      	cmp	r8, r7
 800b37e:	d003      	beq.n	800b388 <_dtoa_r+0x980>
 800b380:	4641      	mov	r1, r8
 800b382:	4620      	mov	r0, r4
 800b384:	f000 f9be 	bl	800b704 <_Bfree>
 800b388:	4639      	mov	r1, r7
 800b38a:	4620      	mov	r0, r4
 800b38c:	f000 f9ba 	bl	800b704 <_Bfree>
 800b390:	e69c      	b.n	800b0cc <_dtoa_r+0x6c4>
 800b392:	2600      	movs	r6, #0
 800b394:	4637      	mov	r7, r6
 800b396:	e7e1      	b.n	800b35c <_dtoa_r+0x954>
 800b398:	46bb      	mov	fp, r7
 800b39a:	4637      	mov	r7, r6
 800b39c:	e599      	b.n	800aed2 <_dtoa_r+0x4ca>
 800b39e:	bf00      	nop
 800b3a0:	40240000 	.word	0x40240000
 800b3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	f000 80c8 	beq.w	800b53c <_dtoa_r+0xb34>
 800b3ac:	9b04      	ldr	r3, [sp, #16]
 800b3ae:	9301      	str	r3, [sp, #4]
 800b3b0:	2d00      	cmp	r5, #0
 800b3b2:	dd05      	ble.n	800b3c0 <_dtoa_r+0x9b8>
 800b3b4:	4639      	mov	r1, r7
 800b3b6:	462a      	mov	r2, r5
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	f000 fb73 	bl	800baa4 <__lshift>
 800b3be:	4607      	mov	r7, r0
 800b3c0:	f1b8 0f00 	cmp.w	r8, #0
 800b3c4:	d05b      	beq.n	800b47e <_dtoa_r+0xa76>
 800b3c6:	6879      	ldr	r1, [r7, #4]
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f000 f95b 	bl	800b684 <_Balloc>
 800b3ce:	4605      	mov	r5, r0
 800b3d0:	b928      	cbnz	r0, 800b3de <_dtoa_r+0x9d6>
 800b3d2:	4b83      	ldr	r3, [pc, #524]	; (800b5e0 <_dtoa_r+0xbd8>)
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b3da:	f7ff bb2e 	b.w	800aa3a <_dtoa_r+0x32>
 800b3de:	693a      	ldr	r2, [r7, #16]
 800b3e0:	3202      	adds	r2, #2
 800b3e2:	0092      	lsls	r2, r2, #2
 800b3e4:	f107 010c 	add.w	r1, r7, #12
 800b3e8:	300c      	adds	r0, #12
 800b3ea:	f7ff fa74 	bl	800a8d6 <memcpy>
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	4629      	mov	r1, r5
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	f000 fb56 	bl	800baa4 <__lshift>
 800b3f8:	9b00      	ldr	r3, [sp, #0]
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	9304      	str	r3, [sp, #16]
 800b3fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b402:	4413      	add	r3, r2
 800b404:	9308      	str	r3, [sp, #32]
 800b406:	9b02      	ldr	r3, [sp, #8]
 800b408:	f003 0301 	and.w	r3, r3, #1
 800b40c:	46b8      	mov	r8, r7
 800b40e:	9306      	str	r3, [sp, #24]
 800b410:	4607      	mov	r7, r0
 800b412:	9b04      	ldr	r3, [sp, #16]
 800b414:	4631      	mov	r1, r6
 800b416:	3b01      	subs	r3, #1
 800b418:	4650      	mov	r0, sl
 800b41a:	9301      	str	r3, [sp, #4]
 800b41c:	f7ff fa69 	bl	800a8f2 <quorem>
 800b420:	4641      	mov	r1, r8
 800b422:	9002      	str	r0, [sp, #8]
 800b424:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b428:	4650      	mov	r0, sl
 800b42a:	f000 fba7 	bl	800bb7c <__mcmp>
 800b42e:	463a      	mov	r2, r7
 800b430:	9005      	str	r0, [sp, #20]
 800b432:	4631      	mov	r1, r6
 800b434:	4620      	mov	r0, r4
 800b436:	f000 fbbd 	bl	800bbb4 <__mdiff>
 800b43a:	68c2      	ldr	r2, [r0, #12]
 800b43c:	4605      	mov	r5, r0
 800b43e:	bb02      	cbnz	r2, 800b482 <_dtoa_r+0xa7a>
 800b440:	4601      	mov	r1, r0
 800b442:	4650      	mov	r0, sl
 800b444:	f000 fb9a 	bl	800bb7c <__mcmp>
 800b448:	4602      	mov	r2, r0
 800b44a:	4629      	mov	r1, r5
 800b44c:	4620      	mov	r0, r4
 800b44e:	9209      	str	r2, [sp, #36]	; 0x24
 800b450:	f000 f958 	bl	800b704 <_Bfree>
 800b454:	9b07      	ldr	r3, [sp, #28]
 800b456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b458:	9d04      	ldr	r5, [sp, #16]
 800b45a:	ea43 0102 	orr.w	r1, r3, r2
 800b45e:	9b06      	ldr	r3, [sp, #24]
 800b460:	4319      	orrs	r1, r3
 800b462:	d110      	bne.n	800b486 <_dtoa_r+0xa7e>
 800b464:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b468:	d029      	beq.n	800b4be <_dtoa_r+0xab6>
 800b46a:	9b05      	ldr	r3, [sp, #20]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	dd02      	ble.n	800b476 <_dtoa_r+0xa6e>
 800b470:	9b02      	ldr	r3, [sp, #8]
 800b472:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b476:	9b01      	ldr	r3, [sp, #4]
 800b478:	f883 9000 	strb.w	r9, [r3]
 800b47c:	e774      	b.n	800b368 <_dtoa_r+0x960>
 800b47e:	4638      	mov	r0, r7
 800b480:	e7ba      	b.n	800b3f8 <_dtoa_r+0x9f0>
 800b482:	2201      	movs	r2, #1
 800b484:	e7e1      	b.n	800b44a <_dtoa_r+0xa42>
 800b486:	9b05      	ldr	r3, [sp, #20]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	db04      	blt.n	800b496 <_dtoa_r+0xa8e>
 800b48c:	9907      	ldr	r1, [sp, #28]
 800b48e:	430b      	orrs	r3, r1
 800b490:	9906      	ldr	r1, [sp, #24]
 800b492:	430b      	orrs	r3, r1
 800b494:	d120      	bne.n	800b4d8 <_dtoa_r+0xad0>
 800b496:	2a00      	cmp	r2, #0
 800b498:	dded      	ble.n	800b476 <_dtoa_r+0xa6e>
 800b49a:	4651      	mov	r1, sl
 800b49c:	2201      	movs	r2, #1
 800b49e:	4620      	mov	r0, r4
 800b4a0:	f000 fb00 	bl	800baa4 <__lshift>
 800b4a4:	4631      	mov	r1, r6
 800b4a6:	4682      	mov	sl, r0
 800b4a8:	f000 fb68 	bl	800bb7c <__mcmp>
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	dc03      	bgt.n	800b4b8 <_dtoa_r+0xab0>
 800b4b0:	d1e1      	bne.n	800b476 <_dtoa_r+0xa6e>
 800b4b2:	f019 0f01 	tst.w	r9, #1
 800b4b6:	d0de      	beq.n	800b476 <_dtoa_r+0xa6e>
 800b4b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b4bc:	d1d8      	bne.n	800b470 <_dtoa_r+0xa68>
 800b4be:	9a01      	ldr	r2, [sp, #4]
 800b4c0:	2339      	movs	r3, #57	; 0x39
 800b4c2:	7013      	strb	r3, [r2, #0]
 800b4c4:	462b      	mov	r3, r5
 800b4c6:	461d      	mov	r5, r3
 800b4c8:	3b01      	subs	r3, #1
 800b4ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b4ce:	2a39      	cmp	r2, #57	; 0x39
 800b4d0:	d06c      	beq.n	800b5ac <_dtoa_r+0xba4>
 800b4d2:	3201      	adds	r2, #1
 800b4d4:	701a      	strb	r2, [r3, #0]
 800b4d6:	e747      	b.n	800b368 <_dtoa_r+0x960>
 800b4d8:	2a00      	cmp	r2, #0
 800b4da:	dd07      	ble.n	800b4ec <_dtoa_r+0xae4>
 800b4dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b4e0:	d0ed      	beq.n	800b4be <_dtoa_r+0xab6>
 800b4e2:	9a01      	ldr	r2, [sp, #4]
 800b4e4:	f109 0301 	add.w	r3, r9, #1
 800b4e8:	7013      	strb	r3, [r2, #0]
 800b4ea:	e73d      	b.n	800b368 <_dtoa_r+0x960>
 800b4ec:	9b04      	ldr	r3, [sp, #16]
 800b4ee:	9a08      	ldr	r2, [sp, #32]
 800b4f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d043      	beq.n	800b580 <_dtoa_r+0xb78>
 800b4f8:	4651      	mov	r1, sl
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	220a      	movs	r2, #10
 800b4fe:	4620      	mov	r0, r4
 800b500:	f000 f922 	bl	800b748 <__multadd>
 800b504:	45b8      	cmp	r8, r7
 800b506:	4682      	mov	sl, r0
 800b508:	f04f 0300 	mov.w	r3, #0
 800b50c:	f04f 020a 	mov.w	r2, #10
 800b510:	4641      	mov	r1, r8
 800b512:	4620      	mov	r0, r4
 800b514:	d107      	bne.n	800b526 <_dtoa_r+0xb1e>
 800b516:	f000 f917 	bl	800b748 <__multadd>
 800b51a:	4680      	mov	r8, r0
 800b51c:	4607      	mov	r7, r0
 800b51e:	9b04      	ldr	r3, [sp, #16]
 800b520:	3301      	adds	r3, #1
 800b522:	9304      	str	r3, [sp, #16]
 800b524:	e775      	b.n	800b412 <_dtoa_r+0xa0a>
 800b526:	f000 f90f 	bl	800b748 <__multadd>
 800b52a:	4639      	mov	r1, r7
 800b52c:	4680      	mov	r8, r0
 800b52e:	2300      	movs	r3, #0
 800b530:	220a      	movs	r2, #10
 800b532:	4620      	mov	r0, r4
 800b534:	f000 f908 	bl	800b748 <__multadd>
 800b538:	4607      	mov	r7, r0
 800b53a:	e7f0      	b.n	800b51e <_dtoa_r+0xb16>
 800b53c:	9b04      	ldr	r3, [sp, #16]
 800b53e:	9301      	str	r3, [sp, #4]
 800b540:	9d00      	ldr	r5, [sp, #0]
 800b542:	4631      	mov	r1, r6
 800b544:	4650      	mov	r0, sl
 800b546:	f7ff f9d4 	bl	800a8f2 <quorem>
 800b54a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b54e:	9b00      	ldr	r3, [sp, #0]
 800b550:	f805 9b01 	strb.w	r9, [r5], #1
 800b554:	1aea      	subs	r2, r5, r3
 800b556:	9b01      	ldr	r3, [sp, #4]
 800b558:	4293      	cmp	r3, r2
 800b55a:	dd07      	ble.n	800b56c <_dtoa_r+0xb64>
 800b55c:	4651      	mov	r1, sl
 800b55e:	2300      	movs	r3, #0
 800b560:	220a      	movs	r2, #10
 800b562:	4620      	mov	r0, r4
 800b564:	f000 f8f0 	bl	800b748 <__multadd>
 800b568:	4682      	mov	sl, r0
 800b56a:	e7ea      	b.n	800b542 <_dtoa_r+0xb3a>
 800b56c:	9b01      	ldr	r3, [sp, #4]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	bfc8      	it	gt
 800b572:	461d      	movgt	r5, r3
 800b574:	9b00      	ldr	r3, [sp, #0]
 800b576:	bfd8      	it	le
 800b578:	2501      	movle	r5, #1
 800b57a:	441d      	add	r5, r3
 800b57c:	f04f 0800 	mov.w	r8, #0
 800b580:	4651      	mov	r1, sl
 800b582:	2201      	movs	r2, #1
 800b584:	4620      	mov	r0, r4
 800b586:	f000 fa8d 	bl	800baa4 <__lshift>
 800b58a:	4631      	mov	r1, r6
 800b58c:	4682      	mov	sl, r0
 800b58e:	f000 faf5 	bl	800bb7c <__mcmp>
 800b592:	2800      	cmp	r0, #0
 800b594:	dc96      	bgt.n	800b4c4 <_dtoa_r+0xabc>
 800b596:	d102      	bne.n	800b59e <_dtoa_r+0xb96>
 800b598:	f019 0f01 	tst.w	r9, #1
 800b59c:	d192      	bne.n	800b4c4 <_dtoa_r+0xabc>
 800b59e:	462b      	mov	r3, r5
 800b5a0:	461d      	mov	r5, r3
 800b5a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5a6:	2a30      	cmp	r2, #48	; 0x30
 800b5a8:	d0fa      	beq.n	800b5a0 <_dtoa_r+0xb98>
 800b5aa:	e6dd      	b.n	800b368 <_dtoa_r+0x960>
 800b5ac:	9a00      	ldr	r2, [sp, #0]
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d189      	bne.n	800b4c6 <_dtoa_r+0xabe>
 800b5b2:	f10b 0b01 	add.w	fp, fp, #1
 800b5b6:	2331      	movs	r3, #49	; 0x31
 800b5b8:	e796      	b.n	800b4e8 <_dtoa_r+0xae0>
 800b5ba:	4b0a      	ldr	r3, [pc, #40]	; (800b5e4 <_dtoa_r+0xbdc>)
 800b5bc:	f7ff ba99 	b.w	800aaf2 <_dtoa_r+0xea>
 800b5c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	f47f aa6d 	bne.w	800aaa2 <_dtoa_r+0x9a>
 800b5c8:	4b07      	ldr	r3, [pc, #28]	; (800b5e8 <_dtoa_r+0xbe0>)
 800b5ca:	f7ff ba92 	b.w	800aaf2 <_dtoa_r+0xea>
 800b5ce:	9b01      	ldr	r3, [sp, #4]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	dcb5      	bgt.n	800b540 <_dtoa_r+0xb38>
 800b5d4:	9b07      	ldr	r3, [sp, #28]
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	f73f aeb1 	bgt.w	800b33e <_dtoa_r+0x936>
 800b5dc:	e7b0      	b.n	800b540 <_dtoa_r+0xb38>
 800b5de:	bf00      	nop
 800b5e0:	080207ba 	.word	0x080207ba
 800b5e4:	0800d1e5 	.word	0x0800d1e5
 800b5e8:	0802073e 	.word	0x0802073e

0800b5ec <_free_r>:
 800b5ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5ee:	2900      	cmp	r1, #0
 800b5f0:	d044      	beq.n	800b67c <_free_r+0x90>
 800b5f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5f6:	9001      	str	r0, [sp, #4]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	f1a1 0404 	sub.w	r4, r1, #4
 800b5fe:	bfb8      	it	lt
 800b600:	18e4      	addlt	r4, r4, r3
 800b602:	f7fe fb4f 	bl	8009ca4 <__malloc_lock>
 800b606:	4a1e      	ldr	r2, [pc, #120]	; (800b680 <_free_r+0x94>)
 800b608:	9801      	ldr	r0, [sp, #4]
 800b60a:	6813      	ldr	r3, [r2, #0]
 800b60c:	b933      	cbnz	r3, 800b61c <_free_r+0x30>
 800b60e:	6063      	str	r3, [r4, #4]
 800b610:	6014      	str	r4, [r2, #0]
 800b612:	b003      	add	sp, #12
 800b614:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b618:	f7fe bb4a 	b.w	8009cb0 <__malloc_unlock>
 800b61c:	42a3      	cmp	r3, r4
 800b61e:	d908      	bls.n	800b632 <_free_r+0x46>
 800b620:	6825      	ldr	r5, [r4, #0]
 800b622:	1961      	adds	r1, r4, r5
 800b624:	428b      	cmp	r3, r1
 800b626:	bf01      	itttt	eq
 800b628:	6819      	ldreq	r1, [r3, #0]
 800b62a:	685b      	ldreq	r3, [r3, #4]
 800b62c:	1949      	addeq	r1, r1, r5
 800b62e:	6021      	streq	r1, [r4, #0]
 800b630:	e7ed      	b.n	800b60e <_free_r+0x22>
 800b632:	461a      	mov	r2, r3
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	b10b      	cbz	r3, 800b63c <_free_r+0x50>
 800b638:	42a3      	cmp	r3, r4
 800b63a:	d9fa      	bls.n	800b632 <_free_r+0x46>
 800b63c:	6811      	ldr	r1, [r2, #0]
 800b63e:	1855      	adds	r5, r2, r1
 800b640:	42a5      	cmp	r5, r4
 800b642:	d10b      	bne.n	800b65c <_free_r+0x70>
 800b644:	6824      	ldr	r4, [r4, #0]
 800b646:	4421      	add	r1, r4
 800b648:	1854      	adds	r4, r2, r1
 800b64a:	42a3      	cmp	r3, r4
 800b64c:	6011      	str	r1, [r2, #0]
 800b64e:	d1e0      	bne.n	800b612 <_free_r+0x26>
 800b650:	681c      	ldr	r4, [r3, #0]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	6053      	str	r3, [r2, #4]
 800b656:	440c      	add	r4, r1
 800b658:	6014      	str	r4, [r2, #0]
 800b65a:	e7da      	b.n	800b612 <_free_r+0x26>
 800b65c:	d902      	bls.n	800b664 <_free_r+0x78>
 800b65e:	230c      	movs	r3, #12
 800b660:	6003      	str	r3, [r0, #0]
 800b662:	e7d6      	b.n	800b612 <_free_r+0x26>
 800b664:	6825      	ldr	r5, [r4, #0]
 800b666:	1961      	adds	r1, r4, r5
 800b668:	428b      	cmp	r3, r1
 800b66a:	bf04      	itt	eq
 800b66c:	6819      	ldreq	r1, [r3, #0]
 800b66e:	685b      	ldreq	r3, [r3, #4]
 800b670:	6063      	str	r3, [r4, #4]
 800b672:	bf04      	itt	eq
 800b674:	1949      	addeq	r1, r1, r5
 800b676:	6021      	streq	r1, [r4, #0]
 800b678:	6054      	str	r4, [r2, #4]
 800b67a:	e7ca      	b.n	800b612 <_free_r+0x26>
 800b67c:	b003      	add	sp, #12
 800b67e:	bd30      	pop	{r4, r5, pc}
 800b680:	20007b70 	.word	0x20007b70

0800b684 <_Balloc>:
 800b684:	b570      	push	{r4, r5, r6, lr}
 800b686:	69c6      	ldr	r6, [r0, #28]
 800b688:	4604      	mov	r4, r0
 800b68a:	460d      	mov	r5, r1
 800b68c:	b976      	cbnz	r6, 800b6ac <_Balloc+0x28>
 800b68e:	2010      	movs	r0, #16
 800b690:	f7f7 ff9c 	bl	80035cc <__wrap_malloc>
 800b694:	4602      	mov	r2, r0
 800b696:	61e0      	str	r0, [r4, #28]
 800b698:	b920      	cbnz	r0, 800b6a4 <_Balloc+0x20>
 800b69a:	4b18      	ldr	r3, [pc, #96]	; (800b6fc <_Balloc+0x78>)
 800b69c:	4818      	ldr	r0, [pc, #96]	; (800b700 <_Balloc+0x7c>)
 800b69e:	216b      	movs	r1, #107	; 0x6b
 800b6a0:	f000 fc1a 	bl	800bed8 <__assert_func>
 800b6a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6a8:	6006      	str	r6, [r0, #0]
 800b6aa:	60c6      	str	r6, [r0, #12]
 800b6ac:	69e6      	ldr	r6, [r4, #28]
 800b6ae:	68f3      	ldr	r3, [r6, #12]
 800b6b0:	b183      	cbz	r3, 800b6d4 <_Balloc+0x50>
 800b6b2:	69e3      	ldr	r3, [r4, #28]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b6ba:	b9b8      	cbnz	r0, 800b6ec <_Balloc+0x68>
 800b6bc:	2101      	movs	r1, #1
 800b6be:	fa01 f605 	lsl.w	r6, r1, r5
 800b6c2:	1d72      	adds	r2, r6, #5
 800b6c4:	0092      	lsls	r2, r2, #2
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	f000 fc24 	bl	800bf14 <_calloc_r>
 800b6cc:	b160      	cbz	r0, 800b6e8 <_Balloc+0x64>
 800b6ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b6d2:	e00e      	b.n	800b6f2 <_Balloc+0x6e>
 800b6d4:	2221      	movs	r2, #33	; 0x21
 800b6d6:	2104      	movs	r1, #4
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f000 fc1b 	bl	800bf14 <_calloc_r>
 800b6de:	69e3      	ldr	r3, [r4, #28]
 800b6e0:	60f0      	str	r0, [r6, #12]
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d1e4      	bne.n	800b6b2 <_Balloc+0x2e>
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	bd70      	pop	{r4, r5, r6, pc}
 800b6ec:	6802      	ldr	r2, [r0, #0]
 800b6ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b6f8:	e7f7      	b.n	800b6ea <_Balloc+0x66>
 800b6fa:	bf00      	nop
 800b6fc:	0802074b 	.word	0x0802074b
 800b700:	080207cb 	.word	0x080207cb

0800b704 <_Bfree>:
 800b704:	b570      	push	{r4, r5, r6, lr}
 800b706:	69c6      	ldr	r6, [r0, #28]
 800b708:	4605      	mov	r5, r0
 800b70a:	460c      	mov	r4, r1
 800b70c:	b976      	cbnz	r6, 800b72c <_Bfree+0x28>
 800b70e:	2010      	movs	r0, #16
 800b710:	f7f7 ff5c 	bl	80035cc <__wrap_malloc>
 800b714:	4602      	mov	r2, r0
 800b716:	61e8      	str	r0, [r5, #28]
 800b718:	b920      	cbnz	r0, 800b724 <_Bfree+0x20>
 800b71a:	4b09      	ldr	r3, [pc, #36]	; (800b740 <_Bfree+0x3c>)
 800b71c:	4809      	ldr	r0, [pc, #36]	; (800b744 <_Bfree+0x40>)
 800b71e:	218f      	movs	r1, #143	; 0x8f
 800b720:	f000 fbda 	bl	800bed8 <__assert_func>
 800b724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b728:	6006      	str	r6, [r0, #0]
 800b72a:	60c6      	str	r6, [r0, #12]
 800b72c:	b13c      	cbz	r4, 800b73e <_Bfree+0x3a>
 800b72e:	69eb      	ldr	r3, [r5, #28]
 800b730:	6862      	ldr	r2, [r4, #4]
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b738:	6021      	str	r1, [r4, #0]
 800b73a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b73e:	bd70      	pop	{r4, r5, r6, pc}
 800b740:	0802074b 	.word	0x0802074b
 800b744:	080207cb 	.word	0x080207cb

0800b748 <__multadd>:
 800b748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b74c:	690d      	ldr	r5, [r1, #16]
 800b74e:	4607      	mov	r7, r0
 800b750:	460c      	mov	r4, r1
 800b752:	461e      	mov	r6, r3
 800b754:	f101 0c14 	add.w	ip, r1, #20
 800b758:	2000      	movs	r0, #0
 800b75a:	f8dc 3000 	ldr.w	r3, [ip]
 800b75e:	b299      	uxth	r1, r3
 800b760:	fb02 6101 	mla	r1, r2, r1, r6
 800b764:	0c1e      	lsrs	r6, r3, #16
 800b766:	0c0b      	lsrs	r3, r1, #16
 800b768:	fb02 3306 	mla	r3, r2, r6, r3
 800b76c:	b289      	uxth	r1, r1
 800b76e:	3001      	adds	r0, #1
 800b770:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b774:	4285      	cmp	r5, r0
 800b776:	f84c 1b04 	str.w	r1, [ip], #4
 800b77a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b77e:	dcec      	bgt.n	800b75a <__multadd+0x12>
 800b780:	b30e      	cbz	r6, 800b7c6 <__multadd+0x7e>
 800b782:	68a3      	ldr	r3, [r4, #8]
 800b784:	42ab      	cmp	r3, r5
 800b786:	dc19      	bgt.n	800b7bc <__multadd+0x74>
 800b788:	6861      	ldr	r1, [r4, #4]
 800b78a:	4638      	mov	r0, r7
 800b78c:	3101      	adds	r1, #1
 800b78e:	f7ff ff79 	bl	800b684 <_Balloc>
 800b792:	4680      	mov	r8, r0
 800b794:	b928      	cbnz	r0, 800b7a2 <__multadd+0x5a>
 800b796:	4602      	mov	r2, r0
 800b798:	4b0c      	ldr	r3, [pc, #48]	; (800b7cc <__multadd+0x84>)
 800b79a:	480d      	ldr	r0, [pc, #52]	; (800b7d0 <__multadd+0x88>)
 800b79c:	21ba      	movs	r1, #186	; 0xba
 800b79e:	f000 fb9b 	bl	800bed8 <__assert_func>
 800b7a2:	6922      	ldr	r2, [r4, #16]
 800b7a4:	3202      	adds	r2, #2
 800b7a6:	f104 010c 	add.w	r1, r4, #12
 800b7aa:	0092      	lsls	r2, r2, #2
 800b7ac:	300c      	adds	r0, #12
 800b7ae:	f7ff f892 	bl	800a8d6 <memcpy>
 800b7b2:	4621      	mov	r1, r4
 800b7b4:	4638      	mov	r0, r7
 800b7b6:	f7ff ffa5 	bl	800b704 <_Bfree>
 800b7ba:	4644      	mov	r4, r8
 800b7bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b7c0:	3501      	adds	r5, #1
 800b7c2:	615e      	str	r6, [r3, #20]
 800b7c4:	6125      	str	r5, [r4, #16]
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7cc:	080207ba 	.word	0x080207ba
 800b7d0:	080207cb 	.word	0x080207cb

0800b7d4 <__hi0bits>:
 800b7d4:	0c03      	lsrs	r3, r0, #16
 800b7d6:	041b      	lsls	r3, r3, #16
 800b7d8:	b9d3      	cbnz	r3, 800b810 <__hi0bits+0x3c>
 800b7da:	0400      	lsls	r0, r0, #16
 800b7dc:	2310      	movs	r3, #16
 800b7de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b7e2:	bf04      	itt	eq
 800b7e4:	0200      	lsleq	r0, r0, #8
 800b7e6:	3308      	addeq	r3, #8
 800b7e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b7ec:	bf04      	itt	eq
 800b7ee:	0100      	lsleq	r0, r0, #4
 800b7f0:	3304      	addeq	r3, #4
 800b7f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b7f6:	bf04      	itt	eq
 800b7f8:	0080      	lsleq	r0, r0, #2
 800b7fa:	3302      	addeq	r3, #2
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	db05      	blt.n	800b80c <__hi0bits+0x38>
 800b800:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b804:	f103 0301 	add.w	r3, r3, #1
 800b808:	bf08      	it	eq
 800b80a:	2320      	moveq	r3, #32
 800b80c:	4618      	mov	r0, r3
 800b80e:	4770      	bx	lr
 800b810:	2300      	movs	r3, #0
 800b812:	e7e4      	b.n	800b7de <__hi0bits+0xa>

0800b814 <__lo0bits>:
 800b814:	6803      	ldr	r3, [r0, #0]
 800b816:	f013 0207 	ands.w	r2, r3, #7
 800b81a:	d00c      	beq.n	800b836 <__lo0bits+0x22>
 800b81c:	07d9      	lsls	r1, r3, #31
 800b81e:	d422      	bmi.n	800b866 <__lo0bits+0x52>
 800b820:	079a      	lsls	r2, r3, #30
 800b822:	bf49      	itett	mi
 800b824:	085b      	lsrmi	r3, r3, #1
 800b826:	089b      	lsrpl	r3, r3, #2
 800b828:	6003      	strmi	r3, [r0, #0]
 800b82a:	2201      	movmi	r2, #1
 800b82c:	bf5c      	itt	pl
 800b82e:	6003      	strpl	r3, [r0, #0]
 800b830:	2202      	movpl	r2, #2
 800b832:	4610      	mov	r0, r2
 800b834:	4770      	bx	lr
 800b836:	b299      	uxth	r1, r3
 800b838:	b909      	cbnz	r1, 800b83e <__lo0bits+0x2a>
 800b83a:	0c1b      	lsrs	r3, r3, #16
 800b83c:	2210      	movs	r2, #16
 800b83e:	b2d9      	uxtb	r1, r3
 800b840:	b909      	cbnz	r1, 800b846 <__lo0bits+0x32>
 800b842:	3208      	adds	r2, #8
 800b844:	0a1b      	lsrs	r3, r3, #8
 800b846:	0719      	lsls	r1, r3, #28
 800b848:	bf04      	itt	eq
 800b84a:	091b      	lsreq	r3, r3, #4
 800b84c:	3204      	addeq	r2, #4
 800b84e:	0799      	lsls	r1, r3, #30
 800b850:	bf04      	itt	eq
 800b852:	089b      	lsreq	r3, r3, #2
 800b854:	3202      	addeq	r2, #2
 800b856:	07d9      	lsls	r1, r3, #31
 800b858:	d403      	bmi.n	800b862 <__lo0bits+0x4e>
 800b85a:	085b      	lsrs	r3, r3, #1
 800b85c:	f102 0201 	add.w	r2, r2, #1
 800b860:	d003      	beq.n	800b86a <__lo0bits+0x56>
 800b862:	6003      	str	r3, [r0, #0]
 800b864:	e7e5      	b.n	800b832 <__lo0bits+0x1e>
 800b866:	2200      	movs	r2, #0
 800b868:	e7e3      	b.n	800b832 <__lo0bits+0x1e>
 800b86a:	2220      	movs	r2, #32
 800b86c:	e7e1      	b.n	800b832 <__lo0bits+0x1e>
	...

0800b870 <__i2b>:
 800b870:	b510      	push	{r4, lr}
 800b872:	460c      	mov	r4, r1
 800b874:	2101      	movs	r1, #1
 800b876:	f7ff ff05 	bl	800b684 <_Balloc>
 800b87a:	4602      	mov	r2, r0
 800b87c:	b928      	cbnz	r0, 800b88a <__i2b+0x1a>
 800b87e:	4b05      	ldr	r3, [pc, #20]	; (800b894 <__i2b+0x24>)
 800b880:	4805      	ldr	r0, [pc, #20]	; (800b898 <__i2b+0x28>)
 800b882:	f240 1145 	movw	r1, #325	; 0x145
 800b886:	f000 fb27 	bl	800bed8 <__assert_func>
 800b88a:	2301      	movs	r3, #1
 800b88c:	6144      	str	r4, [r0, #20]
 800b88e:	6103      	str	r3, [r0, #16]
 800b890:	bd10      	pop	{r4, pc}
 800b892:	bf00      	nop
 800b894:	080207ba 	.word	0x080207ba
 800b898:	080207cb 	.word	0x080207cb

0800b89c <__multiply>:
 800b89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a0:	4691      	mov	r9, r2
 800b8a2:	690a      	ldr	r2, [r1, #16]
 800b8a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	bfb8      	it	lt
 800b8ac:	460b      	movlt	r3, r1
 800b8ae:	460c      	mov	r4, r1
 800b8b0:	bfbc      	itt	lt
 800b8b2:	464c      	movlt	r4, r9
 800b8b4:	4699      	movlt	r9, r3
 800b8b6:	6927      	ldr	r7, [r4, #16]
 800b8b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b8bc:	68a3      	ldr	r3, [r4, #8]
 800b8be:	6861      	ldr	r1, [r4, #4]
 800b8c0:	eb07 060a 	add.w	r6, r7, sl
 800b8c4:	42b3      	cmp	r3, r6
 800b8c6:	b085      	sub	sp, #20
 800b8c8:	bfb8      	it	lt
 800b8ca:	3101      	addlt	r1, #1
 800b8cc:	f7ff feda 	bl	800b684 <_Balloc>
 800b8d0:	b930      	cbnz	r0, 800b8e0 <__multiply+0x44>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	4b44      	ldr	r3, [pc, #272]	; (800b9e8 <__multiply+0x14c>)
 800b8d6:	4845      	ldr	r0, [pc, #276]	; (800b9ec <__multiply+0x150>)
 800b8d8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b8dc:	f000 fafc 	bl	800bed8 <__assert_func>
 800b8e0:	f100 0514 	add.w	r5, r0, #20
 800b8e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b8e8:	462b      	mov	r3, r5
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	4543      	cmp	r3, r8
 800b8ee:	d321      	bcc.n	800b934 <__multiply+0x98>
 800b8f0:	f104 0314 	add.w	r3, r4, #20
 800b8f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b8f8:	f109 0314 	add.w	r3, r9, #20
 800b8fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b900:	9202      	str	r2, [sp, #8]
 800b902:	1b3a      	subs	r2, r7, r4
 800b904:	3a15      	subs	r2, #21
 800b906:	f022 0203 	bic.w	r2, r2, #3
 800b90a:	3204      	adds	r2, #4
 800b90c:	f104 0115 	add.w	r1, r4, #21
 800b910:	428f      	cmp	r7, r1
 800b912:	bf38      	it	cc
 800b914:	2204      	movcc	r2, #4
 800b916:	9201      	str	r2, [sp, #4]
 800b918:	9a02      	ldr	r2, [sp, #8]
 800b91a:	9303      	str	r3, [sp, #12]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d80c      	bhi.n	800b93a <__multiply+0x9e>
 800b920:	2e00      	cmp	r6, #0
 800b922:	dd03      	ble.n	800b92c <__multiply+0x90>
 800b924:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d05b      	beq.n	800b9e4 <__multiply+0x148>
 800b92c:	6106      	str	r6, [r0, #16]
 800b92e:	b005      	add	sp, #20
 800b930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b934:	f843 2b04 	str.w	r2, [r3], #4
 800b938:	e7d8      	b.n	800b8ec <__multiply+0x50>
 800b93a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b93e:	f1ba 0f00 	cmp.w	sl, #0
 800b942:	d024      	beq.n	800b98e <__multiply+0xf2>
 800b944:	f104 0e14 	add.w	lr, r4, #20
 800b948:	46a9      	mov	r9, r5
 800b94a:	f04f 0c00 	mov.w	ip, #0
 800b94e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b952:	f8d9 1000 	ldr.w	r1, [r9]
 800b956:	fa1f fb82 	uxth.w	fp, r2
 800b95a:	b289      	uxth	r1, r1
 800b95c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b960:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b964:	f8d9 2000 	ldr.w	r2, [r9]
 800b968:	4461      	add	r1, ip
 800b96a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b96e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b972:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b976:	b289      	uxth	r1, r1
 800b978:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b97c:	4577      	cmp	r7, lr
 800b97e:	f849 1b04 	str.w	r1, [r9], #4
 800b982:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b986:	d8e2      	bhi.n	800b94e <__multiply+0xb2>
 800b988:	9a01      	ldr	r2, [sp, #4]
 800b98a:	f845 c002 	str.w	ip, [r5, r2]
 800b98e:	9a03      	ldr	r2, [sp, #12]
 800b990:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b994:	3304      	adds	r3, #4
 800b996:	f1b9 0f00 	cmp.w	r9, #0
 800b99a:	d021      	beq.n	800b9e0 <__multiply+0x144>
 800b99c:	6829      	ldr	r1, [r5, #0]
 800b99e:	f104 0c14 	add.w	ip, r4, #20
 800b9a2:	46ae      	mov	lr, r5
 800b9a4:	f04f 0a00 	mov.w	sl, #0
 800b9a8:	f8bc b000 	ldrh.w	fp, [ip]
 800b9ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b9b0:	fb09 220b 	mla	r2, r9, fp, r2
 800b9b4:	4452      	add	r2, sl
 800b9b6:	b289      	uxth	r1, r1
 800b9b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b9bc:	f84e 1b04 	str.w	r1, [lr], #4
 800b9c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b9c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b9c8:	f8be 1000 	ldrh.w	r1, [lr]
 800b9cc:	fb09 110a 	mla	r1, r9, sl, r1
 800b9d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b9d4:	4567      	cmp	r7, ip
 800b9d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b9da:	d8e5      	bhi.n	800b9a8 <__multiply+0x10c>
 800b9dc:	9a01      	ldr	r2, [sp, #4]
 800b9de:	50a9      	str	r1, [r5, r2]
 800b9e0:	3504      	adds	r5, #4
 800b9e2:	e799      	b.n	800b918 <__multiply+0x7c>
 800b9e4:	3e01      	subs	r6, #1
 800b9e6:	e79b      	b.n	800b920 <__multiply+0x84>
 800b9e8:	080207ba 	.word	0x080207ba
 800b9ec:	080207cb 	.word	0x080207cb

0800b9f0 <__pow5mult>:
 800b9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9f4:	4615      	mov	r5, r2
 800b9f6:	f012 0203 	ands.w	r2, r2, #3
 800b9fa:	4606      	mov	r6, r0
 800b9fc:	460f      	mov	r7, r1
 800b9fe:	d007      	beq.n	800ba10 <__pow5mult+0x20>
 800ba00:	4c25      	ldr	r4, [pc, #148]	; (800ba98 <__pow5mult+0xa8>)
 800ba02:	3a01      	subs	r2, #1
 800ba04:	2300      	movs	r3, #0
 800ba06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba0a:	f7ff fe9d 	bl	800b748 <__multadd>
 800ba0e:	4607      	mov	r7, r0
 800ba10:	10ad      	asrs	r5, r5, #2
 800ba12:	d03d      	beq.n	800ba90 <__pow5mult+0xa0>
 800ba14:	69f4      	ldr	r4, [r6, #28]
 800ba16:	b97c      	cbnz	r4, 800ba38 <__pow5mult+0x48>
 800ba18:	2010      	movs	r0, #16
 800ba1a:	f7f7 fdd7 	bl	80035cc <__wrap_malloc>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	61f0      	str	r0, [r6, #28]
 800ba22:	b928      	cbnz	r0, 800ba30 <__pow5mult+0x40>
 800ba24:	4b1d      	ldr	r3, [pc, #116]	; (800ba9c <__pow5mult+0xac>)
 800ba26:	481e      	ldr	r0, [pc, #120]	; (800baa0 <__pow5mult+0xb0>)
 800ba28:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ba2c:	f000 fa54 	bl	800bed8 <__assert_func>
 800ba30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba34:	6004      	str	r4, [r0, #0]
 800ba36:	60c4      	str	r4, [r0, #12]
 800ba38:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ba3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba40:	b94c      	cbnz	r4, 800ba56 <__pow5mult+0x66>
 800ba42:	f240 2171 	movw	r1, #625	; 0x271
 800ba46:	4630      	mov	r0, r6
 800ba48:	f7ff ff12 	bl	800b870 <__i2b>
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba52:	4604      	mov	r4, r0
 800ba54:	6003      	str	r3, [r0, #0]
 800ba56:	f04f 0900 	mov.w	r9, #0
 800ba5a:	07eb      	lsls	r3, r5, #31
 800ba5c:	d50a      	bpl.n	800ba74 <__pow5mult+0x84>
 800ba5e:	4639      	mov	r1, r7
 800ba60:	4622      	mov	r2, r4
 800ba62:	4630      	mov	r0, r6
 800ba64:	f7ff ff1a 	bl	800b89c <__multiply>
 800ba68:	4639      	mov	r1, r7
 800ba6a:	4680      	mov	r8, r0
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	f7ff fe49 	bl	800b704 <_Bfree>
 800ba72:	4647      	mov	r7, r8
 800ba74:	106d      	asrs	r5, r5, #1
 800ba76:	d00b      	beq.n	800ba90 <__pow5mult+0xa0>
 800ba78:	6820      	ldr	r0, [r4, #0]
 800ba7a:	b938      	cbnz	r0, 800ba8c <__pow5mult+0x9c>
 800ba7c:	4622      	mov	r2, r4
 800ba7e:	4621      	mov	r1, r4
 800ba80:	4630      	mov	r0, r6
 800ba82:	f7ff ff0b 	bl	800b89c <__multiply>
 800ba86:	6020      	str	r0, [r4, #0]
 800ba88:	f8c0 9000 	str.w	r9, [r0]
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	e7e4      	b.n	800ba5a <__pow5mult+0x6a>
 800ba90:	4638      	mov	r0, r7
 800ba92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba96:	bf00      	nop
 800ba98:	08020918 	.word	0x08020918
 800ba9c:	0802074b 	.word	0x0802074b
 800baa0:	080207cb 	.word	0x080207cb

0800baa4 <__lshift>:
 800baa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baa8:	460c      	mov	r4, r1
 800baaa:	6849      	ldr	r1, [r1, #4]
 800baac:	6923      	ldr	r3, [r4, #16]
 800baae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bab2:	68a3      	ldr	r3, [r4, #8]
 800bab4:	4607      	mov	r7, r0
 800bab6:	4691      	mov	r9, r2
 800bab8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800babc:	f108 0601 	add.w	r6, r8, #1
 800bac0:	42b3      	cmp	r3, r6
 800bac2:	db0b      	blt.n	800badc <__lshift+0x38>
 800bac4:	4638      	mov	r0, r7
 800bac6:	f7ff fddd 	bl	800b684 <_Balloc>
 800baca:	4605      	mov	r5, r0
 800bacc:	b948      	cbnz	r0, 800bae2 <__lshift+0x3e>
 800bace:	4602      	mov	r2, r0
 800bad0:	4b28      	ldr	r3, [pc, #160]	; (800bb74 <__lshift+0xd0>)
 800bad2:	4829      	ldr	r0, [pc, #164]	; (800bb78 <__lshift+0xd4>)
 800bad4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bad8:	f000 f9fe 	bl	800bed8 <__assert_func>
 800badc:	3101      	adds	r1, #1
 800bade:	005b      	lsls	r3, r3, #1
 800bae0:	e7ee      	b.n	800bac0 <__lshift+0x1c>
 800bae2:	2300      	movs	r3, #0
 800bae4:	f100 0114 	add.w	r1, r0, #20
 800bae8:	f100 0210 	add.w	r2, r0, #16
 800baec:	4618      	mov	r0, r3
 800baee:	4553      	cmp	r3, sl
 800baf0:	db33      	blt.n	800bb5a <__lshift+0xb6>
 800baf2:	6920      	ldr	r0, [r4, #16]
 800baf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800baf8:	f104 0314 	add.w	r3, r4, #20
 800bafc:	f019 091f 	ands.w	r9, r9, #31
 800bb00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bb08:	d02b      	beq.n	800bb62 <__lshift+0xbe>
 800bb0a:	f1c9 0e20 	rsb	lr, r9, #32
 800bb0e:	468a      	mov	sl, r1
 800bb10:	2200      	movs	r2, #0
 800bb12:	6818      	ldr	r0, [r3, #0]
 800bb14:	fa00 f009 	lsl.w	r0, r0, r9
 800bb18:	4310      	orrs	r0, r2
 800bb1a:	f84a 0b04 	str.w	r0, [sl], #4
 800bb1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb22:	459c      	cmp	ip, r3
 800bb24:	fa22 f20e 	lsr.w	r2, r2, lr
 800bb28:	d8f3      	bhi.n	800bb12 <__lshift+0x6e>
 800bb2a:	ebac 0304 	sub.w	r3, ip, r4
 800bb2e:	3b15      	subs	r3, #21
 800bb30:	f023 0303 	bic.w	r3, r3, #3
 800bb34:	3304      	adds	r3, #4
 800bb36:	f104 0015 	add.w	r0, r4, #21
 800bb3a:	4584      	cmp	ip, r0
 800bb3c:	bf38      	it	cc
 800bb3e:	2304      	movcc	r3, #4
 800bb40:	50ca      	str	r2, [r1, r3]
 800bb42:	b10a      	cbz	r2, 800bb48 <__lshift+0xa4>
 800bb44:	f108 0602 	add.w	r6, r8, #2
 800bb48:	3e01      	subs	r6, #1
 800bb4a:	4638      	mov	r0, r7
 800bb4c:	612e      	str	r6, [r5, #16]
 800bb4e:	4621      	mov	r1, r4
 800bb50:	f7ff fdd8 	bl	800b704 <_Bfree>
 800bb54:	4628      	mov	r0, r5
 800bb56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb5a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb5e:	3301      	adds	r3, #1
 800bb60:	e7c5      	b.n	800baee <__lshift+0x4a>
 800bb62:	3904      	subs	r1, #4
 800bb64:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb68:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb6c:	459c      	cmp	ip, r3
 800bb6e:	d8f9      	bhi.n	800bb64 <__lshift+0xc0>
 800bb70:	e7ea      	b.n	800bb48 <__lshift+0xa4>
 800bb72:	bf00      	nop
 800bb74:	080207ba 	.word	0x080207ba
 800bb78:	080207cb 	.word	0x080207cb

0800bb7c <__mcmp>:
 800bb7c:	b530      	push	{r4, r5, lr}
 800bb7e:	6902      	ldr	r2, [r0, #16]
 800bb80:	690c      	ldr	r4, [r1, #16]
 800bb82:	1b12      	subs	r2, r2, r4
 800bb84:	d10e      	bne.n	800bba4 <__mcmp+0x28>
 800bb86:	f100 0314 	add.w	r3, r0, #20
 800bb8a:	3114      	adds	r1, #20
 800bb8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bb90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bb98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bb9c:	42a5      	cmp	r5, r4
 800bb9e:	d003      	beq.n	800bba8 <__mcmp+0x2c>
 800bba0:	d305      	bcc.n	800bbae <__mcmp+0x32>
 800bba2:	2201      	movs	r2, #1
 800bba4:	4610      	mov	r0, r2
 800bba6:	bd30      	pop	{r4, r5, pc}
 800bba8:	4283      	cmp	r3, r0
 800bbaa:	d3f3      	bcc.n	800bb94 <__mcmp+0x18>
 800bbac:	e7fa      	b.n	800bba4 <__mcmp+0x28>
 800bbae:	f04f 32ff 	mov.w	r2, #4294967295
 800bbb2:	e7f7      	b.n	800bba4 <__mcmp+0x28>

0800bbb4 <__mdiff>:
 800bbb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbb8:	460c      	mov	r4, r1
 800bbba:	4606      	mov	r6, r0
 800bbbc:	4611      	mov	r1, r2
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	4690      	mov	r8, r2
 800bbc2:	f7ff ffdb 	bl	800bb7c <__mcmp>
 800bbc6:	1e05      	subs	r5, r0, #0
 800bbc8:	d110      	bne.n	800bbec <__mdiff+0x38>
 800bbca:	4629      	mov	r1, r5
 800bbcc:	4630      	mov	r0, r6
 800bbce:	f7ff fd59 	bl	800b684 <_Balloc>
 800bbd2:	b930      	cbnz	r0, 800bbe2 <__mdiff+0x2e>
 800bbd4:	4b3a      	ldr	r3, [pc, #232]	; (800bcc0 <__mdiff+0x10c>)
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	f240 2137 	movw	r1, #567	; 0x237
 800bbdc:	4839      	ldr	r0, [pc, #228]	; (800bcc4 <__mdiff+0x110>)
 800bbde:	f000 f97b 	bl	800bed8 <__assert_func>
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bbe8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbec:	bfa4      	itt	ge
 800bbee:	4643      	movge	r3, r8
 800bbf0:	46a0      	movge	r8, r4
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bbf8:	bfa6      	itte	ge
 800bbfa:	461c      	movge	r4, r3
 800bbfc:	2500      	movge	r5, #0
 800bbfe:	2501      	movlt	r5, #1
 800bc00:	f7ff fd40 	bl	800b684 <_Balloc>
 800bc04:	b920      	cbnz	r0, 800bc10 <__mdiff+0x5c>
 800bc06:	4b2e      	ldr	r3, [pc, #184]	; (800bcc0 <__mdiff+0x10c>)
 800bc08:	4602      	mov	r2, r0
 800bc0a:	f240 2145 	movw	r1, #581	; 0x245
 800bc0e:	e7e5      	b.n	800bbdc <__mdiff+0x28>
 800bc10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bc14:	6926      	ldr	r6, [r4, #16]
 800bc16:	60c5      	str	r5, [r0, #12]
 800bc18:	f104 0914 	add.w	r9, r4, #20
 800bc1c:	f108 0514 	add.w	r5, r8, #20
 800bc20:	f100 0e14 	add.w	lr, r0, #20
 800bc24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bc28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bc2c:	f108 0210 	add.w	r2, r8, #16
 800bc30:	46f2      	mov	sl, lr
 800bc32:	2100      	movs	r1, #0
 800bc34:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bc3c:	fa11 f88b 	uxtah	r8, r1, fp
 800bc40:	b299      	uxth	r1, r3
 800bc42:	0c1b      	lsrs	r3, r3, #16
 800bc44:	eba8 0801 	sub.w	r8, r8, r1
 800bc48:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bc4c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bc50:	fa1f f888 	uxth.w	r8, r8
 800bc54:	1419      	asrs	r1, r3, #16
 800bc56:	454e      	cmp	r6, r9
 800bc58:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bc5c:	f84a 3b04 	str.w	r3, [sl], #4
 800bc60:	d8e8      	bhi.n	800bc34 <__mdiff+0x80>
 800bc62:	1b33      	subs	r3, r6, r4
 800bc64:	3b15      	subs	r3, #21
 800bc66:	f023 0303 	bic.w	r3, r3, #3
 800bc6a:	3304      	adds	r3, #4
 800bc6c:	3415      	adds	r4, #21
 800bc6e:	42a6      	cmp	r6, r4
 800bc70:	bf38      	it	cc
 800bc72:	2304      	movcc	r3, #4
 800bc74:	441d      	add	r5, r3
 800bc76:	4473      	add	r3, lr
 800bc78:	469e      	mov	lr, r3
 800bc7a:	462e      	mov	r6, r5
 800bc7c:	4566      	cmp	r6, ip
 800bc7e:	d30e      	bcc.n	800bc9e <__mdiff+0xea>
 800bc80:	f10c 0203 	add.w	r2, ip, #3
 800bc84:	1b52      	subs	r2, r2, r5
 800bc86:	f022 0203 	bic.w	r2, r2, #3
 800bc8a:	3d03      	subs	r5, #3
 800bc8c:	45ac      	cmp	ip, r5
 800bc8e:	bf38      	it	cc
 800bc90:	2200      	movcc	r2, #0
 800bc92:	4413      	add	r3, r2
 800bc94:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bc98:	b17a      	cbz	r2, 800bcba <__mdiff+0x106>
 800bc9a:	6107      	str	r7, [r0, #16]
 800bc9c:	e7a4      	b.n	800bbe8 <__mdiff+0x34>
 800bc9e:	f856 8b04 	ldr.w	r8, [r6], #4
 800bca2:	fa11 f288 	uxtah	r2, r1, r8
 800bca6:	1414      	asrs	r4, r2, #16
 800bca8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bcac:	b292      	uxth	r2, r2
 800bcae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bcb2:	f84e 2b04 	str.w	r2, [lr], #4
 800bcb6:	1421      	asrs	r1, r4, #16
 800bcb8:	e7e0      	b.n	800bc7c <__mdiff+0xc8>
 800bcba:	3f01      	subs	r7, #1
 800bcbc:	e7ea      	b.n	800bc94 <__mdiff+0xe0>
 800bcbe:	bf00      	nop
 800bcc0:	080207ba 	.word	0x080207ba
 800bcc4:	080207cb 	.word	0x080207cb

0800bcc8 <__d2b>:
 800bcc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bccc:	460f      	mov	r7, r1
 800bcce:	2101      	movs	r1, #1
 800bcd0:	ec59 8b10 	vmov	r8, r9, d0
 800bcd4:	4616      	mov	r6, r2
 800bcd6:	f7ff fcd5 	bl	800b684 <_Balloc>
 800bcda:	4604      	mov	r4, r0
 800bcdc:	b930      	cbnz	r0, 800bcec <__d2b+0x24>
 800bcde:	4602      	mov	r2, r0
 800bce0:	4b24      	ldr	r3, [pc, #144]	; (800bd74 <__d2b+0xac>)
 800bce2:	4825      	ldr	r0, [pc, #148]	; (800bd78 <__d2b+0xb0>)
 800bce4:	f240 310f 	movw	r1, #783	; 0x30f
 800bce8:	f000 f8f6 	bl	800bed8 <__assert_func>
 800bcec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bcf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bcf4:	bb2d      	cbnz	r5, 800bd42 <__d2b+0x7a>
 800bcf6:	9301      	str	r3, [sp, #4]
 800bcf8:	f1b8 0300 	subs.w	r3, r8, #0
 800bcfc:	d026      	beq.n	800bd4c <__d2b+0x84>
 800bcfe:	4668      	mov	r0, sp
 800bd00:	9300      	str	r3, [sp, #0]
 800bd02:	f7ff fd87 	bl	800b814 <__lo0bits>
 800bd06:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bd0a:	b1e8      	cbz	r0, 800bd48 <__d2b+0x80>
 800bd0c:	f1c0 0320 	rsb	r3, r0, #32
 800bd10:	fa02 f303 	lsl.w	r3, r2, r3
 800bd14:	430b      	orrs	r3, r1
 800bd16:	40c2      	lsrs	r2, r0
 800bd18:	6163      	str	r3, [r4, #20]
 800bd1a:	9201      	str	r2, [sp, #4]
 800bd1c:	9b01      	ldr	r3, [sp, #4]
 800bd1e:	61a3      	str	r3, [r4, #24]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	bf14      	ite	ne
 800bd24:	2202      	movne	r2, #2
 800bd26:	2201      	moveq	r2, #1
 800bd28:	6122      	str	r2, [r4, #16]
 800bd2a:	b1bd      	cbz	r5, 800bd5c <__d2b+0x94>
 800bd2c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bd30:	4405      	add	r5, r0
 800bd32:	603d      	str	r5, [r7, #0]
 800bd34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bd38:	6030      	str	r0, [r6, #0]
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	b003      	add	sp, #12
 800bd3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd46:	e7d6      	b.n	800bcf6 <__d2b+0x2e>
 800bd48:	6161      	str	r1, [r4, #20]
 800bd4a:	e7e7      	b.n	800bd1c <__d2b+0x54>
 800bd4c:	a801      	add	r0, sp, #4
 800bd4e:	f7ff fd61 	bl	800b814 <__lo0bits>
 800bd52:	9b01      	ldr	r3, [sp, #4]
 800bd54:	6163      	str	r3, [r4, #20]
 800bd56:	3020      	adds	r0, #32
 800bd58:	2201      	movs	r2, #1
 800bd5a:	e7e5      	b.n	800bd28 <__d2b+0x60>
 800bd5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bd64:	6038      	str	r0, [r7, #0]
 800bd66:	6918      	ldr	r0, [r3, #16]
 800bd68:	f7ff fd34 	bl	800b7d4 <__hi0bits>
 800bd6c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd70:	e7e2      	b.n	800bd38 <__d2b+0x70>
 800bd72:	bf00      	nop
 800bd74:	080207ba 	.word	0x080207ba
 800bd78:	080207cb 	.word	0x080207cb

0800bd7c <__sflush_r>:
 800bd7c:	898a      	ldrh	r2, [r1, #12]
 800bd7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd82:	4605      	mov	r5, r0
 800bd84:	0710      	lsls	r0, r2, #28
 800bd86:	460c      	mov	r4, r1
 800bd88:	d458      	bmi.n	800be3c <__sflush_r+0xc0>
 800bd8a:	684b      	ldr	r3, [r1, #4]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	dc05      	bgt.n	800bd9c <__sflush_r+0x20>
 800bd90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	dc02      	bgt.n	800bd9c <__sflush_r+0x20>
 800bd96:	2000      	movs	r0, #0
 800bd98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd9e:	2e00      	cmp	r6, #0
 800bda0:	d0f9      	beq.n	800bd96 <__sflush_r+0x1a>
 800bda2:	2300      	movs	r3, #0
 800bda4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bda8:	682f      	ldr	r7, [r5, #0]
 800bdaa:	6a21      	ldr	r1, [r4, #32]
 800bdac:	602b      	str	r3, [r5, #0]
 800bdae:	d032      	beq.n	800be16 <__sflush_r+0x9a>
 800bdb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bdb2:	89a3      	ldrh	r3, [r4, #12]
 800bdb4:	075a      	lsls	r2, r3, #29
 800bdb6:	d505      	bpl.n	800bdc4 <__sflush_r+0x48>
 800bdb8:	6863      	ldr	r3, [r4, #4]
 800bdba:	1ac0      	subs	r0, r0, r3
 800bdbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bdbe:	b10b      	cbz	r3, 800bdc4 <__sflush_r+0x48>
 800bdc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bdc2:	1ac0      	subs	r0, r0, r3
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdca:	6a21      	ldr	r1, [r4, #32]
 800bdcc:	4628      	mov	r0, r5
 800bdce:	47b0      	blx	r6
 800bdd0:	1c43      	adds	r3, r0, #1
 800bdd2:	89a3      	ldrh	r3, [r4, #12]
 800bdd4:	d106      	bne.n	800bde4 <__sflush_r+0x68>
 800bdd6:	6829      	ldr	r1, [r5, #0]
 800bdd8:	291d      	cmp	r1, #29
 800bdda:	d82b      	bhi.n	800be34 <__sflush_r+0xb8>
 800bddc:	4a29      	ldr	r2, [pc, #164]	; (800be84 <__sflush_r+0x108>)
 800bdde:	410a      	asrs	r2, r1
 800bde0:	07d6      	lsls	r6, r2, #31
 800bde2:	d427      	bmi.n	800be34 <__sflush_r+0xb8>
 800bde4:	2200      	movs	r2, #0
 800bde6:	6062      	str	r2, [r4, #4]
 800bde8:	04d9      	lsls	r1, r3, #19
 800bdea:	6922      	ldr	r2, [r4, #16]
 800bdec:	6022      	str	r2, [r4, #0]
 800bdee:	d504      	bpl.n	800bdfa <__sflush_r+0x7e>
 800bdf0:	1c42      	adds	r2, r0, #1
 800bdf2:	d101      	bne.n	800bdf8 <__sflush_r+0x7c>
 800bdf4:	682b      	ldr	r3, [r5, #0]
 800bdf6:	b903      	cbnz	r3, 800bdfa <__sflush_r+0x7e>
 800bdf8:	6560      	str	r0, [r4, #84]	; 0x54
 800bdfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdfc:	602f      	str	r7, [r5, #0]
 800bdfe:	2900      	cmp	r1, #0
 800be00:	d0c9      	beq.n	800bd96 <__sflush_r+0x1a>
 800be02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be06:	4299      	cmp	r1, r3
 800be08:	d002      	beq.n	800be10 <__sflush_r+0x94>
 800be0a:	4628      	mov	r0, r5
 800be0c:	f7ff fbee 	bl	800b5ec <_free_r>
 800be10:	2000      	movs	r0, #0
 800be12:	6360      	str	r0, [r4, #52]	; 0x34
 800be14:	e7c0      	b.n	800bd98 <__sflush_r+0x1c>
 800be16:	2301      	movs	r3, #1
 800be18:	4628      	mov	r0, r5
 800be1a:	47b0      	blx	r6
 800be1c:	1c41      	adds	r1, r0, #1
 800be1e:	d1c8      	bne.n	800bdb2 <__sflush_r+0x36>
 800be20:	682b      	ldr	r3, [r5, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d0c5      	beq.n	800bdb2 <__sflush_r+0x36>
 800be26:	2b1d      	cmp	r3, #29
 800be28:	d001      	beq.n	800be2e <__sflush_r+0xb2>
 800be2a:	2b16      	cmp	r3, #22
 800be2c:	d101      	bne.n	800be32 <__sflush_r+0xb6>
 800be2e:	602f      	str	r7, [r5, #0]
 800be30:	e7b1      	b.n	800bd96 <__sflush_r+0x1a>
 800be32:	89a3      	ldrh	r3, [r4, #12]
 800be34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be38:	81a3      	strh	r3, [r4, #12]
 800be3a:	e7ad      	b.n	800bd98 <__sflush_r+0x1c>
 800be3c:	690f      	ldr	r7, [r1, #16]
 800be3e:	2f00      	cmp	r7, #0
 800be40:	d0a9      	beq.n	800bd96 <__sflush_r+0x1a>
 800be42:	0793      	lsls	r3, r2, #30
 800be44:	680e      	ldr	r6, [r1, #0]
 800be46:	bf08      	it	eq
 800be48:	694b      	ldreq	r3, [r1, #20]
 800be4a:	600f      	str	r7, [r1, #0]
 800be4c:	bf18      	it	ne
 800be4e:	2300      	movne	r3, #0
 800be50:	eba6 0807 	sub.w	r8, r6, r7
 800be54:	608b      	str	r3, [r1, #8]
 800be56:	f1b8 0f00 	cmp.w	r8, #0
 800be5a:	dd9c      	ble.n	800bd96 <__sflush_r+0x1a>
 800be5c:	6a21      	ldr	r1, [r4, #32]
 800be5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be60:	4643      	mov	r3, r8
 800be62:	463a      	mov	r2, r7
 800be64:	4628      	mov	r0, r5
 800be66:	47b0      	blx	r6
 800be68:	2800      	cmp	r0, #0
 800be6a:	dc06      	bgt.n	800be7a <__sflush_r+0xfe>
 800be6c:	89a3      	ldrh	r3, [r4, #12]
 800be6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be72:	81a3      	strh	r3, [r4, #12]
 800be74:	f04f 30ff 	mov.w	r0, #4294967295
 800be78:	e78e      	b.n	800bd98 <__sflush_r+0x1c>
 800be7a:	4407      	add	r7, r0
 800be7c:	eba8 0800 	sub.w	r8, r8, r0
 800be80:	e7e9      	b.n	800be56 <__sflush_r+0xda>
 800be82:	bf00      	nop
 800be84:	dfbffffe 	.word	0xdfbffffe

0800be88 <_fflush_r>:
 800be88:	b538      	push	{r3, r4, r5, lr}
 800be8a:	690b      	ldr	r3, [r1, #16]
 800be8c:	4605      	mov	r5, r0
 800be8e:	460c      	mov	r4, r1
 800be90:	b913      	cbnz	r3, 800be98 <_fflush_r+0x10>
 800be92:	2500      	movs	r5, #0
 800be94:	4628      	mov	r0, r5
 800be96:	bd38      	pop	{r3, r4, r5, pc}
 800be98:	b118      	cbz	r0, 800bea2 <_fflush_r+0x1a>
 800be9a:	6a03      	ldr	r3, [r0, #32]
 800be9c:	b90b      	cbnz	r3, 800bea2 <_fflush_r+0x1a>
 800be9e:	f7fe fbff 	bl	800a6a0 <__sinit>
 800bea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d0f3      	beq.n	800be92 <_fflush_r+0xa>
 800beaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800beac:	07d0      	lsls	r0, r2, #31
 800beae:	d404      	bmi.n	800beba <_fflush_r+0x32>
 800beb0:	0599      	lsls	r1, r3, #22
 800beb2:	d402      	bmi.n	800beba <_fflush_r+0x32>
 800beb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800beb6:	f7fe fd0c 	bl	800a8d2 <__retarget_lock_acquire_recursive>
 800beba:	4628      	mov	r0, r5
 800bebc:	4621      	mov	r1, r4
 800bebe:	f7ff ff5d 	bl	800bd7c <__sflush_r>
 800bec2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bec4:	07da      	lsls	r2, r3, #31
 800bec6:	4605      	mov	r5, r0
 800bec8:	d4e4      	bmi.n	800be94 <_fflush_r+0xc>
 800beca:	89a3      	ldrh	r3, [r4, #12]
 800becc:	059b      	lsls	r3, r3, #22
 800bece:	d4e1      	bmi.n	800be94 <_fflush_r+0xc>
 800bed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bed2:	f7fe fcff 	bl	800a8d4 <__retarget_lock_release_recursive>
 800bed6:	e7dd      	b.n	800be94 <_fflush_r+0xc>

0800bed8 <__assert_func>:
 800bed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800beda:	4614      	mov	r4, r2
 800bedc:	461a      	mov	r2, r3
 800bede:	4b09      	ldr	r3, [pc, #36]	; (800bf04 <__assert_func+0x2c>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4605      	mov	r5, r0
 800bee4:	68d8      	ldr	r0, [r3, #12]
 800bee6:	b14c      	cbz	r4, 800befc <__assert_func+0x24>
 800bee8:	4b07      	ldr	r3, [pc, #28]	; (800bf08 <__assert_func+0x30>)
 800beea:	9100      	str	r1, [sp, #0]
 800beec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bef0:	4906      	ldr	r1, [pc, #24]	; (800bf0c <__assert_func+0x34>)
 800bef2:	462b      	mov	r3, r5
 800bef4:	f000 f844 	bl	800bf80 <fiprintf>
 800bef8:	f000 f854 	bl	800bfa4 <abort>
 800befc:	4b04      	ldr	r3, [pc, #16]	; (800bf10 <__assert_func+0x38>)
 800befe:	461c      	mov	r4, r3
 800bf00:	e7f3      	b.n	800beea <__assert_func+0x12>
 800bf02:	bf00      	nop
 800bf04:	2000100c 	.word	0x2000100c
 800bf08:	0802092e 	.word	0x0802092e
 800bf0c:	0802093b 	.word	0x0802093b
 800bf10:	08020969 	.word	0x08020969

0800bf14 <_calloc_r>:
 800bf14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf16:	fba1 2402 	umull	r2, r4, r1, r2
 800bf1a:	b94c      	cbnz	r4, 800bf30 <_calloc_r+0x1c>
 800bf1c:	4611      	mov	r1, r2
 800bf1e:	9201      	str	r2, [sp, #4]
 800bf20:	f7fd fe40 	bl	8009ba4 <_malloc_r>
 800bf24:	9a01      	ldr	r2, [sp, #4]
 800bf26:	4605      	mov	r5, r0
 800bf28:	b930      	cbnz	r0, 800bf38 <_calloc_r+0x24>
 800bf2a:	4628      	mov	r0, r5
 800bf2c:	b003      	add	sp, #12
 800bf2e:	bd30      	pop	{r4, r5, pc}
 800bf30:	220c      	movs	r2, #12
 800bf32:	6002      	str	r2, [r0, #0]
 800bf34:	2500      	movs	r5, #0
 800bf36:	e7f8      	b.n	800bf2a <_calloc_r+0x16>
 800bf38:	4621      	mov	r1, r4
 800bf3a:	f7fe fc2a 	bl	800a792 <memset>
 800bf3e:	e7f4      	b.n	800bf2a <_calloc_r+0x16>

0800bf40 <__ascii_mbtowc>:
 800bf40:	b082      	sub	sp, #8
 800bf42:	b901      	cbnz	r1, 800bf46 <__ascii_mbtowc+0x6>
 800bf44:	a901      	add	r1, sp, #4
 800bf46:	b142      	cbz	r2, 800bf5a <__ascii_mbtowc+0x1a>
 800bf48:	b14b      	cbz	r3, 800bf5e <__ascii_mbtowc+0x1e>
 800bf4a:	7813      	ldrb	r3, [r2, #0]
 800bf4c:	600b      	str	r3, [r1, #0]
 800bf4e:	7812      	ldrb	r2, [r2, #0]
 800bf50:	1e10      	subs	r0, r2, #0
 800bf52:	bf18      	it	ne
 800bf54:	2001      	movne	r0, #1
 800bf56:	b002      	add	sp, #8
 800bf58:	4770      	bx	lr
 800bf5a:	4610      	mov	r0, r2
 800bf5c:	e7fb      	b.n	800bf56 <__ascii_mbtowc+0x16>
 800bf5e:	f06f 0001 	mvn.w	r0, #1
 800bf62:	e7f8      	b.n	800bf56 <__ascii_mbtowc+0x16>

0800bf64 <__ascii_wctomb>:
 800bf64:	b149      	cbz	r1, 800bf7a <__ascii_wctomb+0x16>
 800bf66:	2aff      	cmp	r2, #255	; 0xff
 800bf68:	bf85      	ittet	hi
 800bf6a:	238a      	movhi	r3, #138	; 0x8a
 800bf6c:	6003      	strhi	r3, [r0, #0]
 800bf6e:	700a      	strbls	r2, [r1, #0]
 800bf70:	f04f 30ff 	movhi.w	r0, #4294967295
 800bf74:	bf98      	it	ls
 800bf76:	2001      	movls	r0, #1
 800bf78:	4770      	bx	lr
 800bf7a:	4608      	mov	r0, r1
 800bf7c:	4770      	bx	lr
	...

0800bf80 <fiprintf>:
 800bf80:	b40e      	push	{r1, r2, r3}
 800bf82:	b503      	push	{r0, r1, lr}
 800bf84:	4601      	mov	r1, r0
 800bf86:	ab03      	add	r3, sp, #12
 800bf88:	4805      	ldr	r0, [pc, #20]	; (800bfa0 <fiprintf+0x20>)
 800bf8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf8e:	6800      	ldr	r0, [r0, #0]
 800bf90:	9301      	str	r3, [sp, #4]
 800bf92:	f000 f837 	bl	800c004 <_vfiprintf_r>
 800bf96:	b002      	add	sp, #8
 800bf98:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf9c:	b003      	add	sp, #12
 800bf9e:	4770      	bx	lr
 800bfa0:	2000100c 	.word	0x2000100c

0800bfa4 <abort>:
 800bfa4:	b508      	push	{r3, lr}
 800bfa6:	2006      	movs	r0, #6
 800bfa8:	f000 fa04 	bl	800c3b4 <raise>
 800bfac:	2001      	movs	r0, #1
 800bfae:	f000 fc0d 	bl	800c7cc <_exit>

0800bfb2 <__sfputc_r>:
 800bfb2:	6893      	ldr	r3, [r2, #8]
 800bfb4:	3b01      	subs	r3, #1
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	b410      	push	{r4}
 800bfba:	6093      	str	r3, [r2, #8]
 800bfbc:	da08      	bge.n	800bfd0 <__sfputc_r+0x1e>
 800bfbe:	6994      	ldr	r4, [r2, #24]
 800bfc0:	42a3      	cmp	r3, r4
 800bfc2:	db01      	blt.n	800bfc8 <__sfputc_r+0x16>
 800bfc4:	290a      	cmp	r1, #10
 800bfc6:	d103      	bne.n	800bfd0 <__sfputc_r+0x1e>
 800bfc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfcc:	f000 b934 	b.w	800c238 <__swbuf_r>
 800bfd0:	6813      	ldr	r3, [r2, #0]
 800bfd2:	1c58      	adds	r0, r3, #1
 800bfd4:	6010      	str	r0, [r2, #0]
 800bfd6:	7019      	strb	r1, [r3, #0]
 800bfd8:	4608      	mov	r0, r1
 800bfda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <__sfputs_r>:
 800bfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfe2:	4606      	mov	r6, r0
 800bfe4:	460f      	mov	r7, r1
 800bfe6:	4614      	mov	r4, r2
 800bfe8:	18d5      	adds	r5, r2, r3
 800bfea:	42ac      	cmp	r4, r5
 800bfec:	d101      	bne.n	800bff2 <__sfputs_r+0x12>
 800bfee:	2000      	movs	r0, #0
 800bff0:	e007      	b.n	800c002 <__sfputs_r+0x22>
 800bff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bff6:	463a      	mov	r2, r7
 800bff8:	4630      	mov	r0, r6
 800bffa:	f7ff ffda 	bl	800bfb2 <__sfputc_r>
 800bffe:	1c43      	adds	r3, r0, #1
 800c000:	d1f3      	bne.n	800bfea <__sfputs_r+0xa>
 800c002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c004 <_vfiprintf_r>:
 800c004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c008:	460d      	mov	r5, r1
 800c00a:	b09d      	sub	sp, #116	; 0x74
 800c00c:	4614      	mov	r4, r2
 800c00e:	4698      	mov	r8, r3
 800c010:	4606      	mov	r6, r0
 800c012:	b118      	cbz	r0, 800c01c <_vfiprintf_r+0x18>
 800c014:	6a03      	ldr	r3, [r0, #32]
 800c016:	b90b      	cbnz	r3, 800c01c <_vfiprintf_r+0x18>
 800c018:	f7fe fb42 	bl	800a6a0 <__sinit>
 800c01c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c01e:	07d9      	lsls	r1, r3, #31
 800c020:	d405      	bmi.n	800c02e <_vfiprintf_r+0x2a>
 800c022:	89ab      	ldrh	r3, [r5, #12]
 800c024:	059a      	lsls	r2, r3, #22
 800c026:	d402      	bmi.n	800c02e <_vfiprintf_r+0x2a>
 800c028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c02a:	f7fe fc52 	bl	800a8d2 <__retarget_lock_acquire_recursive>
 800c02e:	89ab      	ldrh	r3, [r5, #12]
 800c030:	071b      	lsls	r3, r3, #28
 800c032:	d501      	bpl.n	800c038 <_vfiprintf_r+0x34>
 800c034:	692b      	ldr	r3, [r5, #16]
 800c036:	b99b      	cbnz	r3, 800c060 <_vfiprintf_r+0x5c>
 800c038:	4629      	mov	r1, r5
 800c03a:	4630      	mov	r0, r6
 800c03c:	f000 f93a 	bl	800c2b4 <__swsetup_r>
 800c040:	b170      	cbz	r0, 800c060 <_vfiprintf_r+0x5c>
 800c042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c044:	07dc      	lsls	r4, r3, #31
 800c046:	d504      	bpl.n	800c052 <_vfiprintf_r+0x4e>
 800c048:	f04f 30ff 	mov.w	r0, #4294967295
 800c04c:	b01d      	add	sp, #116	; 0x74
 800c04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c052:	89ab      	ldrh	r3, [r5, #12]
 800c054:	0598      	lsls	r0, r3, #22
 800c056:	d4f7      	bmi.n	800c048 <_vfiprintf_r+0x44>
 800c058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c05a:	f7fe fc3b 	bl	800a8d4 <__retarget_lock_release_recursive>
 800c05e:	e7f3      	b.n	800c048 <_vfiprintf_r+0x44>
 800c060:	2300      	movs	r3, #0
 800c062:	9309      	str	r3, [sp, #36]	; 0x24
 800c064:	2320      	movs	r3, #32
 800c066:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c06a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c06e:	2330      	movs	r3, #48	; 0x30
 800c070:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c224 <_vfiprintf_r+0x220>
 800c074:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c078:	f04f 0901 	mov.w	r9, #1
 800c07c:	4623      	mov	r3, r4
 800c07e:	469a      	mov	sl, r3
 800c080:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c084:	b10a      	cbz	r2, 800c08a <_vfiprintf_r+0x86>
 800c086:	2a25      	cmp	r2, #37	; 0x25
 800c088:	d1f9      	bne.n	800c07e <_vfiprintf_r+0x7a>
 800c08a:	ebba 0b04 	subs.w	fp, sl, r4
 800c08e:	d00b      	beq.n	800c0a8 <_vfiprintf_r+0xa4>
 800c090:	465b      	mov	r3, fp
 800c092:	4622      	mov	r2, r4
 800c094:	4629      	mov	r1, r5
 800c096:	4630      	mov	r0, r6
 800c098:	f7ff ffa2 	bl	800bfe0 <__sfputs_r>
 800c09c:	3001      	adds	r0, #1
 800c09e:	f000 80a9 	beq.w	800c1f4 <_vfiprintf_r+0x1f0>
 800c0a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0a4:	445a      	add	r2, fp
 800c0a6:	9209      	str	r2, [sp, #36]	; 0x24
 800c0a8:	f89a 3000 	ldrb.w	r3, [sl]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	f000 80a1 	beq.w	800c1f4 <_vfiprintf_r+0x1f0>
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0bc:	f10a 0a01 	add.w	sl, sl, #1
 800c0c0:	9304      	str	r3, [sp, #16]
 800c0c2:	9307      	str	r3, [sp, #28]
 800c0c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0c8:	931a      	str	r3, [sp, #104]	; 0x68
 800c0ca:	4654      	mov	r4, sl
 800c0cc:	2205      	movs	r2, #5
 800c0ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0d2:	4854      	ldr	r0, [pc, #336]	; (800c224 <_vfiprintf_r+0x220>)
 800c0d4:	f7f4 f87c 	bl	80001d0 <memchr>
 800c0d8:	9a04      	ldr	r2, [sp, #16]
 800c0da:	b9d8      	cbnz	r0, 800c114 <_vfiprintf_r+0x110>
 800c0dc:	06d1      	lsls	r1, r2, #27
 800c0de:	bf44      	itt	mi
 800c0e0:	2320      	movmi	r3, #32
 800c0e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0e6:	0713      	lsls	r3, r2, #28
 800c0e8:	bf44      	itt	mi
 800c0ea:	232b      	movmi	r3, #43	; 0x2b
 800c0ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c0f4:	2b2a      	cmp	r3, #42	; 0x2a
 800c0f6:	d015      	beq.n	800c124 <_vfiprintf_r+0x120>
 800c0f8:	9a07      	ldr	r2, [sp, #28]
 800c0fa:	4654      	mov	r4, sl
 800c0fc:	2000      	movs	r0, #0
 800c0fe:	f04f 0c0a 	mov.w	ip, #10
 800c102:	4621      	mov	r1, r4
 800c104:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c108:	3b30      	subs	r3, #48	; 0x30
 800c10a:	2b09      	cmp	r3, #9
 800c10c:	d94d      	bls.n	800c1aa <_vfiprintf_r+0x1a6>
 800c10e:	b1b0      	cbz	r0, 800c13e <_vfiprintf_r+0x13a>
 800c110:	9207      	str	r2, [sp, #28]
 800c112:	e014      	b.n	800c13e <_vfiprintf_r+0x13a>
 800c114:	eba0 0308 	sub.w	r3, r0, r8
 800c118:	fa09 f303 	lsl.w	r3, r9, r3
 800c11c:	4313      	orrs	r3, r2
 800c11e:	9304      	str	r3, [sp, #16]
 800c120:	46a2      	mov	sl, r4
 800c122:	e7d2      	b.n	800c0ca <_vfiprintf_r+0xc6>
 800c124:	9b03      	ldr	r3, [sp, #12]
 800c126:	1d19      	adds	r1, r3, #4
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	9103      	str	r1, [sp, #12]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	bfbb      	ittet	lt
 800c130:	425b      	neglt	r3, r3
 800c132:	f042 0202 	orrlt.w	r2, r2, #2
 800c136:	9307      	strge	r3, [sp, #28]
 800c138:	9307      	strlt	r3, [sp, #28]
 800c13a:	bfb8      	it	lt
 800c13c:	9204      	strlt	r2, [sp, #16]
 800c13e:	7823      	ldrb	r3, [r4, #0]
 800c140:	2b2e      	cmp	r3, #46	; 0x2e
 800c142:	d10c      	bne.n	800c15e <_vfiprintf_r+0x15a>
 800c144:	7863      	ldrb	r3, [r4, #1]
 800c146:	2b2a      	cmp	r3, #42	; 0x2a
 800c148:	d134      	bne.n	800c1b4 <_vfiprintf_r+0x1b0>
 800c14a:	9b03      	ldr	r3, [sp, #12]
 800c14c:	1d1a      	adds	r2, r3, #4
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	9203      	str	r2, [sp, #12]
 800c152:	2b00      	cmp	r3, #0
 800c154:	bfb8      	it	lt
 800c156:	f04f 33ff 	movlt.w	r3, #4294967295
 800c15a:	3402      	adds	r4, #2
 800c15c:	9305      	str	r3, [sp, #20]
 800c15e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c234 <_vfiprintf_r+0x230>
 800c162:	7821      	ldrb	r1, [r4, #0]
 800c164:	2203      	movs	r2, #3
 800c166:	4650      	mov	r0, sl
 800c168:	f7f4 f832 	bl	80001d0 <memchr>
 800c16c:	b138      	cbz	r0, 800c17e <_vfiprintf_r+0x17a>
 800c16e:	9b04      	ldr	r3, [sp, #16]
 800c170:	eba0 000a 	sub.w	r0, r0, sl
 800c174:	2240      	movs	r2, #64	; 0x40
 800c176:	4082      	lsls	r2, r0
 800c178:	4313      	orrs	r3, r2
 800c17a:	3401      	adds	r4, #1
 800c17c:	9304      	str	r3, [sp, #16]
 800c17e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c182:	4829      	ldr	r0, [pc, #164]	; (800c228 <_vfiprintf_r+0x224>)
 800c184:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c188:	2206      	movs	r2, #6
 800c18a:	f7f4 f821 	bl	80001d0 <memchr>
 800c18e:	2800      	cmp	r0, #0
 800c190:	d03f      	beq.n	800c212 <_vfiprintf_r+0x20e>
 800c192:	4b26      	ldr	r3, [pc, #152]	; (800c22c <_vfiprintf_r+0x228>)
 800c194:	bb1b      	cbnz	r3, 800c1de <_vfiprintf_r+0x1da>
 800c196:	9b03      	ldr	r3, [sp, #12]
 800c198:	3307      	adds	r3, #7
 800c19a:	f023 0307 	bic.w	r3, r3, #7
 800c19e:	3308      	adds	r3, #8
 800c1a0:	9303      	str	r3, [sp, #12]
 800c1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1a4:	443b      	add	r3, r7
 800c1a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c1a8:	e768      	b.n	800c07c <_vfiprintf_r+0x78>
 800c1aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1ae:	460c      	mov	r4, r1
 800c1b0:	2001      	movs	r0, #1
 800c1b2:	e7a6      	b.n	800c102 <_vfiprintf_r+0xfe>
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	3401      	adds	r4, #1
 800c1b8:	9305      	str	r3, [sp, #20]
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	f04f 0c0a 	mov.w	ip, #10
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1c6:	3a30      	subs	r2, #48	; 0x30
 800c1c8:	2a09      	cmp	r2, #9
 800c1ca:	d903      	bls.n	800c1d4 <_vfiprintf_r+0x1d0>
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d0c6      	beq.n	800c15e <_vfiprintf_r+0x15a>
 800c1d0:	9105      	str	r1, [sp, #20]
 800c1d2:	e7c4      	b.n	800c15e <_vfiprintf_r+0x15a>
 800c1d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1d8:	4604      	mov	r4, r0
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e7f0      	b.n	800c1c0 <_vfiprintf_r+0x1bc>
 800c1de:	ab03      	add	r3, sp, #12
 800c1e0:	9300      	str	r3, [sp, #0]
 800c1e2:	462a      	mov	r2, r5
 800c1e4:	4b12      	ldr	r3, [pc, #72]	; (800c230 <_vfiprintf_r+0x22c>)
 800c1e6:	a904      	add	r1, sp, #16
 800c1e8:	4630      	mov	r0, r6
 800c1ea:	f7fd fe07 	bl	8009dfc <_printf_float>
 800c1ee:	4607      	mov	r7, r0
 800c1f0:	1c78      	adds	r0, r7, #1
 800c1f2:	d1d6      	bne.n	800c1a2 <_vfiprintf_r+0x19e>
 800c1f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1f6:	07d9      	lsls	r1, r3, #31
 800c1f8:	d405      	bmi.n	800c206 <_vfiprintf_r+0x202>
 800c1fa:	89ab      	ldrh	r3, [r5, #12]
 800c1fc:	059a      	lsls	r2, r3, #22
 800c1fe:	d402      	bmi.n	800c206 <_vfiprintf_r+0x202>
 800c200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c202:	f7fe fb67 	bl	800a8d4 <__retarget_lock_release_recursive>
 800c206:	89ab      	ldrh	r3, [r5, #12]
 800c208:	065b      	lsls	r3, r3, #25
 800c20a:	f53f af1d 	bmi.w	800c048 <_vfiprintf_r+0x44>
 800c20e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c210:	e71c      	b.n	800c04c <_vfiprintf_r+0x48>
 800c212:	ab03      	add	r3, sp, #12
 800c214:	9300      	str	r3, [sp, #0]
 800c216:	462a      	mov	r2, r5
 800c218:	4b05      	ldr	r3, [pc, #20]	; (800c230 <_vfiprintf_r+0x22c>)
 800c21a:	a904      	add	r1, sp, #16
 800c21c:	4630      	mov	r0, r6
 800c21e:	f7fe f891 	bl	800a344 <_printf_i>
 800c222:	e7e4      	b.n	800c1ee <_vfiprintf_r+0x1ea>
 800c224:	08020a6b 	.word	0x08020a6b
 800c228:	08020a75 	.word	0x08020a75
 800c22c:	08009dfd 	.word	0x08009dfd
 800c230:	0800bfe1 	.word	0x0800bfe1
 800c234:	08020a71 	.word	0x08020a71

0800c238 <__swbuf_r>:
 800c238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c23a:	460e      	mov	r6, r1
 800c23c:	4614      	mov	r4, r2
 800c23e:	4605      	mov	r5, r0
 800c240:	b118      	cbz	r0, 800c24a <__swbuf_r+0x12>
 800c242:	6a03      	ldr	r3, [r0, #32]
 800c244:	b90b      	cbnz	r3, 800c24a <__swbuf_r+0x12>
 800c246:	f7fe fa2b 	bl	800a6a0 <__sinit>
 800c24a:	69a3      	ldr	r3, [r4, #24]
 800c24c:	60a3      	str	r3, [r4, #8]
 800c24e:	89a3      	ldrh	r3, [r4, #12]
 800c250:	071a      	lsls	r2, r3, #28
 800c252:	d525      	bpl.n	800c2a0 <__swbuf_r+0x68>
 800c254:	6923      	ldr	r3, [r4, #16]
 800c256:	b31b      	cbz	r3, 800c2a0 <__swbuf_r+0x68>
 800c258:	6823      	ldr	r3, [r4, #0]
 800c25a:	6922      	ldr	r2, [r4, #16]
 800c25c:	1a98      	subs	r0, r3, r2
 800c25e:	6963      	ldr	r3, [r4, #20]
 800c260:	b2f6      	uxtb	r6, r6
 800c262:	4283      	cmp	r3, r0
 800c264:	4637      	mov	r7, r6
 800c266:	dc04      	bgt.n	800c272 <__swbuf_r+0x3a>
 800c268:	4621      	mov	r1, r4
 800c26a:	4628      	mov	r0, r5
 800c26c:	f7ff fe0c 	bl	800be88 <_fflush_r>
 800c270:	b9e0      	cbnz	r0, 800c2ac <__swbuf_r+0x74>
 800c272:	68a3      	ldr	r3, [r4, #8]
 800c274:	3b01      	subs	r3, #1
 800c276:	60a3      	str	r3, [r4, #8]
 800c278:	6823      	ldr	r3, [r4, #0]
 800c27a:	1c5a      	adds	r2, r3, #1
 800c27c:	6022      	str	r2, [r4, #0]
 800c27e:	701e      	strb	r6, [r3, #0]
 800c280:	6962      	ldr	r2, [r4, #20]
 800c282:	1c43      	adds	r3, r0, #1
 800c284:	429a      	cmp	r2, r3
 800c286:	d004      	beq.n	800c292 <__swbuf_r+0x5a>
 800c288:	89a3      	ldrh	r3, [r4, #12]
 800c28a:	07db      	lsls	r3, r3, #31
 800c28c:	d506      	bpl.n	800c29c <__swbuf_r+0x64>
 800c28e:	2e0a      	cmp	r6, #10
 800c290:	d104      	bne.n	800c29c <__swbuf_r+0x64>
 800c292:	4621      	mov	r1, r4
 800c294:	4628      	mov	r0, r5
 800c296:	f7ff fdf7 	bl	800be88 <_fflush_r>
 800c29a:	b938      	cbnz	r0, 800c2ac <__swbuf_r+0x74>
 800c29c:	4638      	mov	r0, r7
 800c29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2a0:	4621      	mov	r1, r4
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	f000 f806 	bl	800c2b4 <__swsetup_r>
 800c2a8:	2800      	cmp	r0, #0
 800c2aa:	d0d5      	beq.n	800c258 <__swbuf_r+0x20>
 800c2ac:	f04f 37ff 	mov.w	r7, #4294967295
 800c2b0:	e7f4      	b.n	800c29c <__swbuf_r+0x64>
	...

0800c2b4 <__swsetup_r>:
 800c2b4:	b538      	push	{r3, r4, r5, lr}
 800c2b6:	4b2a      	ldr	r3, [pc, #168]	; (800c360 <__swsetup_r+0xac>)
 800c2b8:	4605      	mov	r5, r0
 800c2ba:	6818      	ldr	r0, [r3, #0]
 800c2bc:	460c      	mov	r4, r1
 800c2be:	b118      	cbz	r0, 800c2c8 <__swsetup_r+0x14>
 800c2c0:	6a03      	ldr	r3, [r0, #32]
 800c2c2:	b90b      	cbnz	r3, 800c2c8 <__swsetup_r+0x14>
 800c2c4:	f7fe f9ec 	bl	800a6a0 <__sinit>
 800c2c8:	89a3      	ldrh	r3, [r4, #12]
 800c2ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2ce:	0718      	lsls	r0, r3, #28
 800c2d0:	d422      	bmi.n	800c318 <__swsetup_r+0x64>
 800c2d2:	06d9      	lsls	r1, r3, #27
 800c2d4:	d407      	bmi.n	800c2e6 <__swsetup_r+0x32>
 800c2d6:	2309      	movs	r3, #9
 800c2d8:	602b      	str	r3, [r5, #0]
 800c2da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c2de:	81a3      	strh	r3, [r4, #12]
 800c2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e4:	e034      	b.n	800c350 <__swsetup_r+0x9c>
 800c2e6:	0758      	lsls	r0, r3, #29
 800c2e8:	d512      	bpl.n	800c310 <__swsetup_r+0x5c>
 800c2ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2ec:	b141      	cbz	r1, 800c300 <__swsetup_r+0x4c>
 800c2ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2f2:	4299      	cmp	r1, r3
 800c2f4:	d002      	beq.n	800c2fc <__swsetup_r+0x48>
 800c2f6:	4628      	mov	r0, r5
 800c2f8:	f7ff f978 	bl	800b5ec <_free_r>
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	6363      	str	r3, [r4, #52]	; 0x34
 800c300:	89a3      	ldrh	r3, [r4, #12]
 800c302:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c306:	81a3      	strh	r3, [r4, #12]
 800c308:	2300      	movs	r3, #0
 800c30a:	6063      	str	r3, [r4, #4]
 800c30c:	6923      	ldr	r3, [r4, #16]
 800c30e:	6023      	str	r3, [r4, #0]
 800c310:	89a3      	ldrh	r3, [r4, #12]
 800c312:	f043 0308 	orr.w	r3, r3, #8
 800c316:	81a3      	strh	r3, [r4, #12]
 800c318:	6923      	ldr	r3, [r4, #16]
 800c31a:	b94b      	cbnz	r3, 800c330 <__swsetup_r+0x7c>
 800c31c:	89a3      	ldrh	r3, [r4, #12]
 800c31e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c326:	d003      	beq.n	800c330 <__swsetup_r+0x7c>
 800c328:	4621      	mov	r1, r4
 800c32a:	4628      	mov	r0, r5
 800c32c:	f000 f884 	bl	800c438 <__smakebuf_r>
 800c330:	89a0      	ldrh	r0, [r4, #12]
 800c332:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c336:	f010 0301 	ands.w	r3, r0, #1
 800c33a:	d00a      	beq.n	800c352 <__swsetup_r+0x9e>
 800c33c:	2300      	movs	r3, #0
 800c33e:	60a3      	str	r3, [r4, #8]
 800c340:	6963      	ldr	r3, [r4, #20]
 800c342:	425b      	negs	r3, r3
 800c344:	61a3      	str	r3, [r4, #24]
 800c346:	6923      	ldr	r3, [r4, #16]
 800c348:	b943      	cbnz	r3, 800c35c <__swsetup_r+0xa8>
 800c34a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c34e:	d1c4      	bne.n	800c2da <__swsetup_r+0x26>
 800c350:	bd38      	pop	{r3, r4, r5, pc}
 800c352:	0781      	lsls	r1, r0, #30
 800c354:	bf58      	it	pl
 800c356:	6963      	ldrpl	r3, [r4, #20]
 800c358:	60a3      	str	r3, [r4, #8]
 800c35a:	e7f4      	b.n	800c346 <__swsetup_r+0x92>
 800c35c:	2000      	movs	r0, #0
 800c35e:	e7f7      	b.n	800c350 <__swsetup_r+0x9c>
 800c360:	2000100c 	.word	0x2000100c

0800c364 <_raise_r>:
 800c364:	291f      	cmp	r1, #31
 800c366:	b538      	push	{r3, r4, r5, lr}
 800c368:	4604      	mov	r4, r0
 800c36a:	460d      	mov	r5, r1
 800c36c:	d904      	bls.n	800c378 <_raise_r+0x14>
 800c36e:	2316      	movs	r3, #22
 800c370:	6003      	str	r3, [r0, #0]
 800c372:	f04f 30ff 	mov.w	r0, #4294967295
 800c376:	bd38      	pop	{r3, r4, r5, pc}
 800c378:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c37a:	b112      	cbz	r2, 800c382 <_raise_r+0x1e>
 800c37c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c380:	b94b      	cbnz	r3, 800c396 <_raise_r+0x32>
 800c382:	4620      	mov	r0, r4
 800c384:	f000 f830 	bl	800c3e8 <_getpid_r>
 800c388:	462a      	mov	r2, r5
 800c38a:	4601      	mov	r1, r0
 800c38c:	4620      	mov	r0, r4
 800c38e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c392:	f000 b817 	b.w	800c3c4 <_kill_r>
 800c396:	2b01      	cmp	r3, #1
 800c398:	d00a      	beq.n	800c3b0 <_raise_r+0x4c>
 800c39a:	1c59      	adds	r1, r3, #1
 800c39c:	d103      	bne.n	800c3a6 <_raise_r+0x42>
 800c39e:	2316      	movs	r3, #22
 800c3a0:	6003      	str	r3, [r0, #0]
 800c3a2:	2001      	movs	r0, #1
 800c3a4:	e7e7      	b.n	800c376 <_raise_r+0x12>
 800c3a6:	2400      	movs	r4, #0
 800c3a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	4798      	blx	r3
 800c3b0:	2000      	movs	r0, #0
 800c3b2:	e7e0      	b.n	800c376 <_raise_r+0x12>

0800c3b4 <raise>:
 800c3b4:	4b02      	ldr	r3, [pc, #8]	; (800c3c0 <raise+0xc>)
 800c3b6:	4601      	mov	r1, r0
 800c3b8:	6818      	ldr	r0, [r3, #0]
 800c3ba:	f7ff bfd3 	b.w	800c364 <_raise_r>
 800c3be:	bf00      	nop
 800c3c0:	2000100c 	.word	0x2000100c

0800c3c4 <_kill_r>:
 800c3c4:	b538      	push	{r3, r4, r5, lr}
 800c3c6:	4d07      	ldr	r5, [pc, #28]	; (800c3e4 <_kill_r+0x20>)
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	4604      	mov	r4, r0
 800c3cc:	4608      	mov	r0, r1
 800c3ce:	4611      	mov	r1, r2
 800c3d0:	602b      	str	r3, [r5, #0]
 800c3d2:	f000 f9e3 	bl	800c79c <_kill>
 800c3d6:	1c43      	adds	r3, r0, #1
 800c3d8:	d102      	bne.n	800c3e0 <_kill_r+0x1c>
 800c3da:	682b      	ldr	r3, [r5, #0]
 800c3dc:	b103      	cbz	r3, 800c3e0 <_kill_r+0x1c>
 800c3de:	6023      	str	r3, [r4, #0]
 800c3e0:	bd38      	pop	{r3, r4, r5, pc}
 800c3e2:	bf00      	nop
 800c3e4:	20007cb4 	.word	0x20007cb4

0800c3e8 <_getpid_r>:
 800c3e8:	f000 b9c8 	b.w	800c77c <_getpid>

0800c3ec <__swhatbuf_r>:
 800c3ec:	b570      	push	{r4, r5, r6, lr}
 800c3ee:	460c      	mov	r4, r1
 800c3f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3f4:	2900      	cmp	r1, #0
 800c3f6:	b096      	sub	sp, #88	; 0x58
 800c3f8:	4615      	mov	r5, r2
 800c3fa:	461e      	mov	r6, r3
 800c3fc:	da0d      	bge.n	800c41a <__swhatbuf_r+0x2e>
 800c3fe:	89a3      	ldrh	r3, [r4, #12]
 800c400:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c404:	f04f 0100 	mov.w	r1, #0
 800c408:	bf0c      	ite	eq
 800c40a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c40e:	2340      	movne	r3, #64	; 0x40
 800c410:	2000      	movs	r0, #0
 800c412:	6031      	str	r1, [r6, #0]
 800c414:	602b      	str	r3, [r5, #0]
 800c416:	b016      	add	sp, #88	; 0x58
 800c418:	bd70      	pop	{r4, r5, r6, pc}
 800c41a:	466a      	mov	r2, sp
 800c41c:	f000 f848 	bl	800c4b0 <_fstat_r>
 800c420:	2800      	cmp	r0, #0
 800c422:	dbec      	blt.n	800c3fe <__swhatbuf_r+0x12>
 800c424:	9901      	ldr	r1, [sp, #4]
 800c426:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c42a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c42e:	4259      	negs	r1, r3
 800c430:	4159      	adcs	r1, r3
 800c432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c436:	e7eb      	b.n	800c410 <__swhatbuf_r+0x24>

0800c438 <__smakebuf_r>:
 800c438:	898b      	ldrh	r3, [r1, #12]
 800c43a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c43c:	079d      	lsls	r5, r3, #30
 800c43e:	4606      	mov	r6, r0
 800c440:	460c      	mov	r4, r1
 800c442:	d507      	bpl.n	800c454 <__smakebuf_r+0x1c>
 800c444:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c448:	6023      	str	r3, [r4, #0]
 800c44a:	6123      	str	r3, [r4, #16]
 800c44c:	2301      	movs	r3, #1
 800c44e:	6163      	str	r3, [r4, #20]
 800c450:	b002      	add	sp, #8
 800c452:	bd70      	pop	{r4, r5, r6, pc}
 800c454:	ab01      	add	r3, sp, #4
 800c456:	466a      	mov	r2, sp
 800c458:	f7ff ffc8 	bl	800c3ec <__swhatbuf_r>
 800c45c:	9900      	ldr	r1, [sp, #0]
 800c45e:	4605      	mov	r5, r0
 800c460:	4630      	mov	r0, r6
 800c462:	f7fd fb9f 	bl	8009ba4 <_malloc_r>
 800c466:	b948      	cbnz	r0, 800c47c <__smakebuf_r+0x44>
 800c468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c46c:	059a      	lsls	r2, r3, #22
 800c46e:	d4ef      	bmi.n	800c450 <__smakebuf_r+0x18>
 800c470:	f023 0303 	bic.w	r3, r3, #3
 800c474:	f043 0302 	orr.w	r3, r3, #2
 800c478:	81a3      	strh	r3, [r4, #12]
 800c47a:	e7e3      	b.n	800c444 <__smakebuf_r+0xc>
 800c47c:	89a3      	ldrh	r3, [r4, #12]
 800c47e:	6020      	str	r0, [r4, #0]
 800c480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c484:	81a3      	strh	r3, [r4, #12]
 800c486:	9b00      	ldr	r3, [sp, #0]
 800c488:	6163      	str	r3, [r4, #20]
 800c48a:	9b01      	ldr	r3, [sp, #4]
 800c48c:	6120      	str	r0, [r4, #16]
 800c48e:	b15b      	cbz	r3, 800c4a8 <__smakebuf_r+0x70>
 800c490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c494:	4630      	mov	r0, r6
 800c496:	f000 f81d 	bl	800c4d4 <_isatty_r>
 800c49a:	b128      	cbz	r0, 800c4a8 <__smakebuf_r+0x70>
 800c49c:	89a3      	ldrh	r3, [r4, #12]
 800c49e:	f023 0303 	bic.w	r3, r3, #3
 800c4a2:	f043 0301 	orr.w	r3, r3, #1
 800c4a6:	81a3      	strh	r3, [r4, #12]
 800c4a8:	89a3      	ldrh	r3, [r4, #12]
 800c4aa:	431d      	orrs	r5, r3
 800c4ac:	81a5      	strh	r5, [r4, #12]
 800c4ae:	e7cf      	b.n	800c450 <__smakebuf_r+0x18>

0800c4b0 <_fstat_r>:
 800c4b0:	b538      	push	{r3, r4, r5, lr}
 800c4b2:	4d07      	ldr	r5, [pc, #28]	; (800c4d0 <_fstat_r+0x20>)
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	4608      	mov	r0, r1
 800c4ba:	4611      	mov	r1, r2
 800c4bc:	602b      	str	r3, [r5, #0]
 800c4be:	f000 f955 	bl	800c76c <_fstat>
 800c4c2:	1c43      	adds	r3, r0, #1
 800c4c4:	d102      	bne.n	800c4cc <_fstat_r+0x1c>
 800c4c6:	682b      	ldr	r3, [r5, #0]
 800c4c8:	b103      	cbz	r3, 800c4cc <_fstat_r+0x1c>
 800c4ca:	6023      	str	r3, [r4, #0]
 800c4cc:	bd38      	pop	{r3, r4, r5, pc}
 800c4ce:	bf00      	nop
 800c4d0:	20007cb4 	.word	0x20007cb4

0800c4d4 <_isatty_r>:
 800c4d4:	b538      	push	{r3, r4, r5, lr}
 800c4d6:	4d06      	ldr	r5, [pc, #24]	; (800c4f0 <_isatty_r+0x1c>)
 800c4d8:	2300      	movs	r3, #0
 800c4da:	4604      	mov	r4, r0
 800c4dc:	4608      	mov	r0, r1
 800c4de:	602b      	str	r3, [r5, #0]
 800c4e0:	f000 f954 	bl	800c78c <_isatty>
 800c4e4:	1c43      	adds	r3, r0, #1
 800c4e6:	d102      	bne.n	800c4ee <_isatty_r+0x1a>
 800c4e8:	682b      	ldr	r3, [r5, #0]
 800c4ea:	b103      	cbz	r3, 800c4ee <_isatty_r+0x1a>
 800c4ec:	6023      	str	r3, [r4, #0]
 800c4ee:	bd38      	pop	{r3, r4, r5, pc}
 800c4f0:	20007cb4 	.word	0x20007cb4

0800c4f4 <expf>:
 800c4f4:	b508      	push	{r3, lr}
 800c4f6:	ed2d 8b02 	vpush	{d8}
 800c4fa:	eef0 8a40 	vmov.f32	s17, s0
 800c4fe:	f000 f85f 	bl	800c5c0 <__ieee754_expf>
 800c502:	eeb0 8a40 	vmov.f32	s16, s0
 800c506:	eeb0 0a68 	vmov.f32	s0, s17
 800c50a:	f000 f829 	bl	800c560 <finitef>
 800c50e:	b160      	cbz	r0, 800c52a <expf+0x36>
 800c510:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800c550 <expf+0x5c>
 800c514:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c51c:	dd0a      	ble.n	800c534 <expf+0x40>
 800c51e:	f7fe f9ad 	bl	800a87c <__errno>
 800c522:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800c554 <expf+0x60>
 800c526:	2322      	movs	r3, #34	; 0x22
 800c528:	6003      	str	r3, [r0, #0]
 800c52a:	eeb0 0a48 	vmov.f32	s0, s16
 800c52e:	ecbd 8b02 	vpop	{d8}
 800c532:	bd08      	pop	{r3, pc}
 800c534:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c558 <expf+0x64>
 800c538:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c53c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c540:	d5f3      	bpl.n	800c52a <expf+0x36>
 800c542:	f7fe f99b 	bl	800a87c <__errno>
 800c546:	2322      	movs	r3, #34	; 0x22
 800c548:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800c55c <expf+0x68>
 800c54c:	6003      	str	r3, [r0, #0]
 800c54e:	e7ec      	b.n	800c52a <expf+0x36>
 800c550:	42b17217 	.word	0x42b17217
 800c554:	7f800000 	.word	0x7f800000
 800c558:	c2cff1b5 	.word	0xc2cff1b5
 800c55c:	00000000 	.word	0x00000000

0800c560 <finitef>:
 800c560:	b082      	sub	sp, #8
 800c562:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c566:	9801      	ldr	r0, [sp, #4]
 800c568:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c56c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800c570:	bfac      	ite	ge
 800c572:	2000      	movge	r0, #0
 800c574:	2001      	movlt	r0, #1
 800c576:	b002      	add	sp, #8
 800c578:	4770      	bx	lr

0800c57a <with_errnof>:
 800c57a:	b513      	push	{r0, r1, r4, lr}
 800c57c:	4604      	mov	r4, r0
 800c57e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c582:	f7fe f97b 	bl	800a87c <__errno>
 800c586:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c58a:	6004      	str	r4, [r0, #0]
 800c58c:	b002      	add	sp, #8
 800c58e:	bd10      	pop	{r4, pc}

0800c590 <xflowf>:
 800c590:	b130      	cbz	r0, 800c5a0 <xflowf+0x10>
 800c592:	eef1 7a40 	vneg.f32	s15, s0
 800c596:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c59a:	2022      	movs	r0, #34	; 0x22
 800c59c:	f7ff bfed 	b.w	800c57a <with_errnof>
 800c5a0:	eef0 7a40 	vmov.f32	s15, s0
 800c5a4:	e7f7      	b.n	800c596 <xflowf+0x6>
	...

0800c5a8 <__math_uflowf>:
 800c5a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c5b0 <__math_uflowf+0x8>
 800c5ac:	f7ff bff0 	b.w	800c590 <xflowf>
 800c5b0:	10000000 	.word	0x10000000

0800c5b4 <__math_oflowf>:
 800c5b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c5bc <__math_oflowf+0x8>
 800c5b8:	f7ff bfea 	b.w	800c590 <xflowf>
 800c5bc:	70000000 	.word	0x70000000

0800c5c0 <__ieee754_expf>:
 800c5c0:	ee10 2a10 	vmov	r2, s0
 800c5c4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800c5c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c5cc:	d902      	bls.n	800c5d4 <__ieee754_expf+0x14>
 800c5ce:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c5d2:	4770      	bx	lr
 800c5d4:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800c5d8:	d106      	bne.n	800c5e8 <__ieee754_expf+0x28>
 800c5da:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800c714 <__ieee754_expf+0x154>
 800c5de:	2900      	cmp	r1, #0
 800c5e0:	bf18      	it	ne
 800c5e2:	eeb0 0a67 	vmovne.f32	s0, s15
 800c5e6:	4770      	bx	lr
 800c5e8:	484b      	ldr	r0, [pc, #300]	; (800c718 <__ieee754_expf+0x158>)
 800c5ea:	4282      	cmp	r2, r0
 800c5ec:	dd02      	ble.n	800c5f4 <__ieee754_expf+0x34>
 800c5ee:	2000      	movs	r0, #0
 800c5f0:	f7ff bfe0 	b.w	800c5b4 <__math_oflowf>
 800c5f4:	2a00      	cmp	r2, #0
 800c5f6:	da05      	bge.n	800c604 <__ieee754_expf+0x44>
 800c5f8:	4a48      	ldr	r2, [pc, #288]	; (800c71c <__ieee754_expf+0x15c>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d902      	bls.n	800c604 <__ieee754_expf+0x44>
 800c5fe:	2000      	movs	r0, #0
 800c600:	f7ff bfd2 	b.w	800c5a8 <__math_uflowf>
 800c604:	4a46      	ldr	r2, [pc, #280]	; (800c720 <__ieee754_expf+0x160>)
 800c606:	4293      	cmp	r3, r2
 800c608:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c60c:	d952      	bls.n	800c6b4 <__ieee754_expf+0xf4>
 800c60e:	4a45      	ldr	r2, [pc, #276]	; (800c724 <__ieee754_expf+0x164>)
 800c610:	4293      	cmp	r3, r2
 800c612:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800c616:	d834      	bhi.n	800c682 <__ieee754_expf+0xc2>
 800c618:	4b43      	ldr	r3, [pc, #268]	; (800c728 <__ieee754_expf+0x168>)
 800c61a:	4413      	add	r3, r2
 800c61c:	ed93 7a00 	vldr	s14, [r3]
 800c620:	4b42      	ldr	r3, [pc, #264]	; (800c72c <__ieee754_expf+0x16c>)
 800c622:	4413      	add	r3, r2
 800c624:	ee30 7a47 	vsub.f32	s14, s0, s14
 800c628:	f1c1 0201 	rsb	r2, r1, #1
 800c62c:	edd3 7a00 	vldr	s15, [r3]
 800c630:	1a52      	subs	r2, r2, r1
 800c632:	ee37 0a67 	vsub.f32	s0, s14, s15
 800c636:	ee20 6a00 	vmul.f32	s12, s0, s0
 800c63a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800c730 <__ieee754_expf+0x170>
 800c63e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c734 <__ieee754_expf+0x174>
 800c642:	eee6 6a05 	vfma.f32	s13, s12, s10
 800c646:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800c738 <__ieee754_expf+0x178>
 800c64a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800c64e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c73c <__ieee754_expf+0x17c>
 800c652:	eee5 6a06 	vfma.f32	s13, s10, s12
 800c656:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800c740 <__ieee754_expf+0x180>
 800c65a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800c65e:	eef0 6a40 	vmov.f32	s13, s0
 800c662:	eee5 6a46 	vfms.f32	s13, s10, s12
 800c666:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800c66a:	ee20 5a26 	vmul.f32	s10, s0, s13
 800c66e:	bb92      	cbnz	r2, 800c6d6 <__ieee754_expf+0x116>
 800c670:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800c674:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800c678:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c67c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800c680:	4770      	bx	lr
 800c682:	4b30      	ldr	r3, [pc, #192]	; (800c744 <__ieee754_expf+0x184>)
 800c684:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800c748 <__ieee754_expf+0x188>
 800c688:	eddf 6a30 	vldr	s13, [pc, #192]	; 800c74c <__ieee754_expf+0x18c>
 800c68c:	4413      	add	r3, r2
 800c68e:	edd3 7a00 	vldr	s15, [r3]
 800c692:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c696:	eeb0 7a40 	vmov.f32	s14, s0
 800c69a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c69e:	ee17 2a90 	vmov	r2, s15
 800c6a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c6a6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c6aa:	eddf 6a29 	vldr	s13, [pc, #164]	; 800c750 <__ieee754_expf+0x190>
 800c6ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c6b2:	e7be      	b.n	800c632 <__ieee754_expf+0x72>
 800c6b4:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 800c6b8:	d20b      	bcs.n	800c6d2 <__ieee754_expf+0x112>
 800c6ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c754 <__ieee754_expf+0x194>
 800c6be:	ee70 6a26 	vadd.f32	s13, s0, s13
 800c6c2:	eef4 6ae5 	vcmpe.f32	s13, s11
 800c6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6ca:	dd02      	ble.n	800c6d2 <__ieee754_expf+0x112>
 800c6cc:	ee30 0a25 	vadd.f32	s0, s0, s11
 800c6d0:	4770      	bx	lr
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	e7af      	b.n	800c636 <__ieee754_expf+0x76>
 800c6d6:	ee36 6a66 	vsub.f32	s12, s12, s13
 800c6da:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800c6de:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800c6e2:	bfb8      	it	lt
 800c6e4:	3264      	addlt	r2, #100	; 0x64
 800c6e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c6ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c6ee:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800c6f2:	ee17 3a90 	vmov	r3, s15
 800c6f6:	bfab      	itete	ge
 800c6f8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800c6fc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800c700:	ee00 3a10 	vmovge	s0, r3
 800c704:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800c758 <__ieee754_expf+0x198>
 800c708:	bfbc      	itt	lt
 800c70a:	ee00 3a10 	vmovlt	s0, r3
 800c70e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800c712:	4770      	bx	lr
 800c714:	00000000 	.word	0x00000000
 800c718:	42b17217 	.word	0x42b17217
 800c71c:	42cff1b5 	.word	0x42cff1b5
 800c720:	3eb17218 	.word	0x3eb17218
 800c724:	3f851591 	.word	0x3f851591
 800c728:	08020a84 	.word	0x08020a84
 800c72c:	08020a8c 	.word	0x08020a8c
 800c730:	3331bb4c 	.word	0x3331bb4c
 800c734:	b5ddea0e 	.word	0xb5ddea0e
 800c738:	388ab355 	.word	0x388ab355
 800c73c:	bb360b61 	.word	0xbb360b61
 800c740:	3e2aaaab 	.word	0x3e2aaaab
 800c744:	08020a7c 	.word	0x08020a7c
 800c748:	3fb8aa3b 	.word	0x3fb8aa3b
 800c74c:	3f317180 	.word	0x3f317180
 800c750:	3717f7d1 	.word	0x3717f7d1
 800c754:	7149f2ca 	.word	0x7149f2ca
 800c758:	0d800000 	.word	0x0d800000

0800c75c <_close>:
 800c75c:	4b02      	ldr	r3, [pc, #8]	; (800c768 <_close+0xc>)
 800c75e:	2258      	movs	r2, #88	; 0x58
 800c760:	601a      	str	r2, [r3, #0]
 800c762:	f04f 30ff 	mov.w	r0, #4294967295
 800c766:	4770      	bx	lr
 800c768:	20007cb4 	.word	0x20007cb4

0800c76c <_fstat>:
 800c76c:	4b02      	ldr	r3, [pc, #8]	; (800c778 <_fstat+0xc>)
 800c76e:	2258      	movs	r2, #88	; 0x58
 800c770:	601a      	str	r2, [r3, #0]
 800c772:	f04f 30ff 	mov.w	r0, #4294967295
 800c776:	4770      	bx	lr
 800c778:	20007cb4 	.word	0x20007cb4

0800c77c <_getpid>:
 800c77c:	4b02      	ldr	r3, [pc, #8]	; (800c788 <_getpid+0xc>)
 800c77e:	2258      	movs	r2, #88	; 0x58
 800c780:	601a      	str	r2, [r3, #0]
 800c782:	f04f 30ff 	mov.w	r0, #4294967295
 800c786:	4770      	bx	lr
 800c788:	20007cb4 	.word	0x20007cb4

0800c78c <_isatty>:
 800c78c:	4b02      	ldr	r3, [pc, #8]	; (800c798 <_isatty+0xc>)
 800c78e:	2258      	movs	r2, #88	; 0x58
 800c790:	601a      	str	r2, [r3, #0]
 800c792:	2000      	movs	r0, #0
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop
 800c798:	20007cb4 	.word	0x20007cb4

0800c79c <_kill>:
 800c79c:	4b02      	ldr	r3, [pc, #8]	; (800c7a8 <_kill+0xc>)
 800c79e:	2258      	movs	r2, #88	; 0x58
 800c7a0:	601a      	str	r2, [r3, #0]
 800c7a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c7a6:	4770      	bx	lr
 800c7a8:	20007cb4 	.word	0x20007cb4

0800c7ac <_lseek>:
 800c7ac:	4b02      	ldr	r3, [pc, #8]	; (800c7b8 <_lseek+0xc>)
 800c7ae:	2258      	movs	r2, #88	; 0x58
 800c7b0:	601a      	str	r2, [r3, #0]
 800c7b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c7b6:	4770      	bx	lr
 800c7b8:	20007cb4 	.word	0x20007cb4

0800c7bc <_read>:
 800c7bc:	4b02      	ldr	r3, [pc, #8]	; (800c7c8 <_read+0xc>)
 800c7be:	2258      	movs	r2, #88	; 0x58
 800c7c0:	601a      	str	r2, [r3, #0]
 800c7c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c7c6:	4770      	bx	lr
 800c7c8:	20007cb4 	.word	0x20007cb4

0800c7cc <_exit>:
 800c7cc:	e7fe      	b.n	800c7cc <_exit>
	...

0800c7d0 <_init>:
 800c7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d2:	bf00      	nop
 800c7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7d6:	bc08      	pop	{r3}
 800c7d8:	469e      	mov	lr, r3
 800c7da:	4770      	bx	lr

0800c7dc <_fini>:
 800c7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7de:	bf00      	nop
 800c7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7e2:	bc08      	pop	{r3}
 800c7e4:	469e      	mov	lr, r3
 800c7e6:	4770      	bx	lr
